function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = it.call(o);
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

var Disposable;

(function (Disposable) {
  function is(arg) {
    return !!arg && _typeof(arg) === 'object' && 'dispose' in arg && typeof arg.dispose === 'function';
  }

  Disposable.is = is;

  function create(func) {
    return {
      dispose: func
    };
  }

  Disposable.create = create;
  Disposable.NONE = create(function () {});
})(Disposable || (Disposable = {}));

var _Symbol$iterator;
var Event;

(function (Event) {
  Event.None = function () {
    return Disposable.NONE;
  };

  function map(event, mapFunc) {
    return function (listener, context) {
      return event(function (i) {
        return listener.call(context, mapFunc(i));
      }, undefined);
    };
  }

  Event.map = map;
})(Event || (Event = {}));

_Symbol$iterator = Symbol.iterator;

var CallbackList = /*#__PURE__*/function (_Symbol$iterator2) {
  function CallbackList() {
    var mono = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    _classCallCheck(this, CallbackList);

    this.mono = void 0;
    this._callbacks = void 0;
    this.mono = mono;
  }

  _createClass(CallbackList, [{
    key: "callbacks",
    get: function get() {
      if (!this._callbacks) {
        this._callbacks = [];
      }

      return this._callbacks;
    }
  }, {
    key: "length",
    get: function get() {
      return this.callbacks.length;
    }
  }, {
    key: "add",
    value: function add(callback) {
      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      this.callbacks.push([callback, context]);
    }
  }, {
    key: "remove",
    value: function remove(callback) {
      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      if (this.isEmpty()) return;
      var foundCallbackWithDifferentContext = false;

      for (var i = 0; i < this.length; i += 1) {
        if (this.callbacks[i][0] === callback) {
          if (this.callbacks[i][1] === context) {
            // remove when callback & context match
            this.callbacks.splice(i, 1);
            return;
          }

          foundCallbackWithDifferentContext = true;
        }
      }

      if (foundCallbackWithDifferentContext) {
        throw new Error('You should remove it with the same context you add it');
      }
    }
  }, {
    key: _Symbol$iterator2,
    value: function value() {
      if (this.isEmpty()) {
        return [][Symbol.iterator]();
      }

      var callbacks = this.callbacks.slice(0);
      return callbacks.map(function (callback) {
        return function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return callback[0].apply(callback[1], args);
        };
      })[Symbol.iterator]();
    }
  }, {
    key: "invoke",
    value: function invoke() {
      var ret = [];

      var _iterator = _createForOfIteratorHelper(this),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var callback = _step.value;

          try {
            ret.push(callback.apply(void 0, arguments));
          } catch (e) {
            console.error(e);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return ret;
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this.callbacks.length === 0;
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this._callbacks = undefined;
    }
  }]);

  return CallbackList;
}(_Symbol$iterator);

var Emitter = /*#__PURE__*/function () {
  function Emitter() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Emitter);

    this.options = void 0;
    this._event = void 0;
    this._callbacks = void 0;
    this.disposed = false;
    this.options = options;
  }

  _createClass(Emitter, [{
    key: "callbacks",
    get: function get() {
      if (!this._callbacks) {
        this._callbacks = new CallbackList();
      }

      return this._callbacks;
    }
    /**
     * For the public to allow to subscribe
     * to events from this Emitter
     */

  }, {
    key: "event",
    get: function get() {
      var _this = this;

      if (!this._event) {
        this._event = function (listener, thisArgs) {
          if (_this.options.onFirstListenerAdd && _this.callbacks.isEmpty()) {
            _this.options.onFirstListenerAdd(_this);
          }

          _this.callbacks.add(listener, thisArgs);

          var result = {
            dispose: function dispose() {
              result.dispose = Emitter.noop;

              if (!_this.disposed) {
                _this.callbacks.remove(listener, thisArgs);

                result.dispose = Emitter.noop;

                if (_this.options.onLastListenerRemove && _this.callbacks.isEmpty()) {
                  _this.options.onLastListenerRemove(_this);
                }
              }
            }
          };
          return result;
        };
      }

      return this._event;
    }
  }, {
    key: "fire",
    value: function fire(event) {
      if (!this._callbacks) {
        return;
      }

      this.callbacks.invoke(event);
    }
    /**
     * Process each listener one by one.
     * Return `false` to stop iterating over the listeners, `true` to continue.
     */

  }, {
    key: "sequence",
    value: function () {
      var _sequence = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(processor) {
        var _iterator2, _step2, listener, result;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _iterator2 = _createForOfIteratorHelper(this.callbacks);
                _context.prev = 1;

                _iterator2.s();

              case 3:
                if ((_step2 = _iterator2.n()).done) {
                  _context.next = 12;
                  break;
                }

                listener = _step2.value;
                _context.next = 7;
                return processor(listener);

              case 7:
                result = _context.sent;

                if (result) {
                  _context.next = 10;
                  break;
                }

                return _context.abrupt("break", 12);

              case 10:
                _context.next = 3;
                break;

              case 12:
                _context.next = 17;
                break;

              case 14:
                _context.prev = 14;
                _context.t0 = _context["catch"](1);

                _iterator2.e(_context.t0);

              case 17:
                _context.prev = 17;

                _iterator2.f();

                return _context.finish(17);

              case 20:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[1, 14, 17, 20]]);
      }));

      function sequence(_x) {
        return _sequence.apply(this, arguments);
      }

      return sequence;
    }()
  }, {
    key: "dispose",
    value: function dispose() {
      if (this._callbacks) {
        this._callbacks.dispose();

        this._callbacks = undefined;
      }

      this.disposed = true;
    }
  }]);

  return Emitter;
}();

Emitter.noop = function () {};

var shortcutEvent = Object.freeze(Object.assign(function (callback, context) {
  var handle = setTimeout(callback.bind(context), 0);
  return {
    dispose: function dispose() {
      clearTimeout(handle);
    }
  };
}, {
  maxListeners: 0
}));
var CancellationToken;

(function (CancellationToken) {
  CancellationToken.None = Object.freeze({
    isCancellationRequested: false,
    onCancellationRequested: Event.None
  });
  CancellationToken.Cancelled = Object.freeze({
    isCancellationRequested: true,
    onCancellationRequested: shortcutEvent
  });
})(CancellationToken || (CancellationToken = {}));

var MutableToken = /*#__PURE__*/function () {
  function MutableToken() {
    _classCallCheck(this, MutableToken);

    this._isCancelled = false;
    this._emitter = void 0;
  }

  _createClass(MutableToken, [{
    key: "cancel",
    value: function cancel() {
      if (!this._isCancelled) {
        this._isCancelled = true;

        if (this._emitter) {
          this._emitter.fire(undefined);

          this._emitter = undefined;
        }
      }
    }
  }, {
    key: "isCancellationRequested",
    get: function get() {
      return this._isCancelled;
    }
  }, {
    key: "onCancellationRequested",
    get: function get() {
      if (this._isCancelled) {
        return shortcutEvent;
      }

      if (!this._emitter) {
        this._emitter = new Emitter();
      }

      return this._emitter.event;
    }
  }]);

  return MutableToken;
}();

var CancellationTokenSource = /*#__PURE__*/function () {
  function CancellationTokenSource() {
    _classCallCheck(this, CancellationTokenSource);

    this._token = void 0;
  }

  _createClass(CancellationTokenSource, [{
    key: "token",
    get: function get() {
      if (!this._token) {
        // be lazy and create the token only when
        // actually needed
        this._token = new MutableToken();
      }

      return this._token;
    }
  }, {
    key: "cancel",
    value: function cancel() {
      if (!this._token) {
        // save an object by returning the default
        // cancelled token when cancellation happens
        // before someone asks for the token
        this._token = CancellationToken.Cancelled;
      } else if (this._token !== CancellationToken.Cancelled) {
        this._token.cancel();
      }
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this.cancel();
    }
  }]);

  return CancellationTokenSource;
}();
var cancelledMessage = 'Cancelled';
function cancelled() {
  return new Error(cancelledMessage);
}
function isCancelled(err) {
  return !!err && err.message === cancelledMessage;
}
function checkCancelled(token) {
  if (!!token && token.isCancellationRequested) {
    throw cancelled();
  }
}

var DisposableCollection = /*#__PURE__*/function () {
  function DisposableCollection() {
    _classCallCheck(this, DisposableCollection);

    this.disposables = [];
    this.onDisposeEmitter = new Emitter();
    this.disposingElements = false;

    for (var _len = arguments.length, toDispose = new Array(_len), _key = 0; _key < _len; _key++) {
      toDispose[_key] = arguments[_key];
    }

    this.pushAll(toDispose);
  }

  _createClass(DisposableCollection, [{
    key: "disposed",
    get: function get() {
      return this.disposables.length === 0;
    }
  }, {
    key: "onDispose",
    get: function get() {
      return this.onDisposeEmitter.event;
    }
  }, {
    key: "checkDisposed",
    value: function checkDisposed() {
      if (this.disposed && !this.disposingElements) {
        this.onDisposeEmitter.fire(undefined);
        this.onDisposeEmitter.dispose();
      }
    }
  }, {
    key: "dispose",
    value: function dispose() {
      if (this.disposed || this.disposingElements) {
        return;
      }

      this.disposingElements = true;

      while (!this.disposed) {
        try {
          this.disposables.pop().dispose();
        } catch (e) {
          console.error(e);
        }
      }

      this.disposingElements = false;
      this.checkDisposed();
    }
  }, {
    key: "push",
    value: function push(disposable) {
      var _this = this;

      var disposables = this.disposables;
      disposables.push(disposable);
      var originalDispose = disposable.dispose.bind(disposable);
      var toRemove = Disposable.create(function () {
        var index = disposables.indexOf(disposable);

        if (index !== -1) {
          disposables.splice(index, 1);
        }

        _this.checkDisposed();
      });

      disposable.dispose = function () {
        toRemove.dispose();
        originalDispose();
      };

      return toRemove;
    }
  }, {
    key: "pushAll",
    value: function pushAll(disposables) {
      var _this2 = this;

      return disposables.map(function (disposable) {
        return _this2.push(disposable);
      });
    }
  }]);

  return DisposableCollection;
}();

/* eslint-disable @typescript-eslint/no-explicit-any */
var noop = function noop() {};

var Deferred = function Deferred() {
  var _this = this;

  _classCallCheck(this, Deferred);

  this.resolve = noop;
  this.reject = noop;
  this.promise = void 0;
  this.promise = new Promise(function (resolve, reject) {
    _this.resolve = resolve;
    _this.reject = reject;
  });
};

/**
 * @returns resolves after a specified number of milliseconds
 * @throws cancelled if a given token is cancelled before a specified number of milliseconds
 */

function timeout(ms) {
  var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CancellationToken.None;
  var deferred = new Deferred();
  var handle = setTimeout(function () {
    return deferred.resolve();
  }, ms);
  token.onCancellationRequested(function () {
    clearTimeout(handle);
    deferred.reject(cancelled());
  });
  return deferred.promise;
}
function retry(_x, _x2, _x3) {
  return _retry.apply(this, arguments);
}

function _retry() {
  _retry = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(task, delay, retries) {
    var lastError, i;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            i = 0;

          case 1:
            if (!(i < retries)) {
              _context.next = 16;
              break;
            }

            _context.prev = 2;
            _context.next = 5;
            return task();

          case 5:
            return _context.abrupt("return", _context.sent);

          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](2);
            lastError = _context.t0; // eslint-disable-next-line no-await-in-loop

            _context.next = 13;
            return timeout(delay);

          case 13:
            i += 1;
            _context.next = 1;
            break;

          case 16:
            throw lastError;

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 8]]);
  }));
  return _retry.apply(this, arguments);
}

export { CancellationToken, CancellationTokenSource, Deferred, Disposable, DisposableCollection, Emitter, Event, cancelled, checkCancelled, isCancelled, retry, timeout };
