import React from 'react';
import { Form, Tabs } from 'antd';
import classNames from 'classnames';
import { FormInstance, FormProps } from 'antd/es/form';
import 'antd/es/form/style';
import 'antd/es/tabs/style';
import { ControlMap } from './control-map';
import '../components';
import styles from './index.less';

export interface TOption {
  title: string;
  value: string | number | boolean;
}

export type UpdateReasonField =
  | string
  | number
  | (string | number)[]
  | undefined; // 为 undefined 时说明这一项是一个函数，不明确依赖某个特殊字段

export interface TDependency {
  name: UpdateReasonField; // 依赖的字段
  condition: string | number | boolean | { (args: any): boolean }; // 条件值
  hidden?: boolean; // 是否被隐藏
  disabled?: boolean; // 是否被禁用
}

export interface ControlSchema {
  type: 'String' | 'Number' | 'Boolean';
  shape: string;
  name: string | number | (string | number)[];
  label: string;
  defaultValue: string | number | boolean;
  value: string | number | boolean;
  disabled: boolean;
  required: boolean;
  tooltip?: string;
  extra?: string;
  placeholder?: string;
  hidden: boolean;
  options?: TOption[];
  originData?: Record<string, any>; // 原始数据
  dependencies?: TDependency[];
}

export interface TTab {
  name: string;
  controls: ControlSchema[];
}

export type Schema = TTab[];

interface Props extends FormProps {
  schema: Schema;
  className?: string;
  form?: FormInstance;
}

const { TabPane } = Tabs;

export const SchemaForm: React.FC<Props> = props => {
  const { schema, form: formInstance, className, ...otherProps } = props;
  const [form] = Form.useForm(formInstance);

  return (
    <Form
      size="small"
      form={form}
      layout="vertical"
      className={classNames(styles.form, className)}
      {...otherProps}
    >
      <Tabs
        type="card"
        defaultActiveKey={schema[0]?.name}
        className={classNames(styles.tabs, styles.controlNumberTab, {
          [styles.singleTab]: schema?.length === 1,
          [styles.coupleTab]: schema?.length === 2,
          [styles.ternateTab]: schema?.length === 3,
        })}
      >
        {schema.map((tab: TTab) => {
          const { name: tabName, controls } = tab;
          return (
            <TabPane key={tabName} tab={tabName}>
              {controls.map(control => {
                const { shape, name: controlName } = control;
                const ControlComponent = ControlMap.getComponent(shape);
                if (!ControlComponent) {
                  // eslint-disable-next-line no-console
                  console.error('未找到对应的控件:', shape);
                  return null;
                }
                return (
                  <ControlComponent key={controlName} controlSchema={control} />
                );
              })}
            </TabPane>
          );
        })}
      </Tabs>
    </Form>
  );
};
