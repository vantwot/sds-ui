{"version":3,"sources":["../../src/core/BaseModel.ts"],"names":["BlendType","gl","lazyInject","TYPES","rgb2arr","color","BlendTypes","BaseModel","IGlobalConfigService","IShaderModuleService","layer","rendererService","getContainer","get","IRendererService","styleAttributeService","IStyleAttributeService","mapService","IMapService","iconService","IIconService","fontService","IFontService","cameraService","ICameraService","layerService","ILayerService","registerBuiltinAttributes","startModelAnimate","createTexture2D","DATA_TEXTURE_WIDTH","rowCount","cellLength","cellProperties","cacheStyleProperties","opacity","undefined","strokeOpacity","strokeWidth","stroke","offsets","stylePropertyesExist","hasOpacity","hasStrokeOpacity","hasStrokeWidth","hasStroke","hasOffsets","dataTextureTest","getOESTextureFloat","dataTexture","data","Uint8ClampedArray","mag","NEAREST","min","width","height","options","isUpdate","clearLastCalRes","push","attr","count","isStaticColor","isOffsetStatic","strokeColor","length","d","i","cellData","cellPropertiesLayouts","layout","value","patchMod","encodeData","encodeDatalength","Math","ceil","totalLength","patchData","getLayerConfig","blend","Error","option","enable","duration","interval","trailLength","animateOption","setAnimateStartTime"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,SACEA,SADF,EAEEC,EAFF,EAwBEC,UAxBF,EA0BEC,KA1BF,QA2BO,eA3BP;AA4BA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,KAAT,QAAsB,UAAtB;AAEA,SAASC,UAAT,QAA2B,gBAA3B;IA0BqBC,S,WAkClBL,UAAU,CAACC,KAAK,CAACK,oBAAP,C,UASVN,UAAU,CAACC,KAAK,CAACM,oBAAP,C;AAaX,qBAAYC,KAAZ,EAA2B;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACzB,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,eAAL,GAAuBD,KAAK,CACzBE,YADoB,GAEpBC,GAFoB,CAEEV,KAAK,CAACW,gBAFR,CAAvB;AAGA,SAAKC,qBAAL,GAA6BL,KAAK,CAC/BE,YAD0B,GAE1BC,GAF0B,CAEEV,KAAK,CAACa,sBAFR,CAA7B;AAGA,SAAKC,UAAL,GAAkBP,KAAK,CAACE,YAAN,GAAqBC,GAArB,CAAsCV,KAAK,CAACe,WAA5C,CAAlB;AACA,SAAKC,WAAL,GAAmBT,KAAK,CACrBE,YADgB,GAEhBC,GAFgB,CAEEV,KAAK,CAACiB,YAFR,CAAnB;AAGA,SAAKC,WAAL,GAAmBX,KAAK,CACrBE,YADgB,GAEhBC,GAFgB,CAEEV,KAAK,CAACmB,YAFR,CAAnB;AAGA,SAAKC,aAAL,GAAqBb,KAAK,CACvBE,YADkB,GAElBC,GAFkB,CAEEV,KAAK,CAACqB,cAFR,CAArB;AAGA,SAAKC,YAAL,GAAoBf,KAAK,CACtBE,YADiB,GAEjBC,GAFiB,CAEEV,KAAK,CAACuB,aAFR,CAApB;AAKA,SAAKC,yBAAL;AAEA,SAAKC,iBAAL;AAEA,QAAQC,eAAR,GAA4B,KAAKlB,eAAjC,CAAQkB,eAAR;AACA,SAAKA,eAAL,GAAuBA,eAAvB;AACA,SAAKC,kBAAL,GAA0B,IAA1B;AACA,SAAKC,QAAL,GAAgB,CAAhB;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,oBAAL,GAA4B;AAC1BC,MAAAA,OAAO,EAAEC,SADiB;AAE1BC,MAAAA,aAAa,EAAED,SAFW;AAG1BE,MAAAA,WAAW,EAAEF,SAHa;AAI1BG,MAAAA,MAAM,EAAEH,SAJkB;AAK1BI,MAAAA,OAAO,EAAEJ;AALiB,KAA5B;AAOA,SAAKK,oBAAL,GAA4B;AAC1BC,MAAAA,UAAU,EAAE,CADc;AAE1BC,MAAAA,gBAAgB,EAAE,CAFQ;AAG1BC,MAAAA,cAAc,EAAE,CAHU;AAI1BC,MAAAA,SAAS,EAAE,CAJe;AAK1BC,MAAAA,UAAU,EAAE;AALc,KAA5B;AAOA,SAAKC,eAAL,GAAuB,KAAKtB,YAAL,CAAkBuB,kBAAlB,EAAvB;;AAEA,QAAI,CAAC,KAAKD,eAAV,EAA2B;AACzB,WAAKE,WAAL,GAAmB,KAAKpB,eAAL,CAAqB;AACtCqB,QAAAA,IAAI,EAAE,IAAIC,iBAAJ,CAAsB,CAAtB,CADgC;AAEtCC,QAAAA,GAAG,EAAEnD,EAAE,CAACoD,OAF8B;AAGtCC,QAAAA,GAAG,EAAErD,EAAE,CAACoD,OAH8B;AAItCE,QAAAA,KAAK,EAAE,CAJ+B;AAKtCC,QAAAA,MAAM,EAAE;AAL8B,OAArB,CAAnB;AAOD;AACF;;;;WAOD,2BAAyB;AACvB,WAAKvB,cAAL,GAAsB,EAAtB;AACA,WAAKD,UAAL,GAAkB,CAAlB;AACA,WAAKS,oBAAL,GAA4B;AAE1BC,QAAAA,UAAU,EAAE,CAFc;AAG1BC,QAAAA,gBAAgB,EAAE,CAHQ;AAI1BC,QAAAA,cAAc,EAAE,CAJU;AAK1BC,QAAAA,SAAS,EAAE,CALe;AAM1BC,QAAAA,UAAU,EAAE;AANc,OAA5B;AAQD;;;WAED,6BAA2B;AACzB,UAAI,KAAKC,eAAT,EAA0B;AACxB,eAAO,CACL,KAAKhB,QADA,EAEL,KAAKD,kBAFA,EAGL,GAHK,EAIL,GAJK,EAKL,KAAKW,oBAAL,CAA0BC,UALrB,EAML,KAAKD,oBAAL,CAA0BE,gBANrB,EAOL,KAAKF,oBAAL,CAA0BG,cAPrB,EAQL,KAAKH,oBAAL,CAA0BI,SARrB,EASL,KAAKJ,oBAAL,CAA0BK,UATrB,EAUL,GAVK,EAWL,GAXK,EAYL,GAZK,EAaL,GAbK,EAcL,GAdK,EAeL,GAfK,EAgBL,GAhBK,CAAP;AAkBD,OAnBD,MAmBO;AACL,eAAO,CACL,GADK,EAEL,GAFK,EAGL,GAHK,EAIL,GAJK,EAKL,GALK,EAML,GANK,EAOL,GAPK,EAQL,GARK,EASL,GATK,EAUL,GAVK,EAWL,GAXK,EAYL,GAZK,EAaL,GAbK,EAcL,GAdK,EAeL,GAfK,EAgBL,CAAC,GAhBI,CAAP;AAkBD;AACF;;;WAOD,+BAA6BW,OAA7B,EAOY;AACV,UAAIC,QAAQ,GAAG,KAAf;;AACA,UAAI,CAAC,SAAQD,OAAO,CAACtB,OAAhB,EAAyB,KAAKD,oBAAL,CAA0BC,OAAnD,CAAL,EAAkE;AAChEuB,QAAAA,QAAQ,GAAG,IAAX;AACA,aAAKxB,oBAAL,CAA0BC,OAA1B,GAAoCsB,OAAO,CAACtB,OAA5C;AACD;;AACD,UACE,CAAC,SAAQsB,OAAO,CAACpB,aAAhB,EAA+B,KAAKH,oBAAL,CAA0BG,aAAzD,CADH,EAEE;AACAqB,QAAAA,QAAQ,GAAG,IAAX;AACA,aAAKxB,oBAAL,CAA0BG,aAA1B,GAA0CoB,OAAO,CAACpB,aAAlD;AACD;;AACD,UAAI,CAAC,SAAQoB,OAAO,CAACnB,WAAhB,EAA6B,KAAKJ,oBAAL,CAA0BI,WAAvD,CAAL,EAA0E;AACxEoB,QAAAA,QAAQ,GAAG,IAAX;AACA,aAAKxB,oBAAL,CAA0BI,WAA1B,GAAwCmB,OAAO,CAACnB,WAAhD;AACD;;AACD,UAAI,CAAC,SAAQmB,OAAO,CAAClB,MAAhB,EAAwB,KAAKL,oBAAL,CAA0BK,MAAlD,CAAL,EAAgE;AAC9DmB,QAAAA,QAAQ,GAAG,IAAX;AACA,aAAKxB,oBAAL,CAA0BK,MAA1B,GAAmCkB,OAAO,CAAClB,MAA3C;AACD;;AACD,UAAI,CAAC,SAAQkB,OAAO,CAACjB,OAAhB,EAAyB,KAAKN,oBAAL,CAA0BM,OAAnD,CAAL,EAAkE;AAChEkB,QAAAA,QAAQ,GAAG,IAAX;AACA,aAAKxB,oBAAL,CAA0BM,OAA1B,GAAoCiB,OAAO,CAACjB,OAA5C;AACD;;AACD,UAAI,KAAKS,WAAL,KAAqBb,SAAzB,EAAoC;AAClCsB,QAAAA,QAAQ,GAAG,IAAX;AACD;;AACD,aAAOA,QAAP;AACD;;;WAKD,8BAA4BD,OAA5B,EAMG;AACD,WAAKE,eAAL;;AAEA,UAAIF,OAAO,CAACtB,OAAR,KAAoBC,SAApB,IAAiC,CAAC,UAASqB,OAAO,CAACtB,OAAjB,CAAtC,EAAiE;AAE/D,aAAKF,cAAL,CAAoB2B,IAApB,CAAyB;AAAEC,UAAAA,IAAI,EAAE,SAAR;AAAmBC,UAAAA,KAAK,EAAE;AAA1B,SAAzB;AACA,aAAKrB,oBAAL,CAA0BC,UAA1B,GAAuC,CAAvC;AACA,aAAKV,UAAL,IAAmB,CAAnB;AACD;;AAED,UACEyB,OAAO,CAACpB,aAAR,KAA0BD,SAA1B,IACA,CAAC,UAASqB,OAAO,CAACpB,aAAjB,CAFH,EAGE;AAEA,aAAKJ,cAAL,CAAoB2B,IAApB,CAAyB;AAAEC,UAAAA,IAAI,EAAE,eAAR;AAAyBC,UAAAA,KAAK,EAAE;AAAhC,SAAzB;AACA,aAAKrB,oBAAL,CAA0BE,gBAA1B,GAA6C,CAA7C;AACA,aAAKX,UAAL,IAAmB,CAAnB;AACD;;AAED,UAAIyB,OAAO,CAACnB,WAAR,KAAwBF,SAAxB,IAAqC,CAAC,UAASqB,OAAO,CAACnB,WAAjB,CAA1C,EAAyE;AAEvE,aAAKL,cAAL,CAAoB2B,IAApB,CAAyB;AAAEC,UAAAA,IAAI,EAAE,aAAR;AAAuBC,UAAAA,KAAK,EAAE;AAA9B,SAAzB;AACA,aAAKrB,oBAAL,CAA0BG,cAA1B,GAA2C,CAA3C;AACA,aAAKZ,UAAL,IAAmB,CAAnB;AACD;;AAED,UAAIyB,OAAO,CAAClB,MAAR,KAAmBH,SAAnB,IAAgC,CAAC,KAAK2B,aAAL,CAAmBN,OAAO,CAAClB,MAA3B,CAArC,EAAyE;AAEvE,aAAKN,cAAL,CAAoB2B,IAApB,CAAyB;AAAEC,UAAAA,IAAI,EAAE,QAAR;AAAkBC,UAAAA,KAAK,EAAE;AAAzB,SAAzB;AACA,aAAKrB,oBAAL,CAA0BI,SAA1B,GAAsC,CAAtC;AACA,aAAKb,UAAL,IAAmB,CAAnB;AACD;;AAED,UACEyB,OAAO,CAACjB,OAAR,KAAoBJ,SAApB,IACA,CAAC,KAAK4B,cAAL,CAAoBP,OAAO,CAACjB,OAA5B,CAFH,EAGE;AAEA,aAAKP,cAAL,CAAoB2B,IAApB,CAAyB;AAAEC,UAAAA,IAAI,EAAE,SAAR;AAAmBC,UAAAA,KAAK,EAAE;AAA1B,SAAzB;AACA,aAAKrB,oBAAL,CAA0BK,UAA1B,GAAuC,CAAvC;AACA,aAAKd,UAAL,IAAmB,CAAnB;AACD;AAEF;;;WAOD,uBAAqBO,MAArB,EAAkD;AAChD,UAAI,UAASA,MAAT,CAAJ,EAAsB;AACpB,YAAIlC,KAAK,CAACkC,MAAD,CAAT,EAAmB;AACjB,iBAAO,IAAP;AACD,SAFD,MAEO;AACL,iBAAO,KAAP;AACD;AACF;;AACD,aAAO,KAAP;AACD;;;WAMD,wBAAsBA,MAAtB,EAA0C;AACxC,UAAI,KAAKwB,aAAL,CAAmBxB,MAAnB,CAAJ,EAAgC;AAC9B,YAAM0B,WAAW,GAAG7D,OAAO,CAACmC,MAAD,CAA3B;AACA0B,QAAAA,WAAW,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAAC,CAAD,CAA5B,GAAkC,CAAnD;AACAA,QAAAA,WAAW,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAAC,CAAD,CAA5B,GAAkC,CAAnD;AACAA,QAAAA,WAAW,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAAC,CAAD,CAA5B,GAAkC,CAAnD;AACAA,QAAAA,WAAW,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAAC,CAAD,CAA5B,GAAkC,CAAnD;AACA,eAAOA,WAAP;AACD,OAPD,MAOO;AACL,eAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAP;AACD;AACF;;;WAOD,wBAAsBzB,OAAtB,EAA4C;AAC1C,UACE,SAAQA,OAAR,KACAA,OAAO,CAAC0B,MAAR,KAAmB,CADnB,IAEA,UAAS1B,OAAO,CAAC,CAAD,CAAhB,CAFA,IAGA,UAASA,OAAO,CAAC,CAAD,CAAhB,CAJF,EAKE;AACA,eAAO,IAAP;AACD,OAPD,MAOO;AACL,eAAO,KAAP;AACD;AACF;;;WAOD,kBAAgB2B,CAAhB,EAA6BL,KAA7B,EAA4C;AAC1C,WAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAApB,EAA2BM,CAAC,EAA5B,EAAgC;AAC9BD,QAAAA,CAAC,CAACP,IAAF,CAAO,CAAC,CAAR;AACD;AACF;;;WAQD,mBACEO,CADF,EAEEE,QAFF,EAGEC,qBAHF,EAIE;AAAA,iDACqBA,qBADrB;AAAA;;AAAA;AACA,4DAA4C;AAAA,cAAjCC,MAAiC;AAC1C,cAAQV,IAAR,GAAwBU,MAAxB,CAAQV,IAAR;AAAA,cAAcC,KAAd,GAAwBS,MAAxB,CAAcT,KAAd;AAEA,cAAMU,KAAK,GAAGH,QAAQ,CAACR,IAAD,CAAtB;;AACA,cAAIW,KAAJ,EAAW;AAET,gBAAIX,IAAI,KAAK,QAAb,EAAuB;AACrBM,cAAAA,CAAC,CAACP,IAAF,OAAAO,CAAC,qBAAS/D,OAAO,CAACoE,KAAD,CAAhB,EAAD;AACD,aAFD,MAEO,IAAIX,IAAI,KAAK,SAAb,EAAwB;AAC7B,kBAAI,KAAKG,cAAL,CAAoBQ,KAApB,CAAJ,EAAgC;AAC9BL,gBAAAA,CAAC,CAACP,IAAF,CAAO,CAACY,KAAK,CAAC,CAAD,CAAb,EAAkBA,KAAK,CAAC,CAAD,CAAvB;AACD,eAFD,MAEO;AACLL,gBAAAA,CAAC,CAACP,IAAF,CAAO,CAAP,EAAU,CAAV;AACD;AACF,aANM,MAMA;AACLO,cAAAA,CAAC,CAACP,IAAF,CAAO,UAASY,KAAT,IAAkBA,KAAlB,GAA0B,GAAjC;AACD;AACF,WAbD,MAaO;AAEL,iBAAKC,QAAL,CAAcN,CAAd,EAAiBL,KAAjB;AACD;AACF;AAtBD;AAAA;AAAA;AAAA;AAAA;AAuBD;;;WASD,sBACE9B,UADF,EAEE0C,UAFF,EAGEJ,qBAHF,EAIqB;AACnB,UAAMK,gBAAgB,GAAGD,UAAU,CAACR,MAApC;AACA,UAAMnC,QAAQ,GAAG6C,IAAI,CAACC,IAAL,CACdF,gBAAgB,GAAG3C,UAApB,GAAkC,KAAKF,kBADxB,CAAjB;AAIA,UAAMgD,WAAW,GAAG/C,QAAQ,GAAG,KAAKD,kBAApC;AACA,UAAMqC,CAAW,GAAG,EAApB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,gBAApB,EAAsCP,CAAC,EAAvC,EAA2C;AAEzC,YAAMC,QAAQ,GAAGK,UAAU,CAACN,CAAD,CAA3B;AACA,aAAKW,SAAL,CAAeZ,CAAf,EAAkBE,QAAlB,EAA4BC,qBAA5B;AACD;;AACD,WAAK,IAAIF,EAAC,GAAGD,CAAC,CAACD,MAAf,EAAuBE,EAAC,GAAGU,WAA3B,EAAwCV,EAAC,EAAzC,EAA6C;AAE3CD,QAAAA,CAAC,CAACP,IAAF,CAAO,CAAC,CAAR;AACD;;AAED,aAAO;AAAEV,QAAAA,IAAI,EAAEiB,CAAR;AAAWZ,QAAAA,KAAK,EAAE,KAAKzB,kBAAvB;AAA2C0B,QAAAA,MAAM,EAAEzB;AAAnD,OAAP;AACD;;;WAID,oBAAiC;AAC/B,kCAA6B,KAAKrB,KAAL,CAAWsE,cAAX,EAA7B;AAAA,yDAAQC,KAAR;AAAA,UAAQA,KAAR,uCAAgB,QAAhB;;AACA,aAAO3E,UAAU,CAACN,SAAS,CAACiF,KAAD,CAAV,CAAjB;AACD;;;WACD,2BAAkC;AAChC,aAAO,EAAP;AACD;;;WACD,wBAAqC;AACnC,YAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACD;;;WAED,8BAA2C;AACzC,aAAO,EAAP;AACD;;;WAED,sBAA6B;AAC3B,aAAO,KAAP;AACD;;;WACD,uBAA+B;AAC7B,YAAM,IAAIA,KAAJ,CAAU,yBAAV,CAAN;AACD;;;WACD,sBAA8B;AAC5B,YAAM,IAAIA,KAAJ,CAAU,yBAAV,CAAN;AACD;;;WACD,uBAAqB;AACnB;AACD;;;WACD,wBAKE;AACA,YAAM,IAAIA,KAAJ,CAAU,yBAAV,CAAN;AACD;;;WACD,kBAAgB;AACd,YAAM,IAAIA,KAAJ,CAAU,yBAAV,CAAN;AACD;;;WACD,qCAAsC;AACpC,YAAM,IAAIA,KAAJ,CAAU,yBAAV,CAAN;AACD;;;WACD,6BAA8BC,MAA9B,EAAgE;AAC9D,aAAO,CACLA,MAAM,CAACC,MAAP,GAAgB,CAAhB,GAAoB,GADf,EAELD,MAAM,CAACE,QAAP,IAAmB,GAFd,EAGLF,MAAM,CAACG,QAAP,IAAmB,GAHd,EAILH,MAAM,CAACI,WAAP,IAAsB,GAJjB,CAAP;AAMD;;;WACD,6BAA8B;AAC5B,iBAA0B,KAAK7E,KAAL,CAAWsE,cAAX,EAA1B;AAAA,UAAQQ,aAAR,QAAQA,aAAR;;AACA,UAAIA,aAAa,CAACJ,MAAlB,EAA0B;AACxB,aAAK1E,KAAL,CAAW+E,mBAAX;AACD;AACF;;;;;;;;;;;;;;;SA1ckBlF,S","sourcesContent":["import {\n  BlendType,\n  gl,\n  IAnimateOption,\n  IAttribute,\n  IBlendOptions,\n  ICameraService,\n  IElements,\n  IEncodeFeature,\n  IFontService,\n  IGlobalConfigService,\n  IIconService,\n  ILayer,\n  ILayerConfig,\n  ILayerModel,\n  ILayerService,\n  IMapService,\n  IModel,\n  IModelUniform,\n  IRendererService,\n  IShaderModuleService,\n  IStyleAttributeService,\n  ITexture2D,\n  ITexture2DInitializationOptions,\n  lazyInject,\n  Triangulation,\n  TYPES,\n} from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport { color } from 'd3-color';\nimport { isArray, isEqual, isFunction, isNumber, isString } from 'lodash';\nimport { BlendTypes } from '../utils/blend';\n\nexport type styleSingle =\n  | number\n  | string\n  | [string, (single: any) => number]\n  | [string, [number, number]];\nexport type styleOffset =\n  | string\n  | [number, number]\n  | [string, (single: any) => number];\nexport type styleColor =\n  | string\n  | [string, (single: any) => string]\n  | [string, [string, string]];\nexport interface IDataTextureFrame {\n  data: number[];\n  width: number;\n  height: number;\n}\n\nexport interface ICellProperty {\n  attr: string;\n  count: number;\n}\n\nexport default class BaseModel<ChildLayerStyleOptions = {}>\n  implements ILayerModel {\n  public triangulation: Triangulation;\n\n  // style texture data mapping\n  public createTexture2D: (\n    options: ITexture2DInitializationOptions,\n  ) => ITexture2D;\n\n  protected layer: ILayer;\n  protected dataTexture: ITexture2D; // 用于数据传递的数据纹理\n  protected DATA_TEXTURE_WIDTH: number; // 默认有多少列（宽度）\n  protected rowCount: number; // 计算得到的当前数据纹理有多少行（高度）\n  protected cacheStyleProperties: {\n    // 记录存储上一次样式字段的值\n    opacity: styleSingle | undefined;\n    strokeOpacity: styleSingle | undefined;\n    strokeWidth: styleSingle | undefined;\n    stroke: styleColor | undefined;\n    offsets: styleOffset | undefined;\n  };\n  protected cellLength: number; // 单个 cell 的长度\n  protected cellProperties: ICellProperty[]; // 需要进行数据映射的属性集合\n  protected cellTypeLayout: number[];\n  protected stylePropertyesExist: {\n    // 记录 style 属性是否存在的中间变量\n    hasOpacity: number;\n    hasStrokeOpacity: number;\n    hasStrokeWidth: number;\n    hasStroke: number;\n    hasOffsets: number;\n  };\n  protected dataTextureTest: boolean;\n\n  @lazyInject(TYPES.IGlobalConfigService)\n  protected readonly configService: IGlobalConfigService;\n\n  // @lazyInject(TYPES.IIconService)\n  // protected readonly iconService: IIconService;\n\n  // @lazyInject(TYPES.IFontService)\n  // protected readonly fontService: IFontService;\n\n  @lazyInject(TYPES.IShaderModuleService)\n  protected readonly shaderModuleService: IShaderModuleService;\n\n  protected rendererService: IRendererService;\n  protected iconService: IIconService;\n  protected fontService: IFontService;\n  protected styleAttributeService: IStyleAttributeService;\n  protected mapService: IMapService;\n  protected cameraService: ICameraService;\n  protected layerService: ILayerService;\n\n  // style texture data mapping\n\n  constructor(layer: ILayer) {\n    this.layer = layer;\n    this.rendererService = layer\n      .getContainer()\n      .get<IRendererService>(TYPES.IRendererService);\n    this.styleAttributeService = layer\n      .getContainer()\n      .get<IStyleAttributeService>(TYPES.IStyleAttributeService);\n    this.mapService = layer.getContainer().get<IMapService>(TYPES.IMapService);\n    this.iconService = layer\n      .getContainer()\n      .get<IIconService>(TYPES.IIconService);\n    this.fontService = layer\n      .getContainer()\n      .get<IFontService>(TYPES.IFontService);\n    this.cameraService = layer\n      .getContainer()\n      .get<ICameraService>(TYPES.ICameraService);\n    this.layerService = layer\n      .getContainer()\n      .get<ILayerService>(TYPES.ILayerService);\n\n    // 注册 Attribute\n    this.registerBuiltinAttributes();\n    // 开启动画\n    this.startModelAnimate();\n\n    const { createTexture2D } = this.rendererService;\n    this.createTexture2D = createTexture2D;\n    this.DATA_TEXTURE_WIDTH = 1024; // 数据纹理固定宽度\n    this.rowCount = 1;\n    this.cellLength = 0;\n    this.cellProperties = [];\n    this.cacheStyleProperties = {\n      opacity: undefined,\n      strokeOpacity: undefined,\n      strokeWidth: undefined,\n      stroke: undefined,\n      offsets: undefined,\n    };\n    this.stylePropertyesExist = {\n      hasOpacity: 0,\n      hasStrokeOpacity: 0,\n      hasStrokeWidth: 0,\n      hasStroke: 0,\n      hasOffsets: 0,\n    };\n    this.dataTextureTest = this.layerService.getOESTextureFloat();\n    // 只有在不支持数据纹理的情况下进行赋值\n    if (!this.dataTextureTest) {\n      this.dataTexture = this.createTexture2D({\n        data: new Uint8ClampedArray(4),\n        mag: gl.NEAREST,\n        min: gl.NEAREST,\n        width: 1,\n        height: 1,\n      });\n    }\n  }\n\n  // style datatexture mapping\n\n  /**\n   * 清除上一次的计算结果 - 全量清除\n   */\n  public clearLastCalRes() {\n    this.cellProperties = []; // 清空上一次计算的需要进行数据映射的属性集合\n    this.cellLength = 0; // 清空上一次计算的 cell 的长度\n    this.stylePropertyesExist = {\n      // 全量清空上一次是否需要对 style 属性进行数据映射的判断\n      hasOpacity: 0,\n      hasStrokeOpacity: 0,\n      hasStrokeWidth: 0,\n      hasStroke: 0,\n      hasOffsets: 0,\n    };\n  }\n\n  public getCellTypeLayout() {\n    if (this.dataTextureTest) {\n      return [\n        this.rowCount, // 数据纹理有几行\n        this.DATA_TEXTURE_WIDTH, // 数据纹理有几列\n        0.0,\n        0.0,\n        this.stylePropertyesExist.hasOpacity, // cell 中是否存在 opacity\n        this.stylePropertyesExist.hasStrokeOpacity, // cell 中是否存在 strokeOpacity\n        this.stylePropertyesExist.hasStrokeWidth, // cell 中是否存在 strokeWidth\n        this.stylePropertyesExist.hasStroke, // cell 中是否存在 stroke\n        this.stylePropertyesExist.hasOffsets, // cell 中是否存在 offsets\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        1.0,\n      ];\n    } else {\n      return [\n        1.0, // 数据纹理有几行\n        1.0, // 数据纹理有几列\n        0.0,\n        0.0,\n        0.0, // cell 中是否存在 opacity\n        0.0, // cell 中是否存在 strokeOpacity\n        0.0, // cell 中是否存在 strokeWidth\n        0.0, // cell 中是否存在 stroke\n        0.0, // cell 中是否存在 offsets\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        -1.0,\n      ];\n    }\n  }\n\n  /**\n   * 判断数据纹理是否需要重新计算 - 根据传入的值进行判断\n   * @param options\n   * @returns\n   */\n  public dataTextureNeedUpdate(options: {\n    opacity?: styleSingle;\n    strokeOpacity?: styleSingle;\n    strokeWidth?: styleSingle;\n    stroke?: styleColor;\n    offsets?: styleOffset;\n    textOffset?: styleOffset;\n  }): boolean {\n    let isUpdate = false;\n    if (!isEqual(options.opacity, this.cacheStyleProperties.opacity)) {\n      isUpdate = true;\n      this.cacheStyleProperties.opacity = options.opacity;\n    }\n    if (\n      !isEqual(options.strokeOpacity, this.cacheStyleProperties.strokeOpacity)\n    ) {\n      isUpdate = true;\n      this.cacheStyleProperties.strokeOpacity = options.strokeOpacity;\n    }\n    if (!isEqual(options.strokeWidth, this.cacheStyleProperties.strokeWidth)) {\n      isUpdate = true;\n      this.cacheStyleProperties.strokeWidth = options.strokeWidth;\n    }\n    if (!isEqual(options.stroke, this.cacheStyleProperties.stroke)) {\n      isUpdate = true;\n      this.cacheStyleProperties.stroke = options.stroke;\n    }\n    if (!isEqual(options.offsets, this.cacheStyleProperties.offsets)) {\n      isUpdate = true;\n      this.cacheStyleProperties.offsets = options.offsets;\n    }\n    if (this.dataTexture === undefined) {\n      isUpdate = true;\n    }\n    return isUpdate;\n  }\n  /**\n   * 判断当前的样式中哪些是需要进行数据映射的，哪些是常量，同时计算用于构建数据纹理的一些中间变量\n   * @param options\n   */\n  public judgeStyleAttributes(options: {\n    opacity?: styleSingle;\n    strokeOpacity?: styleSingle;\n    strokeWidth?: styleSingle;\n    stroke?: styleColor;\n    offsets?: styleOffset;\n  }) {\n    this.clearLastCalRes(); // 清除上一次的计算结果 - 全量清除\n\n    if (options.opacity !== undefined && !isNumber(options.opacity)) {\n      // 数据映射\n      this.cellProperties.push({ attr: 'opacity', count: 1 });\n      this.stylePropertyesExist.hasOpacity = 1;\n      this.cellLength += 1;\n    }\n\n    if (\n      options.strokeOpacity !== undefined &&\n      !isNumber(options.strokeOpacity)\n    ) {\n      // 数据映射\n      this.cellProperties.push({ attr: 'strokeOpacity', count: 1 });\n      this.stylePropertyesExist.hasStrokeOpacity = 1;\n      this.cellLength += 1;\n    }\n\n    if (options.strokeWidth !== undefined && !isNumber(options.strokeWidth)) {\n      // 数据映射\n      this.cellProperties.push({ attr: 'strokeWidth', count: 1 });\n      this.stylePropertyesExist.hasStrokeWidth = 1;\n      this.cellLength += 1;\n    }\n\n    if (options.stroke !== undefined && !this.isStaticColor(options.stroke)) {\n      // 数据映射\n      this.cellProperties.push({ attr: 'stroke', count: 4 });\n      this.stylePropertyesExist.hasStroke = 1;\n      this.cellLength += 4;\n    }\n\n    if (\n      options.offsets !== undefined &&\n      !this.isOffsetStatic(options.offsets)\n    ) {\n      // 数据映射\n      this.cellProperties.push({ attr: 'offsets', count: 2 });\n      this.stylePropertyesExist.hasOffsets = 1;\n      this.cellLength += 2;\n    }\n    // console.log('this.cellLength', this.cellLength)\n  }\n\n  /**\n   * 判断变量 stroke 是否是常量值\n   * @param stroke\n   * @returns\n   */\n  public isStaticColor(stroke: styleColor): boolean {\n    if (isString(stroke)) {\n      if (color(stroke)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    return false;\n  }\n  /**\n   * 获取 stroke 颜色并做兼容处理\n   * @param stroke\n   * @returns\n   */\n  public getStrokeColor(stroke: styleColor) {\n    if (this.isStaticColor(stroke)) {\n      const strokeColor = rgb2arr(stroke as string);\n      strokeColor[0] = strokeColor[0] ? strokeColor[0] : 0;\n      strokeColor[1] = strokeColor[1] ? strokeColor[1] : 0;\n      strokeColor[2] = strokeColor[2] ? strokeColor[2] : 0;\n      strokeColor[3] = strokeColor[3] ? strokeColor[3] : 0;\n      return strokeColor;\n    } else {\n      return [0, 0, 0, 0];\n    }\n  }\n\n  /**\n   * 判断 offsets 是否是常量\n   * @param offsets\n   * @returns\n   */\n  public isOffsetStatic(offsets: styleOffset) {\n    if (\n      isArray(offsets) &&\n      offsets.length === 2 &&\n      isNumber(offsets[0]) &&\n      isNumber(offsets[1])\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * 补空位\n   * @param d\n   * @param count\n   */\n  public patchMod(d: number[], count: number) {\n    for (let i = 0; i < count; i++) {\n      d.push(-1);\n    }\n  }\n\n  /**\n   * 根据映射的数据字段往推入数据\n   * @param d\n   * @param cellData\n   * @param cellPropertiesLayouts\n   */\n  public patchData(\n    d: number[],\n    cellData: IEncodeFeature,\n    cellPropertiesLayouts: ICellProperty[],\n  ) {\n    for (const layout of cellPropertiesLayouts) {\n      const { attr, count } = layout;\n\n      const value = cellData[attr];\n      if (value) {\n        // 数据中存在该属性\n        if (attr === 'stroke') {\n          d.push(...rgb2arr(value));\n        } else if (attr === 'offsets') {\n          if (this.isOffsetStatic(value)) {\n            d.push(-value[0], value[1]);\n          } else {\n            d.push(0, 0);\n          }\n        } else {\n          d.push(isNumber(value) ? value : 1.0);\n        }\n      } else {\n        // 若不存在时则补位\n        this.patchMod(d, count);\n      }\n    }\n  }\n\n  /**\n   * 计算推入数据纹理的数据\n   * @param cellLength\n   * @param encodeData\n   * @param cellPropertiesLayouts\n   * @returns\n   */\n  public calDataFrame(\n    cellLength: number,\n    encodeData: IEncodeFeature[],\n    cellPropertiesLayouts: ICellProperty[],\n  ): IDataTextureFrame {\n    const encodeDatalength = encodeData.length;\n    const rowCount = Math.ceil(\n      (encodeDatalength * cellLength) / this.DATA_TEXTURE_WIDTH,\n    ); // 有多少行\n\n    const totalLength = rowCount * this.DATA_TEXTURE_WIDTH;\n    const d: number[] = [];\n    for (let i = 0; i < encodeDatalength; i++) {\n      // 根据 encodeData 数据推入数据\n      const cellData = encodeData[i];\n      this.patchData(d, cellData, cellPropertiesLayouts);\n    }\n    for (let i = d.length; i < totalLength; i++) {\n      // 每行不足的部分用 -1 补足（数据纹理时 width * height 的矩形数据集合）\n      d.push(-1);\n    }\n    // console.log('data', d)\n    return { data: d, width: this.DATA_TEXTURE_WIDTH, height: rowCount };\n  }\n\n  // style datatexture mapping\n\n  public getBlend(): IBlendOptions {\n    const { blend = 'normal' } = this.layer.getLayerConfig();\n    return BlendTypes[BlendType[blend]] as IBlendOptions;\n  }\n  public getDefaultStyle(): unknown {\n    return {};\n  }\n  public getUninforms(): IModelUniform {\n    throw new Error('Method not implemented.');\n  }\n\n  public getAnimateUniforms(): IModelUniform {\n    return {};\n  }\n\n  public needUpdate(): boolean {\n    return false;\n  }\n  public buildModels(): IModel[] {\n    throw new Error('Method not implemented.');\n  }\n  public initModels(): IModel[] {\n    throw new Error('Method not implemented.');\n  }\n  public clearModels() {\n    return;\n  }\n  public getAttribute(): {\n    attributes: {\n      [attributeName: string]: IAttribute;\n    };\n    elements: IElements;\n  } {\n    throw new Error('Method not implemented.');\n  }\n  public render() {\n    throw new Error('Method not implemented.');\n  }\n  protected registerBuiltinAttributes() {\n    throw new Error('Method not implemented.');\n  }\n  protected animateOption2Array(option: IAnimateOption): number[] {\n    return [\n      option.enable ? 0 : 1.0,\n      option.duration || 4.0,\n      option.interval || 0.2,\n      option.trailLength || 0.1,\n    ];\n  }\n  protected startModelAnimate() {\n    const { animateOption } = this.layer.getLayerConfig() as ILayerConfig;\n    if (animateOption.enable) {\n      this.layer.setAnimateStartTime();\n    }\n  }\n}\n"],"file":"BaseModel.js"}