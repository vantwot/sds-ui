{"version":3,"sources":["../../src/plugins/DataMappingPlugin.ts"],"names":["TYPES","rgb2arr","inject","injectable","DataMappingPlugin","IGlobalConfigService","IMapService","IFontService","layer","styleAttributeService","hooks","init","tap","generateMaping","beforeRenderData","dataState","dataMappingNeedUpdate","beforeRender","layerModelNeedUpdate","attributes","getLayerStyleAttributes","filter","getLayerStyleAttribute","dataArray","getSource","data","attributesToRemapping","attribute","needRemapping","filterData","scale","record","applyAttributeMapping","length","setEncodedData","mapping","getEncodedData","emit","predata","mappedData","map","i","preRecord","encodeRecord","id","_id","coordinates","undefined","forEach","values","name","c","Array","isArray","shape","fontService","getIconFontKey","mapService","version","d","originCoordinates","lngLatToCoord","lngLatToCoords","scalers","params","field","hasOwnProperty","type","push"],"mappings":"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","sourcesContent":["import {\n  IEncodeFeature,\n  IFontService,\n  IGlobalConfigService,\n  ILayer,\n  ILayerPlugin,\n  ILngLat,\n  IMapService,\n  IParseDataItem,\n  IStyleAttribute,\n  IStyleAttributeService,\n  TYPES,\n} from '@antv/l7-core';\nimport { rgb2arr, unProjectFlat } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport { cloneDeep } from 'lodash';\nimport 'reflect-metadata';\n\n@injectable()\nexport default class DataMappingPlugin implements ILayerPlugin {\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  @inject(TYPES.IMapService)\n  private readonly mapService: IMapService;\n\n  @inject(TYPES.IFontService)\n  private readonly fontService: IFontService;\n\n  public apply(\n    layer: ILayer,\n    {\n      styleAttributeService,\n    }: { styleAttributeService: IStyleAttributeService },\n  ) {\n    layer.hooks.init.tap('DataMappingPlugin', () => {\n      // 初始化重新生成 map\n      this.generateMaping(layer, { styleAttributeService });\n    });\n\n    layer.hooks.beforeRenderData.tap('DataMappingPlugin', () => {\n      layer.dataState.dataMappingNeedUpdate = false;\n      this.generateMaping(layer, { styleAttributeService });\n      return true;\n    });\n\n    // remapping before render\n    layer.hooks.beforeRender.tap('DataMappingPlugin', () => {\n      if (layer.layerModelNeedUpdate) {\n        return;\n      }\n      const attributes = styleAttributeService.getLayerStyleAttributes() || [];\n      const filter = styleAttributeService.getLayerStyleAttribute('filter');\n      const { dataArray } = layer.getSource().data;\n      const attributesToRemapping = attributes.filter(\n        (attribute) => attribute.needRemapping, // 如果filter变化\n      );\n      let filterData = dataArray;\n      // 数据过滤完 再执行数据映射\n      if (filter?.needRemapping && filter?.scale) {\n        filterData = dataArray.filter((record: IParseDataItem) => {\n          return this.applyAttributeMapping(filter, record)[0];\n        });\n      }\n      if (attributesToRemapping.length) {\n        // 过滤数据\n        if (filter?.needRemapping) {\n          layer.setEncodedData(this.mapping(attributes, filterData));\n          filter.needRemapping = false;\n        } else {\n          layer.setEncodedData(\n            this.mapping(\n              attributesToRemapping,\n              filterData,\n              layer.getEncodedData(),\n            ),\n          );\n        }\n        // 处理文本更新\n        layer.emit('remapping', null);\n      }\n    });\n  }\n  private generateMaping(\n    layer: ILayer,\n    {\n      styleAttributeService,\n    }: { styleAttributeService: IStyleAttributeService },\n  ) {\n    const attributes = styleAttributeService.getLayerStyleAttributes() || [];\n    const filter = styleAttributeService.getLayerStyleAttribute('filter');\n    const { dataArray } = layer.getSource().data;\n    let filterData = dataArray;\n    // 数据过滤完 再执行数据映射\n    if (filter?.scale) {\n      filterData = dataArray.filter((record: IParseDataItem) => {\n        return this.applyAttributeMapping(filter, record)[0];\n      });\n    }\n    layer.setEncodedData(this.mapping(attributes, filterData));\n  }\n\n  private mapping(\n    attributes: IStyleAttribute[],\n    data: IParseDataItem[],\n    predata?: IEncodeFeature[],\n  ): IEncodeFeature[] {\n    // console.log('data', data)\n    const mappedData = data.map((record: IParseDataItem, i) => {\n      const preRecord = predata ? predata[i] : {};\n      const encodeRecord: IEncodeFeature = {\n        id: record._id,\n        coordinates: record.coordinates,\n        ...preRecord,\n      };\n      // console.log('attributes', attributes)\n      attributes\n        .filter((attribute) => attribute.scale !== undefined)\n        .forEach((attribute: IStyleAttribute) => {\n          // console.log('attribute', attribute)\n          // console.log('record', record)\n          let values = this.applyAttributeMapping(attribute, record);\n          // console.log('values', values)\n          attribute.needRemapping = false;\n\n          // TODO: 支持每个属性配置 postprocess\n          if (attribute.name === 'color') {\n            // console.log('attribute', attribute)\n            values = values.map((c: unknown) => {\n              return rgb2arr(c as string);\n            });\n          }\n          // @ts-ignore\n          encodeRecord[attribute.name] =\n            Array.isArray(values) && values.length === 1 ? values[0] : values;\n\n          // 增加对 layer/text/iconfont unicode 映射的解析\n          if (attribute.name === 'shape') {\n            encodeRecord.shape = this.fontService.getIconFontKey(\n              encodeRecord[attribute.name] as string,\n            );\n          }\n        });\n      return encodeRecord;\n    }) as IEncodeFeature[];\n    // console.log('mappedData', mappedData)\n\n    // 根据地图的类型判断是否需要对点位数据进行处理, 若是高德2.0则需要对坐标进行相对偏移\n    if (mappedData.length > 0 && this.mapService.version === 'GAODE2.x') {\n      if (typeof mappedData[0].coordinates[0] === 'number') {\n        // 单个的点数据\n        // @ts-ignore\n        mappedData\n          // TODO: 避免经纬度被重复计算导致坐标位置偏移\n          .filter((d) => !d.originCoordinates)\n          .map((d) => {\n            d.version = 'GAODE2.x';\n            // @ts-ignore\n            d.originCoordinates = cloneDeep(d.coordinates); // 为了兼容高德1.x 需要保存一份原始的经纬度坐标数据（许多上层逻辑依赖经纬度数据）\n            // @ts-ignore\n            d.coordinates = this.mapService.lngLatToCoord(d.coordinates);\n            // d.coordinates = this.mapService.lngLatToCoord(unProjectFlat(d.coordinates));\n          });\n      } else {\n        // 连续的线、面数据\n        // @ts-ignore\n        mappedData\n          // TODO: 避免经纬度被重复计算导致坐标位置偏移\n          .filter((d) => !d.originCoordinates)\n          .map((d) => {\n            d.version = 'GAODE2.x';\n            // @ts-ignore\n            d.originCoordinates = cloneDeep(d.coordinates); // 为了兼容高德1.x 需要保存一份原始的经纬度坐标数据（许多上层逻辑依赖经纬度数据）\n            // @ts-ignore\n            d.coordinates = this.mapService.lngLatToCoords(d.coordinates);\n          });\n      }\n    }\n    // console.log('mappedData', mappedData)\n    return mappedData;\n  }\n\n  private applyAttributeMapping(\n    attribute: IStyleAttribute,\n    record: { [key: string]: unknown },\n  ) {\n    if (!attribute.scale) {\n      return [];\n    }\n    const scalers = attribute?.scale?.scalers || [];\n    const params: unknown[] = [];\n\n    scalers.forEach(({ field }) => {\n      if (\n        record.hasOwnProperty(field) ||\n        attribute.scale?.type === 'variable'\n      ) {\n        // TODO:多字段，常量\n        params.push(record[field]);\n      }\n    });\n    // console.log('params', params)\n    // console.log('attribute', attribute)\n    // console.log('mapping',attribute.mapping ? attribute.mapping(params) : [])\n    return attribute.mapping ? attribute.mapping(params) : [];\n  }\n}\n"],"file":"DataMappingPlugin.js"}