"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateNodeCommand = exports.NsUpdateNode = void 0;
var mana_syringe_1 = require("mana-syringe");
var constant_1 = require("../constant");
var interface_1 = require("../../command/interface");
var x6_react_shape_1 = require("@antv/x6-react-shape");
var NsUpdateNode;
(function (NsUpdateNode) {
    NsUpdateNode.command = constant_1.XFlowNodeCommands.UPDATE_NODE;
    NsUpdateNode.hookKey = 'updateNode';
    NsUpdateNode.XFlowNodeSetOptions = { overwrite: true };
    NsUpdateNode.NODE_WIDTH = 200;
    NsUpdateNode.NODE_HEIGHT = 40;
})(NsUpdateNode = exports.NsUpdateNode || (exports.NsUpdateNode = {}));
var UpdateNodeCommand = /** @class */ (function () {
    /** 节点更新命令 */
    function UpdateNodeCommand() {
        var _this = this;
        this.execute = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, args, runtimeHook, hooks, result;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.ctx.getArgs(), args = _a.args, runtimeHook = _a.hooks;
                        hooks = this.ctx.getHooks();
                        return [4 /*yield*/, hooks.updateNode.call(args, function (handlerArgs) { return __awaiter(_this, void 0, void 0, function () {
                                var x6Graph, nodeConfig, _a, options, x6Node;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0: return [4 /*yield*/, this.ctx.getX6Graph()];
                                        case 1:
                                            x6Graph = _b.sent();
                                            nodeConfig = handlerArgs.nodeConfig, _a = handlerArgs.options, options = _a === void 0 ? NsUpdateNode.XFlowNodeSetOptions : _a;
                                            x6Node = x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.getCellById(nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.id);
                                            x6Node.setData(nodeConfig, options);
                                            x6Node.setPosition((nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.x) || 0, (nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.y) || 0);
                                            x6Node.setSize((nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.width) || NsUpdateNode.NODE_WIDTH, (nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.height) || NsUpdateNode.NODE_HEIGHT);
                                            if (!(x6Node instanceof x6_react_shape_1.ReactShape) && !!x6Node.getAttrByPath('text/text')) {
                                                x6Node.setAttrByPath('text/text', nodeConfig.label);
                                            }
                                            // 支持nodeAttrs
                                            if (nodeConfig.attrs) {
                                                x6Node.setAttrs(nodeConfig.attrs);
                                            }
                                            return [2 /*return*/, {
                                                    nodeConfig: nodeConfig,
                                                    nodeCell: x6Node,
                                                }];
                                    }
                                });
                            }); }, runtimeHook)];
                    case 1:
                        result = _b.sent();
                        this.ctx.setResult(result);
                        return [2 /*return*/, this];
                }
            });
        }); };
        this.undo = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.ctx.undo();
                return [2 /*return*/, this];
            });
        }); };
        this.redo = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.ctx.isUndoable) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.execute()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, this];
                }
            });
        }); };
    }
    UpdateNodeCommand.prototype.init = function () {
        this.ctx = this.contextProvider();
    };
    UpdateNodeCommand.prototype.isUndoable = function () {
        return this.ctx.isUndoable();
    };
    __decorate([
        (0, mana_syringe_1.inject)(interface_1.ICommandContextProvider),
        __metadata("design:type", Object)
    ], UpdateNodeCommand.prototype, "contextProvider", void 0);
    __decorate([
        (0, mana_syringe_1.postConstruct)(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], UpdateNodeCommand.prototype, "init", null);
    UpdateNodeCommand = __decorate([
        (0, mana_syringe_1.injectable)({
            token: { token: interface_1.ICommandHandler, named: NsUpdateNode.command.id },
        })
        /** 节点更新命令 */
    ], UpdateNodeCommand);
    return UpdateNodeCommand;
}());
exports.UpdateNodeCommand = UpdateNodeCommand;
//# sourceMappingURL=node-update.js.map