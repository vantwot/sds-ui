"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DelNodeCommand = exports.NsDelNode = void 0;
var mana_syringe_1 = require("mana-syringe");
var xflow_hook_1 = require("@antv/xflow-hook");
var interface_1 = require("../../command/interface");
var constant_1 = require("../constant");
var disposable_1 = require("../../common/disposable");
var NsDelNode;
(function (NsDelNode) {
    /** Command: 用于注册named factory */
    NsDelNode.command = constant_1.XFlowNodeCommands.DEL_NODE;
    /** hook name */
    NsDelNode.hookKey = 'delNode';
    /** 创建 hook */
    NsDelNode.createHook = function () {
        return new xflow_hook_1.HookHub();
    };
})(NsDelNode = exports.NsDelNode || (exports.NsDelNode = {}));
var DelNodeCommand = /** @class */ (function () {
    /** 创建节点命令 */
    function DelNodeCommand() {
        var _this = this;
        /** 执行Cmd */
        this.execute = function () { return __awaiter(_this, void 0, void 0, function () {
            var ctx, _a, args, runtimeHook, hooks, result;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        ctx = this.contextProvider();
                        _a = ctx.getArgs(), args = _a.args, runtimeHook = _a.hooks;
                        hooks = ctx.getHooks();
                        return [4 /*yield*/, hooks.delNode.call(args, function (handlerArgs) { return __awaiter(_this, void 0, void 0, function () {
                                var commandService, deleteNodeService, graph, canDel, nodeId, nodeCell, edges, nodeConfig_1;
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            commandService = handlerArgs.commandService, deleteNodeService = handlerArgs.deleteNodeService;
                                            return [4 /*yield*/, ctx.getX6Graph()];
                                        case 1:
                                            graph = _a.sent();
                                            if (!deleteNodeService) return [3 /*break*/, 3];
                                            return [4 /*yield*/, deleteNodeService(handlerArgs)];
                                        case 2:
                                            canDel = _a.sent();
                                            if (!canDel)
                                                return [2 /*return*/, { err: ' service rejected' }];
                                            _a.label = 3;
                                        case 3:
                                            nodeId = (handlerArgs.x6Node || handlerArgs.nodeConfig).id;
                                            nodeCell = graph.getCellById(nodeId);
                                            if (!(nodeCell && nodeCell.isNode())) return [3 /*break*/, 5];
                                            edges = __spreadArray(__spreadArray([], (graph.getIncomingEdges(nodeCell) || []), true), (graph.getOutgoingEdges(nodeCell) || []), true);
                                            return [4 /*yield*/, Promise.all(edges.map(function (edge) {
                                                    return commandService.executeCommand(constant_1.XFlowEdgeCommands.DEL_EDGE.id, {
                                                        x6Edge: edge,
                                                    });
                                                }))
                                                /** 再清理节点 */
                                            ];
                                        case 4:
                                            _a.sent();
                                            nodeConfig_1 = nodeCell.getData();
                                            nodeCell.remove();
                                            /** add undo: delete node */
                                            ctx.addUndo(disposable_1.Disposable.create(function () { return __awaiter(_this, void 0, void 0, function () {
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0: return [4 /*yield*/, commandService.executeCommand(constant_1.XFlowNodeCommands.ADD_NODE.id, {
                                                                nodeConfig: nodeConfig_1,
                                                            })
                                                            // TODO: 支持线和节点的undo
                                                            // 通过 sequence mapping 出新的port id
                                                            // const nodeCtx = nodeCmd.contextProvider()
                                                            // const { nodeCell } = nodeCtx.getResult()
                                                            // edgeCmds.forEach(async cmd => {
                                                            //   const c = cmd.contextProvider()
                                                            //   const { edgeConfig } = c.getResult()
                                                            // })
                                                        ];
                                                        case 1:
                                                            _a.sent();
                                                            return [2 /*return*/];
                                                    }
                                                });
                                            }); }));
                                            return [2 /*return*/, { err: null, nodeConfig: nodeConfig_1 }];
                                        case 5: return [2 /*return*/, { err: 'node is not exist' }];
                                    }
                                });
                            }); }, runtimeHook)];
                    case 1:
                        result = _b.sent();
                        ctx.setResult(result);
                        return [2 /*return*/, this];
                }
            });
        }); };
        /** undo cmd */
        this.undo = function () { return __awaiter(_this, void 0, void 0, function () {
            var ctx;
            return __generator(this, function (_a) {
                if (this.isUndoable()) {
                    ctx = this.contextProvider();
                    ctx.undo();
                }
                return [2 /*return*/, this];
            });
        }); };
        /** redo cmd */
        this.redo = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.isUndoable()) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.execute()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, this];
                }
            });
        }); };
    }
    DelNodeCommand.prototype.isUndoable = function () {
        var ctx = this.contextProvider();
        return ctx.isUndoable();
    };
    __decorate([
        (0, mana_syringe_1.inject)(interface_1.ICommandContextProvider),
        __metadata("design:type", Object)
    ], DelNodeCommand.prototype, "contextProvider", void 0);
    DelNodeCommand = __decorate([
        (0, mana_syringe_1.injectable)({
            token: { token: interface_1.ICommandHandler, named: NsDelNode.command.id },
        })
        /** 创建节点命令 */
    ], DelNodeCommand);
    return DelNodeCommand;
}());
exports.DelNodeCommand = DelNodeCommand;
//# sourceMappingURL=node-del.js.map