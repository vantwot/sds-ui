"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphPasteSelectionCommand = exports.NsGraphPasteSelection = void 0;
var mana_syringe_1 = require("mana-syringe");
var interface_1 = require("../../command/interface");
var constant_1 = require("../constant");
var disposable_1 = require("../../common/disposable");
var constants_1 = require("../../constants");
var safe_json_1 = require("../../common/safe-json");
var mapping_service_1 = require("../mapping-service");
var NsGraphPasteSelection;
(function (NsGraphPasteSelection) {
    /** Command: 用于注册named factory */
    NsGraphPasteSelection.command = constant_1.XFlowGraphCommands.GRAPH_PASTE;
    /** hookName */
    NsGraphPasteSelection.hookKey = 'graphPasteSelection';
})(NsGraphPasteSelection = exports.NsGraphPasteSelection || (exports.NsGraphPasteSelection = {}));
function randomNumber(max, min) {
    if (min === void 0) { min = 0; }
    return Math.floor(Math.random() * (max - min) + min);
}
var GraphPasteSelectionCommand = /** @class */ (function () {
    /** 创建节点命令 */
    function GraphPasteSelectionCommand() {
        var _this = this;
        this.updateNodeCopiedProps = function (position, nodeConfig) {
            var dx = randomNumber(100);
            var dy = randomNumber(100);
            if (position) {
                dx = nodeConfig.x - position.x + randomNumber(30);
                dy = nodeConfig.y - position.y + randomNumber(30);
            }
            // 修改坐标
            nodeConfig.x += dx;
            nodeConfig.y += dy;
            // 删除 id
            nodeConfig.originId = nodeConfig.id;
            delete nodeConfig.id;
            // 修改label
            nodeConfig.label = nodeConfig.label + "_copied";
            nodeConfig.isCollapsed = false;
            return nodeConfig;
        };
        /** 执行Cmd */
        this.execute = function () { return __awaiter(_this, void 0, void 0, function () {
            var ctx, _a, args, runtimeHook, hooks, result;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        ctx = this.contextProvider();
                        _a = ctx.getArgs(), args = _a.args, runtimeHook = _a.hooks;
                        hooks = ctx.getHooks();
                        if (GraphPasteSelectionCommand_1.doing) {
                            return [2 /*return*/, this];
                        }
                        GraphPasteSelectionCommand_1.doing = true;
                        return [4 /*yield*/, hooks.graphPasteSelection.call(args, function (handlerArgs) { return __awaiter(_this, void 0, void 0, function () {
                                var commandService, position, jsonString, plainObject, _a, nodes, _b, edges, _c, normalNodes, groupNodes;
                                var _this = this;
                                return __generator(this, function (_d) {
                                    switch (_d.label) {
                                        case 0:
                                            commandService = handlerArgs.commandService, position = handlerArgs.position;
                                            jsonString = window.localStorage.getItem(constants_1.LOCAL_STORAGE_KEY);
                                            plainObject = (0, safe_json_1.safeJson)(jsonString, {
                                                nodes: [],
                                                edges: [],
                                            });
                                            _a = plainObject.nodes, nodes = _a === void 0 ? [] : _a, _b = plainObject.edges, edges = _b === void 0 ? [] : _b;
                                            _c = this.mappingHelper.getNodesByType(nodes), normalNodes = _c.normalNodes, groupNodes = _c.groupNodes;
                                            this.mappingHelper.addNodes(nodes);
                                            // 添加普通节点
                                            return [4 /*yield*/, Promise.all(normalNodes.map(function (nodeConfig) { return __awaiter(_this, void 0, void 0, function () {
                                                    var res, context, cmdResult;
                                                    return __generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0: return [4 /*yield*/, commandService.executeCommand(constant_1.XFlowNodeCommands.ADD_NODE.id, {
                                                                    nodeConfig: this.updateNodeCopiedProps(position, nodeConfig),
                                                                })];
                                                            case 1:
                                                                res = _a.sent();
                                                                context = res.contextProvider();
                                                                cmdResult = context.getResult();
                                                                this.mappingHelper.buildNodeMapping(nodeConfig, cmdResult.nodeConfig);
                                                                return [2 /*return*/];
                                                        }
                                                    });
                                                }); }))
                                                // 处理group
                                            ];
                                        case 1:
                                            // 添加普通节点
                                            _d.sent();
                                            // 处理group
                                            return [4 /*yield*/, Promise.all(groupNodes.map(function (group) { return __awaiter(_this, void 0, void 0, function () {
                                                    var groupNodeConfig;
                                                    return __generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0:
                                                                groupNodeConfig = this.mappingHelper.buildGroupRelations(group);
                                                                return [4 /*yield*/, commandService.executeCommand(constant_1.XFlowGroupCommands.ADD_GROUP.id, {
                                                                        nodeConfig: this.updateNodeCopiedProps(position, groupNodeConfig),
                                                                    })];
                                                            case 1:
                                                                _a.sent();
                                                                return [2 /*return*/];
                                                        }
                                                    });
                                                }); }))
                                                // 处理连线
                                            ];
                                        case 2:
                                            // 处理group
                                            _d.sent();
                                            // 处理连线
                                            return [4 /*yield*/, Promise.all(edges.map(function (edgeConfig) {
                                                    var newEdge = _this.mappingHelper.createEdgeBetweenNodes(edgeConfig);
                                                    return commandService.executeCommand(constant_1.XFlowEdgeCommands.ADD_EDGE.id, {
                                                        edgeConfig: newEdge,
                                                    });
                                                }))];
                                        case 3:
                                            // 处理连线
                                            _d.sent();
                                            ctx.addUndo(disposable_1.Disposable.create(function () { return __awaiter(_this, void 0, void 0, function () {
                                                return __generator(this, function (_a) {
                                                    window.localStorage.setItem(constants_1.LOCAL_STORAGE_KEY, null);
                                                    return [2 /*return*/];
                                                });
                                            }); }));
                                            return [2 /*return*/, { err: null }];
                                    }
                                });
                            }); }, runtimeHook)];
                    case 1:
                        result = _b.sent();
                        ctx.setResult(result);
                        GraphPasteSelectionCommand_1.doing = false;
                        return [2 /*return*/, this];
                }
            });
        }); };
        /** undo cmd */
        this.undo = function () { return __awaiter(_this, void 0, void 0, function () {
            var ctx;
            return __generator(this, function (_a) {
                ctx = this.contextProvider();
                if (this.isUndoable()) {
                    ctx.undo();
                }
                return [2 /*return*/, this];
            });
        }); };
        /** redo cmd */
        this.redo = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.isUndoable()) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.execute()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, this];
                }
            });
        }); };
    }
    GraphPasteSelectionCommand_1 = GraphPasteSelectionCommand;
    GraphPasteSelectionCommand.prototype.isUndoable = function () {
        var ctx = this.contextProvider();
        return ctx.isUndoable();
    };
    var GraphPasteSelectionCommand_1;
    /** 防止多次执行 */
    GraphPasteSelectionCommand.doing = false;
    __decorate([
        (0, mana_syringe_1.inject)(interface_1.ICommandContextProvider),
        __metadata("design:type", Object)
    ], GraphPasteSelectionCommand.prototype, "contextProvider", void 0);
    __decorate([
        (0, mana_syringe_1.inject)(mapping_service_1.GraphMappingHelper),
        __metadata("design:type", mapping_service_1.GraphMappingHelper)
    ], GraphPasteSelectionCommand.prototype, "mappingHelper", void 0);
    GraphPasteSelectionCommand = GraphPasteSelectionCommand_1 = __decorate([
        (0, mana_syringe_1.injectable)({
            token: { token: interface_1.ICommandHandler, named: NsGraphPasteSelection.command.id },
        })
        /** 创建节点命令 */
    ], GraphPasteSelectionCommand);
    return GraphPasteSelectionCommand;
}());
exports.GraphPasteSelectionCommand = GraphPasteSelectionCommand;
//# sourceMappingURL=graph-paste.js.map