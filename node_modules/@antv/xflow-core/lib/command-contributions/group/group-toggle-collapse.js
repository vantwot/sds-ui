"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollapseGroupCommand = exports.NsCollapseGroup = void 0;
var mana_syringe_1 = require("mana-syringe");
var constant_1 = require("../constant");
var disposable_1 = require("../../common/disposable");
var interface_1 = require("../../command/interface");
var constants_1 = require("../../constants");
var NsCollapseGroup;
(function (NsCollapseGroup) {
    NsCollapseGroup.command = constant_1.XFlowGroupCommands.COLLAPSE_GROUP;
    NsCollapseGroup.hookKey = 'collapseGroup';
})(NsCollapseGroup = exports.NsCollapseGroup || (exports.NsCollapseGroup = {}));
var CollapseGroupCommand = /** @class */ (function () {
    /** 添加子节点命令 */
    function CollapseGroupCommand() {
        var _this = this;
        this.toggleVisible = function (cells, visible, graph) {
            cells.forEach(function (cell) {
                var view = graph.findViewByCell(cell).container;
                view.style.visibility = visible ? 'visible' : 'hidden';
            });
        };
        this.toggleCollapse = function (groupNode, graph, args) {
            var childrens = groupNode.getChildren().filter(function (n) { return n.isNode(); });
            var groupData = groupNode.getData();
            var isCollapsed = args.isCollapsed, _a = args.gap, gap = _a === void 0 ? 0 : _a;
            if (isCollapsed) {
                var collapsedSize = args.collapsedSize || groupData.groupCollapsedSize || constants_1.XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE;
                groupNode.prop('previousSize', groupNode.size());
                groupNode.size(collapsedSize);
            }
            else {
                groupNode.size(groupNode.prop('previousSize'));
            }
            if (childrens) {
                childrens.forEach(function (item) {
                    var position = groupNode.position();
                    var innerEdges = graph.getConnectedEdges(item).filter(function (edge) {
                        var sourceNode = edge.getSourceNode();
                        var targetNode = edge.getTargetNode();
                        return childrens.includes(sourceNode) && childrens.includes(targetNode);
                    });
                    if (isCollapsed) {
                        _this.toggleVisible(__spreadArray([item], innerEdges, true), false, graph);
                        item.prop('previousSize', item.size());
                        item.prop('previousRelativePosition', item.position({ relative: true }));
                        item.position(position.x + gap, position.y + gap);
                        var size = groupNode.size();
                        item.size({
                            width: size.width - gap * 2,
                            height: size.height - gap * 2,
                        });
                    }
                    else {
                        _this.toggleVisible(__spreadArray([item], innerEdges, true), true, graph);
                        var pos = item.prop('previousRelativePosition');
                        var size = item.prop('previousSize');
                        item.position(pos.x, pos.y, { relative: true });
                        item.size(size);
                    }
                });
            }
            groupNode.prop('isCollapsed', isCollapsed);
            groupNode.setData(__assign(__assign({}, groupNode.getData()), { isCollapsed: isCollapsed }));
        };
        this.execute = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, args, runtimeHook, hooks, result;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.ctx.getArgs(), args = _a.args, runtimeHook = _a.hooks;
                        hooks = this.ctx.getHooks();
                        return [4 /*yield*/, hooks.collapseGroup.call(args, function (handlerArgs) { return __awaiter(_this, void 0, void 0, function () {
                                var x6Graph, node, toggleService, canToggle;
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.ctx.getX6Graph()];
                                        case 1:
                                            x6Graph = _a.sent();
                                            node = x6Graph.getCellById(args.nodeId);
                                            toggleService = handlerArgs.toggleService;
                                            if (!toggleService) return [3 /*break*/, 3];
                                            return [4 /*yield*/, toggleService(handlerArgs)];
                                        case 2:
                                            canToggle = _a.sent();
                                            if (!canToggle)
                                                return [2 /*return*/, { err: 'service rejected' }];
                                            _a.label = 3;
                                        case 3:
                                            if (node) {
                                                this.toggleCollapse(node, x6Graph, args);
                                                this.ctx.addUndo(disposable_1.Disposable.create(function () { return __awaiter(_this, void 0, void 0, function () {
                                                    return __generator(this, function (_a) {
                                                        if (node) {
                                                            this.toggleCollapse(node, x6Graph, Object.assign(args, { isCollapsed: !args.isCollapsed }));
                                                        }
                                                        return [2 /*return*/];
                                                    });
                                                }); }));
                                            }
                                            return [2 /*return*/, { err: null }];
                                    }
                                });
                            }); }, runtimeHook)];
                    case 1:
                        result = _b.sent();
                        this.ctx.setResult(result);
                        return [2 /*return*/, this];
                }
            });
        }); };
        this.undo = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.ctx.undo();
                return [2 /*return*/, this];
            });
        }); };
        this.redo = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.ctx.isUndoable) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.execute()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, this];
                }
            });
        }); };
    }
    CollapseGroupCommand.prototype.init = function () {
        this.ctx = this.contextProvider();
    };
    CollapseGroupCommand.prototype.isUndoable = function () {
        return this.ctx.isUndoable();
    };
    __decorate([
        (0, mana_syringe_1.inject)(interface_1.ICommandContextProvider),
        __metadata("design:type", Object)
    ], CollapseGroupCommand.prototype, "contextProvider", void 0);
    __decorate([
        (0, mana_syringe_1.postConstruct)(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], CollapseGroupCommand.prototype, "init", null);
    CollapseGroupCommand = __decorate([
        (0, mana_syringe_1.injectable)({
            token: { token: interface_1.ICommandHandler, named: NsCollapseGroup.command.id },
        })
        /** 添加子节点命令 */
    ], CollapseGroupCommand);
    return CollapseGroupCommand;
}());
exports.CollapseGroupCommand = CollapseGroupCommand;
//# sourceMappingURL=group-toggle-collapse.js.map