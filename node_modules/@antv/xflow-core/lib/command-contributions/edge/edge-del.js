"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DelEdgeCommand = exports.NsDelEdge = void 0;
var mana_syringe_1 = require("mana-syringe");
var interface_1 = require("../../command/interface");
var constant_1 = require("../constant");
var disposable_1 = require("../../common/disposable");
var NsDelEdge;
(function (NsDelEdge) {
    /** Command: 用于注册named factory */
    NsDelEdge.command = constant_1.XFlowEdgeCommands.DEL_EDGE;
    /** hookName */
    NsDelEdge.hookKey = 'delEdge';
    var ErrEnum;
    (function (ErrEnum) {
        ErrEnum["EDGE_NOT_EXIST"] = "edge is not exist";
        ErrEnum["EDGE_INVALID_CELL"] = "this is not a valid cell";
        ErrEnum["X6_DELETE_FAILED"] = "x6 throw err when call delete edge";
        ErrEnum["SERVICE_REJECT"] = "service reject to delete";
    })(ErrEnum = NsDelEdge.ErrEnum || (NsDelEdge.ErrEnum = {}));
})(NsDelEdge = exports.NsDelEdge || (exports.NsDelEdge = {}));
var DelEdgeCommand = /** @class */ (function () {
    /** 创建节点命令 */
    function DelEdgeCommand() {
        var _this = this;
        /** 执行Cmd */
        this.execute = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, args, runtimeHook, hooks, result;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.ctx.getArgs(), args = _a.args, runtimeHook = _a.hooks;
                        hooks = this.ctx.getHooks();
                        return [4 /*yield*/, hooks.delEdge.call(
                            /** 执行 hooks pipeline处理args */
                            args, 
                            /** 执行 callback */
                            function (handlerArgs) { return __awaiter(_this, void 0, void 0, function () {
                                var edgeConfig, x6Edge, deleteEdgeService, commandService, edgeCell, isEdge, canDelete, targetCell, sourceCell, sourcePortId_1, targetPortId_1, source_1, target_1, undo;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            edgeConfig = handlerArgs.edgeConfig, x6Edge = handlerArgs.x6Edge, deleteEdgeService = handlerArgs.deleteEdgeService, commandService = handlerArgs.commandService;
                                            edgeCell = x6Edge;
                                            if (!!edgeCell) return [3 /*break*/, 2];
                                            return [4 /*yield*/, this.findEdgeById(edgeConfig)];
                                        case 1:
                                            edgeCell = _a.sent();
                                            if (!edgeCell) {
                                                console.error(NsDelEdge.ErrEnum.EDGE_NOT_EXIST, edgeConfig);
                                                return [2 /*return*/, { err: NsDelEdge.ErrEnum.EDGE_NOT_EXIST }];
                                            }
                                            _a.label = 2;
                                        case 2:
                                            isEdge = edgeCell && edgeCell.isEdge();
                                            if (!isEdge) {
                                                console.error(NsDelEdge.ErrEnum.EDGE_NOT_EXIST, edgeCell);
                                                return [2 /*return*/, { err: NsDelEdge.ErrEnum.EDGE_NOT_EXIST }];
                                            }
                                            if (!deleteEdgeService) return [3 /*break*/, 4];
                                            return [4 /*yield*/, deleteEdgeService(handlerArgs)];
                                        case 3:
                                            canDelete = _a.sent();
                                            if (!canDelete) {
                                                return [2 /*return*/, { err: NsDelEdge.ErrEnum.SERVICE_REJECT }];
                                            }
                                            _a.label = 4;
                                        case 4:
                                            try {
                                                targetCell = edgeCell.getTargetCell();
                                                sourceCell = edgeCell.getSourceCell();
                                                sourcePortId_1 = edgeCell.getSourcePortId();
                                                targetPortId_1 = edgeCell.getTargetPortId();
                                                source_1 = sourceCell.id;
                                                target_1 = targetCell.id;
                                                /** 执行remove */
                                                edgeCell.remove();
                                                undo = disposable_1.Disposable.create(function () {
                                                    commandService.executeCommand(constant_1.XFlowEdgeCommands.ADD_EDGE.id, {
                                                        edgeConfig: { source: source_1, target: target_1, sourcePortId: sourcePortId_1, targetPortId: targetPortId_1 },
                                                    });
                                                });
                                                /** add undo */
                                                this.ctx.addUndo(undo);
                                                return [2 /*return*/, {
                                                        err: null,
                                                        edgeConfig: { source: source_1, target: target_1, sourcePortId: sourcePortId_1, targetPortId: targetPortId_1 },
                                                        targetCell: targetCell,
                                                        sourceCell: sourceCell,
                                                        sourcePortId: sourcePortId_1,
                                                        targetPortId: targetPortId_1,
                                                    }];
                                            }
                                            catch (error) {
                                                console.error(NsDelEdge.ErrEnum.X6_DELETE_FAILED, error);
                                                return [2 /*return*/, { err: NsDelEdge.ErrEnum.X6_DELETE_FAILED }];
                                            }
                                            return [2 /*return*/];
                                    }
                                });
                            }); }, runtimeHook)];
                    case 1:
                        result = _b.sent();
                        this.ctx.setResult(result);
                        return [2 /*return*/, this];
                }
            });
        }); };
        this.findEdgeById = function (edge) { return __awaiter(_this, void 0, void 0, function () {
            var graph, cell;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ctx.getX6Graph()];
                    case 1:
                        graph = _a.sent();
                        cell = graph.getCellById(edge.id);
                        return [2 /*return*/, cell];
                }
            });
        }); };
        /** undo cmd */
        this.undo = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.ctx.undo();
                return [2 /*return*/, this];
            });
        }); };
        /** redo cmd */
        this.redo = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.isUndoable) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.execute()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, this];
                }
            });
        }); };
    }
    DelEdgeCommand.prototype.init = function () {
        this.ctx = this.contextProvider();
    };
    DelEdgeCommand.prototype.isUndoable = function () {
        return this.ctx.isUndoable();
    };
    __decorate([
        (0, mana_syringe_1.inject)(interface_1.ICommandContextProvider),
        __metadata("design:type", Object)
    ], DelEdgeCommand.prototype, "contextProvider", void 0);
    __decorate([
        (0, mana_syringe_1.postConstruct)(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], DelEdgeCommand.prototype, "init", null);
    DelEdgeCommand = __decorate([
        (0, mana_syringe_1.injectable)({
            token: { token: interface_1.ICommandHandler, named: NsDelEdge.command.id },
        })
        /** 创建节点命令 */
    ], DelEdgeCommand);
    return DelEdgeCommand;
}());
exports.DelEdgeCommand = DelEdgeCommand;
//# sourceMappingURL=edge-del.js.map