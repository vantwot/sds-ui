"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyBindingRegistry = void 0;
var mana_syringe_1 = require("mana-syringe");
var disposable_1 = require("../common/disposable");
var interface_1 = require("../xflow-main/interface");
var graph_provider_1 = require("../xflow-main/graph/graph-provider");
var interface_2 = require("./interface");
var interface_3 = require("../command/interface");
var interface_4 = require("../model-service/interface");
var KeyBindingRegistry = /** @class */ (function () {
    function KeyBindingRegistry() {
        var _this = this;
        /** disposables */
        this.toDispose = new disposable_1.DisposableCollection();
        /** disposables */
        this.keyBindingMap = new Map();
        /** disposables */
        this.enabledKeyBindingMap = new Map();
        /** 注册用户定义在config中的keybinding */
        this.registerExternalKeybindings = function () { return __awaiter(_this, void 0, void 0, function () {
            var registerKeybindingFunc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.optionProvider.getOption()];
                    case 1:
                        registerKeybindingFunc = (_a.sent()).registerKeybindingFunc;
                        return [2 /*return*/, registerKeybindingFunc(this)];
                }
            });
        }); };
        /** 注册可Dispose的Keybinding */
        this.registerKeybinding = function (keybindings) {
            if (keybindings === void 0) { keybindings = []; }
            var toDispose = new disposable_1.DisposableCollection();
            keybindings.forEach(function (keybinding) {
                /** 注册 Keybinding config */
                _this.keyBindingMap.set(keybinding.id, keybinding);
                /** enable Keybinding */
                _this.enableKeyBindings(keybinding.id).then(function (d) {
                    toDispose.push(disposable_1.Disposable.create(function () {
                        d.dispose();
                        _this.keyBindingMap.delete(keybinding.id);
                    }));
                });
            });
            _this.toDispose.push(toDispose);
            return toDispose;
        };
        /**
         * 启用keybinding, 用于触发command
         * @param id contextId
         */
        this.enableKeyBindings = function (keybindingId) { return __awaiter(_this, void 0, void 0, function () {
            var keybinding, graph, handler, toDispose;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        /** 清理同样的键盘事件 */
                        this.disableKeyBindings([keybindingId]);
                        keybinding = this.keyBindingMap.get(keybindingId);
                        return [4 /*yield*/, this.getX6Graph()
                            /**
                             * x6文档：https://x6.antv.vision/zh/docs/api/graph/keyboard
                             * x6源码：packages/x6/src/graph/keyboard.ts
                             */
                        ];
                    case 1:
                        graph = _a.sent();
                        handler = this.runCommand(keybinding);
                        graph.bindKey(keybinding.keybinding, handler);
                        toDispose = disposable_1.Disposable.create(function () {
                            graph.unbindKey(keybinding.keybinding);
                            _this.enabledKeyBindingMap.delete(keybinding.id);
                        });
                        /** 注册disposable */
                        this.enabledKeyBindingMap.set(keybinding.id, toDispose);
                        return [2 /*return*/, toDispose];
                }
            });
        }); };
        /**
         * 禁用keybinding
         */
        this.disableKeyBindings = function (ids) {
            ids.forEach(function (id) {
                var disposable = _this.enabledKeyBindingMap.get(id);
                if (disposable) {
                    disposable.dispose();
                }
            });
        };
        /**
         * 执行command
         */
        this.runCommand = function (keybinding) { return function (e) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, keybinding.callback(keybinding, this.modelService, this.commandService, e)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }; };
        /**
         * 获取画布实例
         */
        this.getX6Graph = function () { return __awaiter(_this, void 0, void 0, function () {
            var graphInstance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.graphProvider.getGraphInstance()];
                    case 1:
                        graphInstance = _a.sent();
                        return [2 /*return*/, graphInstance];
                }
            });
        }); };
    }
    /**
     *  app启动时, 注册keybinding的扩展
     */
    KeyBindingRegistry.prototype.onStart = function () {
        var contributions = this.contributionProvider.getContributions();
        for (var _i = 0, contributions_1 = contributions; _i < contributions_1.length; _i++) {
            var contribution = contributions_1[_i];
            contribution.registerKeybinding(this);
        }
        this.registerExternalKeybindings();
    };
    /**
     * app停止的逻辑
     */
    KeyBindingRegistry.prototype.onStop = function () {
        this.toDispose.dispose();
    };
    __decorate([
        (0, mana_syringe_1.inject)(interface_2.IKeyBindingOptionProvider),
        __metadata("design:type", Object)
    ], KeyBindingRegistry.prototype, "optionProvider", void 0);
    __decorate([
        (0, mana_syringe_1.inject)(interface_3.IGraphCommandService),
        __metadata("design:type", Object)
    ], KeyBindingRegistry.prototype, "commandService", void 0);
    __decorate([
        (0, mana_syringe_1.inject)(interface_4.IModelService),
        __metadata("design:type", Object)
    ], KeyBindingRegistry.prototype, "modelService", void 0);
    __decorate([
        (0, mana_syringe_1.contrib)(interface_2.IKeyBindingContribution),
        __metadata("design:type", Object)
    ], KeyBindingRegistry.prototype, "contributionProvider", void 0);
    __decorate([
        (0, mana_syringe_1.inject)(graph_provider_1.IGraphProvider),
        __metadata("design:type", Object)
    ], KeyBindingRegistry.prototype, "graphProvider", void 0);
    KeyBindingRegistry = __decorate([
        (0, mana_syringe_1.singleton)({ contrib: [interface_1.IFrontendApplicationContribution, interface_2.IKeyBindingService] })
    ], KeyBindingRegistry);
    return KeyBindingRegistry;
}());
exports.KeyBindingRegistry = KeyBindingRegistry;
//# sourceMappingURL=keybinding-registry.js.map