"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useModelAsync = exports.createComponentModel = exports.useModel = exports.useIsMountedRef = void 0;
var react_1 = __importDefault(require("react"));
var rx_model_1 = require("./rx-model");
/** 判断model是否Mount */
var isRefMounted = function (ref) {
    return ref && ref.current && ref.current.isMounted;
};
/** 用于判断model是否Mount */
var useIsMountedRef = function () {
    /** 记录当前组件的加载状态 */
    var ref = react_1.default.useRef({ isMounted: true });
    react_1.default.useEffect(function () {
        return function () {
            ref.current.isMounted = false;
        };
    }, []);
    return ref;
};
exports.useIsMountedRef = useIsMountedRef;
/** 判断model是否Mount */
var useModel = function (model) {
    /** 记录当前组件的加载状态 */
    var ref = (0, exports.useIsMountedRef)();
    var _a = react_1.default.useState(model.getValue()), state = _a[0], setState = _a[1];
    react_1.default.useEffect(function () {
        var disposeable = model.watch(function (val) {
            if (isRefMounted(ref)) {
                setState(val);
            }
        });
        return function () {
            disposeable.dispose();
        };
        /* eslint-disable-next-line  */
    }, [setState]);
    var value = state;
    var canRender = rx_model_1.NsModel.isValidValue(value);
    var setValue = react_1.default.useCallback(function (val) { return model.setValue(val); }, [model]);
    return [value, setValue, canRender];
};
exports.useModel = useModel;
/** 在组件内部新建一个model */
var createComponentModel = function (initialState) {
    /* eslint-disable-next-line  */
    var model = react_1.default.useMemo(function () { return new rx_model_1.RxModel(initialState); }, []);
    /** model 和 state 绑定触发view刷新 */
    /* eslint-disable-next-line  */
    var _a = (0, exports.useModel)(model), modelValue = _a[0], setModelValue = _a[1], canRender = _a[2];
    /** unMount时dispose */
    /* eslint-disable-next-line  */
    react_1.default.useEffect(function () {
        return function () {
            model.dispose();
        };
    }, [model]);
    return [modelValue, setModelValue, model, canRender];
};
exports.createComponentModel = createComponentModel;
/**
 * useModelAsync：
 * watch model的值，
 * 把model的值通过useState和组件状态关联起来
 */
var useModelAsync = function (args) {
    var getModel = args.getModel, initialState = args.initialState;
    /** 记录当前组件的加载状态 */
    var isMountedRef = (0, exports.useIsMountedRef)();
    var modelRef = react_1.default.useRef();
    /** 订阅 model */
    var _a = react_1.default.useState(initialState), state = _a[0], setState = _a[1];
    react_1.default.useEffect(function () {
        var d;
        getModel().then(function (model) { return __awaiter(void 0, void 0, void 0, function () {
            var newState;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        modelRef.current = model;
                        return [4 /*yield*/, model.getValidValue()];
                    case 1:
                        newState = _a.sent();
                        if (!isMountedRef.current.isMounted) {
                            return [2 /*return*/];
                        }
                        setState(newState);
                        d = model.watch(function (val) {
                            if (isMountedRef.current.isMounted) {
                                setState(val);
                            }
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        return function () {
            if (d && d.dispose) {
                d.dispose();
            }
        };
        /* eslint-disable-next-line  */
    }, []);
    return [state, setState, modelRef.current];
};
exports.useModelAsync = useModelAsync;
//# sourceMappingURL=rx-model-hook.js.map