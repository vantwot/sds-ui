"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RxModel = exports.NsModel = void 0;
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var disposable_1 = require("./disposable");
var immer_1 = require("immer");
var deferred_1 = require("./deferred");
// docs:https://immerjs.github.io/immer/map-set
(0, immer_1.enableMapSet)();
// https://immerjs.github.io/immer/freezing
(0, immer_1.setAutoFreeze)(false);
var NsModel;
(function (NsModel) {
    /**
     * observable 空值，当作model ready的变量
     * 空值不会触发subscrition
     */
    NsModel.EMPTY_VALUE = Symbol('EMPTY_MODEL_VALUE');
    /** 判断是否是空 */
    function isValidValue(val) {
        return val !== NsModel.EMPTY_VALUE;
    }
    NsModel.isValidValue = isValidValue;
    /** 默认的对事件性能优化方法：只在value不同时才触发，同时增加throttle */
    function defaultPipeFunction(observable) {
        return observable.pipe((0, operators_1.distinctUntilChanged)(), (0, operators_1.filter)(function (item) { return isValidValue(item); }), (0, operators_1.throttleTime)(17, rxjs_1.asyncScheduler, { leading: false, trailing: true }));
    }
    NsModel.defaultPipeFunction = defaultPipeFunction;
})(NsModel = exports.NsModel || (exports.NsModel = {}));
var RxModel = /** @class */ (function () {
    /** 初始化 */
    function RxModel(initialValue, maxSubscription) {
        var _this = this;
        if (initialValue === void 0) { initialValue = NsModel.EMPTY_VALUE; }
        if (maxSubscription === void 0) { maxSubscription = 30; }
        /** disposable */
        this.toDispose = new disposable_1.DisposableCollection();
        /** 监听model变化 */
        this.watch = function (cb, pipeFunction) {
            if (pipeFunction === void 0) { pipeFunction = NsModel.defaultPipeFunction; }
            if (_this.subject$.observers.length + 1 > _this.maxSubscription) {
                console.warn(_this.subject$ + " reach maxSubscription limitation, please check");
            }
            var observable = pipeFunction ? pipeFunction(_this.subject$) : _this.subject$;
            var subscription = observable.subscribe(cb);
            return disposable_1.Disposable.create(function () {
                subscription.unsubscribe();
            });
        };
        /** 获取model的值 */
        this.getValue = function () {
            return _this.subject$.getValue();
        };
        /** 更新model */
        this.setValue = function (value) {
            if (!_this.subject$) {
                return;
            }
            if (typeof value === 'function') {
                var currentValue = _this.subject$.getValue();
                var nextState = (0, immer_1.produce)(currentValue, function (draft) {
                    value(draft);
                });
                if (NsModel.isValidValue(nextState)) {
                    _this.setValue(nextState);
                }
                return;
            }
            _this.subject$.next(value);
        };
        /** 是否已有值 */
        this.hasValidValue = function () {
            var value = _this.getValue();
            return NsModel.isValidValue(value);
        };
        /** 获取非空的值 */
        this.getValidValue = function () { return __awaiter(_this, void 0, void 0, function () {
            var deffer, d;
            return __generator(this, function (_a) {
                deffer = new deferred_1.Deferred();
                /** 返回非空的值 */
                if (this.hasValidValue()) {
                    return [2 /*return*/, this.getValue()];
                }
                d = this.watch(function (val) {
                    if (NsModel.isValidValue(val)) {
                        deffer.resolve(val);
                        d.dispose();
                    }
                });
                return [2 /*return*/, deffer.promise];
            });
        }); };
        /** disposable */
        this.dispose = function () {
            _this.toDispose.dispose();
        };
        this.subject$ = new rxjs_1.BehaviorSubject(initialValue || NsModel.EMPTY_VALUE);
        this.maxSubscription = maxSubscription;
        this.toDispose.push(disposable_1.Disposable.create(function () {
            _this.subject$.complete();
            _this.subject$.unsubscribe();
            // @ts-ignore
            _this.subject$ = null;
        }));
    }
    return RxModel;
}());
exports.RxModel = RxModel;
//# sourceMappingURL=rx-model.js.map