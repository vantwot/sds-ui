"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphModelContribution = void 0;
var mana_syringe_1 = require("mana-syringe");
var interface_1 = require("../interface");
var disposable_1 = require("../../common/disposable");
var event_helper_1 = require("../../common/event-helper");
var graph_provider_1 = require("../../xflow-main/graph/graph-provider");
var MODELS = __importStar(require("../constant"));
var GraphModelContribution = /** @class */ (function () {
    function GraphModelContribution() {
        var _this = this;
        /** 获取画布实例 */
        this.getGraphInstance = function () { return __awaiter(_this, void 0, void 0, function () {
            var graphInstance, graphConfig;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.graphProvider.getGraphInstance()];
                    case 1:
                        graphInstance = _a.sent();
                        return [4 /*yield*/, this.graphProvider.getGraphOptions()];
                    case 2:
                        graphConfig = _a.sent();
                        return [2 /*return*/, { graph: graphInstance, config: graphConfig }];
                }
            });
        }); };
    }
    GraphModelContribution.prototype.registerModel = function (registry) {
        var _this = this;
        /** X6 GRAPH META */
        registry.registerModel({
            id: MODELS.GRAPH_META.id,
            getInitialValue: function () { return ({
                flowId: '-1',
            }); },
            watchChange: function (self) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, disposable_1.Disposable.create(function () {
                            self.setValue({ flowId: '-1' });
                        })];
                });
            }); },
        });
        /** Graph 多选状态 */
        registry.registerModel({
            id: MODELS.GRAPH_ENABLE_MULTI_SELECT.id,
            getInitialValue: function () { return ({
                isEnable: false,
            }); },
            watchChange: function (self) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, disposable_1.Disposable.create(function () {
                            self.setValue({ isEnable: false });
                        })];
                });
            }); },
        });
        /** 选中Cells状态 */
        registry.registerModel({
            id: MODELS.SELECTED_CELLS.id,
            getInitialValue: function () { return []; },
            watchChange: function (self) { return __awaiter(_this, void 0, void 0, function () {
                var graph, onChange;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getGraphInstance()];
                        case 1:
                            graph = (_a.sent()).graph;
                            onChange = function (e) {
                                var selected = e.selected;
                                self.setValue(selected);
                            };
                            graph.on('selection:changed', onChange);
                            return [2 /*return*/, disposable_1.Disposable.create(function () { return graph.off('selection:changed', onChange); })];
                    }
                });
            }); },
        });
        /** 选中Cell状态 */
        registry.registerModel({
            id: MODELS.SELECTED_CELL.id,
            watchChange: function (self, modelService) { return __awaiter(_this, void 0, void 0, function () {
                var cellsModel;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, MODELS.SELECTED_CELLS.getModel(modelService)];
                        case 1:
                            cellsModel = _a.sent();
                            return [2 /*return*/, cellsModel.watch(function (cells) {
                                    if (cells === void 0) { cells = []; }
                                    self.setValue(__spreadArray([], cells, true).pop() || null);
                                })];
                    }
                });
            }); },
        });
        /** 选中节点列表状态 */
        registry.registerModel({
            id: MODELS.SELECTED_NODES.id,
            getInitialValue: function () { return []; },
            watchChange: function (self, modelService) { return __awaiter(_this, void 0, void 0, function () {
                var model;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, MODELS.SELECTED_CELLS.getModel(modelService)];
                        case 1:
                            model = _a.sent();
                            return [2 /*return*/, model.watch(function (cells) {
                                    if (cells === void 0) { cells = []; }
                                    var nodes = cells.filter(function (cell) { return cell.isNode(); });
                                    self.setValue(nodes);
                                })];
                    }
                });
            }); },
        });
        /** 选中节点状态 */
        registry.registerModel({
            id: MODELS.SELECTED_NODE.id,
            watchChange: function (self, modelService) { return __awaiter(_this, void 0, void 0, function () {
                var model, disposable;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, MODELS.SELECTED_NODES.getModel(modelService)];
                        case 1:
                            model = _a.sent();
                            disposable = model.watch(function (nodes) {
                                self.setValue(__spreadArray([], nodes, true).pop() || null);
                            });
                            return [2 /*return*/, disposable];
                    }
                });
            }); },
        });
        /** 是否选中节点状态 */
        registry.registerModel({
            id: MODELS.IS_NODE_SELECTED.id,
            watchChange: function (self, modelService) { return __awaiter(_this, void 0, void 0, function () {
                var model, disposable;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, MODELS.SELECTED_NODES.getModel(modelService)];
                        case 1:
                            model = _a.sent();
                            disposable = model.watch(function (nodes) {
                                self.setValue(nodes.length > 0);
                            });
                            return [2 /*return*/, disposable];
                    }
                });
            }); },
        });
        /** 画布选中节点是否是Group */
        registry.registerModel({
            id: MODELS.IS_GROUP_SELECTED.id,
            getInitialValue: function () { return false; },
            watchChange: function (self, modelService) { return __awaiter(_this, void 0, void 0, function () {
                var model, disposable;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, MODELS.SELECTED_CELLS.getModel(modelService)];
                        case 1:
                            model = _a.sent();
                            disposable = model.watch(function (cells) {
                                var isGroup = cells.every(function (cell) {
                                    return cell && cell.getProp('isGroup') === true;
                                });
                                self.setValue(isGroup);
                            });
                            return [2 /*return*/, disposable];
                    }
                });
            }); },
        });
        /** 画布选中节点是否是Group */
        registry.registerModel({
            id: MODELS.SELECTED_GROUPS.id,
            getInitialValue: function () { return []; },
            watchChange: function (self, modelService) { return __awaiter(_this, void 0, void 0, function () {
                var model, disposable;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, MODELS.SELECTED_NODES.getModel(modelService)];
                        case 1:
                            model = _a.sent();
                            disposable = model.watch(function (cells) {
                                var groups = cells.filter(function (cell) {
                                    return cell && cell.getProp('isGroup') === true;
                                });
                                self.setValue(groups);
                            });
                            return [2 /*return*/, disposable];
                    }
                });
            }); },
        });
        /** 画布选中节点是否是普通节点 */
        registry.registerModel({
            id: MODELS.IS_NORMAL_NODES_SELECTED.id,
            getInitialValue: function () { return false; },
            watchChange: function (self, modelService) { return __awaiter(_this, void 0, void 0, function () {
                var model, disposable;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, MODELS.SELECTED_CELLS.getModel(modelService)];
                        case 1:
                            model = _a.sent();
                            disposable = model.watch(function (cells) {
                                var isNormalNodesSelected = cells.every(function (cell) {
                                    var isNotGroup = !(cell && cell.getProp('isGroup'));
                                    var isNotGroupChild = !(cell && cell.getProp('group'));
                                    return isNotGroup && isNotGroupChild;
                                });
                                var isNodeSelected = cells.length > 0 && isNormalNodesSelected;
                                self.setValue(isNodeSelected);
                            });
                            return [2 /*return*/, disposable];
                    }
                });
            }); },
        });
        /** 画布缩放状态 */
        registry.registerModel({
            id: MODELS.GRAPH_SCALE.id,
            getInitialValue: function () { return ({ zoomFactor: -1 }); },
            watchChange: function (self) { return __awaiter(_this, void 0, void 0, function () {
                var graph, onChange;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getGraphInstance()];
                        case 1:
                            graph = (_a.sent()).graph;
                            onChange = function (e) {
                                var factor = graph.zoom();
                                self.setValue(__assign(__assign({}, e), { zoomFactor: factor }));
                            };
                            graph.on('scale', onChange);
                            return [2 /*return*/, disposable_1.Disposable.create(function () { return graph.off('scale', onChange); })];
                    }
                });
            }); },
        });
        /** 画布右键菜单状态 */
        registry.registerModel({
            id: MODELS.CONTEXTMENU_TARGET.id,
            watchChange: function (self) { return __awaiter(_this, void 0, void 0, function () {
                var _a, graph, config, onContextMenu, toDispose;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.getGraphInstance()];
                        case 1:
                            _a = _b.sent(), graph = _a.graph, config = _a.config;
                            onContextMenu = function (type) {
                                return function (e) {
                                    var x = e.x, y = e.y;
                                    var pagePoint = graph.localToClient({ x: x, y: y });
                                    var clientRect = config.rootContainer.getBoundingClientRect();
                                    var anchor = {
                                        x: pagePoint.x - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.x) || 0),
                                        y: pagePoint.y - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.y) || 0),
                                    };
                                    self.setValue({
                                        type: type,
                                        anchor: anchor,
                                        data: e,
                                        cell: e.cell,
                                    });
                                };
                            };
                            toDispose = new disposable_1.DisposableCollection();
                            toDispose.pushAll([
                                (0, event_helper_1.disposableSubscribe)(graph, 'node:contextmenu', onContextMenu('node')),
                                (0, event_helper_1.disposableSubscribe)(graph, 'edge:contextmenu', onContextMenu('edge')),
                                (0, event_helper_1.disposableSubscribe)(graph, 'blank:contextmenu', onContextMenu('blank')),
                            ]);
                            return [2 /*return*/, toDispose];
                    }
                });
            }); },
        });
        /** 画布历史Redo */
        registry.registerModel({
            id: MODELS.HISTORY_REDOABLE.id,
            getInitialValue: function () { return false; },
            watchChange: function (self) { return __awaiter(_this, void 0, void 0, function () {
                var graph, onChange;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getGraphInstance()];
                        case 1:
                            graph = (_a.sent()).graph;
                            onChange = function () {
                                var canRedo = graph.history.canRedo();
                                self.setValue(canRedo);
                            };
                            if (graph.history) {
                                graph.history.on('change', onChange);
                            }
                            return [2 /*return*/, disposable_1.Disposable.create(function () { return graph.history.off('change', onChange); })];
                    }
                });
            }); },
        });
        /** 画布历史undo */
        registry.registerModel({
            id: MODELS.HISTORY_UNDOABLE.id,
            getInitialValue: function () { return false; },
            watchChange: function (self) { return __awaiter(_this, void 0, void 0, function () {
                var graph, onChange;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getGraphInstance()];
                        case 1:
                            graph = (_a.sent()).graph;
                            onChange = function () {
                                var canUndo = graph.history.canUndo();
                                self.setValue(canUndo);
                            };
                            if (graph.history) {
                                graph.history.on('change', onChange);
                            }
                            return [2 /*return*/, disposable_1.Disposable.create(function () { return graph.history.off('change', onChange); })];
                    }
                });
            }); },
        });
    };
    __decorate([
        (0, mana_syringe_1.inject)(graph_provider_1.IGraphProvider),
        __metadata("design:type", Object)
    ], GraphModelContribution.prototype, "graphProvider", void 0);
    GraphModelContribution = __decorate([
        (0, mana_syringe_1.singleton)({ contrib: interface_1.IModelContribution })
    ], GraphModelContribution);
    return GraphModelContribution;
}());
exports.GraphModelContribution = GraphModelContribution;
//# sourceMappingURL=graph-model.js.map