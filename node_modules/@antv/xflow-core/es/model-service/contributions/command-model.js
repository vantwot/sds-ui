var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { singleton, inject } from 'mana-syringe';
import { IGraphCommandService } from '../../command/interface';
import { COMMAND_REDOABLE, COMMAND_UNDOABLE, COMMAND_GLOBALS } from '../constant';
import { IModelContribution } from '../interface';
let CommandModelContribution = class CommandModelContribution {
    /** 扩展Model */
    registerModel(registry) {
        /** 是否可以redo */
        registry.registerModel({
            id: COMMAND_REDOABLE.id,
            getInitialValue: () => this.commands.isRedoable,
            watchChange: (model) => __awaiter(this, void 0, void 0, function* () {
                const disposable = this.commands.watchChange(() => {
                    model.setValue(this.commands.isRedoable);
                });
                return disposable;
            }),
        });
        /** 是否可以undo */
        registry.registerModel({
            id: COMMAND_UNDOABLE.id,
            getInitialValue: () => this.commands.isUndoable,
            watchChange: (model) => __awaiter(this, void 0, void 0, function* () {
                const disposable = this.commands.watchChange(() => {
                    model.setValue(this.commands.isUndoable);
                });
                return disposable;
            }),
        });
        /** command 执行结果 */
        registry.registerModel({
            id: COMMAND_GLOBALS.id,
            modelFactory: () => {
                return this.commands.Globals;
            },
        });
    }
};
__decorate([
    inject(IGraphCommandService),
    __metadata("design:type", Object)
], CommandModelContribution.prototype, "commands", void 0);
CommandModelContribution = __decorate([
    singleton({ contrib: IModelContribution })
], CommandModelContribution);
export { CommandModelContribution };
//# sourceMappingURL=command-model.js.map