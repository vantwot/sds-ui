import type { NsGraph } from '../../interface';
import type { IContext, IArgsBase } from '../../command/interface';
import type { IHooks } from '../../hooks/interface';
import type { HookHub } from '@antv/xflow-hook';
import type { Edge as X6Edge } from '@antv/x6';
import { ICommandHandler } from '../../command/interface';
export declare type ICommand = ICommandHandler<NsAddEdge.IArgs, NsAddEdge.IResult, NsAddEdge.ICmdHooks>;
export declare namespace NsAddEdge {
    /** Command: 用于注册named factory */
    const command: import("../../command/interface").IGraphCommand;
    /** hookName */
    const hookKey = "addEdge";
    /** hook 参数类型 */
    interface IArgs extends IArgsBase {
        edgeConfig: NsGraph.IEdgeConfig;
        cellFactory?: IEdgeCellFactory;
        createIdService?: ICreateEdgeIdService;
        createEdgeService?: ICreateEdgeService;
    }
    /** hook handler 返回类型 */
    interface IResult {
        edgeConfig: NsGraph.IEdgeConfig;
        edgeCell: X6Edge;
    }
    interface ICreateEdgeService {
        (args: IArgs): Promise<NsGraph.IEdgeConfig>;
    }
    interface ICreateEdgeIdService {
        (edgeConfig: NsGraph.IEdgeConfig): Promise<string>;
    }
    interface IEdgeCellFactory {
        (args: NsGraph.IEdgeConfig, self: AddEdgeCommand): Promise<X6Edge>;
    }
    /** hooks 类型 */
    interface ICmdHooks extends IHooks {
        addEdge: HookHub<IArgs, IResult>;
    }
    /** edge id 类型 */
    const createEdgeId: (edge: NsGraph.IEdgeConfig) => string;
}
export declare class AddEdgeCommand implements ICommand {
    /** api */
    contextProvider: ICommand['contextProvider'];
    ctx: IContext<NsAddEdge.IArgs, NsAddEdge.IResult, NsAddEdge.ICmdHooks>;
    init(): void;
    /** 处理edgeConfig的兜底逻辑 */
    processEdgeConfig: (args: NsAddEdge.IArgs, edge: NsGraph.IEdgeConfig) => Promise<NsGraph.IEdgeConfig>;
    /** 执行Cmd */
    execute: () => Promise<this>;
    /** undo cmd */
    undo: () => Promise<this>;
    /** redo cmd */
    redo: () => Promise<this>;
    isUndoable(): boolean;
}
