var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { inject, injectable, postConstruct } from 'mana-syringe';
import { ICommandHandler, ICommandContextProvider } from '../../command/interface';
import { XFlowEdgeCommands } from '../constant';
import { Disposable } from '../../common/disposable';
export var NsAddEdge;
(function (NsAddEdge) {
    /** Command: 用于注册named factory */
    NsAddEdge.command = XFlowEdgeCommands.ADD_EDGE;
    /** hookName */
    NsAddEdge.hookKey = 'addEdge';
    /** edge id 类型 */
    NsAddEdge.createEdgeId = (edge) => {
        return `${edge.source}:${edge.sourcePortId}-${edge.target}:${edge.targetPortId}`;
    };
})(NsAddEdge || (NsAddEdge = {}));
let AddEdgeCommand = 
/** 创建节点命令 */
class AddEdgeCommand {
    constructor() {
        /** 处理edgeConfig的兜底逻辑 */
        this.processEdgeConfig = (args, edge) => __awaiter(this, void 0, void 0, function* () {
            /** 处理edgeConfig没有返回id的问题 */
            if (!edge.id) {
                const { createIdService = NsAddEdge.createEdgeId } = args;
                edge.id = yield createIdService(edge);
            }
            return edge;
        });
        /** 执行Cmd */
        this.execute = () => __awaiter(this, void 0, void 0, function* () {
            const { args, hooks: runtimeHook } = this.ctx.getArgs();
            const hooks = this.ctx.getHooks();
            const result = yield hooks.addEdge.call(
            /** 执行 hooks pipeline处理args */
            args, 
            /** 执行 callback */
            (handlerArgs) => __awaiter(this, void 0, void 0, function* () {
                const { cellFactory, createEdgeService, commandService } = handlerArgs;
                const edgeConfig = createEdgeService
                    ? yield createEdgeService(handlerArgs)
                    : handlerArgs.edgeConfig;
                const graph = yield this.ctx.getX6Graph();
                yield this.processEdgeConfig(handlerArgs, edgeConfig);
                let edgeCell;
                if (cellFactory) {
                    const cell = yield cellFactory(edgeConfig, this);
                    edgeCell = graph.addEdge(cell);
                }
                else {
                    edgeCell = graph.addEdge(Object.assign(Object.assign({}, edgeConfig), { 
                        /** 由于X6的实现是React节点挂在label上的, 所以必须要给label设置值 */
                        label: (edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.label) || edgeConfig, data: Object.assign({}, edgeConfig) }));
                }
                /** 创建 undo */
                const undo = Disposable.create(() => {
                    commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, {
                        x6Edge: edgeCell,
                    });
                });
                /** add undo */
                this.ctx.addUndo(undo);
                return { edgeConfig: edgeConfig, edgeCell };
            }), runtimeHook);
            this.ctx.setResult(result);
            return this;
        });
        /** undo cmd */
        this.undo = () => __awaiter(this, void 0, void 0, function* () {
            this.ctx.undo();
            return this;
        });
        /** redo cmd */
        this.redo = () => __awaiter(this, void 0, void 0, function* () {
            if (!this.isUndoable) {
                yield this.execute();
            }
            return this;
        });
    }
    init() {
        this.ctx = this.contextProvider();
    }
    isUndoable() {
        return this.ctx.isUndoable();
    }
};
__decorate([
    inject(ICommandContextProvider),
    __metadata("design:type", Object)
], AddEdgeCommand.prototype, "contextProvider", void 0);
__decorate([
    postConstruct(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], AddEdgeCommand.prototype, "init", null);
AddEdgeCommand = __decorate([
    injectable({
        token: { token: ICommandHandler, named: NsAddEdge.command.id },
    })
    /** 创建节点命令 */
], AddEdgeCommand);
export { AddEdgeCommand };
//# sourceMappingURL=edge-add.js.map