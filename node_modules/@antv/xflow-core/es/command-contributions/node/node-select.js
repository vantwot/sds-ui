var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { inject, injectable, postConstruct } from 'mana-syringe';
import { ICommandHandler, ICommandContextProvider } from '../../command/interface';
import { XFlowNodeCommands } from '../constant';
export var NsSelectNode;
(function (NsSelectNode) {
    NsSelectNode.command = XFlowNodeCommands.SELECT_NODE;
    NsSelectNode.hookKey = 'selectNode';
})(NsSelectNode || (NsSelectNode = {}));
let SelectNodeCommand = 
/** 节点更新命令 */
class SelectNodeCommand {
    constructor() {
        this.execute = () => __awaiter(this, void 0, void 0, function* () {
            const { args, hooks: runtimeHook } = this.ctx.getArgs();
            const hooks = this.ctx.getHooks();
            const result = yield hooks.selectNode.call(args, (handlerArgs) => __awaiter(this, void 0, void 0, function* () {
                const x6Graph = yield this.ctx.getX6Graph();
                const currentSelectionIds = x6Graph.getSelectedCells().map(node => node.id);
                const { nodeIds, resetSelection, commandService } = handlerArgs;
                if (resetSelection) {
                    x6Graph.resetSelection(nodeIds);
                }
                else {
                    x6Graph.select(nodeIds);
                }
                this.ctx.addUndo({
                    dispose: () => {
                        commandService.executeUndoCommand(XFlowNodeCommands.SELECT_NODE.id, {
                            nodeIds: currentSelectionIds,
                            resetSelection: true,
                        });
                    },
                });
                return {};
            }), runtimeHook);
            this.ctx.setResult(result);
            return this;
        });
        this.undo = () => __awaiter(this, void 0, void 0, function* () {
            this.ctx.undo();
            return this;
        });
        this.redo = () => __awaiter(this, void 0, void 0, function* () {
            if (!this.ctx.isUndoable) {
                yield this.execute();
            }
            return this;
        });
    }
    init() {
        this.ctx = this.contextProvider();
    }
    isUndoable() {
        return this.ctx.isUndoable();
    }
};
__decorate([
    inject(ICommandContextProvider),
    __metadata("design:type", Object)
], SelectNodeCommand.prototype, "contextProvider", void 0);
__decorate([
    postConstruct(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], SelectNodeCommand.prototype, "init", null);
SelectNodeCommand = __decorate([
    injectable({
        token: { token: ICommandHandler, named: NsSelectNode.command.id },
    })
    /** 节点更新命令 */
], SelectNodeCommand);
export { SelectNodeCommand };
//# sourceMappingURL=node-select.js.map