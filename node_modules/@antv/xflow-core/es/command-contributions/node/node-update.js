var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { inject, injectable, postConstruct } from 'mana-syringe';
import { XFlowNodeCommands } from '../constant';
import { ICommandHandler, ICommandContextProvider } from '../../command/interface';
import { ReactShape } from '@antv/x6-react-shape';
export var NsUpdateNode;
(function (NsUpdateNode) {
    NsUpdateNode.command = XFlowNodeCommands.UPDATE_NODE;
    NsUpdateNode.hookKey = 'updateNode';
    NsUpdateNode.XFlowNodeSetOptions = { overwrite: true };
    NsUpdateNode.NODE_WIDTH = 200;
    NsUpdateNode.NODE_HEIGHT = 40;
})(NsUpdateNode || (NsUpdateNode = {}));
let UpdateNodeCommand = 
/** 节点更新命令 */
class UpdateNodeCommand {
    constructor() {
        this.execute = () => __awaiter(this, void 0, void 0, function* () {
            const { args, hooks: runtimeHook } = this.ctx.getArgs();
            const hooks = this.ctx.getHooks();
            const result = yield hooks.updateNode.call(args, (handlerArgs) => __awaiter(this, void 0, void 0, function* () {
                const x6Graph = yield this.ctx.getX6Graph();
                const { nodeConfig, options = NsUpdateNode.XFlowNodeSetOptions } = handlerArgs;
                const x6Node = x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.getCellById(nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.id);
                x6Node.setData(nodeConfig, options);
                x6Node.setPosition((nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.x) || 0, (nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.y) || 0);
                x6Node.setSize((nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.width) || NsUpdateNode.NODE_WIDTH, (nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.height) || NsUpdateNode.NODE_HEIGHT);
                if (!(x6Node instanceof ReactShape) && !!x6Node.getAttrByPath('text/text')) {
                    x6Node.setAttrByPath('text/text', nodeConfig.label);
                }
                // 支持nodeAttrs
                if (nodeConfig.attrs) {
                    x6Node.setAttrs(nodeConfig.attrs);
                }
                return {
                    nodeConfig,
                    nodeCell: x6Node,
                };
            }), runtimeHook);
            this.ctx.setResult(result);
            return this;
        });
        this.undo = () => __awaiter(this, void 0, void 0, function* () {
            this.ctx.undo();
            return this;
        });
        this.redo = () => __awaiter(this, void 0, void 0, function* () {
            if (!this.ctx.isUndoable) {
                yield this.execute();
            }
            return this;
        });
    }
    init() {
        this.ctx = this.contextProvider();
    }
    isUndoable() {
        return this.ctx.isUndoable();
    }
};
__decorate([
    inject(ICommandContextProvider),
    __metadata("design:type", Object)
], UpdateNodeCommand.prototype, "contextProvider", void 0);
__decorate([
    postConstruct(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], UpdateNodeCommand.prototype, "init", null);
UpdateNodeCommand = __decorate([
    injectable({
        token: { token: ICommandHandler, named: NsUpdateNode.command.id },
    })
    /** 节点更新命令 */
], UpdateNodeCommand);
export { UpdateNodeCommand };
//# sourceMappingURL=node-update.js.map