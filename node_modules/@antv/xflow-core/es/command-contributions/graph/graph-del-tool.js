var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { inject, injectable } from 'mana-syringe';
import { ICommandHandler, ICommandContextProvider } from '../../command/interface';
import { XFlowGraphCommands } from '../constant';
export var NsGraphDelTool;
(function (NsGraphDelTool) {
    /** Command: 用于注册named factory */
    NsGraphDelTool.command = XFlowGraphCommands.GRAPH_DEL_TOOL;
    /** hookName */
    NsGraphDelTool.hookKey = 'delTool';
})(NsGraphDelTool || (NsGraphDelTool = {}));
let GraphDelToolCommand = 
/** 创建节点命令 */
class GraphDelToolCommand {
    constructor() {
        /** 执行Cmd */
        this.execute = () => __awaiter(this, void 0, void 0, function* () {
            const ctx = this.contextProvider();
            const { args, hooks: runtimeHook } = ctx.getArgs();
            const hooks = ctx.getHooks();
            const result = yield hooks.delTool.call(args, (handlerArgs) => __awaiter(this, void 0, void 0, function* () {
                const { cellId, toolName, toolConfig } = handlerArgs;
                const graph = yield ctx.getX6Graph();
                const cell = graph.getCellById(cellId);
                if (cell) {
                    if (toolName === '*') {
                        cell.removeTools(toolConfig);
                    }
                    else {
                        cell.removeTool(toolName, toolConfig);
                    }
                }
                return { err: null };
            }), runtimeHook);
            ctx.setResult(result);
            return this;
        });
        /** undo cmd */
        this.undo = () => __awaiter(this, void 0, void 0, function* () {
            const ctx = this.contextProvider();
            if (this.isUndoable()) {
                ctx.undo();
            }
            return this;
        });
        /** redo cmd */
        this.redo = () => __awaiter(this, void 0, void 0, function* () {
            if (!this.isUndoable()) {
                yield this.execute();
            }
            return this;
        });
    }
    isUndoable() {
        const ctx = this.contextProvider();
        return ctx.isUndoable();
    }
};
__decorate([
    inject(ICommandContextProvider),
    __metadata("design:type", Object)
], GraphDelToolCommand.prototype, "contextProvider", void 0);
GraphDelToolCommand = __decorate([
    injectable({
        token: { token: ICommandHandler, named: NsGraphDelTool.command.id },
    })
    /** 创建节点命令 */
], GraphDelToolCommand);
export { GraphDelToolCommand };
//# sourceMappingURL=graph-del-tool.js.map