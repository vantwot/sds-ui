var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { inject, injectable, postConstruct } from 'mana-syringe';
import { ICommandHandler, ICommandContextProvider } from '../../command/interface';
import { XFlowGraphCommands } from '../constant';
import { MODELS } from '../../model-service';
export var NsGraphMeta;
(function (NsGraphMeta) {
    /** Command Id: 用于注册named factory */
    NsGraphMeta.command = XFlowGraphCommands.LOAD_META;
    /** hookName */
    NsGraphMeta.hookKey = 'graphMeta';
})(NsGraphMeta || (NsGraphMeta = {}));
let GraphMetaCommand = 
/** 创建节点命令 */
class GraphMetaCommand {
    constructor() {
        /** 执行Cmd */
        this.execute = () => __awaiter(this, void 0, void 0, function* () {
            const { args, hooks: runtimeHook } = this.ctx.getArgs();
            const hooks = this.ctx.getHooks();
            const result = yield hooks.graphMeta.call(
            /** 执行hooks pipeline处理args */
            args, 
            /** 执行 callback */
            (handlerArgs) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const { graphMetaService } = handlerArgs;
                const meta = graphMetaService
                    ? yield graphMetaService(handlerArgs)
                    : { flowId: (_a = handlerArgs === null || handlerArgs === void 0 ? void 0 : handlerArgs.meta) === null || _a === void 0 ? void 0 : _a.flowId };
                return { graphMeta: meta, flowId: meta === null || meta === void 0 ? void 0 : meta.flowId };
            }), 
            /** 外部的 hook */
            runtimeHook);
            const modelService = this.ctx.getModelService();
            /** 如果已经注册，直接更新已有的值 */
            const model = yield MODELS.GRAPH_META.getModel(modelService);
            model.setValue(result.graphMeta);
            /** 设置结果 */
            this.ctx.setResult(result);
            return this;
        });
        /** undo cmd */
        this.undo = () => __awaiter(this, void 0, void 0, function* () {
            this.ctx.undo();
            return this;
        });
        /** redo cmd */
        this.redo = () => __awaiter(this, void 0, void 0, function* () {
            if (!this.ctx.isUndoable) {
                yield this.execute();
            }
            return this;
        });
    }
    init() {
        this.ctx = this.contextProvider();
    }
    /** isUndoable */
    isUndoable() {
        return this.ctx.isUndoable();
    }
};
__decorate([
    inject(ICommandContextProvider),
    __metadata("design:type", Object)
], GraphMetaCommand.prototype, "contextProvider", void 0);
__decorate([
    postConstruct(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], GraphMetaCommand.prototype, "init", null);
GraphMetaCommand = __decorate([
    injectable({
        token: { token: ICommandHandler, named: NsGraphMeta.command.id },
    })
    /** 创建节点命令 */
], GraphMetaCommand);
export { GraphMetaCommand };
//# sourceMappingURL=graph-meta.js.map