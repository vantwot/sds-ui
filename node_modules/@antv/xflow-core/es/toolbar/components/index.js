var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import React from 'react';
import { createModule } from '../module';
import { useExtensionRegistry } from '../../xflow-main/components/extension-context';
export const ToolbarRegistry = props => {
    const {} = props;
    /** 获取配置中心 */
    const extensionRegistry = useExtensionRegistry();
    React.useEffect(() => {
        const disposable = extensionRegistry.addCoreModule({
            config: { CONFIG_TYPE: 'ToolbarRegistry', getConfig: () => __awaiter(void 0, void 0, void 0, function* () { }) },
            createModule,
        });
        return () => {
            disposable.dispose();
        };
    }, [extensionRegistry]);
    return null;
};
ToolbarRegistry.defaultProps = { XFlowModuleType: 'ToolbarRegistry' };
//# sourceMappingURL=index.js.map