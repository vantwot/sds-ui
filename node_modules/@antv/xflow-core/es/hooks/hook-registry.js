var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { singleton, Contribution, contrib } from 'mana-syringe';
import { DisposableCollection } from '../common/disposable';
import { IFrontendApplicationContribution } from '../xflow-main/interface';
import { initHooks, IHookService, IHookContribution } from './interface';
let HookRegistry = class HookRegistry {
    constructor() {
        /** disposables */
        this.toDispose = new DisposableCollection();
        /** hooks */
        this.hookProvider = () => this.hooks;
        /** 注册hook插件 */
        this.registerHook = (fn) => {
            return fn(this.hooks);
        };
        /** 注册hook  */
        this.registerHookHub = (hookName, hook) => {
            this.hooks[hookName] = hook;
            return {
                dispose: () => {
                    delete this.hooks[hookName];
                },
            };
        };
        /** app启动时，收集hook扩展点的注册项 */
        this.onStart = () => __awaiter(this, void 0, void 0, function* () {
            const contributions = this.contributionProvider.getContributions();
            for (const contribution of contributions) {
                contribution.registerHookHub(this);
            }
            for (const contribution of contributions) {
                contribution.registerHook(this.hooks);
            }
        });
        this.hooks = initHooks();
    }
    /** app的停止逻辑 */
    onStop() {
        this.toDispose.dispose();
    }
};
__decorate([
    contrib(IHookContribution),
    __metadata("design:type", Object)
], HookRegistry.prototype, "contributionProvider", void 0);
HookRegistry = __decorate([
    singleton({ contrib: [IFrontendApplicationContribution, IHookService] }),
    __metadata("design:paramtypes", [])
], HookRegistry);
export { HookRegistry };
//# sourceMappingURL=hook-registry.js.map