{"version":3,"sources":["../src/inversify.config.ts"],"names":["EventEmitter","Container","decorate","injectable","getDecorators","TYPES","FontService","IconService","CameraService","ControlService","MarkerService","PopupService","GlobalConfigService","CoordinateSystemService","InteractionService","PickingService","LayerService","StyleAttributeService","SceneService","ShaderModuleService","ClearPass","MultiPassRenderer","PixelPickingPass","BlurHPass","BlurVPass","ColorHalfTonePass","CopyPass","HexagonalPixelatePass","InkPass","NoisePass","SepiaPass","PostProcessor","RenderPass","TAAPass","container","bind","IGlobalConfigService","to","inSingletonScope","IShaderModuleService","IEventEmitter","DECORATORS","lazyInject","serviceIdentifier","original","proto","key","descriptor","call","initializer","lazyMultiInject","sceneIdCounter","createSceneContainer","sceneContainer","parent","SceneID","toConstantValue","ILayerService","ISceneService","ICameraService","ICoordinateSystemService","IInteractionService","IPickingService","IControlService","IMarkerService","IIconService","IFontService","IPopupService","INormalPass","whenTargetNamed","IFactoryNormalPass","toFactory","context","named","getNamed","IPostProcessingPass","IFactoryPostProcessingPass","pass","setName","createLayerContainer","layerContainer","IStyleAttributeService","IMultiPassRenderer","IPostProcessor"],"mappings":"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","sourcesContent":["/**\n * Root Container\n * @see /dev-docs/IoC 容器、依赖注入与服务说明.md\n */\nimport 'reflect-metadata';\n\nimport { EventEmitter } from 'eventemitter3';\nimport { Container, decorate, injectable, interfaces } from 'inversify';\nimport getDecorators from 'inversify-inject-decorators';\nimport { TYPES } from './types';\n\n/** Service interfaces */\nimport { IFontService } from './services/asset/IFontService';\nimport { IIconService } from './services/asset/IIconService';\nimport { ICameraService } from './services/camera/ICameraService';\nimport { IControlService } from './services/component/IControlService';\nimport { IGlobalConfigService } from './services/config/IConfigService';\nimport { ICoordinateSystemService } from './services/coordinate/ICoordinateSystemService';\nimport { IInteractionService } from './services/interaction/IInteractionService';\nimport { IPickingService } from './services/interaction/IPickingService';\nimport { ILayerService } from './services/layer/ILayerService';\nimport { IStyleAttributeService } from './services/layer/IStyleAttributeService';\nimport { ISceneService } from './services/scene/ISceneService';\nimport { IShaderModuleService } from './services/shader/IShaderModuleService';\n\n/** Service implements */\nimport FontService from './services/asset/FontService';\nimport IconService from './services/asset/IconService';\nimport CameraService from './services/camera/CameraService';\nimport ControlService from './services/component/ControlService';\nimport MarkerService from './services/component/MarkerService';\nimport PopupService from './services/component/PopupService';\nimport GlobalConfigService from './services/config/ConfigService';\nimport CoordinateSystemService from './services/coordinate/CoordinateSystemService';\nimport InteractionService from './services/interaction/InteractionService';\nimport PickingService from './services/interaction/PickingService';\nimport LayerService from './services/layer/LayerService';\nimport StyleAttributeService from './services/layer/StyleAttributeService';\nimport SceneService from './services/scene/SceneService';\nimport ShaderModuleService from './services/shader/ShaderModuleService';\n\n/** PostProcessing passes */\nimport { IMarkerService } from './services/component/IMarkerService';\nimport { IPopupService } from './services/component/IPopupService';\nimport {\n  IMultiPassRenderer,\n  IPass,\n  IPostProcessingPass,\n  IPostProcessor,\n} from './services/renderer/IMultiPassRenderer';\nimport ClearPass from './services/renderer/passes/ClearPass';\nimport MultiPassRenderer from './services/renderer/passes/MultiPassRenderer';\nimport PixelPickingPass from './services/renderer/passes/PixelPickingPass';\nimport BlurHPass from './services/renderer/passes/post-processing/BlurHPass';\nimport BlurVPass from './services/renderer/passes/post-processing/BlurVPass';\nimport ColorHalfTonePass from './services/renderer/passes/post-processing/ColorHalfTonePass';\nimport CopyPass from './services/renderer/passes/post-processing/CopyPass';\nimport HexagonalPixelatePass from './services/renderer/passes/post-processing/HexagonalPixelatePass';\nimport InkPass from './services/renderer/passes/post-processing/InkPass';\nimport NoisePass from './services/renderer/passes/post-processing/NoisePass';\nimport SepiaPass from './services/renderer/passes/post-processing/SepiaPass';\nimport PostProcessor from './services/renderer/passes/PostProcessor';\nimport RenderPass from './services/renderer/passes/RenderPass';\nimport TAAPass from './services/renderer/passes/TAAPass';\n\n// @see https://github.com/inversify/InversifyJS/blob/master/wiki/container_api.md#defaultscope\nconst container = new Container();\n\n/**\n * bind global services in root container\n */\ncontainer\n  .bind<IGlobalConfigService>(TYPES.IGlobalConfigService)\n  .to(GlobalConfigService)\n  .inSingletonScope();\n// container\n//   .bind<IIconService>(TYPES.IIconService)\n//   .to(IconService)\n//   .inSingletonScope();\ncontainer\n  .bind<IShaderModuleService>(TYPES.IShaderModuleService)\n  .to(ShaderModuleService)\n  .inSingletonScope();\n// container\n//   .bind<IFontService>(TYPES.IFontService)\n//   .to(FontService)\n//   .inSingletonScope();\n\n// @see https://github.com/inversify/InversifyJS/blob/master/wiki/inheritance.md#what-can-i-do-when-my-base-class-is-provided-by-a-third-party-module\ndecorate(injectable(), EventEmitter);\ncontainer.bind(TYPES.IEventEmitter).to(EventEmitter);\n// 支持 L7 使用 new 而非容器实例化的场景，同时禁止 lazyInject cache\n// @see https://github.com/inversify/inversify-inject-decorators#caching-vs-non-caching-behaviour\nconst DECORATORS = getDecorators(container, false);\n\ninterface IBabelPropertyDescriptor extends PropertyDescriptor {\n  initializer(): any;\n}\n// Add babel legacy decorators support\n// @see https://github.com/inversify/InversifyJS/issues/1050\n// @see https://github.com/inversify/InversifyJS/issues/1026#issuecomment-504936034\nexport const lazyInject = (\n  serviceIdentifier: interfaces.ServiceIdentifier<any>,\n) => {\n  const original = DECORATORS.lazyInject(serviceIdentifier);\n  // the 'descriptor' parameter is actually always defined for class fields for Babel, but is considered undefined for TSC\n  // so we just hack it with ?/! combination to avoid \"TS1240: Unable to resolve signature of property decorator when called as an expression\"\n  return function(\n    this: any,\n    proto: any,\n    key: string,\n    descriptor?: IBabelPropertyDescriptor,\n  ): void {\n    // make it work as usual\n    original.call(this, proto, key);\n    // return link to proto, so own value wont be 'undefined' after component's creation\n    if (descriptor) {\n      descriptor.initializer = () => {\n        return proto[key];\n      };\n    }\n  };\n};\nexport const lazyMultiInject = (\n  serviceIdentifier: interfaces.ServiceIdentifier<any>,\n) => {\n  const original = DECORATORS.lazyMultiInject(serviceIdentifier);\n  // the 'descriptor' parameter is actually always defined for class fields for Babel, but is considered undefined for TSC\n  // so we just hack it with ?/! combination to avoid \"TS1240: Unable to resolve signature of property decorator when called as an expression\"\n  return function(\n    this: any,\n    proto: any,\n    key: string,\n    descriptor?: IBabelPropertyDescriptor,\n  ): void {\n    // make it work as usual\n    original.call(this, proto, key);\n    if (descriptor) {\n      // return link to proto, so own value wont be 'undefined' after component's creation\n      descriptor!.initializer = () => {\n        return proto[key];\n      };\n    }\n  };\n};\n\nexport default container;\n\nlet sceneIdCounter = 0;\nexport function createSceneContainer() {\n  // @see https://github.com/inversify/InversifyJS/blob/master/wiki/hierarchical_di.md#support-for-hierarchical-di-systems\n  const sceneContainer = new Container();\n  sceneContainer.parent = container;\n\n  // 生成场景 ID 并保存在容器内\n  sceneContainer\n    .bind<string>(TYPES.SceneID)\n    .toConstantValue(`${sceneIdCounter++}`);\n  sceneContainer\n    .bind<ILayerService>(TYPES.ILayerService)\n    .to(LayerService)\n    .inSingletonScope();\n  sceneContainer\n    .bind<ISceneService>(TYPES.ISceneService)\n    .to(SceneService)\n    .inSingletonScope();\n  sceneContainer\n    .bind<ICameraService>(TYPES.ICameraService)\n    .to(CameraService)\n    .inSingletonScope();\n  sceneContainer\n    .bind<ICoordinateSystemService>(TYPES.ICoordinateSystemService)\n    .to(CoordinateSystemService)\n    .inSingletonScope();\n  sceneContainer\n    .bind<IInteractionService>(TYPES.IInteractionService)\n    .to(InteractionService)\n    .inSingletonScope();\n  sceneContainer\n    .bind<IPickingService>(TYPES.IPickingService)\n    .to(PickingService)\n    .inSingletonScope();\n  sceneContainer\n    .bind<IControlService>(TYPES.IControlService)\n    .to(ControlService)\n    .inSingletonScope();\n  sceneContainer\n    .bind<IMarkerService>(TYPES.IMarkerService)\n    .to(MarkerService)\n    .inSingletonScope();\n  sceneContainer\n    .bind<IIconService>(TYPES.IIconService)\n    .to(IconService)\n    .inSingletonScope();\n  sceneContainer\n    .bind<IFontService>(TYPES.IFontService)\n    .to(FontService)\n    .inSingletonScope();\n\n  sceneContainer\n    .bind<IPopupService>(TYPES.IPopupService)\n    .to(PopupService)\n    .inSingletonScope();\n\n  // 绑定常规 passes\n  sceneContainer\n    .bind<IPass<unknown>>(TYPES.INormalPass)\n    .to(ClearPass)\n    .whenTargetNamed('clear');\n  sceneContainer\n    .bind<IPass<unknown>>(TYPES.INormalPass)\n    .to(PixelPickingPass)\n    .whenTargetNamed('pixelPicking');\n  sceneContainer\n    .bind<IPass<unknown>>(TYPES.INormalPass)\n    .to(RenderPass)\n    .whenTargetNamed('render');\n  sceneContainer\n    .bind<IPass<unknown>>(TYPES.INormalPass)\n    .to(TAAPass)\n    .whenTargetNamed('taa');\n  sceneContainer\n    .bind<interfaces.Factory<IPass<unknown>>>(TYPES.IFactoryNormalPass)\n    .toFactory<IPass<unknown>>((context) => (named: string) =>\n      context.container.getNamed<IPass<unknown>>(TYPES.INormalPass, named),\n    );\n\n  // 绑定 post processing passes\n  sceneContainer\n    .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n    .to(CopyPass)\n    .whenTargetNamed('copy');\n  sceneContainer\n    .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n    .to(BlurHPass)\n    .whenTargetNamed('blurH');\n  sceneContainer\n    .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n    .to(BlurVPass)\n    .whenTargetNamed('blurV');\n  sceneContainer\n    .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n    .to(NoisePass)\n    .whenTargetNamed('noise');\n  sceneContainer\n    .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n    .to(SepiaPass)\n    .whenTargetNamed('sepia');\n  sceneContainer\n    .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n    .to(ColorHalfTonePass)\n    .whenTargetNamed('colorHalftone');\n  sceneContainer\n    .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n    .to(HexagonalPixelatePass)\n    .whenTargetNamed('hexagonalPixelate');\n  sceneContainer\n    .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n    .to(InkPass)\n    .whenTargetNamed('ink');\n\n  // 绑定工厂方法\n  sceneContainer\n    .bind<interfaces.Factory<IPostProcessingPass<unknown>>>(\n      TYPES.IFactoryPostProcessingPass,\n    )\n    .toFactory<IPostProcessingPass<unknown>>((context) => (named: string) => {\n      const pass = context.container.getNamed<IPostProcessingPass<unknown>>(\n        TYPES.IPostProcessingPass,\n        named,\n      );\n      pass.setName(named);\n      return pass;\n    });\n\n  return sceneContainer;\n}\n\nexport function createLayerContainer(sceneContainer: Container) {\n  const layerContainer = new Container();\n  layerContainer.parent = sceneContainer;\n\n  layerContainer\n    .bind<IStyleAttributeService>(TYPES.IStyleAttributeService)\n    .to(StyleAttributeService)\n    .inSingletonScope();\n  layerContainer\n    .bind<IMultiPassRenderer>(TYPES.IMultiPassRenderer)\n    .to(MultiPassRenderer)\n    .inSingletonScope();\n  layerContainer\n    .bind<IPostProcessor>(TYPES.IPostProcessor)\n    .to(PostProcessor)\n    .inSingletonScope();\n\n  return layerContainer;\n}\n"],"file":"inversify.config.js"}