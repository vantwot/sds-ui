import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";

var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

import { $window, rgb2arr } from '@antv/l7-utils';
import { inject, injectable } from 'inversify';
import 'reflect-metadata';
import { TYPES } from '../../types';
import Clock from '../../utils/clock';
var LayerService = (_dec = injectable(), _dec2 = inject(TYPES.IRendererService), _dec3 = inject(TYPES.IMapService), _dec4 = inject(TYPES.IGlobalConfigService), _dec(_class = (_class2 = function () {
  function LayerService() {
    _classCallCheck(this, LayerService);

    _defineProperty(this, "clock", new Clock());

    _defineProperty(this, "alreadyInRendering", false);

    _defineProperty(this, "layers", []);

    _defineProperty(this, "layerList", []);

    _defineProperty(this, "layerRenderID", void 0);

    _defineProperty(this, "sceneInited", false);

    _defineProperty(this, "animateInstanceCount", 0);

    _initializerDefineProperty(this, "renderService", _descriptor, this);

    _initializerDefineProperty(this, "mapService", _descriptor2, this);

    _initializerDefineProperty(this, "configService", _descriptor3, this);
  }

  _createClass(LayerService, [{
    key: "add",
    value: function add(layer) {
      if (this.sceneInited) {
        layer.init();
      }

      this.layers.push(layer);
      this.updateLayerRenderList();
    }
  }, {
    key: "initLayers",
    value: function initLayers() {
      this.sceneInited = true;
      this.layers.forEach(function (layer) {
        if (!layer.inited) {
          layer.init();
        }
      });
      this.updateLayerRenderList();
    }
  }, {
    key: "getLayers",
    value: function getLayers() {
      return this.layers;
    }
  }, {
    key: "getLayer",
    value: function getLayer(id) {
      return this.layers.find(function (layer) {
        return layer.id === id;
      });
    }
  }, {
    key: "getLayerByName",
    value: function getLayerByName(name) {
      return this.layers.find(function (layer) {
        return layer.name === name;
      });
    }
  }, {
    key: "remove",
    value: function remove(layer, parentLayer) {
      if (parentLayer) {
        var layerIndex = parentLayer.layerChildren.indexOf(layer);

        if (layerIndex > -1) {
          parentLayer.layerChildren.splice(layerIndex, 1);
        }
      } else {
        var _layerIndex = this.layers.indexOf(layer);

        if (_layerIndex > -1) {
          this.layers.splice(_layerIndex, 1);
        }
      }

      this.updateLayerRenderList();
      layer.destroy();
      this.renderLayers();
    }
  }, {
    key: "removeAllLayers",
    value: function removeAllLayers() {
      this.destroy();
    }
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      if (this.alreadyInRendering) {
        return;
      }

      this.alreadyInRendering = true;
      this.clear();
      this.layerList.forEach(function (layer) {
        layer.hooks.beforeRenderData.call();
        layer.hooks.beforeRender.call();
        layer.render();
        layer.hooks.afterRender.call();
      });
      this.alreadyInRendering = false;
    }
  }, {
    key: "updateLayerRenderList",
    value: function updateLayerRenderList() {
      var _this = this;

      this.layerList = [];
      this.layers.filter(function (layer) {
        return layer.inited;
      }).filter(function (layer) {
        return layer.isVisible();
      }).forEach(function (layer) {
        _this.layerList.push(layer);

        layer.layerChildren.filter(function (childlayer) {
          return childlayer.inited;
        }).filter(function (childlayer) {
          return childlayer.isVisible();
        }).forEach(function (childlayer) {
          _this.layerList.push(childlayer);
        });
      });
      this.layerList.sort(function (pre, next) {
        return pre.zIndex - next.zIndex;
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.layers.forEach(function (layer) {
        if (layer.layerChildren) {
          layer.layerChildren.forEach(function (child) {
            return child.destroy();
          });
          layer.layerChildren = [];
        }

        layer.destroy();
      });
      this.layers = [];
      this.layerList = [];
      this.renderLayers();
    }
  }, {
    key: "startAnimate",
    value: function startAnimate() {
      if (this.animateInstanceCount++ === 0) {
        this.clock.start();
        this.runRender();
      }
    }
  }, {
    key: "stopAnimate",
    value: function stopAnimate() {
      if (--this.animateInstanceCount === 0) {
        this.stopRender();
        this.clock.stop();
      }
    }
  }, {
    key: "getOESTextureFloat",
    value: function getOESTextureFloat() {
      return this.renderService.extensionObject.OES_texture_float;
    }
  }, {
    key: "isMapDragging",
    value: function isMapDragging() {
      return this.mapService.dragging;
    }
  }, {
    key: "runRender",
    value: function runRender() {
      this.renderLayers();
      this.layerRenderID = $window.requestAnimationFrame(this.runRender.bind(this));
    }
  }, {
    key: "clear",
    value: function clear() {
      var color = rgb2arr(this.mapService.bgColor);
      this.renderService.clear({
        color: color,
        depth: 1,
        stencil: 0,
        framebuffer: null
      });
    }
  }, {
    key: "stopRender",
    value: function stopRender() {
      $window.cancelAnimationFrame(this.layerRenderID);
    }
  }]);

  return LayerService;
}(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "renderService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mapService", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "configService", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
export { LayerService as default };
//# sourceMappingURL=LayerService.js.map