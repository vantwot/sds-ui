{"version":3,"sources":["../../../src/services/layer/LayerService.ts"],"names":["$window","rgb2arr","inject","injectable","TYPES","Clock","LayerService","IRendererService","IMapService","IGlobalConfigService","layer","sceneInited","init","layers","push","updateLayerRenderList","forEach","inited","id","find","name","parentLayer","layerIndex","layerChildren","indexOf","splice","destroy","renderLayers","alreadyInRendering","clear","layerList","hooks","beforeRenderData","call","beforeRender","render","afterRender","filter","isVisible","childlayer","sort","pre","next","zIndex","child","animateInstanceCount","clock","start","runRender","stopRender","stop","renderService","extensionObject","OES_texture_float","mapService","dragging","layerRenderID","requestAnimationFrame","bind","color","bgColor","depth","stencil","framebuffer","cancelAnimationFrame"],"mappings":"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","sourcesContent":["import { $window, rgb2arr } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { ILayer } from '../..';\nimport { TYPES } from '../../types';\nimport Clock from '../../utils/clock';\nimport { IGlobalConfigService } from '../config/IConfigService';\nimport { IMapService } from '../map/IMapService';\nimport { IRendererService } from '../renderer/IRendererService';\nimport { ILayerModel, ILayerService } from './ILayerService';\n\n@injectable()\nexport default class LayerService implements ILayerService {\n  public clock = new Clock();\n\n  public alreadyInRendering: boolean = false;\n\n  private layers: ILayer[] = [];\n\n  private layerList: ILayer[] = [];\n\n  private layerRenderID: number;\n\n  private sceneInited: boolean = false;\n\n  private animateInstanceCount: number = 0;\n\n  @inject(TYPES.IRendererService)\n  private readonly renderService: IRendererService;\n\n  @inject(TYPES.IMapService)\n  private readonly mapService: IMapService;\n\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  public add(layer: ILayer) {\n    if (this.sceneInited) {\n      layer.init();\n    }\n    this.layers.push(layer);\n    this.updateLayerRenderList();\n  }\n\n  public initLayers() {\n    this.sceneInited = true;\n    this.layers.forEach((layer) => {\n      if (!layer.inited) {\n        layer.init();\n      }\n    });\n    this.updateLayerRenderList();\n  }\n\n  public getLayers(): ILayer[] {\n    return this.layers;\n  }\n\n  public getLayer(id: string): ILayer | undefined {\n    return this.layers.find((layer) => layer.id === id);\n  }\n\n  public getLayerByName(name: string): ILayer | undefined {\n    return this.layers.find((layer) => layer.name === name);\n  }\n\n  public remove(layer: ILayer, parentLayer?: ILayer): void {\n    // Tip: layer.layerChildren 当 layer 存在子图层的情况\n    if (parentLayer) {\n      const layerIndex = parentLayer.layerChildren.indexOf(layer);\n      if (layerIndex > -1) {\n        parentLayer.layerChildren.splice(layerIndex, 1);\n      }\n    } else {\n      const layerIndex = this.layers.indexOf(layer);\n      if (layerIndex > -1) {\n        this.layers.splice(layerIndex, 1);\n      }\n    }\n    this.updateLayerRenderList();\n    layer.destroy();\n    this.renderLayers();\n  }\n\n  public removeAllLayers() {\n    this.destroy();\n  }\n\n  public renderLayers() {\n    if (this.alreadyInRendering) {\n      return;\n    }\n    this.alreadyInRendering = true;\n    this.clear();\n\n    this.layerList.forEach((layer) => {\n      layer.hooks.beforeRenderData.call();\n      layer.hooks.beforeRender.call();\n      layer.render();\n      layer.hooks.afterRender.call();\n    });\n    this.alreadyInRendering = false;\n  }\n\n  public updateLayerRenderList() {\n    // TODO: 每次更新都是从 layers 重新构建\n    this.layerList = [];\n    this.layers\n      .filter((layer) => layer.inited)\n      .filter((layer) => layer.isVisible())\n      .forEach((layer) => {\n        this.layerList.push(layer);\n\n        // Tip: 渲染 layer 的子图层 默认 layerChildren 为空数组 表示没有子图层 目前只有 ImageTileLayer 有子图层\n        layer.layerChildren\n          .filter((childlayer) => childlayer.inited)\n          .filter((childlayer) => childlayer.isVisible())\n          .forEach((childlayer) => {\n            this.layerList.push(childlayer);\n          });\n      });\n\n    // 根据 zIndex 对渲染顺序进行排序\n    this.layerList.sort((pre: ILayer, next: ILayer) => {\n      return pre.zIndex - next.zIndex;\n    });\n  }\n\n  public destroy() {\n    this.layers.forEach((layer) => {\n      // Tip: layer.layerChildren 当 layer 存在子图层的情况\n      if (layer.layerChildren) {\n        layer.layerChildren.forEach((child) => child.destroy());\n        layer.layerChildren = [];\n      }\n      layer.destroy();\n    });\n    this.layers = [];\n    this.layerList = [];\n    this.renderLayers();\n  }\n\n  public startAnimate() {\n    if (this.animateInstanceCount++ === 0) {\n      this.clock.start();\n      this.runRender();\n    }\n  }\n\n  public stopAnimate() {\n    if (--this.animateInstanceCount === 0) {\n      this.stopRender();\n      this.clock.stop();\n    }\n  }\n\n  public getOESTextureFloat() {\n    return this.renderService.extensionObject.OES_texture_float;\n  }\n\n  // TODO: 判断地图是否正在被拖动\n  public isMapDragging() {\n    return this.mapService.dragging;\n  }\n\n  private runRender() {\n    this.renderLayers();\n    this.layerRenderID = $window.requestAnimationFrame(\n      this.runRender.bind(this),\n    );\n  }\n\n  private clear() {\n    const color = rgb2arr(this.mapService.bgColor) as [\n      number,\n      number,\n      number,\n      number,\n    ];\n    this.renderService.clear({\n      color,\n      depth: 1,\n      stencil: 0,\n      framebuffer: null,\n    });\n  }\n\n  private stopRender() {\n    $window.cancelAnimationFrame(this.layerRenderID);\n  }\n}\n"],"file":"LayerService.js"}