{"version":3,"sources":["../../../../src/services/renderer/passes/PostProcessor.ts"],"names":["PostProcessor","TYPES","IRendererService","readFBO","writeFBO","layer","i","passes","length","pass","setRenderToScreen","isLastEnabledPass","render","swap","width","height","resize","config","init","push","index","splice","name","find","p","getName","isEnabled","tmp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;IAYqBA,a,WADpB,4B,UAEE,uBAAOC,aAAMC,gBAAb,C,UAiEA,+B;;;;kDA9DqD,E;;;;;;;WAItD,sBAAoB;AAClB,aAAO,KAAKC,OAAZ;AACD;;;WAED,uBAAqB;AACnB,aAAO,KAAKC,QAAZ;AACD;;;;8EAED,iBAAoBC,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACWC,gBAAAA,CADX,GACe,CADf;;AAAA;AAAA,sBACkBA,CAAC,GAAG,KAAKC,MAAL,CAAYC,MADlC;AAAA;AAAA;AAAA;;AAEUC,gBAAAA,IAFV,GAEiB,KAAKF,MAAL,CAAYD,CAAZ,CAFjB;AAIIG,gBAAAA,IAAI,CAACC,iBAAL,CAAuB,KAAKC,iBAAL,CAAuBL,CAAvB,CAAvB;AAJJ;AAAA,uBAKUG,IAAI,CAACG,MAAL,CAAYP,KAAZ,CALV;;AAAA;AAQI,oBAAIC,CAAC,KAAK,KAAKC,MAAL,CAAYC,MAAZ,GAAqB,CAA/B,EAAkC;AAChC,uBAAKK,IAAL;AACD;;AAVL;AAC0CP,gBAAAA,CAAC,EAD3C;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAcA,gBAAcQ,KAAd,EAA6BC,MAA7B,EAA6C;AAC3C,WAAKZ,OAAL,CAAaa,MAAb,CAAoB;AAClBF,QAAAA,KAAK,EAALA,KADkB;AAElBC,QAAAA,MAAM,EAANA;AAFkB,OAApB;AAIA,WAAKX,QAAL,CAAcY,MAAd,CAAqB;AACnBF,QAAAA,KAAK,EAALA,KADmB;AAEnBC,QAAAA,MAAM,EAANA;AAFmB,OAArB;AAID;;;WAED,aACEN,IADF,EAEEJ,KAFF,EAGEY,MAHF,EAIE;AACAR,MAAAA,IAAI,CAACS,IAAL,CAAUb,KAAV,EAAiBY,MAAjB;AACA,WAAKV,MAAL,CAAYY,IAAZ,CAAiBV,IAAjB;AACD;;;WAED,gBACEA,IADF,EAEEW,KAFF,EAGEf,KAHF,EAIEY,MAJF,EAKE;AACAR,MAAAA,IAAI,CAACS,IAAL,CAAUb,KAAV,EAAiBY,MAAjB;AACA,WAAKV,MAAL,CAAYc,MAAZ,CAAmBD,KAAnB,EAA0B,CAA1B,EAA6BX,IAA7B;AACD;;;WAED,qCACEa,IADF,EAE4C;AAC1C,aAAO,KAAKf,MAAL,CAAYgB,IAAZ,CAAiB,UAACC,CAAD;AAAA,eAAOA,CAAC,CAACC,OAAF,OAAgBH,IAAvB;AAAA,OAAjB,CAAP;AACD;;;WAED,gBACe,CAkBd;;;WAED,2BAA0BF,KAA1B,EAAkD;AAChD,WAAK,IAAId,CAAC,GAAGc,KAAK,GAAG,CAArB,EAAwBd,CAAC,GAAG,KAAKC,MAAL,CAAYC,MAAxC,EAAgDF,CAAC,EAAjD,EAAqD;AACnD,YAAI,KAAKC,MAAL,CAAYD,CAAZ,EAAeoB,SAAf,EAAJ,EAAgC;AAC9B,iBAAO,KAAP;AACD;AACF;;AACD,aAAO,IAAP;AACD;;;WAED,gBAAe;AACb,UAAMC,GAAG,GAAG,KAAKxB,OAAjB;AACA,WAAKA,OAAL,GAAe,KAAKC,QAApB;AACA,WAAKA,QAAL,GAAgBuB,GAAhB;AACD","sourcesContent":["import { inject, injectable, postConstruct } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../../types';\nimport { ILayer } from '../../layer/ILayerService';\nimport { gl } from '../gl';\nimport { IFramebuffer } from '../IFramebuffer';\nimport { IPostProcessingPass, IPostProcessor } from '../IMultiPassRenderer';\nimport { IRendererService } from '../IRendererService';\n\n/**\n * ported from Three.js EffectComposer\n * 后处理负责 pingpong read/write framebuffer，最后一个 pass 默认输出到屏幕\n */\n@injectable()\nexport default class PostProcessor implements IPostProcessor {\n  @inject(TYPES.IRendererService)\n  protected readonly rendererService: IRendererService;\n\n  private passes: Array<IPostProcessingPass<unknown>> = [];\n  private readFBO: IFramebuffer;\n  private writeFBO: IFramebuffer;\n\n  public getReadFBO() {\n    return this.readFBO;\n  }\n\n  public getWriteFBO() {\n    return this.writeFBO;\n  }\n\n  public async render(layer: ILayer) {\n    for (let i = 0; i < this.passes.length; i++) {\n      const pass = this.passes[i];\n      // last pass should render to screen\n      pass.setRenderToScreen(this.isLastEnabledPass(i));\n      await pass.render(layer);\n\n      // pingpong\n      if (i !== this.passes.length - 1) {\n        this.swap();\n      }\n    }\n  }\n\n  public resize(width: number, height: number) {\n    this.readFBO.resize({\n      width,\n      height,\n    });\n    this.writeFBO.resize({\n      width,\n      height,\n    });\n  }\n\n  public add<T>(\n    pass: IPostProcessingPass<T>,\n    layer: ILayer,\n    config?: Partial<T>,\n  ) {\n    pass.init(layer, config);\n    this.passes.push(pass);\n  }\n\n  public insert<T>(\n    pass: IPostProcessingPass<T>,\n    index: number,\n    layer: ILayer,\n    config?: Partial<T>,\n  ) {\n    pass.init(layer, config);\n    this.passes.splice(index, 0, pass);\n  }\n\n  public getPostProcessingPassByName(\n    name: string,\n  ): IPostProcessingPass<unknown> | undefined {\n    return this.passes.find((p) => p.getName() === name);\n  }\n\n  @postConstruct()\n  private init() {\n    // const { createFramebuffer, createTexture2D } = this.rendererService;\n    // this.readFBO = createFramebuffer({\n    //   color: createTexture2D({\n    //     width: 1,\n    //     height: 1,\n    //     wrapS: gl.CLAMP_TO_EDGE,\n    //     wrapT: gl.CLAMP_TO_EDGE,\n    //   }),\n    // });\n    // this.writeFBO = createFramebuffer({\n    //   color: createTexture2D({\n    //     width: 1,\n    //     height: 1,\n    //     wrapS: gl.CLAMP_TO_EDGE,\n    //     wrapT: gl.CLAMP_TO_EDGE,\n    //   }),\n    // });\n  }\n\n  private isLastEnabledPass(index: number): boolean {\n    for (let i = index + 1; i < this.passes.length; i++) {\n      if (this.passes[i].isEnabled()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private swap() {\n    const tmp = this.readFBO;\n    this.readFBO = this.writeFBO;\n    this.writeFBO = tmp;\n  }\n}\n"],"file":"PostProcessor.js"}