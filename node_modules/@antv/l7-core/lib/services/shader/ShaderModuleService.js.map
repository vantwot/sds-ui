{"version":3,"sources":["../../../src/services/shader/ShaderModuleService.ts"],"names":["precisionRegExp","globalDefaultprecision","includeRegExp","ShaderModuleService","destroy","registerModule","vs","common","fs","decode","projection","project","sdf2d","lighting","light","pickingVert","pickingFrag","styleMapping","styleMappingCalOpacity","styleMappingCalStrokeOpacity","styleMappingCalStrokeWidth","moduleName","moduleParams","rawContentCache","declaredUniforms","uniforms","extractedVS","content","vsUniforms","extractedFS","fsUniforms","moduleCache","rawVS","rawFS","processModule","vsIncludeList","includeList","fsIncludeList","compiledFs","concat","reduce","prev","cur","test","trim","rawContent","type","compiled","replace","_","strMatch","includeOpt","split","includeName","indexOf","txt","push"],"mappings":"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","sourcesContent":["import { inject, injectable } from 'inversify';\nimport { uniq } from 'lodash';\nimport 'reflect-metadata';\nimport { extractUniforms } from '../../utils/shader-module';\nimport { IModuleParams, IShaderModuleService } from './IShaderModuleService';\n\nimport common from '../../shaders/common.glsl';\nimport decode from '../../shaders/decode.glsl';\nimport light from '../../shaders/light2.glsl';\nimport lighting from '../../shaders/lighting.glsl';\nimport pickingFrag from '../../shaders/picking.frag.glsl';\nimport pickingVert from '../../shaders/picking.vert.glsl';\nimport project from '../../shaders/project.glsl';\nimport projection from '../../shaders/projection.glsl';\nimport sdf2d from '../../shaders/sdf_2d.glsl';\nimport styleMapping from '../../shaders/styleMapping.glsl';\nimport styleMappingCalOpacity from '../../shaders/styleMappingCalOpacity.glsl';\nimport styleMappingCalStrokeOpacity from '../../shaders/styleMappingCalStrokeOpacity.glsl';\nimport styleMappingCalStrokeWidth from '../../shaders/styleMappingCalStrokeWidth.glsl';\n\nconst precisionRegExp = /precision\\s+(high|low|medium)p\\s+float/;\nconst globalDefaultprecision =\n  '#ifdef GL_FRAGMENT_PRECISION_HIGH\\n precision highp float;\\n #else\\n precision mediump float;\\n#endif\\n';\nconst includeRegExp = /#pragma include ([\"^+\"]?[\"\\ \"[a-zA-Z_0-9](.*)\"]*?)/g;\n\n@injectable()\nexport default class ShaderModuleService implements IShaderModuleService {\n  private moduleCache: { [key: string]: IModuleParams } = {};\n  private rawContentCache: { [key: string]: IModuleParams } = {};\n\n  public registerBuiltinModules() {\n    this.destroy();\n    this.registerModule('common', { vs: common, fs: common });\n    this.registerModule('decode', { vs: decode, fs: '' });\n    this.registerModule('projection', { vs: projection, fs: '' });\n    this.registerModule('project', { vs: project, fs: '' });\n    this.registerModule('sdf_2d', { vs: '', fs: sdf2d });\n    this.registerModule('lighting', { vs: lighting, fs: '' });\n    this.registerModule('light', { vs: light, fs: '' });\n    this.registerModule('picking', { vs: pickingVert, fs: pickingFrag });\n    this.registerModule('styleMapping', { vs: styleMapping, fs: '' });\n    this.registerModule('styleMappingCalOpacity', {\n      vs: styleMappingCalOpacity,\n      fs: '',\n    });\n    this.registerModule('styleMappingCalStrokeOpacity', {\n      vs: styleMappingCalStrokeOpacity,\n      fs: '',\n    });\n    this.registerModule('styleMappingCalStrokeWidth', {\n      vs: styleMappingCalStrokeWidth,\n      fs: '',\n    });\n  }\n\n  public registerModule(moduleName: string, moduleParams: IModuleParams) {\n    // prevent registering the same module multiple times\n    if (this.rawContentCache[moduleName]) {\n      return;\n    }\n\n    const { vs, fs, uniforms: declaredUniforms } = moduleParams;\n    const { content: extractedVS, uniforms: vsUniforms } = extractUniforms(vs);\n    const { content: extractedFS, uniforms: fsUniforms } = extractUniforms(fs);\n\n    this.rawContentCache[moduleName] = {\n      fs: extractedFS,\n      uniforms: {\n        ...vsUniforms,\n        ...fsUniforms,\n        ...declaredUniforms,\n      },\n      vs: extractedVS,\n    };\n  }\n  public destroy() {\n    this.moduleCache = {};\n    this.rawContentCache = {};\n  }\n  public getModule(moduleName: string): IModuleParams {\n    if (this.moduleCache[moduleName]) {\n      return this.moduleCache[moduleName];\n    }\n\n    const rawVS = this.rawContentCache[moduleName].vs;\n    const rawFS = this.rawContentCache[moduleName].fs;\n\n    const { content: vs, includeList: vsIncludeList } = this.processModule(\n      rawVS,\n      [],\n      'vs',\n    );\n    const { content: fs, includeList: fsIncludeList } = this.processModule(\n      rawFS,\n      [],\n      'fs',\n    );\n    let compiledFs = fs;\n    // TODO: extract uniforms and their default values from GLSL\n    const uniforms: {\n      [key: string]: any;\n    } = uniq(vsIncludeList.concat(fsIncludeList).concat(moduleName)).reduce(\n      (prev, cur: string) => {\n        return {\n          ...prev,\n          ...this.rawContentCache[cur].uniforms,\n        };\n      },\n      {},\n    );\n\n    /**\n     * set default precision for fragment shader\n     * https://stackoverflow.com/questions/28540290/why-it-is-necessary-to-set-precision-for-the-fragment-shader\n     */\n    if (!precisionRegExp.test(fs)) {\n      compiledFs = globalDefaultprecision + fs;\n    }\n\n    this.moduleCache[moduleName] = {\n      fs: compiledFs.trim(),\n      uniforms,\n      vs: vs.trim(),\n    };\n    return this.moduleCache[moduleName];\n  }\n\n  private processModule(\n    rawContent: string,\n    includeList: string[],\n    type: 'vs' | 'fs',\n  ): {\n    content: string;\n    includeList: string[];\n  } {\n    const compiled = rawContent.replace(includeRegExp, (_, strMatch) => {\n      const includeOpt = strMatch.split(' ');\n      const includeName = includeOpt[0].replace(/\"/g, '');\n\n      if (includeList.indexOf(includeName) > -1) {\n        return '';\n      }\n\n      const txt = this.rawContentCache[includeName][type];\n      includeList.push(includeName);\n\n      const { content } = this.processModule(txt, includeList, type);\n      return content;\n    });\n\n    return {\n      content: compiled,\n      includeList,\n    };\n  }\n}\n"],"file":"ShaderModuleService.js"}