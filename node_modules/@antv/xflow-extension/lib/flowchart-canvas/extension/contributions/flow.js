"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowHooksContribution = void 0;
var mana_syringe_1 = require("mana-syringe");
var xflow_core_1 = require("@antv/xflow-core");
var xflow_core_2 = require("@antv/xflow-core");
var config_graph_1 = require("../../config-graph");
var utils_1 = require("../../utils");
/**
 * 内置的hook contribution
 * 处理 config上的runtime的注册项
 */
var FlowHooksContribution = /** @class */ (function () {
    function FlowHooksContribution() {
        var _this = this;
        this.toDispose = new xflow_core_1.DisposableCollection();
        this.registerHookHub = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, xflow_core_1.Disposable.create(function () { })];
            });
        }); };
        this.registerHook = function (hooks) { return __awaiter(_this, void 0, void 0, function () {
            var toDispose, disposables;
            var _this = this;
            return __generator(this, function (_a) {
                toDispose = new xflow_core_1.DisposableCollection();
                disposables = [
                    hooks.afterGraphInit.registerHook({
                        name: 'call add edge to replace temp edge',
                        handler: function (handlerArgs) { return __awaiter(_this, void 0, void 0, function () {
                            var commandService, graph;
                            var _this = this;
                            return __generator(this, function (_a) {
                                commandService = handlerArgs.commandService, graph = handlerArgs.graph;
                                graph.on(config_graph_1.NsAddEdgeEvent.EVENT_NAME, function (args) { return __awaiter(_this, void 0, void 0, function () {
                                    var edge, edgeConfig, config, onAddEdge;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                edge = args.edge, edgeConfig = __rest(args, ["edge"]);
                                                config = {
                                                    edgeConfig: __assign(__assign({}, edgeConfig), { 
                                                        // renderKey: FLOWCHART_EDGE, // 暂不支持
                                                        source: {
                                                            cell: edgeConfig.source,
                                                            port: edgeConfig.sourcePortId,
                                                        }, target: {
                                                            cell: edgeConfig.target,
                                                            port: edgeConfig.targetPortId,
                                                        }, zIndex: 1, attrs: {
                                                            line: {
                                                                stroke: '#A2B1C3',
                                                                targetMarker: {
                                                                    name: 'block',
                                                                    width: 12,
                                                                    height: 8,
                                                                },
                                                                strokeDasharray: '5 5',
                                                                strokeWidth: 1,
                                                            },
                                                        }, data: __assign({}, edgeConfig) }),
                                                };
                                                return [4 /*yield*/, commandService.executeCommand(xflow_core_1.XFlowEdgeCommands.ADD_EDGE.id, config)];
                                            case 1:
                                                _a.sent();
                                                onAddEdge = (0, utils_1.getProps)('onAddEdge');
                                                if (typeof onAddEdge === 'function') {
                                                    onAddEdge(config);
                                                }
                                                args.edge.remove();
                                                return [2 /*return*/];
                                        }
                                    });
                                }); });
                                return [2 /*return*/];
                            });
                        }); },
                    }),
                ];
                toDispose.pushAll(disposables);
                return [2 /*return*/, xflow_core_1.Disposable.create(function () { })];
            });
        }); };
    }
    FlowHooksContribution = __decorate([
        (0, mana_syringe_1.singleton)({ contrib: xflow_core_2.IHookContribution })
    ], FlowHooksContribution);
    return FlowHooksContribution;
}());
exports.FlowHooksContribution = FlowHooksContribution;
//# sourceMappingURL=flow.js.map