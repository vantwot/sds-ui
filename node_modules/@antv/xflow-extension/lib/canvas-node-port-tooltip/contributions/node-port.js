"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodePortTooltipContribution = void 0;
var classnames_1 = __importDefault(require("classnames"));
var xflow_core_1 = require("@antv/xflow-core");
var xflow_core_2 = require("@antv/xflow-core");
var interface_1 = require("../interface");
var xflow_core_3 = require("@antv/xflow-core");
/**
 * 内置的hook contribution
 * 处理 config上的runtime的注册项
 */
var NodePortTooltipContribution = /** @class */ (function () {
    function NodePortTooltipContribution() {
        var _this = this;
        this.toDispose = new xflow_core_3.DisposableCollection();
        /** 获取画布实例 */
        this.getGraphInstance = function () { return __awaiter(_this, void 0, void 0, function () {
            var graphInstance, graphConfig;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.graphProvider.getGraphInstance()];
                    case 1:
                        graphInstance = _a.sent();
                        return [4 /*yield*/, this.graphProvider.getGraphOptions()];
                    case 2:
                        graphConfig = _a.sent();
                        return [2 /*return*/, { graph: graphInstance, config: graphConfig }];
                }
            });
        }); };
        /** 获取GraphOptions */
        this.getPortRenderConfig = function () {
            var dagOptions = {
                onPortRendered: function (portRenderedArgs) {
                    var _a, _b;
                    /* eslint-disable-next-line @typescript-eslint/no-this-alias */
                    var graph = this;
                    var port = portRenderedArgs.port, node = portRenderedArgs.node;
                    var contentSelectors = portRenderedArgs.contentSelectors;
                    var portContainer = contentSelectors && contentSelectors['xflow-port-group'];
                    if (portContainer instanceof Element) {
                        portContainer.setAttribute('class', (0, classnames_1.default)('xflow-port-group', {
                            connected: port.connected && port.group !== 'out',
                            groupPort: ((_a = node) === null || _a === void 0 ? void 0 : _a.isGroup) && ((_b = node) === null || _b === void 0 ? void 0 : _b.isGroup()),
                        }));
                        portContainer.addEventListener('mouseenter', function (e) {
                            var eventArgs = {
                                e: e,
                                portId: port.id,
                                nodeId: node.id,
                                portData: port,
                                nodeData: node.getData(),
                                tooltip: port.tooltip,
                                placement: port.group,
                            };
                            graph.trigger(interface_1.NsPortEvent.MOUSE_ENTER, eventArgs);
                        });
                        portContainer.addEventListener('mouseleave', function (e) {
                            var eventArgs = {
                                e: e,
                                portId: port.id,
                                nodeId: node.id,
                                portData: port,
                                nodeData: node.getData(),
                                tooltip: port.tooltip,
                                placement: port.group,
                            };
                            graph.trigger(interface_1.NsPortEvent.MOUSE_LEAVE, eventArgs);
                        });
                    }
                },
            };
            return dagOptions;
        };
        this.registerHookHub = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, xflow_core_3.Disposable.create(function () { })];
            });
        }); };
        this.registerHook = function (hooks) { return __awaiter(_this, void 0, void 0, function () {
            var toDispose, disposables;
            var _this = this;
            return __generator(this, function (_a) {
                toDispose = new xflow_core_3.DisposableCollection();
                disposables = [
                    hooks.graphOptions.registerHook({
                        name: 'add onPortRendered options ',
                        handler: function (args) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                Object.assign(args, this.getPortRenderConfig());
                                return [2 /*return*/];
                            });
                        }); },
                    }),
                ];
                toDispose.pushAll(disposables);
                return [2 /*return*/, xflow_core_3.Disposable.create(function () { })];
            });
        }); };
    }
    NodePortTooltipContribution.prototype.registerModel = function (registry) {
        var _this = this;
        registry.registerModel({
            id: interface_1.ACTIVE_NODE_PORT.id,
            watchChange: function (self) { return __awaiter(_this, void 0, void 0, function () {
                var _a, graph, config, calcPosition, onMouseEnter, onMouseLeave;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.getGraphInstance()];
                        case 1:
                            _a = _b.sent(), graph = _a.graph, config = _a.config;
                            calcPosition = function (e) {
                                var _a = e.target.getBoundingClientRect(), x = _a.x, y = _a.y, width = _a.width, height = _a.height;
                                var clientRect = config.rootContainer.getBoundingClientRect();
                                var position = {
                                    x: x - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.x) || 0) + width / 2,
                                    y: y - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.y) || 0) + height / 2,
                                };
                                return position;
                            };
                            onMouseEnter = function (args) {
                                self.setValue(__assign(__assign({}, args), { position: calcPosition(args.e) }));
                            };
                            onMouseLeave = function () {
                                self.setValue(null);
                            };
                            /** 绑定事件 */
                            graph.on(interface_1.NsPortEvent.MOUSE_ENTER, onMouseEnter);
                            graph.on(interface_1.NsPortEvent.MOUSE_LEAVE, onMouseLeave);
                            graph.on('cell:mouseleave', onMouseLeave);
                            return [2 /*return*/, xflow_core_3.Disposable.create(function () {
                                    /** 解除绑定 */
                                    graph.off(interface_1.NsPortEvent.MOUSE_ENTER, onMouseEnter);
                                    graph.off(interface_1.NsPortEvent.MOUSE_LEAVE, onMouseLeave);
                                })];
                    }
                });
            }); },
        });
    };
    __decorate([
        xflow_core_1.ManaSyringe.inject(xflow_core_2.IGraphProvider),
        __metadata("design:type", Object)
    ], NodePortTooltipContribution.prototype, "graphProvider", void 0);
    NodePortTooltipContribution = __decorate([
        xflow_core_1.ManaSyringe.singleton({ contrib: [xflow_core_1.IHookContribution, xflow_core_3.IModelContribution] })
    ], NodePortTooltipContribution);
    return NodePortTooltipContribution;
}());
exports.NodePortTooltipContribution = NodePortTooltipContribution;
//# sourceMappingURL=node-port.js.map