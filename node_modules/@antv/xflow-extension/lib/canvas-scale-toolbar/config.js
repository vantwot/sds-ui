"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useConfig = exports.TOOLBAR_TYPE = exports.CANVAS_SCALE_TOOLBAR_CONFIG = void 0;
var xflow_core_1 = require("@antv/xflow-core");
var icons_1 = require("@ant-design/icons");
var canvas_toolbar_1 = require("../canvas-toolbar");
var CANVAS_SCALE_TOOLBAR_CONFIG;
(function (CANVAS_SCALE_TOOLBAR_CONFIG) {
    xflow_core_1.IconStore.set('ZoomInOutlined', icons_1.ZoomInOutlined);
    xflow_core_1.IconStore.set('ZoomOutOutlined', icons_1.ZoomOutOutlined);
    xflow_core_1.IconStore.set('OneToOneOutlined', icons_1.OneToOneOutlined);
    xflow_core_1.IconStore.set('CompressOutlined', icons_1.CompressOutlined);
    CANVAS_SCALE_TOOLBAR_CONFIG.ZOOM_IN = xflow_core_1.XFlowGraphCommands.GRAPH_ZOOM.id + '-zoom-in';
    CANVAS_SCALE_TOOLBAR_CONFIG.ZOOM_OUT = xflow_core_1.XFlowGraphCommands.GRAPH_ZOOM.id + '-zoom-out';
    CANVAS_SCALE_TOOLBAR_CONFIG.SCALE_TO_ONE = xflow_core_1.XFlowGraphCommands.GRAPH_ZOOM.id + '-scale-to-one';
    CANVAS_SCALE_TOOLBAR_CONFIG.SCALE_TO_FIT = xflow_core_1.XFlowGraphCommands.GRAPH_ZOOM.id + '-scale-to-fit';
    CANVAS_SCALE_TOOLBAR_CONFIG.MAX_SCALE = 1.5;
    CANVAS_SCALE_TOOLBAR_CONFIG.MIN_SCALE = 0.05;
    CANVAS_SCALE_TOOLBAR_CONFIG.zoomOptions = {
        maxScale: CANVAS_SCALE_TOOLBAR_CONFIG.MAX_SCALE,
        minScale: CANVAS_SCALE_TOOLBAR_CONFIG.MIN_SCALE,
    };
    CANVAS_SCALE_TOOLBAR_CONFIG.getToolbarConfig = function (zoomFactor) {
        return [
            {
                name: 'main',
                items: [
                    {
                        id: CANVAS_SCALE_TOOLBAR_CONFIG.ZOOM_IN,
                        tooltip: '放大',
                        iconName: 'ZoomInOutlined',
                        onClick: function (_a) {
                            var commandService = _a.commandService;
                            commandService.executeCommand(xflow_core_1.XFlowGraphCommands.GRAPH_ZOOM.id, {
                                factor: 0.1,
                                zoomOptions: CANVAS_SCALE_TOOLBAR_CONFIG.zoomOptions,
                            });
                        },
                    },
                    {
                        id: CANVAS_SCALE_TOOLBAR_CONFIG.ZOOM_OUT,
                        tooltip: '缩小',
                        iconName: 'ZoomOutOutlined',
                        onClick: function (_a) {
                            var commandService = _a.commandService;
                            commandService.executeCommand(xflow_core_1.XFlowGraphCommands.GRAPH_ZOOM.id, {
                                factor: -0.1,
                                zoomOptions: CANVAS_SCALE_TOOLBAR_CONFIG.zoomOptions,
                            });
                        },
                    },
                    {
                        id: CANVAS_SCALE_TOOLBAR_CONFIG.SCALE_TO_ONE,
                        iconName: 'OneToOneOutlined',
                        tooltip: '缩放到1:1',
                        isEnabled: zoomFactor !== 1,
                        onClick: function (_a) {
                            var commandService = _a.commandService;
                            commandService.executeCommand(xflow_core_1.XFlowGraphCommands.GRAPH_ZOOM.id, {
                                factor: 'real',
                                zoomOptions: CANVAS_SCALE_TOOLBAR_CONFIG.zoomOptions,
                            });
                        },
                    },
                    {
                        id: CANVAS_SCALE_TOOLBAR_CONFIG.SCALE_TO_FIT,
                        tooltip: '缩放到适应屏幕',
                        iconName: 'CompressOutlined',
                        onClick: function (_a) {
                            var commandService = _a.commandService;
                            commandService.executeCommand(xflow_core_1.XFlowGraphCommands.GRAPH_ZOOM.id, {
                                factor: 'fit',
                                zoomOptions: CANVAS_SCALE_TOOLBAR_CONFIG.zoomOptions,
                            });
                        },
                    },
                ],
            },
        ];
    };
})(CANVAS_SCALE_TOOLBAR_CONFIG = exports.CANVAS_SCALE_TOOLBAR_CONFIG || (exports.CANVAS_SCALE_TOOLBAR_CONFIG = {}));
exports.TOOLBAR_TYPE = 'CANVAS_SCALE_TOOLBAR';
exports.useConfig = (0, canvas_toolbar_1.createToolbarConfig)(function (config) {
    config.setToolbarModelService(function (model, modelService) { return __awaiter(void 0, void 0, void 0, function () {
        var graphScale, graphScaleModel;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, xflow_core_1.MODELS.GRAPH_SCALE.useValue(modelService)
                    /** 设置初始值*/
                ];
                case 1:
                    graphScale = _a.sent();
                    /** 设置初始值*/
                    model.setValue(function (m) {
                        m.mainGroups = CANVAS_SCALE_TOOLBAR_CONFIG.getToolbarConfig(graphScale.zoomFactor);
                    });
                    return [4 /*yield*/, xflow_core_1.MODELS.GRAPH_SCALE.getModel(modelService)
                        /** graphScaleModel更新时联动 Toolbar*/
                    ];
                case 2:
                    graphScaleModel = _a.sent();
                    /** graphScaleModel更新时联动 Toolbar*/
                    graphScaleModel.watch(function (_a) {
                        var zoomFactor = _a.zoomFactor;
                        model.setValue(function (m) {
                            m.mainGroups = CANVAS_SCALE_TOOLBAR_CONFIG.getToolbarConfig(zoomFactor);
                        });
                    });
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=config.js.map