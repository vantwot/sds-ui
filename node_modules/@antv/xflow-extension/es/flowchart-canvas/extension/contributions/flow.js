var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { singleton } from 'mana-syringe';
import { DisposableCollection, Disposable, XFlowEdgeCommands } from '@antv/xflow-core';
import { IHookContribution } from '@antv/xflow-core';
import { NsAddEdgeEvent } from '../../config-graph';
import { getProps } from '../../utils';
/**
 * 内置的hook contribution
 * 处理 config上的runtime的注册项
 */
let FlowHooksContribution = class FlowHooksContribution {
    constructor() {
        this.toDispose = new DisposableCollection();
        this.registerHookHub = () => __awaiter(this, void 0, void 0, function* () {
            return Disposable.create(() => { });
        });
        this.registerHook = (hooks) => __awaiter(this, void 0, void 0, function* () {
            const toDispose = new DisposableCollection();
            const disposables = [
                hooks.afterGraphInit.registerHook({
                    name: 'call add edge to replace temp edge',
                    handler: (handlerArgs) => __awaiter(this, void 0, void 0, function* () {
                        const { commandService, graph } = handlerArgs;
                        graph.on(NsAddEdgeEvent.EVENT_NAME, (args) => __awaiter(this, void 0, void 0, function* () {
                            const { edge } = args, edgeConfig = __rest(args, ["edge"]);
                            const config = {
                                edgeConfig: Object.assign(Object.assign({}, edgeConfig), { 
                                    // renderKey: FLOWCHART_EDGE, // 暂不支持
                                    source: {
                                        cell: edgeConfig.source,
                                        port: edgeConfig.sourcePortId,
                                    }, target: {
                                        cell: edgeConfig.target,
                                        port: edgeConfig.targetPortId,
                                    }, zIndex: 1, attrs: {
                                        line: {
                                            stroke: '#A2B1C3',
                                            targetMarker: {
                                                name: 'block',
                                                width: 12,
                                                height: 8,
                                            },
                                            strokeDasharray: '5 5',
                                            strokeWidth: 1,
                                        },
                                    }, data: Object.assign({}, edgeConfig) }),
                            };
                            yield commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, config);
                            const onAddEdge = getProps('onAddEdge');
                            if (typeof onAddEdge === 'function') {
                                onAddEdge(config);
                            }
                            args.edge.remove();
                        }));
                    }),
                }),
            ];
            toDispose.pushAll(disposables);
            return Disposable.create(() => { });
        });
    }
};
FlowHooksContribution = __decorate([
    singleton({ contrib: IHookContribution })
], FlowHooksContribution);
export { FlowHooksContribution };
//# sourceMappingURL=flow.js.map