var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export var NsPortEvent;
(function (NsPortEvent) {
    NsPortEvent.MOUSE_ENTER = 'node-port:mouseenter';
    NsPortEvent.MOUSE_LEAVE = 'node-port:mouseleave';
})(NsPortEvent || (NsPortEvent = {}));
export var ACTIVE_NODE_PORT;
(function (ACTIVE_NODE_PORT) {
    ACTIVE_NODE_PORT.id = 'ACTIVE_NODE_PORT';
    ACTIVE_NODE_PORT.useModel = (modelService) => __awaiter(this, void 0, void 0, function* () {
        const model = yield modelService.awaitModel(ACTIVE_NODE_PORT.id);
        const data = yield model.getValidValue();
        return { data, model };
    });
})(ACTIVE_NODE_PORT || (ACTIVE_NODE_PORT = {}));
//# sourceMappingURL=interface.js.map