import React, { useState, useRef, memo } from 'react';
import { useXFlowApp } from '@antv/xflow-core';
import { render } from 'react-dom';
import { Button } from 'antd';
import { SketchPicker } from 'react-color';
import { PREFIX } from '../constants';
const ColorPicker = props => {
    const { label, value = '', onChange } = props;
    const [show, setShow] = useState(false);
    const colorRef = useRef(value);
    const { graphProvider } = useXFlowApp();
    const graphConfig = useRef();
    graphProvider.getGraphOptions().then(x6GraphConfig => {
        graphConfig.current = x6GraphConfig;
    });
    const PickContainer = () => {
        return (React.createElement("div", { className: `${PREFIX}-popover` },
            React.createElement(SketchPicker, { style: {
                    width: '100%',
                }, onChange: color => {
                    colorRef.current = color.hex;
                } }),
            React.createElement("div", { className: "foolter" },
                React.createElement(Button, { onClick: () => {
                        setShow(false);
                    } }, "\u53D6\u6D88"),
                React.createElement(Button, { type: "primary", onClick: () => {
                        onChange === null || onChange === void 0 ? void 0 : onChange(colorRef.current);
                        setShow(false);
                    } }, "\u786E\u8BA4"))));
    };
    /**  react-color mouseOver 和上层事件冲突，不得已为之，非 DI 环境应该不存在，后续改进 */
    const CreatePickColorContainer = (visible) => {
        var _a;
        const container = ((_a = graphConfig.current) === null || _a === void 0 ? void 0 : _a.graphContainer) || document.body;
        const exist = document.querySelector(`#${PREFIX}-pick-color-container`);
        if (exist) {
            container.removeChild(exist);
        }
        if (!visible) {
            return;
        }
        const div = document.createElement('div');
        div.id = `${PREFIX}-pick-color-container`;
        div.className = `${PREFIX}-pick-color-container`;
        render(React.createElement(PickContainer, null), div);
        container.appendChild(div);
    };
    return (React.createElement("div", { className: "group" },
        label && React.createElement("label", null, label),
        React.createElement("div", { className: `${PREFIX}-color-container`, onClick: () => {
                setShow(true);
            } },
            React.createElement("div", { className: `${PREFIX}-color`, style: {
                    backgroundColor: value,
                    height: '100%',
                } })),
        CreatePickColorContainer(show)));
};
export default memo(ColorPicker, (pre, next) => {
    return pre.label === next.label && pre.value === next.value;
});
//# sourceMappingURL=color.js.map