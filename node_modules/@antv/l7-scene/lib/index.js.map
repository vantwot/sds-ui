{"version":3,"sources":["../src/index.ts"],"names":["Scene","config","id","map","canvas","hasBaseMap","sceneContainer","container","setContainer","bind","TYPES","IRendererService","to","ReglRendererService","inSingletonScope","sceneService","get","ISceneService","mapService","IMapService","iconService","IIconService","fontService","IFontService","controlService","IControlService","layerService","ILayerService","markerService","IMarkerService","interactionService","IInteractionService","popupService","IPopupService","isMini","initMiniScene","initComponent","init","initControl","getSize","getMinZoom","getMaxZoom","getType","getMapContainer","getMapCanvasContainer","type","exportPng","render","loaded","renderSerivce","on","color","setBgColor","layer","layerContainer","addLayer","getLayers","getLayer","name","getLayerByName","parentLayer","remove","removeAllLayers","fontUnicode","addIconFont","options","forEach","fontFamily","fontPath","addFontFace","img","addImage","addImageMini","hasImage","removeImage","glyphs","addIconGlyphs","ctr","addControl","removeControl","getControlByName","marker","addMarker","addMarkerLayer","removeMarkerLayer","removeAllMarkers","popup","addPopup","handle","SceneEventList","indexOf","once","off","getZoom","getCenter","center","setCenter","getPitch","pitch","setPitch","getRotation","getBounds","rotation","setRotation","zoomIn","zoomOut","p","panTo","x","y","panBy","getContainer","zoom","setZoom","bound","getSceneConfig","fitBoundsOptions","animate","fitBounds","setZoomAndCenter","style","setMapStyle","setMapStatus","pixel","pixelToLngLat","lnglat","lngLatToPixel","containerToLngLat","lngLatToContainer","destroy","constructor","IPostProcessingPass","whenTargetNamed","DOM","logoVisible","logoPosition","Logo","position"],"mappings":"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","sourcesContent":["import { Logo } from '@antv/l7-component';\nimport {\n  Bounds,\n  createLayerContainer,\n  createSceneContainer,\n  ICameraOptions,\n  IControl,\n  IControlService,\n  IFontService,\n  IIconFontGlyph,\n  IIconService,\n  IImage,\n  IInteractionService,\n  ILayer,\n  ILayerService,\n  ILngLat,\n  IMapService,\n  IMarker,\n  IMarkerLayer,\n  IMarkerService,\n  IPoint,\n  IPopup,\n  IPopupService,\n  IPostProcessingPass,\n  IRendererService,\n  ISceneConfig,\n  ISceneService,\n  IStatusOptions,\n  Point,\n  SceneEventList,\n  TYPES,\n} from '@antv/l7-core';\nimport { ReglRendererService } from '@antv/l7-renderer';\nimport { DOM, isMini } from '@antv/l7-utils';\nimport { Container } from 'inversify';\nimport ILayerManager from './ILayerManager';\nimport IMapController from './IMapController';\nimport IPostProcessingPassPluggable from './IPostProcessingPassPluggable';\n\n/**\n * 暴露 Scene API\n *\n * @example\n * import { Scene } from 'l7/scene';\n * import { PointLayer } from 'l7/layers';\n *\n * const scene = new Scene();\n * const pointLayer = new PointLayer();\n * scene.addLayer(pointLayer);\n *\n */\nclass Scene\n  implements IPostProcessingPassPluggable, IMapController, ILayerManager {\n  private sceneService: ISceneService;\n  private mapService: IMapService<unknown>;\n  private controlService: IControlService;\n  private layerService: ILayerService;\n  private iconService: IIconService;\n  private markerService: IMarkerService;\n  private popupService: IPopupService;\n  private fontService: IFontService;\n  private interactionService: IInteractionService;\n  private container: Container;\n\n  public constructor(config: ISceneConfig) {\n    const { id, map, canvas, hasBaseMap } = config;\n    // 创建场景容器\n    const sceneContainer = createSceneContainer();\n    this.container = sceneContainer;\n    // 绑定地图服务\n    map.setContainer(sceneContainer, id, canvas, hasBaseMap);\n\n    // 绑定渲染引擎服务\n    sceneContainer\n      .bind<IRendererService>(TYPES.IRendererService)\n      .to(ReglRendererService)\n      .inSingletonScope();\n\n    // 依赖注入\n    this.sceneService = sceneContainer.get<ISceneService>(TYPES.ISceneService);\n    this.mapService = sceneContainer.get<IMapService<unknown>>(\n      TYPES.IMapService,\n    );\n    this.iconService = sceneContainer.get<IIconService>(TYPES.IIconService);\n    this.fontService = sceneContainer.get<IFontService>(TYPES.IFontService);\n    this.controlService = sceneContainer.get<IControlService>(\n      TYPES.IControlService,\n    );\n    this.layerService = sceneContainer.get<ILayerService>(TYPES.ILayerService);\n\n    this.markerService = sceneContainer.get<IMarkerService>(\n      TYPES.IMarkerService,\n    );\n    this.interactionService = sceneContainer.get<IInteractionService>(\n      TYPES.IInteractionService,\n    );\n    this.popupService = sceneContainer.get<IPopupService>(TYPES.IPopupService);\n\n    if (isMini) {\n      this.sceneService.initMiniScene(config);\n    } else {\n      this.initComponent(id);\n\n      // 初始化 scene\n      this.sceneService.init(config);\n      // TODO: 初始化组件\n\n      this.initControl();\n    }\n  }\n  public getServiceContainer(): Container {\n    return this.container;\n  }\n  public getSize(): [number, number] {\n    return this.mapService.getSize();\n  }\n  public getMinZoom(): number {\n    return this.mapService.getMinZoom();\n  }\n  public getMaxZoom(): number {\n    return this.mapService.getMaxZoom();\n  }\n  public getType(): string {\n    return this.mapService.getType();\n  }\n  public getMapContainer(): HTMLElement | null {\n    return this.mapService.getMapContainer();\n  }\n  public getMapCanvasContainer(): HTMLElement {\n    return this.mapService.getMapCanvasContainer() as HTMLElement;\n  }\n\n  public getMapService(): IMapService<unknown> {\n    return this.mapService;\n  }\n  public exportPng(type?: 'png' | 'jpg'): string {\n    return this.sceneService.exportPng(type);\n  }\n\n  public exportMap(type?: 'png' | 'jpg'): string {\n    return this.sceneService.exportPng(type);\n  }\n\n  public registerRenderService(render: any) {\n    if (this.sceneService.loaded) {\n      const renderSerivce = new render(this);\n      renderSerivce.init();\n    } else {\n      this.on('loaded', () => {\n        const renderSerivce = new render(this);\n        renderSerivce.init();\n      });\n    }\n  }\n\n  public get map() {\n    return this.mapService.map;\n  }\n\n  public setBgColor(color: string) {\n    this.mapService.setBgColor(color);\n  }\n\n  // layer 管理\n  public addLayer(layer: ILayer): void {\n    // 为当前图层创建一个容器\n    // TODO: 初始化的时候设置 容器\n    const layerContainer = createLayerContainer(this.container);\n    layer.setContainer(layerContainer, this.container);\n    this.sceneService.addLayer(layer);\n  }\n\n  public getLayers(): ILayer[] {\n    return this.layerService.getLayers();\n  }\n\n  public getLayer(id: string): ILayer | undefined {\n    return this.layerService.getLayer(id);\n  }\n\n  public getLayerByName(name: string): ILayer | undefined {\n    return this.layerService.getLayerByName(name);\n  }\n\n  public removeLayer(layer: ILayer, parentLayer?: ILayer): void {\n    this.layerService.remove(layer, parentLayer);\n  }\n\n  public removeAllLayer(): void {\n    this.layerService.removeAllLayers();\n  }\n\n  public render(): void {\n    this.sceneService.render();\n  }\n\n  // asset method\n  /**\n   * 为 layer/point/text 支持 iconfont 模式支持\n   * @param fontUnicode\n   * @param name\n   */\n  public addIconFont(name: string, fontUnicode: string): void {\n    this.fontService.addIconFont(name, fontUnicode);\n  }\n\n  public addIconFonts(options: string[][]): void {\n    options.forEach(([name, fontUnicode]) => {\n      this.fontService.addIconFont(name, fontUnicode);\n    });\n  }\n  /**\n   * 用户自定义添加第三方字体\n   * @param fontFamily\n   * @param fontPath\n   */\n  public addFontFace(fontFamily: string, fontPath: string): void {\n    this.sceneService.addFontFace(fontFamily, fontPath);\n  }\n\n  public addImage(id: string, img: IImage) {\n    if (!isMini) {\n      this.iconService.addImage(id, img);\n    } else {\n      this.iconService.addImageMini(id, img, this.sceneService);\n    }\n    // this.iconService.addImage(id, img);\n  }\n\n  public hasImage(id: string) {\n    return this.iconService.hasImage(id);\n  }\n\n  public removeImage(id: string) {\n    this.iconService.removeImage(id);\n  }\n\n  public addIconFontGlyphs(fontFamily: string, glyphs: IIconFontGlyph[]) {\n    this.fontService.addIconGlyphs(glyphs);\n  }\n\n  // map control method\n  public addControl(ctr: IControl) {\n    this.controlService.addControl(ctr, this.container);\n  }\n\n  public removeControl(ctr: IControl) {\n    this.controlService.removeControl(ctr);\n  }\n\n  public getControlByName(name: string) {\n    return this.controlService.getControlByName(name);\n  }\n\n  // marker\n  public addMarker(marker: IMarker) {\n    this.markerService.addMarker(marker);\n  }\n\n  public addMarkerLayer(layer: IMarkerLayer) {\n    this.markerService.addMarkerLayer(layer);\n  }\n\n  public removeMarkerLayer(layer: IMarkerLayer) {\n    this.markerService.removeMarkerLayer(layer);\n  }\n\n  public removeAllMakers() {\n    this.markerService.removeAllMarkers();\n  }\n\n  public addPopup(popup: IPopup) {\n    this.popupService.addPopup(popup);\n  }\n\n  public on(type: string, handle: (...args: any[]) => void): void {\n    SceneEventList.indexOf(type) === -1\n      ? this.mapService.on(type, handle)\n      : this.sceneService.on(type, handle);\n  }\n\n  public once(type: string, handle: (...args: any[]) => void): void {\n    SceneEventList.indexOf(type) === -1\n      ? this.mapService.once(type, handle)\n      : this.sceneService.once(type, handle);\n  }\n\n  public off(type: string, handle: (...args: any[]) => void): void {\n    SceneEventList.indexOf(type) === -1\n      ? this.mapService.off(type, handle)\n      : this.sceneService.off(type, handle);\n  }\n\n  // implements IMapController\n\n  public getZoom(): number {\n    return this.mapService.getZoom();\n  }\n\n  public getCenter(options?: ICameraOptions): ILngLat {\n    return this.mapService.getCenter(options);\n  }\n\n  public setCenter(center: [number, number], options?: ICameraOptions) {\n    return this.mapService.setCenter(center, options);\n  }\n\n  public getPitch(): number {\n    return this.mapService.getPitch();\n  }\n\n  public setPitch(pitch: number) {\n    return this.mapService.setPitch(pitch);\n  }\n\n  public getRotation(): number {\n    return this.mapService.getRotation();\n  }\n\n  public getBounds(): Bounds {\n    return this.mapService.getBounds();\n  }\n\n  public setRotation(rotation: number): void {\n    this.mapService.setRotation(rotation);\n  }\n  public zoomIn(): void {\n    this.mapService.zoomIn();\n  }\n\n  public zoomOut(): void {\n    this.mapService.zoomOut();\n  }\n\n  public panTo(p: Point): void {\n    this.mapService.panTo(p);\n  }\n\n  public panBy(x: number, y: number): void {\n    this.mapService.panBy(x, y);\n  }\n\n  public getContainer() {\n    return this.mapService.getContainer();\n  }\n  public setZoom(zoom: number): void {\n    this.mapService.setZoom(zoom);\n  }\n  public fitBounds(bound: Bounds, options?: unknown): void {\n    const { fitBoundsOptions, animate } = this.sceneService.getSceneConfig();\n    this.mapService.fitBounds(\n      bound,\n      // 选项优先级：用户传入，覆盖animate直接配置，覆盖Scene配置项传入\n      options || {\n        ...(fitBoundsOptions as object),\n        animate,\n      },\n    );\n  }\n\n  public setZoomAndCenter(zoom: number, center: Point): void {\n    this.mapService.setZoomAndCenter(zoom, center);\n  }\n\n  public setMapStyle(style: any): void {\n    this.mapService.setMapStyle(style);\n  }\n\n  public setMapStatus(options: Partial<IStatusOptions>) {\n    this.mapService.setMapStatus(options);\n  }\n\n  // conversion Method\n  public pixelToLngLat(pixel: Point): ILngLat {\n    return this.mapService.pixelToLngLat(pixel);\n  }\n\n  public lngLatToPixel(lnglat: Point): IPoint {\n    return this.mapService.lngLatToPixel(lnglat);\n  }\n\n  public containerToLngLat(pixel: Point): ILngLat {\n    return this.mapService.containerToLngLat(pixel);\n  }\n\n  public lngLatToContainer(lnglat: Point): IPoint {\n    return this.mapService.lngLatToContainer(lnglat);\n  }\n\n  public destroy() {\n    this.sceneService.destroy();\n    // TODO: 清理其他 Service 例如 IconService\n  }\n\n  public registerPostProcessingPass(\n    constructor: new (...args: any[]) => IPostProcessingPass<unknown>,\n    name: string,\n  ) {\n    this.container\n      .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n      .to(constructor)\n      .whenTargetNamed(name);\n  }\n\n  private initComponent(id: string | HTMLDivElement) {\n    this.controlService.init(\n      {\n        container: DOM.getContainer(id),\n      },\n      this.container,\n    );\n    this.markerService.init(this.container);\n    this.popupService.init(this.container);\n  }\n\n  private initControl() {\n    const { logoVisible, logoPosition } = this.sceneService.getSceneConfig();\n    if (logoVisible) {\n      this.addControl(new Logo({ position: logoPosition }));\n    }\n  }\n  // 资源管理\n}\n\nexport { Scene };\n"],"file":"index.js"}