{"version":3,"sources":["../src/source.ts"],"names":["SyncHook","bBoxToBounds","extent","padBounds","EventEmitter","getParser","getTransform","cluster","statMap","getColumn","mergeCustomizer","objValue","srcValue","Array","isArray","Source","data","cfg","init","type","enable","radius","maxZoom","zoom","method","originData","initCfg","hooks","tap","excuteParser","initCluster","executeTrans","options","rawData","emit","clusterIndex","getClusters","caculClusterExtent","id","getLeaves","Infinity","clusterOptions","field","Math","floor","forEach","p","properties","point_count","map","item","points","d","statNum","column","stat","features","parser","feature","length","newFeature","transforms","dataArray","find","dataItem","_id","value","name","removeAllListeners","bufferRatio","newBounds","invalidExtent","concat","option","tileurl","sourceParser","trans","tran","Object","assign","call"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport { SyncHook } from '@antv/async-hook';\nimport {\n  IClusterOptions,\n  IMapService,\n  IParseDataItem,\n  IParserCfg,\n  IParserData,\n  ISource,\n  ISourceCFG,\n  ITransform,\n  lazyInject,\n  TYPES,\n} from '@antv/l7-core';\nimport { bBoxToBounds, extent, padBounds } from '@antv/l7-utils';\nimport {\n  BBox,\n  Feature,\n  FeatureCollection,\n  Geometries,\n  Properties,\n} from '@turf/helpers';\nimport { EventEmitter } from 'eventemitter3';\nimport { cloneDeep, isFunction, isString, mergeWith } from 'lodash';\n// @ts-ignore\n// tslint:disable-next-line:no-submodule-imports\nimport Supercluster from 'supercluster/dist/supercluster';\nimport { getParser, getTransform } from './factory';\nimport { cluster } from './transform/cluster';\nimport { statMap } from './utils/statistics';\nimport { getColumn } from './utils/util';\n\nfunction mergeCustomizer(objValue: any, srcValue: any) {\n  if (Array.isArray(srcValue)) {\n    return srcValue;\n  }\n}\n\nexport default class Source extends EventEmitter implements ISource {\n  public data: IParserData;\n\n  // 数据范围\n  public extent: BBox;\n  // 生命周期钩子\n  public hooks = {\n    init: new SyncHook(),\n  };\n\n  public parser: IParserCfg = { type: 'geojson' };\n  public transforms: ITransform[] = [];\n  public cluster: boolean = false;\n  public clusterOptions: Partial<IClusterOptions> = {\n    enable: false,\n    radius: 40,\n    maxZoom: 20,\n    zoom: -99,\n    method: 'count',\n  };\n  private readonly mapService: IMapService;\n  // 是否有效范围\n  private invalidExtent: boolean = false;\n\n  // 原始数据\n  private originData: any;\n  private rawData: any;\n  private cfg: any = {};\n\n  private clusterIndex: Supercluster;\n\n  constructor(data: any | ISource, cfg?: ISourceCFG) {\n    super();\n    // this.rawData = cloneDeep(data);\n    this.originData = data;\n    this.initCfg(cfg);\n\n    this.hooks.init.tap('parser', () => {\n      this.excuteParser();\n    });\n    this.hooks.init.tap('cluster', () => {\n      this.initCluster();\n    });\n    this.hooks.init.tap('transform', () => {\n      this.executeTrans();\n    });\n    this.init();\n  }\n\n  public setData(data: any, options?: ISourceCFG) {\n    this.rawData = data;\n    this.originData = data;\n    this.initCfg(options);\n    this.init();\n    this.emit('update');\n  }\n  public getClusters(zoom: number): any {\n    return this.clusterIndex.getClusters(this.caculClusterExtent(2), zoom);\n  }\n  public getClustersLeaves(id: number): any {\n    return this.clusterIndex.getLeaves(id, Infinity);\n  }\n  public updateClusterData(zoom: number): void {\n    const { method = 'sum', field } = this.clusterOptions;\n    let data = this.clusterIndex.getClusters(\n      this.caculClusterExtent(2),\n      Math.floor(zoom),\n    );\n    this.clusterOptions.zoom = zoom;\n    data.forEach((p: any) => {\n      if (!p.id) {\n        p.properties.point_count = 1;\n      }\n    });\n    if (field || isFunction(method)) {\n      data = data.map((item: any) => {\n        const id = item.id as number;\n        if (id) {\n          const points = this.clusterIndex.getLeaves(id, Infinity);\n          const properties = points.map((d: any) => d.properties);\n          let statNum;\n          if (isString(method) && field) {\n            const column = getColumn(properties, field);\n            statNum = statMap[method](column);\n          }\n          if (isFunction(method)) {\n            statNum = method(properties);\n          }\n          item.properties.stat = statNum;\n        } else {\n          item.properties.point_count = 1;\n        }\n        return item;\n      });\n    }\n    this.data = getParser('geojson')({\n      type: 'FeatureCollection',\n      features: data,\n    });\n    this.executeTrans();\n  }\n  public getFeatureById(id: number): unknown {\n    const { type = 'geojson' } = this.parser;\n    if (type === 'geojson' && !this.cluster) {\n      const feature =\n        id < this.originData.features.length\n          ? this.originData.features[id]\n          : 'null';\n      const newFeature = cloneDeep(feature);\n      if (this.transforms.length !== 0) {\n        const item = this.data.dataArray.find((dataItem: IParseDataItem) => {\n          return dataItem._id === id;\n        });\n        newFeature.properties = item;\n      }\n      return newFeature;\n    } else {\n      return id < this.data.dataArray.length ? this.data.dataArray[id] : 'null';\n    }\n  }\n\n  public getFeatureId(field: string, value: any): number | undefined {\n    const feature = this.data.dataArray.find((dataItem: IParseDataItem) => {\n      return dataItem[field] === name;\n    });\n    return feature?._id;\n  }\n\n  public destroy() {\n    this.removeAllListeners();\n    this.originData = null;\n    this.clusterIndex = null;\n    // @ts-ignore\n    this.data = null;\n  }\n\n  private caculClusterExtent(bufferRatio: number): any {\n    let newBounds = [\n      [-Infinity, -Infinity],\n      [Infinity, Infinity],\n    ];\n\n    if (!this.invalidExtent) {\n      newBounds = padBounds(bBoxToBounds(this.extent), bufferRatio);\n    }\n    return newBounds[0].concat(newBounds[1]);\n  }\n\n  private initCfg(option?: ISourceCFG) {\n    this.cfg = mergeWith(this.cfg, option, mergeCustomizer);\n    const cfg = this.cfg;\n    if (cfg) {\n      if (cfg.parser) {\n        this.parser = cfg.parser;\n      }\n      if (cfg.transforms) {\n        this.transforms = cfg.transforms;\n      }\n      this.cluster = cfg.cluster || false;\n      if (cfg.clusterOptions) {\n        this.cluster = true;\n        this.clusterOptions = {\n          ...this.clusterOptions,\n          ...cfg.clusterOptions,\n        };\n      }\n    }\n  }\n  private excuteParser(): void {\n    const parser = this.parser;\n    const type: string = parser.type || 'geojson';\n    // TODO: 图片瓦片地图组件只需要使用 url 参数\n    if (type === 'imagetile') {\n      this.data = {\n        tileurl: this.originData,\n        dataArray: [],\n      };\n      return;\n    }\n    const sourceParser = getParser(type);\n    this.data = sourceParser(this.originData, parser);\n    // 计算范围\n    this.extent = extent(this.data.dataArray);\n    this.invalidExtent =\n      this.extent[0] === this.extent[2] || this.extent[1] === this.extent[3];\n  }\n  /**\n   * 数据统计\n   */\n  private executeTrans() {\n    const trans = this.transforms;\n    trans.forEach((tran: ITransform) => {\n      const { type } = tran;\n\n      const data = getTransform(type)(this.data, tran);\n      Object.assign(this.data, data);\n    });\n  }\n\n  private initCluster() {\n    if (!this.cluster) {\n      return;\n    }\n\n    const clusterOptions = this.clusterOptions || {};\n    this.clusterIndex = cluster(this.data, clusterOptions);\n  }\n\n  private init() {\n    this.hooks.init.call(this);\n  }\n}\n"],"file":"source.js"}