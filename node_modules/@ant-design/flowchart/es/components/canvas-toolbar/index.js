var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import { useXFlowApp } from '@antv/xflow-core';
import { ToolbarConfig } from './config';
import { XFlowToolbar } from './render-components';
export var CanvasToolbar = function (props) {
    var app = useXFlowApp();
    var hasApp = !!app;
    /** 获取ContextMenu的配置 */
    var contextMenuConfig = React.useMemo(function () { return (props.config ? props.config : new ToolbarConfig()); }, [props.config]);
    if (!hasApp) {
        return null;
    }
    return React.createElement(XFlowToolbar, __assign({}, props, { config: contextMenuConfig }));
};
export var createToolbarConfig = function (addOptions) {
    return function (value) {
        /** bridge config and value */
        var proxy = React.useMemo(function () { return ({ getValue: function () { return ({}); } }); }, []);
        proxy.getValue = function () { return value; };
        /** 生成config */
        var toolbarConfig = React.useMemo(function () {
            var config = new ToolbarConfig();
            addOptions(config, proxy);
            return config;
        }, [proxy]);
        return toolbarConfig;
    };
};
