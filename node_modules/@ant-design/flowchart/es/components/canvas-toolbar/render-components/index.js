var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import { Spin } from 'antd';
import classnames from 'classnames';
import { usePositionStyle } from '@antv/xflow-core';
// component
import { Toolbar } from '@antv/x6-react-components';
import { ToolbarGroup } from './toolbar-group';
import { useToolbarModel } from '../service';
import classNames from 'classnames';
/** render toolbar */
var ToolbarRender = function (props) {
    var idx = props.idx, groups = props.groups, layout = props.layout, toolbarOptions = props.toolbarOptions;
    var _a = toolbarOptions.hoverEffect, hoverEffect = _a === void 0 ? true : _a;
    return (React.createElement(Toolbar, { hoverEffect: hoverEffect }, groups.map(function (g, gIdx) {
        var key = idx + gIdx;
        return React.createElement(ToolbarGroup, { key: key, group: g, layout: layout });
    })));
};
var InnerRender = function (props) {
    var _a;
    var _b = useToolbarModel(props), isModelReady = _b.isModelReady, state = _b.state;
    var positionStyle = usePositionStyle(props.position);
    var _c = state.mainGroups, mainGroups = _c === void 0 ? [] : _c, _d = state.extraGroups, extraGroups = _d === void 0 ? [] : _d, layout = state.layout, customRender = state.customRender;
    var containerClz = classNames(props.className, layout, 'flowchart-toolbar');
    var clz = classnames((_a = {},
        _a[layout] = true,
        _a['xflow-toolbar-root'] = true,
        _a));
    // loading
    if (!isModelReady) {
        return (React.createElement("div", { className: containerClz, style: __assign(__assign({}, positionStyle), props.style) },
            React.createElement(Spin, { spinning: true, size: "small" })));
    }
    // render custom component
    if (customRender) {
        return (React.createElement("div", { className: containerClz, style: __assign(__assign({}, positionStyle), props.style) }, React.createElement(customRender, { config: state })));
    }
    // render toolbars
    return (React.createElement("div", { className: containerClz, style: __assign(__assign({}, positionStyle), props.style) },
        React.createElement("div", { className: clz },
            mainGroups.length > 0 && (React.createElement(ToolbarRender, { idx: "mainGroups", groups: mainGroups, layout: layout, toolbarOptions: state })),
            extraGroups.length > 0 && (React.createElement(ToolbarRender, { idx: "extraGroups", groups: extraGroups, layout: layout, toolbarOptions: state })))));
};
/** connect 数据 */
export var XFlowToolbar = React.memo(InnerRender);
