import React, { useContext } from 'react';
import classnames from 'classnames';
import { Toolbar } from '@antv/x6-react-components';
import AppContext from '../../../context';
import { uuidv4 } from '@antv/xflow-core';
import { ToolbarItem } from './toolbar-item';
import useFullscreen from '../../../hooks/useFullscreen';
import { getContainer } from '../../../util';
export var ToolbarGroup = function (props) {
    var _a;
    var group = props.group, layout = props.layout;
    var flowchartId = useContext(AppContext).flowchartId;
    var _b = useFullscreen(getContainer(flowchartId)), fullscreen = _b[0], toggleFullscreen = _b[1];
    var groupKey = React.useMemo(function () {
        return group.name || uuidv4();
    }, [group.name]);
    var _c = group.items, items = _c === void 0 ? [] : _c;
    if (items.length === 0) {
        return null;
    }
    var clz = classnames((_a = {},
        _a['xflow-toolbar-group'] = true,
        _a));
    items = items.filter(function (item) { return item.id !== 'fullscreen'; });
    items.push({
        id: 'fullscreen',
        tooltip: fullscreen ? '退出全屏' : '全屏',
        iconName: fullscreen ? 'FullscreenExitOutlined' : 'FullscreenOutlined',
        onClick: function () {
            toggleFullscreen();
        },
    });
    return (React.createElement(Toolbar.Group, { className: clz, key: groupKey }, items.map(function (item) { return (React.createElement(ToolbarItem, { item: item, layout: layout, key: item.id })); })));
};
