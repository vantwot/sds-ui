var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import classnames from 'classnames';
import { Toolbar } from '@antv/x6-react-components';
import { useXFlowApp } from '@antv/xflow-core';
import { IconStore } from '@antv/xflow-core';
export var ToolbarItem = function (props) {
    var _a;
    var app = useXFlowApp();
    var item = props.item, layout = props.layout;
    var Icon = IconStore.get(item.iconName);
    var clz = classnames((_a = {},
        _a['xflow-toolbar-item'] = true,
        _a));
    var text = layout === 'vertical' ? '' : item.text;
    var icon = Icon ? React.createElement(Icon, null) : null;
    var ToolbarItemWrap = item.render;
    var _b = item.isEnabled, isEnabled = _b === void 0 ? true : _b;
    var commandService = app.commandService, modelService = app.modelService;
    var onItemClick = function () {
        if (item.onClick) {
            item.onClick({ toolbarItem: item, commandService: commandService, modelService: modelService });
        }
    };
    if (ToolbarItemWrap) {
        return (React.createElement(ToolbarItemWrap, __assign({}, item, { onClick: onItemClick }),
            React.createElement(Toolbar.Item, __assign({}, item, { icon: icon, text: text, className: clz, disabled: !isEnabled, tooltip: item.tooltip || item.text, tooltipProps: __assign({ placement: layout === 'vertical' ? 'left' : 'bottom' }, item.tooltipProps), onClick: function () { } }))));
    }
    return (React.createElement(Toolbar.Item, __assign({}, item, { icon: icon, text: text, className: clz, hidden: !item, disabled: !isEnabled, tooltip: item.tooltip || item.text, onClick: onItemClick, tooltipProps: __assign(__assign({}, item.tooltipProps), { placement: layout === 'vertical' ? 'left' : 'bottom' }) })));
};
