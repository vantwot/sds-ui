var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import { Input } from 'antd';
import { usePanelContext } from '@antv/xflow';
export var NodePanelHeader = function (props) {
    var prefixClz = props.prefixClz, onKeywordChange = props.onKeywordChange;
    var propsProxy = usePanelContext().propsProxy;
    var panelProps = propsProxy.getValue();
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { className: "".concat(prefixClz, "-header"), style: __assign({ zIndex: 1 }, props.style) },
            panelProps.header && React.isValidElement(panelProps.header) && panelProps.header,
            panelProps.searchService && (React.createElement("div", { className: "".concat(prefixClz, "-header-search") },
                React.createElement(Input, { placeholder: "\u641C\u7D22\u7EC4\u4EF6", allowClear: true, onChange: function (e) { return onKeywordChange(e.target.value); }, style: { width: '100%', border: 0 } }))))));
};
