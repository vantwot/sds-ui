var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useState } from 'react';
import { useXflowPrefixCls, WorkspacePanel } from '@antv/xflow';
import { DoubleRightOutlined, DoubleLeftOutlined } from '@ant-design/icons';
import { NodePanelBody } from './panel-body';
import { NodePanelHeader } from './panel-header';
import { usePanelLyaoutStyle } from './utils';
import { useTreePanelData } from './service';
import { CONTAINER_CLASS, PANEL_HEADER_HEIGHT } from './constants';
export var NodeTreePanelMain = function (props) {
    var prefixClz = props.prefixClz, _a = props.position, position = _a === void 0 ? { width: 240, top: 0, bottom: 0, left: 0 } : _a, _b = props.showHeader, showHeader = _b === void 0 ? true : _b, rest = __rest(props, ["prefixClz", "position", "showHeader"]);
    var _c = position.width, width = _c === void 0 ? 200 : _c;
    var _d = usePanelLyaoutStyle(props), headerStyle = _d.headerStyle, bodyStyle = _d.bodyStyle;
    var _e = useTreePanelData(props), state = _e.state, onFolderExpand = _e.onFolderExpand, onKeywordChange = _e.onKeywordChange;
    return (React.createElement(React.Fragment, null,
        showHeader && (React.createElement(WorkspacePanel, __assign({}, rest, { position: {
                top: 0,
                left: 0,
                height: PANEL_HEADER_HEIGHT,
                width: width,
            } }),
            React.createElement(NodePanelHeader, __assign({}, props, { state: state, style: headerStyle, onKeywordChange: onKeywordChange })))),
        React.createElement(WorkspacePanel, __assign({ className: "".concat(CONTAINER_CLASS, "-nodes") }, rest, { position: __assign(__assign({}, position), { top: showHeader ? PANEL_HEADER_HEIGHT : 0 }) }),
            React.createElement(NodePanelBody, __assign({}, props, { state: state, style: bodyStyle, onFolderExpand: onFolderExpand })))));
};
export var NodeTreePanel = function (props) {
    var _a = props.show, show = _a === void 0 ? true : _a, _b = props.position, position = _b === void 0 ? { width: 240, top: 40, bottom: 0, left: 0 } : _b, rest = __rest(props, ["show", "position"]);
    if (!show) {
        return null;
    }
    var _c = position.width, width = _c === void 0 ? 200 : _c, left = position.left;
    var prefixClz = useXflowPrefixCls('node-panel');
    var _d = useState(false), collpased = _d[0], setCollpased = _d[1];
    return (React.createElement(WorkspacePanel, { className: CONTAINER_CLASS, position: __assign(__assign({}, position), { left: !collpased ? left : -width }) },
        React.createElement("div", { className: "".concat(CONTAINER_CLASS, "-wrapper") },
            React.createElement(WorkspacePanel, __assign({ className: prefixClz }, rest, { position: {
                    top: 0,
                    bottom: 0,
                    left: 0,
                    right: 0,
                } }),
                React.createElement(NodeTreePanelMain, __assign({}, props, { prefixClz: prefixClz, position: position }))),
            React.createElement("div", { className: "".concat(CONTAINER_CLASS, "-icon"), style: {
                    top: 21,
                    right: !collpased ? -10 : -20,
                    borderRadius: !collpased ? '50%' : '0 50% 50% 0',
                    borderLeft: !collpased ? '' : 'none',
                }, onClick: function () {
                    setCollpased(!collpased);
                } }, collpased ? React.createElement(DoubleRightOutlined, null) : React.createElement(DoubleLeftOutlined, null)))));
};
