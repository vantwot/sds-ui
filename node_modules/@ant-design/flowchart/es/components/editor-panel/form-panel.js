var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useState } from 'react';
// import { JsonSchemaForm } from '@antv/xflow';
import { WorkspacePanel } from '@antv/xflow';
import { DoubleRightOutlined, DoubleLeftOutlined } from '@ant-design/icons';
import { JsonSchemaForm } from '../canvas-json-schema-form';
import { defaultFormSchemaService } from './form-schema-service';
import { defaultControlMapService } from './control-map-service';
export var CONTAINER_CLASS = 'flowchart-editor-panel-collpase';
export var FormPanel = function (props) {
    var _a = props.controlMapService, controlMapService = _a === void 0 ? defaultControlMapService : _a, _b = props.formSchemaService, formSchemaService = _b === void 0 ? defaultFormSchemaService : _b, _c = props.position, position = _c === void 0 ? { width: 240, top: 0, bottom: 0, right: 0 } : _c, _d = props.show, show = _d === void 0 ? true : _d, rest = __rest(props, ["controlMapService", "formSchemaService", "position", "show"]);
    if (!show) {
        return null;
    }
    var _e = position.width, width = _e === void 0 ? 200 : _e, right = position.right;
    var _f = useState(false), collpased = _f[0], setCollpased = _f[1];
    return (React.createElement(WorkspacePanel, { className: CONTAINER_CLASS, position: __assign(__assign({}, position), { right: !collpased ? right : -width }) },
        React.createElement("div", { className: "".concat(CONTAINER_CLASS, "-wrapper") },
            React.createElement(JsonSchemaForm, __assign({ targetType: ['node', 'edge', 'canvas', 'group'], controlMapService: controlMapService, formSchemaService: formSchemaService, header: null, position: __assign(__assign({}, position), { top: 0 }), prefixClz: "charts-form-editor" }, rest)),
            React.createElement("div", { className: "".concat(CONTAINER_CLASS, "-icon"), style: {
                    top: 21,
                    left: !collpased ? -10 : -20,
                    borderRadius: !collpased ? '50%' : '50% 0 0  50%',
                    borderRight: !collpased ? '' : 'none',
                }, onClick: function () {
                    setCollpased(!collpased);
                } }, collpased ? React.createElement(DoubleLeftOutlined, null) : React.createElement(DoubleRightOutlined, null)))));
};
