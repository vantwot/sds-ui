var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useState, useEffect, useContext } from 'react';
import AppContext from '../../../../context';
import { FormWrapper } from '../../form-wrapper';
import { InputFiled, ColorPicker, Position, InputNumberFiled, Size } from './fields';
import { prefix } from './constants';
var NodeComponent = function (props) {
    var config = props.config, _a = props.plugin, plugin = _a === void 0 ? {} : _a;
    var updateNode = plugin.updateNode;
    var NodeConfig = useContext(AppContext).theme.NodeConfig;
    var _b = useState(__assign(__assign({}, NodeConfig.normal), config)), nodeConfig = _b[0], setNodeConfig = _b[1];
    var onNodeConfigChange = function (key, value) {
        var _a, _b;
        setNodeConfig(__assign(__assign({}, nodeConfig), (_a = {}, _a[key] = value, _a)));
        updateNode((_b = {},
            _b[key] = value,
            _b));
    };
    useEffect(function () {
        setNodeConfig(__assign(__assign({}, NodeConfig.normal), config));
    }, [config]);
    return (React.createElement("div", { className: "".concat(prefix, "-panel-body") },
        React.createElement("div", { className: "".concat(prefix, "-panel-group") },
            React.createElement("h5", null, "\u5185\u5BB9"),
            React.createElement(InputFiled, { label: "\u6807\u9898", value: nodeConfig.label, onChange: function (value) {
                    onNodeConfigChange('label', value);
                } })),
        React.createElement("div", { className: "".concat(prefix, "-panel-group") },
            React.createElement("h5", null, "\u6837\u5F0F"),
            React.createElement(Position, { x: nodeConfig.x, y: nodeConfig.y, onChange: function (key, value) {
                    onNodeConfigChange(key, value);
                } }),
            React.createElement(Size, { width: nodeConfig.width, height: nodeConfig.height, onChange: function (key, value) {
                    onNodeConfigChange(key, value);
                } }),
            React.createElement(ColorPicker, { label: "\u586B\u5145", value: nodeConfig.fill, onChange: function (value) {
                    onNodeConfigChange('fill', value);
                } }),
            React.createElement(ColorPicker, { label: "\u8FB9\u6846", value: nodeConfig.stroke, onChange: function (value) {
                    onNodeConfigChange('stroke', value);
                } }),
            React.createElement("div", { className: "".concat(prefix, "-node-text-style") },
                React.createElement(InputNumberFiled, { label: "\u5B57\u53F7", value: nodeConfig.fontSize, width: 68, onChange: function (value) {
                        onNodeConfigChange('fontSize', value);
                    } }),
                React.createElement(ColorPicker, { value: nodeConfig.fontFill, onChange: function (value) {
                        onNodeConfigChange('fontFill', value);
                    } })))));
};
export var NodeService = function (props) {
    return (React.createElement(FormWrapper, __assign({}, props), function (config, plugin) { return React.createElement(NodeComponent, __assign({}, props, { plugin: plugin, config: config })); }));
};
