import React, { useState, useRef, useContext } from 'react';
import { render } from 'react-dom';
import { Button } from 'antd';
import { SketchPicker } from 'react-color';
import { getContainer } from '../../../../../util';
import appContext from '../../../../../context';
import { prefix } from '../constants';
var ColorPicker = function (props) {
    var label = props.label, _a = props.value, value = _a === void 0 ? '' : _a, onChange = props.onChange;
    var _b = useState(false), show = _b[0], setShow = _b[1];
    var colorRef = useRef(value);
    var flowchartId = useContext(appContext).flowchartId;
    var PickContainer = function () {
        return (React.createElement("div", { className: "".concat(prefix, "-popover") },
            React.createElement(SketchPicker, { style: {
                    width: '100%',
                }, onChange: function (color) {
                    colorRef.current = color.hex;
                } }),
            React.createElement("div", { className: "foolter" },
                React.createElement(Button, { onClick: function () {
                        setShow(false);
                    } }, "\u53D6\u6D88"),
                React.createElement(Button, { type: "primary", onClick: function () {
                        onChange === null || onChange === void 0 ? void 0 : onChange(colorRef.current);
                        setShow(false);
                    } }, "\u786E\u8BA4"))));
    };
    /**  react-color mouseOver 和上层事件冲突，不得已为之 */
    var CreatePickColorContainer = function (visible) {
        var container = getContainer(flowchartId);
        var exist = document.querySelector("#".concat(prefix, "-pick-color-container"));
        if (exist) {
            container.removeChild(exist);
        }
        if (!visible) {
            return;
        }
        var div = document.createElement('div');
        div.id = "".concat(prefix, "-pick-color-container");
        div.className = "".concat(prefix, "-pick-color-container");
        render(React.createElement(PickContainer, null), div);
        container.appendChild(div);
    };
    return (React.createElement("div", { className: "group" },
        label && React.createElement("label", null, label),
        React.createElement("div", { className: "".concat(prefix, "-color-container"), onClick: function () {
                setShow(true);
            } },
            React.createElement("div", { className: "".concat(prefix, "-color"), style: {
                    backgroundColor: value,
                    height: '100%',
                } })),
        CreatePickColorContainer(show)));
};
export default ColorPicker;
