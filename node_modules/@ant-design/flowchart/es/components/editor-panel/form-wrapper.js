var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import React, { useCallback, useContext } from 'react';
import { XFlowGraphCommands, MODELS, XFlowNodeCommands, XFlowEdgeCommands, usePanelContext, FormItemWrapper, } from '@antv/xflow';
import AppContext from '../../context';
import { onConfigChange } from '../../util';
import useAsync from './useAsync';
export var FormWrapper = function (props) {
    var controlSchema = props.controlSchema, children = props.children, _a = props.type, type = _a === void 0 ? 'node' : _a;
    var _b = usePanelContext(), commandService = _b.commandService, modelService = _b.modelService;
    var flowchartId = useContext(AppContext).flowchartId;
    var getSelectNode = useCallback(function () { return __awaiter(void 0, void 0, void 0, function () {
        var data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, MODELS.SELECTED_NODE.useValue(modelService)];
                case 1:
                    data = (_a.sent()).data;
                    return [2 /*return*/, data];
            }
        });
    }); }, [props]);
    var getSelectEdge = useCallback(function () { return __awaiter(void 0, void 0, void 0, function () {
        var cell, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, MODELS.SELECTED_CELL.useValue(modelService)];
                case 1:
                    cell = _a.sent();
                    data = cell.getData();
                    return [2 /*return*/, __assign({ id: cell.id }, data)];
            }
        });
    }); }, [props]);
    var _c = useAsync(type === 'edge' ? getSelectEdge : getSelectNode), data = _c.data, loading = _c.loading;
    React.useEffect(function () {
        commandService.executeCommand(XFlowGraphCommands.SAVE_GRAPH_DATA.id, {
            saveGraphDataService: function (meta, graph) { return __awaiter(void 0, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, { err: null, data: graph, meta: meta }];
                });
            }); },
        });
    }, [props]);
    var updateNode = function (value) { return __awaiter(void 0, void 0, void 0, function () {
        var currentNodeData, nodeConfig;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getSelectNode()];
                case 1:
                    currentNodeData = _a.sent();
                    nodeConfig = __assign(__assign({}, currentNodeData), value);
                    return [4 /*yield*/, commandService.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {
                            nodeConfig: nodeConfig,
                        })];
                case 2:
                    _a.sent();
                    onConfigChange({ type: 'update:node', config: nodeConfig }, flowchartId);
                    return [2 /*return*/];
            }
        });
    }); };
    var updateEdge = function (value, type, key) {
        if (type === void 0) { type = 'line'; }
        return __awaiter(void 0, void 0, void 0, function () {
            var currentEdgeData, edgeConfig;
            var _a;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, getSelectEdge()];
                    case 1:
                        currentEdgeData = _c.sent();
                        edgeConfig = __assign(__assign(__assign({}, currentEdgeData), (key ? value[key] : value)), { attrs: __assign(__assign({}, currentEdgeData.attrs), (_a = {}, _a[type] = __assign(__assign({}, (_b = currentEdgeData.attrs) === null || _b === void 0 ? void 0 : _b[type]), (key ? value[key] : value)), _a)) });
                        return [4 /*yield*/, commandService.executeCommand(XFlowEdgeCommands.UPDATE_EDGE.id, { edgeConfig: edgeConfig })];
                    case 2:
                        _c.sent();
                        onConfigChange({ type: 'update:edge', config: edgeConfig }, flowchartId);
                        return [2 /*return*/];
                }
            });
        });
    };
    var updateGroup = function (value) { return __awaiter(void 0, void 0, void 0, function () {
        var currentGroupData, nodeConfig;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getSelectNode()];
                case 1:
                    currentGroupData = _a.sent();
                    nodeConfig = __assign(__assign({}, currentGroupData), value);
                    return [4 /*yield*/, commandService.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {
                            nodeConfig: nodeConfig,
                        })];
                case 2:
                    _a.sent();
                    onConfigChange({ type: 'update:group', config: nodeConfig }, flowchartId);
                    return [2 /*return*/];
            }
        });
    }); };
    if (loading) {
        return null;
    }
    return (React.createElement(FormItemWrapper, { schema: controlSchema }, function () {
        return children(__assign({}, data), { updateNode: updateNode, updateEdge: updateEdge, updateGroup: updateGroup });
    }));
};
