var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import React from 'react';
import { useXFlowApp, DisposableCollection, createComponentModel } from '@antv/xflow-core';
import { XFlowModelCommands, Disposable, MODELS } from '@antv/xflow-core';
export var NsJsonSchemaFormModel;
(function (NsJsonSchemaFormModel) {
    var _this = this;
    NsJsonSchemaFormModel.id = 'XFLOW_JSON_SCHEMA_FORM';
    NsJsonSchemaFormModel.useModel = function (model) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, model.awaitModel(NsJsonSchemaFormModel.id)];
        });
    }); };
})(NsJsonSchemaFormModel || (NsJsonSchemaFormModel = {}));
/** 方便其他组件执行Command改变Panel内部状态 */
export var executeJsonSchemaFormCommand = function (cmds, updateModel) {
    cmds.executeCommand(XFlowModelCommands.UPDATE_MODEL.id, {
        getModel: function (modelService) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, NsJsonSchemaFormModel.useModel(modelService)];
            });
        }); },
        updateModel: updateModel,
    });
};
export var useJsonSchemaFormModel = function (props) {
    var app = useXFlowApp();
    var commandService = app.commandService, modelService = app.modelService;
    var formSchemaService = props.formSchemaService;
    var _a = createComponentModel({
        schema: { tabs: [] },
        targetType: null,
        targetData: null,
        targetCell: null,
        loading: false,
    }), state = _a[0], setState = _a[1], model = _a[2], isModelReady = _a[3];
    /** 注册全局的model */
    React.useEffect(function () {
        if (!app || !app.modelService) {
            return null;
        }
        var toDispose = new DisposableCollection();
        var deferredModel = app.modelService.findDeferredModel(NsJsonSchemaFormModel.id);
        if (!deferredModel) {
            var d = app.modelService.registerModel({
                id: NsJsonSchemaFormModel.id,
                modelFactory: function () { return model; },
                /** 监听SELECTED_CELL的变化 */
                watchChange: function (self, modelSerccie) { return __awaiter(void 0, void 0, void 0, function () {
                    var selectedCellModel, nodeDisposable;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, MODELS.SELECTED_CELL.getModel(modelSerccie)];
                            case 1:
                                selectedCellModel = _a.sent();
                                nodeDisposable = selectedCellModel.watch(function (cell) { return __awaiter(void 0, void 0, void 0, function () {
                                    var updateState, getCellType, targetCellType;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                updateState = function (targetCell, type) { return __awaiter(void 0, void 0, void 0, function () {
                                                    var targetData, schema;
                                                    return __generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0:
                                                                self.setValue(function (m) {
                                                                    m.loading = true;
                                                                });
                                                                targetData = targetCell ? targetCell.getData() : null;
                                                                return [4 /*yield*/, formSchemaService({
                                                                        commandService: commandService,
                                                                        modelService: modelService,
                                                                        targetData: targetData,
                                                                        cell: targetCell,
                                                                        targetType: type,
                                                                    })];
                                                            case 1:
                                                                schema = _a.sent();
                                                                self.setValue({
                                                                    loading: false,
                                                                    schema: schema,
                                                                    targetType: type,
                                                                    targetCell: targetCell,
                                                                    targetData: targetData,
                                                                });
                                                                return [2 /*return*/];
                                                        }
                                                    });
                                                }); };
                                                getCellType = function (targetCell) {
                                                    if (!targetCell) {
                                                        return 'canvas';
                                                    }
                                                    else if (targetCell.isGroup && targetCell.isGroup()) {
                                                        return 'group';
                                                    }
                                                    else if (targetCell.isNode && targetCell.isNode()) {
                                                        return 'node';
                                                    }
                                                    else if (targetCell.isEdge && targetCell.isEdge()) {
                                                        return 'edge';
                                                    }
                                                    else {
                                                        return 'canvas';
                                                    }
                                                };
                                                targetCellType = getCellType(cell);
                                                if (!(props.targetType || ['node', 'canvas']).includes(targetCellType)) return [3 /*break*/, 2];
                                                return [4 /*yield*/, updateState(cell, targetCellType)];
                                            case 1:
                                                _a.sent();
                                                _a.label = 2;
                                            case 2: return [2 /*return*/];
                                        }
                                    });
                                }); });
                                return [2 /*return*/, Disposable.create(function () {
                                        nodeDisposable.dispose();
                                        toDispose.push(nodeDisposable);
                                    })];
                        }
                    });
                }); },
            });
            toDispose.push(d);
        }
        return function () {
            toDispose.dispose();
        };
        /* eslint-disable-next-line  */
    }, []);
    return { commandService: commandService, modelService: modelService, state: state, setState: setState, model: model, isModelReady: isModelReady };
};
