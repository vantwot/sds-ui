var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import React from 'react';
import { useXflowPrefixCls } from '@antv/xflow-core';
import { PanelBody } from './panel-body';
import { usePanelLyaoutStyle } from './utils';
import { useJsonSchemaFormModel } from './service';
export { FormItemWrapper } from './schema-form';
export { executeJsonSchemaFormCommand } from './service';
import { WorkspacePanel } from '@antv/xflow';
/** useFormPanelData获取数据 */
export var JsonSchemaFormMain = function (props) {
    var prefixClz = props.prefixClz;
    var getCustomRenderComponent = props.getCustomRenderComponent, afterUpdatingCb = props.afterUpdatingCb, formValueUpdateService = props.formValueUpdateService;
    var _a = useJsonSchemaFormModel(props), state = _a.state, commandService = _a.commandService, modelService = _a.modelService;
    // 联动更新form items的值
    var triggerUpdate = React.useCallback(function (form, values) { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    form.setFieldsValue(values);
                    return [4 /*yield*/, formValueUpdateService({
                            values: values,
                            modelService: modelService,
                            commandService: commandService,
                            targetData: state.targetData,
                            targetType: state.targetType,
                        })];
                case 1:
                    result = _a.sent();
                    if (afterUpdatingCb) {
                        afterUpdatingCb(result);
                    }
                    return [2 /*return*/];
            }
        });
    }); }, [afterUpdatingCb, commandService, formValueUpdateService, modelService, state.targetData, state.targetType]);
    // 在fields change时的回调
    var onFieldsChange = React.useCallback(function (values) { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, formValueUpdateService({
                        values: values,
                        modelService: modelService,
                        commandService: commandService,
                        targetData: state.targetData,
                        targetType: state.targetType,
                    })];
                case 1:
                    result = _a.sent();
                    if (afterUpdatingCb) {
                        afterUpdatingCb(result);
                    }
                    return [2 /*return*/];
            }
        });
    }); }, [afterUpdatingCb, commandService, formValueUpdateService, modelService, state.targetData, state.targetType]);
    /** schema为空的情况  */
    var noSchema = React.useMemo(function () {
        try {
            return state.schema.tabs.length === 0 || !state.schema;
        }
        catch (error) {
            return true;
        }
    }, [state.schema]);
    var bodyStyle = usePanelLyaoutStyle(props, noSchema).bodyStyle;
    /** 支持自定义渲染 */
    if (getCustomRenderComponent) {
        var Component = getCustomRenderComponent(state.targetType, state.targetData, modelService, commandService);
        if (Component) {
            return React.createElement(Component, __assign(__assign({}, props), { bodyStyle: bodyStyle, targetData: state.targetData, targetType: state.targetType, modelService: modelService, commandService: commandService }));
        }
    }
    return (React.createElement("div", { className: prefixClz },
        React.createElement(PanelBody, __assign({}, props, { style: bodyStyle, prefixClz: props.prefixClz, loading: state.loading, schema: state.schema, triggerUpdate: triggerUpdate, onFieldsChange: onFieldsChange }))));
};
export var JsonSchemaForm = function (props) {
    var prefixClz = useXflowPrefixCls('json-schema-form');
    return (React.createElement(WorkspacePanel, __assign({}, props, { className: prefixClz }),
        React.createElement(JsonSchemaFormMain, __assign({}, props))));
};
