var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useCallback, useEffect } from 'react';
import { Empty, Form, Tabs } from 'antd';
import classNames from 'classnames';
import { Log } from '../../../util';
import { xflowDefaultControls, makeControlMap, getControlFromMap } from './control-map/index';
export { FormItemWrapper } from './common/form-item-wrapper';
var TabPane = Tabs.TabPane;
export var SchemaForm = function (props) {
    var _a;
    var _b;
    var schema = props.schema, formInstance = props.form, className = props.className, triggerUpdate = props.triggerUpdate, defaultControlRender = props.defaultControlRender, afterUpdatingCb = props.afterUpdatingCb, controlMapfromParent = props.controlMap, otherProps = __rest(props, ["schema", "form", "className", "triggerUpdate", "defaultControlRender", "afterUpdatingCb", "controlMap"]);
    var tabs = schema.tabs;
    var form = Form.useForm(formInstance)[0];
    var controlMap = React.useMemo(function () { return (props.controlMap ? props.controlMap : makeControlMap(xflowDefaultControls)); }, [props.controlMap]);
    var innerTriggerUpdate = useCallback(function (values) {
        if (typeof triggerUpdate === 'function') {
            triggerUpdate(form, values);
        }
    }, [form, triggerUpdate]);
    /** 初次挂载时设置一次值以激活首次联动 */
    useEffect(function () {
        form.setFieldsValue({});
    }, [form]);
    /** 切换标签时激活联动 */
    var onClickTab = useCallback(function () {
        requestAnimationFrame(function () {
            form.setFieldsValue({});
        });
    }, [form]);
    return (React.createElement(Form, __assign({ size: "small", form: form, layout: "vertical", className: classNames('xflow-json-form', className) }, otherProps),
        React.createElement(Tabs, { type: "card", defaultActiveKey: (_b = tabs[0]) === null || _b === void 0 ? void 0 : _b.name, className: classNames((_a = {},
                _a['tabs'] = true,
                _a['xTab'] = true,
                _a['singleTab'] = (tabs === null || tabs === void 0 ? void 0 : tabs.length) === 1,
                _a['coupleTab'] = (tabs === null || tabs === void 0 ? void 0 : tabs.length) === 2,
                _a['ternateTab'] = (tabs === null || tabs === void 0 ? void 0 : tabs.length) === 3,
                _a)), onTabClick: onClickTab }, tabs.map(function (tab) {
            var tabName = tab.name, groups = tab.groups;
            return (React.createElement(TabPane, { key: tabName, tab: tabName },
                groups.length === 0 && React.createElement(Empty, null),
                groups.length > 0 &&
                    groups.map(function (group) {
                        var _a = group.controls, groupControls = _a === void 0 ? [] : _a;
                        if (groupControls.length === 0) {
                            return React.createElement(Empty, { style: { padding: '12px 0' } });
                        }
                        return groupControls.map(function (control) {
                            var shape = control.shape, controlName = control.name;
                            var ControlComponent = getControlFromMap(shape, controlMap, defaultControlRender);
                            if (!ControlComponent) {
                                Log.error('未找到对应的控件:', shape);
                                return null;
                            }
                            return (React.createElement(ControlComponent, { key: controlName, form: form, controlSchema: control, triggerUpdate: innerTriggerUpdate, afterUpdatingCb: afterUpdatingCb }));
                        });
                    })));
        }))));
};
