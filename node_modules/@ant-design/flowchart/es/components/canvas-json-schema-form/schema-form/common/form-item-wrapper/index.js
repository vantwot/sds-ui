import React, { useState, useMemo } from 'react';
import { Form } from 'antd';
import { makeUpdaterByDependencies, makeFormItemControlledProps, isEmptyParamValue } from './util';
export var FormItemWrapper = function (props) {
    var schema = props.schema, children = props.children;
    var _a = useState(), updateReasonField = _a[0], setUpdateReasonField = _a[1];
    var dependencies = schema.dependencies, value = schema.value, defaultValue = schema.defaultValue, hidden = schema.hidden, disabled = schema.disabled;
    var updater = useMemo(function () {
        return (dependencies === null || dependencies === void 0 ? void 0 : dependencies.length) ? makeUpdaterByDependencies(dependencies, setUpdateReasonField) : undefined;
    }, [dependencies]);
    if (typeof children !== 'function') {
        throw new Error('[Schema Form]: chilren of FormItemWrapper should be a render prop.');
    }
    var initValue = isEmptyParamValue(value) ? defaultValue : value;
    if (updater) {
        return (React.createElement(Form.Item, { noStyle: true, shouldUpdate: updater }, function (form) {
            var _a = makeFormItemControlledProps(form, schema, updateReasonField), isHidden = _a.hidden, isDisabled = _a.disabled;
            return children({
                hidden: isHidden,
                disabled: isDisabled,
                initialValue: initValue,
            });
        }));
    }
    return children({
        hidden: hidden,
        disabled: disabled,
        initialValue: initValue,
    });
};
