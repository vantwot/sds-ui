import React, { useContext } from 'react';
import { AppContext } from '../../index';
import { createPath } from '../../util';
import { NODE_WIDTH, NODE_HEIGHT, NODE_PADDING } from '../../constants';
export var OrNode = function (props) {
    var _a = props.size, size = _a === void 0 ? { width: NODE_WIDTH, height: NODE_HEIGHT } : _a, _b = props.data, data = _b === void 0 ? {} : _b;
    var NodeConfig = useContext(AppContext).theme.NodeConfig;
    var stateNodeConfig = NodeConfig === null || NodeConfig === void 0 ? void 0 : NodeConfig.normal;
    var _c = data.stroke, stroke = _c === void 0 ? stateNodeConfig.stroke : _c, _d = data.label, label = _d === void 0 ? stateNodeConfig.label : _d, _e = data.fill, fill = _e === void 0 ? stateNodeConfig.fill : _e, _f = data.fontFill, fontFill = _f === void 0 ? stateNodeConfig.fontFill : _f, _g = data.fontSize, fontSize = _g === void 0 ? stateNodeConfig.fontSize : _g;
    var width = size.width, height = size.height;
    var path1 = [
        ['M', height / 2, NODE_PADDING],
        ['L', height / 2, height - 2 * NODE_PADDING], // bottom-center
    ];
    var path2 = [
        ['M', NODE_PADDING, height / 2],
        ['L', height - 2 * NODE_PADDING, height / 2], // right-center
    ];
    var availableR = height - 2 * NODE_PADDING;
    return (React.createElement("svg", { viewBox: "0 0 ".concat(width, " ").concat(height), xmlns: "http://www.w3.org/2000/svg", width: "100%", height: "100%" },
        React.createElement("path", { d: "M ".concat(NODE_PADDING, ",").concat(height / 2, " a ").concat(availableR / 2, " ").concat(availableR / 2, " 0 1 1 0 1 z"), fill: fill, stroke: stroke }),
        React.createElement("path", { d: createPath(path1), stroke: stroke }),
        React.createElement("path", { d: createPath(path2), stroke: stroke }),
        React.createElement("text", { x: width / 2, y: height / 2, fill: fontFill, textAnchor: "middle", alignmentBaseline: "middle", fontSize: fontSize }, label),
        "Sorry, your browser does not support inline SVG."));
};
