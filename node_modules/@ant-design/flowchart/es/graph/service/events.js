var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { XFlowNodeCommands, XFlowEdgeCommands } from '@antv/xflow';
import { get } from 'lodash';
import { onConfigChange, getGraphInstance, getFlowchartId } from '../../util';
/**
 * 节点移动时，实时更新位置信息
 */
export var movedNode = function (e, cmds, ctx) { return __awaiter(void 0, void 0, void 0, function () {
    var node, flowchartId, data, x6Graph_1, nodeConfig;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                node = e.node;
                if (!node) {
                    return [2 /*return*/];
                }
                flowchartId = getFlowchartId(e);
                data = node.data;
                // 更新组内元素
                if (data === null || data === void 0 ? void 0 : data.groupChildren) {
                    x6Graph_1 = getGraphInstance(flowchartId);
                    data === null || data === void 0 ? void 0 : data.groupChildren.forEach(function (id) { return __awaiter(void 0, void 0, void 0, function () {
                        var currentNode;
                        var _a, _b;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    currentNode = x6Graph_1.getCellById(id);
                                    if (!currentNode) return [3 /*break*/, 2];
                                    return [4 /*yield*/, cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {
                                            nodeConfig: __assign(__assign(__assign({}, currentNode.data), (_a = currentNode.getSize) === null || _a === void 0 ? void 0 : _a.call(currentNode)), (_b = currentNode.getPosition) === null || _b === void 0 ? void 0 : _b.call(currentNode)),
                                        })];
                                case 1:
                                    _c.sent();
                                    _c.label = 2;
                                case 2: return [2 /*return*/];
                            }
                        });
                    }); });
                }
                nodeConfig = __assign(__assign(__assign({}, node.data), node.getPosition()), node.getSize());
                return [4 /*yield*/, cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {
                        nodeConfig: nodeConfig,
                    })];
            case 1:
                _a.sent();
                onConfigChange({ type: 'move:node', config: nodeConfig }, flowchartId);
                return [2 /*return*/];
        }
    });
}); };
/**
 * 修改节点大小
 */
export var resizeNode = function (e, cmds, ctx) { return __awaiter(void 0, void 0, void 0, function () {
    var node, flowchartId, nodeConfig;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                node = e.node;
                if (!node) {
                    return [2 /*return*/];
                }
                flowchartId = getFlowchartId(e);
                nodeConfig = __assign(__assign(__assign({}, node.data), node.getPosition()), node.size());
                return [4 /*yield*/, cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {
                        nodeConfig: nodeConfig,
                    })];
            case 1:
                _a.sent();
                onConfigChange({ type: 'resize:node', config: nodeConfig }, flowchartId);
                return [2 /*return*/];
        }
    });
}); };
var getContainer = function (e) {
    var _a;
    var currentNode = (_a = e === null || e === void 0 ? void 0 : e.e) === null || _a === void 0 ? void 0 : _a.currentTarget;
    if (!currentNode) {
        return document.getElementsByClassName('xflow-canvas-container');
    }
    var containter = null;
    while (!containter) {
        var current = currentNode.getElementsByClassName('xflow-canvas-container');
        if ((current === null || current === void 0 ? void 0 : current.length) > 0) {
            containter = current;
        }
        currentNode = currentNode.parentNode;
    }
    return containter;
};
/** 设置 ports visible */
export var changePortsVisible = function (visible, e) {
    var containers = getContainer(e);
    Array.from(containers).forEach(function (container) {
        var _a, _b;
        var ports = container.querySelectorAll('.x6-port-body');
        var graph = getGraphInstance(container.getAttribute('data-flowchart-id'));
        if (!graph) {
            return;
        }
        // 选中中节点时不展示链接桩
        var isSelectedNode = (_b = (_a = graph.getSelectedCells()) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.isNode();
        for (var i = 0, len = ports.length; i < len; i = i + 1) {
            ports[i].style.visibility = !isSelectedNode && visible ? 'visible' : 'hidden';
        }
    });
};
// 添加辅助工具
export var addTools = function (e, cmds, ctx) { return __awaiter(void 0, void 0, void 0, function () {
    var edge;
    return __generator(this, function (_a) {
        edge = e.edge;
        if (!edge) {
            return [2 /*return*/];
        }
        edge.addTools('vertices', 'ondbclick');
        return [2 /*return*/];
    });
}); };
// 添加辅助工具
export var removeTools = function (e, cmds, ctx) { return __awaiter(void 0, void 0, void 0, function () {
    var edge;
    return __generator(this, function (_a) {
        edge = e.edge;
        if (!edge) {
            return [2 /*return*/];
        }
        if (edge.hasTools('ondbclick')) {
            cmds.executeCommand(XFlowEdgeCommands.UPDATE_EDGE.id, {
                edgeConfig: __assign(__assign({}, get(edge, 'data')), { vertices: edge.getVertices() }),
            });
            edge.removeTools();
        }
        return [2 /*return*/];
    });
}); };
