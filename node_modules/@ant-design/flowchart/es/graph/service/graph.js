var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { ConfigProvider, Tooltip } from 'antd';
import ReactDOM from 'react-dom';
import classnames from 'classnames';
import { createGraphConfig, DisposableCollection, createHookConfig, XFlowEdgeCommands, } from '@antv/xflow';
import { getProps as getGlobalProps, onConfigChange } from '../../util';
import { Shape } from '@antv/x6';
import { NODE_HEIGHT, setNodeRender, ASPECTRATIONODE } from '../../components/node-panel';
import { setGroupRender } from '../../components/group-panel';
import { registerEdge, DefaultEdgeConfig, FLOWCHART_EDGE } from '../../components/edge-panel';
import { movedNode, resizeNode, changePortsVisible, addTools, removeTools } from './events';
/** 自定义React节点 */
var ANT_PREFIX = 'ant';
export var NsAddEdgeEvent;
(function (NsAddEdgeEvent) {
    NsAddEdgeEvent.EVENT_NAME = 'ADD_EDGE_CMD_EVENT';
})(NsAddEdgeEvent || (NsAddEdgeEvent = {}));
var XFlowEdge = Shape.Edge.registry.register('xflow', Shape.Edge.define({
    zIndex: 1,
    highlight: true,
    shape: FLOWCHART_EDGE,
    name: 'custom-edge',
    label: '',
    anchor: {
        name: 'midSide',
        args: {
            dx: 10,
        },
    },
    attrs: DefaultEdgeConfig,
    data: {
        label: '',
    },
}), true);
export var useGraphHook = createHookConfig(function (config, proxy) {
    var flowchartId = proxy.getValue().flowchartId;
    config.setRegisterHook(function (hooks) {
        var todo = new DisposableCollection();
        var edgeData = hooks.afterGraphInit.registerHook({
            name: 'call add edge to replace temp edge',
            handler: function (args) { return __awaiter(void 0, void 0, void 0, function () {
                var commandService, graph;
                return __generator(this, function (_a) {
                    commandService = args.commandService, graph = args.graph;
                    graph.on(NsAddEdgeEvent.EVENT_NAME, function (args) { return __awaiter(void 0, void 0, void 0, function () {
                        var edge, edgeConfig, config, onAddEdge;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    edge = args.edge, edgeConfig = __rest(args, ["edge"]);
                                    config = {
                                        edgeConfig: __assign(__assign({}, edgeConfig), { 
                                            // renderKey: FLOWCHART_EDGE, // 暂不支持
                                            source: {
                                                cell: edgeConfig.source,
                                                port: edgeConfig.sourcePortId,
                                            }, target: {
                                                cell: edgeConfig.target,
                                                port: edgeConfig.targetPortId,
                                            }, zIndex: 1, attrs: {
                                                line: {
                                                    stroke: '#A2B1C3',
                                                    targetMarker: {
                                                        name: 'block',
                                                        width: 12,
                                                        height: 8,
                                                    },
                                                    strokeDasharray: '5 5',
                                                    strokeWidth: 1,
                                                },
                                            }, data: __assign({}, edgeConfig) }),
                                    };
                                    return [4 /*yield*/, commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, config)];
                                case 1:
                                    _a.sent();
                                    onAddEdge = getGlobalProps(flowchartId, 'onAddEdge');
                                    if (typeof onAddEdge === 'function') {
                                        onAddEdge(config);
                                    }
                                    onConfigChange({ type: 'add:edge', config: config });
                                    args.edge.remove();
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    return [2 /*return*/];
                });
            }); },
        });
        todo.push(edgeData);
        return todo;
    });
});
/**  graphConfig hook  */
export var useGraphConfig = createGraphConfig(function (config, proxy) {
    var props = proxy.getValue();
    var nodePanelProps = props.nodePanelProps, _a = props.canvasProps, canvasProps = _a === void 0 ? {} : _a;
    // const miniMapContainer = getContainer('miniMapContainer');
    config.setEdgeTypeParser(function (edge) { return edge === null || edge === void 0 ? void 0 : edge.renderKey; });
    registerEdge(config);
    setNodeRender(config, nodePanelProps);
    setGroupRender(config);
    config.setX6Config(__assign({ grid: true, history: true, resizing: {
            enabled: true,
            minWidth: NODE_HEIGHT,
            minHeight: NODE_HEIGHT,
            preserveAspectRatio: function (shape) {
                var data = shape.data;
                return ASPECTRATIONODE.includes(data.name);
            },
        }, snapline: {
            enabled: true,
        }, 
        // minimap: {
        //   enabled: true,
        //   container: miniMapContainer,
        //   width: 200,
        //   height: 200,
        // },
        connecting: {
            router: 'manhattan',
            connector: {
                name: 'rounded',
                args: {
                    radius: 8,
                },
            },
            anchor: 'center',
            connectionPoint: 'anchor',
            allowBlank: false,
            snap: {
                radius: 20,
            },
            createEdge: function () {
                var edge = new XFlowEdge({});
                var graph = this;
                graph.once('edge:connected', function (args) {
                    var edge = args.edge, isNew = args.isNew;
                    if (isNew && edge.isEdge()) {
                        var targetNode = edge.getTargetCell();
                        if (targetNode && targetNode.isNode()) {
                            var targetPortId = edge.getTargetPortId();
                            var sourcePortId = edge.getSourcePortId();
                            var sourceCellId = edge.getSourceCellId();
                            var targetCellId = edge.getTargetCellId();
                            graph.trigger(NsAddEdgeEvent.EVENT_NAME, {
                                targetPortId: targetPortId,
                                sourcePortId: sourcePortId,
                                source: sourceCellId,
                                target: targetCellId,
                                edge: edge,
                            });
                        }
                    }
                });
                return edge;
            },
            validateEdge: function (args) {
                var _a;
                var edge = args.edge;
                return !!((_a = edge === null || edge === void 0 ? void 0 : edge.target) === null || _a === void 0 ? void 0 : _a.port);
            },
            // 是否触发交互事件
            validateMagnet: function (_a) {
                var magnet = _a.magnet;
                // 所有锚点均可触发
                return true;
            },
            // 显示可用的链接桩
            validateConnection: function (_a) {
                var sourceView = _a.sourceView, targetView = _a.targetView, sourceMagnet = _a.sourceMagnet, targetMagnet = _a.targetMagnet;
                // 不允许连接到自己
                if (sourceView === targetView) {
                    return false;
                }
                var node = targetView.cell;
                // 判断目标链接桩是否可连接
                var portId = targetMagnet === null || targetMagnet === void 0 ? void 0 : targetMagnet.getAttribute('port');
                var port = node.getPort(portId);
                return !(port && port.connected);
            },
        }, highlighting: {
            nodeAvailable: {
                name: 'className',
                args: {
                    className: 'available',
                },
            },
            magnetAvailable: {
                name: 'className',
                args: {
                    className: 'available',
                },
            },
            magnetAdsorbed: {
                name: 'className',
                args: {
                    className: 'adsorbed',
                },
            },
        }, onPortRendered: function (args) {
            var port = args.port;
            var contentSelectors = args.contentSelectors;
            var container = contentSelectors && contentSelectors.content;
            var placement = port.group;
            var clz = classnames('xflow-port', { connected: port.connected });
            if (container) {
                ReactDOM.render((React.createElement(ConfigProvider, { prefixCls: ANT_PREFIX },
                    React.createElement(Tooltip, { title: port.tooltip, placement: placement },
                        React.createElement("span", { className: clz })))), container);
            }
        } }, canvasProps.config));
    config.setEvents([
        {
            eventName: 'node:click',
            callback: function (e, cmds, ctx) {
                var _a, _b;
                var nodeData = (_a = e === null || e === void 0 ? void 0 : e.node) === null || _a === void 0 ? void 0 : _a.getData();
                (_b = props.handleNodeClick) === null || _b === void 0 ? void 0 : _b.call(props, nodeData);
            },
        },
        {
            eventName: 'node:selected',
            callback: function (e, cmds, ctx) {
                var _a, _b;
                var nodeData = (_a = e === null || e === void 0 ? void 0 : e.node) === null || _a === void 0 ? void 0 : _a.getData();
                changePortsVisible(false);
                (_b = props.handleNodeSelected) === null || _b === void 0 ? void 0 : _b.call(props, nodeData);
            },
        },
        {
            eventName: 'node:removed',
            callback: function (e, cmds, ctx) {
                var _a, _b;
                var nodeData = (_a = e === null || e === void 0 ? void 0 : e.node) === null || _a === void 0 ? void 0 : _a.getData();
                (_b = props.handleNodeRemoved) === null || _b === void 0 ? void 0 : _b.call(props, nodeData);
            },
        },
        {
            eventName: 'edge:dblclick',
            callback: function (e, cmds, ctx) {
                addTools(e, cmds, ctx);
            },
        },
        {
            eventName: 'edge:mouseleave',
            callback: function (e, cmds, ctx) {
                removeTools(e, cmds, ctx);
            },
        },
        {
            eventName: 'node:mouseenter',
            callback: function (e) {
                changePortsVisible(true, e);
            },
        },
        {
            eventName: 'node:mouseleave',
            callback: function (e, cmds, ctx) {
                changePortsVisible(false, e);
            },
        },
        {
            eventName: 'node:moved',
            callback: function (e, cmds, ctx) {
                movedNode(e, cmds, ctx);
            },
        },
        {
            eventName: 'node:resized',
            callback: function (e, cmds, ctx) {
                resizeNode(e, cmds, ctx);
            },
        },
    ]);
});
