"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolbarGroup = void 0;
var react_1 = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var x6_react_components_1 = require("@antv/x6-react-components");
var context_1 = __importDefault(require("../../../context"));
var xflow_core_1 = require("@antv/xflow-core");
var toolbar_item_1 = require("./toolbar-item");
var useFullscreen_1 = __importDefault(require("../../../hooks/useFullscreen"));
var util_1 = require("../../../util");
var ToolbarGroup = function (props) {
    var _a;
    var group = props.group, layout = props.layout;
    var flowchartId = (0, react_1.useContext)(context_1.default).flowchartId;
    var _b = (0, useFullscreen_1.default)((0, util_1.getContainer)(flowchartId)), fullscreen = _b[0], toggleFullscreen = _b[1];
    var groupKey = react_1.default.useMemo(function () {
        return group.name || (0, xflow_core_1.uuidv4)();
    }, [group.name]);
    var _c = group.items, items = _c === void 0 ? [] : _c;
    if (items.length === 0) {
        return null;
    }
    var clz = (0, classnames_1.default)((_a = {},
        _a['xflow-toolbar-group'] = true,
        _a));
    items = items.filter(function (item) { return item.id !== 'fullscreen'; });
    items.push({
        id: 'fullscreen',
        tooltip: fullscreen ? '退出全屏' : '全屏',
        iconName: fullscreen ? 'FullscreenExitOutlined' : 'FullscreenOutlined',
        onClick: function () {
            toggleFullscreen();
        },
    });
    return (react_1.default.createElement(x6_react_components_1.Toolbar.Group, { className: clz, key: groupKey }, items.map(function (item) { return (react_1.default.createElement(toolbar_item_1.ToolbarItem, { item: item, layout: layout, key: item.id })); })));
};
exports.ToolbarGroup = ToolbarGroup;
