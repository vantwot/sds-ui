"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextNode = void 0;
var react_1 = __importStar(require("react"));
var index_1 = require("../../index");
var constants_1 = require("../../constants");
var TextNode = function (props) {
    var _a = props.size, size = _a === void 0 ? { width: constants_1.NODE_WIDTH, height: constants_1.NODE_HEIGHT } : _a, _b = props.data, data = _b === void 0 ? {} : _b;
    var NodeConfig = (0, react_1.useContext)(index_1.AppContext).theme.NodeConfig;
    var stateNodeConfig = NodeConfig === null || NodeConfig === void 0 ? void 0 : NodeConfig.normal;
    var _c = data.label, label = _c === void 0 ? stateNodeConfig.label : _c, _d = data.fontFill, fontFill = _d === void 0 ? stateNodeConfig.fontFill : _d, _e = data.fontSize, fontSize = _e === void 0 ? stateNodeConfig.fontSize : _e;
    var width = size.width, height = size.height;
    // 用于放大文本，避免看不清
    var scale = 2;
    return (react_1.default.createElement("svg", { viewBox: "0 0 ".concat(width / scale, " ").concat(height / scale), xmlns: "http://www.w3.org/2000/svg", width: "100%", height: "100%" },
        react_1.default.createElement("text", { x: width / (2 * scale), y: height / (2 * scale), fill: fontFill, textAnchor: "middle", alignmentBaseline: "middle", fontSize: fontSize }, label),
        "Sorry, your browser does not support inline SVG."));
};
exports.TextNode = TextNode;
