{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _class2, _descriptor;\n\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../../types';\nimport { PassType } from '../IMultiPassRenderer';\nvar BaseNormalPass = (_dec = injectable(), _dec2 = inject(TYPES.IShaderModuleService), _dec(_class = (_class2 = function () {\n  function BaseNormalPass() {\n    _classCallCheck(this, BaseNormalPass);\n\n    _initializerDefineProperty(this, \"shaderModuleService\", _descriptor, this);\n\n    _defineProperty(this, \"rendererService\", void 0);\n\n    _defineProperty(this, \"cameraService\", void 0);\n\n    _defineProperty(this, \"mapService\", void 0);\n\n    _defineProperty(this, \"interactionService\", void 0);\n\n    _defineProperty(this, \"layerService\", void 0);\n\n    _defineProperty(this, \"config\", void 0);\n  }\n\n  _createClass(BaseNormalPass, [{\n    key: \"getName\",\n    value: function getName() {\n      return '';\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return PassType.Normal;\n    }\n  }, {\n    key: \"init\",\n    value: function init(layer, config) {\n      this.config = config;\n      this.rendererService = layer.getContainer().get(TYPES.IRendererService);\n      this.cameraService = layer.getContainer().get(TYPES.ICameraService);\n      this.mapService = layer.getContainer().get(TYPES.IMapService);\n      this.interactionService = layer.getContainer().get(TYPES.IInteractionService);\n      this.layerService = layer.getContainer().get(TYPES.ILayerService);\n    }\n  }, {\n    key: \"render\",\n    value: function render(layer) {}\n  }]);\n\n  return BaseNormalPass;\n}(), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"shaderModuleService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);\nexport { BaseNormalPass as default };","map":{"version":3,"sources":["../../../../src/services/renderer/passes/BaseNormalPass.ts"],"names":["injectable","BaseNormalPass","inject","TYPES","PassType","layer"],"mappings":";;;;;;;;;AAAA,SAAA,MAAA,EAAA,UAAA,QAAA,WAAA;AACA,OAAA,kBAAA;AACA,SAAA,KAAA,QAAA,gBAAA;AAMA,SAAA,QAAA,QAAA,uBAAA;IAOqBC,c,WADpBD,UAAU,E,UAGRE,MAAM,CAACC,KAAK,CAAN,oBAAA,C;;;;;;;;;;;;;;;;;;;;;WAWP,SAAA,OAAA,GAAiB;AACf,aAAA,EAAA;AACD;;;WAED,SAAA,OAAA,GAAiB;AACf,aAAOC,QAAQ,CAAf,MAAA;AACD;;;WAED,SAAA,IAAA,CAAA,KAAA,EAAA,MAAA,EAAoE;AAClE,WAAA,MAAA,GAAA,MAAA;AACA,WAAA,eAAA,GAAuBC,KAAK,CAALA,YAAAA,GAAAA,GAAAA,CAEEF,KAAK,CAF9B,gBAAuBE,CAAvB;AAGA,WAAA,aAAA,GAAqBA,KAAK,CAALA,YAAAA,GAAAA,GAAAA,CAEEF,KAAK,CAF5B,cAAqBE,CAArB;AAGA,WAAA,UAAA,GAAkBA,KAAK,CAALA,YAAAA,GAAAA,GAAAA,CAAsCF,KAAK,CAA7D,WAAkBE,CAAlB;AACA,WAAA,kBAAA,GAA0BA,KAAK,CAALA,YAAAA,GAAAA,GAAAA,CAEEF,KAAK,CAFjC,mBAA0BE,CAA1B;AAGA,WAAA,YAAA,GAAoBA,KAAK,CAALA,YAAAA,GAAAA,GAAAA,CAEEF,KAAK,CAF3B,aAAoBE,CAApB;AAGD;;;WAED,SAAA,MAAA,CAAA,KAAA,EAA6B,CAE5B;;;;;;;;;;SAxCkBJ,c","sourcesContent":["import { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../../types';\nimport { ICameraService } from '../../camera/ICameraService';\nimport { IInteractionService } from '../../interaction/IInteractionService';\nimport { ILayer, ILayerService } from '../../layer/ILayerService';\nimport { IMapService } from '../../map/IMapService';\nimport { IShaderModuleService } from '../../shader/IShaderModuleService';\nimport { IPass, PassType } from '../IMultiPassRenderer';\nimport { IRendererService } from '../IRendererService';\n\n/**\n * 常规 Pass 基类\n */\n@injectable()\nexport default class BaseNormalPass<InitializationOptions = {}>\n  implements IPass<InitializationOptions> {\n  @inject(TYPES.IShaderModuleService)\n  protected readonly shaderModuleService: IShaderModuleService;\n\n  protected rendererService: IRendererService;\n  protected cameraService: ICameraService;\n  protected mapService: IMapService;\n  protected interactionService: IInteractionService;\n  protected layerService: ILayerService;\n\n  protected config: Partial<InitializationOptions> | undefined;\n\n  public getName() {\n    return '';\n  }\n\n  public getType() {\n    return PassType.Normal;\n  }\n\n  public init(layer: ILayer, config?: Partial<InitializationOptions>) {\n    this.config = config;\n    this.rendererService = layer\n      .getContainer()\n      .get<IRendererService>(TYPES.IRendererService);\n    this.cameraService = layer\n      .getContainer()\n      .get<ICameraService>(TYPES.ICameraService);\n    this.mapService = layer.getContainer().get<IMapService>(TYPES.IMapService);\n    this.interactionService = layer\n      .getContainer()\n      .get<IInteractionService>(TYPES.IInteractionService);\n    this.layerService = layer\n      .getContainer()\n      .get<ILayerService>(TYPES.ILayerService);\n  }\n\n  public render(layer: ILayer) {\n    //\n  }\n}\n"]},"metadata":{},"sourceType":"module"}