{"ast":null,"code":"import _toConsumableArray from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { singleton, inject } from 'mana-syringe';\nimport { IModelContribution } from '../interface';\nimport { DisposableCollection, Disposable } from '../../common/disposable';\nimport { disposableSubscribe } from '../../common/event-helper';\nimport { IGraphProvider } from '../../xflow-main/graph/graph-provider';\nimport * as MODELS from '../constant';\n\nvar GraphModelContribution = /*#__PURE__*/function () {\n  function GraphModelContribution() {\n    var _this = this;\n\n    _classCallCheck(this, GraphModelContribution);\n\n    /** 获取画布实例 */\n    this.getGraphInstance = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var graphInstance, graphConfig;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.graphProvider.getGraphInstance();\n\n              case 2:\n                graphInstance = _context.sent;\n                _context.next = 5;\n                return this.graphProvider.getGraphOptions();\n\n              case 5:\n                graphConfig = _context.sent;\n                return _context.abrupt(\"return\", {\n                  graph: graphInstance,\n                  config: graphConfig\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    };\n  }\n\n  _createClass(GraphModelContribution, [{\n    key: \"registerModel\",\n    value: function registerModel(registry) {\n      var _this2 = this;\n\n      /** X6 GRAPH META */\n      registry.registerModel({\n        id: MODELS.GRAPH_META.id,\n        getInitialValue: function getInitialValue() {\n          return {\n            flowId: '-1'\n          };\n        },\n        watchChange: function watchChange(self) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n            return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    return _context2.abrupt(\"return\", Disposable.create(function () {\n                      self.setValue({\n                        flowId: '-1'\n                      });\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee2);\n          }));\n        }\n      });\n      /** Graph 多选状态 */\n\n      registry.registerModel({\n        id: MODELS.GRAPH_ENABLE_MULTI_SELECT.id,\n        getInitialValue: function getInitialValue() {\n          return {\n            isEnable: false\n          };\n        },\n        watchChange: function watchChange(self) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n            return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    return _context3.abrupt(\"return\", Disposable.create(function () {\n                      self.setValue({\n                        isEnable: false\n                      });\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee3);\n          }));\n        }\n      });\n      /** 选中Cells状态 */\n\n      registry.registerModel({\n        id: MODELS.SELECTED_CELLS.id,\n        getInitialValue: function getInitialValue() {\n          return [];\n        },\n        watchChange: function watchChange(self) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n            var _yield$this$getGraphI, graph, onChange;\n\n            return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return this.getGraphInstance();\n\n                  case 2:\n                    _yield$this$getGraphI = _context4.sent;\n                    graph = _yield$this$getGraphI.graph;\n\n                    onChange = function onChange(e) {\n                      var selected = e.selected;\n                      self.setValue(selected);\n                    };\n\n                    graph.on('selection:changed', onChange);\n                    return _context4.abrupt(\"return\", Disposable.create(function () {\n                      return graph.off('selection:changed', onChange);\n                    }));\n\n                  case 7:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4, this);\n          }));\n        }\n      });\n      /** 选中Cell状态 */\n\n      registry.registerModel({\n        id: MODELS.SELECTED_CELL.id,\n        watchChange: function watchChange(self, modelService) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n            var cellsModel;\n            return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.next = 2;\n                    return MODELS.SELECTED_CELLS.getModel(modelService);\n\n                  case 2:\n                    cellsModel = _context5.sent;\n                    return _context5.abrupt(\"return\", cellsModel.watch(function () {\n                      var cells = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n                      self.setValue(_toConsumableArray(cells).pop() || null);\n                    }));\n\n                  case 4:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee5);\n          }));\n        }\n      });\n      /** 选中节点列表状态 */\n\n      registry.registerModel({\n        id: MODELS.SELECTED_NODES.id,\n        getInitialValue: function getInitialValue() {\n          return [];\n        },\n        watchChange: function watchChange(self, modelService) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n            var model;\n            return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    _context6.next = 2;\n                    return MODELS.SELECTED_CELLS.getModel(modelService);\n\n                  case 2:\n                    model = _context6.sent;\n                    return _context6.abrupt(\"return\", model.watch(function () {\n                      var cells = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n                      var nodes = cells.filter(function (cell) {\n                        return cell.isNode();\n                      });\n                      self.setValue(nodes);\n                    }));\n\n                  case 4:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _callee6);\n          }));\n        }\n      });\n      /** 选中节点状态 */\n\n      registry.registerModel({\n        id: MODELS.SELECTED_NODE.id,\n        watchChange: function watchChange(self, modelService) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n            var model, disposable;\n            return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _context7.next = 2;\n                    return MODELS.SELECTED_NODES.getModel(modelService);\n\n                  case 2:\n                    model = _context7.sent;\n                    disposable = model.watch(function (nodes) {\n                      self.setValue(_toConsumableArray(nodes).pop() || null);\n                    });\n                    return _context7.abrupt(\"return\", disposable);\n\n                  case 5:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _callee7);\n          }));\n        }\n      });\n      /** 是否选中节点状态 */\n\n      registry.registerModel({\n        id: MODELS.IS_NODE_SELECTED.id,\n        watchChange: function watchChange(self, modelService) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n            var model, disposable;\n            return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n              while (1) {\n                switch (_context8.prev = _context8.next) {\n                  case 0:\n                    _context8.next = 2;\n                    return MODELS.SELECTED_NODES.getModel(modelService);\n\n                  case 2:\n                    model = _context8.sent;\n                    disposable = model.watch(function (nodes) {\n                      self.setValue(nodes.length > 0);\n                    });\n                    return _context8.abrupt(\"return\", disposable);\n\n                  case 5:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }\n            }, _callee8);\n          }));\n        }\n      });\n      /** 画布选中节点是否是Group */\n\n      registry.registerModel({\n        id: MODELS.IS_GROUP_SELECTED.id,\n        getInitialValue: function getInitialValue() {\n          return false;\n        },\n        watchChange: function watchChange(self, modelService) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n            var model, disposable;\n            return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    _context9.next = 2;\n                    return MODELS.SELECTED_CELLS.getModel(modelService);\n\n                  case 2:\n                    model = _context9.sent;\n                    disposable = model.watch(function (cells) {\n                      var isGroup = cells.every(function (cell) {\n                        return cell && cell.getProp('isGroup') === true;\n                      });\n                      self.setValue(isGroup);\n                    });\n                    return _context9.abrupt(\"return\", disposable);\n\n                  case 5:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            }, _callee9);\n          }));\n        }\n      });\n      /** 画布选中节点是否是Group */\n\n      registry.registerModel({\n        id: MODELS.SELECTED_GROUPS.id,\n        getInitialValue: function getInitialValue() {\n          return [];\n        },\n        watchChange: function watchChange(self, modelService) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n            var model, disposable;\n            return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n              while (1) {\n                switch (_context10.prev = _context10.next) {\n                  case 0:\n                    _context10.next = 2;\n                    return MODELS.SELECTED_NODES.getModel(modelService);\n\n                  case 2:\n                    model = _context10.sent;\n                    disposable = model.watch(function (cells) {\n                      var groups = cells.filter(function (cell) {\n                        return cell && cell.getProp('isGroup') === true;\n                      });\n                      self.setValue(groups);\n                    });\n                    return _context10.abrupt(\"return\", disposable);\n\n                  case 5:\n                  case \"end\":\n                    return _context10.stop();\n                }\n              }\n            }, _callee10);\n          }));\n        }\n      });\n      /** 画布选中节点是否是普通节点 */\n\n      registry.registerModel({\n        id: MODELS.IS_NORMAL_NODES_SELECTED.id,\n        getInitialValue: function getInitialValue() {\n          return false;\n        },\n        watchChange: function watchChange(self, modelService) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n            var model, disposable;\n            return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n              while (1) {\n                switch (_context11.prev = _context11.next) {\n                  case 0:\n                    _context11.next = 2;\n                    return MODELS.SELECTED_CELLS.getModel(modelService);\n\n                  case 2:\n                    model = _context11.sent;\n                    disposable = model.watch(function (cells) {\n                      var isNormalNodesSelected = cells.every(function (cell) {\n                        var isNotGroup = !(cell && cell.getProp('isGroup'));\n                        var isNotGroupChild = !(cell && cell.getProp('group'));\n                        return isNotGroup && isNotGroupChild;\n                      });\n                      var isNodeSelected = cells.length > 0 && isNormalNodesSelected;\n                      self.setValue(isNodeSelected);\n                    });\n                    return _context11.abrupt(\"return\", disposable);\n\n                  case 5:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }\n            }, _callee11);\n          }));\n        }\n      });\n      /** 画布缩放状态 */\n\n      registry.registerModel({\n        id: MODELS.GRAPH_SCALE.id,\n        getInitialValue: function getInitialValue() {\n          return {\n            zoomFactor: -1\n          };\n        },\n        watchChange: function watchChange(self) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n            var _yield$this$getGraphI2, graph, onChange;\n\n            return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n              while (1) {\n                switch (_context12.prev = _context12.next) {\n                  case 0:\n                    _context12.next = 2;\n                    return this.getGraphInstance();\n\n                  case 2:\n                    _yield$this$getGraphI2 = _context12.sent;\n                    graph = _yield$this$getGraphI2.graph;\n\n                    onChange = function onChange(e) {\n                      var factor = graph.zoom();\n                      self.setValue(Object.assign(Object.assign({}, e), {\n                        zoomFactor: factor\n                      }));\n                    };\n\n                    graph.on('scale', onChange);\n                    return _context12.abrupt(\"return\", Disposable.create(function () {\n                      return graph.off('scale', onChange);\n                    }));\n\n                  case 7:\n                  case \"end\":\n                    return _context12.stop();\n                }\n              }\n            }, _callee12, this);\n          }));\n        }\n      });\n      /** 画布右键菜单状态 */\n\n      registry.registerModel({\n        id: MODELS.CONTEXTMENU_TARGET.id,\n        watchChange: function watchChange(self) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n            var _yield$this$getGraphI3, graph, config, onContextMenu, toDispose;\n\n            return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n              while (1) {\n                switch (_context13.prev = _context13.next) {\n                  case 0:\n                    _context13.next = 2;\n                    return this.getGraphInstance();\n\n                  case 2:\n                    _yield$this$getGraphI3 = _context13.sent;\n                    graph = _yield$this$getGraphI3.graph;\n                    config = _yield$this$getGraphI3.config;\n\n                    onContextMenu = function onContextMenu(type) {\n                      return function (e) {\n                        var x = e.x,\n                            y = e.y;\n                        var pagePoint = graph.localToClient({\n                          x: x,\n                          y: y\n                        });\n                        var clientRect = config.rootContainer.getBoundingClientRect();\n                        var anchor = {\n                          x: pagePoint.x - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.x) || 0),\n                          y: pagePoint.y - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.y) || 0)\n                        };\n                        self.setValue({\n                          type: type,\n                          anchor: anchor,\n                          data: e,\n                          cell: e.cell\n                        });\n                      };\n                    };\n\n                    toDispose = new DisposableCollection();\n                    toDispose.pushAll([disposableSubscribe(graph, 'node:contextmenu', onContextMenu('node')), disposableSubscribe(graph, 'edge:contextmenu', onContextMenu('edge')), disposableSubscribe(graph, 'blank:contextmenu', onContextMenu('blank'))]);\n                    return _context13.abrupt(\"return\", toDispose);\n\n                  case 9:\n                  case \"end\":\n                    return _context13.stop();\n                }\n              }\n            }, _callee13, this);\n          }));\n        }\n      });\n      /** 画布历史Redo */\n\n      registry.registerModel({\n        id: MODELS.HISTORY_REDOABLE.id,\n        getInitialValue: function getInitialValue() {\n          return false;\n        },\n        watchChange: function watchChange(self) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n            var _yield$this$getGraphI4, graph, onChange;\n\n            return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n              while (1) {\n                switch (_context14.prev = _context14.next) {\n                  case 0:\n                    _context14.next = 2;\n                    return this.getGraphInstance();\n\n                  case 2:\n                    _yield$this$getGraphI4 = _context14.sent;\n                    graph = _yield$this$getGraphI4.graph;\n\n                    onChange = function onChange() {\n                      var canRedo = graph.history.canRedo();\n                      self.setValue(canRedo);\n                    };\n\n                    if (graph.history) {\n                      graph.history.on('change', onChange);\n                    }\n\n                    return _context14.abrupt(\"return\", Disposable.create(function () {\n                      return graph.history.off('change', onChange);\n                    }));\n\n                  case 7:\n                  case \"end\":\n                    return _context14.stop();\n                }\n              }\n            }, _callee14, this);\n          }));\n        }\n      });\n      /** 画布历史undo */\n\n      registry.registerModel({\n        id: MODELS.HISTORY_UNDOABLE.id,\n        getInitialValue: function getInitialValue() {\n          return false;\n        },\n        watchChange: function watchChange(self) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n            var _yield$this$getGraphI5, graph, onChange;\n\n            return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n              while (1) {\n                switch (_context15.prev = _context15.next) {\n                  case 0:\n                    _context15.next = 2;\n                    return this.getGraphInstance();\n\n                  case 2:\n                    _yield$this$getGraphI5 = _context15.sent;\n                    graph = _yield$this$getGraphI5.graph;\n\n                    onChange = function onChange() {\n                      var canUndo = graph.history.canUndo();\n                      self.setValue(canUndo);\n                    };\n\n                    if (graph.history) {\n                      graph.history.on('change', onChange);\n                    }\n\n                    return _context15.abrupt(\"return\", Disposable.create(function () {\n                      return graph.history.off('change', onChange);\n                    }));\n\n                  case 7:\n                  case \"end\":\n                    return _context15.stop();\n                }\n              }\n            }, _callee15, this);\n          }));\n        }\n      });\n    }\n  }]);\n\n  return GraphModelContribution;\n}();\n\n__decorate([inject(IGraphProvider), __metadata(\"design:type\", Object)], GraphModelContribution.prototype, \"graphProvider\", void 0);\n\nGraphModelContribution = __decorate([singleton({\n  contrib: IModelContribution\n})], GraphModelContribution);\nexport { GraphModelContribution };","map":{"version":3,"sources":["../../../src/model-service/contributions/graph-model.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { singleton, inject } from 'mana-syringe';\nimport { IModelContribution } from '../interface';\nimport { DisposableCollection, Disposable } from '../../common/disposable';\nimport { disposableSubscribe } from '../../common/event-helper';\nimport { IGraphProvider } from '../../xflow-main/graph/graph-provider';\nimport * as MODELS from '../constant';\nlet GraphModelContribution = class GraphModelContribution {\n    constructor() {\n        /** 获取画布实例 */\n        this.getGraphInstance = () => __awaiter(this, void 0, void 0, function* () {\n            const graphInstance = yield this.graphProvider.getGraphInstance();\n            const graphConfig = yield this.graphProvider.getGraphOptions();\n            return { graph: graphInstance, config: graphConfig };\n        });\n    }\n    registerModel(registry) {\n        /** X6 GRAPH META */\n        registry.registerModel({\n            id: MODELS.GRAPH_META.id,\n            getInitialValue: () => ({\n                flowId: '-1',\n            }),\n            watchChange: (self) => __awaiter(this, void 0, void 0, function* () {\n                return Disposable.create(() => {\n                    self.setValue({ flowId: '-1' });\n                });\n            }),\n        });\n        /** Graph 多选状态 */\n        registry.registerModel({\n            id: MODELS.GRAPH_ENABLE_MULTI_SELECT.id,\n            getInitialValue: () => ({\n                isEnable: false,\n            }),\n            watchChange: (self) => __awaiter(this, void 0, void 0, function* () {\n                return Disposable.create(() => {\n                    self.setValue({ isEnable: false });\n                });\n            }),\n        });\n        /** 选中Cells状态 */\n        registry.registerModel({\n            id: MODELS.SELECTED_CELLS.id,\n            getInitialValue: () => [],\n            watchChange: (self) => __awaiter(this, void 0, void 0, function* () {\n                const { graph } = yield this.getGraphInstance();\n                const onChange = (e) => {\n                    const { selected } = e;\n                    self.setValue(selected);\n                };\n                graph.on('selection:changed', onChange);\n                return Disposable.create(() => graph.off('selection:changed', onChange));\n            }),\n        });\n        /** 选中Cell状态 */\n        registry.registerModel({\n            id: MODELS.SELECTED_CELL.id,\n            watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n                const cellsModel = yield MODELS.SELECTED_CELLS.getModel(modelService);\n                return cellsModel.watch((cells = []) => {\n                    self.setValue([...cells].pop() || null);\n                });\n            }),\n        });\n        /** 选中节点列表状态 */\n        registry.registerModel({\n            id: MODELS.SELECTED_NODES.id,\n            getInitialValue: () => [],\n            watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n                const model = yield MODELS.SELECTED_CELLS.getModel(modelService);\n                return model.watch((cells = []) => {\n                    const nodes = cells.filter(cell => cell.isNode());\n                    self.setValue(nodes);\n                });\n            }),\n        });\n        /** 选中节点状态 */\n        registry.registerModel({\n            id: MODELS.SELECTED_NODE.id,\n            watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n                const model = yield MODELS.SELECTED_NODES.getModel(modelService);\n                const disposable = model.watch(nodes => {\n                    self.setValue([...nodes].pop() || null);\n                });\n                return disposable;\n            }),\n        });\n        /** 是否选中节点状态 */\n        registry.registerModel({\n            id: MODELS.IS_NODE_SELECTED.id,\n            watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n                const model = yield MODELS.SELECTED_NODES.getModel(modelService);\n                const disposable = model.watch(nodes => {\n                    self.setValue(nodes.length > 0);\n                });\n                return disposable;\n            }),\n        });\n        /** 画布选中节点是否是Group */\n        registry.registerModel({\n            id: MODELS.IS_GROUP_SELECTED.id,\n            getInitialValue: () => false,\n            watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n                const model = yield MODELS.SELECTED_CELLS.getModel(modelService);\n                const disposable = model.watch(cells => {\n                    const isGroup = cells.every(cell => {\n                        return cell && cell.getProp('isGroup') === true;\n                    });\n                    self.setValue(isGroup);\n                });\n                return disposable;\n            }),\n        });\n        /** 画布选中节点是否是Group */\n        registry.registerModel({\n            id: MODELS.SELECTED_GROUPS.id,\n            getInitialValue: () => [],\n            watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n                const model = yield MODELS.SELECTED_NODES.getModel(modelService);\n                const disposable = model.watch(cells => {\n                    const groups = cells.filter(cell => {\n                        return cell && cell.getProp('isGroup') === true;\n                    });\n                    self.setValue(groups);\n                });\n                return disposable;\n            }),\n        });\n        /** 画布选中节点是否是普通节点 */\n        registry.registerModel({\n            id: MODELS.IS_NORMAL_NODES_SELECTED.id,\n            getInitialValue: () => false,\n            watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n                const model = yield MODELS.SELECTED_CELLS.getModel(modelService);\n                const disposable = model.watch(cells => {\n                    const isNormalNodesSelected = cells.every(cell => {\n                        const isNotGroup = !(cell && cell.getProp('isGroup'));\n                        const isNotGroupChild = !(cell && cell.getProp('group'));\n                        return isNotGroup && isNotGroupChild;\n                    });\n                    const isNodeSelected = cells.length > 0 && isNormalNodesSelected;\n                    self.setValue(isNodeSelected);\n                });\n                return disposable;\n            }),\n        });\n        /** 画布缩放状态 */\n        registry.registerModel({\n            id: MODELS.GRAPH_SCALE.id,\n            getInitialValue: () => ({ zoomFactor: -1 }),\n            watchChange: (self) => __awaiter(this, void 0, void 0, function* () {\n                const { graph } = yield this.getGraphInstance();\n                const onChange = (e) => {\n                    const factor = graph.zoom();\n                    self.setValue(Object.assign(Object.assign({}, e), { zoomFactor: factor }));\n                };\n                graph.on('scale', onChange);\n                return Disposable.create(() => graph.off('scale', onChange));\n            }),\n        });\n        /** 画布右键菜单状态 */\n        registry.registerModel({\n            id: MODELS.CONTEXTMENU_TARGET.id,\n            watchChange: (self) => __awaiter(this, void 0, void 0, function* () {\n                const { graph, config } = yield this.getGraphInstance();\n                const onContextMenu = (type) => (e) => {\n                    const { x, y } = e;\n                    const pagePoint = graph.localToClient({ x, y });\n                    const clientRect = config.rootContainer.getBoundingClientRect();\n                    const anchor = {\n                        x: pagePoint.x - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.x) || 0),\n                        y: pagePoint.y - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.y) || 0),\n                    };\n                    self.setValue({\n                        type,\n                        anchor,\n                        data: e,\n                        cell: e.cell,\n                    });\n                };\n                const toDispose = new DisposableCollection();\n                toDispose.pushAll([\n                    disposableSubscribe(graph, 'node:contextmenu', onContextMenu('node')),\n                    disposableSubscribe(graph, 'edge:contextmenu', onContextMenu('edge')),\n                    disposableSubscribe(graph, 'blank:contextmenu', onContextMenu('blank')),\n                ]);\n                return toDispose;\n            }),\n        });\n        /** 画布历史Redo */\n        registry.registerModel({\n            id: MODELS.HISTORY_REDOABLE.id,\n            getInitialValue: () => false,\n            watchChange: (self) => __awaiter(this, void 0, void 0, function* () {\n                const { graph } = yield this.getGraphInstance();\n                const onChange = () => {\n                    const canRedo = graph.history.canRedo();\n                    self.setValue(canRedo);\n                };\n                if (graph.history) {\n                    graph.history.on('change', onChange);\n                }\n                return Disposable.create(() => graph.history.off('change', onChange));\n            }),\n        });\n        /** 画布历史undo */\n        registry.registerModel({\n            id: MODELS.HISTORY_UNDOABLE.id,\n            getInitialValue: () => false,\n            watchChange: (self) => __awaiter(this, void 0, void 0, function* () {\n                const { graph } = yield this.getGraphInstance();\n                const onChange = () => {\n                    const canUndo = graph.history.canUndo();\n                    self.setValue(canUndo);\n                };\n                if (graph.history) {\n                    graph.history.on('change', onChange);\n                }\n                return Disposable.create(() => graph.history.off('change', onChange));\n            }),\n        });\n    }\n};\n__decorate([\n    inject(IGraphProvider),\n    __metadata(\"design:type\", Object)\n], GraphModelContribution.prototype, \"graphProvider\", void 0);\nGraphModelContribution = __decorate([\n    singleton({ contrib: IModelContribution })\n], GraphModelContribution);\nexport { GraphModelContribution };\n//# sourceMappingURL=graph-model.js.map"]},"metadata":{},"sourceType":"module"}