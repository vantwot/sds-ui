{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar GraphPasteSelectionCommand_1;\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGraphCommands, XFlowEdgeCommands, XFlowGroupCommands, XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { LOCAL_STORAGE_KEY } from '../../constants';\nimport { safeJson } from '../../common/safe-json';\nimport { GraphMappingHelper } from '../mapping-service';\nexport var NsGraphPasteSelection;\n\n(function (NsGraphPasteSelection) {\n  /** Command: 用于注册named factory */\n  NsGraphPasteSelection.command = XFlowGraphCommands.GRAPH_PASTE;\n  /** hookName */\n\n  NsGraphPasteSelection.hookKey = 'graphPasteSelection';\n})(NsGraphPasteSelection || (NsGraphPasteSelection = {}));\n\nfunction randomNumber(max) {\n  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nlet GraphPasteSelectionCommand = GraphPasteSelectionCommand_1 =\n/** 创建节点命令 */\nclass GraphPasteSelectionCommand {\n  constructor() {\n    this.updateNodeCopiedProps = (position, nodeConfig) => {\n      let dx = randomNumber(100);\n      let dy = randomNumber(100);\n\n      if (position) {\n        dx = nodeConfig.x - position.x + randomNumber(30);\n        dy = nodeConfig.y - position.y + randomNumber(30);\n      } // 修改坐标\n\n\n      nodeConfig.x += dx;\n      nodeConfig.y += dy; // 删除 id\n\n      nodeConfig.originId = nodeConfig.id;\n      delete nodeConfig.id; // 修改label\n\n      nodeConfig.label = `${nodeConfig.label}_copied`;\n      nodeConfig.isCollapsed = false;\n      return nodeConfig;\n    };\n    /** 执行Cmd */\n\n\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n\n      if (GraphPasteSelectionCommand_1.doing) {\n        return this;\n      }\n\n      GraphPasteSelectionCommand_1.doing = true;\n      const result = yield hooks.graphPasteSelection.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          commandService,\n          position\n        } = handlerArgs;\n        const jsonString = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n        const plainObject = safeJson(jsonString, {\n          nodes: [],\n          edges: []\n        });\n        const {\n          nodes = [],\n          edges = []\n        } = plainObject;\n        const {\n          normalNodes,\n          groupNodes\n        } = this.mappingHelper.getNodesByType(nodes);\n        this.mappingHelper.addNodes(nodes); // 添加普通节点\n\n        yield Promise.all(normalNodes.map(nodeConfig => __awaiter(this, void 0, void 0, function* () {\n          const res = yield commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n            nodeConfig: this.updateNodeCopiedProps(position, nodeConfig)\n          });\n          const context = res.contextProvider();\n          const cmdResult = context.getResult();\n          this.mappingHelper.buildNodeMapping(nodeConfig, cmdResult.nodeConfig);\n        }))); // 处理group\n\n        yield Promise.all(groupNodes.map(group => __awaiter(this, void 0, void 0, function* () {\n          const groupNodeConfig = this.mappingHelper.buildGroupRelations(group);\n          yield commandService.executeCommand(XFlowGroupCommands.ADD_GROUP.id, {\n            nodeConfig: this.updateNodeCopiedProps(position, groupNodeConfig)\n          });\n        }))); // 处理连线\n\n        yield Promise.all(edges.map(edgeConfig => {\n          const newEdge = this.mappingHelper.createEdgeBetweenNodes(edgeConfig);\n          return commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n            edgeConfig: newEdge\n          });\n        }));\n        ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n          window.localStorage.setItem(LOCAL_STORAGE_KEY, null);\n        })));\n        return {\n          err: null\n        };\n      }), runtimeHook);\n      ctx.setResult(result);\n      GraphPasteSelectionCommand_1.doing = false;\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n\n};\n/** 防止多次执行 */\n\nGraphPasteSelectionCommand.doing = false;\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], GraphPasteSelectionCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([inject(GraphMappingHelper), __metadata(\"design:type\", GraphMappingHelper)], GraphPasteSelectionCommand.prototype, \"mappingHelper\", void 0);\n\nGraphPasteSelectionCommand = GraphPasteSelectionCommand_1 = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphPasteSelection.command.id\n  }\n})\n/** 创建节点命令 */\n], GraphPasteSelectionCommand);\nexport { GraphPasteSelectionCommand };","map":{"version":3,"sources":["../../../src/command-contributions/graph/graph-paste.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,SAAS,MAAT,EAAiB,UAAjB,QAAmC,cAAnC;AACA,SAAS,eAAT,EAA0B,uBAA1B,QAAyD,yBAAzD;AACA,SACE,kBADF,EAEE,iBAFF,EAGE,kBAHF,EAIE,iBAJF,QAKO,aALP;AAMA,SAAS,UAAT,QAA2B,yBAA3B;AACA,SAAS,iBAAT,QAAkC,iBAAlC;AACA,SAAS,QAAT,QAAyB,wBAAzB;AACA,SAAS,kBAAT,QAAmC,oBAAnC;AAQA,OAAM,IAAW,qBAAX;;AAAN,CAAA,UAAiB,qBAAjB,EAAsC;AACpC;AACa,EAAA,qBAAA,CAAA,OAAA,GAAU,kBAAkB,CAAC,WAA7B;AACb;;AACa,EAAA,qBAAA,CAAA,OAAA,GAAU,qBAAV;AAoBd,CAxBD,EAAiB,qBAAqB,KAArB,qBAAqB,GAAA,EAAA,CAAtC;;AA0BA,SAAS,YAAT,CAAsB,GAAtB,EAAkC;AAAA,MAAP,GAAO,uEAAD,CAAC;AAChC,SAAO,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,MAAiB,GAAG,GAAG,GAAvB,IAA8B,GAAzC,CAAP;AACD;;AAMD,IAAa,0BAA0B,GAAA,4BAAA;AADvC;AACA,MAAa,0BAAb,CAAuC;AAAvC,EAAA,WAAA,GAAA;AAUE,SAAA,qBAAA,GAAwB,CAAC,QAAD,EAAqC,UAArC,KAAwE;AAC9F,UAAI,EAAE,GAAG,YAAY,CAAC,GAAD,CAArB;AACA,UAAI,EAAE,GAAG,YAAY,CAAC,GAAD,CAArB;;AACA,UAAI,QAAJ,EAAc;AACZ,QAAA,EAAE,GAAG,UAAU,CAAC,CAAX,GAAe,QAAQ,CAAC,CAAxB,GAA4B,YAAY,CAAC,EAAD,CAA7C;AACA,QAAA,EAAE,GAAG,UAAU,CAAC,CAAX,GAAe,QAAQ,CAAC,CAAxB,GAA4B,YAAY,CAAC,EAAD,CAA7C;AACD,OAN6F,CAO9F;;;AACA,MAAA,UAAU,CAAC,CAAX,IAAgB,EAAhB;AACA,MAAA,UAAU,CAAC,CAAX,IAAgB,EAAhB,CAT8F,CAU9F;;AACA,MAAA,UAAU,CAAC,QAAX,GAAsB,UAAU,CAAC,EAAjC;AACA,aAAO,UAAU,CAAC,EAAlB,CAZ8F,CAa9F;;AACA,MAAA,UAAU,CAAC,KAAX,GAAmB,GAAG,UAAU,CAAC,KAAK,SAAtC;AACA,MAAA,UAAU,CAAC,WAAX,GAAyB,KAAzB;AACA,aAAO,UAAP;AACD,KAjBD;AAmBA;;;AACA,SAAA,OAAA,GAAU,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACnB,YAAM,GAAG,GAAG,KAAK,eAAL,EAAZ;AACA,YAAM;AAAE,QAAA,IAAF;AAAQ,QAAA,KAAK,EAAE;AAAf,UAA+B,GAAG,CAAC,OAAJ,EAArC;AACA,YAAM,KAAK,GAAG,GAAG,CAAC,QAAJ,EAAd;;AACA,UAAI,4BAA0B,CAAC,KAA/B,EAAsC;AACpC,eAAO,IAAP;AACD;;AACD,MAAA,4BAA0B,CAAC,KAA3B,GAAmC,IAAnC;AAEA,YAAM,MAAM,GAAG,MAAM,KAAK,CAAC,mBAAN,CAA0B,IAA1B,CACnB,IADmB,EAEb,WAAN,IAAoB,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAClB,cAAM;AAAE,UAAA,cAAF;AAAkB,UAAA;AAAlB,YAA+B,WAArC;AACA,cAAM,UAAU,GAAG,MAAM,CAAC,YAAP,CAAoB,OAApB,CAA4B,iBAA5B,CAAnB;AACA,cAAM,WAAW,GAAG,QAAQ,CAAqB,UAArB,EAAiC;AAC3D,UAAA,KAAK,EAAE,EADoD;AAE3D,UAAA,KAAK,EAAE;AAFoD,SAAjC,CAA5B;AAKA,cAAM;AAAE,UAAA,KAAK,GAAG,EAAV;AAAc,UAAA,KAAK,GAAG;AAAtB,YAA6B,WAAnC;AACA,cAAM;AAAE,UAAA,WAAF;AAAe,UAAA;AAAf,YAA8B,KAAK,aAAL,CAAmB,cAAnB,CAAkC,KAAlC,CAApC;AACA,aAAK,aAAL,CAAmB,QAAnB,CAA4B,KAA5B,EAVkB,CAYlB;;AACA,cAAM,OAAO,CAAC,GAAR,CACJ,WAAW,CAAC,GAAZ,CAAsB,UAAN,IAAmB,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACjC,gBAAM,GAAG,GAAG,MAAM,cAAc,CAAC,cAAf,CAGhB,iBAAiB,CAAC,QAAlB,CAA2B,EAHX,EAGe;AAC/B,YAAA,UAAU,EAAE,KAAK,qBAAL,CAA2B,QAA3B,EAAqC,UAArC;AADmB,WAHf,CAAlB;AAMA,gBAAM,OAAO,GAAG,GAAG,CAAC,eAAJ,EAAhB;AACA,gBAAM,SAAS,GAAG,OAAO,CAAC,SAAR,EAAlB;AACA,eAAK,aAAL,CAAmB,gBAAnB,CAAoC,UAApC,EAAgD,SAAS,CAAC,UAA1D;AACD,SAVkC,CAAnC,CADI,CAAN,CAbkB,CA2BlB;;AACA,cAAM,OAAO,CAAC,GAAR,CACJ,UAAU,CAAC,GAAX,CAAqB,KAAN,IAAc,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC3B,gBAAM,eAAe,GAAG,KAAK,aAAL,CAAmB,mBAAnB,CAAuC,KAAvC,CAAxB;AACA,gBAAM,cAAc,CAAC,cAAf,CAGJ,kBAAkB,CAAC,SAAnB,CAA6B,EAHzB,EAG6B;AACjC,YAAA,UAAU,EAAE,KAAK,qBAAL,CACV,QADU,EAEV,eAFU;AADqB,WAH7B,CAAN;AASD,SAX4B,CAA7B,CADI,CAAN,CA5BkB,CA2ClB;;AACA,cAAM,OAAO,CAAC,GAAR,CACJ,KAAK,CAAC,GAAN,CAAU,UAAU,IAAG;AACrB,gBAAM,OAAO,GAAG,KAAK,aAAL,CAAmB,sBAAnB,CAA0C,UAA1C,CAAhB;AACA,iBAAO,cAAc,CAAC,cAAf,CAGL,iBAAiB,CAAC,QAAlB,CAA2B,EAHtB,EAG0B;AAC/B,YAAA,UAAU,EAAE;AADmB,WAH1B,CAAP;AAMD,SARD,CADI,CAAN;AAYA,QAAA,GAAG,CAAC,OAAJ,CACE,UAAU,CAAC,MAAX,CAAkB,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC3B,UAAA,MAAM,CAAC,YAAP,CAAoB,OAApB,CAA4B,iBAA5B,EAA+C,IAA/C;AACD,SAF4B,CAA7B,CADF;AAKA,eAAO;AAAE,UAAA,GAAG,EAAE;AAAP,SAAP;AACD,OA9DmB,CAFD,EAiEnB,WAjEmB,CAArB;AAoEA,MAAA,GAAG,CAAC,SAAJ,CAAc,MAAd;AACA,MAAA,4BAA0B,CAAC,KAA3B,GAAmC,KAAnC;AACA,aAAO,IAAP;AACD,KAhFoB,CAArB;AAkFA;;;AACA,SAAA,IAAA,GAAO,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAChB,YAAM,GAAG,GAAG,KAAK,eAAL,EAAZ;;AACA,UAAI,KAAK,UAAL,EAAJ,EAAuB;AACrB,QAAA,GAAG,CAAC,IAAJ;AACD;;AACD,aAAO,IAAP;AACD,KANiB,CAAlB;AAQA;;;AACA,SAAA,IAAA,GAAO,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAChB,UAAI,CAAC,KAAK,UAAL,EAAL,EAAwB;AACtB,cAAM,KAAK,OAAL,EAAN;AACD;;AACD,aAAO,IAAP;AACD,KALiB,CAAlB;AAWD;;AAJC,EAAA,UAAU,GAAA;AACR,UAAM,GAAG,GAAG,KAAK,eAAL,EAAZ;AACA,WAAO,GAAG,CAAC,UAAJ,EAAP;AACD;;AApIoC,CAAvC;AACE;;AACO,0BAAA,CAAA,KAAA,GAAQ,KAAR;;AAG0B,UAAA,CAAA,CAAhC,MAAM,CAAC,uBAAD,CAA0B,E,iCAAA,CAAA,E,oCAAA,E,iBAAA,E,KAA4C,CAA5C,CAAA;;AAGL,UAAA,CAAA,CAA3B,MAAM,CAAC,kBAAD,CAAqB,E,0BAAe,kB,CAAf,CAAA,E,oCAAA,E,eAAA,E,KAAiC,CAAjC,CAAA;;AARjB,0BAA0B,GAAA,4BAAA,GAAA,UAAA,CAAA,CAJtC,UAAU,CAAC;AACV,EAAA,KAAK,EAAE;AAAE,IAAA,KAAK,EAAE,eAAT;AAA0B,IAAA,KAAK,EAAE,qBAAqB,CAAC,OAAtB,CAA8B;AAA/D;AADG,CAAD;AAGX;AACuC,CAAA,EAA1B,0BAA0B,CAA1B;SAAA,0B","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar GraphPasteSelectionCommand_1;\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGraphCommands, XFlowEdgeCommands, XFlowGroupCommands, XFlowNodeCommands, } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { LOCAL_STORAGE_KEY } from '../../constants';\nimport { safeJson } from '../../common/safe-json';\nimport { GraphMappingHelper } from '../mapping-service';\nexport var NsGraphPasteSelection;\n(function (NsGraphPasteSelection) {\n    /** Command: 用于注册named factory */\n    NsGraphPasteSelection.command = XFlowGraphCommands.GRAPH_PASTE;\n    /** hookName */\n    NsGraphPasteSelection.hookKey = 'graphPasteSelection';\n})(NsGraphPasteSelection || (NsGraphPasteSelection = {}));\nfunction randomNumber(max, min = 0) {\n    return Math.floor(Math.random() * (max - min) + min);\n}\nlet GraphPasteSelectionCommand = GraphPasteSelectionCommand_1 = \n/** 创建节点命令 */\nclass GraphPasteSelectionCommand {\n    constructor() {\n        this.updateNodeCopiedProps = (position, nodeConfig) => {\n            let dx = randomNumber(100);\n            let dy = randomNumber(100);\n            if (position) {\n                dx = nodeConfig.x - position.x + randomNumber(30);\n                dy = nodeConfig.y - position.y + randomNumber(30);\n            }\n            // 修改坐标\n            nodeConfig.x += dx;\n            nodeConfig.y += dy;\n            // 删除 id\n            nodeConfig.originId = nodeConfig.id;\n            delete nodeConfig.id;\n            // 修改label\n            nodeConfig.label = `${nodeConfig.label}_copied`;\n            nodeConfig.isCollapsed = false;\n            return nodeConfig;\n        };\n        /** 执行Cmd */\n        this.execute = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            const { args, hooks: runtimeHook } = ctx.getArgs();\n            const hooks = ctx.getHooks();\n            if (GraphPasteSelectionCommand_1.doing) {\n                return this;\n            }\n            GraphPasteSelectionCommand_1.doing = true;\n            const result = yield hooks.graphPasteSelection.call(args, (handlerArgs) => __awaiter(this, void 0, void 0, function* () {\n                const { commandService, position } = handlerArgs;\n                const jsonString = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n                const plainObject = safeJson(jsonString, {\n                    nodes: [],\n                    edges: [],\n                });\n                const { nodes = [], edges = [] } = plainObject;\n                const { normalNodes, groupNodes } = this.mappingHelper.getNodesByType(nodes);\n                this.mappingHelper.addNodes(nodes);\n                // 添加普通节点\n                yield Promise.all(normalNodes.map((nodeConfig) => __awaiter(this, void 0, void 0, function* () {\n                    const res = yield commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n                        nodeConfig: this.updateNodeCopiedProps(position, nodeConfig),\n                    });\n                    const context = res.contextProvider();\n                    const cmdResult = context.getResult();\n                    this.mappingHelper.buildNodeMapping(nodeConfig, cmdResult.nodeConfig);\n                })));\n                // 处理group\n                yield Promise.all(groupNodes.map((group) => __awaiter(this, void 0, void 0, function* () {\n                    const groupNodeConfig = this.mappingHelper.buildGroupRelations(group);\n                    yield commandService.executeCommand(XFlowGroupCommands.ADD_GROUP.id, {\n                        nodeConfig: this.updateNodeCopiedProps(position, groupNodeConfig),\n                    });\n                })));\n                // 处理连线\n                yield Promise.all(edges.map(edgeConfig => {\n                    const newEdge = this.mappingHelper.createEdgeBetweenNodes(edgeConfig);\n                    return commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n                        edgeConfig: newEdge,\n                    });\n                }));\n                ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n                    window.localStorage.setItem(LOCAL_STORAGE_KEY, null);\n                })));\n                return { err: null };\n            }), runtimeHook);\n            ctx.setResult(result);\n            GraphPasteSelectionCommand_1.doing = false;\n            return this;\n        });\n        /** undo cmd */\n        this.undo = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            if (this.isUndoable()) {\n                ctx.undo();\n            }\n            return this;\n        });\n        /** redo cmd */\n        this.redo = () => __awaiter(this, void 0, void 0, function* () {\n            if (!this.isUndoable()) {\n                yield this.execute();\n            }\n            return this;\n        });\n    }\n    isUndoable() {\n        const ctx = this.contextProvider();\n        return ctx.isUndoable();\n    }\n};\n/** 防止多次执行 */\nGraphPasteSelectionCommand.doing = false;\n__decorate([\n    inject(ICommandContextProvider),\n    __metadata(\"design:type\", Object)\n], GraphPasteSelectionCommand.prototype, \"contextProvider\", void 0);\n__decorate([\n    inject(GraphMappingHelper),\n    __metadata(\"design:type\", GraphMappingHelper)\n], GraphPasteSelectionCommand.prototype, \"mappingHelper\", void 0);\nGraphPasteSelectionCommand = GraphPasteSelectionCommand_1 = __decorate([\n    injectable({\n        token: { token: ICommandHandler, named: NsGraphPasteSelection.command.id },\n    })\n    /** 创建节点命令 */\n], GraphPasteSelectionCommand);\nexport { GraphPasteSelectionCommand };\n//# sourceMappingURL=graph-paste.js.map"]},"metadata":{},"sourceType":"module"}