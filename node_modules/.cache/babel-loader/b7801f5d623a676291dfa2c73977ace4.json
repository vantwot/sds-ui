{"ast":null,"code":"import _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { StringExt, FunctionExt, Platform } from '../util';\nexport var Registry = /*#__PURE__*/function () {\n  function Registry(options) {\n    _classCallCheck(this, Registry);\n\n    this.options = Object.assign({}, options);\n    this.data = this.options.data || {};\n    this.register = this.register.bind(this);\n    this.unregister = this.unregister.bind(this);\n  }\n\n  _createClass(Registry, [{\n    key: \"names\",\n    get: function get() {\n      return Object.keys(this.data);\n    }\n  }, {\n    key: \"register\",\n    value: function register(name, options) {\n      var _this = this;\n\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (typeof name === 'object') {\n        Object.keys(name).forEach(function (key) {\n          _this.register(key, name[key], options);\n        });\n        return;\n      }\n\n      if (this.exist(name) && !force && !Platform.isApplyingHMR()) {\n        this.onDuplicated(name);\n      }\n\n      var process = this.options.process;\n      var entity = process ? FunctionExt.call(process, this, name, options) : options;\n      this.data[name] = entity;\n      return entity;\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister(name) {\n      var entity = name ? this.data[name] : null;\n      delete this.data[name];\n      return entity;\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      return name ? this.data[name] : null;\n    }\n  }, {\n    key: \"exist\",\n    value: function exist(name) {\n      return name ? this.data[name] != null : false;\n    }\n  }, {\n    key: \"onDuplicated\",\n    value: function onDuplicated(name) {\n      // eslint-disable-next-line no-useless-catch\n      try {\n        // race\n        if (this.options.onConflict) {\n          FunctionExt.call(this.options.onConflict, this, name);\n        }\n\n        throw new Error(\"\".concat(StringExt.upperFirst(this.options.type), \" with name '\").concat(name, \"' already registered.\"));\n      } catch (err) {\n        throw err;\n      }\n    }\n  }, {\n    key: \"onNotFound\",\n    value: function onNotFound(name, prefix) {\n      throw new Error(this.getSpellingSuggestion(name, prefix));\n    }\n  }, {\n    key: \"getSpellingSuggestion\",\n    value: function getSpellingSuggestion(name, prefix) {\n      var suggestion = this.getSpellingSuggestionForName(name);\n      var prefixed = prefix ? \"\".concat(prefix, \" \").concat(StringExt.lowerFirst(this.options.type)) : this.options.type;\n      return (// eslint-disable-next-line\n        \"\".concat(StringExt.upperFirst(prefixed), \" with name '\").concat(name, \"' does not exist.\").concat(suggestion ? \" Did you mean '\".concat(suggestion, \"'?\") : '')\n      );\n    }\n  }, {\n    key: \"getSpellingSuggestionForName\",\n    value: function getSpellingSuggestionForName(name) {\n      return StringExt.getSpellingSuggestion(name, Object.keys(this.data), function (candidate) {\n        return candidate;\n      });\n    }\n  }]);\n\n  return Registry;\n}();\n\n(function (Registry) {\n  function create(options) {\n    return new Registry(options);\n  }\n\n  Registry.create = create;\n})(Registry || (Registry = {}));","map":{"version":3,"sources":["../../src/registry/registry.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { StringExt, FunctionExt, Platform } from '../util';\nexport class Registry {\n    constructor(options) {\n        this.options = Object.assign({}, options);\n        this.data = this.options.data || {};\n        this.register = this.register.bind(this);\n        this.unregister = this.unregister.bind(this);\n    }\n    get names() {\n        return Object.keys(this.data);\n    }\n    register(name, options, force = false) {\n        if (typeof name === 'object') {\n            Object.keys(name).forEach((key) => {\n                this.register(key, name[key], options);\n            });\n            return;\n        }\n        if (this.exist(name) && !force && !Platform.isApplyingHMR()) {\n            this.onDuplicated(name);\n        }\n        const process = this.options.process;\n        const entity = process\n            ? FunctionExt.call(process, this, name, options)\n            : options;\n        this.data[name] = entity;\n        return entity;\n    }\n    unregister(name) {\n        const entity = name ? this.data[name] : null;\n        delete this.data[name];\n        return entity;\n    }\n    get(name) {\n        return name ? this.data[name] : null;\n    }\n    exist(name) {\n        return name ? this.data[name] != null : false;\n    }\n    onDuplicated(name) {\n        // eslint-disable-next-line no-useless-catch\n        try {\n            // race\n            if (this.options.onConflict) {\n                FunctionExt.call(this.options.onConflict, this, name);\n            }\n            throw new Error(`${StringExt.upperFirst(this.options.type)} with name '${name}' already registered.`);\n        }\n        catch (err) {\n            throw err;\n        }\n    }\n    onNotFound(name, prefix) {\n        throw new Error(this.getSpellingSuggestion(name, prefix));\n    }\n    getSpellingSuggestion(name, prefix) {\n        const suggestion = this.getSpellingSuggestionForName(name);\n        const prefixed = prefix\n            ? `${prefix} ${StringExt.lowerFirst(this.options.type)}`\n            : this.options.type;\n        return (\n        // eslint-disable-next-line\n        `${StringExt.upperFirst(prefixed)} with name '${name}' does not exist.${suggestion ? ` Did you mean '${suggestion}'?` : ''}`);\n    }\n    getSpellingSuggestionForName(name) {\n        return StringExt.getSpellingSuggestion(name, Object.keys(this.data), (candidate) => candidate);\n    }\n}\n(function (Registry) {\n    function create(options) {\n        return new Registry(options);\n    }\n    Registry.create = create;\n})(Registry || (Registry = {}));\n//# sourceMappingURL=registry.js.map"]},"metadata":{},"sourceType":"module"}