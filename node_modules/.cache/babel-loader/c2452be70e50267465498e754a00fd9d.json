{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport classnames from 'classnames';\nimport { IHookContribution, ManaSyringe } from '@antv/xflow-core';\nimport { IGraphProvider } from '@antv/xflow-core';\nimport { ACTIVE_NODE_PORT, NsPortEvent } from '../interface';\nimport { DisposableCollection, IModelContribution, Disposable } from '@antv/xflow-core';\n/**\n * 内置的hook contribution\n * 处理 config上的runtime的注册项\n */\n\nlet NodePortTooltipContribution = class NodePortTooltipContribution {\n  constructor() {\n    this.toDispose = new DisposableCollection();\n    /** 获取画布实例 */\n\n    this.getGraphInstance = () => __awaiter(this, void 0, void 0, function* () {\n      const graphInstance = yield this.graphProvider.getGraphInstance();\n      const graphConfig = yield this.graphProvider.getGraphOptions();\n      return {\n        graph: graphInstance,\n        config: graphConfig\n      };\n    });\n    /** 获取GraphOptions */\n\n\n    this.getPortRenderConfig = () => {\n      const dagOptions = {\n        onPortRendered(portRenderedArgs) {\n          var _a, _b;\n          /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n\n\n          const graph = this;\n          const {\n            port,\n            node\n          } = portRenderedArgs;\n          const {\n            contentSelectors\n          } = portRenderedArgs;\n          const portContainer = contentSelectors && contentSelectors['xflow-port-group'];\n\n          if (portContainer instanceof Element) {\n            portContainer.setAttribute('class', classnames('xflow-port-group', {\n              connected: port.connected && port.group !== 'out',\n              groupPort: ((_a = node) === null || _a === void 0 ? void 0 : _a.isGroup) && ((_b = node) === null || _b === void 0 ? void 0 : _b.isGroup())\n            }));\n            portContainer.addEventListener('mouseenter', e => {\n              const eventArgs = {\n                e: e,\n                portId: port.id,\n                nodeId: node.id,\n                portData: port,\n                nodeData: node.getData(),\n                tooltip: port.tooltip,\n                placement: port.group\n              };\n              graph.trigger(NsPortEvent.MOUSE_ENTER, eventArgs);\n            });\n            portContainer.addEventListener('mouseleave', e => {\n              const eventArgs = {\n                e: e,\n                portId: port.id,\n                nodeId: node.id,\n                portData: port,\n                nodeData: node.getData(),\n                tooltip: port.tooltip,\n                placement: port.group\n              };\n              graph.trigger(NsPortEvent.MOUSE_LEAVE, eventArgs);\n            });\n          }\n        }\n\n      };\n      return dagOptions;\n    };\n\n    this.registerHookHub = () => __awaiter(this, void 0, void 0, function* () {\n      return Disposable.create(() => {});\n    });\n\n    this.registerHook = hooks => __awaiter(this, void 0, void 0, function* () {\n      const toDispose = new DisposableCollection();\n      const disposables = [hooks.graphOptions.registerHook({\n        name: 'add onPortRendered options ',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          Object.assign(args, this.getPortRenderConfig());\n        })\n      })];\n      toDispose.pushAll(disposables);\n      return Disposable.create(() => {});\n    });\n  }\n\n  registerModel(registry) {\n    registry.registerModel({\n      id: ACTIVE_NODE_PORT.id,\n      watchChange: self => __awaiter(this, void 0, void 0, function* () {\n        const {\n          graph,\n          config\n        } = yield this.getGraphInstance();\n\n        const calcPosition = e => {\n          const {\n            x,\n            y,\n            width,\n            height\n          } = e.target.getBoundingClientRect();\n          const clientRect = config.rootContainer.getBoundingClientRect();\n          const position = {\n            x: x - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.x) || 0) + width / 2,\n            y: y - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.y) || 0) + height / 2\n          };\n          return position;\n        };\n\n        const onMouseEnter = args => {\n          self.setValue(Object.assign(Object.assign({}, args), {\n            position: calcPosition(args.e)\n          }));\n        };\n\n        const onMouseLeave = () => {\n          self.setValue(null);\n        };\n        /** 绑定事件 */\n\n\n        graph.on(NsPortEvent.MOUSE_ENTER, onMouseEnter);\n        graph.on(NsPortEvent.MOUSE_LEAVE, onMouseLeave);\n        graph.on('cell:mouseleave', onMouseLeave);\n        return Disposable.create(() => {\n          /** 解除绑定 */\n          graph.off(NsPortEvent.MOUSE_ENTER, onMouseEnter);\n          graph.off(NsPortEvent.MOUSE_LEAVE, onMouseLeave);\n        });\n      })\n    });\n  }\n\n};\n\n__decorate([ManaSyringe.inject(IGraphProvider), __metadata(\"design:type\", Object)], NodePortTooltipContribution.prototype, \"graphProvider\", void 0);\n\nNodePortTooltipContribution = __decorate([ManaSyringe.singleton({\n  contrib: [IHookContribution, IModelContribution]\n})], NodePortTooltipContribution);\nexport { NodePortTooltipContribution };","map":{"version":3,"sources":["../../../src/canvas-node-port-tooltip/contributions/node-port.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport classnames from 'classnames';\nimport { IHookContribution, ManaSyringe } from '@antv/xflow-core';\nimport { IGraphProvider } from '@antv/xflow-core';\nimport { ACTIVE_NODE_PORT, NsPortEvent } from '../interface';\nimport { DisposableCollection, IModelContribution, Disposable } from '@antv/xflow-core';\n/**\n * 内置的hook contribution\n * 处理 config上的runtime的注册项\n */\nlet NodePortTooltipContribution = class NodePortTooltipContribution {\n    constructor() {\n        this.toDispose = new DisposableCollection();\n        /** 获取画布实例 */\n        this.getGraphInstance = () => __awaiter(this, void 0, void 0, function* () {\n            const graphInstance = yield this.graphProvider.getGraphInstance();\n            const graphConfig = yield this.graphProvider.getGraphOptions();\n            return { graph: graphInstance, config: graphConfig };\n        });\n        /** 获取GraphOptions */\n        this.getPortRenderConfig = () => {\n            const dagOptions = {\n                onPortRendered(portRenderedArgs) {\n                    var _a, _b;\n                    /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n                    const graph = this;\n                    const { port, node } = portRenderedArgs;\n                    const { contentSelectors } = portRenderedArgs;\n                    const portContainer = contentSelectors && contentSelectors['xflow-port-group'];\n                    if (portContainer instanceof Element) {\n                        portContainer.setAttribute('class', classnames('xflow-port-group', {\n                            connected: port.connected && port.group !== 'out',\n                            groupPort: ((_a = node) === null || _a === void 0 ? void 0 : _a.isGroup) && ((_b = node) === null || _b === void 0 ? void 0 : _b.isGroup()),\n                        }));\n                        portContainer.addEventListener('mouseenter', e => {\n                            const eventArgs = {\n                                e: e,\n                                portId: port.id,\n                                nodeId: node.id,\n                                portData: port,\n                                nodeData: node.getData(),\n                                tooltip: port.tooltip,\n                                placement: port.group,\n                            };\n                            graph.trigger(NsPortEvent.MOUSE_ENTER, eventArgs);\n                        });\n                        portContainer.addEventListener('mouseleave', e => {\n                            const eventArgs = {\n                                e: e,\n                                portId: port.id,\n                                nodeId: node.id,\n                                portData: port,\n                                nodeData: node.getData(),\n                                tooltip: port.tooltip,\n                                placement: port.group,\n                            };\n                            graph.trigger(NsPortEvent.MOUSE_LEAVE, eventArgs);\n                        });\n                    }\n                },\n            };\n            return dagOptions;\n        };\n        this.registerHookHub = () => __awaiter(this, void 0, void 0, function* () {\n            return Disposable.create(() => { });\n        });\n        this.registerHook = (hooks) => __awaiter(this, void 0, void 0, function* () {\n            const toDispose = new DisposableCollection();\n            const disposables = [\n                hooks.graphOptions.registerHook({\n                    name: 'add onPortRendered options ',\n                    handler: (args) => __awaiter(this, void 0, void 0, function* () {\n                        Object.assign(args, this.getPortRenderConfig());\n                    }),\n                }),\n            ];\n            toDispose.pushAll(disposables);\n            return Disposable.create(() => { });\n        });\n    }\n    registerModel(registry) {\n        registry.registerModel({\n            id: ACTIVE_NODE_PORT.id,\n            watchChange: (self) => __awaiter(this, void 0, void 0, function* () {\n                const { graph, config } = yield this.getGraphInstance();\n                const calcPosition = (e) => {\n                    const { x, y, width, height } = e.target.getBoundingClientRect();\n                    const clientRect = config.rootContainer.getBoundingClientRect();\n                    const position = {\n                        x: x - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.x) || 0) + width / 2,\n                        y: y - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.y) || 0) + height / 2,\n                    };\n                    return position;\n                };\n                const onMouseEnter = (args) => {\n                    self.setValue(Object.assign(Object.assign({}, args), { position: calcPosition(args.e) }));\n                };\n                const onMouseLeave = () => {\n                    self.setValue(null);\n                };\n                /** 绑定事件 */\n                graph.on(NsPortEvent.MOUSE_ENTER, onMouseEnter);\n                graph.on(NsPortEvent.MOUSE_LEAVE, onMouseLeave);\n                graph.on('cell:mouseleave', onMouseLeave);\n                return Disposable.create(() => {\n                    /** 解除绑定 */\n                    graph.off(NsPortEvent.MOUSE_ENTER, onMouseEnter);\n                    graph.off(NsPortEvent.MOUSE_LEAVE, onMouseLeave);\n                });\n            }),\n        });\n    }\n};\n__decorate([\n    ManaSyringe.inject(IGraphProvider),\n    __metadata(\"design:type\", Object)\n], NodePortTooltipContribution.prototype, \"graphProvider\", void 0);\nNodePortTooltipContribution = __decorate([\n    ManaSyringe.singleton({ contrib: [IHookContribution, IModelContribution] })\n], NodePortTooltipContribution);\nexport { NodePortTooltipContribution };\n//# sourceMappingURL=node-port.js.map"]},"metadata":{},"sourceType":"module"}