{"ast":null,"code":"import { Point } from '../../geometry';\n\nfunction toPercentage(value, max) {\n  if (max === 0) {\n    return '0%';\n  }\n\n  return `${Math.round(value / max * 100)}%`;\n}\n\nfunction pin(relative) {\n  const strategy = (terminal, view, magnet, coords) => {\n    return view.isEdgeElement(magnet) ? pinEdgeTerminal(relative, terminal, view, magnet, coords) : pinNodeTerminal(relative, terminal, view, magnet, coords);\n  };\n\n  return strategy;\n}\n\nfunction pinNodeTerminal(relative, data, view, magnet, coords) {\n  const node = view.cell;\n  const angle = node.getAngle();\n  const bbox = view.getUnrotatedBBoxOfElement(magnet);\n  const center = node.getBBox().getCenter();\n  const pos = Point.create(coords).rotate(angle, center);\n  let dx = pos.x - bbox.x;\n  let dy = pos.y - bbox.y;\n\n  if (relative) {\n    dx = toPercentage(dx, bbox.width);\n    dy = toPercentage(dy, bbox.height);\n  }\n\n  data.anchor = {\n    name: 'topLeft',\n    args: {\n      dx,\n      dy,\n      rotate: true\n    }\n  };\n  return data;\n}\n\nfunction pinEdgeTerminal(relative, end, view, magnet, coords) {\n  const connection = view.getConnection();\n\n  if (!connection) {\n    return end;\n  }\n\n  const length = connection.closestPointLength(coords);\n\n  if (relative) {\n    const totalLength = connection.length();\n    end.anchor = {\n      name: 'ratio',\n      args: {\n        ratio: length / totalLength\n      }\n    };\n  } else {\n    end.anchor = {\n      name: 'length',\n      args: {\n        length\n      }\n    };\n  }\n\n  return end;\n}\n\nexport const pinRelative = pin(true);\nexport const pinAbsolute = pin(false);","map":{"version":3,"sources":["../../../src/registry/connection-strategy/pin.ts"],"names":[],"mappings":"AAAA,SAAS,KAAT,QAAsB,gBAAtB;;AAKA,SAAS,YAAT,CAAsB,KAAtB,EAAqC,GAArC,EAAgD;AAC9C,MAAI,GAAG,KAAK,CAAZ,EAAe;AACb,WAAO,IAAP;AACD;;AAED,SAAO,GAAG,IAAI,CAAC,KAAL,CAAY,KAAK,GAAG,GAAT,GAAgB,GAA3B,CAA+B,GAAzC;AACD;;AAED,SAAS,GAAT,CAAa,QAAb,EAA8B;AAC5B,QAAM,QAAQ,GAAkC,CAC9C,QAD8C,EAE9C,IAF8C,EAG9C,MAH8C,EAI9C,MAJ8C,KAK5C;AACF,WAAO,IAAI,CAAC,aAAL,CAAmB,MAAnB,IACH,eAAe,CAAC,QAAD,EAAW,QAAX,EAAqB,IAArB,EAAuC,MAAvC,EAA+C,MAA/C,CADZ,GAEH,eAAe,CAAC,QAAD,EAAW,QAAX,EAAqB,IAArB,EAAuC,MAAvC,EAA+C,MAA/C,CAFnB;AAGD,GATD;;AAWA,SAAO,QAAP;AACD;;AAED,SAAS,eAAT,CACE,QADF,EAEE,IAFF,EAGE,IAHF,EAIE,MAJF,EAKE,MALF,EAKyB;AAEvB,QAAM,IAAI,GAAG,IAAI,CAAC,IAAlB;AACA,QAAM,KAAK,GAAG,IAAI,CAAC,QAAL,EAAd;AACA,QAAM,IAAI,GAAG,IAAI,CAAC,yBAAL,CAA+B,MAA/B,CAAb;AACA,QAAM,MAAM,GAAG,IAAI,CAAC,OAAL,GAAe,SAAf,EAAf;AACA,QAAM,GAAG,GAAG,KAAK,CAAC,MAAN,CAAa,MAAb,EAAqB,MAArB,CAA4B,KAA5B,EAAmC,MAAnC,CAAZ;AAEA,MAAI,EAAE,GAAoB,GAAG,CAAC,CAAJ,GAAQ,IAAI,CAAC,CAAvC;AACA,MAAI,EAAE,GAAoB,GAAG,CAAC,CAAJ,GAAQ,IAAI,CAAC,CAAvC;;AAEA,MAAI,QAAJ,EAAc;AACZ,IAAA,EAAE,GAAG,YAAY,CAAC,EAAD,EAAK,IAAI,CAAC,KAAV,CAAjB;AACA,IAAA,EAAE,GAAG,YAAY,CAAC,EAAD,EAAK,IAAI,CAAC,MAAV,CAAjB;AACD;;AAED,EAAA,IAAI,CAAC,MAAL,GAAc;AACZ,IAAA,IAAI,EAAE,SADM;AAEZ,IAAA,IAAI,EAAE;AACJ,MAAA,EADI;AAEJ,MAAA,EAFI;AAGJ,MAAA,MAAM,EAAE;AAHJ;AAFM,GAAd;AASA,SAAO,IAAP;AACD;;AAED,SAAS,eAAT,CACE,QADF,EAEE,GAFF,EAGE,IAHF,EAIE,MAJF,EAKE,MALF,EAKyB;AAEvB,QAAM,UAAU,GAAG,IAAI,CAAC,aAAL,EAAnB;;AACA,MAAI,CAAC,UAAL,EAAiB;AACf,WAAO,GAAP;AACD;;AAED,QAAM,MAAM,GAAG,UAAU,CAAC,kBAAX,CAA8B,MAA9B,CAAf;;AACA,MAAI,QAAJ,EAAc;AACZ,UAAM,WAAW,GAAG,UAAU,CAAC,MAAX,EAApB;AACA,IAAA,GAAG,CAAC,MAAJ,GAAa;AACX,MAAA,IAAI,EAAE,OADK;AAEX,MAAA,IAAI,EAAE;AACJ,QAAA,KAAK,EAAE,MAAM,GAAG;AADZ;AAFK,KAAb;AAMD,GARD,MAQO;AACL,IAAA,GAAG,CAAC,MAAJ,GAAa;AACX,MAAA,IAAI,EAAE,QADK;AAEX,MAAA,IAAI,EAAE;AACJ,QAAA;AADI;AAFK,KAAb;AAMD;;AAED,SAAO,GAAP;AACD;;AAED,OAAO,MAAM,WAAW,GAAG,GAAG,CAAC,IAAD,CAAvB;AACP,OAAO,MAAM,WAAW,GAAG,GAAG,CAAC,KAAD,CAAvB","sourceRoot":"","sourcesContent":["import { Point } from '../../geometry';\nfunction toPercentage(value, max) {\n    if (max === 0) {\n        return '0%';\n    }\n    return `${Math.round((value / max) * 100)}%`;\n}\nfunction pin(relative) {\n    const strategy = (terminal, view, magnet, coords) => {\n        return view.isEdgeElement(magnet)\n            ? pinEdgeTerminal(relative, terminal, view, magnet, coords)\n            : pinNodeTerminal(relative, terminal, view, magnet, coords);\n    };\n    return strategy;\n}\nfunction pinNodeTerminal(relative, data, view, magnet, coords) {\n    const node = view.cell;\n    const angle = node.getAngle();\n    const bbox = view.getUnrotatedBBoxOfElement(magnet);\n    const center = node.getBBox().getCenter();\n    const pos = Point.create(coords).rotate(angle, center);\n    let dx = pos.x - bbox.x;\n    let dy = pos.y - bbox.y;\n    if (relative) {\n        dx = toPercentage(dx, bbox.width);\n        dy = toPercentage(dy, bbox.height);\n    }\n    data.anchor = {\n        name: 'topLeft',\n        args: {\n            dx,\n            dy,\n            rotate: true,\n        },\n    };\n    return data;\n}\nfunction pinEdgeTerminal(relative, end, view, magnet, coords) {\n    const connection = view.getConnection();\n    if (!connection) {\n        return end;\n    }\n    const length = connection.closestPointLength(coords);\n    if (relative) {\n        const totalLength = connection.length();\n        end.anchor = {\n            name: 'ratio',\n            args: {\n                ratio: length / totalLength,\n            },\n        };\n    }\n    else {\n        end.anchor = {\n            name: 'length',\n            args: {\n                length,\n            },\n        };\n    }\n    return end;\n}\nexport const pinRelative = pin(true);\nexport const pinAbsolute = pin(false);\n//# sourceMappingURL=pin.js.map"]},"metadata":{},"sourceType":"module"}