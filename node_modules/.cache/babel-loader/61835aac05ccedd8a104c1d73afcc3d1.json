{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { isString, isPlainObject, isNil, mix } from '@antv/util';\nimport Item from './item';\nvar END_MAP = {\n  source: 'start',\n  target: 'end'\n};\nvar ITEM_NAME_SUFFIX = 'Node'; // 端点的后缀，如 sourceNode, targetNode\n\nvar POINT_NAME_SUFFIX = 'Point'; // 起点或者结束点的后缀，如 startPoint, endPoint\n\nvar ANCHOR_NAME_SUFFIX = 'Anchor';\n\nvar Edge =\n/** @class */\nfunction (_super) {\n  __extends(Edge, _super);\n\n  function Edge() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Edge.prototype.getDefaultCfg = function () {\n    return {\n      type: 'edge',\n      sourceNode: null,\n      targetNode: null,\n      startPoint: null,\n      endPoint: null,\n      linkCenter: false\n    };\n  };\n\n  Edge.prototype.setEnd = function (name, value) {\n    var pointName = END_MAP[name] + POINT_NAME_SUFFIX;\n    var itemName = name + ITEM_NAME_SUFFIX;\n    var preItem = this.get(itemName);\n\n    if (preItem && !preItem.destroyed) {\n      // 如果之前存在节点，则移除掉边\n      preItem.removeEdge(this);\n    }\n\n    if (isPlainObject(value)) {\n      // 如果设置成具体的点，则清理节点\n      this.set(pointName, value);\n      this.set(itemName, null);\n    } else if (value) {\n      value.addEdge(this);\n      this.set(itemName, value);\n      this.set(pointName, null);\n    }\n  };\n  /**\n   * 获取连接点的坐标\n   * @param name source | target\n   * @param model 边的数据模型\n   * @param controlPoints 控制点\n   */\n\n\n  Edge.prototype.getLinkPoint = function (name, model, controlPoints) {\n    var pointName = END_MAP[name] + POINT_NAME_SUFFIX;\n    var itemName = name + ITEM_NAME_SUFFIX;\n    var point = this.get(pointName);\n\n    if (!point) {\n      var item = this.get(itemName);\n      var anchorName = name + ANCHOR_NAME_SUFFIX;\n      var prePoint = this.getPrePoint(name, controlPoints);\n      var anchorIndex = model[anchorName];\n\n      if (!isNil(anchorIndex)) {\n        // 如果有锚点，则使用锚点索引获取连接点\n        point = item.getLinkPointByAnchor(anchorIndex);\n      } // 如果锚点没有对应的点或者没有锚点，则直接计算连接点\n\n\n      point = point || item.getLinkPoint(prePoint);\n\n      if (!isNil(point.index)) {\n        this.set(name + \"AnchorIndex\", point.index);\n      }\n    }\n\n    return point;\n  };\n  /**\n   * 获取同端点进行连接的点，计算交汇点\n   * @param name\n   * @param controlPoints\n   */\n\n\n  Edge.prototype.getPrePoint = function (name, controlPoints) {\n    if (controlPoints && controlPoints.length) {\n      var index = name === 'source' ? 0 : controlPoints.length - 1;\n      return controlPoints[index];\n    }\n\n    var oppositeName = name === 'source' ? 'target' : 'source'; // 取另一个节点的位置\n\n    return this.getEndPoint(oppositeName);\n  };\n  /**\n   * 获取端点的位置\n   * @param name\n   */\n\n\n  Edge.prototype.getEndPoint = function (name) {\n    var itemName = name + ITEM_NAME_SUFFIX;\n    var pointName = END_MAP[name] + POINT_NAME_SUFFIX;\n    var item = this.get(itemName); // 如果有端点，直接使用 model\n\n    if (item) {\n      return item.get('model');\n    } // 否则直接使用点\n\n\n    return this.get(pointName);\n  };\n  /**\n   * 通过端点的中心获取控制点\n   * @param model\n   */\n\n\n  Edge.prototype.getControlPointsByCenter = function (model) {\n    var sourcePoint = this.getEndPoint('source');\n    var targetPoint = this.getEndPoint('target');\n    var shapeFactory = this.get('shapeFactory');\n    var type = model.type;\n    return shapeFactory.getControlPoints(type, {\n      startPoint: sourcePoint,\n      endPoint: targetPoint\n    });\n  };\n\n  Edge.prototype.getEndCenter = function (name) {\n    var itemName = name + ITEM_NAME_SUFFIX;\n    var pointName = END_MAP[name] + POINT_NAME_SUFFIX;\n    var item = this.get(itemName); // 如果有端点，直接使用 model\n\n    if (item) {\n      var bbox = item.getBBox();\n      return {\n        x: bbox.centerX,\n        y: bbox.centerY\n      };\n    } // 否则直接使用点\n\n\n    return this.get(pointName);\n  };\n\n  Edge.prototype.init = function () {\n    _super.prototype.init.call(this); // 初始化两个端点\n\n\n    this.setSource(this.get('source'));\n    this.setTarget(this.get('target'));\n  };\n\n  Edge.prototype.getShapeCfg = function (model, updateType) {\n    var self = this;\n    var linkCenter = self.get('linkCenter'); // 如果连接到中心，忽视锚点、忽视控制点\n\n    var cfg = (updateType === null || updateType === void 0 ? void 0 : updateType.includes('move')) ? model : _super.prototype.getShapeCfg.call(this, model);\n\n    if (linkCenter) {\n      cfg.startPoint = self.getEndCenter('source');\n      cfg.endPoint = self.getEndCenter('target');\n    } else {\n      var controlPoints = cfg.controlPoints || self.getControlPointsByCenter(cfg);\n      cfg.startPoint = self.getLinkPoint('source', model, controlPoints);\n      cfg.endPoint = self.getLinkPoint('target', model, controlPoints);\n    }\n\n    cfg.sourceNode = self.get('sourceNode');\n    cfg.targetNode = self.get('targetNode');\n    return cfg;\n  };\n  /**\n   * 获取边的数据模型\n   */\n\n\n  Edge.prototype.getModel = function () {\n    var out = this.get('model');\n    var sourceItem = this.get(\"source\" + ITEM_NAME_SUFFIX);\n    var targetItem = this.get(\"target\" + ITEM_NAME_SUFFIX);\n\n    if (sourceItem) {\n      delete out[\"source\" + ITEM_NAME_SUFFIX];\n    } else {\n      out.source = this.get(\"start\" + POINT_NAME_SUFFIX);\n    }\n\n    if (targetItem) {\n      delete out[\"target\" + ITEM_NAME_SUFFIX];\n    } else {\n      out.target = this.get(\"end\" + POINT_NAME_SUFFIX);\n    }\n\n    if (!isString(out.source) && !isPlainObject(out.source)) {\n      out.source = out.source.getID();\n    }\n\n    if (!isString(out.target) && !isPlainObject(out.target)) {\n      out.target = out.target.getID();\n    }\n\n    return out;\n  };\n\n  Edge.prototype.setSource = function (source) {\n    this.setEnd('source', source);\n    this.set('source', source);\n  };\n\n  Edge.prototype.setTarget = function (target) {\n    this.setEnd('target', target);\n    this.set('target', target);\n  };\n\n  Edge.prototype.getSource = function () {\n    return this.get('source');\n  };\n\n  Edge.prototype.getTarget = function () {\n    return this.get('target');\n  };\n\n  Edge.prototype.updatePosition = function () {\n    return false;\n  };\n  /**\n   * 边不需要重计算容器位置，直接重新计算 path 位置\n   * @param {object} cfg 待更新数据\n   */\n\n\n  Edge.prototype.update = function (cfg, updateType) {\n    if (updateType === void 0) {\n      updateType = undefined;\n    }\n\n    var model = this.get('model');\n    var oriVisible = model.visible;\n    var cfgVisible = cfg.visible;\n    if (oriVisible !== cfgVisible && cfgVisible !== undefined) this.changeVisibility(cfgVisible);\n    var styles = this.get('styles');\n\n    if (cfg.stateStyles) {\n      // 更新 item 时更新 this.get('styles') 中的值\n      var stateStyles = cfg.stateStyles;\n      mix(styles, stateStyles);\n      delete cfg.stateStyles;\n    }\n\n    Object.assign(model, cfg);\n    this.updateShape(updateType);\n    this.afterUpdate();\n    this.clearCache();\n  };\n\n  Edge.prototype.destroy = function () {\n    var sourceItem = this.get(\"source\" + ITEM_NAME_SUFFIX);\n    var targetItem = this.get(\"target\" + ITEM_NAME_SUFFIX);\n\n    if (sourceItem && !sourceItem.destroyed) {\n      sourceItem.removeEdge(this);\n    }\n\n    if (targetItem && !targetItem.destroyed) {\n      targetItem.removeEdge(this);\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n\n  return Edge;\n}(Item);\n\nexport default Edge;","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/@antv/g6-core/es/item/edge.js"],"names":["__extends","isString","isPlainObject","isNil","mix","Item","END_MAP","source","target","ITEM_NAME_SUFFIX","POINT_NAME_SUFFIX","ANCHOR_NAME_SUFFIX","Edge","_super","apply","arguments","prototype","getDefaultCfg","type","sourceNode","targetNode","startPoint","endPoint","linkCenter","setEnd","name","value","pointName","itemName","preItem","get","destroyed","removeEdge","set","addEdge","getLinkPoint","model","controlPoints","point","item","anchorName","prePoint","getPrePoint","anchorIndex","getLinkPointByAnchor","index","length","oppositeName","getEndPoint","getControlPointsByCenter","sourcePoint","targetPoint","shapeFactory","getControlPoints","getEndCenter","bbox","getBBox","x","centerX","y","centerY","init","call","setSource","setTarget","getShapeCfg","updateType","self","cfg","includes","getModel","out","sourceItem","targetItem","getID","getSource","getTarget","updatePosition","update","undefined","oriVisible","visible","cfgVisible","changeVisibility","styles","stateStyles","Object","assign","updateShape","afterUpdate","clearCache","destroy"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport { isString, isPlainObject, isNil, mix } from '@antv/util';\nimport Item from './item';\nvar END_MAP = {\n  source: 'start',\n  target: 'end'\n};\nvar ITEM_NAME_SUFFIX = 'Node'; // 端点的后缀，如 sourceNode, targetNode\n\nvar POINT_NAME_SUFFIX = 'Point'; // 起点或者结束点的后缀，如 startPoint, endPoint\n\nvar ANCHOR_NAME_SUFFIX = 'Anchor';\n\nvar Edge =\n/** @class */\nfunction (_super) {\n  __extends(Edge, _super);\n\n  function Edge() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Edge.prototype.getDefaultCfg = function () {\n    return {\n      type: 'edge',\n      sourceNode: null,\n      targetNode: null,\n      startPoint: null,\n      endPoint: null,\n      linkCenter: false\n    };\n  };\n\n  Edge.prototype.setEnd = function (name, value) {\n    var pointName = END_MAP[name] + POINT_NAME_SUFFIX;\n    var itemName = name + ITEM_NAME_SUFFIX;\n    var preItem = this.get(itemName);\n\n    if (preItem && !preItem.destroyed) {\n      // 如果之前存在节点，则移除掉边\n      preItem.removeEdge(this);\n    }\n\n    if (isPlainObject(value)) {\n      // 如果设置成具体的点，则清理节点\n      this.set(pointName, value);\n      this.set(itemName, null);\n    } else if (value) {\n      value.addEdge(this);\n      this.set(itemName, value);\n      this.set(pointName, null);\n    }\n  };\n  /**\n   * 获取连接点的坐标\n   * @param name source | target\n   * @param model 边的数据模型\n   * @param controlPoints 控制点\n   */\n\n\n  Edge.prototype.getLinkPoint = function (name, model, controlPoints) {\n    var pointName = END_MAP[name] + POINT_NAME_SUFFIX;\n    var itemName = name + ITEM_NAME_SUFFIX;\n    var point = this.get(pointName);\n\n    if (!point) {\n      var item = this.get(itemName);\n      var anchorName = name + ANCHOR_NAME_SUFFIX;\n      var prePoint = this.getPrePoint(name, controlPoints);\n      var anchorIndex = model[anchorName];\n\n      if (!isNil(anchorIndex)) {\n        // 如果有锚点，则使用锚点索引获取连接点\n        point = item.getLinkPointByAnchor(anchorIndex);\n      } // 如果锚点没有对应的点或者没有锚点，则直接计算连接点\n\n\n      point = point || item.getLinkPoint(prePoint);\n\n      if (!isNil(point.index)) {\n        this.set(name + \"AnchorIndex\", point.index);\n      }\n    }\n\n    return point;\n  };\n  /**\n   * 获取同端点进行连接的点，计算交汇点\n   * @param name\n   * @param controlPoints\n   */\n\n\n  Edge.prototype.getPrePoint = function (name, controlPoints) {\n    if (controlPoints && controlPoints.length) {\n      var index = name === 'source' ? 0 : controlPoints.length - 1;\n      return controlPoints[index];\n    }\n\n    var oppositeName = name === 'source' ? 'target' : 'source'; // 取另一个节点的位置\n\n    return this.getEndPoint(oppositeName);\n  };\n  /**\n   * 获取端点的位置\n   * @param name\n   */\n\n\n  Edge.prototype.getEndPoint = function (name) {\n    var itemName = name + ITEM_NAME_SUFFIX;\n    var pointName = END_MAP[name] + POINT_NAME_SUFFIX;\n    var item = this.get(itemName); // 如果有端点，直接使用 model\n\n    if (item) {\n      return item.get('model');\n    } // 否则直接使用点\n\n\n    return this.get(pointName);\n  };\n  /**\n   * 通过端点的中心获取控制点\n   * @param model\n   */\n\n\n  Edge.prototype.getControlPointsByCenter = function (model) {\n    var sourcePoint = this.getEndPoint('source');\n    var targetPoint = this.getEndPoint('target');\n    var shapeFactory = this.get('shapeFactory');\n    var type = model.type;\n    return shapeFactory.getControlPoints(type, {\n      startPoint: sourcePoint,\n      endPoint: targetPoint\n    });\n  };\n\n  Edge.prototype.getEndCenter = function (name) {\n    var itemName = name + ITEM_NAME_SUFFIX;\n    var pointName = END_MAP[name] + POINT_NAME_SUFFIX;\n    var item = this.get(itemName); // 如果有端点，直接使用 model\n\n    if (item) {\n      var bbox = item.getBBox();\n      return {\n        x: bbox.centerX,\n        y: bbox.centerY\n      };\n    } // 否则直接使用点\n\n\n    return this.get(pointName);\n  };\n\n  Edge.prototype.init = function () {\n    _super.prototype.init.call(this); // 初始化两个端点\n\n\n    this.setSource(this.get('source'));\n    this.setTarget(this.get('target'));\n  };\n\n  Edge.prototype.getShapeCfg = function (model, updateType) {\n    var self = this;\n    var linkCenter = self.get('linkCenter'); // 如果连接到中心，忽视锚点、忽视控制点\n\n    var cfg = (updateType === null || updateType === void 0 ? void 0 : updateType.includes('move')) ? model : _super.prototype.getShapeCfg.call(this, model);\n\n    if (linkCenter) {\n      cfg.startPoint = self.getEndCenter('source');\n      cfg.endPoint = self.getEndCenter('target');\n    } else {\n      var controlPoints = cfg.controlPoints || self.getControlPointsByCenter(cfg);\n      cfg.startPoint = self.getLinkPoint('source', model, controlPoints);\n      cfg.endPoint = self.getLinkPoint('target', model, controlPoints);\n    }\n\n    cfg.sourceNode = self.get('sourceNode');\n    cfg.targetNode = self.get('targetNode');\n    return cfg;\n  };\n  /**\n   * 获取边的数据模型\n   */\n\n\n  Edge.prototype.getModel = function () {\n    var out = this.get('model');\n    var sourceItem = this.get(\"source\" + ITEM_NAME_SUFFIX);\n    var targetItem = this.get(\"target\" + ITEM_NAME_SUFFIX);\n\n    if (sourceItem) {\n      delete out[\"source\" + ITEM_NAME_SUFFIX];\n    } else {\n      out.source = this.get(\"start\" + POINT_NAME_SUFFIX);\n    }\n\n    if (targetItem) {\n      delete out[\"target\" + ITEM_NAME_SUFFIX];\n    } else {\n      out.target = this.get(\"end\" + POINT_NAME_SUFFIX);\n    }\n\n    if (!isString(out.source) && !isPlainObject(out.source)) {\n      out.source = out.source.getID();\n    }\n\n    if (!isString(out.target) && !isPlainObject(out.target)) {\n      out.target = out.target.getID();\n    }\n\n    return out;\n  };\n\n  Edge.prototype.setSource = function (source) {\n    this.setEnd('source', source);\n    this.set('source', source);\n  };\n\n  Edge.prototype.setTarget = function (target) {\n    this.setEnd('target', target);\n    this.set('target', target);\n  };\n\n  Edge.prototype.getSource = function () {\n    return this.get('source');\n  };\n\n  Edge.prototype.getTarget = function () {\n    return this.get('target');\n  };\n\n  Edge.prototype.updatePosition = function () {\n    return false;\n  };\n  /**\n   * 边不需要重计算容器位置，直接重新计算 path 位置\n   * @param {object} cfg 待更新数据\n   */\n\n\n  Edge.prototype.update = function (cfg, updateType) {\n    if (updateType === void 0) {\n      updateType = undefined;\n    }\n\n    var model = this.get('model');\n    var oriVisible = model.visible;\n    var cfgVisible = cfg.visible;\n    if (oriVisible !== cfgVisible && cfgVisible !== undefined) this.changeVisibility(cfgVisible);\n    var styles = this.get('styles');\n\n    if (cfg.stateStyles) {\n      // 更新 item 时更新 this.get('styles') 中的值\n      var stateStyles = cfg.stateStyles;\n      mix(styles, stateStyles);\n      delete cfg.stateStyles;\n    }\n\n    Object.assign(model, cfg);\n    this.updateShape(updateType);\n    this.afterUpdate();\n    this.clearCache();\n  };\n\n  Edge.prototype.destroy = function () {\n    var sourceItem = this.get(\"source\" + ITEM_NAME_SUFFIX);\n    var targetItem = this.get(\"target\" + ITEM_NAME_SUFFIX);\n\n    if (sourceItem && !sourceItem.destroyed) {\n      sourceItem.removeEdge(this);\n    }\n\n    if (targetItem && !targetItem.destroyed) {\n      targetItem.removeEdge(this);\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n\n  return Edge;\n}(Item);\n\nexport default Edge;"]},"metadata":{},"sourceType":"module"}