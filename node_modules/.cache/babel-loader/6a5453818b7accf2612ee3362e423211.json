{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport BaseModel from '../../core/BaseModel';\nimport { PointImageTriangulation } from '../../core/triangulation';\nvar pointImageFrag = \"\\nuniform sampler2D u_texture;\\nvarying vec4 v_color;\\nvarying vec2 v_uv;\\nuniform vec2 u_textSize;\\nuniform float u_opacity : 1;\\n\\nvarying mat4 styleMappingMat; // \\u4F20\\u9012\\u4ECE\\u7247\\u5143\\u4E2D\\u4F20\\u9012\\u7684\\u6620\\u5C04\\u6570\\u636E\\n\\n#pragma include \\\"picking\\\"\\nvoid main(){\\n      float opacity = styleMappingMat[0][0];\\n      vec2 pos= v_uv / u_textSize + gl_PointCoord / u_textSize * 64.;\\n      vec4 textureColor=texture2D(u_texture,pos);\\n      if(all(lessThan(v_color, vec4(1.0+0.00001))) && all(greaterThan(v_color, vec4(1.0-0.00001))) || v_color==vec4(1.0)){\\n            gl_FragColor= textureColor;\\n      }else {\\n            gl_FragColor= step(0.01, textureColor.z) * v_color;\\n      }\\n      // gl_FragColor.a =gl_FragColor.a * u_opacity;\\n      gl_FragColor.a =gl_FragColor.a * opacity;\\n      gl_FragColor = filterColor(gl_FragColor);\\n}\\n\";\nvar pointImageVert = \"precision highp float;\\nattribute vec3 a_Position;\\nattribute vec4 a_Color;\\nattribute vec2 a_Uv;\\nattribute float a_Size;\\nvarying vec4 v_color;\\nvarying vec2 v_uv;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\nuniform float u_stroke_width : 1;\\nuniform vec2 u_offsets;\\n\\nuniform float u_opacity : 1;\\n\\nvarying mat4 styleMappingMat; // \\u7528\\u4E8E\\u5C06\\u5728\\u9876\\u70B9\\u7740\\u8272\\u5668\\u4E2D\\u8BA1\\u7B97\\u597D\\u7684\\u6837\\u5F0F\\u503C\\u4F20\\u9012\\u7ED9\\u7247\\u5143\\n\\n#pragma include \\\"styleMapping\\\"\\n#pragma include \\\"styleMappingCalOpacity\\\"\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n  styleMappingMat = mat4(\\n    0.0, 0.0, 0.0, 0.0, // opacity - strokeOpacity - strokeWidth - empty\\n    0.0, 0.0, 0.0, 0.0, // strokeR - strokeG - strokeB - strokeA\\n    0.0, 0.0, 0.0, 0.0, // offsets[0] - offsets[1]\\n    0.0, 0.0, 0.0, 0.0\\n  );\\n\\n  float rowCount = u_cellTypeLayout[0][0];    // \\u5F53\\u524D\\u7684\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u884C\\n  float columnCount = u_cellTypeLayout[0][1]; // \\u5F53\\u770B\\u5230\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u5217\\n  float columnWidth = 1.0/columnCount;  // \\u5217\\u5BBD\\n  float rowHeight = 1.0/rowCount;       // \\u884C\\u9AD8\\n  float cellCount = calCellCount(); // opacity - strokeOpacity - strokeWidth - stroke - offsets\\n  float id = a_vertexId; // \\u7B2Cn\\u4E2A\\u9876\\u70B9\\n  float cellCurrentRow = floor(id * cellCount / columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u884C\\n  float cellCurrentColumn = mod(id * cellCount, columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u5217\\n  \\n  // cell \\u56FA\\u5B9A\\u987A\\u5E8F opacity -> strokeOpacity -> strokeWidth -> stroke ... \\n  // \\u6309\\u987A\\u5E8F\\u4ECE cell \\u4E2D\\u53D6\\u503C\\u3001\\u82E5\\u6CA1\\u6709\\u5219\\u81EA\\u52A8\\u5F80\\u4E0B\\u53D6\\u503C\\n  float textureOffset = 0.0; // \\u5728 cell \\u4E2D\\u53D6\\u503C\\u7684\\u504F\\u79FB\\u91CF\\n\\n  vec2 opacityAndOffset = calOpacityAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\\n  styleMappingMat[0][0] = opacityAndOffset.r;\\n  textureOffset = opacityAndOffset.g;\\n\\n  vec2 textrueOffsets = vec2(0.0, 0.0);\\n  if(hasOffsets()) {\\n    vec2 valueXPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    textrueOffsets.r = pos2value(valueXPos, columnWidth, rowHeight); // x\\n    textureOffset += 1.0;\\n\\n    vec2 valueYPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    textrueOffsets.g = pos2value(valueYPos, columnWidth, rowHeight); // x\\n    textureOffset += 1.0;\\n  } else {\\n    textrueOffsets = u_offsets;\\n  }\\n\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n   v_color = a_Color;\\n   v_uv = a_Uv;\\n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\\n   \\n  //  vec2 offset = project_pixel(u_offsets);\\n  vec2 offset = project_pixel(textrueOffsets);\\n\\n  //  gl_Position = project_common_position_to_clipspace(vec4(vec2(project_pos.xy + offset),project_pos.z, 1.0));\\n\\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n      gl_Position = u_Mvp * vec4(vec2(project_pos.xy + offset),project_pos.z, 1.0);\\n    } else {\\n      gl_Position = project_common_position_to_clipspace(vec4(vec2(project_pos.xy + offset),project_pos.z, 1.0));\\n    }\\n   gl_PointSize = a_Size * 2.0 * u_DevicePixelRatio;\\n\\n  setPickingColor(a_PickingColor);\\n\\n}\\n\";\n\nvar IconeModel = function (_BaseModel) {\n  _inherits(IconeModel, _BaseModel);\n\n  var _super = _createSuper(IconeModel);\n\n  function IconeModel() {\n    var _this;\n\n    _classCallCheck(this, IconeModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"texture\", void 0);\n\n    return _this;\n  }\n\n  _createClass(IconeModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          opacity = _ref.opacity;\n\n      return {\n        u_opacity: opacity || 1.0,\n        u_texture: this.texture,\n        u_textSize: [1024, this.iconService.canvasHeight || 128]\n      };\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      var _this2 = this;\n\n      this.initIconFontGlyphs();\n      this.registerBuiltinAttributes();\n      this.updateTexture();\n      this.iconService.on('imageUpdate', function () {\n        _this2.updateTexture();\n\n        _this2.layer.render();\n      });\n      return [this.layer.buildLayerModel({\n        moduleName: 'pointiconImage',\n        vertexShader: pointImageVert,\n        fragmentShader: pointImageFrag,\n        triangulation: PointImageTriangulation,\n        primitive: gl.POINTS,\n        depth: {\n          enable: false\n        },\n        blend: this.getBlend()\n      })];\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$dataTexture;\n\n      (_this$dataTexture = this.dataTexture) === null || _this$dataTexture === void 0 ? void 0 : _this$dataTexture.destroy();\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      var _this3 = this;\n\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var size = feature.size;\n            return Array.isArray(size) ? [size[0]] : [size];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Uv',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var mapping = _this3.fontService.mapping;\n            var shape = feature.shape;\n\n            var icon = _this3.fontService.getGlyph(shape);\n\n            var _mapping$icon = mapping[icon],\n                x = _mapping$icon.x,\n                y = _mapping$icon.y;\n            return [x, y];\n          }\n        }\n      });\n    }\n  }, {\n    key: \"updateTexture\",\n    value: function updateTexture() {\n      var createTexture2D = this.rendererService.createTexture2D;\n      var canvas = this.fontService.canvas;\n      this.texture = createTexture2D({\n        data: canvas,\n        mag: gl.LINEAR,\n        min: gl.LINEAR,\n        width: canvas.width,\n        height: canvas.height\n      });\n    }\n  }, {\n    key: \"initIconFontGlyphs\",\n    value: function initIconFontGlyphs() {\n      var _this4 = this;\n\n      var _ref2 = this.layer.getLayerConfig(),\n          _ref2$fontWeight = _ref2.fontWeight,\n          fontWeight = _ref2$fontWeight === void 0 ? 'normal' : _ref2$fontWeight,\n          _ref2$fontFamily = _ref2.fontFamily,\n          fontFamily = _ref2$fontFamily === void 0 ? 'sans-serif' : _ref2$fontFamily;\n\n      var data = this.layer.getEncodedData();\n      var characterSet = [];\n      data.forEach(function (item) {\n        var _item$shape = item.shape,\n            shape = _item$shape === void 0 ? '' : _item$shape;\n        shape = shape.toString();\n\n        var icon = _this4.fontService.getGlyph(shape);\n\n        if (characterSet.indexOf(icon) === -1) {\n          characterSet.push(icon);\n        }\n      });\n      this.fontService.setFontOptions({\n        characterSet: characterSet,\n        fontWeight: fontWeight,\n        fontFamily: fontFamily,\n        fontSize: 48\n      });\n    }\n  }]);\n\n  return IconeModel;\n}(BaseModel);\n\nexport { IconeModel as default };","map":{"version":3,"sources":["../../../src/point/models/icon-font.ts"],"names":["IconeModel","BaseModel","opacity","u_opacity","u_texture","u_textSize","moduleName","vertexShader","fragmentShader","triangulation","primitive","gl","depth","enable","blend","name","type","AttributeType","descriptor","buffer","usage","data","FLOAT","size","update","feature","Array","mapping","shape","icon","x","y","createTexture2D","canvas","mag","min","width","height","fontWeight","fontFamily","characterSet","item","fontSize"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  IModel,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\n\nimport BaseModel from '../../core/BaseModel';\nimport { PointImageTriangulation } from '../../core/triangulation';\nimport pointImageFrag from '../shaders/image_frag.glsl';\nimport pointImageVert from '../shaders/image_vert.glsl';\ninterface IIconIFontStyleOptions {\n  opacity: number;\n  fontWeight: string;\n  fontFamily: string;\n}\n\nexport default class IconeModel extends BaseModel {\n  private texture: ITexture2D;\n\n  public getUninforms(): IModelUniform {\n    const { opacity } = this.layer.getLayerConfig() as IIconIFontStyleOptions;\n    return {\n      u_opacity: opacity || 1.0,\n      u_texture: this.texture,\n      u_textSize: [1024, this.iconService.canvasHeight || 128],\n    };\n  }\n\n  public initModels(): IModel[] {\n    this.initIconFontGlyphs();\n    this.registerBuiltinAttributes();\n    this.updateTexture();\n    this.iconService.on('imageUpdate', () => {\n      this.updateTexture();\n      this.layer.render(); // TODO 调用全局render\n    });\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'pointiconImage',\n        vertexShader: pointImageVert,\n        fragmentShader: pointImageFrag,\n        triangulation: PointImageTriangulation,\n        primitive: gl.POINTS,\n        depth: { enable: false },\n        blend: this.getBlend(),\n      }),\n    ];\n  }\n\n  public clearModels() {\n    this.dataTexture?.destroy();\n  }\n\n  protected registerBuiltinAttributes() {\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size } = feature;\n          return Array.isArray(size) ? [size[0]] : [size as number];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { mapping } = this.fontService;\n          const { shape } = feature;\n          const icon = this.fontService.getGlyph(shape as string);\n          const { x, y } = mapping[icon];\n          return [x, y];\n        },\n      },\n    });\n  }\n\n  private updateTexture() {\n    const { createTexture2D } = this.rendererService;\n    const { canvas } = this.fontService;\n    this.texture = createTexture2D({\n      data: canvas,\n      mag: gl.LINEAR,\n      min: gl.LINEAR,\n      width: canvas.width,\n      height: canvas.height,\n    });\n  }\n\n  private initIconFontGlyphs() {\n    const {\n      fontWeight = 'normal',\n      fontFamily = 'sans-serif',\n    } = this.layer.getLayerConfig() as IIconIFontStyleOptions;\n    const data = this.layer.getEncodedData();\n    const characterSet: string[] = [];\n    data.forEach((item: IEncodeFeature) => {\n      let { shape = '' } = item;\n      shape = shape.toString();\n      const icon = this.fontService.getGlyph(shape);\n      if (characterSet.indexOf(icon) === -1) {\n        characterSet.push(icon);\n      }\n    });\n    this.fontService.setFontOptions({\n      characterSet,\n      fontWeight,\n      fontFamily,\n      fontSize: 48,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}