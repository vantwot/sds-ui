{"ast":null,"code":"import { ObjectExt, Dom, Vector } from '../../util';\nimport { Util } from '../../global';\nconst defaultOptions = {\n  padding: 3,\n  rx: 0,\n  ry: 0,\n  attrs: {\n    'stroke-width': 3,\n    stroke: '#FEB663'\n  }\n};\nexport const stroke = {\n  highlight(cellView, magnet, options) {\n    const id = Private.getHighlighterId(magnet, options);\n\n    if (Private.hasCache(id)) {\n      return;\n    } // eslint-disable-next-line\n\n\n    options = ObjectExt.defaultsDeep({}, options, defaultOptions);\n    const magnetVel = Vector.create(magnet);\n    let pathData;\n    let magnetBBox;\n\n    try {\n      pathData = magnetVel.toPathData();\n    } catch (error) {\n      // Failed to get path data from magnet element.\n      // Draw a rectangle around the entire cell view instead.\n      magnetBBox = magnetVel.bbox(true\n      /* without transforms */\n      );\n      pathData = Dom.rectToPathData(Object.assign(Object.assign({}, options), magnetBBox));\n    }\n\n    const path = Dom.createSvgElement('path');\n    Dom.attr(path, Object.assign({\n      d: pathData,\n      'pointer-events': 'none',\n      'vector-effect': 'non-scaling-stroke',\n      fill: 'none'\n    }, options.attrs ? Dom.kebablizeAttrs(options.attrs) : null)); // const highlightVel = v.create('path').attr()\n\n    if (cellView.isEdgeElement(magnet)) {\n      Dom.attr(path, 'd', cellView.getConnectionPathData());\n    } else {\n      let highlightMatrix = magnetVel.getTransformToElement(cellView.container); // Add padding to the highlight element.\n\n      const padding = options.padding;\n\n      if (padding) {\n        if (magnetBBox == null) {\n          magnetBBox = magnetVel.bbox(true);\n        }\n\n        const cx = magnetBBox.x + magnetBBox.width / 2;\n        const cy = magnetBBox.y + magnetBBox.height / 2;\n        magnetBBox = Dom.transformRectangle(magnetBBox, highlightMatrix);\n        const width = Math.max(magnetBBox.width, 1);\n        const height = Math.max(magnetBBox.height, 1);\n        const sx = (width + padding) / width;\n        const sy = (height + padding) / height;\n        const paddingMatrix = Dom.createSVGMatrix({\n          a: sx,\n          b: 0,\n          c: 0,\n          d: sy,\n          e: cx - sx * cx,\n          f: cy - sy * cy\n        });\n        highlightMatrix = highlightMatrix.multiply(paddingMatrix);\n      }\n\n      Dom.transform(path, highlightMatrix);\n    }\n\n    Dom.addClass(path, Util.prefix('highlight-stroke'));\n    const cell = cellView.cell;\n\n    const removeHandler = () => Private.removeHighlighter(id);\n\n    cell.on('removed', removeHandler);\n\n    if (cell.model) {\n      cell.model.on('reseted', removeHandler);\n    }\n\n    cellView.container.appendChild(path);\n    Private.setCache(id, path);\n  },\n\n  unhighlight(cellView, magnet, opt) {\n    Private.removeHighlighter(Private.getHighlighterId(magnet, opt));\n  }\n\n};\nvar Private;\n\n(function (Private) {\n  function getHighlighterId(magnet, options) {\n    Dom.ensureId(magnet);\n    return magnet.id + JSON.stringify(options);\n  }\n\n  Private.getHighlighterId = getHighlighterId;\n  const cache = {};\n\n  function setCache(id, elem) {\n    cache[id] = elem;\n  }\n\n  Private.setCache = setCache;\n\n  function hasCache(id) {\n    return cache[id] != null;\n  }\n\n  Private.hasCache = hasCache;\n\n  function removeHighlighter(id) {\n    const elem = cache[id];\n\n    if (elem) {\n      Dom.remove(elem);\n      delete cache[id];\n    }\n  }\n\n  Private.removeHighlighter = removeHighlighter;\n})(Private || (Private = {}));","map":{"version":3,"sources":["../../../src/registry/highlighter/stroke.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { ObjectExt, Dom, Vector } from '../../util';\nimport { Util } from '../../global';\nconst defaultOptions = {\n    padding: 3,\n    rx: 0,\n    ry: 0,\n    attrs: {\n        'stroke-width': 3,\n        stroke: '#FEB663',\n    },\n};\nexport const stroke = {\n    highlight(cellView, magnet, options) {\n        const id = Private.getHighlighterId(magnet, options);\n        if (Private.hasCache(id)) {\n            return;\n        }\n        // eslint-disable-next-line\n        options = ObjectExt.defaultsDeep({}, options, defaultOptions);\n        const magnetVel = Vector.create(magnet);\n        let pathData;\n        let magnetBBox;\n        try {\n            pathData = magnetVel.toPathData();\n        }\n        catch (error) {\n            // Failed to get path data from magnet element.\n            // Draw a rectangle around the entire cell view instead.\n            magnetBBox = magnetVel.bbox(true /* without transforms */);\n            pathData = Dom.rectToPathData(Object.assign(Object.assign({}, options), magnetBBox));\n        }\n        const path = Dom.createSvgElement('path');\n        Dom.attr(path, Object.assign({ d: pathData, 'pointer-events': 'none', 'vector-effect': 'non-scaling-stroke', fill: 'none' }, (options.attrs ? Dom.kebablizeAttrs(options.attrs) : null)));\n        // const highlightVel = v.create('path').attr()\n        if (cellView.isEdgeElement(magnet)) {\n            Dom.attr(path, 'd', cellView.getConnectionPathData());\n        }\n        else {\n            let highlightMatrix = magnetVel.getTransformToElement(cellView.container);\n            // Add padding to the highlight element.\n            const padding = options.padding;\n            if (padding) {\n                if (magnetBBox == null) {\n                    magnetBBox = magnetVel.bbox(true);\n                }\n                const cx = magnetBBox.x + magnetBBox.width / 2;\n                const cy = magnetBBox.y + magnetBBox.height / 2;\n                magnetBBox = Dom.transformRectangle(magnetBBox, highlightMatrix);\n                const width = Math.max(magnetBBox.width, 1);\n                const height = Math.max(magnetBBox.height, 1);\n                const sx = (width + padding) / width;\n                const sy = (height + padding) / height;\n                const paddingMatrix = Dom.createSVGMatrix({\n                    a: sx,\n                    b: 0,\n                    c: 0,\n                    d: sy,\n                    e: cx - sx * cx,\n                    f: cy - sy * cy,\n                });\n                highlightMatrix = highlightMatrix.multiply(paddingMatrix);\n            }\n            Dom.transform(path, highlightMatrix);\n        }\n        Dom.addClass(path, Util.prefix('highlight-stroke'));\n        const cell = cellView.cell;\n        const removeHandler = () => Private.removeHighlighter(id);\n        cell.on('removed', removeHandler);\n        if (cell.model) {\n            cell.model.on('reseted', removeHandler);\n        }\n        cellView.container.appendChild(path);\n        Private.setCache(id, path);\n    },\n    unhighlight(cellView, magnet, opt) {\n        Private.removeHighlighter(Private.getHighlighterId(magnet, opt));\n    },\n};\nvar Private;\n(function (Private) {\n    function getHighlighterId(magnet, options) {\n        Dom.ensureId(magnet);\n        return magnet.id + JSON.stringify(options);\n    }\n    Private.getHighlighterId = getHighlighterId;\n    const cache = {};\n    function setCache(id, elem) {\n        cache[id] = elem;\n    }\n    Private.setCache = setCache;\n    function hasCache(id) {\n        return cache[id] != null;\n    }\n    Private.hasCache = hasCache;\n    function removeHighlighter(id) {\n        const elem = cache[id];\n        if (elem) {\n            Dom.remove(elem);\n            delete cache[id];\n        }\n    }\n    Private.removeHighlighter = removeHighlighter;\n})(Private || (Private = {}));\n//# sourceMappingURL=stroke.js.map"]},"metadata":{},"sourceType":"module"}