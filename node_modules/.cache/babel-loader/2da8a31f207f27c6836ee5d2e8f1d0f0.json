{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _isNumber from \"lodash/isNumber\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport BaseModel from '../../core/BaseModel';\nimport { GlobelPointFillTriangulation, PointFillTriangulation } from '../../core/triangulation';\nvar pointFillFrag = \"#define Animate 0.0\\n\\nuniform float u_globel;\\nuniform float u_blur : 0;\\n// uniform float u_stroke_width : 1;\\n\\nvarying mat4 styleMappingMat; // \\u4F20\\u9012\\u4ECE\\u7247\\u5143\\u4E2D\\u4F20\\u9012\\u7684\\u6620\\u5C04\\u6570\\u636E\\n\\nvarying vec4 v_data;\\nvarying vec4 v_color;\\nvarying float v_radius;\\nuniform float u_time;\\nuniform vec4 u_aimate: [ 0, 2., 1.0, 0.2 ];\\n\\n#pragma include \\\"sdf_2d\\\"\\n#pragma include \\\"picking\\\"\\n\\n\\nvoid main() {\\n  int shape = int(floor(v_data.w + 0.5));\\n\\n \\n  vec4 textrueStroke = vec4(\\n    styleMappingMat[1][0],\\n    styleMappingMat[1][1],\\n    styleMappingMat[1][2],\\n    styleMappingMat[1][3]\\n  );\\n\\n  float opacity = styleMappingMat[0][0];\\n  float stroke_opacity = styleMappingMat[0][1];\\n  float strokeWidth = styleMappingMat[0][2];\\n  vec4 strokeColor = textrueStroke == vec4(0) ? v_color : textrueStroke;\\n\\n  lowp float antialiasblur = v_data.z;\\n  float antialiased_blur = -max(u_blur, antialiasblur);\\n  // float r = v_radius / (v_radius + u_stroke_width);\\n  float r = v_radius / (v_radius + strokeWidth);\\n\\n  float outer_df;\\n  float inner_df;\\n  // 'circle', 'triangle', 'square', 'pentagon', 'hexagon', 'octogon', 'hexagram', 'rhombus', 'vesica'\\n  if (shape == 0) {\\n    outer_df = sdCircle(v_data.xy, 1.0);\\n    inner_df = sdCircle(v_data.xy, r);\\n  } else if (shape == 1) {\\n    outer_df = sdEquilateralTriangle(1.1 * v_data.xy);\\n    inner_df = sdEquilateralTriangle(1.1 / r * v_data.xy);\\n  } else if (shape == 2) {\\n    outer_df = sdBox(v_data.xy, vec2(1.));\\n    inner_df = sdBox(v_data.xy, vec2(r));\\n  } else if (shape == 3) {\\n    outer_df = sdPentagon(v_data.xy, 0.8);\\n    inner_df = sdPentagon(v_data.xy, r * 0.8);\\n  } else if (shape == 4) {\\n    outer_df = sdHexagon(v_data.xy, 0.8);\\n    inner_df = sdHexagon(v_data.xy, r * 0.8);\\n  } else if (shape == 5) {\\n    outer_df = sdOctogon(v_data.xy, 1.0);\\n    inner_df = sdOctogon(v_data.xy, r);\\n  } else if (shape == 6) {\\n    outer_df = sdHexagram(v_data.xy, 0.52);\\n    inner_df = sdHexagram(v_data.xy, r * 0.52);\\n  } else if (shape == 7) {\\n    outer_df = sdRhombus(v_data.xy, vec2(1.0));\\n    inner_df = sdRhombus(v_data.xy, vec2(r));\\n  } else if (shape == 8) {\\n    outer_df = sdVesica(v_data.xy, 1.1, 0.8);\\n    inner_df = sdVesica(v_data.xy, r * 1.1, r * 0.8);\\n  }\\n\\n  if(u_globel > 0.0) {\\n    // TODO: \\u5730\\u7403\\u6A21\\u5F0F\\u4E0B\\u907F\\u514D\\u591A\\u4F59\\u7247\\u5143\\u7ED8\\u5236\\uFF0C\\u540C\\u65F6\\u4E5F\\u80FD\\u907F\\u514D\\u6709\\u7528\\u7247\\u5143\\u5728\\u900F\\u660E\\u4E14\\u91CD\\u53E0\\u7684\\u60C5\\u51B5\\u4E0B\\u65E0\\u6CD5\\u5199\\u5165\\n    // \\u4ED8\\u51FA\\u7684\\u4EE3\\u4EF7\\u662F\\u8FB9\\u7F18\\u4F1A\\u6709\\u4E00\\u4E9B\\u952F\\u9F7F\\n    if(outer_df > antialiased_blur + 0.018) discard;\\n  }\\n  float opacity_t = smoothstep(0.0, antialiased_blur, outer_df);\\n  \\n \\n  // float color_t = u_stroke_width < 0.01 ? 0.0 : smoothstep(\\n  //   antialiased_blur,\\n  //   0.0,\\n  //   inner_df\\n  // );\\n   float color_t = strokeWidth < 0.01 ? 0.0 : smoothstep(\\n    antialiased_blur,\\n    0.0,\\n    inner_df\\n  );\\n  float PI = 3.14159;\\n  float N_RINGS = 3.0;\\n  float FREQ = 1.0;\\n\\n  gl_FragColor = mix(vec4(v_color.rgb, v_color.a * opacity), strokeColor * stroke_opacity, color_t);\\n\\n  gl_FragColor.a = gl_FragColor.a * opacity_t;\\n  if(u_aimate.x == Animate) {\\n    float d = length(v_data.xy);\\n    float intensity = clamp(cos(d * PI), 0.0, 1.0) * clamp(cos(2.0 * PI * (d * 2.0 * u_aimate.z - u_aimate.y * u_time)), 0.0, 1.0);\\n    gl_FragColor = vec4(gl_FragColor.xyz, intensity);\\n    // TODO: \\u4F18\\u5316\\u5728\\u6C34\\u6CE2\\u7EB9\\u60C5\\u51B5\\u4E0B\\u7684\\u62FE\\u53D6\\uFF08a == 0 \\u65F6\\u65E0\\u6CD5\\u62FE\\u53D6\\uFF09\\n    if(d < 0.7) {\\n      gl_FragColor.a = max(gl_FragColor.a, 0.001);\\n    }\\n  }\\n  \\n  gl_FragColor = filterColor(gl_FragColor);\\n  \\n}\\n\";\nvar pointFillVert = \"attribute vec4 a_Color;\\nattribute vec3 a_Position;\\nattribute vec3 a_Extrude;\\nattribute float a_Size;\\nattribute float a_Shape;\\n\\nvarying mat4 styleMappingMat; // \\u7528\\u4E8E\\u5C06\\u5728\\u9876\\u70B9\\u7740\\u8272\\u5668\\u4E2D\\u8BA1\\u7B97\\u597D\\u7684\\u6837\\u5F0F\\u503C\\u4F20\\u9012\\u7ED9\\u7247\\u5143\\n\\nuniform float u_globel;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\n\\nvarying vec4 v_data;\\nvarying vec4 v_color;\\nvarying float v_radius;\\n\\nuniform float u_opacity : 1;\\nuniform float u_stroke_opacity : 1;\\nuniform float u_stroke_width : 2;\\nuniform vec4 u_stroke_color : [0.0, 0.0, 0.0, 0.0];\\nuniform vec2 u_offsets;\\n\\n#pragma include \\\"styleMapping\\\"\\n#pragma include \\\"styleMappingCalOpacity\\\"\\n#pragma include \\\"styleMappingCalStrokeOpacity\\\"\\n#pragma include \\\"styleMappingCalStrokeWidth\\\"\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"picking\\\"\\n\\n\\nvoid main() {\\n  vec3 extrude = a_Extrude;\\n  float shape_type = a_Shape;\\n  float newSize = setPickingSize(a_Size);\\n\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n  styleMappingMat = mat4(\\n    0.0, 0.0, 0.0, 0.0, // opacity - strokeOpacity - strokeWidth - empty\\n    0.0, 0.0, 0.0, 0.0, // strokeR - strokeG - strokeB - strokeA\\n    0.0, 0.0, 0.0, 0.0, // offsets[0] - offsets[1]\\n    0.0, 0.0, 0.0, 0.0\\n  );\\n\\n  float rowCount = u_cellTypeLayout[0][0];    // \\u5F53\\u524D\\u7684\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u884C\\n  float columnCount = u_cellTypeLayout[0][1]; // \\u5F53\\u770B\\u5230\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u5217\\n  float columnWidth = 1.0/columnCount;  // \\u5217\\u5BBD\\n  float rowHeight = 1.0/rowCount;       // \\u884C\\u9AD8\\n  float cellCount = calCellCount(); // opacity - strokeOpacity - strokeWidth - stroke - offsets\\n  float id = a_vertexId; // \\u7B2Cn\\u4E2A\\u9876\\u70B9\\n  float cellCurrentRow = floor(id * cellCount / columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u884C\\n  float cellCurrentColumn = mod(id * cellCount, columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u5217\\n  \\n  // cell \\u56FA\\u5B9A\\u987A\\u5E8F opacity -> strokeOpacity -> strokeWidth -> stroke ... \\n  // \\u6309\\u987A\\u5E8F\\u4ECE cell \\u4E2D\\u53D6\\u503C\\u3001\\u82E5\\u6CA1\\u6709\\u5219\\u81EA\\u52A8\\u5F80\\u4E0B\\u53D6\\u503C\\n  float textureOffset = 0.0; // \\u5728 cell \\u4E2D\\u53D6\\u503C\\u7684\\u504F\\u79FB\\u91CF\\n\\n  vec2 opacityAndOffset = calOpacityAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\\n  styleMappingMat[0][0] = opacityAndOffset.r;\\n  textureOffset = opacityAndOffset.g;\\n\\n  vec2 strokeOpacityAndOffset = calStrokeOpacityAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\\n  styleMappingMat[0][1] = strokeOpacityAndOffset.r;\\n  textureOffset = strokeOpacityAndOffset.g;\\n\\n  vec2 strokeWidthAndOffset = calStrokeWidthAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\\n  styleMappingMat[0][2] = strokeWidthAndOffset.r;\\n  textureOffset = strokeWidthAndOffset.g;\\n\\n  vec4 textrueStroke = vec4(-1.0, -1.0, -1.0, -1.0);\\n  if(hasStroke()) {\\n    vec2 valueRPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    styleMappingMat[1][0] = pos2value(valueRPos, columnWidth, rowHeight); // R\\n    textureOffset += 1.0;\\n\\n    vec2 valueGPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    styleMappingMat[1][1] = pos2value(valueGPos, columnWidth, rowHeight); // G\\n    textureOffset += 1.0;\\n\\n    vec2 valueBPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    styleMappingMat[1][2] = pos2value(valueBPos, columnWidth, rowHeight); // B\\n    textureOffset += 1.0;\\n\\n    vec2 valueAPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    styleMappingMat[1][3] = pos2value(valueAPos, columnWidth, rowHeight); // A\\n    textureOffset += 1.0;\\n  } else {\\n    if(u_stroke_color == vec4(0.0)) {\\n      styleMappingMat[1][0] = v_color.r;\\n      styleMappingMat[1][1] = v_color.g;\\n      styleMappingMat[1][2] = v_color.b;\\n      styleMappingMat[1][3] = v_color.a;\\n    } else {\\n      styleMappingMat[1][0] = u_stroke_color.r;\\n      styleMappingMat[1][1] = u_stroke_color.g;\\n      styleMappingMat[1][2] = u_stroke_color.b;\\n      styleMappingMat[1][3] = u_stroke_color.a;\\n    }\\n  }\\n\\n  vec2 textrueOffsets = vec2(0.0, 0.0);\\n  if(hasOffsets()) {\\n    vec2 valueXPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    textrueOffsets.r = pos2value(valueXPos, columnWidth, rowHeight); // x\\n    textureOffset += 1.0;\\n\\n    vec2 valueYPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    textrueOffsets.g = pos2value(valueYPos, columnWidth, rowHeight); // x\\n    textureOffset += 1.0;\\n  } else {\\n    textrueOffsets = u_offsets;\\n  }\\n\\n  // cal style mapping\\n\\n  // unpack color(vec2)\\n  v_color = a_Color;\\n\\n  // radius(16-bit)\\n  v_radius = newSize;\\n\\n  // TODO: billboard\\n  // anti-alias\\n  float antialiasblur = 1.0 / u_DevicePixelRatio / (newSize + u_stroke_width);\\n\\n  // construct point coords\\n  // TODP: /abs(extrude.x) \\u662F\\u4E3A\\u4E86\\u517C\\u5BB9\\u5730\\u7403\\u6A21\\u5F0F\\n  v_data = vec4(extrude.x/abs(extrude.x), extrude.y/abs(extrude.y), antialiasblur,shape_type);\\n\\n  // vec2 offset = project_pixel(extrude * (newSize + u_stroke_width) + u_offsets);\\n  vec2 offset = project_pixel(extrude.xy * (newSize + u_stroke_width) + textrueOffsets);\\n  vec4 project_pos = project_position(vec4(a_Position.xy, 0.0, 1.0));\\n  // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, project_pixel(setPickingOrder(0.0)), 1.0));\\n\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n    gl_Position = u_Mvp * vec4(project_pos.xy + offset, 0.0, 1.0);\\n  } else {\\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, project_pixel(setPickingOrder(0.0)), 1.0));\\n  }\\n\\n  if(u_globel > 0.0) {\\n    gl_Position = u_ViewProjectionMatrix * vec4(a_Position + extrude * newSize * 0.1, 1.0);\\n  }\\n \\n  // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, 0.0, 1.0));\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nimport { mat4, vec3 } from 'gl-matrix';\n\nvar FillModel = function (_BaseModel) {\n  _inherits(FillModel, _BaseModel);\n\n  var _super = _createSuper(FillModel);\n\n  function FillModel() {\n    _classCallCheck(this, FillModel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FillModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          _ref$opacity = _ref.opacity,\n          opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n          _ref$strokeOpacity = _ref.strokeOpacity,\n          strokeOpacity = _ref$strokeOpacity === void 0 ? 1 : _ref$strokeOpacity,\n          _ref$strokeWidth = _ref.strokeWidth,\n          strokeWidth = _ref$strokeWidth === void 0 ? 0 : _ref$strokeWidth,\n          _ref$stroke = _ref.stroke,\n          stroke = _ref$stroke === void 0 ? 'rgba(0,0,0,0)' : _ref$stroke,\n          _ref$offsets = _ref.offsets,\n          offsets = _ref$offsets === void 0 ? [0, 0] : _ref$offsets;\n\n      if (this.dataTextureTest && this.dataTextureNeedUpdate({\n        opacity: opacity,\n        strokeOpacity: strokeOpacity,\n        strokeWidth: strokeWidth,\n        stroke: stroke,\n        offsets: offsets\n      })) {\n        this.judgeStyleAttributes({\n          opacity: opacity,\n          strokeOpacity: strokeOpacity,\n          strokeWidth: strokeWidth,\n          stroke: stroke,\n          offsets: offsets\n        });\n        var encodeData = this.layer.getEncodedData();\n\n        var _this$calDataFrame = this.calDataFrame(this.cellLength, encodeData, this.cellProperties),\n            data = _this$calDataFrame.data,\n            width = _this$calDataFrame.width,\n            height = _this$calDataFrame.height;\n\n        this.rowCount = height;\n        this.dataTexture = this.cellLength > 0 && data.length > 0 ? this.createTexture2D({\n          flipY: true,\n          data: data,\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: width,\n          height: height\n        }) : this.createTexture2D({\n          flipY: true,\n          data: [1],\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: 1,\n          height: 1\n        });\n      }\n\n      return {\n        u_globel: this.mapService.version === 'GLOBEL' ? 1 : 0,\n        u_dataTexture: this.dataTexture,\n        u_cellTypeLayout: this.getCellTypeLayout(),\n        u_opacity: _isNumber(opacity) ? opacity : 1.0,\n        u_stroke_opacity: _isNumber(strokeOpacity) ? strokeOpacity : 1.0,\n        u_stroke_width: _isNumber(strokeWidth) ? strokeWidth : 0.0,\n        u_stroke_color: this.getStrokeColor(stroke),\n        u_offsets: this.isOffsetStatic(offsets) ? offsets : [0, 0]\n      };\n    }\n  }, {\n    key: \"getAnimateUniforms\",\n    value: function getAnimateUniforms() {\n      var _ref2 = this.layer.getLayerConfig(),\n          animateOption = _ref2.animateOption;\n\n      return {\n        u_aimate: this.animateOption2Array(animateOption),\n        u_time: this.layer.getLayerAnimateTime()\n      };\n    }\n  }, {\n    key: \"getAttribute\",\n    value: function getAttribute() {\n      return this.styleAttributeService.createAttributesAndIndices(this.layer.getEncodedData(), PointFillTriangulation);\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      return this.buildModels();\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      var isGlobel = this.mapService.version === 'GLOBEL';\n      return [this.layer.buildLayerModel({\n        moduleName: 'pointfill',\n        vertexShader: pointFillVert,\n        fragmentShader: pointFillFrag,\n        triangulation: isGlobel ? GlobelPointFillTriangulation : PointFillTriangulation,\n        depth: {\n          enable: isGlobel\n        },\n        blend: this.getBlend()\n      })];\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$dataTexture;\n\n      (_this$dataTexture = this.dataTexture) === null || _this$dataTexture === void 0 ? void 0 : _this$dataTexture.destroy();\n    }\n  }, {\n    key: \"animateOption2Array\",\n    value: function animateOption2Array(option) {\n      return [option.enable ? 0 : 1.0, option.speed || 1, option.rings || 3, 0];\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      var _this = this;\n\n      var isGlobel = this.mapService.version === 'GLOBEL';\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'extrude',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Extrude',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var extrude;\n\n            if (isGlobel) {\n              var _vertex = _slicedToArray(vertex, 3),\n                  x = _vertex[0],\n                  y = _vertex[1],\n                  z = _vertex[2];\n\n              var n1 = vec3.fromValues(0, 0, 1);\n              var n2 = vec3.fromValues(x, 0, z);\n              var xzReg = x >= 0 ? vec3.angle(n1, n2) : Math.PI * 2 - vec3.angle(n1, n2);\n              var yReg = Math.PI * 2 - Math.asin(y / 100);\n              var m = mat4.create();\n              mat4.rotateY(m, m, xzReg);\n              mat4.rotateX(m, m, yReg);\n              var v1 = vec3.fromValues(1, 1, 0);\n              vec3.transformMat4(v1, v1, m);\n              vec3.normalize(v1, v1);\n              var v2 = vec3.fromValues(-1, 1, 0);\n              vec3.transformMat4(v2, v2, m);\n              vec3.normalize(v2, v2);\n              var v3 = vec3.fromValues(-1, -1, 0);\n              vec3.transformMat4(v3, v3, m);\n              vec3.normalize(v3, v3);\n              var v4 = vec3.fromValues(1, -1, 0);\n              vec3.transformMat4(v4, v4, m);\n              vec3.normalize(v4, v4);\n              extrude = [].concat(_toConsumableArray(v1), _toConsumableArray(v2), _toConsumableArray(v3), _toConsumableArray(v4));\n            } else {\n              extrude = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0];\n            }\n\n            var extrudeIndex = attributeIdx % 4 * 3;\n            return [extrude[extrudeIndex], extrude[extrudeIndex + 1], extrude[extrudeIndex + 2]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var _feature$size = feature.size,\n                size = _feature$size === void 0 ? 5 : _feature$size;\n            return Array.isArray(size) ? [size[0]] : [size];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'shape',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Shape',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var _feature$shape = feature.shape,\n                shape = _feature$shape === void 0 ? 2 : _feature$shape;\n\n            var shape2d = _this.layer.getLayerConfig().shape2d;\n\n            var shapeIndex = shape2d.indexOf(shape);\n            return [shapeIndex];\n          }\n        }\n      });\n    }\n  }]);\n\n  return FillModel;\n}(BaseModel);\n\nexport { FillModel as default };","map":{"version":3,"sources":["../../../src/point/models/fill.ts"],"names":["FillModel","BaseModel","opacity","strokeOpacity","strokeWidth","stroke","offsets","encodeData","data","width","height","flipY","format","gl","type","u_globel","u_dataTexture","u_cellTypeLayout","u_opacity","u_stroke_opacity","u_stroke_width","u_stroke_color","u_offsets","animateOption","u_aimate","u_time","isGlobel","moduleName","vertexShader","fragmentShader","triangulation","depth","enable","blend","option","name","AttributeType","descriptor","buffer","usage","FLOAT","size","update","x","y","z","n1","vec3","n2","xzReg","Math","yReg","m","mat4","v1","v2","v3","v4","extrude","extrudeIndex","attributeIdx","feature","Array","shape","shape2d","shapeIndex"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IAnimateOption,\n  IAttribute,\n  IElements,\n  IEncodeFeature,\n  ILayerConfig,\n  IModel,\n  IModelUniform,\n} from '@antv/l7-core';\nimport BaseModel, {\n  styleColor,\n  styleOffset,\n  styleSingle,\n} from '../../core/BaseModel';\nimport {\n  GlobelPointFillTriangulation,\n  PointFillTriangulation,\n} from '../../core/triangulation';\nimport pointFillFrag from '../shaders/fill_frag.glsl';\nimport pointFillVert from '../shaders/fill_vert.glsl';\n\nimport { isNumber } from 'lodash';\n\nimport { mat4, vec3 } from 'gl-matrix';\n\ninterface IPointLayerStyleOptions {\n  opacity: styleSingle;\n  strokeWidth: styleSingle;\n  stroke: styleColor;\n  strokeOpacity: styleSingle;\n  offsets: styleOffset;\n}\n// 判断当前使用的 style 中的变量属性是否需要进行数据映射\nexport default class FillModel extends BaseModel {\n  public getUninforms(): IModelUniform {\n    const {\n      opacity = 1,\n      strokeOpacity = 1,\n      strokeWidth = 0,\n      stroke = 'rgba(0,0,0,0)',\n      offsets = [0, 0],\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n\n    if (\n      this.dataTextureTest &&\n      this.dataTextureNeedUpdate({\n        opacity,\n        strokeOpacity,\n        strokeWidth,\n        stroke,\n        offsets,\n      })\n    ) {\n      // 判断当前的样式中哪些是需要进行数据映射的，哪些是常量，同时计算用于构建数据纹理的一些中间变量\n      this.judgeStyleAttributes({\n        opacity,\n        strokeOpacity,\n        strokeWidth,\n        stroke,\n        offsets,\n      });\n\n      const encodeData = this.layer.getEncodedData();\n      const { data, width, height } = this.calDataFrame(\n        this.cellLength,\n        encodeData,\n        this.cellProperties,\n      );\n      this.rowCount = height; // 当前数据纹理有多少行\n\n      this.dataTexture =\n        this.cellLength > 0 && data.length > 0\n          ? this.createTexture2D({\n              flipY: true,\n              data,\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width,\n              height,\n            })\n          : this.createTexture2D({\n              flipY: true,\n              data: [1],\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width: 1,\n              height: 1,\n            });\n    }\n    return {\n      u_globel: this.mapService.version === 'GLOBEL' ? 1 : 0,\n      u_dataTexture: this.dataTexture, // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]\n      u_cellTypeLayout: this.getCellTypeLayout(),\n\n      u_opacity: isNumber(opacity) ? opacity : 1.0,\n      u_stroke_opacity: isNumber(strokeOpacity) ? strokeOpacity : 1.0,\n      u_stroke_width: isNumber(strokeWidth) ? strokeWidth : 0.0,\n      u_stroke_color: this.getStrokeColor(stroke),\n      u_offsets: this.isOffsetStatic(offsets)\n        ? (offsets as [number, number])\n        : [0, 0],\n    };\n  }\n  public getAnimateUniforms(): IModelUniform {\n    const { animateOption } = this.layer.getLayerConfig() as ILayerConfig;\n    return {\n      u_aimate: this.animateOption2Array(animateOption as IAnimateOption),\n      u_time: this.layer.getLayerAnimateTime(),\n    };\n  }\n\n  public getAttribute(): {\n    attributes: {\n      [attributeName: string]: IAttribute;\n    };\n    elements: IElements;\n  } {\n    return this.styleAttributeService.createAttributesAndIndices(\n      this.layer.getEncodedData(),\n      PointFillTriangulation,\n    );\n  }\n\n  public initModels(): IModel[] {\n    return this.buildModels();\n  }\n\n  public buildModels(): IModel[] {\n    // TODO: 判断当前的点图层的模型是普通地图模式还是地球模式\n    const isGlobel = this.mapService.version === 'GLOBEL';\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'pointfill',\n        vertexShader: pointFillVert,\n        fragmentShader: pointFillFrag,\n        triangulation: isGlobel\n          ? GlobelPointFillTriangulation\n          : PointFillTriangulation,\n        // depth: { enable: false },\n        depth: { enable: isGlobel },\n        blend: this.getBlend(),\n      }),\n    ];\n  }\n\n  public clearModels() {\n    this.dataTexture?.destroy();\n  }\n\n  protected animateOption2Array(option: IAnimateOption): number[] {\n    return [option.enable ? 0 : 1.0, option.speed || 1, option.rings || 3, 0];\n  }\n  protected registerBuiltinAttributes() {\n    // TODO: 判断当前的点图层的模型是普通地图模式还是地球模式\n    const isGlobel = this.mapService.version === 'GLOBEL';\n\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'extrude',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Extrude',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          let extrude;\n          // 地球模式\n          if (isGlobel) {\n            const [x, y, z] = vertex;\n            const n1 = vec3.fromValues(0, 0, 1);\n            const n2 = vec3.fromValues(x, 0, z);\n\n            const xzReg =\n              x >= 0 ? vec3.angle(n1, n2) : Math.PI * 2 - vec3.angle(n1, n2);\n\n            const yReg = Math.PI * 2 - Math.asin(y / 100);\n\n            const m = mat4.create();\n            mat4.rotateY(m, m, xzReg);\n            mat4.rotateX(m, m, yReg);\n\n            const v1 = vec3.fromValues(1, 1, 0);\n            vec3.transformMat4(v1, v1, m);\n            vec3.normalize(v1, v1);\n\n            const v2 = vec3.fromValues(-1, 1, 0);\n            vec3.transformMat4(v2, v2, m);\n            vec3.normalize(v2, v2);\n\n            const v3 = vec3.fromValues(-1, -1, 0);\n            vec3.transformMat4(v3, v3, m);\n            vec3.normalize(v3, v3);\n\n            const v4 = vec3.fromValues(1, -1, 0);\n            vec3.transformMat4(v4, v4, m);\n            vec3.normalize(v4, v4);\n\n            extrude = [...v1, ...v2, ...v3, ...v4];\n          } else {\n            // 平面模式\n            extrude = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0];\n          }\n\n          const extrudeIndex = (attributeIdx % 4) * 3;\n          return [\n            extrude[extrudeIndex],\n            extrude[extrudeIndex + 1],\n            extrude[extrudeIndex + 2],\n          ];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 5 } = feature;\n          // console.log('featureIdx', featureIdx, feature)\n          return Array.isArray(size) ? [size[0]] : [size as number];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'shape',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Shape',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { shape = 2 } = feature;\n          const shape2d = this.layer.getLayerConfig().shape2d as string[];\n          const shapeIndex = shape2d.indexOf(shape as string);\n          return [shapeIndex];\n        },\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}