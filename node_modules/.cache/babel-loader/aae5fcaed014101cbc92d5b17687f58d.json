{"ast":null,"code":"import jQuery from 'jquery';\nvar millimeterSize;\nvar supportedUnits = {\n  px: function px(val) {\n    return val;\n  },\n  mm: function mm(val) {\n    return millimeterSize * val;\n  },\n  cm: function cm(val) {\n    return millimeterSize * val * 10;\n  },\n  in: function _in(val) {\n    return millimeterSize * val * 25.4;\n  },\n  pt: function pt(val) {\n    return millimeterSize * (25.4 * val / 72);\n  },\n  pc: function pc(val) {\n    return millimeterSize * (25.4 * val / 6);\n  }\n}; // eslint-disable-next-line\n\nexport var Unit;\n\n(function (Unit) {\n  function measure(cssWidth, cssHeight, unit) {\n    var div = jQuery('<div/>').css({\n      display: 'inline-block',\n      position: 'absolute',\n      left: -15000,\n      top: -15000,\n      width: cssWidth + (unit || ''),\n      height: cssHeight + (unit || '')\n    }).appendTo(document.body);\n    var size = {\n      width: div.width() || 0,\n      height: div.height() || 0\n    };\n    div.remove();\n    return size;\n  }\n\n  Unit.measure = measure;\n\n  function toPx(val, unit) {\n    if (millimeterSize == null) {\n      millimeterSize = measure(\"1\", \"1\", 'mm').width;\n    }\n\n    var convert = unit ? supportedUnits[unit] : null;\n\n    if (convert) {\n      return convert(val);\n    }\n\n    return val;\n  }\n\n  Unit.toPx = toPx;\n})(Unit || (Unit = {}));","map":{"version":3,"sources":["../../../src/util/unit/index.ts"],"names":[],"mappings":"AAAA,OAAO,MAAP,MAAmB,QAAnB;AAEA,IAAI,cAAJ;AAEA,IAAM,cAAc,GAAG;AACrB,EAAA,EADqB,cAClB,GADkB,EACP;AACZ,WAAO,GAAP;AACD,GAHoB;AAIrB,EAAA,EAJqB,cAIlB,GAJkB,EAIP;AACZ,WAAO,cAAc,GAAG,GAAxB;AACD,GANoB;AAOrB,EAAA,EAPqB,cAOlB,GAPkB,EAOP;AACZ,WAAO,cAAc,GAAG,GAAjB,GAAuB,EAA9B;AACD,GAToB;AAUrB,EAAA,EAVqB,eAUlB,GAVkB,EAUP;AACZ,WAAO,cAAc,GAAG,GAAjB,GAAuB,IAA9B;AACD,GAZoB;AAarB,EAAA,EAbqB,cAalB,GAbkB,EAaP;AACZ,WAAO,cAAc,IAAK,OAAO,GAAR,GAAe,EAAnB,CAArB;AACD,GAfoB;AAgBrB,EAAA,EAhBqB,cAgBlB,GAhBkB,EAgBP;AACZ,WAAO,cAAc,IAAK,OAAO,GAAR,GAAe,CAAnB,CAArB;AACD;AAlBoB,CAAvB,C,CAuBA;;AACA,OAAM,IAAW,IAAX;;AAAN,CAAA,UAAiB,IAAjB,EAAqB;AACnB,WAAgB,OAAhB,CAAwB,QAAxB,EAA0C,SAA1C,EAA6D,IAA7D,EAAwE;AACtE,QAAM,GAAG,GAAG,MAAM,CAAC,QAAD,CAAN,CACT,GADS,CACL;AACH,MAAA,OAAO,EAAE,cADN;AAEH,MAAA,QAAQ,EAAE,UAFP;AAGH,MAAA,IAAI,EAAE,CAAC,KAHJ;AAIH,MAAA,GAAG,EAAE,CAAC,KAJH;AAKH,MAAA,KAAK,EAAE,QAAQ,IAAI,IAAI,IAAI,EAAZ,CALZ;AAMH,MAAA,MAAM,EAAE,SAAS,IAAI,IAAI,IAAI,EAAZ;AANd,KADK,EAST,QATS,CASA,QAAQ,CAAC,IATT,CAAZ;AAWA,QAAM,IAAI,GAAG;AACX,MAAA,KAAK,EAAE,GAAG,CAAC,KAAJ,MAAe,CADX;AAEX,MAAA,MAAM,EAAE,GAAG,CAAC,MAAJ,MAAgB;AAFb,KAAb;AAKA,IAAA,GAAG,CAAC,MAAJ;AAEA,WAAO,IAAP;AACD;;AApBe,EAAA,IAAA,CAAA,OAAA,GAAO,OAAP;;AAsBhB,WAAgB,IAAhB,CAAqB,GAArB,EAAkC,IAAlC,EAA6C;AAC3C,QAAI,cAAc,IAAI,IAAtB,EAA4B;AAC1B,MAAA,cAAc,GAAG,OAAO,WAAW,IAAX,CAAP,CAAwB,KAAzC;AACD;;AAED,QAAM,OAAO,GAAG,IAAI,GAAG,cAAc,CAAC,IAAD,CAAjB,GAA0B,IAA9C;;AACA,QAAI,OAAJ,EAAa;AACX,aAAO,OAAO,CAAC,GAAD,CAAd;AACD;;AAED,WAAO,GAAP;AACD;;AAXe,EAAA,IAAA,CAAA,IAAA,GAAI,IAAJ;AAYjB,CAnCD,EAAiB,IAAI,KAAJ,IAAI,GAAA,EAAA,CAArB","sourceRoot":"","sourcesContent":["import jQuery from 'jquery';\nlet millimeterSize;\nconst supportedUnits = {\n    px(val) {\n        return val;\n    },\n    mm(val) {\n        return millimeterSize * val;\n    },\n    cm(val) {\n        return millimeterSize * val * 10;\n    },\n    in(val) {\n        return millimeterSize * val * 25.4;\n    },\n    pt(val) {\n        return millimeterSize * ((25.4 * val) / 72);\n    },\n    pc(val) {\n        return millimeterSize * ((25.4 * val) / 6);\n    },\n};\n// eslint-disable-next-line\nexport var Unit;\n(function (Unit) {\n    function measure(cssWidth, cssHeight, unit) {\n        const div = jQuery('<div/>')\n            .css({\n            display: 'inline-block',\n            position: 'absolute',\n            left: -15000,\n            top: -15000,\n            width: cssWidth + (unit || ''),\n            height: cssHeight + (unit || ''),\n        })\n            .appendTo(document.body);\n        const size = {\n            width: div.width() || 0,\n            height: div.height() || 0,\n        };\n        div.remove();\n        return size;\n    }\n    Unit.measure = measure;\n    function toPx(val, unit) {\n        if (millimeterSize == null) {\n            millimeterSize = measure(`1`, `1`, 'mm').width;\n        }\n        const convert = unit ? supportedUnits[unit] : null;\n        if (convert) {\n            return convert(val);\n        }\n        return val;\n    }\n    Unit.toPx = toPx;\n})(Unit || (Unit = {}));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}