{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport React from 'react';\nimport uniqBy from 'lodash/uniqBy';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { // utils\nDisposable, // context\nuseXFlowApp, // models\nMODELS, createComponentModel, // commands\nXFlowModelCommands } from '@antv/xflow-core';\nimport { TREE_ROOT_ID } from './constants';\nexport var NsNodeTreePanelModel;\n\n(function (NsNodeTreePanelModel) {\n  NsNodeTreePanelModel.id = 'TREE_PANEL_MODEL';\n\n  NsNodeTreePanelModel.useModel = model => __awaiter(this, void 0, void 0, function* () {\n    return model.awaitModel(NsNodeTreePanelModel.id);\n  });\n})(NsNodeTreePanelModel || (NsNodeTreePanelModel = {}));\n/** 方便其他组件执行Command改变Panel内部状态 */\n\n\nexport const executeNodeDndTreeCommand = (cmds, updateModel) => {\n  cmds.executeCommand(XFlowModelCommands.UPDATE_MODEL.id, {\n    getModel: modelService => __awaiter(void 0, void 0, void 0, function* () {\n      return NsNodeTreePanelModel.useModel(modelService);\n    }),\n    updateModel: updateModel\n  });\n};\nexport const useTreePanelData = props => {\n  const {\n    treeDataService,\n    searchService\n  } = props;\n  const {\n    modelService\n  } = useXFlowApp();\n  /** 使用model */\n\n  const [state, setState, panelModel] = createComponentModel({\n    treeData: [],\n    searchList: [],\n    treeNodeList: [],\n    expandedKeys: [],\n    defaultExpandAll: false,\n    keyword: ''\n  });\n  /** 注册成为全局状态，方便其他组件联动 */\n\n  React.useEffect(() => {\n    if (modelService.findDeferredModel(NsNodeTreePanelModel.id)) {\n      return;\n    }\n\n    modelService.registerModel({\n      id: NsNodeTreePanelModel.id,\n      modelFactory: () => panelModel,\n      watchChange: self => __awaiter(void 0, void 0, void 0, function* () {\n        const graphMetaModel = yield MODELS.GRAPH_META.getModel(modelService); //useContext(MODELS.GRAPH_META.id)\n\n        const fetch = meta => __awaiter(void 0, void 0, void 0, function* () {\n          const listData = yield treeDataService(meta, modelService);\n          const {\n            treeData,\n            rootNodes\n          } = NodeList2Tree(listData);\n          const currentState = yield self.getValidValue(); // 设置默认展开的keys\n\n          const expandedKeys = currentState.expandedKeys.length > 0 ? currentState.expandedKeys : rootNodes.map(i => i.id);\n          return {\n            listData,\n            treeData,\n            expandedKeys\n          };\n        });\n\n        const graphMetaDisposable = graphMetaModel.watch(meta => __awaiter(void 0, void 0, void 0, function* () {\n          const data = yield fetch(meta);\n          self.setValue({\n            treeNodeList: data.listData,\n            treeData: data.treeData,\n            expandedKeys: data.expandedKeys,\n            defaultExpandAll: false,\n            keyword: '',\n            searchList: []\n          });\n        }));\n        return Disposable.create(() => {\n          graphMetaDisposable.dispose();\n        });\n      })\n    });\n    /* eslint-disable-next-line  */\n  }, []);\n  /** 折叠文件夹 */\n\n  const onFolderExpand = React.useCallback(expandedKeys => {\n    setState(modelState => {\n      modelState.expandedKeys = expandedKeys;\n    });\n  }, [setState]);\n  /** 搜索 */\n\n  const onKeywordChange = React.useCallback(keyword => __awaiter(void 0, void 0, void 0, function* () {\n    if (!searchService) {\n      return console.warn('searchService is not defined');\n    }\n\n    if (keyword) {\n      const list = yield searchService(state.treeNodeList, keyword);\n      setState(modelState => {\n        modelState.keyword = keyword;\n        modelState.searchList = list;\n      });\n    } else {\n      setState(modelState => {\n        modelState.keyword = '';\n        modelState.searchList = [];\n      });\n    }\n  }), // eslint-disable-next-line\n  [searchService, state.treeNodeList]);\n  return {\n    state,\n    setState,\n    onKeywordChange,\n    onFolderExpand\n  };\n}; // 将list数据转换为树\n\nexport function NodeList2Tree() {\n  let treeNodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  const getGroupByIdMap = list => {\n    const uniqList = uniqBy(list, 'id');\n    const groups = uniqList.reduce((map, node) => {\n      const parentId = node.parentId || TREE_ROOT_ID;\n\n      if (!map.has(parentId)) {\n        map.set(parentId, []);\n      }\n\n      const group = map.get(parentId);\n      group.push(node);\n      return map;\n    }, new Map());\n    return groups;\n  };\n\n  const groupMap = getGroupByIdMap(cloneDeep(treeNodes));\n\n  function iterator(nodes, groupMapArgs) {\n    return nodes.map(node => {\n      if (groupMapArgs.has(node.id)) {\n        const children = groupMapArgs.get(node.id);\n        node.key = node.id;\n        node.isDirectory = true;\n        node.children = iterator(children, groupMapArgs) || [];\n      } else {\n        node.isLeaf = true;\n      }\n\n      return node;\n    });\n  }\n\n  const rootNodes = groupMap.get(TREE_ROOT_ID) || [];\n  const treeData = iterator(rootNodes, groupMap);\n  return {\n    treeData,\n    rootNodes\n  };\n}","map":{"version":3,"sources":["../../src/canvas-node-tree-panel/service.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAP,MAAmB,eAAnB;AACA,OAAO,SAAP,MAAsB,kBAAtB;AAEA,SACE;AACA,UAFF,EAGE;AACA,WAJF,EAKE;AACA,MANF,EAOE,oBAPF,EAQE;AACA,kBATF,QAUO,kBAVP;AAaA,SAAS,YAAT,QAA6B,aAA7B;AAEA,OAAM,IAAW,oBAAX;;AAAN,CAAA,UAAiB,oBAAjB,EAAqC;AACtB,EAAA,oBAAA,CAAA,EAAA,GAAK,kBAAL;;AASA,EAAA,oBAAA,CAAA,QAAA,GAAkB,KAAP,IAA+B,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACrD,WAAO,KAAK,CAAC,UAAN,CAAiB,oBAAA,CAAA,EAAjB,CAAP;AACD,GAFsD,CAA1C;AAGd,CAbD,EAAiB,oBAAoB,KAApB,oBAAoB,GAAA,EAAA,CAArC;AAeA;;;AACA,OAAO,MAAM,yBAAyB,GAAG,CACvC,IADuC,EAEvC,WAFuC,KAGrC;AACF,EAAA,IAAI,CAAC,cAAL,CACE,kBAAkB,CAAC,YAAnB,CAAgC,EADlC,EAEE;AACE,IAAA,QAAQ,EAAQ,YAAN,IAAqB,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC7B,aAAO,oBAAoB,CAAC,QAArB,CAA8B,YAA9B,CAAP;AACD,KAF8B,CADjC;AAIE,IAAA,WAAW,EAAE;AAJf,GAFF;AASD,CAbM;AAeP,OAAO,MAAM,gBAAgB,GAAI,KAAD,IAAkB;AAChD,QAAM;AAAE,IAAA,eAAF;AAAmB,IAAA;AAAnB,MAAqC,KAA3C;AACA,QAAM;AAAE,IAAA;AAAF,MAAmB,WAAW,EAApC;AACA;;AACA,QAAM,CAAC,KAAD,EAAQ,QAAR,EAAkB,UAAlB,IAAgC,oBAAoB,CAA8B;AACtF,IAAA,QAAQ,EAAE,EAD4E;AAEtF,IAAA,UAAU,EAAE,EAF0E;AAGtF,IAAA,YAAY,EAAE,EAHwE;AAItF,IAAA,YAAY,EAAE,EAJwE;AAKtF,IAAA,gBAAgB,EAAE,KALoE;AAMtF,IAAA,OAAO,EAAE;AAN6E,GAA9B,CAA1D;AAQA;;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,MAAK;AACnB,QAAI,YAAY,CAAC,iBAAb,CAA+B,oBAAoB,CAAC,EAApD,CAAJ,EAA6D;AAC3D;AACD;;AACD,IAAA,YAAY,CAAC,aAAb,CAAwD;AACtD,MAAA,EAAE,EAAE,oBAAoB,CAAC,EAD6B;AAEtD,MAAA,YAAY,EAAE,MAAM,UAFkC;AAGtD,MAAA,WAAW,EAAQ,IAAN,IAAa,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACxB,cAAM,cAAc,GAAG,MAAM,MAAM,CAAC,UAAP,CAAkB,QAAlB,CAA2B,YAA3B,CAA7B,CADwB,CAC8C;;AACtE,cAAM,KAAK,GAAS,IAAN,IAAa,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACzB,gBAAM,QAAQ,GAAG,MAAM,eAAe,CAAC,IAAD,EAAO,YAAP,CAAtC;AACA,gBAAM;AAAE,YAAA,QAAF;AAAY,YAAA;AAAZ,cAA0B,aAAa,CAAC,QAAD,CAA7C;AACA,gBAAM,YAAY,GAAG,MAAM,IAAI,CAAC,aAAL,EAA3B,CAHyB,CAIzB;;AACA,gBAAM,YAAY,GAChB,YAAY,CAAC,YAAb,CAA0B,MAA1B,GAAmC,CAAnC,GACI,YAAY,CAAC,YADjB,GAEI,SAAS,CAAC,GAAV,CAAc,CAAC,IAAI,CAAC,CAAC,EAArB,CAHN;AAKA,iBAAO;AAAE,YAAA,QAAF;AAAY,YAAA,QAAZ;AAAsB,YAAA;AAAtB,WAAP;AACD,SAX0B,CAA3B;;AAaA,cAAM,mBAAmB,GAAG,cAAc,CAAC,KAAf,CAA2B,IAAN,IAAa,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC5D,gBAAM,IAAI,GAAG,MAAM,KAAK,CAAC,IAAD,CAAxB;AACA,UAAA,IAAI,CAAC,QAAL,CAAc;AACZ,YAAA,YAAY,EAAE,IAAI,CAAC,QADP;AAEZ,YAAA,QAAQ,EAAE,IAAI,CAAC,QAFH;AAGZ,YAAA,YAAY,EAAE,IAAI,CAAC,YAHP;AAIZ,YAAA,gBAAgB,EAAE,KAJN;AAKZ,YAAA,OAAO,EAAE,EALG;AAMZ,YAAA,UAAU,EAAE;AANA,WAAd;AAQD,SAV6D,CAAlC,CAA5B;AAYA,eAAO,UAAU,CAAC,MAAX,CAAkB,MAAK;AAC5B,UAAA,mBAAmB,CAAC,OAApB;AACD,SAFM,CAAP;AAGD,OA9ByB;AAH4B,KAAxD;AAmCA;AACD,GAxCD,EAwCG,EAxCH;AA0CA;;AACA,QAAM,cAAc,GAAG,KAAK,CAAC,WAAN,CACpB,YAAD,IAA2B;AACzB,IAAA,QAAQ,CAAC,UAAU,IAAG;AACpB,MAAA,UAAU,CAAC,YAAX,GAA0B,YAA1B;AACD,KAFO,CAAR;AAGD,GALoB,EAMrB,CAAC,QAAD,CANqB,CAAvB;AASA;;AACA,QAAM,eAAe,GAAG,KAAK,CAAC,WAAN,CACf,OAAP,IAA0B,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACxB,QAAI,CAAC,aAAL,EAAoB;AAClB,aAAO,OAAO,CAAC,IAAR,CAAa,8BAAb,CAAP;AACD;;AACD,QAAI,OAAJ,EAAa;AACX,YAAM,IAAI,GAAG,MAAM,aAAa,CAAC,KAAK,CAAC,YAAP,EAAqB,OAArB,CAAhC;AACA,MAAA,QAAQ,CAAC,UAAU,IAAG;AACpB,QAAA,UAAU,CAAC,OAAX,GAAqB,OAArB;AACA,QAAA,UAAU,CAAC,UAAX,GAAwB,IAAxB;AACD,OAHO,CAAR;AAID,KAND,MAMO;AACL,MAAA,QAAQ,CAAC,UAAU,IAAG;AACpB,QAAA,UAAU,CAAC,OAAX,GAAqB,EAArB;AACA,QAAA,UAAU,CAAC,UAAX,GAAwB,EAAxB;AACD,OAHO,CAAR;AAID;AACF,GAhByB,CADJ,EAkBtB;AACA,GAAC,aAAD,EAAgB,KAAK,CAAC,YAAtB,CAnBsB,CAAxB;AAqBA,SAAO;AACL,IAAA,KADK;AAEL,IAAA,QAFK;AAGL,IAAA,eAHK;AAIL,IAAA;AAJK,GAAP;AAMD,CA7FM,C,CA+FP;;AACA,OAAM,SAAU,aAAV,GAAmD;AAAA,MAA3B,SAA2B,uEAAF,EAAE;;AACvD,QAAM,eAAe,GAAI,IAAD,IAAsB;AAC5C,UAAM,QAAQ,GAAG,MAAM,CAAC,IAAD,EAAO,IAAP,CAAvB;AACA,UAAM,MAAM,GAAG,QAAQ,CAAC,MAAT,CAAgB,CAAC,GAAD,EAAM,IAAN,KAAc;AAC3C,YAAM,QAAQ,GAAG,IAAI,CAAC,QAAL,IAAiB,YAAlC;;AACA,UAAI,CAAC,GAAG,CAAC,GAAJ,CAAQ,QAAR,CAAL,EAAwB;AACtB,QAAA,GAAG,CAAC,GAAJ,CAAQ,QAAR,EAAkB,EAAlB;AACD;;AACD,YAAM,KAAK,GAAG,GAAG,CAAC,GAAJ,CAAQ,QAAR,CAAd;AACA,MAAA,KAAK,CAAC,IAAN,CAAW,IAAX;AACA,aAAO,GAAP;AACD,KARc,EAQZ,IAAI,GAAJ,EARY,CAAf;AASA,WAAO,MAAP;AACD,GAZD;;AAcA,QAAM,QAAQ,GAAG,eAAe,CAAC,SAAS,CAAC,SAAD,CAAV,CAAhC;;AAEA,WAAS,QAAT,CAAkB,KAAlB,EAAsC,YAAtC,EAA4E;AAC1E,WAAO,KAAK,CAAC,GAAN,CAAU,IAAI,IAAG;AACtB,UAAI,YAAY,CAAC,GAAb,CAAiB,IAAI,CAAC,EAAtB,CAAJ,EAA+B;AAC7B,cAAM,QAAQ,GAAG,YAAY,CAAC,GAAb,CAAiB,IAAI,CAAC,EAAtB,CAAjB;AACA,QAAA,IAAI,CAAC,GAAL,GAAW,IAAI,CAAC,EAAhB;AACA,QAAA,IAAI,CAAC,WAAL,GAAmB,IAAnB;AACA,QAAA,IAAI,CAAC,QAAL,GAAgB,QAAQ,CAAC,QAAD,EAAW,YAAX,CAAR,IAAoC,EAApD;AACD,OALD,MAKO;AACL,QAAA,IAAI,CAAC,MAAL,GAAc,IAAd;AACD;;AACD,aAAO,IAAP;AACD,KAVM,CAAP;AAWD;;AAED,QAAM,SAAS,GAAG,QAAQ,CAAC,GAAT,CAAa,YAAb,KAA8B,EAAhD;AACA,QAAM,QAAQ,GAAG,QAAQ,CAAC,SAAD,EAAY,QAAZ,CAAzB;AACA,SAAO;AAAE,IAAA,QAAF;AAAY,IAAA;AAAZ,GAAP;AACD","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport React from 'react';\nimport uniqBy from 'lodash/uniqBy';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { \n// utils\nDisposable, \n// context\nuseXFlowApp, \n// models\nMODELS, createComponentModel, \n// commands\nXFlowModelCommands, } from '@antv/xflow-core';\nimport { TREE_ROOT_ID } from './constants';\nexport var NsNodeTreePanelModel;\n(function (NsNodeTreePanelModel) {\n    NsNodeTreePanelModel.id = 'TREE_PANEL_MODEL';\n    NsNodeTreePanelModel.useModel = (model) => __awaiter(this, void 0, void 0, function* () {\n        return model.awaitModel(NsNodeTreePanelModel.id);\n    });\n})(NsNodeTreePanelModel || (NsNodeTreePanelModel = {}));\n/** 方便其他组件执行Command改变Panel内部状态 */\nexport const executeNodeDndTreeCommand = (cmds, updateModel) => {\n    cmds.executeCommand(XFlowModelCommands.UPDATE_MODEL.id, {\n        getModel: (modelService) => __awaiter(void 0, void 0, void 0, function* () {\n            return NsNodeTreePanelModel.useModel(modelService);\n        }),\n        updateModel: updateModel,\n    });\n};\nexport const useTreePanelData = (props) => {\n    const { treeDataService, searchService } = props;\n    const { modelService } = useXFlowApp();\n    /** 使用model */\n    const [state, setState, panelModel] = createComponentModel({\n        treeData: [],\n        searchList: [],\n        treeNodeList: [],\n        expandedKeys: [],\n        defaultExpandAll: false,\n        keyword: '',\n    });\n    /** 注册成为全局状态，方便其他组件联动 */\n    React.useEffect(() => {\n        if (modelService.findDeferredModel(NsNodeTreePanelModel.id)) {\n            return;\n        }\n        modelService.registerModel({\n            id: NsNodeTreePanelModel.id,\n            modelFactory: () => panelModel,\n            watchChange: (self) => __awaiter(void 0, void 0, void 0, function* () {\n                const graphMetaModel = yield MODELS.GRAPH_META.getModel(modelService); //useContext(MODELS.GRAPH_META.id)\n                const fetch = (meta) => __awaiter(void 0, void 0, void 0, function* () {\n                    const listData = yield treeDataService(meta, modelService);\n                    const { treeData, rootNodes } = NodeList2Tree(listData);\n                    const currentState = yield self.getValidValue();\n                    // 设置默认展开的keys\n                    const expandedKeys = currentState.expandedKeys.length > 0\n                        ? currentState.expandedKeys\n                        : rootNodes.map(i => i.id);\n                    return { listData, treeData, expandedKeys };\n                });\n                const graphMetaDisposable = graphMetaModel.watch((meta) => __awaiter(void 0, void 0, void 0, function* () {\n                    const data = yield fetch(meta);\n                    self.setValue({\n                        treeNodeList: data.listData,\n                        treeData: data.treeData,\n                        expandedKeys: data.expandedKeys,\n                        defaultExpandAll: false,\n                        keyword: '',\n                        searchList: [],\n                    });\n                }));\n                return Disposable.create(() => {\n                    graphMetaDisposable.dispose();\n                });\n            }),\n        });\n        /* eslint-disable-next-line  */\n    }, []);\n    /** 折叠文件夹 */\n    const onFolderExpand = React.useCallback((expandedKeys) => {\n        setState(modelState => {\n            modelState.expandedKeys = expandedKeys;\n        });\n    }, [setState]);\n    /** 搜索 */\n    const onKeywordChange = React.useCallback((keyword) => __awaiter(void 0, void 0, void 0, function* () {\n        if (!searchService) {\n            return console.warn('searchService is not defined');\n        }\n        if (keyword) {\n            const list = yield searchService(state.treeNodeList, keyword);\n            setState(modelState => {\n                modelState.keyword = keyword;\n                modelState.searchList = list;\n            });\n        }\n        else {\n            setState(modelState => {\n                modelState.keyword = '';\n                modelState.searchList = [];\n            });\n        }\n    }), \n    // eslint-disable-next-line\n    [searchService, state.treeNodeList]);\n    return {\n        state,\n        setState,\n        onKeywordChange,\n        onFolderExpand,\n    };\n};\n// 将list数据转换为树\nexport function NodeList2Tree(treeNodes = []) {\n    const getGroupByIdMap = (list) => {\n        const uniqList = uniqBy(list, 'id');\n        const groups = uniqList.reduce((map, node) => {\n            const parentId = node.parentId || TREE_ROOT_ID;\n            if (!map.has(parentId)) {\n                map.set(parentId, []);\n            }\n            const group = map.get(parentId);\n            group.push(node);\n            return map;\n        }, new Map());\n        return groups;\n    };\n    const groupMap = getGroupByIdMap(cloneDeep(treeNodes));\n    function iterator(nodes, groupMapArgs) {\n        return nodes.map(node => {\n            if (groupMapArgs.has(node.id)) {\n                const children = groupMapArgs.get(node.id);\n                node.key = node.id;\n                node.isDirectory = true;\n                node.children = iterator(children, groupMapArgs) || [];\n            }\n            else {\n                node.isLeaf = true;\n            }\n            return node;\n        });\n    }\n    const rootNodes = groupMap.get(TREE_ROOT_ID) || [];\n    const treeData = iterator(rootNodes, groupMap);\n    return { treeData, rootNodes };\n}\n//# sourceMappingURL=service.js.map"]},"metadata":{},"sourceType":"module"}