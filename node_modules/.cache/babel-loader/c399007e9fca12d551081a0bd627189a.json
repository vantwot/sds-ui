{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { degreesToRadians, radiansToLength } from '@turf/helpers';\nvar originShift = 2 * Math.PI * 6378137 / 2.0;\nexport function extent(data) {\n  var dataExtent = [Infinity, Infinity, -Infinity, -Infinity];\n  data.forEach(function (item) {\n    var coordinates = item.coordinates;\n    caculExtent(dataExtent, coordinates);\n  });\n  return dataExtent;\n}\n\nfunction caculExtent(dataExtent, coords) {\n  if (Array.isArray(coords[0])) {\n    coords.forEach(function (coord) {\n      caculExtent(dataExtent, coord);\n    });\n  } else {\n    if (dataExtent[0] > coords[0]) {\n      dataExtent[0] = coords[0];\n    }\n\n    if (dataExtent[1] > coords[1]) {\n      dataExtent[1] = coords[1];\n    }\n\n    if (dataExtent[2] < coords[0]) {\n      dataExtent[2] = coords[0];\n    }\n\n    if (dataExtent[3] < coords[1]) {\n      dataExtent[3] = coords[1];\n    }\n  }\n\n  return dataExtent;\n}\n\nexport function tranfrormCoord(data, cb) {\n  return transform(data, cb);\n}\n\nfunction transform(item, cb) {\n  if (Array.isArray(item[0])) {\n    return item.map(function (coord) {\n      return transform(coord, cb);\n    });\n  }\n\n  return cb(item);\n}\n\nexport function lngLatToMeters(lnglat) {\n  var validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var accuracy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    enable: true,\n    decimal: 1\n  };\n  lnglat = validateLngLat(lnglat, validate);\n  var lng = lnglat[0];\n  var lat = lnglat[1];\n  var x = lng * originShift / 180.0;\n  var y = Math.log(Math.tan((90 + lat) * Math.PI / 360.0)) / (Math.PI / 180.0);\n  y = y * originShift / 180.0;\n\n  if (accuracy.enable) {\n    x = Number(x.toFixed(accuracy.decimal));\n    y = Number(y.toFixed(accuracy.decimal));\n  }\n\n  return lnglat.length === 3 ? [x, y, lnglat[2]] : [x, y];\n}\nexport function metersToLngLat(meters) {\n  var decimal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;\n  var x = meters[0];\n  var y = meters[1];\n  var lng = x / originShift * 180.0;\n  var lat = y / originShift * 180.0;\n  lat = 180 / Math.PI * (2 * Math.atan(Math.exp(lat * Math.PI / 180.0)) - Math.PI / 2.0);\n\n  if (decimal !== undefined && decimal !== null) {\n    lng = Number(lng.toFixed(decimal));\n    lat = Number(lat.toFixed(decimal));\n  }\n\n  return meters.length === 3 ? [lng, lat, meters[2]] : [lng, lat];\n}\nexport function longitude(lng) {\n  if (lng === undefined || lng === null) {\n    throw new Error('lng is required');\n  }\n\n  if (lng > 180 || lng < -180) {\n    lng = lng % 360;\n\n    if (lng > 180) {\n      lng = -360 + lng;\n    }\n\n    if (lng < -180) {\n      lng = 360 + lng;\n    }\n\n    if (lng === 0) {\n      lng = 0;\n    }\n  }\n\n  return lng;\n}\nexport function latitude(lat) {\n  if (lat === undefined || lat === null) {\n    throw new Error('lat is required');\n  }\n\n  if (lat > 90 || lat < -90) {\n    lat = lat % 180;\n\n    if (lat > 90) {\n      lat = -180 + lat;\n    }\n\n    if (lat < -90) {\n      lat = 180 + lat;\n    }\n\n    if (lat === 0) {\n      lat = 0;\n    }\n  }\n\n  return lat;\n}\nexport function validateLngLat(lnglat, validate) {\n  if (validate === false) {\n    return lnglat;\n  }\n\n  var lng = longitude(lnglat[0]);\n  var lat = latitude(lnglat[1]);\n\n  if (lat > 85) {\n    lat = 85;\n  }\n\n  if (lat < -85) {\n    lat = -85;\n  }\n\n  return lnglat.length === 3 ? [lng, lat, lnglat[2]] : [lng, lat];\n}\nexport function aProjectFlat(lnglat) {\n  var maxs = 85.0511287798;\n  var lat = Math.max(Math.min(maxs, lnglat[1]), -maxs);\n  var scale = 256 << 20;\n  var d = Math.PI / 180;\n  var x = lnglat[0] * d;\n  var y = lat * d;\n  y = Math.log(Math.tan(Math.PI / 4 + y / 2));\n  var a = 0.5 / Math.PI;\n  var b = 0.5;\n  var c = -0.5 / Math.PI;\n  d = 0.5;\n  x = scale * (a * x + b);\n  y = scale * (c * y + d);\n  return [Math.floor(x), Math.floor(y)];\n}\nexport function unProjectFlat(px) {\n  var a = 0.5 / Math.PI;\n  var b = 0.5;\n  var c = -0.5 / Math.PI;\n  var d = 0.5;\n  var scale = 256 << 20;\n\n  var _px = _slicedToArray(px, 2),\n      x = _px[0],\n      y = _px[1];\n\n  x = (x / scale - b) / a;\n  y = (y / scale - d) / c;\n  y = (Math.atan(Math.pow(Math.E, y)) - Math.PI / 4) * 2;\n  d = Math.PI / 180;\n  var lat = y / d;\n  var lng = x / d;\n  return [lng, lat];\n}\nexport function lnglatDistance(coordinates1, coordinates2, units) {\n  var dLat = degreesToRadians(coordinates2[1] - coordinates1[1]);\n  var dLon = degreesToRadians(coordinates2[0] - coordinates1[0]);\n  var lat1 = degreesToRadians(coordinates1[1]);\n  var lat2 = degreesToRadians(coordinates2[1]);\n  var a = Math.pow(Math.sin(dLat / 2), 2) + Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n  return radiansToLength(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), units = 'meters');\n}\nexport function project(lnglat) {\n  var d = Math.PI / 180;\n  var max = 85.0511287798;\n  var earthRadius = 6378137;\n  var lat = Math.max(Math.min(max, lnglat[1]), -max);\n  var sin = Math.sin(lat * d);\n  var x = earthRadius * lnglat[0] * d;\n  var y = earthRadius * Math.log((1 + sin) / (1 - sin)) / 2;\n  return [x, y];\n}\nexport function padBounds(b, bufferRatio) {\n  var heightBuffer = Math.abs(b[1][1] - b[0][1]) * bufferRatio;\n  var widthBuffer = Math.abs(b[1][0] - b[0][0]) * bufferRatio;\n  return [[b[0][0] - widthBuffer, b[0][1] - heightBuffer], [b[1][0] + widthBuffer, b[1][1] + heightBuffer]];\n}\nexport function boundsContains(b1, b2) {\n  return b1[0][0] <= b2[0][0] && b1[0][1] <= b2[0][1] && b1[1][0] >= b2[1][0] && b1[1][1] >= b2[1][1];\n}\nexport function bBoxToBounds(b1) {\n  return [[b1[0], b1[1]], [b1[2], b1[3]]];\n}","map":{"version":3,"sources":["../src/geo.ts"],"names":["originShift","Math","dataExtent","data","coordinates","item","caculExtent","Array","coords","transform","cb","validate","accuracy","enable","decimal","lnglat","validateLngLat","lng","lat","x","y","Number","meters","longitude","latitude","maxs","scale","d","a","b","c","dLat","degreesToRadians","coordinates2","coordinates1","dLon","lat1","lat2","radiansToLength","units","max","earthRadius","sin","heightBuffer","widthBuffer","b1","b2"],"mappings":"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","sourcesContent":["import {\n  BBox,\n  Coord,\n  degreesToRadians,\n  isObject,\n  radiansToLength,\n  Units,\n} from '@turf/helpers';\n\nexport type IBounds = [[number, number], [number, number]];\ninterface ILngLat {\n  lng: number;\n  lat: number;\n}\ninterface IPoint {\n  x: number;\n  y: number;\n}\nconst originShift = (2 * Math.PI * 6378137) / 2.0;\ntype Point = number[];\n/**\n * 计算地理数据范围\n * @param {dataArray} data 地理坐标数据\n * @return {Array} dataExtent\n */\nexport function extent(data: any[]): BBox {\n  const dataExtent: BBox = [Infinity, Infinity, -Infinity, -Infinity];\n  data.forEach((item) => {\n    const { coordinates } = item;\n    caculExtent(dataExtent, coordinates);\n  });\n  return dataExtent;\n}\nfunction caculExtent(dataExtent: BBox, coords: any[]) {\n  if (Array.isArray(coords[0])) {\n    coords.forEach((coord) => {\n      caculExtent(dataExtent, coord);\n    });\n  } else {\n    if (dataExtent[0] > coords[0]) {\n      dataExtent[0] = coords[0];\n    }\n    if (dataExtent[1] > coords[1]) {\n      dataExtent[1] = coords[1];\n    }\n    if (dataExtent[2] < coords[0]) {\n      dataExtent[2] = coords[0];\n    }\n    if (dataExtent[3] < coords[1]) {\n      dataExtent[3] = coords[1];\n    }\n  }\n  return dataExtent;\n}\n\nexport function tranfrormCoord(data: any[], cb: (item: any[]) => any) {\n  return transform(data, cb);\n}\nfunction transform(item: any[], cb: (item: any[]) => any): any {\n  if (Array.isArray(item[0])) {\n    return item.map((coord) => {\n      return transform(coord, cb);\n    });\n  }\n  return cb(item);\n}\nexport function lngLatToMeters(lnglat: Point): Point;\nexport function lngLatToMeters(\n  lnglat: Point,\n  validate: boolean = true,\n  accuracy = { enable: true, decimal: 1 },\n) {\n  lnglat = validateLngLat(lnglat, validate);\n  const lng = lnglat[0];\n  const lat = lnglat[1];\n  let x = (lng * originShift) / 180.0;\n  let y =\n    Math.log(Math.tan(((90 + lat) * Math.PI) / 360.0)) / (Math.PI / 180.0);\n  y = (y * originShift) / 180.0;\n  if (accuracy.enable) {\n    x = Number(x.toFixed(accuracy.decimal));\n    y = Number(y.toFixed(accuracy.decimal));\n  }\n  return lnglat.length === 3 ? [x, y, lnglat[2]] : [x, y];\n}\n\nexport function metersToLngLat(meters: Point, decimal = 6) {\n  const x = meters[0];\n  const y = meters[1];\n  let lng = (x / originShift) * 180.0;\n  let lat = (y / originShift) * 180.0;\n  lat =\n    (180 / Math.PI) *\n    (2 * Math.atan(Math.exp((lat * Math.PI) / 180.0)) - Math.PI / 2.0);\n  if (decimal !== undefined && decimal !== null) {\n    lng = Number(lng.toFixed(decimal));\n    lat = Number(lat.toFixed(decimal));\n  }\n  return meters.length === 3 ? [lng, lat, meters[2]] : [lng, lat];\n}\nexport function longitude(lng: number) {\n  if (lng === undefined || lng === null) {\n    throw new Error('lng is required');\n  }\n\n  // lngitudes cannot extends beyond +/-90 degrees\n  if (lng > 180 || lng < -180) {\n    lng = lng % 360;\n    if (lng > 180) {\n      lng = -360 + lng;\n    }\n    if (lng < -180) {\n      lng = 360 + lng;\n    }\n    if (lng === 0) {\n      lng = 0;\n    }\n  }\n  return lng;\n}\nexport function latitude(lat: number) {\n  if (lat === undefined || lat === null) {\n    throw new Error('lat is required');\n  }\n\n  if (lat > 90 || lat < -90) {\n    lat = lat % 180;\n    if (lat > 90) {\n      lat = -180 + lat;\n    }\n    if (lat < -90) {\n      lat = 180 + lat;\n    }\n    if (lat === 0) {\n      lat = 0;\n    }\n  }\n  return lat;\n}\nexport function validateLngLat(lnglat: Point, validate: boolean): Point {\n  if (validate === false) {\n    return lnglat;\n  }\n\n  const lng = longitude(lnglat[0]);\n  let lat = latitude(lnglat[1]);\n\n  // Global Mercator does not support latitudes within 85 to 90 degrees\n  if (lat > 85) {\n    lat = 85;\n  }\n  if (lat < -85) {\n    lat = -85;\n  }\n  return lnglat.length === 3 ? [lng, lat, lnglat[2]] : [lng, lat];\n}\nexport function aProjectFlat(lnglat: number[]) {\n  const maxs = 85.0511287798;\n  const lat = Math.max(Math.min(maxs, lnglat[1]), -maxs);\n  const scale = 256 << 20;\n  let d = Math.PI / 180;\n  let x = lnglat[0] * d;\n  let y = lat * d;\n  y = Math.log(Math.tan(Math.PI / 4 + y / 2));\n\n  const a = 0.5 / Math.PI;\n  const b = 0.5;\n  const c = -0.5 / Math.PI;\n  d = 0.5;\n  x = scale * (a * x + b);\n  y = scale * (c * y + d);\n  return [Math.floor(x), Math.floor(y)];\n}\nexport function unProjectFlat(px: number[]): [number, number] {\n  const a = 0.5 / Math.PI;\n  const b = 0.5;\n  const c = -0.5 / Math.PI;\n  let d = 0.5;\n  const scale = 256 << 20;\n  let [x, y] = px;\n  x = (x / scale - b) / a;\n  y = (y / scale - d) / c;\n  y = (Math.atan(Math.pow(Math.E, y)) - Math.PI / 4) * 2;\n  d = Math.PI / 180;\n  const lat = y / d;\n  const lng = x / d;\n  return [lng, lat];\n}\nexport function lnglatDistance(\n  coordinates1: [number, number],\n  coordinates2: [number, number],\n  units?: Units,\n): number {\n  const dLat = degreesToRadians(coordinates2[1] - coordinates1[1]);\n  const dLon = degreesToRadians(coordinates2[0] - coordinates1[0]);\n  const lat1 = degreesToRadians(coordinates1[1]);\n  const lat2 = degreesToRadians(coordinates2[1]);\n  const a =\n    Math.pow(Math.sin(dLat / 2), 2) +\n    Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n\n  return radiansToLength(\n    2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)),\n    (units = 'meters'),\n  );\n}\n\nexport function project(lnglat: [number, number]) {\n  const d = Math.PI / 180;\n  const max = 85.0511287798;\n  const earthRadius = 6378137;\n  const lat = Math.max(Math.min(max, lnglat[1]), -max);\n  const sin = Math.sin(lat * d);\n  const x = earthRadius * lnglat[0] * d;\n  const y = (earthRadius * Math.log((1 + sin) / (1 - sin))) / 2;\n\n  return [x, y];\n}\n\nexport function padBounds(b: IBounds, bufferRatio: number): IBounds {\n  const heightBuffer = Math.abs(b[1][1] - b[0][1]) * bufferRatio;\n  const widthBuffer = Math.abs(b[1][0] - b[0][0]) * bufferRatio;\n\n  return [\n    [b[0][0] - widthBuffer, b[0][1] - heightBuffer],\n    [b[1][0] + widthBuffer, b[1][1] + heightBuffer],\n  ];\n}\n/**\n * b1 包含 b2 返回 true 否则false\n * @param b1 bounds1\n * @param b2 bounds2\n */\nexport function boundsContains(b1: IBounds, b2: IBounds): boolean {\n  return (\n    b1[0][0] <= b2[0][0] &&\n    b1[0][1] <= b2[0][1] &&\n    b1[1][0] >= b2[1][0] &&\n    b1[1][1] >= b2[1][1]\n  );\n}\n/**\n * bbox 转换为Bounds\n * @param b1 bbox\n *\n */\nexport function bBoxToBounds(b1: BBox): IBounds {\n  return [\n    [b1[0], b1[1]],\n    [b1[2], b1[3]],\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}