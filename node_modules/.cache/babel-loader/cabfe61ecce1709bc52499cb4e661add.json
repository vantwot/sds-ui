{"ast":null,"code":"import _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Dom, NumberExt } from '../util';\nimport { Point, Rectangle } from '../geometry';\nimport { Base } from './base';\nexport var TransformManager = /*#__PURE__*/function (_Base) {\n  _inherits(TransformManager, _Base);\n\n  var _super = _createSuper(TransformManager);\n\n  function TransformManager() {\n    var _this;\n\n    _classCallCheck(this, TransformManager);\n\n    _this = _super.apply(this, arguments);\n    _this.widgets = new Map();\n    return _this;\n  }\n\n  _createClass(TransformManager, [{\n    key: \"container\",\n    get: function get() {\n      return this.graph.view.container;\n    }\n  }, {\n    key: \"viewport\",\n    get: function get() {\n      return this.graph.view.viewport;\n    }\n  }, {\n    key: \"isSelectionEnabled\",\n    get: function get() {\n      return this.options.selecting.enabled === true;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.startListening();\n      this.resize();\n    }\n  }, {\n    key: \"startListening\",\n    value: function startListening() {\n      this.graph.on('node:mouseup', this.onNodeMouseUp, this);\n      this.graph.on('node:selected', this.onNodeSelected, this);\n      this.graph.on('node:unselected', this.onNodeUnSelected, this);\n    }\n  }, {\n    key: \"stopListening\",\n    value: function stopListening() {\n      this.graph.off('node:mouseup', this.onNodeMouseUp, this);\n      this.graph.off('node:selected', this.onNodeSelected, this);\n      this.graph.off('node:unselected', this.onNodeUnSelected, this);\n    }\n  }, {\n    key: \"onNodeMouseUp\",\n    value: function onNodeMouseUp(_ref) {\n      var node = _ref.node;\n\n      if (!this.isSelectionEnabled) {\n        var widget = this.graph.hook.createTransform(node, {\n          clearAll: true\n        });\n\n        if (widget) {\n          this.widgets.set(node, widget);\n        }\n      }\n    }\n  }, {\n    key: \"onNodeSelected\",\n    value: function onNodeSelected(_ref2) {\n      var node = _ref2.node;\n\n      if (this.isSelectionEnabled) {\n        var widget = this.graph.hook.createTransform(node, {\n          clearAll: false\n        });\n\n        if (widget) {\n          this.widgets.set(node, widget);\n        }\n      }\n    }\n  }, {\n    key: \"onNodeUnSelected\",\n    value: function onNodeUnSelected(_ref3) {\n      var node = _ref3.node;\n\n      if (this.isSelectionEnabled) {\n        var widget = this.widgets.get(node);\n\n        if (widget) {\n          widget.dispose();\n        }\n\n        this.widgets.delete(node);\n      }\n    }\n    /**\n     * Returns the current transformation matrix of the graph.\n     */\n\n  }, {\n    key: \"getMatrix\",\n    value: function getMatrix() {\n      var transform = this.viewport.getAttribute('transform');\n\n      if (transform !== this.viewportTransformString) {\n        // `getCTM`: top-left relative to the SVG element\n        // `getScreenCTM`: top-left relative to the document\n        this.viewportMatrix = this.viewport.getCTM();\n        this.viewportTransformString = transform;\n      } // Clone the cached current transformation matrix.\n      // If no matrix previously stored the identity matrix is returned.\n\n\n      return Dom.createSVGMatrix(this.viewportMatrix);\n    }\n    /**\n     * Sets new transformation with the given `matrix`\n     */\n\n  }, {\n    key: \"setMatrix\",\n    value: function setMatrix(matrix) {\n      var ctm = Dom.createSVGMatrix(matrix);\n      var transform = Dom.matrixToTransformString(ctm);\n      this.viewport.setAttribute('transform', transform);\n      this.viewportMatrix = ctm;\n      this.viewportTransformString = transform;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      var w = width === undefined ? this.options.width : width;\n      var h = height === undefined ? this.options.height : height;\n      this.options.width = w;\n      this.options.height = h;\n\n      if (typeof w === 'number') {\n        w = Math.round(w);\n      }\n\n      if (typeof h === 'number') {\n        h = Math.round(h);\n      }\n\n      this.container.style.width = w == null ? '' : \"\".concat(w, \"px\");\n      this.container.style.height = h == null ? '' : \"\".concat(h, \"px\");\n      var size = this.getComputedSize();\n      this.graph.trigger('resize', Object.assign({}, size));\n      return this;\n    }\n  }, {\n    key: \"getComputedSize\",\n    value: function getComputedSize() {\n      var w = this.options.width;\n      var h = this.options.height;\n\n      if (!NumberExt.isNumber(w)) {\n        w = this.container.clientWidth;\n      }\n\n      if (!NumberExt.isNumber(h)) {\n        h = this.container.clientHeight;\n      }\n\n      return {\n        width: w,\n        height: h\n      };\n    }\n  }, {\n    key: \"getScale\",\n    value: function getScale() {\n      return Dom.matrixToScale(this.getMatrix());\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(sx) {\n      var sy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : sx;\n      var ox = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var oy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      sx = this.clampScale(sx); // eslint-disable-line\n\n      sy = this.clampScale(sy); // eslint-disable-line\n\n      if (ox || oy) {\n        var ts = this.getTranslation();\n        var tx = ts.tx - ox * (sx - 1);\n        var ty = ts.ty - oy * (sy - 1);\n\n        if (tx !== ts.tx || ty !== ts.ty) {\n          this.translate(tx, ty);\n        }\n      }\n\n      var matrix = this.getMatrix();\n      matrix.a = sx;\n      matrix.d = sy;\n      this.setMatrix(matrix);\n      this.graph.trigger('scale', {\n        sx: sx,\n        sy: sy,\n        ox: ox,\n        oy: oy\n      });\n      return this;\n    }\n  }, {\n    key: \"clampScale\",\n    value: function clampScale(scale) {\n      var range = this.graph.options.scaling;\n      return NumberExt.clamp(scale, range.min || 0.01, range.max || 16);\n    }\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      return this.getScale().sx;\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(factor, options) {\n      options = options || {}; // eslint-disable-line\n\n      var sx = factor;\n      var sy = factor;\n      var scale = this.getScale();\n      var clientSize = this.getComputedSize();\n      var cx = clientSize.width / 2;\n      var cy = clientSize.height / 2;\n\n      if (!options.absolute) {\n        sx += scale.sx;\n        sy += scale.sy;\n      }\n\n      if (options.scaleGrid) {\n        sx = Math.round(sx / options.scaleGrid) * options.scaleGrid;\n        sy = Math.round(sy / options.scaleGrid) * options.scaleGrid;\n      }\n\n      if (options.maxScale) {\n        sx = Math.min(options.maxScale, sx);\n        sy = Math.min(options.maxScale, sy);\n      }\n\n      if (options.minScale) {\n        sx = Math.max(options.minScale, sx);\n        sy = Math.max(options.minScale, sy);\n      }\n\n      if (options.center) {\n        cx = options.center.x;\n        cy = options.center.y;\n      }\n\n      sx = this.clampScale(sx);\n      sy = this.clampScale(sy);\n\n      if (cx || cy) {\n        var ts = this.getTranslation();\n        var tx = cx - (cx - ts.tx) * (sx / scale.sx);\n        var ty = cy - (cy - ts.ty) * (sy / scale.sy);\n\n        if (tx !== ts.tx || ty !== ts.ty) {\n          this.translate(tx, ty);\n        }\n      }\n\n      this.scale(sx, sy);\n      return this;\n    }\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      return Dom.matrixToRotation(this.getMatrix());\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(angle, cx, cy) {\n      if (cx == null || cy == null) {\n        var bbox = Dom.getBBox(this.graph.view.stage);\n        cx = bbox.width / 2; // eslint-disable-line\n\n        cy = bbox.height / 2; // eslint-disable-line\n      }\n\n      var ctm = this.getMatrix().translate(cx, cy).rotate(angle).translate(-cx, -cy);\n      this.setMatrix(ctm);\n      return this;\n    }\n  }, {\n    key: \"getTranslation\",\n    value: function getTranslation() {\n      return Dom.matrixToTranslation(this.getMatrix());\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(tx, ty) {\n      var matrix = this.getMatrix();\n      matrix.e = tx || 0;\n      matrix.f = ty || 0;\n      this.setMatrix(matrix);\n      var ts = this.getTranslation();\n      this.options.x = ts.tx;\n      this.options.y = ts.ty;\n      this.graph.trigger('translate', Object.assign({}, ts));\n      return this;\n    }\n  }, {\n    key: \"setOrigin\",\n    value: function setOrigin(ox, oy) {\n      return this.translate(ox || 0, oy || 0);\n    }\n  }, {\n    key: \"fitToContent\",\n    value: function fitToContent(gridWidth, gridHeight, padding, options) {\n      if (typeof gridWidth === 'object') {\n        var opts = gridWidth;\n        gridWidth = opts.gridWidth || 1; // eslint-disable-line\n\n        gridHeight = opts.gridHeight || 1; // eslint-disable-line\n\n        padding = opts.padding || 0; // eslint-disable-line\n\n        options = opts; // eslint-disable-line\n      } else {\n        gridWidth = gridWidth || 1; // eslint-disable-line\n\n        gridHeight = gridHeight || 1; // eslint-disable-line\n\n        padding = padding || 0; // eslint-disable-line\n\n        if (options == null) {\n          options = {}; // eslint-disable-line\n        }\n      }\n\n      var paddings = NumberExt.normalizeSides(padding);\n      var border = options.border || 0;\n      var contentArea = options.contentArea ? Rectangle.create(options.contentArea) : this.getContentArea(options);\n\n      if (border > 0) {\n        contentArea.inflate(border);\n      }\n\n      var scale = this.getScale();\n      var translate = this.getTranslation();\n      var sx = scale.sx;\n      var sy = scale.sy;\n      contentArea.x *= sx;\n      contentArea.y *= sy;\n      contentArea.width *= sx;\n      contentArea.height *= sy;\n      var width = Math.max(Math.ceil((contentArea.width + contentArea.x) / gridWidth), 1) * gridWidth;\n      var height = Math.max(Math.ceil((contentArea.height + contentArea.y) / gridHeight), 1) * gridHeight;\n      var tx = 0;\n      var ty = 0;\n\n      if (options.allowNewOrigin === 'negative' && contentArea.x < 0 || options.allowNewOrigin === 'positive' && contentArea.x >= 0 || options.allowNewOrigin === 'any') {\n        tx = Math.ceil(-contentArea.x / gridWidth) * gridWidth;\n        tx += paddings.left;\n        width += tx;\n      }\n\n      if (options.allowNewOrigin === 'negative' && contentArea.y < 0 || options.allowNewOrigin === 'positive' && contentArea.y >= 0 || options.allowNewOrigin === 'any') {\n        ty = Math.ceil(-contentArea.y / gridHeight) * gridHeight;\n        ty += paddings.top;\n        height += ty;\n      }\n\n      width += paddings.right;\n      height += paddings.bottom; // Make sure the resulting width and height are greater than minimum.\n\n      width = Math.max(width, options.minWidth || 0);\n      height = Math.max(height, options.minHeight || 0); // Make sure the resulting width and height are lesser than maximum.\n\n      width = Math.min(width, options.maxWidth || Number.MAX_SAFE_INTEGER);\n      height = Math.min(height, options.maxHeight || Number.MAX_SAFE_INTEGER);\n      var size = this.getComputedSize();\n      var sizeChanged = width !== size.width || height !== size.height;\n      var originChanged = tx !== translate.tx || ty !== translate.ty; // Change the dimensions only if there is a size discrepency or an origin change\n\n      if (originChanged) {\n        this.translate(tx, ty);\n      }\n\n      if (sizeChanged) {\n        this.resize(width, height);\n      }\n\n      return new Rectangle(-tx / sx, -ty / sy, width / sx, height / sy);\n    }\n  }, {\n    key: \"scaleContentToFit\",\n    value: function scaleContentToFit() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.scaleContentToFitImpl(options);\n    }\n  }, {\n    key: \"scaleContentToFitImpl\",\n    value: function scaleContentToFitImpl() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var translate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var contentBBox;\n      var contentLocalOrigin;\n\n      if (options.contentArea) {\n        var contentArea = options.contentArea;\n        contentBBox = this.graph.localToGraph(contentArea);\n        contentLocalOrigin = Point.create(contentArea);\n      } else {\n        contentBBox = this.getContentBBox(options);\n        contentLocalOrigin = this.graph.graphToLocal(contentBBox);\n      }\n\n      if (!contentBBox.width || !contentBBox.height) {\n        return;\n      }\n\n      var padding = NumberExt.normalizeSides(options.padding);\n      var minScale = options.minScale || 0;\n      var maxScale = options.maxScale || Number.MAX_SAFE_INTEGER;\n      var minScaleX = options.minScaleX || minScale;\n      var maxScaleX = options.maxScaleX || maxScale;\n      var minScaleY = options.minScaleY || minScale;\n      var maxScaleY = options.maxScaleY || maxScale;\n      var fittingBox;\n\n      if (options.viewportArea) {\n        fittingBox = options.viewportArea;\n      } else {\n        var computedSize = this.getComputedSize();\n        var currentTranslate = this.getTranslation();\n        fittingBox = {\n          x: currentTranslate.tx,\n          y: currentTranslate.ty,\n          width: computedSize.width,\n          height: computedSize.height\n        };\n      }\n\n      fittingBox = Rectangle.create(fittingBox).moveAndExpand({\n        x: padding.left,\n        y: padding.top,\n        width: -padding.left - padding.right,\n        height: -padding.top - padding.bottom\n      });\n      var currentScale = this.getScale();\n      var newSX = fittingBox.width / contentBBox.width * currentScale.sx;\n      var newSY = fittingBox.height / contentBBox.height * currentScale.sy;\n\n      if (options.preserveAspectRatio !== false) {\n        newSX = newSY = Math.min(newSX, newSY);\n      } // snap scale to a grid\n\n\n      var gridSize = options.scaleGrid;\n\n      if (gridSize) {\n        newSX = gridSize * Math.floor(newSX / gridSize);\n        newSY = gridSize * Math.floor(newSY / gridSize);\n      } // scale min/max boundaries\n\n\n      newSX = NumberExt.clamp(newSX, minScaleX, maxScaleX);\n      newSY = NumberExt.clamp(newSY, minScaleY, maxScaleY);\n      this.scale(newSX, newSY);\n\n      if (translate) {\n        var origin = this.options;\n        var newOX = fittingBox.x - contentLocalOrigin.x * newSX - origin.x;\n        var newOY = fittingBox.y - contentLocalOrigin.y * newSY - origin.y;\n        this.translate(newOX, newOY);\n      }\n    }\n  }, {\n    key: \"getContentArea\",\n    value: function getContentArea() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (options.useCellGeometry) {\n        return this.model.getAllCellsBBox() || new Rectangle();\n      }\n\n      return Dom.getBBox(this.graph.view.stage);\n    }\n  }, {\n    key: \"getContentBBox\",\n    value: function getContentBBox() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.graph.localToGraph(this.getContentArea(options));\n    }\n  }, {\n    key: \"getGraphArea\",\n    value: function getGraphArea() {\n      var rect = Rectangle.fromSize(this.getComputedSize());\n      return this.graph.graphToLocal(rect);\n    }\n  }, {\n    key: \"zoomToRect\",\n    value: function zoomToRect(rect) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var area = Rectangle.create(rect);\n      var graph = this.graph;\n      options.contentArea = area;\n\n      if (options.viewportArea == null) {\n        options.viewportArea = {\n          x: graph.options.x,\n          y: graph.options.y,\n          width: this.options.width,\n          height: this.options.height\n        };\n      }\n\n      this.scaleContentToFitImpl(options, false);\n      var center = area.getCenter();\n      this.centerPoint(center.x, center.y);\n      return this;\n    }\n  }, {\n    key: \"zoomToFit\",\n    value: function zoomToFit() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.zoomToRect(this.getContentArea(options), options);\n    }\n  }, {\n    key: \"centerPoint\",\n    value: function centerPoint(x, y) {\n      var clientSize = this.getComputedSize();\n      var scale = this.getScale();\n      var ts = this.getTranslation();\n      var cx = clientSize.width / 2;\n      var cy = clientSize.height / 2;\n      x = typeof x === 'number' ? x : cx; // eslint-disable-line\n\n      y = typeof y === 'number' ? y : cy; // eslint-disable-line\n\n      x = cx - x * scale.sx; // eslint-disable-line\n\n      y = cy - y * scale.sy; // eslint-disable-line\n\n      if (ts.tx !== x || ts.ty !== y) {\n        this.translate(x, y);\n      }\n    }\n  }, {\n    key: \"centerContent\",\n    value: function centerContent(options) {\n      var rect = this.graph.getContentArea(options);\n      var center = rect.getCenter();\n      this.centerPoint(center.x, center.y);\n    }\n  }, {\n    key: \"centerCell\",\n    value: function centerCell(cell) {\n      return this.positionCell(cell, 'center');\n    }\n  }, {\n    key: \"positionPoint\",\n    value: function positionPoint(point, x, y) {\n      var clientSize = this.getComputedSize(); // eslint-disable-next-line\n\n      x = NumberExt.normalizePercentage(x, Math.max(0, clientSize.width));\n\n      if (x < 0) {\n        x = clientSize.width + x; // eslint-disable-line\n      } // eslint-disable-next-line\n\n\n      y = NumberExt.normalizePercentage(y, Math.max(0, clientSize.height));\n\n      if (y < 0) {\n        y = clientSize.height + y; // eslint-disable-line\n      }\n\n      var ts = this.getTranslation();\n      var scale = this.getScale();\n      var dx = x - point.x * scale.sx;\n      var dy = y - point.y * scale.sy;\n\n      if (ts.tx !== dx || ts.ty !== dy) {\n        this.translate(dx, dy);\n      }\n    }\n  }, {\n    key: \"positionRect\",\n    value: function positionRect(rect, pos) {\n      var bbox = Rectangle.create(rect);\n\n      switch (pos) {\n        case 'center':\n          return this.positionPoint(bbox.getCenter(), '50%', '50%');\n\n        case 'top':\n          return this.positionPoint(bbox.getTopCenter(), '50%', 0);\n\n        case 'top-right':\n          return this.positionPoint(bbox.getTopRight(), '100%', 0);\n\n        case 'right':\n          return this.positionPoint(bbox.getRightMiddle(), '100%', '50%');\n\n        case 'bottom-right':\n          return this.positionPoint(bbox.getBottomRight(), '100%', '100%');\n\n        case 'bottom':\n          return this.positionPoint(bbox.getBottomCenter(), '50%', '100%');\n\n        case 'bottom-left':\n          return this.positionPoint(bbox.getBottomLeft(), 0, '100%');\n\n        case 'left':\n          return this.positionPoint(bbox.getLeftMiddle(), 0, '50%');\n\n        case 'top-left':\n          return this.positionPoint(bbox.getTopLeft(), 0, 0);\n\n        default:\n          return this;\n      }\n    }\n  }, {\n    key: \"positionCell\",\n    value: function positionCell(cell, pos) {\n      var bbox = cell.getBBox();\n      return this.positionRect(bbox, pos);\n    }\n  }, {\n    key: \"positionContent\",\n    value: function positionContent(pos, options) {\n      var rect = this.graph.getContentArea(options);\n      return this.positionRect(rect, pos);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.widgets.forEach(function (widget) {\n        return widget.dispose();\n      });\n      this.widgets.clear();\n      this.stopListening();\n    }\n  }]);\n\n  return TransformManager;\n}(Base);\n\n__decorate([TransformManager.dispose()], TransformManager.prototype, \"dispose\", null);","map":{"version":3,"sources":["../../src/graph/transform.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Dom, NumberExt } from '../util';\nimport { Point, Rectangle } from '../geometry';\nimport { Base } from './base';\nexport class TransformManager extends Base {\n    constructor() {\n        super(...arguments);\n        this.widgets = new Map();\n    }\n    get container() {\n        return this.graph.view.container;\n    }\n    get viewport() {\n        return this.graph.view.viewport;\n    }\n    get isSelectionEnabled() {\n        return this.options.selecting.enabled === true;\n    }\n    init() {\n        this.startListening();\n        this.resize();\n    }\n    startListening() {\n        this.graph.on('node:mouseup', this.onNodeMouseUp, this);\n        this.graph.on('node:selected', this.onNodeSelected, this);\n        this.graph.on('node:unselected', this.onNodeUnSelected, this);\n    }\n    stopListening() {\n        this.graph.off('node:mouseup', this.onNodeMouseUp, this);\n        this.graph.off('node:selected', this.onNodeSelected, this);\n        this.graph.off('node:unselected', this.onNodeUnSelected, this);\n    }\n    onNodeMouseUp({ node }) {\n        if (!this.isSelectionEnabled) {\n            const widget = this.graph.hook.createTransform(node, { clearAll: true });\n            if (widget) {\n                this.widgets.set(node, widget);\n            }\n        }\n    }\n    onNodeSelected({ node }) {\n        if (this.isSelectionEnabled) {\n            const widget = this.graph.hook.createTransform(node, { clearAll: false });\n            if (widget) {\n                this.widgets.set(node, widget);\n            }\n        }\n    }\n    onNodeUnSelected({ node }) {\n        if (this.isSelectionEnabled) {\n            const widget = this.widgets.get(node);\n            if (widget) {\n                widget.dispose();\n            }\n            this.widgets.delete(node);\n        }\n    }\n    /**\n     * Returns the current transformation matrix of the graph.\n     */\n    getMatrix() {\n        const transform = this.viewport.getAttribute('transform');\n        if (transform !== this.viewportTransformString) {\n            // `getCTM`: top-left relative to the SVG element\n            // `getScreenCTM`: top-left relative to the document\n            this.viewportMatrix = this.viewport.getCTM();\n            this.viewportTransformString = transform;\n        }\n        // Clone the cached current transformation matrix.\n        // If no matrix previously stored the identity matrix is returned.\n        return Dom.createSVGMatrix(this.viewportMatrix);\n    }\n    /**\n     * Sets new transformation with the given `matrix`\n     */\n    setMatrix(matrix) {\n        const ctm = Dom.createSVGMatrix(matrix);\n        const transform = Dom.matrixToTransformString(ctm);\n        this.viewport.setAttribute('transform', transform);\n        this.viewportMatrix = ctm;\n        this.viewportTransformString = transform;\n    }\n    resize(width, height) {\n        let w = width === undefined ? this.options.width : width;\n        let h = height === undefined ? this.options.height : height;\n        this.options.width = w;\n        this.options.height = h;\n        if (typeof w === 'number') {\n            w = Math.round(w);\n        }\n        if (typeof h === 'number') {\n            h = Math.round(h);\n        }\n        this.container.style.width = w == null ? '' : `${w}px`;\n        this.container.style.height = h == null ? '' : `${h}px`;\n        const size = this.getComputedSize();\n        this.graph.trigger('resize', Object.assign({}, size));\n        return this;\n    }\n    getComputedSize() {\n        let w = this.options.width;\n        let h = this.options.height;\n        if (!NumberExt.isNumber(w)) {\n            w = this.container.clientWidth;\n        }\n        if (!NumberExt.isNumber(h)) {\n            h = this.container.clientHeight;\n        }\n        return { width: w, height: h };\n    }\n    getScale() {\n        return Dom.matrixToScale(this.getMatrix());\n    }\n    scale(sx, sy = sx, ox = 0, oy = 0) {\n        sx = this.clampScale(sx); // eslint-disable-line\n        sy = this.clampScale(sy); // eslint-disable-line\n        if (ox || oy) {\n            const ts = this.getTranslation();\n            const tx = ts.tx - ox * (sx - 1);\n            const ty = ts.ty - oy * (sy - 1);\n            if (tx !== ts.tx || ty !== ts.ty) {\n                this.translate(tx, ty);\n            }\n        }\n        const matrix = this.getMatrix();\n        matrix.a = sx;\n        matrix.d = sy;\n        this.setMatrix(matrix);\n        this.graph.trigger('scale', { sx, sy, ox, oy });\n        return this;\n    }\n    clampScale(scale) {\n        const range = this.graph.options.scaling;\n        return NumberExt.clamp(scale, range.min || 0.01, range.max || 16);\n    }\n    getZoom() {\n        return this.getScale().sx;\n    }\n    zoom(factor, options) {\n        options = options || {}; // eslint-disable-line\n        let sx = factor;\n        let sy = factor;\n        const scale = this.getScale();\n        const clientSize = this.getComputedSize();\n        let cx = clientSize.width / 2;\n        let cy = clientSize.height / 2;\n        if (!options.absolute) {\n            sx += scale.sx;\n            sy += scale.sy;\n        }\n        if (options.scaleGrid) {\n            sx = Math.round(sx / options.scaleGrid) * options.scaleGrid;\n            sy = Math.round(sy / options.scaleGrid) * options.scaleGrid;\n        }\n        if (options.maxScale) {\n            sx = Math.min(options.maxScale, sx);\n            sy = Math.min(options.maxScale, sy);\n        }\n        if (options.minScale) {\n            sx = Math.max(options.minScale, sx);\n            sy = Math.max(options.minScale, sy);\n        }\n        if (options.center) {\n            cx = options.center.x;\n            cy = options.center.y;\n        }\n        sx = this.clampScale(sx);\n        sy = this.clampScale(sy);\n        if (cx || cy) {\n            const ts = this.getTranslation();\n            const tx = cx - (cx - ts.tx) * (sx / scale.sx);\n            const ty = cy - (cy - ts.ty) * (sy / scale.sy);\n            if (tx !== ts.tx || ty !== ts.ty) {\n                this.translate(tx, ty);\n            }\n        }\n        this.scale(sx, sy);\n        return this;\n    }\n    getRotation() {\n        return Dom.matrixToRotation(this.getMatrix());\n    }\n    rotate(angle, cx, cy) {\n        if (cx == null || cy == null) {\n            const bbox = Dom.getBBox(this.graph.view.stage);\n            cx = bbox.width / 2; // eslint-disable-line\n            cy = bbox.height / 2; // eslint-disable-line\n        }\n        const ctm = this.getMatrix()\n            .translate(cx, cy)\n            .rotate(angle)\n            .translate(-cx, -cy);\n        this.setMatrix(ctm);\n        return this;\n    }\n    getTranslation() {\n        return Dom.matrixToTranslation(this.getMatrix());\n    }\n    translate(tx, ty) {\n        const matrix = this.getMatrix();\n        matrix.e = tx || 0;\n        matrix.f = ty || 0;\n        this.setMatrix(matrix);\n        const ts = this.getTranslation();\n        this.options.x = ts.tx;\n        this.options.y = ts.ty;\n        this.graph.trigger('translate', Object.assign({}, ts));\n        return this;\n    }\n    setOrigin(ox, oy) {\n        return this.translate(ox || 0, oy || 0);\n    }\n    fitToContent(gridWidth, gridHeight, padding, options) {\n        if (typeof gridWidth === 'object') {\n            const opts = gridWidth;\n            gridWidth = opts.gridWidth || 1; // eslint-disable-line\n            gridHeight = opts.gridHeight || 1; // eslint-disable-line\n            padding = opts.padding || 0; // eslint-disable-line\n            options = opts; // eslint-disable-line\n        }\n        else {\n            gridWidth = gridWidth || 1; // eslint-disable-line\n            gridHeight = gridHeight || 1; // eslint-disable-line\n            padding = padding || 0; // eslint-disable-line\n            if (options == null) {\n                options = {}; // eslint-disable-line\n            }\n        }\n        const paddings = NumberExt.normalizeSides(padding);\n        const border = options.border || 0;\n        const contentArea = options.contentArea\n            ? Rectangle.create(options.contentArea)\n            : this.getContentArea(options);\n        if (border > 0) {\n            contentArea.inflate(border);\n        }\n        const scale = this.getScale();\n        const translate = this.getTranslation();\n        const sx = scale.sx;\n        const sy = scale.sy;\n        contentArea.x *= sx;\n        contentArea.y *= sy;\n        contentArea.width *= sx;\n        contentArea.height *= sy;\n        let width = Math.max(Math.ceil((contentArea.width + contentArea.x) / gridWidth), 1) *\n            gridWidth;\n        let height = Math.max(Math.ceil((contentArea.height + contentArea.y) / gridHeight), 1) * gridHeight;\n        let tx = 0;\n        let ty = 0;\n        if ((options.allowNewOrigin === 'negative' && contentArea.x < 0) ||\n            (options.allowNewOrigin === 'positive' && contentArea.x >= 0) ||\n            options.allowNewOrigin === 'any') {\n            tx = Math.ceil(-contentArea.x / gridWidth) * gridWidth;\n            tx += paddings.left;\n            width += tx;\n        }\n        if ((options.allowNewOrigin === 'negative' && contentArea.y < 0) ||\n            (options.allowNewOrigin === 'positive' && contentArea.y >= 0) ||\n            options.allowNewOrigin === 'any') {\n            ty = Math.ceil(-contentArea.y / gridHeight) * gridHeight;\n            ty += paddings.top;\n            height += ty;\n        }\n        width += paddings.right;\n        height += paddings.bottom;\n        // Make sure the resulting width and height are greater than minimum.\n        width = Math.max(width, options.minWidth || 0);\n        height = Math.max(height, options.minHeight || 0);\n        // Make sure the resulting width and height are lesser than maximum.\n        width = Math.min(width, options.maxWidth || Number.MAX_SAFE_INTEGER);\n        height = Math.min(height, options.maxHeight || Number.MAX_SAFE_INTEGER);\n        const size = this.getComputedSize();\n        const sizeChanged = width !== size.width || height !== size.height;\n        const originChanged = tx !== translate.tx || ty !== translate.ty;\n        // Change the dimensions only if there is a size discrepency or an origin change\n        if (originChanged) {\n            this.translate(tx, ty);\n        }\n        if (sizeChanged) {\n            this.resize(width, height);\n        }\n        return new Rectangle(-tx / sx, -ty / sy, width / sx, height / sy);\n    }\n    scaleContentToFit(options = {}) {\n        this.scaleContentToFitImpl(options);\n    }\n    scaleContentToFitImpl(options = {}, translate = true) {\n        let contentBBox;\n        let contentLocalOrigin;\n        if (options.contentArea) {\n            const contentArea = options.contentArea;\n            contentBBox = this.graph.localToGraph(contentArea);\n            contentLocalOrigin = Point.create(contentArea);\n        }\n        else {\n            contentBBox = this.getContentBBox(options);\n            contentLocalOrigin = this.graph.graphToLocal(contentBBox);\n        }\n        if (!contentBBox.width || !contentBBox.height) {\n            return;\n        }\n        const padding = NumberExt.normalizeSides(options.padding);\n        const minScale = options.minScale || 0;\n        const maxScale = options.maxScale || Number.MAX_SAFE_INTEGER;\n        const minScaleX = options.minScaleX || minScale;\n        const maxScaleX = options.maxScaleX || maxScale;\n        const minScaleY = options.minScaleY || minScale;\n        const maxScaleY = options.maxScaleY || maxScale;\n        let fittingBox;\n        if (options.viewportArea) {\n            fittingBox = options.viewportArea;\n        }\n        else {\n            const computedSize = this.getComputedSize();\n            const currentTranslate = this.getTranslation();\n            fittingBox = {\n                x: currentTranslate.tx,\n                y: currentTranslate.ty,\n                width: computedSize.width,\n                height: computedSize.height,\n            };\n        }\n        fittingBox = Rectangle.create(fittingBox).moveAndExpand({\n            x: padding.left,\n            y: padding.top,\n            width: -padding.left - padding.right,\n            height: -padding.top - padding.bottom,\n        });\n        const currentScale = this.getScale();\n        let newSX = (fittingBox.width / contentBBox.width) * currentScale.sx;\n        let newSY = (fittingBox.height / contentBBox.height) * currentScale.sy;\n        if (options.preserveAspectRatio !== false) {\n            newSX = newSY = Math.min(newSX, newSY);\n        }\n        // snap scale to a grid\n        const gridSize = options.scaleGrid;\n        if (gridSize) {\n            newSX = gridSize * Math.floor(newSX / gridSize);\n            newSY = gridSize * Math.floor(newSY / gridSize);\n        }\n        // scale min/max boundaries\n        newSX = NumberExt.clamp(newSX, minScaleX, maxScaleX);\n        newSY = NumberExt.clamp(newSY, minScaleY, maxScaleY);\n        this.scale(newSX, newSY);\n        if (translate) {\n            const origin = this.options;\n            const newOX = fittingBox.x - contentLocalOrigin.x * newSX - origin.x;\n            const newOY = fittingBox.y - contentLocalOrigin.y * newSY - origin.y;\n            this.translate(newOX, newOY);\n        }\n    }\n    getContentArea(options = {}) {\n        if (options.useCellGeometry) {\n            return this.model.getAllCellsBBox() || new Rectangle();\n        }\n        return Dom.getBBox(this.graph.view.stage);\n    }\n    getContentBBox(options = {}) {\n        return this.graph.localToGraph(this.getContentArea(options));\n    }\n    getGraphArea() {\n        const rect = Rectangle.fromSize(this.getComputedSize());\n        return this.graph.graphToLocal(rect);\n    }\n    zoomToRect(rect, options = {}) {\n        const area = Rectangle.create(rect);\n        const graph = this.graph;\n        options.contentArea = area;\n        if (options.viewportArea == null) {\n            options.viewportArea = {\n                x: graph.options.x,\n                y: graph.options.y,\n                width: this.options.width,\n                height: this.options.height,\n            };\n        }\n        this.scaleContentToFitImpl(options, false);\n        const center = area.getCenter();\n        this.centerPoint(center.x, center.y);\n        return this;\n    }\n    zoomToFit(options = {}) {\n        return this.zoomToRect(this.getContentArea(options), options);\n    }\n    centerPoint(x, y) {\n        const clientSize = this.getComputedSize();\n        const scale = this.getScale();\n        const ts = this.getTranslation();\n        const cx = clientSize.width / 2;\n        const cy = clientSize.height / 2;\n        x = typeof x === 'number' ? x : cx; // eslint-disable-line\n        y = typeof y === 'number' ? y : cy; // eslint-disable-line\n        x = cx - x * scale.sx; // eslint-disable-line\n        y = cy - y * scale.sy; // eslint-disable-line\n        if (ts.tx !== x || ts.ty !== y) {\n            this.translate(x, y);\n        }\n    }\n    centerContent(options) {\n        const rect = this.graph.getContentArea(options);\n        const center = rect.getCenter();\n        this.centerPoint(center.x, center.y);\n    }\n    centerCell(cell) {\n        return this.positionCell(cell, 'center');\n    }\n    positionPoint(point, x, y) {\n        const clientSize = this.getComputedSize();\n        // eslint-disable-next-line\n        x = NumberExt.normalizePercentage(x, Math.max(0, clientSize.width));\n        if (x < 0) {\n            x = clientSize.width + x; // eslint-disable-line\n        }\n        // eslint-disable-next-line\n        y = NumberExt.normalizePercentage(y, Math.max(0, clientSize.height));\n        if (y < 0) {\n            y = clientSize.height + y; // eslint-disable-line\n        }\n        const ts = this.getTranslation();\n        const scale = this.getScale();\n        const dx = x - point.x * scale.sx;\n        const dy = y - point.y * scale.sy;\n        if (ts.tx !== dx || ts.ty !== dy) {\n            this.translate(dx, dy);\n        }\n    }\n    positionRect(rect, pos) {\n        const bbox = Rectangle.create(rect);\n        switch (pos) {\n            case 'center':\n                return this.positionPoint(bbox.getCenter(), '50%', '50%');\n            case 'top':\n                return this.positionPoint(bbox.getTopCenter(), '50%', 0);\n            case 'top-right':\n                return this.positionPoint(bbox.getTopRight(), '100%', 0);\n            case 'right':\n                return this.positionPoint(bbox.getRightMiddle(), '100%', '50%');\n            case 'bottom-right':\n                return this.positionPoint(bbox.getBottomRight(), '100%', '100%');\n            case 'bottom':\n                return this.positionPoint(bbox.getBottomCenter(), '50%', '100%');\n            case 'bottom-left':\n                return this.positionPoint(bbox.getBottomLeft(), 0, '100%');\n            case 'left':\n                return this.positionPoint(bbox.getLeftMiddle(), 0, '50%');\n            case 'top-left':\n                return this.positionPoint(bbox.getTopLeft(), 0, 0);\n            default:\n                return this;\n        }\n    }\n    positionCell(cell, pos) {\n        const bbox = cell.getBBox();\n        return this.positionRect(bbox, pos);\n    }\n    positionContent(pos, options) {\n        const rect = this.graph.getContentArea(options);\n        return this.positionRect(rect, pos);\n    }\n    dispose() {\n        this.widgets.forEach((widget) => widget.dispose());\n        this.widgets.clear();\n        this.stopListening();\n    }\n}\n__decorate([\n    TransformManager.dispose()\n], TransformManager.prototype, \"dispose\", null);\n//# sourceMappingURL=transform.js.map"]},"metadata":{},"sourceType":"module"}