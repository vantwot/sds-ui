{"ast":null,"code":"export { isNaN, isNumber, isFinite, isInteger, isSafeInteger, clamp, inRange, toFinite, toNumber, toInteger, toSafeInteger, parseInt } from 'lodash-es';\nexport { isNumeric } from '../lang/lang';\n/**\n * Returns the remainder of division of `n` by `m`. You should use this\n * instead of the built-in operation as the built-in operation does not\n * properly handle negative numbers.\n */\n\nexport function mod(n, m) {\n  return (n % m + m) % m;\n}\nexport function random(lower, upper) {\n  if (upper == null) {\n    upper = lower == null ? 1 : lower; // eslint-disable-line\n\n    lower = 0; // eslint-disable-line\n  } else if (upper < lower) {\n    const tmp = lower;\n    lower = upper; // eslint-disable-line\n\n    upper = tmp; // eslint-disable-line\n  }\n\n  return Math.floor(Math.random() * (upper - lower + 1) + lower);\n}\nexport function isPercentage(val) {\n  return typeof val === 'string' && val.slice(-1) === '%';\n}\nexport function normalizePercentage(num, ref) {\n  if (num == null) {\n    return 0;\n  }\n\n  let raw;\n\n  if (typeof num === 'string') {\n    raw = parseFloat(num);\n\n    if (isPercentage(num)) {\n      raw /= 100;\n\n      if (Number.isFinite(raw)) {\n        return raw * ref;\n      }\n    }\n  } else {\n    raw = num;\n  }\n\n  if (!Number.isFinite(raw)) {\n    return 0;\n  }\n\n  if (raw > 0 && raw < 1) {\n    return raw * ref;\n  }\n\n  return raw;\n}\nexport function parseCssNumeric(val, units) {\n  function getUnit(regexp) {\n    const matches = new RegExp(`(?:\\\\d+(?:\\\\.\\\\d+)*)(${regexp})$`).exec(val);\n\n    if (!matches) {\n      return null;\n    }\n\n    return matches[1];\n  }\n\n  const number = parseFloat(val);\n\n  if (Number.isNaN(number)) {\n    return null;\n  } // determine the unit\n\n\n  let regexp;\n\n  if (units == null) {\n    // accept any unit, as well as no unit\n    regexp = '[A-Za-z]*';\n  } else if (Array.isArray(units)) {\n    if (units.length === 0) {\n      return null;\n    }\n\n    regexp = units.join('|');\n  } else if (typeof units === 'string') {\n    regexp = units;\n  }\n\n  const unit = getUnit(regexp);\n\n  if (unit === null) {\n    return null;\n  }\n\n  return {\n    unit,\n    value: number\n  };\n}\nexport function normalizeSides(box) {\n  if (typeof box === 'object') {\n    let left = 0;\n    let top = 0;\n    let right = 0;\n    let bottom = 0;\n\n    if (box.vertical != null && Number.isFinite(box.vertical)) {\n      top = bottom = box.vertical;\n    }\n\n    if (box.horizontal != null && Number.isFinite(box.horizontal)) {\n      right = left = box.horizontal;\n    }\n\n    if (box.left != null && Number.isFinite(box.left)) left = box.left;\n    if (box.top != null && Number.isFinite(box.top)) top = box.top;\n    if (box.right != null && Number.isFinite(box.right)) right = box.right;\n    if (box.bottom != null && Number.isFinite(box.bottom)) bottom = box.bottom;\n    return {\n      top,\n      right,\n      bottom,\n      left\n    };\n  }\n\n  let val = 0;\n\n  if (box != null && Number.isFinite(box)) {\n    val = box;\n  }\n\n  return {\n    top: val,\n    right: val,\n    bottom: val,\n    left: val\n  };\n}","map":{"version":3,"sources":["../../../src/util/number/number.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["export { isNaN, isNumber, isFinite, isInteger, isSafeInteger, clamp, inRange, toFinite, toNumber, toInteger, toSafeInteger, parseInt, } from 'lodash-es';\nexport { isNumeric } from '../lang/lang';\n/**\n * Returns the remainder of division of `n` by `m`. You should use this\n * instead of the built-in operation as the built-in operation does not\n * properly handle negative numbers.\n */\nexport function mod(n, m) {\n    return ((n % m) + m) % m;\n}\nexport function random(lower, upper) {\n    if (upper == null) {\n        upper = lower == null ? 1 : lower; // eslint-disable-line\n        lower = 0; // eslint-disable-line\n    }\n    else if (upper < lower) {\n        const tmp = lower;\n        lower = upper; // eslint-disable-line\n        upper = tmp; // eslint-disable-line\n    }\n    return Math.floor(Math.random() * (upper - lower + 1) + lower);\n}\nexport function isPercentage(val) {\n    return typeof val === 'string' && val.slice(-1) === '%';\n}\nexport function normalizePercentage(num, ref) {\n    if (num == null) {\n        return 0;\n    }\n    let raw;\n    if (typeof num === 'string') {\n        raw = parseFloat(num);\n        if (isPercentage(num)) {\n            raw /= 100;\n            if (Number.isFinite(raw)) {\n                return raw * ref;\n            }\n        }\n    }\n    else {\n        raw = num;\n    }\n    if (!Number.isFinite(raw)) {\n        return 0;\n    }\n    if (raw > 0 && raw < 1) {\n        return raw * ref;\n    }\n    return raw;\n}\nexport function parseCssNumeric(val, units) {\n    function getUnit(regexp) {\n        const matches = new RegExp(`(?:\\\\d+(?:\\\\.\\\\d+)*)(${regexp})$`).exec(val);\n        if (!matches) {\n            return null;\n        }\n        return matches[1];\n    }\n    const number = parseFloat(val);\n    if (Number.isNaN(number)) {\n        return null;\n    }\n    // determine the unit\n    let regexp;\n    if (units == null) {\n        // accept any unit, as well as no unit\n        regexp = '[A-Za-z]*';\n    }\n    else if (Array.isArray(units)) {\n        if (units.length === 0) {\n            return null;\n        }\n        regexp = units.join('|');\n    }\n    else if (typeof units === 'string') {\n        regexp = units;\n    }\n    const unit = getUnit(regexp);\n    if (unit === null) {\n        return null;\n    }\n    return {\n        unit,\n        value: number,\n    };\n}\nexport function normalizeSides(box) {\n    if (typeof box === 'object') {\n        let left = 0;\n        let top = 0;\n        let right = 0;\n        let bottom = 0;\n        if (box.vertical != null && Number.isFinite(box.vertical)) {\n            top = bottom = box.vertical;\n        }\n        if (box.horizontal != null && Number.isFinite(box.horizontal)) {\n            right = left = box.horizontal;\n        }\n        if (box.left != null && Number.isFinite(box.left))\n            left = box.left;\n        if (box.top != null && Number.isFinite(box.top))\n            top = box.top;\n        if (box.right != null && Number.isFinite(box.right))\n            right = box.right;\n        if (box.bottom != null && Number.isFinite(box.bottom))\n            bottom = box.bottom;\n        return { top, right, bottom, left };\n    }\n    let val = 0;\n    if (box != null && Number.isFinite(box)) {\n        val = box;\n    }\n    return { top: val, right: val, bottom: val, left: val };\n}\n//# sourceMappingURL=number.js.map"]},"metadata":{},"sourceType":"module"}