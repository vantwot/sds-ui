{"ast":null,"code":"import React from 'react';\nimport { createPath } from '../../utils';\nimport { NODE_WIDTH, NODE_HEIGHT, NODE_PADDING, DefaultNodeConfig } from '../../constants';\nexport const DisplayNode = props => {\n  const {\n    size = {\n      width: NODE_WIDTH,\n      height: NODE_HEIGHT\n    },\n    data = {}\n  } = props;\n  const {\n    stroke = DefaultNodeConfig.stroke,\n    label = DefaultNodeConfig.label,\n    fill = DefaultNodeConfig.fill,\n    fontFill = DefaultNodeConfig.fontFill,\n    fontSize = DefaultNodeConfig.fontSize\n  } = data;\n  const {\n    width,\n    height\n  } = size;\n  const sx = Math.min(height, width) / 3;\n  const dx = Math.min(Math.tan(Math.PI / 6) * (height / 2), width / 3);\n  const path = [['M', dx, NODE_PADDING], ['L', width - sx, NODE_PADDING], ['C', width - 2 * NODE_PADDING, NODE_PADDING, width - 2 * NODE_PADDING, height / 2], ['', width - 2 * NODE_PADDING, height / 2], ['C', width - 2 * NODE_PADDING, height / 2, width - 2 * NODE_PADDING, height - 2 * NODE_PADDING], ['', width - sx, height - 2 * NODE_PADDING], ['L', dx, height - 2 * NODE_PADDING], ['L', NODE_PADDING, height / 2], ['Z']];\n  return React.createElement(\"svg\", {\n    viewBox: `0 0 ${width} ${height}`,\n    // viewBox={`0 0 40 30`}\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"100%\",\n    height: \"100%\"\n  }, React.createElement(\"path\", {\n    d: createPath(path),\n    fill: fill,\n    stroke: stroke\n  }), React.createElement(\"text\", {\n    x: width / 2,\n    y: height / 2,\n    fill: fontFill,\n    textAnchor: \"middle\",\n    alignmentBaseline: \"middle\",\n    fontSize: fontSize\n  }, label), \"Sorry, your browser does not support inline SVG.\");\n};","map":{"version":3,"sources":["../../../../src/flowchart-node-panel/nodes/display/index.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB;AAEA,SAAS,UAAT,QAA2B,aAA3B;AACA,SAAS,UAAT,EAAqB,WAArB,EAAkC,YAAlC,EAAgD,iBAAhD,QAAyE,iBAAzE;AAEA,OAAO,MAAM,WAAW,GAAwB,KAAK,IAAG;AACtD,QAAM;AAAE,IAAA,IAAI,GAAG;AAAE,MAAA,KAAK,EAAE,UAAT;AAAqB,MAAA,MAAM,EAAE;AAA7B,KAAT;AAAqD,IAAA,IAAI,GAAG;AAA5D,MAAmE,KAAzE;AACA,QAAM;AACJ,IAAA,MAAM,GAAG,iBAAiB,CAAC,MADvB;AAEJ,IAAA,KAAK,GAAG,iBAAiB,CAAC,KAFtB;AAGJ,IAAA,IAAI,GAAG,iBAAiB,CAAC,IAHrB;AAIJ,IAAA,QAAQ,GAAG,iBAAiB,CAAC,QAJzB;AAKJ,IAAA,QAAQ,GAAG,iBAAiB,CAAC;AALzB,MAMF,IANJ;AAOA,QAAM;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,MAAoB,IAA1B;AACA,QAAM,EAAE,GAAG,IAAI,CAAC,GAAL,CAAS,MAAT,EAAiB,KAAjB,IAA0B,CAArC;AACA,QAAM,EAAE,GAAG,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,EAAL,GAAU,CAAnB,KAAyB,MAAM,GAAG,CAAlC,CAAT,EAA+C,KAAK,GAAG,CAAvD,CAAX;AACA,QAAM,IAAI,GAAG,CACX,CAAC,GAAD,EAAM,EAAN,EAAU,YAAV,CADW,EAEX,CAAC,GAAD,EAAM,KAAK,GAAG,EAAd,EAAkB,YAAlB,CAFW,EAGX,CAAC,GAAD,EAAM,KAAK,GAAG,IAAI,YAAlB,EAAgC,YAAhC,EAA8C,KAAK,GAAG,IAAI,YAA1D,EAAwE,MAAM,GAAG,CAAjF,CAHW,EAIX,CAAC,EAAD,EAAK,KAAK,GAAG,IAAI,YAAjB,EAA+B,MAAM,GAAG,CAAxC,CAJW,EAKX,CACE,GADF,EAEE,KAAK,GAAG,IAAI,YAFd,EAGE,MAAM,GAAG,CAHX,EAIE,KAAK,GAAG,IAAI,YAJd,EAKE,MAAM,GAAG,IAAI,YALf,CALW,EAYX,CAAC,EAAD,EAAK,KAAK,GAAG,EAAb,EAAiB,MAAM,GAAG,IAAI,YAA9B,CAZW,EAaX,CAAC,GAAD,EAAM,EAAN,EAAU,MAAM,GAAG,IAAI,YAAvB,CAbW,EAcX,CAAC,GAAD,EAAM,YAAN,EAAoB,MAAM,GAAG,CAA7B,CAdW,EAeX,CAAC,GAAD,CAfW,CAAb;AAkBA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,IAAA,OAAO,EAAE,OAAO,KAAK,IAAI,MAAM,EADjC;AAEE;AACA,IAAA,KAAK,EAAC,4BAHR;AAIE,IAAA,KAAK,EAAC,MAJR;AAKE,IAAA,MAAM,EAAC;AALT,GAAA,EAOE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,CAAC,EAAE,UAAU,CAAC,IAAD,CAAnB;AAA2B,IAAA,IAAI,EAAE,IAAjC;AAAuC,IAAA,MAAM,EAAE;AAA/C,GAAA,CAPF,EAQE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACE,IAAA,CAAC,EAAE,KAAK,GAAG,CADb;AAEE,IAAA,CAAC,EAAE,MAAM,GAAG,CAFd;AAGE,IAAA,IAAI,EAAE,QAHR;AAIE,IAAA,UAAU,EAAC,QAJb;AAKE,IAAA,iBAAiB,EAAC,QALpB;AAME,IAAA,QAAQ,EAAE;AANZ,GAAA,EAQG,KARH,CARF,EAmBM,kDAnBN,CADF;AAsBD,CApDM","sourceRoot":"","sourcesContent":["import React from 'react';\nimport { createPath } from '../../utils';\nimport { NODE_WIDTH, NODE_HEIGHT, NODE_PADDING, DefaultNodeConfig } from '../../constants';\nexport const DisplayNode = props => {\n    const { size = { width: NODE_WIDTH, height: NODE_HEIGHT }, data = {} } = props;\n    const { stroke = DefaultNodeConfig.stroke, label = DefaultNodeConfig.label, fill = DefaultNodeConfig.fill, fontFill = DefaultNodeConfig.fontFill, fontSize = DefaultNodeConfig.fontSize, } = data;\n    const { width, height } = size;\n    const sx = Math.min(height, width) / 3;\n    const dx = Math.min(Math.tan(Math.PI / 6) * (height / 2), width / 3);\n    const path = [\n        ['M', dx, NODE_PADDING],\n        ['L', width - sx, NODE_PADDING],\n        ['C', width - 2 * NODE_PADDING, NODE_PADDING, width - 2 * NODE_PADDING, height / 2],\n        ['', width - 2 * NODE_PADDING, height / 2],\n        [\n            'C',\n            width - 2 * NODE_PADDING,\n            height / 2,\n            width - 2 * NODE_PADDING,\n            height - 2 * NODE_PADDING,\n        ],\n        ['', width - sx, height - 2 * NODE_PADDING],\n        ['L', dx, height - 2 * NODE_PADDING],\n        ['L', NODE_PADDING, height / 2],\n        ['Z'],\n    ];\n    return (React.createElement(\"svg\", { viewBox: `0 0 ${width} ${height}`, \n        // viewBox={`0 0 40 30`}\n        xmlns: \"http://www.w3.org/2000/svg\", width: \"100%\", height: \"100%\" },\n        React.createElement(\"path\", { d: createPath(path), fill: fill, stroke: stroke }),\n        React.createElement(\"text\", { x: width / 2, y: height / 2, fill: fontFill, textAnchor: \"middle\", alignmentBaseline: \"middle\", fontSize: fontSize }, label),\n        \"Sorry, your browser does not support inline SVG.\"));\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}