{"ast":null,"code":"import { FunctionExt } from '../../util';\nimport { grid } from '../../layout/grid';\nimport { Node } from '../../model/node';\nimport { Model } from '../../model/model';\nimport { View } from '../../view/view';\nimport { Graph } from '../../graph/graph';\nimport { Dnd } from '../dnd';\nexport class Stencil extends View {\n  constructor(options) {\n    super();\n    this.graphs = {};\n    this.$groups = {};\n    this.options = Object.assign(Object.assign({}, Stencil.defaultOptions), options);\n    this.dnd = new Dnd(this.options);\n    this.onSearch = FunctionExt.debounce(this.onSearch, 200);\n    this.container = document.createElement('div');\n    this.$container = this.$(this.container).addClass(this.prefixClassName(ClassNames.base)).attr('data-not-found-text', this.options.notFoundText || 'No matches found');\n    this.options.collapsable = options.collapsable && options.groups && options.groups.some(group => group.collapsable !== false);\n\n    if (this.options.collapsable) {\n      this.$container.addClass('collapsable');\n      const collapsed = options.groups && options.groups.every(group => group.collapsed || group.collapsable === false);\n\n      if (collapsed) {\n        this.$container.addClass('collapsed');\n      }\n    }\n\n    this.$('<div/>').addClass(this.prefixClassName(ClassNames.title)).html(this.options.title).appendTo(this.$container);\n\n    if (options.search) {\n      this.$container.addClass('searchable').append(this.renderSearch());\n    }\n\n    this.$content = this.$('<div/>').addClass(this.prefixClassName(ClassNames.content)).appendTo(this.$container);\n    const globalGraphOptions = options.stencilGraphOptions || {};\n\n    if (options.groups && options.groups.length) {\n      options.groups.forEach(group => {\n        const $group = this.$('<div/>').addClass(this.prefixClassName(ClassNames.group)).attr('data-name', group.name);\n\n        if (group.collapsable == null && options.collapsable || group.collapsable !== false) {\n          $group.addClass('collapsable');\n        }\n\n        $group.toggleClass('collapsed', group.collapsed === true);\n        const $title = this.$('<h3/>').addClass(this.prefixClassName(ClassNames.groupTitle)).html(group.title || group.name);\n        const $content = this.$('<div/>').addClass(this.prefixClassName(ClassNames.groupContent));\n        const graphOptionsInGroup = group.graphOptions;\n        const graph = new Graph(Object.assign(Object.assign(Object.assign({}, globalGraphOptions), graphOptionsInGroup), {\n          container: document.createElement('div'),\n          model: globalGraphOptions.model || new Model(),\n          width: group.graphWidth || options.stencilGraphWidth,\n          height: group.graphHeight || options.stencilGraphHeight,\n          interacting: false,\n          preventDefaultBlankAction: false\n        }));\n        $content.append(graph.container);\n        $group.append($title, $content).appendTo(this.$content);\n        this.$groups[group.name] = $group;\n        this.graphs[group.name] = graph;\n      });\n    } else {\n      const graph = new Graph(Object.assign(Object.assign({}, globalGraphOptions), {\n        container: document.createElement('div'),\n        model: globalGraphOptions.model || new Model(),\n        width: options.stencilGraphWidth,\n        height: options.stencilGraphHeight,\n        interacting: false,\n        preventDefaultBlankAction: false\n      }));\n      this.$content.append(graph.container);\n      this.graphs[Private.defaultGroupName] = graph;\n    }\n\n    this.startListening();\n    return this;\n  }\n\n  get targetScroller() {\n    const target = this.options.target;\n    return Graph.isGraph(target) ? target.scroller.widget : target;\n  }\n\n  get targetGraph() {\n    const target = this.options.target;\n    return Graph.isGraph(target) ? target : target.graph;\n  }\n\n  get targetModel() {\n    return this.targetGraph.model;\n  }\n\n  renderSearch() {\n    return this.$('<div/>').addClass(this.prefixClassName(ClassNames.search)).append(this.$('<input/>').attr({\n      type: 'search',\n      placeholder: this.options.placeholder || 'Search'\n    }).addClass(this.prefixClassName(ClassNames.searchText)));\n  }\n\n  startListening() {\n    const title = this.prefixClassName(ClassNames.title);\n    const searchText = this.prefixClassName(ClassNames.searchText);\n    const groupTitle = this.prefixClassName(ClassNames.groupTitle);\n    this.delegateEvents({\n      [`click .${title}`]: 'onTitleClick',\n      [`touchstart .${title}`]: 'onTitleClick',\n      [`click .${groupTitle}`]: 'onGroupTitleClick',\n      [`touchstart .${groupTitle}`]: 'onGroupTitleClick',\n      [`input .${searchText}`]: 'onSearch',\n      [`focusin .${searchText}`]: 'onSearchFocusIn',\n      [`focusout .${searchText}`]: 'onSearchFocusOut'\n    });\n    Object.keys(this.graphs).forEach(groupName => {\n      const graph = this.graphs[groupName];\n      graph.on('cell:mousedown', this.onDragStart, this);\n    });\n  }\n\n  stopListening() {\n    this.undelegateEvents();\n    Object.keys(this.graphs).forEach(groupName => {\n      const graph = this.graphs[groupName];\n      graph.off('cell:mousedown', this.onDragStart, this);\n    });\n  }\n\n  load(data, groupName) {\n    if (Array.isArray(data)) {\n      this.loadGroup(data, groupName);\n    } else if (this.options.groups) {\n      Object.keys(this.options.groups).forEach(groupName => {\n        if (data[groupName]) {\n          this.loadGroup(data[groupName], groupName);\n        }\n      });\n    }\n\n    return this;\n  }\n\n  loadGroup(cells, groupName) {\n    const model = this.getModel(groupName);\n\n    if (model) {\n      const nodes = cells.map(cell => Node.isNode(cell) ? cell : Node.create(cell));\n      model.resetCells(nodes);\n    }\n\n    const group = this.getGroup(groupName);\n    let height = this.options.stencilGraphHeight;\n\n    if (group && group.graphHeight != null) {\n      height = group.graphHeight;\n    }\n\n    const layout = group && group.layout || this.options.layout;\n\n    if (layout && model) {\n      FunctionExt.call(layout, this, model, group);\n    }\n\n    if (!height) {\n      const graph = this.getGraph(groupName);\n      graph.fitToContent({\n        minWidth: graph.options.width,\n        gridHeight: 1,\n        padding: group && group.graphPadding || this.options.stencilGraphPadding || 10\n      });\n    }\n\n    return this;\n  }\n\n  onDragStart(args) {\n    const {\n      e,\n      node\n    } = args;\n    this.dnd.start(node, e);\n  }\n\n  filter(keyword, filter) {\n    const found = Object.keys(this.graphs).reduce((memo, groupName) => {\n      const graph = this.graphs[groupName];\n      const name = groupName === Private.defaultGroupName ? null : groupName;\n      const items = graph.model.getNodes().filter(cell => {\n        let matched = false;\n\n        if (typeof filter === 'function') {\n          matched = FunctionExt.call(filter, this, cell, keyword, name, this);\n        } else if (typeof filter === 'boolean') {\n          matched = filter;\n        } else {\n          matched = this.isCellMatched(cell, keyword, filter, keyword.toLowerCase() !== keyword);\n        }\n\n        const view = graph.renderer.findViewByCell(cell);\n\n        if (view) {\n          view.$(view.container).toggleClass('unmatched', !matched);\n        }\n\n        return matched;\n      });\n      const found = items.length > 0;\n      const options = this.options;\n      const model = new Model();\n      model.resetCells(items);\n\n      if (options.layout) {\n        FunctionExt.call(options.layout, this, model, this.getGroup(groupName));\n      }\n\n      if (this.$groups[groupName]) {\n        this.$groups[groupName].toggleClass('unmatched', !found);\n      }\n\n      graph.fitToContent({\n        gridWidth: 1,\n        gridHeight: 1,\n        padding: options.stencilGraphPadding || 10\n      });\n      return memo || found;\n    }, false);\n    this.$container.toggleClass('not-found', !found);\n  }\n\n  isCellMatched(cell, keyword, filters, ignoreCase) {\n    if (keyword && filters) {\n      return Object.keys(filters).some(shape => {\n        if (shape === '*' || cell.shape === shape) {\n          const filter = filters[shape];\n\n          if (typeof filter === 'boolean') {\n            return filter;\n          }\n\n          const paths = Array.isArray(filter) ? filter : [filter];\n          return paths.some(path => {\n            let val = cell.getPropByPath(path);\n\n            if (val != null) {\n              val = `${val}`;\n\n              if (!ignoreCase) {\n                val = val.toLowerCase();\n              }\n\n              return val.indexOf(keyword) >= 0;\n            }\n\n            return false;\n          });\n        }\n\n        return false;\n      });\n    }\n\n    return true;\n  }\n\n  onSearch(evt) {\n    this.filter(evt.target.value, this.options.search);\n  }\n\n  onSearchFocusIn() {\n    this.$container.addClass('is-focused');\n  }\n\n  onSearchFocusOut() {\n    this.$container.removeClass('is-focused');\n  }\n\n  onTitleClick() {\n    if (this.options.collapsable) {\n      this.$container.toggleClass('collapsed');\n\n      if (this.$container.hasClass('collapsed')) {\n        this.collapseGroups();\n      } else {\n        this.expandGroups();\n      }\n    }\n  }\n\n  onGroupTitleClick(evt) {\n    const $group = this.$(evt.target).closest(`.${this.prefixClassName(ClassNames.group)}`);\n    this.toggleGroup($group.attr('data-name') || '');\n    const allCollapsed = Object.keys(this.$groups).every(name => {\n      const group = this.getGroup(name);\n      const $group = this.$groups[name];\n      return group && group.collapsable === false || $group.hasClass('collapsed');\n    });\n    this.$container.toggleClass('collapsed', allCollapsed);\n  }\n\n  getModel(groupName) {\n    const graph = this.getGraph(groupName);\n    return graph ? graph.model : null;\n  }\n\n  getGraph(groupName) {\n    return this.graphs[groupName || Private.defaultGroupName];\n  }\n\n  getGroup(groupName) {\n    const groups = this.options.groups;\n\n    if (groupName != null && groups && groups.length) {\n      return groups.find(group => group.name === groupName);\n    }\n\n    return null;\n  }\n\n  toggleGroup(groupName) {\n    if (this.isGroupCollapsed(groupName)) {\n      this.expandGroup(groupName);\n    } else {\n      this.collapseGroup(groupName);\n    }\n\n    return this;\n  }\n\n  collapseGroup(groupName) {\n    if (this.isGroupCollapsable(groupName)) {\n      const $group = this.$groups[groupName];\n\n      if ($group && !this.isGroupCollapsed(groupName)) {\n        this.trigger('group:collapse', {\n          name: groupName\n        });\n        $group.addClass('collapsed');\n      }\n    }\n\n    return this;\n  }\n\n  expandGroup(groupName) {\n    if (this.isGroupCollapsable(groupName)) {\n      const $group = this.$groups[groupName];\n\n      if ($group && this.isGroupCollapsed(groupName)) {\n        this.trigger('group:expand', {\n          name: groupName\n        });\n        $group.removeClass('collapsed');\n      }\n    }\n\n    return this;\n  }\n\n  isGroupCollapsable(groupName) {\n    const $group = this.$groups[groupName];\n    return $group.hasClass('collapsable');\n  }\n\n  isGroupCollapsed(groupName) {\n    const $group = this.$groups[groupName];\n    return $group && $group.hasClass('collapsed');\n  }\n\n  collapseGroups() {\n    Object.keys(this.$groups).forEach(groupName => this.collapseGroup(groupName));\n    return this;\n  }\n\n  expandGroups() {\n    Object.keys(this.$groups).forEach(groupName => this.expandGroup(groupName));\n    return this;\n  }\n\n  resizeGroup(groupName, size) {\n    const graph = this.graphs[groupName];\n\n    if (graph) {\n      graph.resize(size.width, size.height);\n    }\n\n    return this;\n  }\n\n  onRemove() {\n    Object.keys(this.graphs).forEach(groupName => {\n      const graph = this.graphs[groupName];\n      graph.view.remove();\n      delete this.graphs[groupName];\n    });\n    this.dnd.remove();\n    this.stopListening();\n    this.undelegateDocumentEvents();\n  }\n\n}\n\n(function (Stencil) {\n  Stencil.defaultOptions = Object.assign({\n    stencilGraphWidth: 200,\n    stencilGraphHeight: 800,\n    title: 'Stencil',\n    collapsable: false,\n    placeholder: 'Search',\n    notFoundText: 'No matches found',\n\n    layout(model, group) {\n      const options = {\n        columnWidth: this.options.stencilGraphWidth / 2 - 10,\n        columns: 2,\n        rowHeight: 80,\n        resizeToFit: false,\n        dx: 10,\n        dy: 10\n      };\n      grid(model, Object.assign(Object.assign(Object.assign({}, options), this.options.layoutOptions), group ? group.layoutOptions : {}));\n    }\n\n  }, Dnd.defaults);\n})(Stencil || (Stencil = {}));\n\nvar ClassNames;\n\n(function (ClassNames) {\n  ClassNames.base = 'widget-stencil';\n  ClassNames.title = `${ClassNames.base}-title`;\n  ClassNames.search = `${ClassNames.base}-search`;\n  ClassNames.searchText = `${ClassNames.search}-text`;\n  ClassNames.content = `${ClassNames.base}-content`;\n  ClassNames.group = `${ClassNames.base}-group`;\n  ClassNames.groupTitle = `${ClassNames.group}-title`;\n  ClassNames.groupContent = `${ClassNames.group}-content`;\n})(ClassNames || (ClassNames = {}));\n\nvar Private;\n\n(function (Private) {\n  Private.defaultGroupName = '__default__';\n})(Private || (Private = {}));","map":{"version":3,"sources":["../../../src/addon/stencil/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { FunctionExt } from '../../util';\nimport { grid } from '../../layout/grid';\nimport { Node } from '../../model/node';\nimport { Model } from '../../model/model';\nimport { View } from '../../view/view';\nimport { Graph } from '../../graph/graph';\nimport { Dnd } from '../dnd';\nexport class Stencil extends View {\n    constructor(options) {\n        super();\n        this.graphs = {};\n        this.$groups = {};\n        this.options = Object.assign(Object.assign({}, Stencil.defaultOptions), options);\n        this.dnd = new Dnd(this.options);\n        this.onSearch = FunctionExt.debounce(this.onSearch, 200);\n        this.container = document.createElement('div');\n        this.$container = this.$(this.container)\n            .addClass(this.prefixClassName(ClassNames.base))\n            .attr('data-not-found-text', this.options.notFoundText || 'No matches found');\n        this.options.collapsable =\n            options.collapsable &&\n                options.groups &&\n                options.groups.some((group) => group.collapsable !== false);\n        if (this.options.collapsable) {\n            this.$container.addClass('collapsable');\n            const collapsed = options.groups &&\n                options.groups.every((group) => group.collapsed || group.collapsable === false);\n            if (collapsed) {\n                this.$container.addClass('collapsed');\n            }\n        }\n        this.$('<div/>')\n            .addClass(this.prefixClassName(ClassNames.title))\n            .html(this.options.title)\n            .appendTo(this.$container);\n        if (options.search) {\n            this.$container.addClass('searchable').append(this.renderSearch());\n        }\n        this.$content = this.$('<div/>')\n            .addClass(this.prefixClassName(ClassNames.content))\n            .appendTo(this.$container);\n        const globalGraphOptions = options.stencilGraphOptions || {};\n        if (options.groups && options.groups.length) {\n            options.groups.forEach((group) => {\n                const $group = this.$('<div/>')\n                    .addClass(this.prefixClassName(ClassNames.group))\n                    .attr('data-name', group.name);\n                if ((group.collapsable == null && options.collapsable) ||\n                    group.collapsable !== false) {\n                    $group.addClass('collapsable');\n                }\n                $group.toggleClass('collapsed', group.collapsed === true);\n                const $title = this.$('<h3/>')\n                    .addClass(this.prefixClassName(ClassNames.groupTitle))\n                    .html(group.title || group.name);\n                const $content = this.$('<div/>').addClass(this.prefixClassName(ClassNames.groupContent));\n                const graphOptionsInGroup = group.graphOptions;\n                const graph = new Graph(Object.assign(Object.assign(Object.assign({}, globalGraphOptions), graphOptionsInGroup), { container: document.createElement('div'), model: globalGraphOptions.model || new Model(), width: group.graphWidth || options.stencilGraphWidth, height: group.graphHeight || options.stencilGraphHeight, interacting: false, preventDefaultBlankAction: false }));\n                $content.append(graph.container);\n                $group.append($title, $content).appendTo(this.$content);\n                this.$groups[group.name] = $group;\n                this.graphs[group.name] = graph;\n            });\n        }\n        else {\n            const graph = new Graph(Object.assign(Object.assign({}, globalGraphOptions), { container: document.createElement('div'), model: globalGraphOptions.model || new Model(), width: options.stencilGraphWidth, height: options.stencilGraphHeight, interacting: false, preventDefaultBlankAction: false }));\n            this.$content.append(graph.container);\n            this.graphs[Private.defaultGroupName] = graph;\n        }\n        this.startListening();\n        return this;\n    }\n    get targetScroller() {\n        const target = this.options.target;\n        return Graph.isGraph(target) ? target.scroller.widget : target;\n    }\n    get targetGraph() {\n        const target = this.options.target;\n        return Graph.isGraph(target) ? target : target.graph;\n    }\n    get targetModel() {\n        return this.targetGraph.model;\n    }\n    renderSearch() {\n        return this.$('<div/>')\n            .addClass(this.prefixClassName(ClassNames.search))\n            .append(this.$('<input/>')\n            .attr({\n            type: 'search',\n            placeholder: this.options.placeholder || 'Search',\n        })\n            .addClass(this.prefixClassName(ClassNames.searchText)));\n    }\n    startListening() {\n        const title = this.prefixClassName(ClassNames.title);\n        const searchText = this.prefixClassName(ClassNames.searchText);\n        const groupTitle = this.prefixClassName(ClassNames.groupTitle);\n        this.delegateEvents({\n            [`click .${title}`]: 'onTitleClick',\n            [`touchstart .${title}`]: 'onTitleClick',\n            [`click .${groupTitle}`]: 'onGroupTitleClick',\n            [`touchstart .${groupTitle}`]: 'onGroupTitleClick',\n            [`input .${searchText}`]: 'onSearch',\n            [`focusin .${searchText}`]: 'onSearchFocusIn',\n            [`focusout .${searchText}`]: 'onSearchFocusOut',\n        });\n        Object.keys(this.graphs).forEach((groupName) => {\n            const graph = this.graphs[groupName];\n            graph.on('cell:mousedown', this.onDragStart, this);\n        });\n    }\n    stopListening() {\n        this.undelegateEvents();\n        Object.keys(this.graphs).forEach((groupName) => {\n            const graph = this.graphs[groupName];\n            graph.off('cell:mousedown', this.onDragStart, this);\n        });\n    }\n    load(data, groupName) {\n        if (Array.isArray(data)) {\n            this.loadGroup(data, groupName);\n        }\n        else if (this.options.groups) {\n            Object.keys(this.options.groups).forEach((groupName) => {\n                if (data[groupName]) {\n                    this.loadGroup(data[groupName], groupName);\n                }\n            });\n        }\n        return this;\n    }\n    loadGroup(cells, groupName) {\n        const model = this.getModel(groupName);\n        if (model) {\n            const nodes = cells.map((cell) => Node.isNode(cell) ? cell : Node.create(cell));\n            model.resetCells(nodes);\n        }\n        const group = this.getGroup(groupName);\n        let height = this.options.stencilGraphHeight;\n        if (group && group.graphHeight != null) {\n            height = group.graphHeight;\n        }\n        const layout = (group && group.layout) || this.options.layout;\n        if (layout && model) {\n            FunctionExt.call(layout, this, model, group);\n        }\n        if (!height) {\n            const graph = this.getGraph(groupName);\n            graph.fitToContent({\n                minWidth: graph.options.width,\n                gridHeight: 1,\n                padding: (group && group.graphPadding) ||\n                    this.options.stencilGraphPadding ||\n                    10,\n            });\n        }\n        return this;\n    }\n    onDragStart(args) {\n        const { e, node } = args;\n        this.dnd.start(node, e);\n    }\n    filter(keyword, filter) {\n        const found = Object.keys(this.graphs).reduce((memo, groupName) => {\n            const graph = this.graphs[groupName];\n            const name = groupName === Private.defaultGroupName ? null : groupName;\n            const items = graph.model.getNodes().filter((cell) => {\n                let matched = false;\n                if (typeof filter === 'function') {\n                    matched = FunctionExt.call(filter, this, cell, keyword, name, this);\n                }\n                else if (typeof filter === 'boolean') {\n                    matched = filter;\n                }\n                else {\n                    matched = this.isCellMatched(cell, keyword, filter, keyword.toLowerCase() !== keyword);\n                }\n                const view = graph.renderer.findViewByCell(cell);\n                if (view) {\n                    view.$(view.container).toggleClass('unmatched', !matched);\n                }\n                return matched;\n            });\n            const found = items.length > 0;\n            const options = this.options;\n            const model = new Model();\n            model.resetCells(items);\n            if (options.layout) {\n                FunctionExt.call(options.layout, this, model, this.getGroup(groupName));\n            }\n            if (this.$groups[groupName]) {\n                this.$groups[groupName].toggleClass('unmatched', !found);\n            }\n            graph.fitToContent({\n                gridWidth: 1,\n                gridHeight: 1,\n                padding: options.stencilGraphPadding || 10,\n            });\n            return memo || found;\n        }, false);\n        this.$container.toggleClass('not-found', !found);\n    }\n    isCellMatched(cell, keyword, filters, ignoreCase) {\n        if (keyword && filters) {\n            return Object.keys(filters).some((shape) => {\n                if (shape === '*' || cell.shape === shape) {\n                    const filter = filters[shape];\n                    if (typeof filter === 'boolean') {\n                        return filter;\n                    }\n                    const paths = Array.isArray(filter) ? filter : [filter];\n                    return paths.some((path) => {\n                        let val = cell.getPropByPath(path);\n                        if (val != null) {\n                            val = `${val}`;\n                            if (!ignoreCase) {\n                                val = val.toLowerCase();\n                            }\n                            return val.indexOf(keyword) >= 0;\n                        }\n                        return false;\n                    });\n                }\n                return false;\n            });\n        }\n        return true;\n    }\n    onSearch(evt) {\n        this.filter(evt.target.value, this.options.search);\n    }\n    onSearchFocusIn() {\n        this.$container.addClass('is-focused');\n    }\n    onSearchFocusOut() {\n        this.$container.removeClass('is-focused');\n    }\n    onTitleClick() {\n        if (this.options.collapsable) {\n            this.$container.toggleClass('collapsed');\n            if (this.$container.hasClass('collapsed')) {\n                this.collapseGroups();\n            }\n            else {\n                this.expandGroups();\n            }\n        }\n    }\n    onGroupTitleClick(evt) {\n        const $group = this.$(evt.target).closest(`.${this.prefixClassName(ClassNames.group)}`);\n        this.toggleGroup($group.attr('data-name') || '');\n        const allCollapsed = Object.keys(this.$groups).every((name) => {\n            const group = this.getGroup(name);\n            const $group = this.$groups[name];\n            return ((group && group.collapsable === false) || $group.hasClass('collapsed'));\n        });\n        this.$container.toggleClass('collapsed', allCollapsed);\n    }\n    getModel(groupName) {\n        const graph = this.getGraph(groupName);\n        return graph ? graph.model : null;\n    }\n    getGraph(groupName) {\n        return this.graphs[groupName || Private.defaultGroupName];\n    }\n    getGroup(groupName) {\n        const groups = this.options.groups;\n        if (groupName != null && groups && groups.length) {\n            return groups.find((group) => group.name === groupName);\n        }\n        return null;\n    }\n    toggleGroup(groupName) {\n        if (this.isGroupCollapsed(groupName)) {\n            this.expandGroup(groupName);\n        }\n        else {\n            this.collapseGroup(groupName);\n        }\n        return this;\n    }\n    collapseGroup(groupName) {\n        if (this.isGroupCollapsable(groupName)) {\n            const $group = this.$groups[groupName];\n            if ($group && !this.isGroupCollapsed(groupName)) {\n                this.trigger('group:collapse', { name: groupName });\n                $group.addClass('collapsed');\n            }\n        }\n        return this;\n    }\n    expandGroup(groupName) {\n        if (this.isGroupCollapsable(groupName)) {\n            const $group = this.$groups[groupName];\n            if ($group && this.isGroupCollapsed(groupName)) {\n                this.trigger('group:expand', { name: groupName });\n                $group.removeClass('collapsed');\n            }\n        }\n        return this;\n    }\n    isGroupCollapsable(groupName) {\n        const $group = this.$groups[groupName];\n        return $group.hasClass('collapsable');\n    }\n    isGroupCollapsed(groupName) {\n        const $group = this.$groups[groupName];\n        return $group && $group.hasClass('collapsed');\n    }\n    collapseGroups() {\n        Object.keys(this.$groups).forEach((groupName) => this.collapseGroup(groupName));\n        return this;\n    }\n    expandGroups() {\n        Object.keys(this.$groups).forEach((groupName) => this.expandGroup(groupName));\n        return this;\n    }\n    resizeGroup(groupName, size) {\n        const graph = this.graphs[groupName];\n        if (graph) {\n            graph.resize(size.width, size.height);\n        }\n        return this;\n    }\n    onRemove() {\n        Object.keys(this.graphs).forEach((groupName) => {\n            const graph = this.graphs[groupName];\n            graph.view.remove();\n            delete this.graphs[groupName];\n        });\n        this.dnd.remove();\n        this.stopListening();\n        this.undelegateDocumentEvents();\n    }\n}\n(function (Stencil) {\n    Stencil.defaultOptions = Object.assign({ stencilGraphWidth: 200, stencilGraphHeight: 800, title: 'Stencil', collapsable: false, placeholder: 'Search', notFoundText: 'No matches found', layout(model, group) {\n            const options = {\n                columnWidth: this.options.stencilGraphWidth / 2 - 10,\n                columns: 2,\n                rowHeight: 80,\n                resizeToFit: false,\n                dx: 10,\n                dy: 10,\n            };\n            grid(model, Object.assign(Object.assign(Object.assign({}, options), this.options.layoutOptions), (group ? group.layoutOptions : {})));\n        } }, Dnd.defaults);\n})(Stencil || (Stencil = {}));\nvar ClassNames;\n(function (ClassNames) {\n    ClassNames.base = 'widget-stencil';\n    ClassNames.title = `${ClassNames.base}-title`;\n    ClassNames.search = `${ClassNames.base}-search`;\n    ClassNames.searchText = `${ClassNames.search}-text`;\n    ClassNames.content = `${ClassNames.base}-content`;\n    ClassNames.group = `${ClassNames.base}-group`;\n    ClassNames.groupTitle = `${ClassNames.group}-title`;\n    ClassNames.groupContent = `${ClassNames.group}-content`;\n})(ClassNames || (ClassNames = {}));\nvar Private;\n(function (Private) {\n    Private.defaultGroupName = '__default__';\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}