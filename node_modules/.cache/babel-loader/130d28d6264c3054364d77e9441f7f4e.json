{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _isNumber from \"lodash/isNumber\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { LineTriangulation } from '../../core/triangulation';\nvar line_frag = \"#define LineTypeSolid 0.0\\n#define LineTypeDash 1.0\\n#define Animate 0.0\\n#define LineTexture 1.0\\nuniform float u_blur : 0.99;\\nuniform float u_line_type: 0.0;\\nuniform float u_opacity : 1.0;\\nuniform float u_textureBlend;\\nvarying vec4 v_color;\\n// varying vec2 v_normal;\\n\\n// line texture\\nuniform float u_line_texture;\\nuniform sampler2D u_texture;\\nuniform vec2 u_textSize;\\n\\n// dash\\nuniform float u_dash_offset : 0.0;\\nuniform float u_dash_ratio : 0.1;\\nvarying vec4 v_dash_array;\\n\\nvarying vec2 v_iconMapUV;\\n\\nuniform float u_linearColor: 0;\\nuniform vec4 u_sourceColor;\\nuniform vec4 u_targetColor;\\n\\n#pragma include \\\"picking\\\"\\n\\nuniform float u_time;\\nuniform vec4 u_aimate: [ 0, 2., 1.0, 0.2 ]; // \\u63A7\\u5236\\u8FD0\\u52A8\\n\\nvarying mat4 styleMappingMat;\\n// [animate, duration, interval, trailLength],\\nvoid main() {\\n  float opacity = styleMappingMat[0][0];\\n  float animateSpeed = 0.0; // \\u8FD0\\u52A8\\u901F\\u5EA6\\n  float d_distance_ratio = styleMappingMat[3].r; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n\\n  if(u_linearColor == 1.0) { // \\u4F7F\\u7528\\u6E10\\u53D8\\u989C\\u8272\\n    gl_FragColor = mix(u_sourceColor, u_targetColor, d_distance_ratio);\\n  } else { // \\u4F7F\\u7528 color \\u65B9\\u6CD5\\u4F20\\u5165\\u7684\\u989C\\u8272\\n     gl_FragColor = v_color;\\n  }\\n\\n  // anti-alias\\n  // float blur = 1.0 - smoothstep(u_blur, 1., length(v_normal.xy));\\n  gl_FragColor.a *= opacity; // \\u5168\\u5C40\\u900F\\u660E\\u5EA6\\n  if(u_aimate.x == Animate) {\\n      animateSpeed = u_time / u_aimate.y;\\n       float alpha =1.0 - fract( mod(1.0- d_distance_ratio, u_aimate.z)* (1.0/ u_aimate.z) + animateSpeed);\\n      alpha = (alpha + u_aimate.w -1.0) / u_aimate.w;\\n      alpha = smoothstep(0., 1., alpha);\\n      gl_FragColor.a *= alpha;\\n  }\\n // dash line\\n  if(u_line_type == LineTypeDash) {\\n    float flag = 0.;\\n    float dashLength = mod(d_distance_ratio, v_dash_array.x + v_dash_array.y + v_dash_array.z + v_dash_array.w);\\n    if(dashLength < v_dash_array.x || (dashLength > (v_dash_array.x + v_dash_array.y) && dashLength <  v_dash_array.x + v_dash_array.y + v_dash_array.z)) {\\n      flag = 1.;\\n    }\\n    gl_FragColor.a *=flag;\\n  }\\n\\n  if(u_line_texture == LineTexture && u_line_type != LineTypeDash) { // while load texture\\n    float aDistance = styleMappingMat[3].g;      // \\u5F53\\u524D\\u9876\\u70B9\\u7684\\u8DDD\\u79BB\\n    float d_texPixelLen = styleMappingMat[3].b;  // \\u8D34\\u56FE\\u7684\\u50CF\\u7D20\\u957F\\u5EA6\\uFF0C\\u6839\\u636E\\u5730\\u56FE\\u5C42\\u7EA7\\u7F29\\u653E\\n    float u = fract(mod(aDistance, d_texPixelLen)/d_texPixelLen - animateSpeed);\\n    float v = styleMappingMat[3].a;  // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n\\n    v = max(smoothstep(0.95, 1.0, v), v);\\n    vec2 uv= v_iconMapUV / u_textSize + vec2(u, v) / u_textSize * 64.;\\n    \\n    // gl_FragColor = filterColor(gl_FragColor + texture2D(u_texture, vec2(u, v)));\\n    // gl_FragColor = filterColor(gl_FragColor + texture2D(u_texture, uv));\\n     vec4 pattern = texture2D(u_texture, uv);\\n\\n    if(u_textureBlend == 0.0) { // normal\\n      pattern.a = 0.0;\\n      gl_FragColor = filterColor(gl_FragColor + pattern);\\n    } else { // replace\\n        pattern.a *= opacity;\\n        if(gl_FragColor.a <= 0.0) {\\n          pattern.a = 0.0;\\n        }\\n        gl_FragColor = filterColor(pattern);\\n    }\\n  } else {\\n    gl_FragColor = filterColor(gl_FragColor);\\n  }\\n\\n  // gl_FragColor = (vec4(1.0, 0.0, 0.0, 1.0));\\n \\n  // if(rV < r || rV > 1.0 - r) {\\n  //   gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\\n  // } \\n  // if(v > 0.9) {\\n    // gl_FragColor = vec4(0.17647, 0.43921568, 0.2, 1.0);\\n  // } else if(v < 0.1) {\\n  //   gl_FragColor = vec4(0.17647, 0.43921568, 0.2, 1.0);\\n  // }\\n\\n  // gl_FragColor = filterColor(gl_FragColor);\\n}\\n\";\nvar line_vert = \"#define LineTypeSolid 0.0\\n#define LineTypeDash 1.0\\n#define Animate 0.0\\n\\nattribute float a_Miter;\\nattribute vec4 a_Color;\\nattribute vec2 a_Size;\\nattribute vec3 a_Normal;\\nattribute vec3 a_Position;\\n\\nattribute vec2 a_iconMapUV;\\n\\n// dash line\\nattribute float a_Total_Distance;\\nattribute float a_Distance;\\n\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\nuniform float u_line_type: 0.0;\\nuniform vec4 u_dash_array: [10.0, 5., 0, 0];\\nuniform vec4 u_aimate: [ 0, 2., 1.0, 0.2 ];\\nuniform float u_icon_step: 100;\\n\\nuniform float u_vertexScale: 1.0;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"picking\\\"\\n\\nvarying vec4 v_color;\\nvarying vec4 v_dash_array;\\nvarying vec2 v_normal;\\n\\n// texV \\u7EBF\\u56FE\\u5C42 - \\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\uFF08\\u7EBF\\u7684\\u5BBD\\u5EA6\\u65B9\\u5411\\uFF09\\nvarying vec2 v_iconMapUV;\\n\\n\\nuniform float u_linearColor: 0;\\n\\nuniform float u_opacity: 1.0;\\nvarying mat4 styleMappingMat; // \\u7528\\u4E8E\\u5C06\\u5728\\u9876\\u70B9\\u7740\\u8272\\u5668\\u4E2D\\u8BA1\\u7B97\\u597D\\u7684\\u6837\\u5F0F\\u503C\\u4F20\\u9012\\u7ED9\\u7247\\u5143\\n\\n#pragma include \\\"styleMapping\\\"\\n#pragma include \\\"styleMappingCalOpacity\\\"\\n\\nvoid main() {\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n  styleMappingMat = mat4(\\n    0.0, 0.0, 0.0, 0.0, // opacity - strokeOpacity - strokeWidth - empty\\n    0.0, 0.0, 0.0, 0.0, // strokeR - strokeG - strokeB - strokeA\\n    0.0, 0.0, 0.0, 0.0, // offsets[0] - offsets[1]\\n    0.0, 0.0, 0.0, 0.0  // distance_ratio/distance/pixelLen/texV\\n  );\\n\\n  float rowCount = u_cellTypeLayout[0][0];    // \\u5F53\\u524D\\u7684\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u884C\\n  float columnCount = u_cellTypeLayout[0][1]; // \\u5F53\\u770B\\u5230\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u5217\\n  float columnWidth = 1.0/columnCount;  // \\u5217\\u5BBD\\n  float rowHeight = 1.0/rowCount;       // \\u884C\\u9AD8\\n  float cellCount = calCellCount(); // opacity - strokeOpacity - strokeWidth - stroke - offsets\\n  float id = a_vertexId; // \\u7B2Cn\\u4E2A\\u9876\\u70B9\\n  float cellCurrentRow = floor(id * cellCount / columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u884C\\n  float cellCurrentColumn = mod(id * cellCount, columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u5217\\n  \\n  // cell \\u56FA\\u5B9A\\u987A\\u5E8F opacity -> strokeOpacity -> strokeWidth -> stroke ... \\n  // \\u6309\\u987A\\u5E8F\\u4ECE cell \\u4E2D\\u53D6\\u503C\\u3001\\u82E5\\u6CA1\\u6709\\u5219\\u81EA\\u52A8\\u5F80\\u4E0B\\u53D6\\u503C\\n  float textureOffset = 0.0; // \\u5728 cell \\u4E2D\\u53D6\\u503C\\u7684\\u504F\\u79FB\\u91CF\\n\\n  vec2 opacityAndOffset = calOpacityAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\\n  styleMappingMat[0][0] = opacityAndOffset.r;\\n  textureOffset = opacityAndOffset.g;\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n\\n  float d_distance_ratio; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n  float d_texPixelLen;    // \\u8D34\\u56FE\\u7684\\u50CF\\u7D20\\u957F\\u5EA6\\uFF0C\\u6839\\u636E\\u5730\\u56FE\\u5C42\\u7EA7\\u7F29\\u653E\\n\\n  v_iconMapUV = a_iconMapUV;\\n  d_texPixelLen = project_pixel(u_icon_step);\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) {\\n    d_texPixelLen *= 10.0;\\n  }\\n\\n  if(u_line_type == LineTypeDash) {\\n    d_distance_ratio = a_Distance / a_Total_Distance;\\n    v_dash_array = pow(2.0, 20.0 - u_Zoom) * u_dash_array / a_Total_Distance;\\n  }\\n  if(u_aimate.x == Animate || u_linearColor == 1.0) {\\n      d_distance_ratio = a_Distance / a_Total_Distance;\\n  }\\n  v_normal = vec2(reverse_offset_normal(a_Normal) * sign(a_Miter));\\n\\n  v_color = a_Color;\\n\\n  vec3 size = a_Miter * setPickingSize(a_Size.x) * reverse_offset_normal(a_Normal);\\n\\n  vec2 offset = project_pixel(size.xy);\\n\\n  float lineOffsetWidth = length(offset + offset * sign(a_Miter)); // \\u7EBF\\u6A2A\\u5411\\u504F\\u79FB\\u7684\\u8DDD\\u79BB\\uFF08\\u5411\\u4E24\\u4FA7\\u504F\\u79FB\\u7684\\u548C\\uFF09\\n  float linePixelSize = project_pixel(a_Size.x) * 2.0;  // \\u5B9A\\u70B9\\u4F4D\\u7F6E\\u504F\\u79FB\\uFF0C\\u6309\\u5730\\u56FE\\u7B49\\u7EA7\\u7F29\\u653E\\u540E\\u7684\\u8DDD\\u79BB \\u5355\\u4FA7 * 2\\n  float texV = lineOffsetWidth/linePixelSize; // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n\\n  // \\u8BBE\\u7F6E\\u6570\\u636E\\u96C6\\u7684\\u53C2\\u6570\\n  styleMappingMat[3][0] = d_distance_ratio; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n  styleMappingMat[3][1] = a_Distance;       // \\u5F53\\u524D\\u9876\\u70B9\\u7684\\u8DDD\\u79BB\\n  styleMappingMat[3][2] = d_texPixelLen;    // \\u8D34\\u56FE\\u7684\\u50CF\\u7D20\\u957F\\u5EA6\\uFF0C\\u6839\\u636E\\u5730\\u56FE\\u5C42\\u7EA7\\u7F29\\u653E\\n  styleMappingMat[3][3] = texV;             // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n\\n  vec4 project_pos = project_position(vec4(a_Position.xy, 0, 1.0));\\n\\n  // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, a_Size.y, 1.0));\\n\\n  float h = float((a_Position.z)) * u_vertexScale; // \\u7EBF\\u9876\\u70B9\\u7684\\u9AD8\\u5EA6 - \\u517C\\u5BB9\\u4E0D\\u5B58\\u5728\\u7B2C\\u4E09\\u4E2A\\u6570\\u503C\\u7684\\u60C5\\u51B5\\n\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n    // gl_Position = u_Mvp * (vec4(project_pos.xy + offset, a_Size.y, 1.0));\\n    gl_Position = u_Mvp * (vec4(project_pos.xy + offset, a_Size.y / 8.0 + h, 1.0)); // \\u989D\\u5916\\u9664 8.0 \\u662F\\u4E3A\\u4E86\\u548Cgaode1.x\\u7684\\u9AD8\\u5EA6\\u517C\\u5BB9\\n  } else {\\n    float lineHeight = a_Size.y;\\n    // \\u517C\\u5BB9 mapbox \\u5728\\u7EBF\\u9AD8\\u5EA6\\u4E0A\\u7684\\u6548\\u679C\\u8868\\u73B0\\u57FA\\u672C\\u4E00\\u81F4\\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT || u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET) {\\n      lineHeight = lineHeight*2.0/pow(2.0, 20.0 - u_Zoom);\\n    }\\n    \\n\\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, lineHeight + h, 1.0));\\n  }\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nvar lineStyleObj = {\n  solid: 0.0,\n  dash: 1.0\n};\n\nvar LineModel = function (_BaseModel) {\n  _inherits(LineModel, _BaseModel);\n\n  var _super = _createSuper(LineModel);\n\n  function LineModel() {\n    var _this;\n\n    _classCallCheck(this, LineModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"texture\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"updateTexture\", function () {\n      var createTexture2D = _this.rendererService.createTexture2D;\n\n      if (_this.texture) {\n        _this.texture.update({\n          data: _this.iconService.getCanvas()\n        });\n\n        _this.layer.render();\n\n        return;\n      }\n\n      _this.texture = createTexture2D({\n        data: _this.iconService.getCanvas(),\n        mag: gl.NEAREST,\n        min: gl.NEAREST,\n        premultiplyAlpha: false,\n        width: 1024,\n        height: _this.iconService.canvasHeight || 128\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(LineModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          opacity = _ref.opacity,\n          sourceColor = _ref.sourceColor,\n          targetColor = _ref.targetColor,\n          _ref$textureBlend = _ref.textureBlend,\n          textureBlend = _ref$textureBlend === void 0 ? 'normal' : _ref$textureBlend,\n          _ref$lineType = _ref.lineType,\n          lineType = _ref$lineType === void 0 ? 'solid' : _ref$lineType,\n          _ref$dashArray = _ref.dashArray,\n          dashArray = _ref$dashArray === void 0 ? [10, 5, 0, 0] : _ref$dashArray,\n          _ref$lineTexture = _ref.lineTexture,\n          lineTexture = _ref$lineTexture === void 0 ? false : _ref$lineTexture,\n          _ref$iconStep = _ref.iconStep,\n          iconStep = _ref$iconStep === void 0 ? 100 : _ref$iconStep,\n          _ref$vertexHeightScal = _ref.vertexHeightScale,\n          vertexHeightScale = _ref$vertexHeightScal === void 0 ? 20.0 : _ref$vertexHeightScal;\n\n      if (dashArray.length === 2) {\n        dashArray.push(0, 0);\n      }\n\n      if (this.rendererService.getDirty()) {\n        this.texture.bind();\n      }\n\n      var useLinearColor = 0;\n      var sourceColorArr = [0, 0, 0, 0];\n      var targetColorArr = [0, 0, 0, 0];\n\n      if (sourceColor && targetColor) {\n        sourceColorArr = rgb2arr(sourceColor);\n        targetColorArr = rgb2arr(targetColor);\n        useLinearColor = 1;\n      }\n\n      if (this.dataTextureTest && this.dataTextureNeedUpdate({\n        opacity: opacity\n      })) {\n        this.judgeStyleAttributes({\n          opacity: opacity\n        });\n        var encodeData = this.layer.getEncodedData();\n\n        var _this$calDataFrame = this.calDataFrame(this.cellLength, encodeData, this.cellProperties),\n            data = _this$calDataFrame.data,\n            width = _this$calDataFrame.width,\n            height = _this$calDataFrame.height;\n\n        this.rowCount = height;\n        this.dataTexture = this.cellLength > 0 && data.length > 0 ? this.createTexture2D({\n          flipY: true,\n          data: data,\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: width,\n          height: height\n        }) : this.createTexture2D({\n          flipY: true,\n          data: [1],\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: 1,\n          height: 1\n        });\n      }\n\n      return {\n        u_dataTexture: this.dataTexture,\n        u_cellTypeLayout: this.getCellTypeLayout(),\n        u_opacity: _isNumber(opacity) ? opacity : 1.0,\n        u_textureBlend: textureBlend === 'normal' ? 0.0 : 1.0,\n        u_line_type: lineStyleObj[lineType],\n        u_dash_array: dashArray,\n        u_texture: this.texture,\n        u_line_texture: lineTexture ? 1.0 : 0.0,\n        u_icon_step: iconStep,\n        u_textSize: [1024, this.iconService.canvasHeight || 128],\n        u_linearColor: useLinearColor,\n        u_sourceColor: sourceColorArr,\n        u_targetColor: targetColorArr,\n        u_vertexScale: vertexHeightScale\n      };\n    }\n  }, {\n    key: \"getAnimateUniforms\",\n    value: function getAnimateUniforms() {\n      var _ref2 = this.layer.getLayerConfig(),\n          animateOption = _ref2.animateOption;\n\n      return {\n        u_aimate: this.animateOption2Array(animateOption),\n        u_time: this.layer.getLayerAnimateTime()\n      };\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      this.updateTexture();\n      this.iconService.on('imageUpdate', this.updateTexture);\n      return this.buildModels();\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$texture, _this$dataTexture;\n\n      (_this$texture = this.texture) === null || _this$texture === void 0 ? void 0 : _this$texture.destroy();\n      (_this$dataTexture = this.dataTexture) === null || _this$dataTexture === void 0 ? void 0 : _this$dataTexture.destroy();\n      this.iconService.off('imageUpdate', this.updateTexture);\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      return [this.layer.buildLayerModel({\n        moduleName: 'line',\n        vertexShader: line_vert,\n        fragmentShader: line_frag,\n        triangulation: LineTriangulation,\n        primitive: gl.TRIANGLES,\n        blend: this.getBlend(),\n        depth: {\n          enable: false\n        }\n      })];\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      var _this2 = this;\n\n      var _ref3 = this.layer.getLayerConfig(),\n          _ref3$lineType = _ref3.lineType,\n          lineType = _ref3$lineType === void 0 ? 'solid' : _ref3$lineType;\n\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'distance',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Distance',\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[3]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'total_distance',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Total_Distance',\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[5]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var _feature$size = feature.size,\n                size = _feature$size === void 0 ? 1 : _feature$size;\n            return Array.isArray(size) ? [size[0], size[1]] : [size, 0];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'normal',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Normal',\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {\n            return normal;\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'miter',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Miter',\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[4]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_iconMapUV',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var iconMap = _this2.iconService.getIconMap();\n\n            var texture = feature.texture;\n\n            var _ref4 = iconMap[texture] || {\n              x: 0,\n              y: 0\n            },\n                x = _ref4.x,\n                y = _ref4.y;\n\n            return [x, y];\n          }\n        }\n      });\n    }\n  }, {\n    key: \"loadImage\",\n    value: function loadImage(url) {\n      return new Promise(function (resolve, reject) {\n        if (url instanceof HTMLImageElement) {\n          resolve(url);\n          return;\n        }\n\n        var image = new Image();\n        image.crossOrigin = 'anonymous';\n\n        image.onload = function () {\n          resolve(image);\n        };\n\n        image.onerror = function () {\n          reject(new Error('Could not load image at ' + url));\n        };\n\n        image.src = url instanceof File ? URL.createObjectURL(url) : url;\n      });\n    }\n  }]);\n\n  return LineModel;\n}(BaseModel);\n\nexport { LineModel as default };","map":{"version":3,"sources":["../../../src/line/models/line.ts"],"names":["lineStyleObj","solid","dash","LineModel","BaseModel","opacity","sourceColor","targetColor","textureBlend","lineType","dashArray","lineTexture","iconStep","vertexHeightScale","useLinearColor","sourceColorArr","targetColorArr","rgb2arr","encodeData","data","width","height","flipY","format","gl","type","u_dataTexture","u_cellTypeLayout","u_opacity","u_textureBlend","u_line_type","u_dash_array","u_texture","u_line_texture","u_icon_step","u_textSize","u_linearColor","u_sourceColor","u_targetColor","u_vertexScale","animateOption","u_aimate","u_time","moduleName","vertexShader","fragmentShader","triangulation","primitive","blend","depth","enable","name","AttributeType","descriptor","buffer","usage","FLOAT","size","update","vertex","feature","Array","iconMap","texture","x","y","url","resolve","image","reject","URL","createTexture2D","mag","min","premultiplyAlpha"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IAnimateOption,\n  IEncodeFeature,\n  IImage,\n  ILayerConfig,\n  IModel,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\n\nimport { rgb2arr } from '@antv/l7-utils';\nimport { isNumber } from 'lodash';\nimport BaseModel from '../../core/BaseModel';\nimport { ILineLayerStyleOptions, lineStyleType } from '../../core/interface';\nimport { LineTriangulation } from '../../core/triangulation';\nimport line_frag from '../shaders/line_frag.glsl';\nimport line_vert from '../shaders/line_vert.glsl';\nconst lineStyleObj: { [key: string]: number } = {\n  solid: 0.0,\n  dash: 1.0,\n};\nexport default class LineModel extends BaseModel {\n  protected texture: ITexture2D;\n  public getUninforms(): IModelUniform {\n    const {\n      opacity,\n      sourceColor,\n      targetColor,\n      textureBlend = 'normal',\n      lineType = 'solid',\n      dashArray = [10, 5, 0, 0],\n      lineTexture = false,\n      iconStep = 100,\n      vertexHeightScale = 20.0,\n    } = this.layer.getLayerConfig() as ILineLayerStyleOptions;\n    if (dashArray.length === 2) {\n      dashArray.push(0, 0);\n    }\n\n    if (this.rendererService.getDirty()) {\n      this.texture.bind();\n    }\n\n    // 转化渐变色\n    let useLinearColor = 0; // 默认不生效\n    let sourceColorArr = [0, 0, 0, 0];\n    let targetColorArr = [0, 0, 0, 0];\n    if (sourceColor && targetColor) {\n      sourceColorArr = rgb2arr(sourceColor);\n      targetColorArr = rgb2arr(targetColor);\n      useLinearColor = 1;\n    }\n\n    if (this.dataTextureTest && this.dataTextureNeedUpdate({ opacity })) {\n      this.judgeStyleAttributes({ opacity });\n      const encodeData = this.layer.getEncodedData();\n      const { data, width, height } = this.calDataFrame(\n        this.cellLength,\n        encodeData,\n        this.cellProperties,\n      );\n      this.rowCount = height; // 当前数据纹理有多少行\n\n      this.dataTexture =\n        this.cellLength > 0 && data.length > 0\n          ? this.createTexture2D({\n              flipY: true,\n              data,\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width,\n              height,\n            })\n          : this.createTexture2D({\n              flipY: true,\n              data: [1],\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width: 1,\n              height: 1,\n            });\n    }\n\n    return {\n      u_dataTexture: this.dataTexture, // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]\n      u_cellTypeLayout: this.getCellTypeLayout(),\n      // u_opacity: opacity === undefined ? 1 : opacity,\n      u_opacity: isNumber(opacity) ? opacity : 1.0,\n      u_textureBlend: textureBlend === 'normal' ? 0.0 : 1.0,\n      u_line_type: lineStyleObj[lineType],\n      u_dash_array: dashArray,\n\n      // 纹理支持参数\n      u_texture: this.texture, // 贴图\n      u_line_texture: lineTexture ? 1.0 : 0.0, // 传入线的标识\n      u_icon_step: iconStep,\n      u_textSize: [1024, this.iconService.canvasHeight || 128],\n\n      // 渐变色支持参数\n      u_linearColor: useLinearColor,\n      u_sourceColor: sourceColorArr,\n      u_targetColor: targetColorArr,\n\n      // 顶点高度 scale\n      u_vertexScale: vertexHeightScale,\n    };\n  }\n  public getAnimateUniforms(): IModelUniform {\n    const { animateOption } = this.layer.getLayerConfig() as ILayerConfig;\n    return {\n      u_aimate: this.animateOption2Array(animateOption as IAnimateOption),\n      u_time: this.layer.getLayerAnimateTime(),\n    };\n  }\n\n  public initModels(): IModel[] {\n    this.updateTexture();\n    this.iconService.on('imageUpdate', this.updateTexture);\n\n    return this.buildModels();\n  }\n\n  public clearModels() {\n    this.texture?.destroy();\n    this.dataTexture?.destroy();\n    this.iconService.off('imageUpdate', this.updateTexture);\n  }\n\n  public buildModels(): IModel[] {\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'line',\n        vertexShader: line_vert,\n        fragmentShader: line_frag,\n        triangulation: LineTriangulation,\n        primitive: gl.TRIANGLES,\n        blend: this.getBlend(),\n        depth: { enable: false },\n      }),\n    ];\n  }\n  protected registerBuiltinAttributes() {\n    // const lineType = this\n    // point layer size;\n    const {\n      lineType = 'solid',\n    } = this.layer.getLayerConfig() as ILineLayerStyleOptions;\n    // if (lineType === 'dash') {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'distance',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Distance',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[3]];\n        },\n      },\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'total_distance',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Total_Distance',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[5]];\n        },\n      },\n    });\n    // }\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 1 } = feature;\n          return Array.isArray(size) ? [size[0], size[1]] : [size as number, 0];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'normal',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Normal',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        // @ts-ignore\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n          normal: number[],\n        ) => {\n          return normal;\n        },\n      },\n    });\n\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'miter',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Miter',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[4]];\n        },\n      },\n    });\n\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_iconMapUV',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const iconMap = this.iconService.getIconMap();\n          const { texture } = feature;\n          const { x, y } = iconMap[texture as string] || { x: 0, y: 0 };\n          return [x, y];\n        },\n      },\n    });\n  }\n\n  private loadImage(url: IImage) {\n    return new Promise((resolve, reject) => {\n      if (url instanceof HTMLImageElement) {\n        resolve(url);\n        return;\n      }\n      const image = new Image();\n      image.crossOrigin = 'anonymous';\n      image.onload = () => {\n        resolve(image);\n      };\n      image.onerror = () => {\n        reject(new Error('Could not load image at ' + url));\n      };\n      image.src = url instanceof File ? URL.createObjectURL(url) : url;\n    });\n  }\n\n  private updateTexture = () => {\n    const { createTexture2D } = this.rendererService;\n    if (this.texture) {\n      this.texture.update({\n        data: this.iconService.getCanvas(),\n      });\n      this.layer.render();\n      return;\n    }\n    this.texture = createTexture2D({\n      data: this.iconService.getCanvas(),\n      mag: gl.NEAREST,\n      min: gl.NEAREST,\n      premultiplyAlpha: false,\n      width: 1024,\n      height: this.iconService.canvasHeight || 128,\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}