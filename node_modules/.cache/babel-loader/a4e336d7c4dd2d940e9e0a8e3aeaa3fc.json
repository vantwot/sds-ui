{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { FunctionExt, ObjectExt } from '../util';\nimport { Model } from '../model/model';\nimport { CellView } from '../view/cell';\nimport { NodeView } from '../view/node';\nimport { EdgeView } from '../view/edge';\nimport { Knob } from '../addon/knob';\nimport { MiniMap } from '../addon/minimap';\nimport { Snapline } from '../addon/snapline';\nimport { Scroller } from '../addon/scroller';\nimport { Selection } from '../addon/selection';\nimport { Clipboard } from '../addon/clipboard';\nimport { Transform } from '../addon/transform';\nimport { HTML } from '../shape/standard/html';\nimport { Edge as StandardEdge } from '../shape/standard/edge';\nimport { Base } from './base';\nimport { Options } from './options';\nimport { Renderer } from './renderer';\nimport { GraphView } from './view';\nimport { DefsManager } from './defs';\nimport { GridManager } from './grid';\nimport { CoordManager } from './coord';\nimport { SnaplineManager } from './snapline';\nimport { ScrollerManager } from './scroller';\nimport { ClipboardManager } from './clipboard';\nimport { HighlightManager } from './highlight';\nimport { TransformManager } from './transform';\nimport { SelectionManager } from './selection';\nimport { BackgroundManager } from './background';\nimport { HistoryManager } from './history';\nimport { MiniMapManager } from './minimap';\nimport { Keyboard } from './keyboard';\nimport { MouseWheel } from './mousewheel';\nimport { PrintManager } from './print';\nimport { FormatManager } from './format';\nimport { KnobManager } from './knob';\nimport { PanningManager } from './panning';\nimport { SizeManager } from './size';\nvar Decorator;\n\n(function (Decorator) {\n  function hook(nullable, hookName) {\n    return (target, methodName, descriptor) => {\n      const raw = descriptor.value;\n      const name = hookName || methodName;\n\n      descriptor.value = function () {\n        const hook = this.options[name];\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        if (hook != null) {\n          this.getNativeValue = raw.bind(this, ...args);\n          const ret = FunctionExt.call(hook, this.graph, ...args);\n          this.getNativeValue = null;\n\n          if (ret != null || nullable === true && ret === null) {\n            return ret;\n          }\n        }\n\n        return raw.call(this, ...args);\n      };\n    };\n  }\n\n  Decorator.hook = hook;\n\n  function after(hookName) {\n    return (target, methodName, descriptor) => {\n      const raw = descriptor.value;\n      const name = hookName || methodName;\n\n      descriptor.value = function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        let ret = raw.call(this, ...args);\n        const hook = this.options[name];\n\n        if (hook != null) {\n          ret = FunctionExt.call(hook, this.graph, ...args) && ret;\n        }\n\n        return ret;\n      };\n    };\n  }\n\n  Decorator.after = after;\n})(Decorator || (Decorator = {}));\n\nexport class Hook extends Base {\n  createModel() {\n    if (this.options.model) {\n      return this.options.model;\n    }\n\n    const model = new Model();\n    model.graph = this.graph;\n    return model;\n  }\n\n  createView() {\n    return new GraphView(this.graph);\n  }\n\n  createRenderer() {\n    return new Renderer(this.graph);\n  }\n\n  createDefsManager() {\n    return new DefsManager(this.graph);\n  }\n\n  createGridManager() {\n    return new GridManager(this.graph);\n  }\n\n  createCoordManager() {\n    return new CoordManager(this.graph);\n  }\n\n  createKnobManager() {\n    return new KnobManager(this.graph);\n  }\n\n  createTransform(node, widgetOptions) {\n    const options = this.getTransformOptions(node);\n\n    if (options.resizable || options.rotatable) {\n      return new Transform(Object.assign(Object.assign({\n        node,\n        graph: this.graph\n      }, options), widgetOptions));\n    }\n\n    if (options.clearAll) {\n      Transform.removeInstances(this.graph);\n    }\n\n    return null;\n  }\n\n  createKnob(node, widgetOptions) {\n    const options = Options.parseOptionGroup(this.graph, node, this.options.knob);\n    const localOptions = Object.assign(Object.assign({}, options), widgetOptions);\n\n    if (localOptions.clearAll) {\n      Knob.removeInstances(this.graph);\n    }\n\n    localOptions.clearAll = false;\n    const knob = node.prop('knob');\n    const widgets = [];\n    const meta = Array.isArray(knob) ? knob : [knob];\n    meta.forEach((knob, index) => {\n      if (knob) {\n        if (knob.enabled === false) {\n          return;\n        }\n\n        if (typeof knob.enabled === 'function' && knob.enabled.call(this.graph, node) === false) {\n          return;\n        }\n      } else {\n        return;\n      }\n\n      if (options.enabled) {\n        widgets.push(new Knob(Object.assign({\n          node,\n          index,\n          graph: this.graph\n        }, localOptions)));\n      }\n    });\n    return widgets;\n  }\n\n  getTransformOptions(node) {\n    const resizing = Options.parseOptionGroup(this.graph, node, this.options.resizing);\n    const rotating = Options.parseOptionGroup(this.graph, node, this.options.rotating);\n    const transforming = Options.parseOptionGroup(this.graph, node, this.options.transforming);\n    const options = Object.assign(Object.assign({}, transforming), {\n      resizable: resizing.enabled,\n      minWidth: resizing.minWidth,\n      maxWidth: resizing.maxWidth,\n      minHeight: resizing.minHeight,\n      maxHeight: resizing.maxHeight,\n      orthogonalResizing: resizing.orthogonal,\n      restrictedResizing: resizing.restrict != null ? resizing.restrict : resizing.restricted,\n      autoScrollOnResizing: resizing.autoScroll,\n      preserveAspectRatio: resizing.preserveAspectRatio,\n      allowReverse: resizing.allowReverse,\n      rotatable: rotating.enabled,\n      rotateGrid: rotating.grid\n    });\n    return options;\n  }\n\n  createTransformManager() {\n    return new TransformManager(this.graph);\n  }\n\n  createHighlightManager() {\n    return new HighlightManager(this.graph);\n  }\n\n  createBackgroundManager() {\n    return new BackgroundManager(this.graph);\n  }\n\n  createClipboard() {\n    return new Clipboard();\n  }\n\n  createClipboardManager() {\n    return new ClipboardManager(this.graph);\n  }\n\n  createSnapline() {\n    return new Snapline(Object.assign({\n      graph: this.graph\n    }, this.options.snapline));\n  }\n\n  createSnaplineManager() {\n    return new SnaplineManager(this.graph);\n  }\n\n  createSelection() {\n    return new Selection(Object.assign({\n      graph: this.graph\n    }, this.options.selecting));\n  }\n\n  createSelectionManager() {\n    return new SelectionManager(this.graph);\n  } // eslint-disable-next-line\n\n\n  allowRubberband(e) {\n    return true;\n  }\n\n  createHistoryManager() {\n    return new HistoryManager(Object.assign({\n      graph: this.graph\n    }, this.options.history));\n  }\n\n  createScroller() {\n    if (this.options.scroller.enabled) {\n      return new Scroller(Object.assign({\n        graph: this.graph\n      }, this.options.scroller));\n    }\n\n    return null;\n  }\n\n  createScrollerManager() {\n    return new ScrollerManager(this.graph);\n  } // eslint-disable-next-line\n\n\n  allowPanning(e) {\n    return true;\n  }\n\n  createMiniMap() {\n    const _a = this.options.minimap,\n          {\n      enabled\n    } = _a,\n          options = __rest(_a, [\"enabled\"]);\n\n    if (enabled) {\n      return new MiniMap(Object.assign({\n        graph: this.graph\n      }, options));\n    }\n\n    return null;\n  }\n\n  createMiniMapManager() {\n    return new MiniMapManager(this.graph);\n  }\n\n  createKeyboard() {\n    return new Keyboard(Object.assign({\n      graph: this.graph\n    }, this.options.keyboard));\n  }\n\n  createMouseWheel() {\n    return new MouseWheel(Object.assign({\n      graph: this.graph\n    }, this.options.mousewheel));\n  }\n\n  createPrintManager() {\n    return new PrintManager(this.graph);\n  }\n\n  createFormatManager() {\n    return new FormatManager(this.graph);\n  }\n\n  createPanningManager() {\n    return new PanningManager(this.graph);\n  }\n\n  createSizeManager() {\n    return new SizeManager(this.graph);\n  }\n\n  allowConnectToBlank(edge) {\n    const options = this.options.connecting;\n    const allowBlank = options.allowBlank != null ? options.allowBlank : options.dangling;\n\n    if (typeof allowBlank !== 'function') {\n      return !!allowBlank;\n    }\n\n    const edgeView = this.graph.findViewByCell(edge);\n    const sourceCell = edge.getSourceCell();\n    const targetCell = edge.getTargetCell();\n    const sourceView = this.graph.findViewByCell(sourceCell);\n    const targetView = this.graph.findViewByCell(targetCell);\n    return FunctionExt.call(allowBlank, this.graph, {\n      edge,\n      edgeView,\n      sourceCell,\n      targetCell,\n      sourceView,\n      targetView,\n      sourcePort: edge.getSourcePortId(),\n      targetPort: edge.getTargetPortId(),\n      sourceMagnet: edgeView.sourceMagnet,\n      targetMagnet: edgeView.targetMagnet\n    });\n  }\n\n  validateEdge(edge, type, initialTerminal) {\n    if (!this.allowConnectToBlank(edge)) {\n      const sourceId = edge.getSourceCellId();\n      const targetId = edge.getTargetCellId();\n\n      if (!(sourceId && targetId)) {\n        return false;\n      }\n    }\n\n    const validate = this.options.connecting.validateEdge;\n\n    if (validate) {\n      return FunctionExt.call(validate, this.graph, {\n        edge,\n        type,\n        previous: initialTerminal\n      });\n    }\n\n    return true;\n  }\n\n  validateMagnet(cellView, magnet, e) {\n    if (magnet.getAttribute('magnet') !== 'passive') {\n      const validate = this.options.connecting.validateMagnet;\n\n      if (validate) {\n        return FunctionExt.call(validate, this.graph, {\n          e,\n          magnet,\n          view: cellView,\n          cell: cellView.cell\n        });\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  getDefaultEdge(sourceView, sourceMagnet) {\n    let edge;\n    const create = this.options.connecting.createEdge;\n\n    if (create) {\n      edge = FunctionExt.call(create, this.graph, {\n        sourceMagnet,\n        sourceView,\n        sourceCell: sourceView.cell\n      });\n    }\n\n    if (edge == null) {\n      edge = new StandardEdge();\n    }\n\n    return edge;\n  }\n\n  validateConnection(sourceView, sourceMagnet, targetView, targetMagnet, terminalType, edgeView, candidateTerminal) {\n    const options = this.options.connecting;\n    const allowLoop = options.allowLoop;\n    const allowNode = options.allowNode;\n    const allowEdge = options.allowEdge;\n    const allowPort = options.allowPort;\n    const allowMulti = options.allowMulti != null ? options.allowMulti : options.multi;\n    const validate = options.validateConnection;\n    const edge = edgeView ? edgeView.cell : null;\n    const terminalView = terminalType === 'target' ? targetView : sourceView;\n    const terminalMagnet = terminalType === 'target' ? targetMagnet : sourceMagnet;\n    let valid = true;\n\n    const doValidate = validate => {\n      const sourcePort = terminalType === 'source' ? candidateTerminal ? candidateTerminal.port : null : edge ? edge.getSourcePortId() : null;\n      const targetPort = terminalType === 'target' ? candidateTerminal ? candidateTerminal.port : null : edge ? edge.getTargetPortId() : null;\n      return FunctionExt.call(validate, this.graph, {\n        edge,\n        edgeView,\n        sourceView,\n        targetView,\n        sourcePort,\n        targetPort,\n        sourceMagnet,\n        targetMagnet,\n        sourceCell: sourceView ? sourceView.cell : null,\n        targetCell: targetView ? targetView.cell : null,\n        type: terminalType\n      });\n    };\n\n    if (allowLoop != null) {\n      if (typeof allowLoop === 'boolean') {\n        if (!allowLoop && sourceView === targetView) {\n          valid = false;\n        }\n      } else {\n        valid = doValidate(allowLoop);\n      }\n    }\n\n    if (valid && allowPort != null) {\n      if (typeof allowPort === 'boolean') {\n        if (!allowPort && terminalMagnet) {\n          valid = false;\n        }\n      } else {\n        valid = doValidate(allowPort);\n      }\n    }\n\n    if (valid && allowEdge != null) {\n      if (typeof allowEdge === 'boolean') {\n        if (!allowEdge && EdgeView.isEdgeView(terminalView)) {\n          valid = false;\n        }\n      } else {\n        valid = doValidate(allowEdge);\n      }\n    }\n\n    if (valid && allowNode != null) {\n      if (typeof allowNode === 'boolean') {\n        if (!allowNode && terminalView != null) {\n          if (NodeView.isNodeView(terminalView) && terminalMagnet == null) {\n            valid = false;\n          }\n        }\n      } else {\n        valid = doValidate(allowNode);\n      }\n    }\n\n    if (valid && allowMulti != null && edgeView) {\n      const edge = edgeView.cell;\n      const source = terminalType === 'source' ? candidateTerminal : edge.getSource();\n      const target = terminalType === 'target' ? candidateTerminal : edge.getTarget();\n      const terminalCell = candidateTerminal ? this.graph.getCellById(candidateTerminal.cell) : null;\n\n      if (source && target && source.cell && target.cell && terminalCell) {\n        if (typeof allowMulti === 'function') {\n          valid = doValidate(allowMulti);\n        } else {\n          const connectedEdges = this.model.getConnectedEdges(terminalCell, {\n            outgoing: terminalType === 'source',\n            incoming: terminalType === 'target'\n          });\n\n          if (connectedEdges.length) {\n            if (allowMulti === 'withPort') {\n              const exist = connectedEdges.some(link => {\n                const s = link.getSource();\n                const t = link.getTarget();\n                return s && t && s.cell === source.cell && t.cell === target.cell && s.port != null && s.port === source.port && t.port != null && t.port === target.port;\n              });\n\n              if (exist) {\n                valid = false;\n              }\n            } else if (!allowMulti) {\n              const exist = connectedEdges.some(link => {\n                const s = link.getSource();\n                const t = link.getTarget();\n                return s && t && s.cell === source.cell && t.cell === target.cell;\n              });\n\n              if (exist) {\n                valid = false;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (valid && validate != null) {\n      valid = doValidate(validate);\n    }\n\n    return valid;\n  }\n\n  getRestrictArea(view) {\n    const restrict = this.options.translating.restrict;\n    const area = typeof restrict === 'function' ? FunctionExt.call(restrict, this.graph, view) : restrict;\n\n    if (typeof area === 'number') {\n      return this.graph.transform.getGraphArea().inflate(area);\n    }\n\n    if (area === true) {\n      return this.graph.transform.getGraphArea();\n    }\n\n    return area || null;\n  }\n\n  onViewUpdated(view, flag, options) {\n    if (flag & Renderer.FLAG_INSERT || options.mounting) {\n      return;\n    }\n\n    this.graph.renderer.requestConnectedEdgesUpdate(view, options);\n  }\n\n  onViewPostponed(view, flag, options) {\n    return this.graph.renderer.forcePostponedViewUpdate(view, flag);\n  }\n\n  getCellView(cell) {\n    return null;\n  }\n\n  createCellView(cell) {\n    const options = {\n      graph: this.graph\n    };\n    const ctor = this.getCellView(cell);\n\n    if (ctor) {\n      return new ctor(cell, options); // eslint-disable-line new-cap\n    }\n\n    const view = cell.view;\n\n    if (view != null && typeof view === 'string') {\n      const def = CellView.registry.get(view);\n\n      if (def) {\n        return new def(cell, options); // eslint-disable-line new-cap\n      }\n\n      return CellView.registry.onNotFound(view);\n    }\n\n    if (cell.isNode()) {\n      return new NodeView(cell, options);\n    }\n\n    if (cell.isEdge()) {\n      return new EdgeView(cell, options);\n    }\n\n    return null;\n  }\n\n  getHTMLComponent(node) {\n    let ret = node.getHTML();\n\n    if (typeof ret === 'string') {\n      ret = HTML.componentRegistry.get(ret) || ret;\n    }\n\n    if (ObjectExt.isPlainObject(ret)) {\n      ret = ret.render;\n    }\n\n    if (typeof ret === 'function') {\n      return FunctionExt.call(ret, this.graph, node);\n    }\n\n    return ret;\n  }\n\n  shouldUpdateHTMLComponent(node) {\n    let html = node.getHTML();\n\n    if (typeof html === 'string') {\n      html = HTML.componentRegistry.get(html) || html;\n    }\n\n    if (ObjectExt.isPlainObject(html)) {\n      const shouldUpdate = html.shouldComponentUpdate;\n\n      if (typeof shouldUpdate === 'function') {\n        return FunctionExt.call(shouldUpdate, this.graph, node);\n      }\n\n      return !!shouldUpdate;\n    }\n\n    return false;\n  }\n\n  onEdgeLabelRendered(args) {} // eslint-disable-line\n\n\n  onPortRendered(args) {} // eslint-disable-line\n\n\n  onToolItemCreated(args) {} // eslint-disable-line\n\n\n}\n\n__decorate([Decorator.hook()], Hook.prototype, \"createModel\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createView\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createRenderer\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createDefsManager\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createGridManager\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createCoordManager\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createKnobManager\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createTransform\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createKnob\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createTransformManager\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createHighlightManager\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createBackgroundManager\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createClipboard\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createClipboardManager\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createSnapline\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createSnaplineManager\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createSelection\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createSelectionManager\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"allowRubberband\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createHistoryManager\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createScroller\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createScrollerManager\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"allowPanning\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createMiniMap\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createMiniMapManager\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createKeyboard\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createMouseWheel\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createPrintManager\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createFormatManager\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createPanningManager\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"createSizeManager\", null);\n\n__decorate([Decorator.after()], Hook.prototype, \"onViewUpdated\", null);\n\n__decorate([Decorator.after()], Hook.prototype, \"onViewPostponed\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"getCellView\", null);\n\n__decorate([Decorator.hook(true)], Hook.prototype, \"createCellView\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"getHTMLComponent\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"shouldUpdateHTMLComponent\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"onEdgeLabelRendered\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"onPortRendered\", null);\n\n__decorate([Decorator.hook()], Hook.prototype, \"onToolItemCreated\", null);","map":{"version":3,"sources":["../../src/graph/hook.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { FunctionExt, ObjectExt } from '../util';\nimport { Model } from '../model/model';\nimport { CellView } from '../view/cell';\nimport { NodeView } from '../view/node';\nimport { EdgeView } from '../view/edge';\nimport { Knob } from '../addon/knob';\nimport { MiniMap } from '../addon/minimap';\nimport { Snapline } from '../addon/snapline';\nimport { Scroller } from '../addon/scroller';\nimport { Selection } from '../addon/selection';\nimport { Clipboard } from '../addon/clipboard';\nimport { Transform } from '../addon/transform';\nimport { HTML } from '../shape/standard/html';\nimport { Edge as StandardEdge } from '../shape/standard/edge';\nimport { Base } from './base';\nimport { Options } from './options';\nimport { Renderer } from './renderer';\nimport { GraphView } from './view';\nimport { DefsManager } from './defs';\nimport { GridManager } from './grid';\nimport { CoordManager } from './coord';\nimport { SnaplineManager } from './snapline';\nimport { ScrollerManager } from './scroller';\nimport { ClipboardManager } from './clipboard';\nimport { HighlightManager } from './highlight';\nimport { TransformManager } from './transform';\nimport { SelectionManager } from './selection';\nimport { BackgroundManager } from './background';\nimport { HistoryManager } from './history';\nimport { MiniMapManager } from './minimap';\nimport { Keyboard } from './keyboard';\nimport { MouseWheel } from './mousewheel';\nimport { PrintManager } from './print';\nimport { FormatManager } from './format';\nimport { KnobManager } from './knob';\nimport { PanningManager } from './panning';\nimport { SizeManager } from './size';\nvar Decorator;\n(function (Decorator) {\n    function hook(nullable, hookName) {\n        return (target, methodName, descriptor) => {\n            const raw = descriptor.value;\n            const name = hookName || methodName;\n            descriptor.value = function (...args) {\n                const hook = this.options[name];\n                if (hook != null) {\n                    this.getNativeValue = raw.bind(this, ...args);\n                    const ret = FunctionExt.call(hook, this.graph, ...args);\n                    this.getNativeValue = null;\n                    if (ret != null || (nullable === true && ret === null)) {\n                        return ret;\n                    }\n                }\n                return raw.call(this, ...args);\n            };\n        };\n    }\n    Decorator.hook = hook;\n    function after(hookName) {\n        return (target, methodName, descriptor) => {\n            const raw = descriptor.value;\n            const name = hookName || methodName;\n            descriptor.value = function (...args) {\n                let ret = raw.call(this, ...args);\n                const hook = this.options[name];\n                if (hook != null) {\n                    ret = FunctionExt.call(hook, this.graph, ...args) && ret;\n                }\n                return ret;\n            };\n        };\n    }\n    Decorator.after = after;\n})(Decorator || (Decorator = {}));\nexport class Hook extends Base {\n    createModel() {\n        if (this.options.model) {\n            return this.options.model;\n        }\n        const model = new Model();\n        model.graph = this.graph;\n        return model;\n    }\n    createView() {\n        return new GraphView(this.graph);\n    }\n    createRenderer() {\n        return new Renderer(this.graph);\n    }\n    createDefsManager() {\n        return new DefsManager(this.graph);\n    }\n    createGridManager() {\n        return new GridManager(this.graph);\n    }\n    createCoordManager() {\n        return new CoordManager(this.graph);\n    }\n    createKnobManager() {\n        return new KnobManager(this.graph);\n    }\n    createTransform(node, widgetOptions) {\n        const options = this.getTransformOptions(node);\n        if (options.resizable || options.rotatable) {\n            return new Transform(Object.assign(Object.assign({ node, graph: this.graph }, options), widgetOptions));\n        }\n        if (options.clearAll) {\n            Transform.removeInstances(this.graph);\n        }\n        return null;\n    }\n    createKnob(node, widgetOptions) {\n        const options = Options.parseOptionGroup(this.graph, node, this.options.knob);\n        const localOptions = Object.assign(Object.assign({}, options), widgetOptions);\n        if (localOptions.clearAll) {\n            Knob.removeInstances(this.graph);\n        }\n        localOptions.clearAll = false;\n        const knob = node.prop('knob');\n        const widgets = [];\n        const meta = Array.isArray(knob) ? knob : [knob];\n        meta.forEach((knob, index) => {\n            if (knob) {\n                if (knob.enabled === false) {\n                    return;\n                }\n                if (typeof knob.enabled === 'function' &&\n                    knob.enabled.call(this.graph, node) === false) {\n                    return;\n                }\n            }\n            else {\n                return;\n            }\n            if (options.enabled) {\n                widgets.push(new Knob(Object.assign({ node,\n                    index, graph: this.graph }, localOptions)));\n            }\n        });\n        return widgets;\n    }\n    getTransformOptions(node) {\n        const resizing = Options.parseOptionGroup(this.graph, node, this.options.resizing);\n        const rotating = Options.parseOptionGroup(this.graph, node, this.options.rotating);\n        const transforming = Options.parseOptionGroup(this.graph, node, this.options.transforming);\n        const options = Object.assign(Object.assign({}, transforming), { resizable: resizing.enabled, minWidth: resizing.minWidth, maxWidth: resizing.maxWidth, minHeight: resizing.minHeight, maxHeight: resizing.maxHeight, orthogonalResizing: resizing.orthogonal, restrictedResizing: resizing.restrict != null ? resizing.restrict : resizing.restricted, autoScrollOnResizing: resizing.autoScroll, preserveAspectRatio: resizing.preserveAspectRatio, allowReverse: resizing.allowReverse, rotatable: rotating.enabled, rotateGrid: rotating.grid });\n        return options;\n    }\n    createTransformManager() {\n        return new TransformManager(this.graph);\n    }\n    createHighlightManager() {\n        return new HighlightManager(this.graph);\n    }\n    createBackgroundManager() {\n        return new BackgroundManager(this.graph);\n    }\n    createClipboard() {\n        return new Clipboard();\n    }\n    createClipboardManager() {\n        return new ClipboardManager(this.graph);\n    }\n    createSnapline() {\n        return new Snapline(Object.assign({ graph: this.graph }, this.options.snapline));\n    }\n    createSnaplineManager() {\n        return new SnaplineManager(this.graph);\n    }\n    createSelection() {\n        return new Selection(Object.assign({ graph: this.graph }, this.options.selecting));\n    }\n    createSelectionManager() {\n        return new SelectionManager(this.graph);\n    }\n    // eslint-disable-next-line\n    allowRubberband(e) {\n        return true;\n    }\n    createHistoryManager() {\n        return new HistoryManager(Object.assign({ graph: this.graph }, this.options.history));\n    }\n    createScroller() {\n        if (this.options.scroller.enabled) {\n            return new Scroller(Object.assign({ graph: this.graph }, this.options.scroller));\n        }\n        return null;\n    }\n    createScrollerManager() {\n        return new ScrollerManager(this.graph);\n    }\n    // eslint-disable-next-line\n    allowPanning(e) {\n        return true;\n    }\n    createMiniMap() {\n        const _a = this.options.minimap, { enabled } = _a, options = __rest(_a, [\"enabled\"]);\n        if (enabled) {\n            return new MiniMap(Object.assign({ graph: this.graph }, options));\n        }\n        return null;\n    }\n    createMiniMapManager() {\n        return new MiniMapManager(this.graph);\n    }\n    createKeyboard() {\n        return new Keyboard(Object.assign({ graph: this.graph }, this.options.keyboard));\n    }\n    createMouseWheel() {\n        return new MouseWheel(Object.assign({ graph: this.graph }, this.options.mousewheel));\n    }\n    createPrintManager() {\n        return new PrintManager(this.graph);\n    }\n    createFormatManager() {\n        return new FormatManager(this.graph);\n    }\n    createPanningManager() {\n        return new PanningManager(this.graph);\n    }\n    createSizeManager() {\n        return new SizeManager(this.graph);\n    }\n    allowConnectToBlank(edge) {\n        const options = this.options.connecting;\n        const allowBlank = options.allowBlank != null ? options.allowBlank : options.dangling;\n        if (typeof allowBlank !== 'function') {\n            return !!allowBlank;\n        }\n        const edgeView = this.graph.findViewByCell(edge);\n        const sourceCell = edge.getSourceCell();\n        const targetCell = edge.getTargetCell();\n        const sourceView = this.graph.findViewByCell(sourceCell);\n        const targetView = this.graph.findViewByCell(targetCell);\n        return FunctionExt.call(allowBlank, this.graph, {\n            edge,\n            edgeView,\n            sourceCell,\n            targetCell,\n            sourceView,\n            targetView,\n            sourcePort: edge.getSourcePortId(),\n            targetPort: edge.getTargetPortId(),\n            sourceMagnet: edgeView.sourceMagnet,\n            targetMagnet: edgeView.targetMagnet,\n        });\n    }\n    validateEdge(edge, type, initialTerminal) {\n        if (!this.allowConnectToBlank(edge)) {\n            const sourceId = edge.getSourceCellId();\n            const targetId = edge.getTargetCellId();\n            if (!(sourceId && targetId)) {\n                return false;\n            }\n        }\n        const validate = this.options.connecting.validateEdge;\n        if (validate) {\n            return FunctionExt.call(validate, this.graph, {\n                edge,\n                type,\n                previous: initialTerminal,\n            });\n        }\n        return true;\n    }\n    validateMagnet(cellView, magnet, e) {\n        if (magnet.getAttribute('magnet') !== 'passive') {\n            const validate = this.options.connecting.validateMagnet;\n            if (validate) {\n                return FunctionExt.call(validate, this.graph, {\n                    e,\n                    magnet,\n                    view: cellView,\n                    cell: cellView.cell,\n                });\n            }\n            return true;\n        }\n        return false;\n    }\n    getDefaultEdge(sourceView, sourceMagnet) {\n        let edge;\n        const create = this.options.connecting.createEdge;\n        if (create) {\n            edge = FunctionExt.call(create, this.graph, {\n                sourceMagnet,\n                sourceView,\n                sourceCell: sourceView.cell,\n            });\n        }\n        if (edge == null) {\n            edge = new StandardEdge();\n        }\n        return edge;\n    }\n    validateConnection(sourceView, sourceMagnet, targetView, targetMagnet, terminalType, edgeView, candidateTerminal) {\n        const options = this.options.connecting;\n        const allowLoop = options.allowLoop;\n        const allowNode = options.allowNode;\n        const allowEdge = options.allowEdge;\n        const allowPort = options.allowPort;\n        const allowMulti = options.allowMulti != null ? options.allowMulti : options.multi;\n        const validate = options.validateConnection;\n        const edge = edgeView ? edgeView.cell : null;\n        const terminalView = terminalType === 'target' ? targetView : sourceView;\n        const terminalMagnet = terminalType === 'target' ? targetMagnet : sourceMagnet;\n        let valid = true;\n        const doValidate = (validate) => {\n            const sourcePort = terminalType === 'source'\n                ? candidateTerminal\n                    ? candidateTerminal.port\n                    : null\n                : edge\n                    ? edge.getSourcePortId()\n                    : null;\n            const targetPort = terminalType === 'target'\n                ? candidateTerminal\n                    ? candidateTerminal.port\n                    : null\n                : edge\n                    ? edge.getTargetPortId()\n                    : null;\n            return FunctionExt.call(validate, this.graph, {\n                edge,\n                edgeView,\n                sourceView,\n                targetView,\n                sourcePort,\n                targetPort,\n                sourceMagnet,\n                targetMagnet,\n                sourceCell: sourceView ? sourceView.cell : null,\n                targetCell: targetView ? targetView.cell : null,\n                type: terminalType,\n            });\n        };\n        if (allowLoop != null) {\n            if (typeof allowLoop === 'boolean') {\n                if (!allowLoop && sourceView === targetView) {\n                    valid = false;\n                }\n            }\n            else {\n                valid = doValidate(allowLoop);\n            }\n        }\n        if (valid && allowPort != null) {\n            if (typeof allowPort === 'boolean') {\n                if (!allowPort && terminalMagnet) {\n                    valid = false;\n                }\n            }\n            else {\n                valid = doValidate(allowPort);\n            }\n        }\n        if (valid && allowEdge != null) {\n            if (typeof allowEdge === 'boolean') {\n                if (!allowEdge && EdgeView.isEdgeView(terminalView)) {\n                    valid = false;\n                }\n            }\n            else {\n                valid = doValidate(allowEdge);\n            }\n        }\n        if (valid && allowNode != null) {\n            if (typeof allowNode === 'boolean') {\n                if (!allowNode && terminalView != null) {\n                    if (NodeView.isNodeView(terminalView) && terminalMagnet == null) {\n                        valid = false;\n                    }\n                }\n            }\n            else {\n                valid = doValidate(allowNode);\n            }\n        }\n        if (valid && allowMulti != null && edgeView) {\n            const edge = edgeView.cell;\n            const source = terminalType === 'source'\n                ? candidateTerminal\n                : edge.getSource();\n            const target = terminalType === 'target'\n                ? candidateTerminal\n                : edge.getTarget();\n            const terminalCell = candidateTerminal\n                ? this.graph.getCellById(candidateTerminal.cell)\n                : null;\n            if (source && target && source.cell && target.cell && terminalCell) {\n                if (typeof allowMulti === 'function') {\n                    valid = doValidate(allowMulti);\n                }\n                else {\n                    const connectedEdges = this.model.getConnectedEdges(terminalCell, {\n                        outgoing: terminalType === 'source',\n                        incoming: terminalType === 'target',\n                    });\n                    if (connectedEdges.length) {\n                        if (allowMulti === 'withPort') {\n                            const exist = connectedEdges.some((link) => {\n                                const s = link.getSource();\n                                const t = link.getTarget();\n                                return (s &&\n                                    t &&\n                                    s.cell === source.cell &&\n                                    t.cell === target.cell &&\n                                    s.port != null &&\n                                    s.port === source.port &&\n                                    t.port != null &&\n                                    t.port === target.port);\n                            });\n                            if (exist) {\n                                valid = false;\n                            }\n                        }\n                        else if (!allowMulti) {\n                            const exist = connectedEdges.some((link) => {\n                                const s = link.getSource();\n                                const t = link.getTarget();\n                                return (s && t && s.cell === source.cell && t.cell === target.cell);\n                            });\n                            if (exist) {\n                                valid = false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (valid && validate != null) {\n            valid = doValidate(validate);\n        }\n        return valid;\n    }\n    getRestrictArea(view) {\n        const restrict = this.options.translating.restrict;\n        const area = typeof restrict === 'function'\n            ? FunctionExt.call(restrict, this.graph, view)\n            : restrict;\n        if (typeof area === 'number') {\n            return this.graph.transform.getGraphArea().inflate(area);\n        }\n        if (area === true) {\n            return this.graph.transform.getGraphArea();\n        }\n        return area || null;\n    }\n    onViewUpdated(view, flag, options) {\n        if (flag & Renderer.FLAG_INSERT || options.mounting) {\n            return;\n        }\n        this.graph.renderer.requestConnectedEdgesUpdate(view, options);\n    }\n    onViewPostponed(view, flag, options) {\n        return this.graph.renderer.forcePostponedViewUpdate(view, flag);\n    }\n    getCellView(cell) {\n        return null;\n    }\n    createCellView(cell) {\n        const options = { graph: this.graph };\n        const ctor = this.getCellView(cell);\n        if (ctor) {\n            return new ctor(cell, options); // eslint-disable-line new-cap\n        }\n        const view = cell.view;\n        if (view != null && typeof view === 'string') {\n            const def = CellView.registry.get(view);\n            if (def) {\n                return new def(cell, options); // eslint-disable-line new-cap\n            }\n            return CellView.registry.onNotFound(view);\n        }\n        if (cell.isNode()) {\n            return new NodeView(cell, options);\n        }\n        if (cell.isEdge()) {\n            return new EdgeView(cell, options);\n        }\n        return null;\n    }\n    getHTMLComponent(node) {\n        let ret = node.getHTML();\n        if (typeof ret === 'string') {\n            ret = HTML.componentRegistry.get(ret) || ret;\n        }\n        if (ObjectExt.isPlainObject(ret)) {\n            ret = ret.render;\n        }\n        if (typeof ret === 'function') {\n            return FunctionExt.call(ret, this.graph, node);\n        }\n        return ret;\n    }\n    shouldUpdateHTMLComponent(node) {\n        let html = node.getHTML();\n        if (typeof html === 'string') {\n            html = HTML.componentRegistry.get(html) || html;\n        }\n        if (ObjectExt.isPlainObject(html)) {\n            const shouldUpdate = html\n                .shouldComponentUpdate;\n            if (typeof shouldUpdate === 'function') {\n                return FunctionExt.call(shouldUpdate, this.graph, node);\n            }\n            return !!shouldUpdate;\n        }\n        return false;\n    }\n    onEdgeLabelRendered(args) { } // eslint-disable-line\n    onPortRendered(args) { } // eslint-disable-line\n    onToolItemCreated(args) { } // eslint-disable-line\n}\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createModel\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createView\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createRenderer\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createDefsManager\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createGridManager\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createCoordManager\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createKnobManager\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createTransform\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createKnob\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createTransformManager\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createHighlightManager\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createBackgroundManager\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createClipboard\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createClipboardManager\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createSnapline\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createSnaplineManager\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createSelection\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createSelectionManager\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"allowRubberband\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createHistoryManager\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createScroller\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createScrollerManager\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"allowPanning\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createMiniMap\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createMiniMapManager\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createKeyboard\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createMouseWheel\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createPrintManager\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createFormatManager\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createPanningManager\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"createSizeManager\", null);\n__decorate([\n    Decorator.after()\n], Hook.prototype, \"onViewUpdated\", null);\n__decorate([\n    Decorator.after()\n], Hook.prototype, \"onViewPostponed\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"getCellView\", null);\n__decorate([\n    Decorator.hook(true)\n], Hook.prototype, \"createCellView\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"getHTMLComponent\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"shouldUpdateHTMLComponent\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"onEdgeLabelRendered\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"onPortRendered\", null);\n__decorate([\n    Decorator.hook()\n], Hook.prototype, \"onToolItemCreated\", null);\n//# sourceMappingURL=hook.js.map"]},"metadata":{},"sourceType":"module"}