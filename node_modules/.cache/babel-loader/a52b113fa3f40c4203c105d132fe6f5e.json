{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { aProjectFlat, Satistics } from '@antv/l7-utils';\nvar R_EARTH = 6378000;\nexport function aggregatorToGrid(data, option) {\n  var dataArray = data.dataArray;\n  var _option$size = option.size,\n      size = _option$size === void 0 ? 10 : _option$size;\n  var pixlSize = size / (2 * Math.PI * R_EARTH) * (256 << 20) / 2;\n\n  var _pointsGridHash2 = _pointsGridHash(dataArray, size),\n      gridHash = _pointsGridHash2.gridHash,\n      gridOffset = _pointsGridHash2.gridOffset;\n\n  var layerData = _getGridLayerDataFromGridHash(gridHash, gridOffset, option);\n\n  return {\n    yOffset: pixlSize,\n    xOffset: pixlSize,\n    radius: pixlSize,\n    type: 'grid',\n    dataArray: layerData\n  };\n}\n\nfunction _pointsGridHash(dataArray, size) {\n  var latMin = Infinity;\n  var latMax = -Infinity;\n  var pLat;\n\n  var _iterator = _createForOfIteratorHelper(dataArray),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var point = _step.value;\n      pLat = point.coordinates[1];\n\n      if (Number.isFinite(pLat)) {\n        latMin = pLat < latMin ? pLat : latMin;\n        latMax = pLat > latMax ? pLat : latMax;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var centerLat = (latMin + latMax) / 2;\n\n  var gridOffset = _calculateGridLatLonOffset(size, centerLat);\n\n  if (gridOffset.xOffset <= 0 || gridOffset.yOffset <= 0) {\n    return {\n      gridHash: {},\n      gridOffset: gridOffset\n    };\n  }\n\n  var gridHash = {};\n\n  var _iterator2 = _createForOfIteratorHelper(dataArray),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _point = _step2.value;\n      var lat = _point.coordinates[1];\n      var lng = _point.coordinates[0];\n\n      if (Number.isFinite(lat) && Number.isFinite(lng)) {\n        var latIdx = Math.floor((lat + 90) / gridOffset.yOffset);\n        var lonIdx = Math.floor((lng + 180) / gridOffset.xOffset);\n\n        var _key = \"\".concat(latIdx, \"-\").concat(lonIdx);\n\n        gridHash[_key] = gridHash[_key] || {\n          count: 0,\n          points: []\n        };\n        gridHash[_key].count += 1;\n\n        gridHash[_key].points.push(_point);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return {\n    gridHash: gridHash,\n    gridOffset: gridOffset\n  };\n}\n\nfunction _calculateGridLatLonOffset(cellSize, latitude) {\n  var yOffset = _calculateLatOffset(cellSize);\n\n  var xOffset = _calculateLonOffset(latitude, cellSize);\n\n  return {\n    yOffset: yOffset,\n    xOffset: xOffset\n  };\n}\n\nfunction _calculateLatOffset(dy) {\n  return dy / R_EARTH * (180 / Math.PI);\n}\n\nfunction _calculateLonOffset(lat, dx) {\n  return dx / R_EARTH * (180 / Math.PI) / Math.cos(lat * Math.PI / 180);\n}\n\nfunction _getGridLayerDataFromGridHash(gridHash, gridOffset, option) {\n  return Object.keys(gridHash).reduce(function (accu, key, i) {\n    var idxs = key.split('-');\n    var latIdx = parseInt(idxs[0], 10);\n    var lonIdx = parseInt(idxs[1], 10);\n    var item = {};\n\n    if (option.field && option.method) {\n      var columns = Satistics.getColumn(gridHash[key].points, option.field);\n      item[option.method] = Satistics.statMap[option.method](columns);\n    }\n\n    Object.assign(item, {\n      _id: i,\n      coordinates: aProjectFlat([-180 + gridOffset.xOffset * (lonIdx + 0.5), -90 + gridOffset.yOffset * (latIdx + 0.5)]),\n      rawData: gridHash[key].points,\n      count: gridHash[key].count\n    });\n    accu.push(item);\n    return accu;\n  }, []);\n}","map":{"version":3,"sources":["../../src/transform/grid.ts"],"names":["R_EARTH","dataArray","data","size","option","pixlSize","Math","gridHash","gridOffset","_pointsGridHash","layerData","_getGridLayerDataFromGridHash","yOffset","xOffset","radius","type","latMin","latMax","point","pLat","Number","centerLat","_calculateGridLatLonOffset","lat","lng","latIdx","lonIdx","key","count","points","_calculateLatOffset","_calculateLonOffset","dy","dx","idxs","parseInt","item","columns","Satistics","Object","_id","coordinates","aProjectFlat","rawData","accu"],"mappings":"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","sourcesContent":["/**\n * 生成四边形热力图\n */\nimport { IParserData, ITransform } from '@antv/l7-core';\nimport { aProjectFlat, Satistics } from '@antv/l7-utils';\n\ninterface IGridHash {\n  [key: string]: any;\n}\ninterface IGridOffset {\n  yOffset: number;\n  xOffset: number;\n}\nconst R_EARTH = 6378000;\n\nexport function aggregatorToGrid(data: IParserData, option: ITransform) {\n  const dataArray = data.dataArray;\n  const { size = 10 } = option;\n  const pixlSize = ((size / (2 * Math.PI * R_EARTH)) * (256 << 20)) / 2;\n  const { gridHash, gridOffset } = _pointsGridHash(dataArray, size);\n  const layerData = _getGridLayerDataFromGridHash(gridHash, gridOffset, option);\n  return {\n    yOffset: pixlSize,\n    xOffset: pixlSize,\n    radius: pixlSize,\n    type: 'grid',\n    dataArray: layerData,\n  };\n}\n\nfunction _pointsGridHash(dataArray: any[], size: number) {\n  let latMin = Infinity;\n  let latMax = -Infinity;\n  let pLat;\n\n  for (const point of dataArray) {\n    pLat = point.coordinates[1];\n    if (Number.isFinite(pLat)) {\n      latMin = pLat < latMin ? pLat : latMin;\n      latMax = pLat > latMax ? pLat : latMax;\n    }\n  }\n  const centerLat = (latMin + latMax) / 2;\n  const gridOffset = _calculateGridLatLonOffset(size, centerLat);\n  if (gridOffset.xOffset <= 0 || gridOffset.yOffset <= 0) {\n    return { gridHash: {}, gridOffset };\n  }\n  const gridHash: IGridHash = {};\n  for (const point of dataArray) {\n    const lat = point.coordinates[1];\n    const lng = point.coordinates[0];\n\n    if (Number.isFinite(lat) && Number.isFinite(lng)) {\n      const latIdx = Math.floor((lat + 90) / gridOffset.yOffset);\n      const lonIdx = Math.floor((lng + 180) / gridOffset.xOffset);\n      const key = `${latIdx}-${lonIdx}`;\n\n      gridHash[key] = gridHash[key] || { count: 0, points: [] };\n      gridHash[key].count += 1;\n      gridHash[key].points.push(point);\n    }\n  }\n\n  return { gridHash, gridOffset };\n}\n// 计算网格偏移量\nfunction _calculateGridLatLonOffset(cellSize: number, latitude: number) {\n  const yOffset = _calculateLatOffset(cellSize);\n  const xOffset = _calculateLonOffset(latitude, cellSize);\n  return { yOffset, xOffset };\n}\n\nfunction _calculateLatOffset(dy: number) {\n  return (dy / R_EARTH) * (180 / Math.PI);\n}\n\nfunction _calculateLonOffset(lat: number, dx: number) {\n  return ((dx / R_EARTH) * (180 / Math.PI)) / Math.cos((lat * Math.PI) / 180);\n}\nfunction _getGridLayerDataFromGridHash(\n  gridHash: IGridHash,\n  gridOffset: IGridOffset,\n  option: ITransform,\n) {\n  return Object.keys(gridHash).reduce((accu, key, i) => {\n    const idxs = key.split('-');\n    const latIdx = parseInt(idxs[0], 10);\n    const lonIdx = parseInt(idxs[1], 10);\n    const item: {\n      [key: string]: any;\n    } = {};\n    if (option.field && option.method) {\n      const columns = Satistics.getColumn(gridHash[key].points, option.field);\n      item[option.method] = Satistics.statMap[option.method](columns);\n    }\n    Object.assign(item, {\n      _id: i,\n      coordinates: aProjectFlat([\n        -180 + gridOffset.xOffset * (lonIdx + 0.5),\n        -90 + gridOffset.yOffset * (latIdx + 0.5),\n      ]),\n      rawData: gridHash[key].points,\n      count: gridHash[key].count,\n    });\n    // @ts-ignore\n    accu.push(item);\n    return accu;\n  }, []);\n}\n"]},"metadata":{},"sourceType":"module"}