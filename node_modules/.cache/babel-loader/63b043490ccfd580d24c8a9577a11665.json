{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { $document } from '../document';\nimport { Event } from '../Event';\n\nvar MouseEvent = function (_Event) {\n  _inherits(MouseEvent, _Event);\n\n  var _super = _createSuper(MouseEvent);\n\n  function MouseEvent(type) {\n    _classCallCheck(this, MouseEvent);\n\n    return _super.call(this, type);\n  }\n\n  return MouseEvent;\n}(Event);\n\nfunction eventHandlerFactory(type) {\n  return function (rawEvent) {\n    rawEvent.type = type;\n    $document.dispatchEvent(rawEvent);\n  };\n}\n\nvar dispatchMouseDown = eventHandlerFactory('mousedown');\nvar dispatchMouseMove = eventHandlerFactory('mousemove');\nvar dispatchMouseUp = eventHandlerFactory('mouseup');\nexport { dispatchMouseDown, dispatchMouseMove, dispatchMouseUp };","map":{"version":3,"sources":["../../../src/mini-adapter/EventIniter/MouseEvent.ts"],"names":["MouseEvent","Event","rawEvent","$document","dispatchMouseDown","eventHandlerFactory","dispatchMouseMove","dispatchMouseUp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAAA,SAAA,QAAA,aAAA;AACA,SAAA,KAAA,QAAA,UAAA;;IAEMA,U;;;;;AACJ,WAAA,UAAA,CAAA,IAAA,EAAkB;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA;;AAAA,WAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,IAAA,CAAA;AAEjB;;;EAHsBC,K;;AAMzB,SAAA,mBAAA,CAAA,IAAA,EAAmC;AACjC,SAAO,UAAA,QAAA,EAAc;AACnBC,IAAAA,QAAQ,CAARA,IAAAA,GAAAA,IAAAA;AACAC,IAAAA,SAAS,CAATA,aAAAA,CAAAA,QAAAA;AAFF,GAAA;AAID;;AAED,IAAMC,iBAAiB,GAAGC,mBAAmB,CAA7C,WAA6C,CAA7C;AACA,IAAMC,iBAAiB,GAAGD,mBAAmB,CAA7C,WAA6C,CAA7C;AACA,IAAME,eAAe,GAAGF,mBAAmB,CAA3C,SAA2C,CAA3C;AACA,SAAA,iBAAA,EAAA,iBAAA,EAAA,eAAA","sourcesContent":["// @ts-nocheck\n// tslint:disable\nimport { $document } from '../document';\nimport { Event } from '../Event';\n\nclass MouseEvent extends Event {\n  constructor(type) {\n    super(type);\n  }\n}\n\nfunction eventHandlerFactory(type) {\n  return (rawEvent) => {\n    rawEvent.type = type;\n    $document.dispatchEvent(rawEvent);\n  };\n}\n\nconst dispatchMouseDown = eventHandlerFactory('mousedown');\nconst dispatchMouseMove = eventHandlerFactory('mousemove');\nconst dispatchMouseUp = eventHandlerFactory('mouseup');\nexport { dispatchMouseDown, dispatchMouseMove, dispatchMouseUp };\n"]},"metadata":{},"sourceType":"module"}