{"ast":null,"code":"import { Config } from '../global/config';\nimport { StringExt, FunctionExt } from '../util';\nexport var LocalStorage;\n\n(function (LocalStorage) {\n  const prefix = `${Config.prefixCls}.storage`;\n\n  function insert(collection, doc, cb) {\n    const id = doc.id || StringExt.uniqueId('doc-');\n    const index = loadIndex(collection);\n    index.keys.push(id);\n    setItem(docKey(collection, id), doc);\n    setItem(indexKey(collection), index);\n    callback(cb, null, Object.assign(Object.assign({}, doc), {\n      id\n    }));\n  }\n\n  LocalStorage.insert = insert;\n\n  function find(collection, query, cb) {\n    const index = loadIndex(collection);\n    const docs = [];\n\n    if (query == null) {\n      index.keys.forEach(id => {\n        const doc = getItem(docKey(collection, id));\n\n        if (!doc) {\n          callback(cb, new Error(`No document found for an ID '${id}' from index.`));\n        } else {\n          docs.push(doc);\n        }\n      });\n      callback(cb, null, docs);\n    } else if (query.id) {\n      const doc = getItem(docKey(collection, query.id));\n      callback(cb, null, doc ? [doc] : []);\n    } else {\n      callback(cb, null, []);\n    }\n  }\n\n  LocalStorage.find = find;\n\n  function remove(collection, query, cb) {\n    const index = loadIndex(collection);\n\n    if (query == null) {\n      index.keys.forEach(id => {\n        localStorage.removeItem(docKey(collection, id));\n      });\n      localStorage.removeItem(indexKey(collection));\n      callback(cb, null);\n    } else if (query.id) {\n      const idx = index.keys.indexOf(query.id);\n\n      if (idx >= 0) {\n        index.keys.splice(idx, 1);\n      }\n\n      localStorage.removeItem(docKey(collection, query.id));\n      setItem(indexKey(collection), index);\n      callback(cb, null);\n    }\n  }\n\n  LocalStorage.remove = remove; // util\n  // ----\n\n  function callback(cb, err, ret) {\n    if (cb) {\n      FunctionExt.defer(() => {\n        cb(err, ret);\n      });\n    }\n  }\n\n  function setItem(key, item) {\n    localStorage.setItem(key, JSON.stringify(item));\n  }\n\n  function getItem(key) {\n    const item = localStorage.getItem(key);\n    return item ? JSON.parse(item) : null;\n  }\n\n  function loadIndex(collection) {\n    const index = getItem(indexKey(collection));\n\n    if (index) {\n      if (index.keys == null) {\n        index.keys = [];\n      }\n\n      return index;\n    }\n\n    return {\n      keys: []\n    };\n  }\n\n  function docKey(collection, id) {\n    return `${prefix}.${collection}.docs.${id}`;\n  }\n\n  function indexKey(collection) {\n    return `${prefix}.${collection}.index`;\n  }\n})(LocalStorage || (LocalStorage = {}));","map":{"version":3,"sources":["../../src/common/localstorage.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Config } from '../global/config';\nimport { StringExt, FunctionExt } from '../util';\nexport var LocalStorage;\n(function (LocalStorage) {\n    const prefix = `${Config.prefixCls}.storage`;\n    function insert(collection, doc, cb) {\n        const id = doc.id || StringExt.uniqueId('doc-');\n        const index = loadIndex(collection);\n        index.keys.push(id);\n        setItem(docKey(collection, id), doc);\n        setItem(indexKey(collection), index);\n        callback(cb, null, Object.assign(Object.assign({}, doc), { id }));\n    }\n    LocalStorage.insert = insert;\n    function find(collection, query, cb) {\n        const index = loadIndex(collection);\n        const docs = [];\n        if (query == null) {\n            index.keys.forEach((id) => {\n                const doc = getItem(docKey(collection, id));\n                if (!doc) {\n                    callback(cb, new Error(`No document found for an ID '${id}' from index.`));\n                }\n                else {\n                    docs.push(doc);\n                }\n            });\n            callback(cb, null, docs);\n        }\n        else if (query.id) {\n            const doc = getItem(docKey(collection, query.id));\n            callback(cb, null, doc ? [doc] : []);\n        }\n        else {\n            callback(cb, null, []);\n        }\n    }\n    LocalStorage.find = find;\n    function remove(collection, query, cb) {\n        const index = loadIndex(collection);\n        if (query == null) {\n            index.keys.forEach((id) => {\n                localStorage.removeItem(docKey(collection, id));\n            });\n            localStorage.removeItem(indexKey(collection));\n            callback(cb, null);\n        }\n        else if (query.id) {\n            const idx = index.keys.indexOf(query.id);\n            if (idx >= 0) {\n                index.keys.splice(idx, 1);\n            }\n            localStorage.removeItem(docKey(collection, query.id));\n            setItem(indexKey(collection), index);\n            callback(cb, null);\n        }\n    }\n    LocalStorage.remove = remove;\n    // util\n    // ----\n    function callback(cb, err, ret) {\n        if (cb) {\n            FunctionExt.defer(() => {\n                cb(err, ret);\n            });\n        }\n    }\n    function setItem(key, item) {\n        localStorage.setItem(key, JSON.stringify(item));\n    }\n    function getItem(key) {\n        const item = localStorage.getItem(key);\n        return item ? JSON.parse(item) : null;\n    }\n    function loadIndex(collection) {\n        const index = getItem(indexKey(collection));\n        if (index) {\n            if (index.keys == null) {\n                index.keys = [];\n            }\n            return index;\n        }\n        return { keys: [] };\n    }\n    function docKey(collection, id) {\n        return `${prefix}.${collection}.docs.${id}`;\n    }\n    function indexKey(collection) {\n        return `${prefix}.${collection}.index`;\n    }\n})(LocalStorage || (LocalStorage = {}));\n//# sourceMappingURL=localstorage.js.map"]},"metadata":{},"sourceType":"module"}