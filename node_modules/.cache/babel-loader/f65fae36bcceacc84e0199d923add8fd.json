{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { mat4, vec3 } from 'gl-matrix';\n\nvar Viewport = function () {\n  function Viewport() {\n    _classCallCheck(this, Viewport);\n\n    _defineProperty(this, \"projectionMatrix\", mat4.create());\n\n    _defineProperty(this, \"viewMatrix\", mat4.create());\n\n    _defineProperty(this, \"viewProjectionMatrix\", mat4.create());\n\n    _defineProperty(this, \"ViewProjectionMatrixUncentered\", mat4.create());\n\n    _defineProperty(this, \"viewUncenteredMatrix\", mat4.create());\n\n    _defineProperty(this, \"zoom\", void 0);\n\n    _defineProperty(this, \"center\", void 0);\n  }\n\n  _createClass(Viewport, [{\n    key: \"syncWithMapCamera\",\n    value: function syncWithMapCamera(mapCamera) {\n      var _mapCamera$zoom = mapCamera.zoom,\n          zoom = _mapCamera$zoom === void 0 ? 1 : _mapCamera$zoom,\n          _mapCamera$center = mapCamera.center,\n          center = _mapCamera$center === void 0 ? [0, 0] : _mapCamera$center,\n          _mapCamera$offsetOrig = mapCamera.offsetOrigin,\n          offsetOrigin = _mapCamera$offsetOrig === void 0 ? [0, 0] : _mapCamera$offsetOrig,\n          _mapCamera$cameraPosi = mapCamera.cameraPosition,\n          cameraPosition = _mapCamera$cameraPosi === void 0 ? [0, 0, 0] : _mapCamera$cameraPosi,\n          _mapCamera$up = mapCamera.up,\n          up = _mapCamera$up === void 0 ? [0, 1, 0] : _mapCamera$up,\n          _mapCamera$lookAt = mapCamera.lookAt,\n          lookAt = _mapCamera$lookAt === void 0 ? [0, 0, 0] : _mapCamera$lookAt,\n          _mapCamera$aspect = mapCamera.aspect,\n          aspect = _mapCamera$aspect === void 0 ? 1 : _mapCamera$aspect,\n          _mapCamera$near = mapCamera.near,\n          near = _mapCamera$near === void 0 ? 0.1 : _mapCamera$near,\n          _mapCamera$far = mapCamera.far,\n          far = _mapCamera$far === void 0 ? 1000 : _mapCamera$far,\n          _mapCamera$fov = mapCamera.fov,\n          fov = _mapCamera$fov === void 0 ? 45 : _mapCamera$fov;\n      this.zoom = zoom;\n      this.center = center;\n      mat4.perspective(this.projectionMatrix, fov / 180 * Math.PI, aspect, near, far);\n      var eyePoint = vec3.fromValues.apply(vec3, _toConsumableArray(cameraPosition));\n      var lookAtPoint = vec3.fromValues.apply(vec3, _toConsumableArray(lookAt));\n      var upDirect = vec3.fromValues.apply(vec3, _toConsumableArray(up));\n      mat4.lookAt(this.viewMatrix, eyePoint, lookAtPoint, upDirect);\n      this.viewUncenteredMatrix = mat4.clone(this.viewMatrix);\n      mat4.translate(this.viewMatrix, this.viewMatrix, vec3.fromValues(-offsetOrigin[0], offsetOrigin[1], 0));\n      mat4.multiply(this.viewProjectionMatrix, this.projectionMatrix, this.viewMatrix);\n      mat4.multiply(this.ViewProjectionMatrixUncentered, this.projectionMatrix, this.viewMatrix);\n    }\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      return this.zoom;\n    }\n  }, {\n    key: \"getZoomScale\",\n    value: function getZoomScale() {\n      return 1048576;\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      var _this$center = _slicedToArray(this.center, 2),\n          lng = _this$center[0],\n          lat = _this$center[1];\n\n      return [lng, lat];\n    }\n  }, {\n    key: \"getProjectionMatrix\",\n    value: function getProjectionMatrix() {\n      return this.projectionMatrix;\n    }\n  }, {\n    key: \"getModelMatrix\",\n    value: function getModelMatrix() {\n      return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n    }\n  }, {\n    key: \"getViewMatrix\",\n    value: function getViewMatrix() {\n      return this.viewMatrix;\n    }\n  }, {\n    key: \"getViewMatrixUncentered\",\n    value: function getViewMatrixUncentered() {\n      return this.viewUncenteredMatrix;\n    }\n  }, {\n    key: \"getViewProjectionMatrix\",\n    value: function getViewProjectionMatrix() {\n      return this.viewProjectionMatrix;\n    }\n  }, {\n    key: \"getViewProjectionMatrixUncentered\",\n    value: function getViewProjectionMatrixUncentered() {\n      return this.ViewProjectionMatrixUncentered;\n    }\n  }, {\n    key: \"getFocalDistance\",\n    value: function getFocalDistance() {\n      return 1;\n    }\n  }, {\n    key: \"projectFlat\",\n    value: function projectFlat(lngLat, scale) {\n      var maxs = 85.0511287798;\n      var lat = Math.max(Math.min(maxs, lngLat[1]), -maxs);\n      var zoomScale = 256 << 20;\n      var d = Math.PI / 180;\n      var x = lngLat[0] * d;\n      var y = lat * d;\n      y = Math.log(Math.tan(Math.PI / 4 + y / 2));\n      var a = 0.5 / Math.PI;\n      var b = 0.5;\n      var c = -0.5 / Math.PI;\n      d = 0.5;\n      x = zoomScale * (a * x + b) - 215440491;\n      y = -(zoomScale * (c * y + d) - 106744817);\n      return [x, y];\n    }\n  }]);\n\n  return Viewport;\n}();\n\nexport { Viewport as default };","map":{"version":3,"sources":["../../src/amap2/Viewport.ts"],"names":["Viewport","mat4","zoom","center","offsetOrigin","cameraPosition","up","lookAt","aspect","near","far","fov","mapCamera","Math","eyePoint","vec3","lookAtPoint","upDirect","lng","lat","maxs","lngLat","zoomScale","d","x","y","a","b","c"],"mappings":";;;;;AACA,SAAA,IAAA,EAAA,IAAA,QAAA,WAAA;;IACqBA,Q;;;;8CACcC,IAAI,CAAJA,MAAAA,E;;wCACNA,IAAI,CAAJA,MAAAA,E;;kDACUA,IAAI,CAAJA,MAAAA,E;;4DACUA,IAAI,CAAJA,MAAAA,E;;kDACVA,IAAI,CAAJA,MAAAA,E;;;;;;;;;WAIrC,SAAA,iBAAA,CAAA,SAAA,EAAyD;AACvD,UAAA,eAAA,GAgBIW,SAhBJ,CAAA,IAAA;AAAA,UACEV,IADF,GAAA,eAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,eAAA;AAAA,UAAA,iBAAA,GAgBIU,SAhBJ,CAAA,MAAA;AAAA,UAEET,MAFF,GAAA,iBAAA,KAAA,KAAA,CAAA,GAEW,CAAA,CAAA,EAFX,CAEW,CAFX,GAAA,iBAAA;AAAA,UAAA,qBAAA,GAgBIS,SAhBJ,CAAA,YAAA;AAAA,UAGER,YAHF,GAAA,qBAAA,KAAA,KAAA,CAAA,GAGiB,CAAA,CAAA,EAHjB,CAGiB,CAHjB,GAAA,qBAAA;AAAA,UAAA,qBAAA,GAgBIQ,SAhBJ,CAAA,cAAA;AAAA,UAIEP,cAJF,GAAA,qBAAA,KAAA,KAAA,CAAA,GAImB,CAAA,CAAA,EAAA,CAAA,EAJnB,CAImB,CAJnB,GAAA,qBAAA;AAAA,UAAA,aAAA,GAgBIO,SAhBJ,CAAA,EAAA;AAAA,UAKEN,EALF,GAAA,aAAA,KAAA,KAAA,CAAA,GAKO,CAAA,CAAA,EAAA,CAAA,EALP,CAKO,CALP,GAAA,aAAA;AAAA,UAAA,iBAAA,GAgBIM,SAhBJ,CAAA,MAAA;AAAA,UAMEL,MANF,GAAA,iBAAA,KAAA,KAAA,CAAA,GAMW,CAAA,CAAA,EAAA,CAAA,EANX,CAMW,CANX,GAAA,iBAAA;AAAA,UAAA,iBAAA,GAgBIK,SAhBJ,CAAA,MAAA;AAAA,UAOEJ,MAPF,GAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,iBAAA;AAAA,UAAA,eAAA,GAgBII,SAhBJ,CAAA,IAAA;AAAA,UAQEH,IARF,GAAA,eAAA,KAAA,KAAA,CAAA,GAAA,GAAA,GAAA,eAAA;AAAA,UAAA,cAAA,GAgBIG,SAhBJ,CAAA,GAAA;AAAA,UASEF,GATF,GAAA,cAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,cAAA;AAAA,UAAA,cAAA,GAgBIE,SAhBJ,CAAA,GAAA;AAAA,UAUED,GAVF,GAAA,cAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,cAAA;AAiBA,WAAA,IAAA,GAAA,IAAA;AACA,WAAA,MAAA,GAAA,MAAA;AAGAV,MAAAA,IAAI,CAAJA,WAAAA,CACE,KADFA,gBAAAA,EAEGU,GAAG,GAAJ,GAACA,GAAaE,IAAI,CAFpBZ,EAAAA,EAAAA,MAAAA,EAAAA,IAAAA,EAAAA,GAAAA;AAaA,UAAMa,QAAQ,GAAGC,IAAI,CAAJA,UAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAI,kBAAA,CAArB,cAAqB,CAAJA,CAAjB;AAIA,UAAMC,WAAW,GAAGD,IAAI,CAAJA,UAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAI,kBAAA,CAAxB,MAAwB,CAAJA,CAApB;AAKA,UAAME,QAAQ,GAAGF,IAAI,CAAJA,UAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAI,kBAAA,CAArB,EAAqB,CAAJA,CAAjB;AAEAd,MAAAA,IAAI,CAAJA,MAAAA,CAAY,KAAZA,UAAAA,EAAAA,QAAAA,EAAAA,WAAAA,EAAAA,QAAAA;AAEA,WAAA,oBAAA,GAA4BA,IAAI,CAAJA,KAAAA,CAAW,KAAvC,UAA4BA,CAA5B;AAGAA,MAAAA,IAAI,CAAJA,SAAAA,CACE,KADFA,UAAAA,EAEE,KAFFA,UAAAA,EAGEc,IAAI,CAAJA,UAAAA,CAAgB,CAACX,YAAY,CAA7BW,CAA6B,CAA7BA,EAAkCX,YAAY,CAA9CW,CAA8C,CAA9CA,EAHFd,CAGEc,CAHFd;AAMAA,MAAAA,IAAI,CAAJA,QAAAA,CACE,KADFA,oBAAAA,EAEE,KAFFA,gBAAAA,EAGE,KAHFA,UAAAA;AAKAA,MAAAA,IAAI,CAAJA,QAAAA,CACE,KADFA,8BAAAA,EAEE,KAFFA,gBAAAA,EAGE,KAHFA,UAAAA;AAKD;;;WAED,SAAA,OAAA,GAAyB;AACvB,aAAO,KAAP,IAAA;AACD;;;WAED,SAAA,YAAA,GAA8B;AAE5B,aAAA,OAAA;AACD;;;WAED,SAAA,SAAA,GAAqC;AACnC,UAAA,YAAA,GAAA,cAAA,CAAmB,KAAnB,MAAA,EAAA,CAAA,CAAA;AAAA,UAAOiB,GAAP,GAAA,YAAA,CAAA,CAAA,CAAA;AAAA,UAAYC,GAAZ,GAAA,YAAA,CAAA,CAAA,CAAA;;AACA,aAAO,CAAA,GAAA,EAAP,GAAO,CAAP;AACD;;;WAED,SAAA,mBAAA,GAAuC;AAErC,aAAO,KAAP,gBAAA;AACD;;;WAED,SAAA,cAAA,GAAkC;AAChC,aAAO,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAP,CAAO,CAAP;AACD;;;WAED,SAAA,aAAA,GAAiC;AAE/B,aAAO,KAAP,UAAA;AACD;;;WAED,SAAA,uBAAA,GAA2C;AAEzC,aAAO,KAAP,oBAAA;AACD;;;WACD,SAAA,uBAAA,GAA2C;AAEzC,aAAO,KAAP,oBAAA;AACD;;;WAED,SAAA,iCAAA,GAAqD;AAEnD,aAAO,KAAP,8BAAA;AACD;;;WAED,SAAA,gBAAA,GAA0B;AACxB,aAAA,CAAA;AACD;;;WAKD,SAAA,WAAA,CAAA,MAAA,EAAA,KAAA,EAGoB;AAClB,UAAMC,IAAI,GAAV,aAAA;AACA,UAAMD,GAAG,GAAGN,IAAI,CAAJA,GAAAA,CAASA,IAAI,CAAJA,GAAAA,CAAAA,IAAAA,EAAeQ,MAAM,CAA9BR,CAA8B,CAArBA,CAATA,EAAoC,CAAhD,IAAYA,CAAZ;AAEA,UAAMS,SAAS,GAAG,OAAlB,EAAA;AACA,UAAIC,CAAC,GAAGV,IAAI,CAAJA,EAAAA,GAAR,GAAA;AACA,UAAIW,CAAC,GAAGH,MAAM,CAANA,CAAM,CAANA,GAAR,CAAA;AACA,UAAII,CAAC,GAAGN,GAAG,GAAX,CAAA;AACAM,MAAAA,CAAC,GAAGZ,IAAI,CAAJA,GAAAA,CAASA,IAAI,CAAJA,GAAAA,CAASA,IAAI,CAAJA,EAAAA,GAAAA,CAAAA,GAAcY,CAAC,GAArCA,CAAaZ,CAATA,CAAJY;AACA,UAAMC,CAAC,GAAG,MAAMb,IAAI,CAApB,EAAA;AACA,UAAMc,CAAC,GAAP,GAAA;AACA,UAAMC,CAAC,GAAG,CAAA,GAAA,GAAOf,IAAI,CAArB,EAAA;AACAU,MAAAA,CAAC,GAADA,GAAAA;AACAC,MAAAA,CAAC,GAAGF,SAAS,IAAII,CAAC,GAADA,CAAAA,GAAbJ,CAAS,CAATA,GAAJE,SAAAA;AACAC,MAAAA,CAAC,GAAG,EAAEH,SAAS,IAAIM,CAAC,GAADA,CAAAA,GAAbN,CAAS,CAATA,GAANG,SAAI,CAAJA;AACA,aAAO,CAAA,CAAA,EAAP,CAAO,CAAP;AACD;;;;;;SAlJkBzB,Q","sourcesContent":["import { IMapCamera, IViewport } from '@antv/l7-core';\nimport { mat4, vec3 } from 'gl-matrix';\nexport default class Viewport implements IViewport {\n  private projectionMatrix: mat4 = mat4.create();\n  private viewMatrix: mat4 = mat4.create();\n  private viewProjectionMatrix: mat4 = mat4.create();\n  private ViewProjectionMatrixUncentered: mat4 = mat4.create();\n  private viewUncenteredMatrix: mat4 = mat4.create();\n  private zoom: number;\n  private center: number[];\n\n  public syncWithMapCamera(mapCamera: Partial<IMapCamera>) {\n    const {\n      zoom = 1,\n      center = [0, 0],\n      offsetOrigin = [0, 0],\n      cameraPosition = [0, 0, 0],\n      up = [0, 1, 0],\n      lookAt = [0, 0, 0],\n      aspect = 1,\n      near = 0.1,\n      far = 1000,\n      fov = 45,\n      // @ts-ignore\n      // left,\n      // right,\n      // bottom,\n      // top,\n    } = mapCamera;\n    this.zoom = zoom;\n    this.center = center;\n\n    // 计算透视投影矩阵 projectionMatrix\n    mat4.perspective(\n      this.projectionMatrix,\n      (fov / 180) * Math.PI,\n      aspect,\n      near,\n      far,\n    );\n\n    // ortho(out, left, right, bottom, top, near, far)\n    // mat4.ortho(this.projectionMatrix, left, right, bottom, top, near, far)\n    // console.log(left, right, bottom, top, near, far)\n    // 计算相机矩阵 viewMatrix\n    // console.log(cameraPosition)\n    const eyePoint = vec3.fromValues(...cameraPosition);\n    // const eyePoint = vec3.fromValues(cameraPosition[0], cameraPosition[1], 0.1);\n    // 计算相机矩阵 viewMatrix\n\n    const lookAtPoint = vec3.fromValues(...lookAt);\n    // const lookAtPoint = vec3.fromValues(...cameraPosition);\n    // const lookAtPoint = vec3.fromValues(cameraPosition[0], cameraPosition[1], -0.1);\n    // const lookAtPoint = vec3.fromValues(0, 0, 0);\n\n    const upDirect = vec3.fromValues(...up);\n    // const upDirect = vec3.fromValues(0, 1, 0);\n    mat4.lookAt(this.viewMatrix, eyePoint, lookAtPoint, upDirect);\n\n    this.viewUncenteredMatrix = mat4.clone(this.viewMatrix);\n\n    // 移动相机位置\n    mat4.translate(\n      this.viewMatrix,\n      this.viewMatrix,\n      vec3.fromValues(-offsetOrigin[0], offsetOrigin[1], 0),\n    );\n\n    mat4.multiply(\n      this.viewProjectionMatrix,\n      this.projectionMatrix,\n      this.viewMatrix,\n    );\n    mat4.multiply(\n      this.ViewProjectionMatrixUncentered,\n      this.projectionMatrix,\n      this.viewMatrix,\n    );\n  }\n\n  public getZoom(): number {\n    return this.zoom;\n  }\n\n  public getZoomScale(): number {\n    // 512 尺寸下的缩放：2 ^ 20\n    return 1048576;\n  }\n\n  public getCenter(): [number, number] {\n    const [lng, lat] = this.center;\n    return [lng, lat];\n  }\n\n  public getProjectionMatrix(): number[] {\n    // @ts-ignore\n    return this.projectionMatrix;\n  }\n\n  public getModelMatrix(): number[] {\n    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n  }\n\n  public getViewMatrix(): number[] {\n    // @ts-ignore\n    return this.viewMatrix;\n  }\n\n  public getViewMatrixUncentered(): number[] {\n    // @ts-ignore\n    return this.viewUncenteredMatrix;\n  }\n  public getViewProjectionMatrix(): number[] {\n    // @ts-ignore\n    return this.viewProjectionMatrix;\n  }\n\n  public getViewProjectionMatrixUncentered(): number[] {\n    // @ts-ignore\n    return this.ViewProjectionMatrixUncentered;\n  }\n\n  public getFocalDistance() {\n    return 1;\n  }\n\n  /**\n   * P20 坐标系，固定 scale\n   */\n  public projectFlat(\n    lngLat: [number, number],\n    scale?: number | undefined,\n  ): [number, number] {\n    const maxs = 85.0511287798;\n    const lat = Math.max(Math.min(maxs, lngLat[1]), -maxs);\n    // tslint:disable-next-line:no-bitwise\n    const zoomScale = 256 << 20;\n    let d = Math.PI / 180;\n    let x = lngLat[0] * d;\n    let y = lat * d;\n    y = Math.log(Math.tan(Math.PI / 4 + y / 2));\n    const a = 0.5 / Math.PI;\n    const b = 0.5;\n    const c = -0.5 / Math.PI;\n    d = 0.5;\n    x = zoomScale * (a * x + b) - 215440491;\n    y = -(zoomScale * (c * y + d) - 106744817);\n    return [x, y];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}