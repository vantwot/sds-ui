{"ast":null,"code":"import _defineProperty from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Tooltip } from 'antd';\nimport 'antd/es/tooltip/style/index.css';\nimport { Menu } from '../menu';\nimport { Dropdown } from '../dropdown';\nimport { ToolbarContext } from './context';\n\nvar ToolbarItemInner = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ToolbarItemInner, _React$PureComponent);\n\n  var _super = _createSuper(ToolbarItemInner);\n\n  function ToolbarItemInner() {\n    var _this;\n\n    _classCallCheck(this, ToolbarItemInner);\n\n    _this = _super.apply(this, arguments);\n\n    _this.handleClick = function () {\n      _this.processClick();\n    };\n\n    _this.handleDropdownItemClick = function (name) {\n      _this.processClick(name, false);\n    };\n\n    return _this;\n  }\n\n  _createClass(ToolbarItemInner, [{\n    key: \"processClick\",\n    value: function processClick() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.name;\n      var dropdown = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props.dropdown;\n\n      if (!this.props.disabled && !dropdown) {\n        if (name) {\n          this.props.context.onClick(name);\n        }\n\n        if (this.props.onClick) {\n          this.props.onClick(name);\n        }\n      }\n    }\n  }, {\n    key: \"renderButton\",\n    value: function renderButton() {\n      var _classNames;\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          hidden = _this$props.hidden,\n          disabled = _this$props.disabled,\n          active = _this$props.active,\n          icon = _this$props.icon,\n          text = _this$props.text,\n          dropdown = _this$props.dropdown,\n          dropdownArrow = _this$props.dropdownArrow,\n          tooltip = _this$props.tooltip,\n          tooltipProps = _this$props.tooltipProps,\n          tooltipAsTitle = _this$props.tooltipAsTitle,\n          children = _this$props.children;\n      var prefixCls = this.props.context.prefixCls;\n      var baseCls = \"\".concat(prefixCls, \"-item\");\n      var props = {\n        onClick: this.handleClick,\n        className: classNames(baseCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(baseCls, \"-hidden\"), hidden), _defineProperty(_classNames, \"\".concat(baseCls, \"-active\"), active), _defineProperty(_classNames, \"\".concat(baseCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(baseCls, \"-dropdown\"), dropdown), _classNames), className)\n      };\n\n      if (tooltip && tooltipAsTitle) {\n        props.title = tooltip;\n      }\n\n      var button = React.createElement(\"button\", Object.assign({\n        type: \"button\"\n      }, props), icon && React.isValidElement(icon) && React.createElement(\"span\", {\n        className: \"\".concat(baseCls, \"-icon\")\n      }, icon), (text || children) && React.createElement(\"span\", {\n        className: \"\".concat(baseCls, \"-text\")\n      }, text || children), dropdown && dropdownArrow && React.createElement(\"span\", {\n        className: \"\".concat(baseCls, \"-dropdown-arrow\")\n      }));\n\n      if (tooltip && !tooltipAsTitle && !disabled) {\n        return React.createElement(Tooltip, Object.assign({\n          title: tooltip,\n          placement: \"bottom\",\n          mouseEnterDelay: 0,\n          mouseLeaveDelay: 0\n        }, tooltipProps), button);\n      }\n\n      return button;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          dropdown = _this$props2.dropdown,\n          dropdownProps = _this$props2.dropdownProps,\n          disabled = _this$props2.disabled;\n      var content = this.renderButton();\n\n      if (dropdown != null && !disabled) {\n        var overlay = React.createElement(\"div\", null, dropdown.type === Menu ? React.cloneElement(dropdown, {\n          onClick: this.handleDropdownItemClick\n        }) : dropdown);\n        var props = Object.assign(Object.assign({\n          trigger: ['click']\n        }, dropdownProps), {\n          disabled: disabled,\n          overlay: overlay\n        });\n        return React.createElement(Dropdown, Object.assign({}, props), content);\n      }\n\n      return content;\n    }\n  }]);\n\n  return ToolbarItemInner;\n}(React.PureComponent);\n\nexport var ToolbarItem = function ToolbarItem(props) {\n  return React.createElement(ToolbarContext.Consumer, null, function (context) {\n    return React.createElement(ToolbarItemInner, Object.assign({\n      context: context\n    }, props));\n  });\n};\nToolbarItem.defaultProps = {\n  dropdownArrow: true\n};","map":{"version":3,"sources":["../../src/toolbar/item.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Tooltip } from 'antd';\nimport 'antd/es/tooltip/style/index.css';\nimport { Menu } from '../menu';\nimport { Dropdown } from '../dropdown';\nimport { ToolbarContext } from './context';\nclass ToolbarItemInner extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.handleClick = () => {\n            this.processClick();\n        };\n        this.handleDropdownItemClick = (name) => {\n            this.processClick(name, false);\n        };\n    }\n    processClick(name = this.props.name, dropdown = this.props.dropdown) {\n        if (!this.props.disabled && !dropdown) {\n            if (name) {\n                this.props.context.onClick(name);\n            }\n            if (this.props.onClick) {\n                this.props.onClick(name);\n            }\n        }\n    }\n    renderButton() {\n        const { className, hidden, disabled, active, icon, text, dropdown, dropdownArrow, tooltip, tooltipProps, tooltipAsTitle, children, } = this.props;\n        const { prefixCls } = this.props.context;\n        const baseCls = `${prefixCls}-item`;\n        const props = {\n            onClick: this.handleClick,\n            className: classNames(baseCls, {\n                [`${baseCls}-hidden`]: hidden,\n                [`${baseCls}-active`]: active,\n                [`${baseCls}-disabled`]: disabled,\n                [`${baseCls}-dropdown`]: dropdown,\n            }, className),\n        };\n        if (tooltip && tooltipAsTitle) {\n            props.title = tooltip;\n        }\n        const button = (React.createElement(\"button\", Object.assign({ type: \"button\" }, props),\n            icon && React.isValidElement(icon) && (React.createElement(\"span\", { className: `${baseCls}-icon` }, icon)),\n            (text || children) && (React.createElement(\"span\", { className: `${baseCls}-text` }, text || children)),\n            dropdown && dropdownArrow && (React.createElement(\"span\", { className: `${baseCls}-dropdown-arrow` }))));\n        if (tooltip && !tooltipAsTitle && !disabled) {\n            return (React.createElement(Tooltip, Object.assign({ title: tooltip, placement: \"bottom\", mouseEnterDelay: 0, mouseLeaveDelay: 0 }, tooltipProps), button));\n        }\n        return button;\n    }\n    render() {\n        const { dropdown, dropdownProps, disabled } = this.props;\n        const content = this.renderButton();\n        if (dropdown != null && !disabled) {\n            const overlay = (React.createElement(\"div\", null, dropdown.type === Menu\n                ? React.cloneElement(dropdown, {\n                    onClick: this.handleDropdownItemClick,\n                })\n                : dropdown));\n            const props = Object.assign(Object.assign({ trigger: ['click'] }, dropdownProps), { disabled,\n                overlay });\n            return React.createElement(Dropdown, Object.assign({}, props), content);\n        }\n        return content;\n    }\n}\nexport const ToolbarItem = (props) => (React.createElement(ToolbarContext.Consumer, null, (context) => React.createElement(ToolbarItemInner, Object.assign({ context: context }, props))));\nToolbarItem.defaultProps = {\n    dropdownArrow: true,\n};\n//# sourceMappingURL=item.js.map"]},"metadata":{},"sourceType":"module"}