{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _class2, _descriptor;\n\nimport { TYPES } from '@antv/l7-core';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nexport function normalizePasses(passes) {\n  return passes.map(function (pass) {\n    if (typeof pass === 'string') {\n      pass = [pass, {}];\n    }\n\n    return pass;\n  });\n}\nvar MultiPassRendererPlugin = (_dec = injectable(), _dec2 = inject(TYPES.IGlobalConfigService), _dec(_class = (_class2 = function () {\n  function MultiPassRendererPlugin() {\n    _classCallCheck(this, MultiPassRendererPlugin);\n\n    _initializerDefineProperty(this, \"configService\", _descriptor, this);\n\n    _defineProperty(this, \"enabled\", void 0);\n  }\n\n  _createClass(MultiPassRendererPlugin, [{\n    key: \"apply\",\n    value: function apply(layer, _ref) {\n      var _this = this;\n\n      var rendererService = _ref.rendererService,\n          postProcessingPassFactory = _ref.postProcessingPassFactory,\n          normalPassFactory = _ref.normalPassFactory;\n      layer.hooks.init.tap('MultiPassRendererPlugin', function () {\n        var _layer$getLayerConfig = layer.getLayerConfig(),\n            enableMultiPassRenderer = _layer$getLayerConfig.enableMultiPassRenderer,\n            _layer$getLayerConfig2 = _layer$getLayerConfig.passes,\n            passes = _layer$getLayerConfig2 === void 0 ? [] : _layer$getLayerConfig2;\n\n        _this.enabled = !!enableMultiPassRenderer && layer.getLayerConfig().enableMultiPassRenderer !== false;\n\n        if (_this.enabled) {\n          layer.multiPassRenderer = _this.createMultiPassRenderer(layer, passes, postProcessingPassFactory, normalPassFactory);\n          layer.multiPassRenderer.setRenderFlag(true);\n        }\n      });\n      layer.hooks.beforeRender.tap('MultiPassRendererPlugin', function () {});\n    }\n  }, {\n    key: \"createMultiPassRenderer\",\n    value: function createMultiPassRenderer(layer, passes, postProcessingPassFactory, normalPassFactory) {\n      var multiPassRenderer = layer.multiPassRenderer;\n\n      var _layer$getLayerConfig3 = layer.getLayerConfig(),\n          enablePicking = _layer$getLayerConfig3.enablePicking,\n          enableTAA = _layer$getLayerConfig3.enableTAA;\n\n      if (enablePicking) {\n        multiPassRenderer.add(normalPassFactory('pixelPicking'));\n      }\n\n      return multiPassRenderer;\n    }\n  }]);\n\n  return MultiPassRendererPlugin;\n}(), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"configService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);\nexport { MultiPassRendererPlugin as default };","map":{"version":3,"sources":["../../src/plugins/MultiPassRendererPlugin.ts"],"names":["pass","injectable","MultiPassRendererPlugin","inject","TYPES","rendererService","postProcessingPassFactory","normalPassFactory","layer","enableMultiPassRenderer","passes","multiPassRenderer","enablePicking","enableTAA"],"mappings":";;;;;;;;;AAAA,SAAA,KAAA,QAAA,eAAA;AASA,SAAA,MAAA,EAAA,UAAA,QAAA,WAAA;AACA,OAAA,kBAAA;AAKA,OAAO,SAAA,eAAA,CAAA,MAAA,EAEL;AACA,SAAO,MAAM,CAAN,GAAA,CAAW,UAAA,IAAA,EAAyD;AACzE,QAAI,OAAA,IAAA,KAAJ,QAAA,EAA8B;AAC5BA,MAAAA,IAAI,GAAG,CAAA,IAAA,EAAPA,EAAO,CAAPA;AACD;;AACD,WAAA,IAAA;AAJF,GAAO,CAAP;AAMD;IAgBoBE,uB,WADpBD,UAAU,E,UAERE,MAAM,CAACC,KAAK,CAAN,oBAAA,C;;;;;;;;;;;WAKP,SAAA,KAAA,CAAA,KAAA,EAAA,IAAA,EAWE;AAAA,UAAA,KAAA,GAAA,IAAA;;AAAA,UAREC,eAQF,GAAA,IAAA,CAREA,eAQF;AAAA,UAPEC,yBAOF,GAAA,IAAA,CAPEA,yBAOF;AAAA,UANEC,iBAMF,GAAA,IAAA,CANEA,iBAMF;AACAC,MAAAA,KAAK,CAALA,KAAAA,CAAAA,IAAAA,CAAAA,GAAAA,CAAAA,yBAAAA,EAAgD,YAAM;AACpD,YAAA,qBAAA,GAAiDA,KAAK,CAAtD,cAAiDA,EAAjD;AAAA,YAAQC,uBAAR,GAAA,qBAAA,CAAA,uBAAA;AAAA,YAAA,sBAAA,GAAA,qBAAA,CAAA,MAAA;AAAA,YAAiCC,MAAjC,GAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,sBAAA;;AAGA,QAAA,KAAI,CAAJ,OAAA,GACE,CAAC,CAAD,uBAAA,IACAF,KAAK,CAALA,cAAAA,GAAAA,uBAAAA,KAFF,KAAA;;AAKA,YAAI,KAAI,CAAR,OAAA,EAAkB;AAChBA,UAAAA,KAAK,CAALA,iBAAAA,GAA0B,KAAI,CAAJ,uBAAA,CAAA,KAAA,EAAA,MAAA,EAAA,yBAAA,EAA1BA,iBAA0B,CAA1BA;AAMAA,UAAAA,KAAK,CAALA,iBAAAA,CAAAA,aAAAA,CAAAA,IAAAA;AACD;AAjBHA,OAAAA;AAoBAA,MAAAA,KAAK,CAALA,KAAAA,CAAAA,YAAAA,CAAAA,GAAAA,CAAAA,yBAAAA,EAAwD,YAAM,CAA9DA,CAAAA;AAOD;;;WAMD,SAAA,uBAAA,CAAA,KAAA,EAAA,MAAA,EAAA,yBAAA,EAAA,iBAAA,EAKE;AACA,UAAMG,iBAAiB,GAAGH,KAAK,CAA/B,iBAAA;;AACA,UAAA,sBAAA,GAAqCA,KAAK,CAA1C,cAAqCA,EAArC;AAAA,UAAQI,aAAR,GAAA,sBAAA,CAAA,aAAA;AAAA,UAAuBC,SAAvB,GAAA,sBAAA,CAAA,SAAA;;AAGA,UAAA,aAAA,EAAmB;AACjBF,QAAAA,iBAAiB,CAAjBA,GAAAA,CAAsBJ,iBAAiB,CAAvCI,cAAuC,CAAvCA;AACD;;AAwBD,aAAA,iBAAA;AACD;;;;;;;;;;SAxFkBT,uB","sourcesContent":["import {\n  IGlobalConfigService,\n  ILayer,\n  ILayerPlugin,\n  IPass,\n  IPostProcessingPass,\n  IRendererService,\n  TYPES,\n} from '@antv/l7-core';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\n\n/**\n * 'blurH' -> ['blurH', {}]\n */\nexport function normalizePasses(\n  passes: Array<string | [string, { [key: string]: unknown }]>,\n) {\n  return passes.map((pass: string | [string, { [key: string]: unknown }]) => {\n    if (typeof pass === 'string') {\n      pass = [pass, {}];\n    }\n    return pass;\n  });\n}\n\n/**\n * 自定义渲染管线：\n * ClearPass -> PixelPickingPass(可选) -> RenderPass/TAAPass -> PostProcessing -> CopyPass\n * 根据 Layer 配置的 passes 创建 PostProcessing\n * @example\n * new PolygonLayer({\n *   enableMultiPassRenderer: true,\n *   passes: [\n *     'blurH',\n *     ['blurV', { radius: 10 }],\n *   ],\n * })\n */\n@injectable()\nexport default class MultiPassRendererPlugin implements ILayerPlugin {\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  private enabled: boolean;\n\n  public apply(\n    layer: ILayer,\n    {\n      rendererService,\n      postProcessingPassFactory,\n      normalPassFactory,\n    }: {\n      rendererService: IRendererService;\n      postProcessingPassFactory: (name: string) => IPostProcessingPass<unknown>;\n      normalPassFactory: (name: string) => IPass<unknown>;\n    },\n  ) {\n    layer.hooks.init.tap('MultiPassRendererPlugin', () => {\n      const { enableMultiPassRenderer, passes = [] } = layer.getLayerConfig();\n\n      // SceneConfig 的 enableMultiPassRenderer 配置项可以统一关闭\n      this.enabled =\n        !!enableMultiPassRenderer &&\n        layer.getLayerConfig().enableMultiPassRenderer !== false;\n\n      // 根据 LayerConfig passes 配置项初始化\n      if (this.enabled) {\n        layer.multiPassRenderer = this.createMultiPassRenderer(\n          layer,\n          passes,\n          postProcessingPassFactory,\n          normalPassFactory,\n        );\n        layer.multiPassRenderer.setRenderFlag(true);\n      }\n    });\n\n    layer.hooks.beforeRender.tap('MultiPassRendererPlugin', () => {\n      // if (this.enabled) {\n      //   // 渲染前根据 viewport 调整 FBO size\n      //   const { width, height } = rendererService.getViewportSize();\n      //   layer.multiPassRenderer.resize(width, height);\n      // }\n    });\n  }\n\n  /**\n   * 默认添加 ClearPass、RenderPass\n   * 以及 PostProcessing 中的最后一个 CopyPass\n   */\n  private createMultiPassRenderer(\n    layer: ILayer,\n    passes: Array<string | [string, { [key: string]: unknown }]>,\n    postProcessingPassFactory: (name: string) => IPostProcessingPass<unknown>,\n    normalPassFactory: (name: string) => IPass<unknown>,\n  ) {\n    const multiPassRenderer = layer.multiPassRenderer;\n    const { enablePicking, enableTAA } = layer.getLayerConfig();\n\n    // picking pass if enabled\n    if (enablePicking) {\n      multiPassRenderer.add(normalPassFactory('pixelPicking'));\n    }\n\n    // use TAA pass if enabled instead of render pass\n    // if (enableTAA) {\n    //   multiPassRenderer.add(normalPassFactory('taa'));\n    // } else {\n    //   // render all layers in this pass\n    //   multiPassRenderer.add(normalPassFactory('render'));\n    // }\n\n    // post processing\n    // normalizePasses(passes).forEach(\n    //   (pass: [string, { [key: string]: unknown }]) => {\n    //     const [passName, initializationOptions] = pass;\n    //     multiPassRenderer.add(\n    //       postProcessingPassFactory(passName),\n    //       initializationOptions,\n    //     );\n    //   },\n    // );\n\n    // 末尾为固定的 CopyPass\n    // multiPassRenderer.add(postProcessingPassFactory('copy'));\n\n    return multiPassRenderer;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}