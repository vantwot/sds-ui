{"ast":null,"code":"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { InputNumber as AInputNumber } from 'antd';\n\nfunction transformValue(val) {\n  const result = Number(val);\n  return Number.isNaN(result) ? undefined : result;\n}\n\nexport const InputNumber = props => {\n  const {\n    disabled,\n    placeholder,\n    value,\n    onChange\n  } = props;\n  const [innerValue, setInnerValue] = useState(transformValue(value));\n  const mountedRef = useRef(false);\n  useEffect(() => {\n    if (!mountedRef.current) {\n      mountedRef.current = true;\n    }\n\n    setInnerValue(transformValue(value));\n  }, [value]);\n  const onValueChange = useCallback(nextValue => {\n    setInnerValue(nextValue);\n\n    if (typeof onChange === 'function') {\n      if (nextValue === undefined) {\n        onChange('');\n      } else if (typeof transformValue(nextValue) === 'number') {\n        onChange(transformValue(nextValue));\n      }\n    }\n  }, [onChange]);\n  return React.createElement(AInputNumber, {\n    style: {\n      width: '100%'\n    },\n    size: \"small\",\n    placeholder: placeholder,\n    value: innerValue,\n    onChange: onValueChange,\n    disabled: disabled\n  });\n};","map":{"version":3,"sources":["../../../../../src/canvas-json-schema-form/schema-form/control-map/float/input-number.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,IAAgB,QAAhB,EAA0B,SAA1B,EAAqC,MAArC,EAA6C,WAA7C,QAAgE,OAAhE;AACA,SAAS,WAAW,IAAI,YAAxB,QAA4C,MAA5C;;AASA,SAAS,cAAT,CAAwB,GAAxB,EAAwD;AACtD,QAAM,MAAM,GAAG,MAAM,CAAC,GAAD,CAArB;AACA,SAAO,MAAM,CAAC,KAAP,CAAa,MAAb,IAAuB,SAAvB,GAAmC,MAA1C;AACD;;AAED,OAAO,MAAM,WAAW,GAAoB,KAAK,IAAG;AAClD,QAAM;AAAE,IAAA,QAAF;AAAY,IAAA,WAAZ;AAAyB,IAAA,KAAzB;AAAgC,IAAA;AAAhC,MAA6C,KAAnD;AACA,QAAM,CAAC,UAAD,EAAa,aAAb,IAA8B,QAAQ,CAAqB,cAAc,CAAC,KAAD,CAAnC,CAA5C;AACA,QAAM,UAAU,GAAG,MAAM,CAAU,KAAV,CAAzB;AAEA,EAAA,SAAS,CAAC,MAAK;AACb,QAAI,CAAC,UAAU,CAAC,OAAhB,EAAyB;AACvB,MAAA,UAAU,CAAC,OAAX,GAAqB,IAArB;AACD;;AACD,IAAA,aAAa,CAAC,cAAc,CAAC,KAAD,CAAf,CAAb;AACD,GALQ,EAKN,CAAC,KAAD,CALM,CAAT;AAOA,QAAM,aAAa,GAAG,WAAW,CAC9B,SAAD,IAA2C;AACzC,IAAA,aAAa,CAAC,SAAD,CAAb;;AACA,QAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAClC,UAAI,SAAS,KAAK,SAAlB,EAA6B;AAC3B,QAAA,QAAQ,CAAC,EAAD,CAAR;AACD,OAFD,MAEO,IAAI,OAAO,cAAc,CAAC,SAAD,CAArB,KAAqC,QAAzC,EAAmD;AACxD,QAAA,QAAQ,CAAC,cAAc,CAAC,SAAD,CAAf,CAAR;AACD;AACF;AACF,GAV8B,EAW/B,CAAC,QAAD,CAX+B,CAAjC;AAcA,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AACX,IAAA,KAAK,EAAE;AAAE,MAAA,KAAK,EAAE;AAAT,KADI;AAEX,IAAA,IAAI,EAAC,OAFM;AAGX,IAAA,WAAW,EAAE,WAHF;AAIX,IAAA,KAAK,EAAE,UAJI;AAKX,IAAA,QAAQ,EAAE,aALC;AAMX,IAAA,QAAQ,EAAE;AANC,GAAb,CADF;AAUD,CApCM","sourceRoot":"","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { InputNumber as AInputNumber } from 'antd';\nfunction transformValue(val) {\n    const result = Number(val);\n    return Number.isNaN(result) ? undefined : result;\n}\nexport const InputNumber = props => {\n    const { disabled, placeholder, value, onChange } = props;\n    const [innerValue, setInnerValue] = useState(transformValue(value));\n    const mountedRef = useRef(false);\n    useEffect(() => {\n        if (!mountedRef.current) {\n            mountedRef.current = true;\n        }\n        setInnerValue(transformValue(value));\n    }, [value]);\n    const onValueChange = useCallback((nextValue) => {\n        setInnerValue(nextValue);\n        if (typeof onChange === 'function') {\n            if (nextValue === undefined) {\n                onChange('');\n            }\n            else if (typeof transformValue(nextValue) === 'number') {\n                onChange(transformValue(nextValue));\n            }\n        }\n    }, [onChange]);\n    return (React.createElement(AInputNumber, { style: { width: '100%' }, size: \"small\", placeholder: placeholder, value: innerValue, onChange: onValueChange, disabled: disabled }));\n};\n//# sourceMappingURL=input-number.js.map"]},"metadata":{},"sourceType":"module"}