{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _tslib = require(\"tslib\");\n\nvar _floydWarshall = _interopRequireDefault(require(\"./floydWarshall\"));\n\nvar _gSpan = _interopRequireDefault(require(\"./gSpan/gSpan\"));\n\nvar _dijkstra = _interopRequireDefault(require(\"./dijkstra\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * 为 graphData 中每个节点生成邻居单元数组\n * @param graphData\n * @param spm\n * @param nodeLabelProp\n * @param k k-近邻\n */\n\n\nvar findKNeighborUnits = function findKNeighborUnits(graphData, spm, nodeLabelProp, k) {\n  if (nodeLabelProp === void 0) {\n    nodeLabelProp = 'cluster';\n  }\n\n  if (k === void 0) {\n    k = 2;\n  }\n\n  var units = [];\n  var nodes = graphData.nodes;\n  spm.forEach(function (row, i) {\n    units.push(findKNeighborUnit(nodes, row, i, nodeLabelProp, k));\n  });\n  return units;\n};\n\nvar findKNeighborUnit = function findKNeighborUnit(nodes, row, i, nodeLabelProp, k) {\n  var unitNodeIdxs = [i];\n  var neighbors = [];\n  var labelCountMap = {};\n  row.forEach(function (v, j) {\n    if (v <= k && i !== j) {\n      unitNodeIdxs.push(j);\n      neighbors.push(nodes[j]);\n      var label = nodes[j][nodeLabelProp];\n      if (!labelCountMap[label]) labelCountMap[label] = {\n        count: 1,\n        dists: [v]\n      };else {\n        labelCountMap[label].count++;\n        labelCountMap[label].dists.push(v);\n      }\n    }\n  }); // 将 labelCountMap 中的 dists 按照从小到大排序，方便后面使用\n\n  Object.keys(labelCountMap).forEach(function (label) {\n    labelCountMap[label].dists = labelCountMap[label].dists.sort(function (a, b) {\n      return a - b;\n    });\n  });\n  return {\n    nodeIdx: i,\n    nodeId: nodes[i].id,\n    nodeIdxs: unitNodeIdxs,\n    neighbors: neighbors,\n    neighborNum: unitNodeIdxs.length - 1,\n    nodeLabelCountMap: labelCountMap\n  };\n};\n/**\n * 随机寻找点对，满足距离小于 k\n * @param k 参数 k，表示 k-近邻\n * @param nodeNum 参数 length\n * @param maxNodePairNum 寻找点对的数量不超过 maxNodePairNum\n * @param spm 最短路径矩阵\n */\n\n\nvar findNodePairsRandomly = function findNodePairsRandomly(k, nodeNum, maxNodePairNum, kNeighborUnits, spm) {\n  // 每个节点需要随机找出的点对数\n  var nodePairNumEachNode = Math.ceil(maxNodePairNum / nodeNum);\n  var nodePairMap = {};\n  var foundNodePairCount = 0; // 遍历节点，为每个节点随机找出 nodePairNumEachNode 个点对，满足距离小于 k。找到的点对数量超过 maxNodePairNum 或所有节点遍历结束时终止\n\n  kNeighborUnits.forEach(function (unit, i) {\n    // 若未达到 nodePairNumEachNode，或循环次数小于最大循环次数(2 * nodeNum)，继续循环\n    var nodePairForICount = 0;\n    var outerLoopCount = 0;\n    var neighbors = unit.nodeIdxs; // the first one is the center node\n\n    var neighborNum = unit.neighborNum - 1;\n\n    while (nodePairForICount < nodePairNumEachNode) {\n      // 另一端节点在节点数组中的的 index\n      var oidx = neighbors[1 + Math.floor(Math.random() * neighborNum)];\n      var innerLoopCount = 0; // 若随机得到的另一端 idx 不符合条件，则继续 random。条件是不是同一个节点、这个点对没有被记录过、距离小于 k\n\n      while (nodePairMap[i + \"-\" + oidx] || nodePairMap[oidx + \"-\" + i]) {\n        oidx = Math.floor(Math.random() * nodeNum);\n        innerLoopCount++;\n        if (innerLoopCount > 2 * nodeNum) break; // 循环次数大于最大循环次数(2 * nodeNum)跳出循环，避免死循环\n      }\n\n      if (innerLoopCount < 2 * nodeNum) {\n        // 未达到最大循环次数，说明找到了合适的另一端\n        nodePairMap[i + \"-\" + oidx] = {\n          start: i,\n          end: oidx,\n          distance: spm[i][oidx]\n        };\n        nodePairForICount++;\n        foundNodePairCount++; // 如果当前找到的点对数量达到了上限，返回结果\n\n        if (foundNodePairCount >= maxNodePairNum) return nodePairMap;\n      }\n\n      outerLoopCount++;\n      if (outerLoopCount > 2 * nodeNum) break; // 循环次数大于最大循环次数(2 * nodeNum)跳出循环，避免死循环\n    } // 这个节点没有找到足够 nodePairNumEachNode 的点对。更新 nodePairNumEachNode，让后续节点找更多的点对\n\n\n    if (nodePairForICount < nodePairNumEachNode) {\n      var gap = nodePairNumEachNode - nodePairForICount;\n      nodePairNumEachNode = (nodePairNumEachNode + gap) / (nodeNum - i - 1);\n    }\n  });\n  return nodePairMap;\n};\n/**\n * 计算所有 nodePairMap 中节点对的相交邻居诱导子图\n * @param nodePairMap 节点对 map，key 为 node1.id-node2.id，value 为 { startNodeIdx, endNodeIdx, distance }\n * @param neighborUnits 每个节点的邻居元数组\n * @param graphData 原图数据\n * @param edgeMap 边的 map，方便检索\n * @param cachedInducedGraphMap 缓存的结果，下次进入该函数将继续更新该缓存，若 key 在缓存中存在则不需要重复计算\n */\n\n\nvar getIntersectNeighborInducedGraph = function getIntersectNeighborInducedGraph(nodePairMap, neighborUnits, graphData, cachedInducedGraphMap) {\n  var nodes = graphData.nodes;\n  if (!cachedInducedGraphMap) cachedInducedGraphMap = {};\n  Object.keys(nodePairMap).forEach(function (key) {\n    var _a, _b;\n\n    if (cachedInducedGraphMap && cachedInducedGraphMap[key]) return;\n    cachedInducedGraphMap[key] = {\n      nodes: [],\n      edges: []\n    };\n    var pair = nodePairMap[key];\n    var startUnitNodeIds = (_a = neighborUnits[pair.start]) === null || _a === void 0 ? void 0 : _a.nodeIdxs;\n    var endUnitNodeIds = (_b = neighborUnits[pair.end]) === null || _b === void 0 ? void 0 : _b.nodeIdxs;\n    if (!startUnitNodeIds || !endUnitNodeIds) return; // 不存在邻元，返回空图\n\n    var endSet = new Set(endUnitNodeIds);\n    var intersect = startUnitNodeIds.filter(function (x) {\n      return endSet.has(x);\n    }); // 可能会爆栈（在 1580 + 6 nodes full-connected 时出现）\n\n    if (!intersect || !intersect.length) return; // 没有交集，返回空图\n\n    var intersectIdMap = {};\n    var intersectLength = intersect.length;\n\n    for (var i = 0; i < intersectLength; i++) {\n      var node = nodes[intersect[i]];\n      cachedInducedGraphMap[key].nodes.push(node); // 将交集中的点加入诱导子图\n\n      intersectIdMap[node.id] = true;\n    } // 遍历所有边数据，如果边的两端都在交集中，将该边加入诱导子图\n\n\n    graphData.edges.forEach(function (edge) {\n      if (intersectIdMap[edge.source] && intersectIdMap[edge.target]) cachedInducedGraphMap[key].edges.push(edge);\n    });\n  });\n  return cachedInducedGraphMap;\n};\n/**\n * 计算 strcutre 在 graph 上的匹配数量\n * @param graph 图数据\n * @param structure 目前支持只有两个节点一条边的最简单结构\n * @param nodeLabelProp 节点类型字段名\n * @param edgeLabelProp 边类型字段名\n */\n\n\nvar getMatchedCount = function getMatchedCount(graph, structure, nodeLabelProp, edgeLabelProp) {\n  var _a, _b;\n\n  var nodeMap = {};\n  graph.nodes.forEach(function (node) {\n    nodeMap[node.id] = node;\n  });\n  var count = 0;\n  if (!((_a = structure === null || structure === void 0 ? void 0 : structure.edges) === null || _a === void 0 ? void 0 : _a.length) || ((_b = structure === null || structure === void 0 ? void 0 : structure.nodes) === null || _b === void 0 ? void 0 : _b.length) < 2) return 0;\n  graph.edges.forEach(function (e) {\n    var sourceLabel = nodeMap[e.source][nodeLabelProp];\n    var targetLabel = nodeMap[e.target][nodeLabelProp];\n    var strNodeLabel1 = structure === null || structure === void 0 ? void 0 : structure.nodes[0][nodeLabelProp];\n    var strNodeLabel2 = structure === null || structure === void 0 ? void 0 : structure.nodes[1][nodeLabelProp];\n    var strEdgeLabel = structure === null || structure === void 0 ? void 0 : structure.edges[0][edgeLabelProp];\n    if (e[edgeLabelProp] !== strEdgeLabel) return;\n\n    if (sourceLabel === strNodeLabel1 && targetLabel === strNodeLabel2 || sourceLabel === strNodeLabel2 && targetLabel === strNodeLabel1) {\n      count++;\n    }\n  });\n  return count;\n};\n/**\n * structures 中寻找最具有代表性的一个。这个结构是使得 matchedCountMap 的分组方式类内间距最小，类间间距最大\n * @param matchedCountMap 每个 structure 分类后的各图匹配数量，格式 { [strcture.idx]: { [interInducedGraphKey]: count } }\n * @param structureNum strcuture 个数，与 matchedCountMap.length 对应\n * @param structures\n */\n\n\nvar findRepresentStructure = function findRepresentStructure(matchedCountMap, structureNum, structures) {\n  var maxOffset = Infinity,\n      representClusterType = 0;\n\n  var _loop_1 = function _loop_1(i) {\n    // 一种分组的 map，key 是 intGraph 的 key，value 是 structures[i] 的匹配个数\n    var countMapI = matchedCountMap[i]; // 按照 value 为该组排序，生成 keys 的数组：\n\n    var sortedGraphKeys = Object.keys(countMapI).sort(function (a, b) {\n      return countMapI[a] - countMapI[b];\n    }); // 共 100 个 graphKeys，将 graphKeys 按顺序分为 groupNum 组\n\n    var groupNum = 10;\n    var clusters = []; // 总共有 groupNum 个项\n\n    sortedGraphKeys.forEach(function (key, j) {\n      if (!clusters[j % groupNum]) clusters[j % groupNum] = {\n        graphs: [],\n        totalCount: 0,\n        aveCount: 0\n      };\n      clusters[j % groupNum].graphs.push(key);\n      clusters[j % groupNum].totalCount += countMapI[key];\n    }); // 计算 cluster 与 cluster 之间的距离 innerDist，每个 cluster 内部的距离 intraDist\n\n    var aveIntraDist = 0; // 该类的类内平均值\n\n    var aveCounts = []; // 类内平均匹配数量，将用于计算类间距离\n\n    clusters.forEach(function (graphsInCluster) {\n      // 类内均值\n      var aveCount = graphsInCluster.totalCount / graphsInCluster.graphs.length;\n      graphsInCluster.aveCount = aveCount;\n      aveCounts.push(aveCount); // 对于每类，计算类内间距平均值\n\n      var aveIntraPerCluster = 0;\n      var graphsNum = graphsInCluster.length;\n      graphsInCluster.graphs.forEach(function (graphKey1, j) {\n        var graph1Count = countMapI[graphKey1];\n        graphsInCluster.graphs.forEach(function (graphKey2, k) {\n          if (j === k) return;\n          aveIntraPerCluster += Math.abs(graph1Count - countMapI[graphKey2]);\n        });\n      });\n      aveIntraPerCluster /= graphsNum * (graphsNum - 1) / 2;\n      aveIntraDist += aveIntraPerCluster;\n    });\n    aveIntraDist /= clusters.length; // 用类内均值计算类间距\n\n    var aveInterDist = 0; // 类间间距平均值\n\n    aveCounts.forEach(function (aveCount1, j) {\n      aveCounts.forEach(function (aveCount2, k) {\n        if (j === k) return;\n        aveInterDist += Math.abs(aveCount1 - aveCount2);\n      });\n      aveInterDist /= aveCounts.length * (aveCounts.length - 1) / 2;\n    }); // 寻找 (类间间距均值-类内间距均值) 最大的一种分组方式（对应的 structure 就是最终要找的唯一 DS(G)）\n\n    var offset = aveInterDist - aveIntraDist;\n\n    if (maxOffset < offset) {\n      maxOffset = offset;\n      representClusterType = i;\n    }\n  };\n\n  for (var i = 0; i < structureNum; i++) {\n    _loop_1(i);\n  }\n\n  return {\n    structure: structures[representClusterType],\n    structureCountMap: matchedCountMap[representClusterType]\n  };\n};\n\nvar getNodeMaps = function getNodeMaps(nodes, nodeLabelProp) {\n  var nodeMap = {},\n      nodeLabelMap = {};\n  nodes.forEach(function (node, i) {\n    nodeMap[node.id] = {\n      idx: i,\n      node: node,\n      degree: 0,\n      inDegree: 0,\n      outDegree: 0\n    };\n    var label = node[nodeLabelProp];\n    if (!nodeLabelMap[label]) nodeLabelMap[label] = [];\n    nodeLabelMap[label].push(node);\n  });\n  return {\n    nodeMap: nodeMap,\n    nodeLabelMap: nodeLabelMap\n  };\n};\n\nvar getEdgeMaps = function getEdgeMaps(edges, edgeLabelProp, nodeMap) {\n  var edgeMap = {},\n      edgeLabelMap = {};\n  edges.forEach(function (edge, i) {\n    edgeMap[\"\" + _util.uniqueId] = {\n      idx: i,\n      edge: edge\n    };\n    var label = edge[edgeLabelProp];\n    if (!edgeLabelMap[label]) edgeLabelMap[label] = [];\n    edgeLabelMap[label].push(edge);\n    var sourceNode = nodeMap[edge.source];\n\n    if (sourceNode) {\n      sourceNode.degree++;\n      sourceNode.outDegree++;\n    }\n\n    var targetNode = nodeMap[edge.target];\n\n    if (targetNode) {\n      targetNode.degree++;\n      targetNode.inDegree++;\n    }\n  });\n  return {\n    edgeMap: edgeMap,\n    edgeLabelMap: edgeLabelMap\n  };\n};\n/**\n * 输出最短路径的 map，key 为 sourceNode.id-targetNode.id，value 为这两个节点的最短路径长度\n * @param nodes\n * @param spm\n * @param directed\n */\n\n\nvar getSpmMap = function getSpmMap(nodes, spm, directed) {\n  var length = spm.length;\n  var map = {};\n  spm.forEach(function (row, i) {\n    var start = directed ? 0 : i + 1;\n    var iId = nodes[i].id;\n\n    for (var j = start; j < length; j++) {\n      if (i === j) continue;\n      var jId = nodes[j].id;\n      var dist = row[j];\n      map[iId + \"-\" + jId] = dist;\n      if (!directed) map[jId + \"-\" + iId] = dist;\n    }\n  });\n  return map;\n};\n/**\n * 计算一对节点（node1，node2）的 NDS 距离\n * @param graph 原图数据\n * @param node1\n * @param node2\n */\n\n\nvar getNDSDist = function getNDSDist(graph, node1, node2, nodeMap, spDist, kNeighborUnits, structure, nodeLabelProp, edgeLabelProp, cachedNDSMap, cachedInterInducedGraph) {\n  var _a;\n\n  var key = node1.id + \"-\" + node2.id;\n  if (cachedNDSMap && cachedNDSMap[key]) return cachedNDSMap[key];\n  var interInducedGraph = cachedInterInducedGraph ? cachedInterInducedGraph[key] : undefined; // 若没有缓存相交邻居诱导子图，计算\n\n  if (!interInducedGraph) {\n    var pairMap = (_a = {}, _a[key] = {\n      start: nodeMap[node1.id].idx,\n      end: nodeMap[node2.id].idx,\n      distance: spDist\n    }, _a);\n    cachedInterInducedGraph = getIntersectNeighborInducedGraph(pairMap, kNeighborUnits, graph, cachedInterInducedGraph);\n    interInducedGraph = cachedInterInducedGraph[key];\n  }\n\n  return getMatchedCount(interInducedGraph, structure, nodeLabelProp, edgeLabelProp);\n};\n/**\n * 计算 pattern 上绩点的度数并存储到 minPatternNodeLabelDegreeMap\n */\n\n\nvar stashPatternNodeLabelDegreeMap = function stashPatternNodeLabelDegreeMap(minPatternNodeLabelDegreeMap, neighborLabel, patternNodeMap, patternNodeLabelMap) {\n  var _a, _b, _c;\n\n  var minPatternNodeLabelDegree = (_a = minPatternNodeLabelDegreeMap[neighborLabel]) === null || _a === void 0 ? void 0 : _a.degree;\n  var minPatternNodeLabelInDegree = (_b = minPatternNodeLabelDegreeMap[neighborLabel]) === null || _b === void 0 ? void 0 : _b.inDegree;\n  var minPatternNodeLabelOutDegree = (_c = minPatternNodeLabelDegreeMap[neighborLabel]) === null || _c === void 0 ? void 0 : _c.outDegree;\n\n  if (minPatternNodeLabelDegreeMap[neighborLabel] === undefined) {\n    minPatternNodeLabelDegree = Infinity;\n    minPatternNodeLabelInDegree = Infinity;\n    minPatternNodeLabelOutDegree = Infinity;\n    patternNodeLabelMap[neighborLabel].forEach(function (patternNodeWithLabel) {\n      var patternNodeDegree = patternNodeMap[patternNodeWithLabel.id].degree;\n      if (minPatternNodeLabelDegree > patternNodeDegree) minPatternNodeLabelDegree = patternNodeDegree;\n      var patternNodeInDegree = patternNodeMap[patternNodeWithLabel.id].inDegree;\n      if (minPatternNodeLabelInDegree > patternNodeInDegree) minPatternNodeLabelInDegree = patternNodeInDegree;\n      var patternNodeOutDegree = patternNodeMap[patternNodeWithLabel.id].outDegree;\n      if (minPatternNodeLabelOutDegree > patternNodeOutDegree) minPatternNodeLabelOutDegree = patternNodeOutDegree;\n    });\n    minPatternNodeLabelDegreeMap[neighborLabel] = {\n      degree: minPatternNodeLabelDegree,\n      inDegree: minPatternNodeLabelInDegree,\n      outDegree: minPatternNodeLabelOutDegree\n    };\n  }\n\n  return {\n    minPatternNodeLabelDegree: minPatternNodeLabelDegree,\n    minPatternNodeLabelInDegree: minPatternNodeLabelInDegree,\n    minPatternNodeLabelOutDegree: minPatternNodeLabelOutDegree\n  };\n};\n/**\n * GADDI 模式匹配\n * @param graphData 原图数据\n * @param pattern 搜索图（需要在原图上搜索的模式）数据\n * @param directed 是否计算有向图，默认 false\n * @param k 参数 k，表示 k-近邻\n * @param length 参数 length\n * @param nodeLabelProp 节点数据中代表节点标签（分类信息）的属性名。默认为 cluster\n * @param edgeLabelProp 边数据中代表边标签（分类信息）的属性名。默认为 cluster\n */\n\n\nvar GADDI = function GADDI(graphData, pattern, directed, k, length, nodeLabelProp, edgeLabelProp) {\n  if (directed === void 0) {\n    directed = false;\n  }\n\n  if (nodeLabelProp === void 0) {\n    nodeLabelProp = 'cluster';\n  }\n\n  if (edgeLabelProp === void 0) {\n    edgeLabelProp = 'cluster';\n  }\n\n  if (!graphData || !graphData.nodes) return; // 分为三步：\n  // 0. 预计算：节点/边数，邻接矩阵、最短路径矩阵\n  // 1. 处理原图 graphData。再分为 1~5 小步\n  // 2. 匹配\n  // console.log(\"----- stage-pre: preprocessing -------\");\n  // -------- 第零步，预计算：节点/边数，邻接矩阵、最短路径矩阵-------\n\n  var nodeNum = graphData.nodes.length;\n  if (!nodeNum) return; // console.log(\"----- stage-pre.1: calc shortest path matrix for graph -------\");\n\n  var spm = (0, _floydWarshall.default)(graphData, directed); // console.log(\n  //   \"----- stage-pre.2: calc shortest path matrix for pattern -------\"\n  // );\n\n  var patternSpm = (0, _floydWarshall.default)(pattern, directed); // console.log(\n  //   \"----- stage-pre.3: calc shortest path matrix map for graph -------\"\n  // );\n\n  var spmMap = getSpmMap(graphData.nodes, spm, directed); // console.log(\n  //   \"----- stage-pre.4: calc shortest path matrix map for pattern -------\"\n  // );\n\n  var patternSpmMap = getSpmMap(pattern.nodes, patternSpm, directed); // console.log(\"----- stage-pre.5: establish maps -------\");\n  // 节点的 map，以 id 为 id 映射，方便后续快速检索\n\n  var _a = getNodeMaps(graphData.nodes, nodeLabelProp),\n      nodeMap = _a.nodeMap,\n      nodeLabelMap = _a.nodeLabelMap;\n\n  var _b = getNodeMaps(pattern.nodes, nodeLabelProp),\n      patternNodeMap = _b.nodeMap,\n      patternNodeLabelMap = _b.nodeLabelMap; // 计算节点度数\n\n\n  getEdgeMaps(graphData.edges, edgeLabelProp, nodeMap);\n  var patternEdgeLabelMap = getEdgeMaps(pattern.edges, edgeLabelProp, patternNodeMap).edgeLabelMap; // 若未指定 length，自动计算 pattern 半径（最短路径最大值）\n\n  var patternSpmSpread = [];\n  patternSpm === null || patternSpm === void 0 ? void 0 : patternSpm.forEach(function (row) {\n    patternSpmSpread = patternSpmSpread.concat(row);\n  });\n  if (!length) length = Math.max.apply(Math, (0, _tslib.__spreadArray)((0, _tslib.__spreadArray)([], patternSpmSpread), [2]));\n  if (!k) k = length; // console.log(\"params\", directed, length, k);\n  // console.log(\"----- stage-pre.6: calc k neighbor units -------\");\n  // 计算每个节点的 k 邻元集合\n\n  var kNeighborUnits = findKNeighborUnits(graphData, spm, nodeLabelProp, k);\n  var patternKNeighborUnits = findKNeighborUnits(pattern, patternSpm, nodeLabelProp, k); // console.log(\n  //   \"----- stage0: going to processing graph and find intersect neighbor induced graphs -------\"\n  // );\n  // console.log(\"----- stage0.1: going to select random node pairs -------\");\n  // -------- 第一步，处理原图 graphData-------\n  // 1.1. 随机选择最多 100 个点对，满足距离小于 Length 和 k\n  // 当 graphData 少于 20 个节点，则不能找出 100 个点对，只找出不多于 n(n-1)/2 个点对\n\n  var maxNodePairNum = Math.min(100, nodeNum * (nodeNum - 1) / 2);\n  var nodePairsMap = findNodePairsRandomly(k, nodeNum, maxNodePairNum, patternKNeighborUnits, spm); // console.log(\n  //   \"----- stage0.2: going to calculate intersect neighbor induced graphs -------\"\n  // );\n  // 1.2. 生成上面节点对的相应相交邻居诱导子图。格式为 {'beginNodeIdx-endNodeIdx': {nodes: [], edges: []}}\n\n  var intGMap = getIntersectNeighborInducedGraph(nodePairsMap, kNeighborUnits, graphData); // 1.3. 使用 gSpan 算法（frequent graph mining）计算 ISIntG 的前 10 个频率最高的子结构（3-4条边）\n\n  var top = 10,\n      minSupport = 1,\n      minNodeNum = 1,\n      maxNodeNum = 4;\n  var params = {\n    graphs: intGMap,\n    nodeLabelProp: nodeLabelProp,\n    edgeLabelProp: edgeLabelProp,\n    minSupport: minSupport,\n    minNodeNum: minNodeNum,\n    maxNodeNum: maxNodeNum,\n    directed: directed\n  }; // console.log(\n  //   \"----- stage1: (gSpan) going to find frequent structure dsG -------\"\n  // );\n  // console.log(\"----- stage1.1: going to run gSpan -------\");\n  // 暂时假设生成的 sub structure 都只有一条边\n\n  var freStructures = (0, _gSpan.default)(params).slice(0, top); // structureNum 可能小于 top\n\n  var structureNum = freStructures.length; // 1.4. 计算上述 10 个子结构在 intGMap 中每个诱导子图的匹配个数\n\n  var matchedCountMap = [];\n  freStructures.forEach(function (structure, i) {\n    matchedCountMap[i] = {};\n    Object.keys(intGMap).forEach(function (key) {\n      var graph = intGMap[key];\n      var subStructureCount = getMatchedCount(graph, structure, nodeLabelProp, edgeLabelProp);\n      matchedCountMap[i][key] = subStructureCount;\n    });\n  }); // console.log(\n  //   \"----- stage1.1: going to find the most represent strucutre -------\"\n  // );\n  // 1.5. 对于每个子结构，根据匹配个数为 intGMap 中的诱导子图分组，生成 structureNum 种分组\n  // 计算每种分组的类间距和类内间距，找到类间距最大、类内间距最小的一种分组，这种分组对应的子结构被选为唯一代表性子结构 DS(G)\n\n  var _c = findRepresentStructure(matchedCountMap, structureNum, freStructures),\n      dsG = _c.structure,\n      ndsDist = _c.structureCountMap; // -------- 第二步，匹配-------\n  // 2.1 从 Q 中的第一个标签的第一个节点开始，寻找 G 中的匹配\n\n\n  var beginPNode = pattern.nodes[0];\n  var label = beginPNode[nodeLabelProp]; // 2.1.1 找到 G 中标签与之相同的节点\n\n  var candidates = nodeLabelMap[label]; // console.log(\"----- stage2: going to find candidates -------\");\n  // 全局缓存，避免重复计算\n\n  var minPatternNodeLabelDegreeMap = {}; // key 是 label，value 是该 label 节点的最小度数\n\n  var patternIntGraphMap = {},\n      patternNDSDist = {},\n      // key 为 node.id-node.id\n  patternNDSDistMap = {}; // key 为 node.id-label2，value nds距离值数组（按从大到小排序，无需关心具体对应哪个 node2）\n  // 2.2.2 对于 Q 中的另一个标签的 k 个节点，计算它们到 node 的最短路径以及 NDS 距离\n\n  var patternSpDist = {};\n  var patternSpDistBack = {};\n  Object.keys(patternNodeLabelMap).forEach(function (label2, j) {\n    patternSpDist[label2] = [];\n\n    if (directed) {\n      patternSpDistBack[label2] = [];\n    }\n\n    var maxDist = -Infinity;\n    var patternNodesWithLabel2 = patternNodeLabelMap[label2];\n    var patternNodePairMap = {};\n    patternNodesWithLabel2.forEach(function (nodeWithLabel2) {\n      var dist = patternSpmMap[beginPNode.id + \"-\" + nodeWithLabel2.id];\n      dist && patternSpDist[label2].push(dist);\n      if (maxDist < dist) maxDist = dist;\n      patternNodePairMap[beginPNode.id + \"-\" + nodeWithLabel2.id] = {\n        start: 0,\n        end: patternNodeMap[nodeWithLabel2.id].idx,\n        distance: dist\n      };\n\n      if (directed) {\n        var distBack = patternSpmMap[nodeWithLabel2.id + \"-\" + beginPNode.id];\n        distBack && patternSpDistBack[label2].push(distBack);\n      }\n    }); // spDist[label2] 按照从小到大排序\n\n    patternSpDist[label2] = patternSpDist[label2].sort(function (a, b) {\n      return a - b;\n    });\n    if (directed) patternSpDistBack[label2] = patternSpDistBack[label2].sort(function (a, b) {\n      return a - b;\n    }); // 计算 Q 中所有 label2 节点到 beginPNode 的 NDS 距离\n    // 所有 label2 节点到 beginPNode 的邻居相交诱导子图：\n    // key: node1.id-node2.id\n\n    patternIntGraphMap = getIntersectNeighborInducedGraph(patternNodePairMap, patternKNeighborUnits, pattern, patternIntGraphMap); // pattern 中 beginNode 到当前 label2 节点 的 NDS 距离（数组，无需关心具体对应到哪个节点）\n\n    var currentPatternNDSDistArray = [];\n    Object.keys(patternNodePairMap).forEach(function (key) {\n      if (patternNDSDist[key]) {\n        currentPatternNDSDistArray.push(patternNDSDist[key]);\n        return; // 缓存过则不需要再次计算\n      }\n\n      var patternIntGraph = patternIntGraphMap[key];\n      patternNDSDist[key] = getMatchedCount(patternIntGraph, dsG, nodeLabelProp, edgeLabelProp);\n      currentPatternNDSDistArray.push(patternNDSDist[key]);\n    }); // 根据值为 currentPatternNDSDist 从大到小排序\n\n    currentPatternNDSDistArray = currentPatternNDSDistArray.sort(function (a, b) {\n      return b - a;\n    });\n    patternNDSDistMap[beginPNode.id + \"-\" + label2] = currentPatternNDSDistArray;\n    if (label2 === label) return;\n    var candidatesNum = candidates.length;\n\n    var _loop_4 = function _loop_4(m) {\n      var cNode = candidates[m]; // prune1：若 candidates 中节点 cNode 的 kNeighborUnits 中标签为 label2 的节点个数少于 pattern 中 label2 个数，删去它\n\n      var graphNeighborUnit = kNeighborUnits[nodeMap[cNode.id].idx];\n      var graphNeighborUnitCountMap = graphNeighborUnit.nodeLabelCountMap[label2];\n      var patternLabel2Num = patternNodeLabelMap[label2].length;\n\n      if (!graphNeighborUnitCountMap || graphNeighborUnitCountMap.count < patternLabel2Num) {\n        candidates.splice(m, 1);\n        return \"continue\";\n      } // prune2：若 candidates 中节点 cNode 到 kNeighborUnits 中标签为 label2 的节点最短路径大于 patternSpDist[label2]，删去它\n      // (prune2 规则即：candidate 相关的最短路径的最大 spDist[label2].length 个，按照大小顺序依次和 patternSpDist[label2] 中的值比较，只要遇到一个是 G > Q 的，就删去这个 candidate)\n\n\n      var prune2Invalid = false;\n\n      for (var n = 0; n < patternLabel2Num; n++) {\n        if (graphNeighborUnitCountMap.dists[n] > patternSpDist[label2][n]) {\n          prune2Invalid = true;\n          break;\n        }\n      }\n\n      if (prune2Invalid) {\n        candidates.splice(m, 1);\n        return \"continue\";\n      } // prune3：若 candidates 中节点 cNode 到 kNeighborUnits 中标签为 label2 的节点 NDS 距离小于 patternNDSDist[beginNode.id-label2]，删去它\n      // TODO：prune3，currentPatternNDSDistArray 与 currentNDSDist 的比较\n      // 计算 G 中所有 label2 节点到 cNode 的 NDS 距离\n      // 所有 label2 节点到 cNode 的邻居相交诱导子图：\n\n\n      var cNodePairMap = {};\n      graphNeighborUnit.neighbors.forEach(function (neighborNode) {\n        var dist = spmMap[cNode.id + \"-\" + neighborNode.id];\n        cNodePairMap[cNode.id + \"-\" + neighborNode.id] = {\n          start: nodeMap[cNode.id].idx,\n          end: nodeMap[neighborNode.id].idx,\n          distance: dist\n        };\n      }); // 更新 intGMap\n\n      intGMap = getIntersectNeighborInducedGraph(cNodePairMap, kNeighborUnits, graphData, intGMap); // candidate 到它周围 label2 节点的 NDS 距离, key 是 node.id-node.id\n\n      var currentNDSDistArray = [];\n      Object.keys(cNodePairMap).forEach(function (key) {\n        if (ndsDist[key]) {\n          currentNDSDistArray.push(ndsDist[key]);\n          return; // 缓存过则不需要再次计算\n        }\n\n        var intGraph = intGMap[key];\n        ndsDist[key] = getMatchedCount(intGraph, dsG, nodeLabelProp, edgeLabelProp);\n        currentNDSDistArray.push(ndsDist[key]);\n      }); // 根据值为 currentNDSDistArray 从大到小排序\n\n      currentNDSDistArray = currentNDSDistArray.sort(function (a, b) {\n        return b - a;\n      });\n      var prune3Invalid = false;\n\n      for (var n = 0; n < patternLabel2Num; n++) {\n        if (currentNDSDistArray[n] < currentPatternNDSDistArray[n]) {\n          prune3Invalid = true;\n          break;\n        }\n      }\n\n      if (prune3Invalid) {\n        candidates.splice(m, 1);\n        return \"continue\";\n      }\n    };\n\n    for (var m = candidatesNum - 1; m >= 0; m--) {\n      _loop_4(m);\n    }\n  });\n  var candidateGraphs = []; // console.log(\n  //   \"----- stage3: going to splice neighbors for each candidate graph -------\"\n  // );\n  // candidates 经过筛选后，以每个 candidate 为中心，生成 Length-neighbor 的邻居诱导子图\n  // 并在诱导子图中去除不可能在 Q 上找到匹配的点：在 Q 上不存在的 label，其他 label 到 candidate 的最大最短距离符合 Q、NDS 距离符合 Q\n\n  candidates === null || candidates === void 0 ? void 0 : candidates.forEach(function (candidate) {\n    var nodeIdx = nodeMap[candidate.id].idx;\n    var lengthNeighborUnit = findKNeighborUnit(graphData.nodes, spm[nodeIdx], nodeIdx, nodeLabelProp, length);\n    var neighborNodes = lengthNeighborUnit.neighbors; // 删除不可能找到匹配的邻居点\n\n    var neighborNum = neighborNodes.length;\n    var unmatched = false;\n\n    for (var i = neighborNum - 1; i >= 0; i--) {\n      // 如果通过裁剪，符合条件的节点数量已过少，说明不能匹配这个 candidate 相关的图\n      if (neighborNodes.length + 1 < pattern.nodes.length) {\n        unmatched = true;\n        return;\n      }\n\n      var neighborNode = neighborNodes[i];\n      var neighborLabel = neighborNode[nodeLabelProp]; // prune1: 若该邻居点的 label 不存在于 pattern 中，移除这个点\n\n      if (!patternNodeLabelMap[neighborLabel] || !patternNodeLabelMap[neighborLabel].length) {\n        neighborNodes.splice(i, 1);\n        continue;\n      } // prune2: 若该邻居点到 candidate 的最短路径比和它有相同 label 的节点到 beginPNode 的最大最短路径长度长，移除这个点\n      // prune2.1: 如果没有这个标签到 beginPNode 的距离记录，说明 pattern 上（可能 beginPNode 是这个 label）没有其他这个 label 的节点\n\n\n      if (!patternSpDist[neighborLabel] || !patternSpDist[neighborLabel].length) {\n        neighborNodes.splice(i, 1);\n        continue;\n      }\n\n      var key = candidate.id + \"-\" + neighborNode.id; // prune2.2\n\n      var distToCandidate = spmMap[key];\n      var idx = patternSpDist[neighborLabel].length - 1;\n      var maxDistWithLabelInPattern = patternSpDist[neighborLabel][idx]; // patternSpDist[neighborLabel] 已经按照从小到大排序\n\n      if (distToCandidate > maxDistWithLabelInPattern) {\n        neighborNodes.splice(i, 1);\n        continue;\n      }\n\n      if (directed) {\n        var keyBack = neighborNode.id + \"-\" + candidate.id;\n        var distFromCandidate = spmMap[keyBack];\n        idx = patternSpDistBack[neighborLabel].length - 1;\n        var maxBackDistWithLabelInPattern = patternSpDistBack[neighborLabel][idx];\n\n        if (distFromCandidate > maxBackDistWithLabelInPattern) {\n          neighborNodes.splice(i, 1);\n          continue;\n        }\n      } // prune3: 若该邻居点到 candidate 的 NDS 距离比和它有相同 label 的节点到 beginPNode 的最小 NDS 距离小，移除这个点\n\n\n      var ndsToCandidate = ndsDist[key] ? ndsDist[key] : getNDSDist(graphData, candidate, neighborNode, nodeMap, distToCandidate, kNeighborUnits, dsG, nodeLabelProp, edgeLabelProp, ndsDist, intGMap);\n      var patternKey = beginPNode.id + \"-\" + neighborLabel;\n      var minNdsWithLabelInPattern = patternNDSDistMap[patternKey][patternNDSDistMap[patternKey].length - 1]; // patternNDSDist[key] 一定存在\n\n      if (ndsToCandidate < minNdsWithLabelInPattern) {\n        neighborNodes.splice(i, 1);\n        continue;\n      } // prune4: 若该邻居点的度数小于 pattern 同 label 节点最小度数，删去该点\n\n\n      var _a = stashPatternNodeLabelDegreeMap(minPatternNodeLabelDegreeMap, neighborLabel, patternNodeMap, patternNodeLabelMap),\n          minPatternNodeLabelDegree = _a.minPatternNodeLabelDegree,\n          minPatternNodeLabelInDegree = _a.minPatternNodeLabelInDegree,\n          minPatternNodeLabelOutDegree = _a.minPatternNodeLabelOutDegree;\n\n      if (nodeMap[neighborNode.id].degree < minPatternNodeLabelDegree) {\n        neighborNodes.splice(i, 1);\n        continue;\n      }\n    } // 节点在个数上符合匹配（不少于 pattern 的节点个数），现在筛选相关边\n\n\n    if (!unmatched) {\n      candidateGraphs.push({\n        nodes: [candidate].concat(neighborNodes)\n      });\n    }\n  }); // console.log(\n  //   \"----- stage4: going to splice edges and neighbors for each candidate graph -------\"\n  // );\n\n  var undirectedLengthsToBeginPNode = (0, _dijkstra.default)(pattern, beginPNode.id, false).length;\n  var undirectedLengthsToBeginPNodeLabelMap = {};\n\n  if (directed) {\n    Object.keys(undirectedLengthsToBeginPNode).forEach(function (nodeId) {\n      var nodeLabel = patternNodeMap[nodeId].node[nodeLabelProp];\n      if (!undirectedLengthsToBeginPNodeLabelMap[nodeLabel]) undirectedLengthsToBeginPNodeLabelMap[nodeLabel] = [undirectedLengthsToBeginPNode[nodeId]];else undirectedLengthsToBeginPNodeLabelMap[nodeLabel].push(undirectedLengthsToBeginPNode[nodeId]);\n    });\n    Object.keys(undirectedLengthsToBeginPNodeLabelMap).forEach(function (pLabel) {\n      undirectedLengthsToBeginPNodeLabelMap[pLabel].sort(function (a, b) {\n        return a - b;\n      });\n    });\n  } else {\n    undirectedLengthsToBeginPNodeLabelMap = patternSpDist;\n  } // 现在 candidateGraphs 里面只有节点，进行边的筛选\n\n\n  var candidateGraphNum = candidateGraphs.length;\n\n  var _loop_2 = function _loop_2(i) {\n    var candidateGraph = candidateGraphs[i];\n    var candidate = candidateGraph.nodes[0];\n    var candidateNodeLabelCountMap = {};\n    var candidateNodeMap = {};\n    candidateGraph.nodes.forEach(function (node, q) {\n      candidateNodeMap[node.id] = {\n        idx: q,\n        node: node,\n        degree: 0,\n        inDegree: 0,\n        outDegree: 0\n      };\n      var cNodeLabel = node[nodeLabelProp];\n      if (!candidateNodeLabelCountMap[cNodeLabel]) candidateNodeLabelCountMap[cNodeLabel] = 1;else candidateNodeLabelCountMap[cNodeLabel]++;\n    }); // 根据 candidate 和 neighborNodes 中的节点生成 G 的诱导子图\n    // 即，将 graphData 上两端都在 candidateGraph.nodes 中的边放入 candidateEdges\n\n    var candidateEdges = [];\n    var edgeLabelCountMap = {};\n    graphData.edges.forEach(function (edge) {\n      if (candidateNodeMap[edge.source] && candidateNodeMap[edge.target]) {\n        candidateEdges.push(edge);\n        if (!edgeLabelCountMap[edge[edgeLabelProp]]) edgeLabelCountMap[edge[edgeLabelProp]] = 1;else edgeLabelCountMap[edge[edgeLabelProp]]++;\n        candidateNodeMap[edge.source].degree++;\n        candidateNodeMap[edge.target].degree++;\n        candidateNodeMap[edge.source].outDegree++;\n        candidateNodeMap[edge.target].inDegree++;\n      }\n    }); // prune：若有一个 edgeLabel 在 candidateGraph 上的个数少于 pattern，去除该图\n\n    var pattenrEdgeLabelNum = Object.keys(patternEdgeLabelMap).length;\n    var prunedByEdgeLabel = false;\n\n    for (var e = 0; e < pattenrEdgeLabelNum; e++) {\n      var label_1 = Object.keys(patternEdgeLabelMap)[e];\n\n      if (!edgeLabelCountMap[label_1] || edgeLabelCountMap[label_1] < patternEdgeLabelMap[label_1].length) {\n        prunedByEdgeLabel = true;\n        break;\n      }\n    }\n\n    if (prunedByEdgeLabel) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    } // 遍历 candidateEdges，进行边的筛选\n\n\n    var candidateEdgeNum = candidateEdges.length; // prune：若边数过少，去除该图\n\n    if (candidateEdgeNum < pattern.edges.length) {\n      candidateGraphs.splice(i, 1);\n      return \"break\";\n    }\n\n    var candidateGraphInvalid = false;\n\n    var _loop_5 = function _loop_5(e) {\n      var edge = candidateEdges[e];\n      var edgeLabel = edge[edgeLabelProp];\n      var patternEdgesWithLabel = patternEdgeLabelMap[edgeLabel]; // prune 1: 若边的 label 不存在于 pattern 边 label 中，去除该边\n\n      if (!patternEdgesWithLabel || !patternEdgesWithLabel.length) {\n        edgeLabelCountMap[edgeLabel]--; // 若这个 label 的 count 减少之后，该 label 的边数不足，去除该图\n\n        if (patternEdgesWithLabel && edgeLabelCountMap[edgeLabel] < patternEdgesWithLabel.length) {\n          candidateGraphInvalid = true;\n          return \"break\";\n        }\n\n        candidateEdges.splice(e, 1);\n        candidateNodeMap[edge.source].degree--;\n        candidateNodeMap[edge.target].degree--;\n        candidateNodeMap[edge.source].outDegree--;\n        candidateNodeMap[edge.target].inDegree--;\n        return \"continue\";\n      } // prune 2: 若边的 label +两端 label 的三元组关系不能在 pattern 中找到，去除该边\n\n\n      var sourceLabel = candidateNodeMap[edge.source].node[nodeLabelProp];\n      var targetLabel = candidateNodeMap[edge.target].node[nodeLabelProp];\n      var edgeMatched = false;\n      patternEdgesWithLabel.forEach(function (patternEdge) {\n        var patternSource = patternNodeMap[patternEdge.source].node;\n        var patternTarget = patternNodeMap[patternEdge.target].node;\n        if (patternSource[nodeLabelProp] === sourceLabel && patternTarget[nodeLabelProp] === targetLabel) edgeMatched = true;\n        if (!directed && patternSource[nodeLabelProp] === targetLabel && patternTarget[nodeLabelProp] === sourceLabel) edgeMatched = true;\n      });\n\n      if (!edgeMatched) {\n        edgeLabelCountMap[edgeLabel]--; // 若这个 label 的 count 减少之后，该 label 的边数不足，去除该图\n\n        if (patternEdgesWithLabel && edgeLabelCountMap[edgeLabel] < patternEdgesWithLabel.length) {\n          candidateGraphInvalid = true;\n          return \"break\";\n        }\n\n        candidateEdges.splice(e, 1);\n        candidateNodeMap[edge.source].degree--;\n        candidateNodeMap[edge.target].degree--;\n        candidateNodeMap[edge.source].outDegree--;\n        candidateNodeMap[edge.target].inDegree--;\n        return \"continue\";\n      }\n    };\n\n    for (var e = candidateEdgeNum - 1; e >= 0; e--) {\n      var state_2 = _loop_5(e);\n\n      if (state_2 === \"break\") break;\n    } // prune2: 删除边的过程中，发现边数过少/边 label 数过少时，去除该图\n\n\n    if (candidateGraphInvalid) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    }\n\n    candidateGraph.edges = candidateEdges;\n    var lengthsToCandidate = (0, _dijkstra.default)(candidateGraph, candidateGraph.nodes[0].id, false).length;\n    Object.keys(lengthsToCandidate).reverse().forEach(function (targetId) {\n      if (targetId === candidateGraph.nodes[0].id || candidateGraphInvalid) return; // prune4: 通过上述裁剪，可能导致该邻居子图变为不连通。裁剪掉目前在这个邻居子图中和 candidate（第一个节点）不连通的节点\n\n      if (lengthsToCandidate[targetId] === Infinity) {\n        var targetNodeLabel = candidateNodeMap[targetId].node[nodeLabelProp];\n        candidateNodeLabelCountMap[targetNodeLabel]--;\n\n        if (candidateNodeLabelCountMap[targetNodeLabel] < patternNodeLabelMap[targetNodeLabel].length) {\n          candidateGraphInvalid = true;\n          return;\n        }\n\n        var idx = candidateGraph.nodes.indexOf(candidateNodeMap[targetId].node);\n        candidateGraph.nodes.splice(idx, 1);\n        candidateNodeMap[targetId] = undefined;\n        return;\n      } // prune5: 经过边裁剪后，可能又出现了最短路径过长的节点 （比 pattern 中同 label 的节点到 beginNode 最大最短距离远），删去这些节点\n\n\n      var nLabel = nodeMap[targetId].node[nodeLabelProp];\n\n      if (!undirectedLengthsToBeginPNodeLabelMap[nLabel] || !undirectedLengthsToBeginPNodeLabelMap[nLabel].length || lengthsToCandidate[targetId] > undirectedLengthsToBeginPNodeLabelMap[nLabel][undirectedLengthsToBeginPNodeLabelMap[nLabel].length - 1]) {\n        var targetNodeLabel = candidateNodeMap[targetId].node[nodeLabelProp];\n        candidateNodeLabelCountMap[targetNodeLabel]--;\n\n        if (candidateNodeLabelCountMap[targetNodeLabel] < patternNodeLabelMap[targetNodeLabel].length) {\n          candidateGraphInvalid = true;\n          return;\n        }\n\n        var idx = candidateGraph.nodes.indexOf(candidateNodeMap[targetId].node);\n        candidateGraph.nodes.splice(idx, 1);\n        candidateNodeMap[targetId] = undefined;\n      }\n    });\n\n    if (candidateGraphInvalid) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    }\n\n    var degreeChanged = true;\n    var loopCount = 0;\n\n    while (degreeChanged && !candidateGraphInvalid) {\n      degreeChanged = false; // candidate 度数不足，删去该图\n\n      var condition = directed ? candidateNodeMap[candidate.id].degree < patternNodeMap[beginPNode.id].degree || candidateNodeMap[candidate.id].inDegree < patternNodeMap[beginPNode.id].inDegree || candidateNodeMap[candidate.id].outDegree < patternNodeMap[beginPNode.id].outDegree : candidateNodeMap[candidate.id].degree < patternNodeMap[beginPNode.id].degree;\n\n      if (condition) {\n        candidateGraphInvalid = true;\n        break;\n      } // candidate label 个数不足，删去该图\n\n\n      if (candidateNodeLabelCountMap[candidate[nodeLabelProp]] < patternNodeLabelMap[candidate[nodeLabelProp]].length) {\n        candidateGraphInvalid = true;\n        break;\n      } // prune6：去除度数过小的节点\n\n\n      var currentCandidateNodeNum = candidateGraph.nodes.length;\n\n      for (var o = currentCandidateNodeNum - 1; o >= 0; o--) {\n        var cgNode = candidateGraph.nodes[o];\n        var nodeDegree = candidateNodeMap[cgNode.id].degree;\n        var nodeInDegree = candidateNodeMap[cgNode.id].inDegree;\n        var nodeOutDegree = candidateNodeMap[cgNode.id].outDegree;\n        var cNodeLabel = cgNode[nodeLabelProp];\n\n        var _d = stashPatternNodeLabelDegreeMap(minPatternNodeLabelDegreeMap, cNodeLabel, patternNodeMap, patternNodeLabelMap),\n            minPatternNodeLabelDegree = _d.minPatternNodeLabelDegree,\n            minPatternNodeLabelInDegree = _d.minPatternNodeLabelInDegree,\n            minPatternNodeLabelOutDegree = _d.minPatternNodeLabelOutDegree;\n\n        var deleteCondition = directed ? nodeDegree < minPatternNodeLabelDegree || nodeInDegree < minPatternNodeLabelInDegree || nodeOutDegree < minPatternNodeLabelOutDegree : nodeDegree < minPatternNodeLabelDegree;\n\n        if (deleteCondition) {\n          candidateNodeLabelCountMap[cgNode[nodeLabelProp]]--; // 节点 label 个数不足\n\n          if (candidateNodeLabelCountMap[cgNode[nodeLabelProp]] < patternNodeLabelMap[cgNode[nodeLabelProp]].length) {\n            candidateGraphInvalid = true;\n            break;\n          }\n\n          candidateGraph.nodes.splice(o, 1);\n          candidateNodeMap[cgNode.id] = undefined;\n          degreeChanged = true;\n        }\n      }\n\n      if (candidateGraphInvalid || !degreeChanged && loopCount !== 0) break; // 经过 prune5 节点裁剪，删去端点已经不在 candidateGraph 中的边\n\n      candidateEdgeNum = candidateEdges.length;\n\n      for (var y = candidateEdgeNum - 1; y >= 0; y--) {\n        var cedge = candidateEdges[y];\n\n        if (!candidateNodeMap[cedge.source] || !candidateNodeMap[cedge.target]) {\n          candidateEdges.splice(y, 1);\n          var edgeLabel = cedge[edgeLabelProp];\n          edgeLabelCountMap[edgeLabel]--;\n\n          if (candidateNodeMap[cedge.source]) {\n            candidateNodeMap[cedge.source].degree--;\n            candidateNodeMap[cedge.source].outDegree--;\n          }\n\n          if (candidateNodeMap[cedge.target]) {\n            candidateNodeMap[cedge.target].degree--;\n            candidateNodeMap[cedge.target].inDegree--;\n          } // 边 label 数量不足\n\n\n          if (patternEdgeLabelMap[edgeLabel] && edgeLabelCountMap[edgeLabel] < patternEdgeLabelMap[edgeLabel].length) {\n            candidateGraphInvalid = true;\n            break;\n          }\n\n          degreeChanged = true;\n        }\n      }\n\n      loopCount++;\n    }\n\n    if (candidateGraphInvalid) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    } // prune: 若节点/边数过少，节点/边 label 过少，去掉这个图\n\n\n    if (candidateGraphInvalid || candidateGraph.nodes.length < pattern.nodes.length || candidateEdges.length < pattern.edges.length) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    }\n  };\n\n  for (var i = candidateGraphNum - 1; i >= 0; i--) {\n    var state_1 = _loop_2(i);\n\n    if (state_1 === \"break\") break;\n  } // 此时已经生成的多个 candidateGraphs，可能有重复\n  // console.log(\n  //   \"----- stage5: going to splice dulplicated candidate graphs -------\"\n  // );\n  // 删去 candidateGraphs 中一模一样的子图，通过边的 node-node-edgeLabel 作为 key，这类边个数作为 value，进行匹配\n\n\n  var currentLength = candidateGraphs.length;\n\n  var _loop_3 = function _loop_3(i) {\n    var cg1 = candidateGraphs[i];\n    var cg1EdgeMap = {}; // [node1.id-node2.id-edge.label]: count\n\n    cg1.edges.forEach(function (edge) {\n      var key = edge.source + \"-\" + edge.target + \"-\" + edge.label;\n      if (!cg1EdgeMap[key]) cg1EdgeMap[key] = 1;else cg1EdgeMap[key]++;\n    });\n\n    var _loop_6 = function _loop_6(j) {\n      var cg2 = candidateGraphs[j];\n      var cg2EdgeMap = {}; // [node1.id-node2.id-edge.label]: count\n\n      cg2.edges.forEach(function (edge) {\n        var key = edge.source + \"-\" + edge.target + \"-\" + edge.label;\n        if (!cg2EdgeMap[key]) cg2EdgeMap[key] = 1;else cg2EdgeMap[key]++;\n      });\n      var same = true;\n\n      if (Object.keys(cg2EdgeMap).length !== Object.keys(cg1EdgeMap).length) {\n        same = false;\n      } else {\n        Object.keys(cg1EdgeMap).forEach(function (key) {\n          if (cg2EdgeMap[key] !== cg1EdgeMap[key]) same = false;\n        });\n      }\n\n      if (same) {\n        candidateGraphs.splice(j, 1);\n      }\n    };\n\n    for (var j = currentLength - 1; j > i; j--) {\n      _loop_6(j);\n    }\n\n    currentLength = candidateGraphs.length;\n  };\n\n  for (var i = 0; i <= currentLength - 1; i++) {\n    _loop_3(i);\n  }\n\n  return candidateGraphs;\n};\n\nvar _default = GADDI;\nexports.default = _default;","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/@antv/algorithm/lib/gaddi.js"],"names":["Object","defineProperty","exports","value","default","_tslib","require","_floydWarshall","_interopRequireDefault","_gSpan","_dijkstra","_util","obj","__esModule","findKNeighborUnits","graphData","spm","nodeLabelProp","k","units","nodes","forEach","row","i","push","findKNeighborUnit","unitNodeIdxs","neighbors","labelCountMap","v","j","label","count","dists","keys","sort","a","b","nodeIdx","nodeId","id","nodeIdxs","neighborNum","length","nodeLabelCountMap","findNodePairsRandomly","nodeNum","maxNodePairNum","kNeighborUnits","nodePairNumEachNode","Math","ceil","nodePairMap","foundNodePairCount","unit","nodePairForICount","outerLoopCount","oidx","floor","random","innerLoopCount","start","end","distance","gap","getIntersectNeighborInducedGraph","neighborUnits","cachedInducedGraphMap","key","_a","_b","edges","pair","startUnitNodeIds","endUnitNodeIds","endSet","Set","intersect","filter","x","has","intersectIdMap","intersectLength","node","edge","source","target","getMatchedCount","graph","structure","edgeLabelProp","nodeMap","e","sourceLabel","targetLabel","strNodeLabel1","strNodeLabel2","strEdgeLabel","findRepresentStructure","matchedCountMap","structureNum","structures","maxOffset","Infinity","representClusterType","_loop_1","countMapI","sortedGraphKeys","groupNum","clusters","graphs","totalCount","aveCount","aveIntraDist","aveCounts","graphsInCluster","aveIntraPerCluster","graphsNum","graphKey1","graph1Count","graphKey2","abs","aveInterDist","aveCount1","aveCount2","offset","structureCountMap","getNodeMaps","nodeLabelMap","idx","degree","inDegree","outDegree","getEdgeMaps","edgeMap","edgeLabelMap","uniqueId","sourceNode","targetNode","getSpmMap","directed","map","iId","jId","dist","getNDSDist","node1","node2","spDist","cachedNDSMap","cachedInterInducedGraph","interInducedGraph","undefined","pairMap","stashPatternNodeLabelDegreeMap","minPatternNodeLabelDegreeMap","neighborLabel","patternNodeMap","patternNodeLabelMap","_c","minPatternNodeLabelDegree","minPatternNodeLabelInDegree","minPatternNodeLabelOutDegree","patternNodeWithLabel","patternNodeDegree","patternNodeInDegree","patternNodeOutDegree","GADDI","pattern","patternSpm","spmMap","patternSpmMap","patternEdgeLabelMap","patternSpmSpread","concat","max","apply","__spreadArray","patternKNeighborUnits","min","nodePairsMap","intGMap","top","minSupport","minNodeNum","maxNodeNum","params","freStructures","slice","subStructureCount","dsG","ndsDist","beginPNode","candidates","patternIntGraphMap","patternNDSDist","patternNDSDistMap","patternSpDist","patternSpDistBack","label2","maxDist","patternNodesWithLabel2","patternNodePairMap","nodeWithLabel2","distBack","currentPatternNDSDistArray","patternIntGraph","candidatesNum","_loop_4","m","cNode","graphNeighborUnit","graphNeighborUnitCountMap","patternLabel2Num","splice","prune2Invalid","n","cNodePairMap","neighborNode","currentNDSDistArray","intGraph","prune3Invalid","candidateGraphs","candidate","lengthNeighborUnit","neighborNodes","unmatched","distToCandidate","maxDistWithLabelInPattern","keyBack","distFromCandidate","maxBackDistWithLabelInPattern","ndsToCandidate","patternKey","minNdsWithLabelInPattern","undirectedLengthsToBeginPNode","undirectedLengthsToBeginPNodeLabelMap","nodeLabel","pLabel","candidateGraphNum","_loop_2","candidateGraph","candidateNodeLabelCountMap","candidateNodeMap","q","cNodeLabel","candidateEdges","edgeLabelCountMap","pattenrEdgeLabelNum","prunedByEdgeLabel","label_1","candidateEdgeNum","candidateGraphInvalid","_loop_5","edgeLabel","patternEdgesWithLabel","edgeMatched","patternEdge","patternSource","patternTarget","state_2","lengthsToCandidate","reverse","targetId","targetNodeLabel","indexOf","nLabel","degreeChanged","loopCount","condition","currentCandidateNodeNum","o","cgNode","nodeDegree","nodeInDegree","nodeOutDegree","_d","deleteCondition","y","cedge","state_1","currentLength","_loop_3","cg1","cg1EdgeMap","_loop_6","cg2","cg2EdgeMap","same","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _tslib = require(\"tslib\");\n\nvar _floydWarshall = _interopRequireDefault(require(\"./floydWarshall\"));\n\nvar _gSpan = _interopRequireDefault(require(\"./gSpan/gSpan\"));\n\nvar _dijkstra = _interopRequireDefault(require(\"./dijkstra\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * 为 graphData 中每个节点生成邻居单元数组\n * @param graphData\n * @param spm\n * @param nodeLabelProp\n * @param k k-近邻\n */\nvar findKNeighborUnits = function findKNeighborUnits(graphData, spm, nodeLabelProp, k) {\n  if (nodeLabelProp === void 0) {\n    nodeLabelProp = 'cluster';\n  }\n\n  if (k === void 0) {\n    k = 2;\n  }\n\n  var units = [];\n  var nodes = graphData.nodes;\n  spm.forEach(function (row, i) {\n    units.push(findKNeighborUnit(nodes, row, i, nodeLabelProp, k));\n  });\n  return units;\n};\n\nvar findKNeighborUnit = function findKNeighborUnit(nodes, row, i, nodeLabelProp, k) {\n  var unitNodeIdxs = [i];\n  var neighbors = [];\n  var labelCountMap = {};\n  row.forEach(function (v, j) {\n    if (v <= k && i !== j) {\n      unitNodeIdxs.push(j);\n      neighbors.push(nodes[j]);\n      var label = nodes[j][nodeLabelProp];\n      if (!labelCountMap[label]) labelCountMap[label] = {\n        count: 1,\n        dists: [v]\n      };else {\n        labelCountMap[label].count++;\n        labelCountMap[label].dists.push(v);\n      }\n    }\n  }); // 将 labelCountMap 中的 dists 按照从小到大排序，方便后面使用\n\n  Object.keys(labelCountMap).forEach(function (label) {\n    labelCountMap[label].dists = labelCountMap[label].dists.sort(function (a, b) {\n      return a - b;\n    });\n  });\n  return {\n    nodeIdx: i,\n    nodeId: nodes[i].id,\n    nodeIdxs: unitNodeIdxs,\n    neighbors: neighbors,\n    neighborNum: unitNodeIdxs.length - 1,\n    nodeLabelCountMap: labelCountMap\n  };\n};\n/**\n * 随机寻找点对，满足距离小于 k\n * @param k 参数 k，表示 k-近邻\n * @param nodeNum 参数 length\n * @param maxNodePairNum 寻找点对的数量不超过 maxNodePairNum\n * @param spm 最短路径矩阵\n */\n\n\nvar findNodePairsRandomly = function findNodePairsRandomly(k, nodeNum, maxNodePairNum, kNeighborUnits, spm) {\n  // 每个节点需要随机找出的点对数\n  var nodePairNumEachNode = Math.ceil(maxNodePairNum / nodeNum);\n  var nodePairMap = {};\n  var foundNodePairCount = 0; // 遍历节点，为每个节点随机找出 nodePairNumEachNode 个点对，满足距离小于 k。找到的点对数量超过 maxNodePairNum 或所有节点遍历结束时终止\n\n  kNeighborUnits.forEach(function (unit, i) {\n    // 若未达到 nodePairNumEachNode，或循环次数小于最大循环次数(2 * nodeNum)，继续循环\n    var nodePairForICount = 0;\n    var outerLoopCount = 0;\n    var neighbors = unit.nodeIdxs; // the first one is the center node\n\n    var neighborNum = unit.neighborNum - 1;\n\n    while (nodePairForICount < nodePairNumEachNode) {\n      // 另一端节点在节点数组中的的 index\n      var oidx = neighbors[1 + Math.floor(Math.random() * neighborNum)];\n      var innerLoopCount = 0; // 若随机得到的另一端 idx 不符合条件，则继续 random。条件是不是同一个节点、这个点对没有被记录过、距离小于 k\n\n      while (nodePairMap[i + \"-\" + oidx] || nodePairMap[oidx + \"-\" + i]) {\n        oidx = Math.floor(Math.random() * nodeNum);\n        innerLoopCount++;\n        if (innerLoopCount > 2 * nodeNum) break; // 循环次数大于最大循环次数(2 * nodeNum)跳出循环，避免死循环\n      }\n\n      if (innerLoopCount < 2 * nodeNum) {\n        // 未达到最大循环次数，说明找到了合适的另一端\n        nodePairMap[i + \"-\" + oidx] = {\n          start: i,\n          end: oidx,\n          distance: spm[i][oidx]\n        };\n        nodePairForICount++;\n        foundNodePairCount++; // 如果当前找到的点对数量达到了上限，返回结果\n\n        if (foundNodePairCount >= maxNodePairNum) return nodePairMap;\n      }\n\n      outerLoopCount++;\n      if (outerLoopCount > 2 * nodeNum) break; // 循环次数大于最大循环次数(2 * nodeNum)跳出循环，避免死循环\n    } // 这个节点没有找到足够 nodePairNumEachNode 的点对。更新 nodePairNumEachNode，让后续节点找更多的点对\n\n\n    if (nodePairForICount < nodePairNumEachNode) {\n      var gap = nodePairNumEachNode - nodePairForICount;\n      nodePairNumEachNode = (nodePairNumEachNode + gap) / (nodeNum - i - 1);\n    }\n  });\n  return nodePairMap;\n};\n/**\n * 计算所有 nodePairMap 中节点对的相交邻居诱导子图\n * @param nodePairMap 节点对 map，key 为 node1.id-node2.id，value 为 { startNodeIdx, endNodeIdx, distance }\n * @param neighborUnits 每个节点的邻居元数组\n * @param graphData 原图数据\n * @param edgeMap 边的 map，方便检索\n * @param cachedInducedGraphMap 缓存的结果，下次进入该函数将继续更新该缓存，若 key 在缓存中存在则不需要重复计算\n */\n\n\nvar getIntersectNeighborInducedGraph = function getIntersectNeighborInducedGraph(nodePairMap, neighborUnits, graphData, cachedInducedGraphMap) {\n  var nodes = graphData.nodes;\n  if (!cachedInducedGraphMap) cachedInducedGraphMap = {};\n  Object.keys(nodePairMap).forEach(function (key) {\n    var _a, _b;\n\n    if (cachedInducedGraphMap && cachedInducedGraphMap[key]) return;\n    cachedInducedGraphMap[key] = {\n      nodes: [],\n      edges: []\n    };\n    var pair = nodePairMap[key];\n    var startUnitNodeIds = (_a = neighborUnits[pair.start]) === null || _a === void 0 ? void 0 : _a.nodeIdxs;\n    var endUnitNodeIds = (_b = neighborUnits[pair.end]) === null || _b === void 0 ? void 0 : _b.nodeIdxs;\n    if (!startUnitNodeIds || !endUnitNodeIds) return; // 不存在邻元，返回空图\n\n    var endSet = new Set(endUnitNodeIds);\n    var intersect = startUnitNodeIds.filter(function (x) {\n      return endSet.has(x);\n    }); // 可能会爆栈（在 1580 + 6 nodes full-connected 时出现）\n\n    if (!intersect || !intersect.length) return; // 没有交集，返回空图\n\n    var intersectIdMap = {};\n    var intersectLength = intersect.length;\n\n    for (var i = 0; i < intersectLength; i++) {\n      var node = nodes[intersect[i]];\n      cachedInducedGraphMap[key].nodes.push(node); // 将交集中的点加入诱导子图\n\n      intersectIdMap[node.id] = true;\n    } // 遍历所有边数据，如果边的两端都在交集中，将该边加入诱导子图\n\n\n    graphData.edges.forEach(function (edge) {\n      if (intersectIdMap[edge.source] && intersectIdMap[edge.target]) cachedInducedGraphMap[key].edges.push(edge);\n    });\n  });\n  return cachedInducedGraphMap;\n};\n/**\n * 计算 strcutre 在 graph 上的匹配数量\n * @param graph 图数据\n * @param structure 目前支持只有两个节点一条边的最简单结构\n * @param nodeLabelProp 节点类型字段名\n * @param edgeLabelProp 边类型字段名\n */\n\n\nvar getMatchedCount = function getMatchedCount(graph, structure, nodeLabelProp, edgeLabelProp) {\n  var _a, _b;\n\n  var nodeMap = {};\n  graph.nodes.forEach(function (node) {\n    nodeMap[node.id] = node;\n  });\n  var count = 0;\n  if (!((_a = structure === null || structure === void 0 ? void 0 : structure.edges) === null || _a === void 0 ? void 0 : _a.length) || ((_b = structure === null || structure === void 0 ? void 0 : structure.nodes) === null || _b === void 0 ? void 0 : _b.length) < 2) return 0;\n  graph.edges.forEach(function (e) {\n    var sourceLabel = nodeMap[e.source][nodeLabelProp];\n    var targetLabel = nodeMap[e.target][nodeLabelProp];\n    var strNodeLabel1 = structure === null || structure === void 0 ? void 0 : structure.nodes[0][nodeLabelProp];\n    var strNodeLabel2 = structure === null || structure === void 0 ? void 0 : structure.nodes[1][nodeLabelProp];\n    var strEdgeLabel = structure === null || structure === void 0 ? void 0 : structure.edges[0][edgeLabelProp];\n    if (e[edgeLabelProp] !== strEdgeLabel) return;\n\n    if (sourceLabel === strNodeLabel1 && targetLabel === strNodeLabel2 || sourceLabel === strNodeLabel2 && targetLabel === strNodeLabel1) {\n      count++;\n    }\n  });\n  return count;\n};\n/**\n * structures 中寻找最具有代表性的一个。这个结构是使得 matchedCountMap 的分组方式类内间距最小，类间间距最大\n * @param matchedCountMap 每个 structure 分类后的各图匹配数量，格式 { [strcture.idx]: { [interInducedGraphKey]: count } }\n * @param structureNum strcuture 个数，与 matchedCountMap.length 对应\n * @param structures\n */\n\n\nvar findRepresentStructure = function findRepresentStructure(matchedCountMap, structureNum, structures) {\n  var maxOffset = Infinity,\n      representClusterType = 0;\n\n  var _loop_1 = function _loop_1(i) {\n    // 一种分组的 map，key 是 intGraph 的 key，value 是 structures[i] 的匹配个数\n    var countMapI = matchedCountMap[i]; // 按照 value 为该组排序，生成 keys 的数组：\n\n    var sortedGraphKeys = Object.keys(countMapI).sort(function (a, b) {\n      return countMapI[a] - countMapI[b];\n    }); // 共 100 个 graphKeys，将 graphKeys 按顺序分为 groupNum 组\n\n    var groupNum = 10;\n    var clusters = []; // 总共有 groupNum 个项\n\n    sortedGraphKeys.forEach(function (key, j) {\n      if (!clusters[j % groupNum]) clusters[j % groupNum] = {\n        graphs: [],\n        totalCount: 0,\n        aveCount: 0\n      };\n      clusters[j % groupNum].graphs.push(key);\n      clusters[j % groupNum].totalCount += countMapI[key];\n    }); // 计算 cluster 与 cluster 之间的距离 innerDist，每个 cluster 内部的距离 intraDist\n\n    var aveIntraDist = 0; // 该类的类内平均值\n\n    var aveCounts = []; // 类内平均匹配数量，将用于计算类间距离\n\n    clusters.forEach(function (graphsInCluster) {\n      // 类内均值\n      var aveCount = graphsInCluster.totalCount / graphsInCluster.graphs.length;\n      graphsInCluster.aveCount = aveCount;\n      aveCounts.push(aveCount); // 对于每类，计算类内间距平均值\n\n      var aveIntraPerCluster = 0;\n      var graphsNum = graphsInCluster.length;\n      graphsInCluster.graphs.forEach(function (graphKey1, j) {\n        var graph1Count = countMapI[graphKey1];\n        graphsInCluster.graphs.forEach(function (graphKey2, k) {\n          if (j === k) return;\n          aveIntraPerCluster += Math.abs(graph1Count - countMapI[graphKey2]);\n        });\n      });\n      aveIntraPerCluster /= graphsNum * (graphsNum - 1) / 2;\n      aveIntraDist += aveIntraPerCluster;\n    });\n    aveIntraDist /= clusters.length; // 用类内均值计算类间距\n\n    var aveInterDist = 0; // 类间间距平均值\n\n    aveCounts.forEach(function (aveCount1, j) {\n      aveCounts.forEach(function (aveCount2, k) {\n        if (j === k) return;\n        aveInterDist += Math.abs(aveCount1 - aveCount2);\n      });\n      aveInterDist /= aveCounts.length * (aveCounts.length - 1) / 2;\n    }); // 寻找 (类间间距均值-类内间距均值) 最大的一种分组方式（对应的 structure 就是最终要找的唯一 DS(G)）\n\n    var offset = aveInterDist - aveIntraDist;\n\n    if (maxOffset < offset) {\n      maxOffset = offset;\n      representClusterType = i;\n    }\n  };\n\n  for (var i = 0; i < structureNum; i++) {\n    _loop_1(i);\n  }\n\n  return {\n    structure: structures[representClusterType],\n    structureCountMap: matchedCountMap[representClusterType]\n  };\n};\n\nvar getNodeMaps = function getNodeMaps(nodes, nodeLabelProp) {\n  var nodeMap = {},\n      nodeLabelMap = {};\n  nodes.forEach(function (node, i) {\n    nodeMap[node.id] = {\n      idx: i,\n      node: node,\n      degree: 0,\n      inDegree: 0,\n      outDegree: 0\n    };\n    var label = node[nodeLabelProp];\n    if (!nodeLabelMap[label]) nodeLabelMap[label] = [];\n    nodeLabelMap[label].push(node);\n  });\n  return {\n    nodeMap: nodeMap,\n    nodeLabelMap: nodeLabelMap\n  };\n};\n\nvar getEdgeMaps = function getEdgeMaps(edges, edgeLabelProp, nodeMap) {\n  var edgeMap = {},\n      edgeLabelMap = {};\n  edges.forEach(function (edge, i) {\n    edgeMap[\"\" + _util.uniqueId] = {\n      idx: i,\n      edge: edge\n    };\n    var label = edge[edgeLabelProp];\n    if (!edgeLabelMap[label]) edgeLabelMap[label] = [];\n    edgeLabelMap[label].push(edge);\n    var sourceNode = nodeMap[edge.source];\n\n    if (sourceNode) {\n      sourceNode.degree++;\n      sourceNode.outDegree++;\n    }\n\n    var targetNode = nodeMap[edge.target];\n\n    if (targetNode) {\n      targetNode.degree++;\n      targetNode.inDegree++;\n    }\n  });\n  return {\n    edgeMap: edgeMap,\n    edgeLabelMap: edgeLabelMap\n  };\n};\n/**\n * 输出最短路径的 map，key 为 sourceNode.id-targetNode.id，value 为这两个节点的最短路径长度\n * @param nodes\n * @param spm\n * @param directed\n */\n\n\nvar getSpmMap = function getSpmMap(nodes, spm, directed) {\n  var length = spm.length;\n  var map = {};\n  spm.forEach(function (row, i) {\n    var start = directed ? 0 : i + 1;\n    var iId = nodes[i].id;\n\n    for (var j = start; j < length; j++) {\n      if (i === j) continue;\n      var jId = nodes[j].id;\n      var dist = row[j];\n      map[iId + \"-\" + jId] = dist;\n      if (!directed) map[jId + \"-\" + iId] = dist;\n    }\n  });\n  return map;\n};\n/**\n * 计算一对节点（node1，node2）的 NDS 距离\n * @param graph 原图数据\n * @param node1\n * @param node2\n */\n\n\nvar getNDSDist = function getNDSDist(graph, node1, node2, nodeMap, spDist, kNeighborUnits, structure, nodeLabelProp, edgeLabelProp, cachedNDSMap, cachedInterInducedGraph) {\n  var _a;\n\n  var key = node1.id + \"-\" + node2.id;\n  if (cachedNDSMap && cachedNDSMap[key]) return cachedNDSMap[key];\n  var interInducedGraph = cachedInterInducedGraph ? cachedInterInducedGraph[key] : undefined; // 若没有缓存相交邻居诱导子图，计算\n\n  if (!interInducedGraph) {\n    var pairMap = (_a = {}, _a[key] = {\n      start: nodeMap[node1.id].idx,\n      end: nodeMap[node2.id].idx,\n      distance: spDist\n    }, _a);\n    cachedInterInducedGraph = getIntersectNeighborInducedGraph(pairMap, kNeighborUnits, graph, cachedInterInducedGraph);\n    interInducedGraph = cachedInterInducedGraph[key];\n  }\n\n  return getMatchedCount(interInducedGraph, structure, nodeLabelProp, edgeLabelProp);\n};\n/**\n * 计算 pattern 上绩点的度数并存储到 minPatternNodeLabelDegreeMap\n */\n\n\nvar stashPatternNodeLabelDegreeMap = function stashPatternNodeLabelDegreeMap(minPatternNodeLabelDegreeMap, neighborLabel, patternNodeMap, patternNodeLabelMap) {\n  var _a, _b, _c;\n\n  var minPatternNodeLabelDegree = (_a = minPatternNodeLabelDegreeMap[neighborLabel]) === null || _a === void 0 ? void 0 : _a.degree;\n  var minPatternNodeLabelInDegree = (_b = minPatternNodeLabelDegreeMap[neighborLabel]) === null || _b === void 0 ? void 0 : _b.inDegree;\n  var minPatternNodeLabelOutDegree = (_c = minPatternNodeLabelDegreeMap[neighborLabel]) === null || _c === void 0 ? void 0 : _c.outDegree;\n\n  if (minPatternNodeLabelDegreeMap[neighborLabel] === undefined) {\n    minPatternNodeLabelDegree = Infinity;\n    minPatternNodeLabelInDegree = Infinity;\n    minPatternNodeLabelOutDegree = Infinity;\n    patternNodeLabelMap[neighborLabel].forEach(function (patternNodeWithLabel) {\n      var patternNodeDegree = patternNodeMap[patternNodeWithLabel.id].degree;\n      if (minPatternNodeLabelDegree > patternNodeDegree) minPatternNodeLabelDegree = patternNodeDegree;\n      var patternNodeInDegree = patternNodeMap[patternNodeWithLabel.id].inDegree;\n      if (minPatternNodeLabelInDegree > patternNodeInDegree) minPatternNodeLabelInDegree = patternNodeInDegree;\n      var patternNodeOutDegree = patternNodeMap[patternNodeWithLabel.id].outDegree;\n      if (minPatternNodeLabelOutDegree > patternNodeOutDegree) minPatternNodeLabelOutDegree = patternNodeOutDegree;\n    });\n    minPatternNodeLabelDegreeMap[neighborLabel] = {\n      degree: minPatternNodeLabelDegree,\n      inDegree: minPatternNodeLabelInDegree,\n      outDegree: minPatternNodeLabelOutDegree\n    };\n  }\n\n  return {\n    minPatternNodeLabelDegree: minPatternNodeLabelDegree,\n    minPatternNodeLabelInDegree: minPatternNodeLabelInDegree,\n    minPatternNodeLabelOutDegree: minPatternNodeLabelOutDegree\n  };\n};\n/**\n * GADDI 模式匹配\n * @param graphData 原图数据\n * @param pattern 搜索图（需要在原图上搜索的模式）数据\n * @param directed 是否计算有向图，默认 false\n * @param k 参数 k，表示 k-近邻\n * @param length 参数 length\n * @param nodeLabelProp 节点数据中代表节点标签（分类信息）的属性名。默认为 cluster\n * @param edgeLabelProp 边数据中代表边标签（分类信息）的属性名。默认为 cluster\n */\n\n\nvar GADDI = function GADDI(graphData, pattern, directed, k, length, nodeLabelProp, edgeLabelProp) {\n  if (directed === void 0) {\n    directed = false;\n  }\n\n  if (nodeLabelProp === void 0) {\n    nodeLabelProp = 'cluster';\n  }\n\n  if (edgeLabelProp === void 0) {\n    edgeLabelProp = 'cluster';\n  }\n\n  if (!graphData || !graphData.nodes) return; // 分为三步：\n  // 0. 预计算：节点/边数，邻接矩阵、最短路径矩阵\n  // 1. 处理原图 graphData。再分为 1~5 小步\n  // 2. 匹配\n  // console.log(\"----- stage-pre: preprocessing -------\");\n  // -------- 第零步，预计算：节点/边数，邻接矩阵、最短路径矩阵-------\n\n  var nodeNum = graphData.nodes.length;\n  if (!nodeNum) return; // console.log(\"----- stage-pre.1: calc shortest path matrix for graph -------\");\n\n  var spm = (0, _floydWarshall.default)(graphData, directed); // console.log(\n  //   \"----- stage-pre.2: calc shortest path matrix for pattern -------\"\n  // );\n\n  var patternSpm = (0, _floydWarshall.default)(pattern, directed); // console.log(\n  //   \"----- stage-pre.3: calc shortest path matrix map for graph -------\"\n  // );\n\n  var spmMap = getSpmMap(graphData.nodes, spm, directed); // console.log(\n  //   \"----- stage-pre.4: calc shortest path matrix map for pattern -------\"\n  // );\n\n  var patternSpmMap = getSpmMap(pattern.nodes, patternSpm, directed); // console.log(\"----- stage-pre.5: establish maps -------\");\n  // 节点的 map，以 id 为 id 映射，方便后续快速检索\n\n  var _a = getNodeMaps(graphData.nodes, nodeLabelProp),\n      nodeMap = _a.nodeMap,\n      nodeLabelMap = _a.nodeLabelMap;\n\n  var _b = getNodeMaps(pattern.nodes, nodeLabelProp),\n      patternNodeMap = _b.nodeMap,\n      patternNodeLabelMap = _b.nodeLabelMap; // 计算节点度数\n\n\n  getEdgeMaps(graphData.edges, edgeLabelProp, nodeMap);\n  var patternEdgeLabelMap = getEdgeMaps(pattern.edges, edgeLabelProp, patternNodeMap).edgeLabelMap; // 若未指定 length，自动计算 pattern 半径（最短路径最大值）\n\n  var patternSpmSpread = [];\n  patternSpm === null || patternSpm === void 0 ? void 0 : patternSpm.forEach(function (row) {\n    patternSpmSpread = patternSpmSpread.concat(row);\n  });\n  if (!length) length = Math.max.apply(Math, (0, _tslib.__spreadArray)((0, _tslib.__spreadArray)([], patternSpmSpread), [2]));\n  if (!k) k = length; // console.log(\"params\", directed, length, k);\n  // console.log(\"----- stage-pre.6: calc k neighbor units -------\");\n  // 计算每个节点的 k 邻元集合\n\n  var kNeighborUnits = findKNeighborUnits(graphData, spm, nodeLabelProp, k);\n  var patternKNeighborUnits = findKNeighborUnits(pattern, patternSpm, nodeLabelProp, k); // console.log(\n  //   \"----- stage0: going to processing graph and find intersect neighbor induced graphs -------\"\n  // );\n  // console.log(\"----- stage0.1: going to select random node pairs -------\");\n  // -------- 第一步，处理原图 graphData-------\n  // 1.1. 随机选择最多 100 个点对，满足距离小于 Length 和 k\n  // 当 graphData 少于 20 个节点，则不能找出 100 个点对，只找出不多于 n(n-1)/2 个点对\n\n  var maxNodePairNum = Math.min(100, nodeNum * (nodeNum - 1) / 2);\n  var nodePairsMap = findNodePairsRandomly(k, nodeNum, maxNodePairNum, patternKNeighborUnits, spm); // console.log(\n  //   \"----- stage0.2: going to calculate intersect neighbor induced graphs -------\"\n  // );\n  // 1.2. 生成上面节点对的相应相交邻居诱导子图。格式为 {'beginNodeIdx-endNodeIdx': {nodes: [], edges: []}}\n\n  var intGMap = getIntersectNeighborInducedGraph(nodePairsMap, kNeighborUnits, graphData); // 1.3. 使用 gSpan 算法（frequent graph mining）计算 ISIntG 的前 10 个频率最高的子结构（3-4条边）\n\n  var top = 10,\n      minSupport = 1,\n      minNodeNum = 1,\n      maxNodeNum = 4;\n  var params = {\n    graphs: intGMap,\n    nodeLabelProp: nodeLabelProp,\n    edgeLabelProp: edgeLabelProp,\n    minSupport: minSupport,\n    minNodeNum: minNodeNum,\n    maxNodeNum: maxNodeNum,\n    directed: directed\n  }; // console.log(\n  //   \"----- stage1: (gSpan) going to find frequent structure dsG -------\"\n  // );\n  // console.log(\"----- stage1.1: going to run gSpan -------\");\n  // 暂时假设生成的 sub structure 都只有一条边\n\n  var freStructures = (0, _gSpan.default)(params).slice(0, top); // structureNum 可能小于 top\n\n  var structureNum = freStructures.length; // 1.4. 计算上述 10 个子结构在 intGMap 中每个诱导子图的匹配个数\n\n  var matchedCountMap = [];\n  freStructures.forEach(function (structure, i) {\n    matchedCountMap[i] = {};\n    Object.keys(intGMap).forEach(function (key) {\n      var graph = intGMap[key];\n      var subStructureCount = getMatchedCount(graph, structure, nodeLabelProp, edgeLabelProp);\n      matchedCountMap[i][key] = subStructureCount;\n    });\n  }); // console.log(\n  //   \"----- stage1.1: going to find the most represent strucutre -------\"\n  // );\n  // 1.5. 对于每个子结构，根据匹配个数为 intGMap 中的诱导子图分组，生成 structureNum 种分组\n  // 计算每种分组的类间距和类内间距，找到类间距最大、类内间距最小的一种分组，这种分组对应的子结构被选为唯一代表性子结构 DS(G)\n\n  var _c = findRepresentStructure(matchedCountMap, structureNum, freStructures),\n      dsG = _c.structure,\n      ndsDist = _c.structureCountMap; // -------- 第二步，匹配-------\n  // 2.1 从 Q 中的第一个标签的第一个节点开始，寻找 G 中的匹配\n\n\n  var beginPNode = pattern.nodes[0];\n  var label = beginPNode[nodeLabelProp]; // 2.1.1 找到 G 中标签与之相同的节点\n\n  var candidates = nodeLabelMap[label]; // console.log(\"----- stage2: going to find candidates -------\");\n  // 全局缓存，避免重复计算\n\n  var minPatternNodeLabelDegreeMap = {}; // key 是 label，value 是该 label 节点的最小度数\n\n  var patternIntGraphMap = {},\n      patternNDSDist = {},\n      // key 为 node.id-node.id\n  patternNDSDistMap = {}; // key 为 node.id-label2，value nds距离值数组（按从大到小排序，无需关心具体对应哪个 node2）\n  // 2.2.2 对于 Q 中的另一个标签的 k 个节点，计算它们到 node 的最短路径以及 NDS 距离\n\n  var patternSpDist = {};\n  var patternSpDistBack = {};\n  Object.keys(patternNodeLabelMap).forEach(function (label2, j) {\n    patternSpDist[label2] = [];\n\n    if (directed) {\n      patternSpDistBack[label2] = [];\n    }\n\n    var maxDist = -Infinity;\n    var patternNodesWithLabel2 = patternNodeLabelMap[label2];\n    var patternNodePairMap = {};\n    patternNodesWithLabel2.forEach(function (nodeWithLabel2) {\n      var dist = patternSpmMap[beginPNode.id + \"-\" + nodeWithLabel2.id];\n      dist && patternSpDist[label2].push(dist);\n      if (maxDist < dist) maxDist = dist;\n      patternNodePairMap[beginPNode.id + \"-\" + nodeWithLabel2.id] = {\n        start: 0,\n        end: patternNodeMap[nodeWithLabel2.id].idx,\n        distance: dist\n      };\n\n      if (directed) {\n        var distBack = patternSpmMap[nodeWithLabel2.id + \"-\" + beginPNode.id];\n        distBack && patternSpDistBack[label2].push(distBack);\n      }\n    }); // spDist[label2] 按照从小到大排序\n\n    patternSpDist[label2] = patternSpDist[label2].sort(function (a, b) {\n      return a - b;\n    });\n    if (directed) patternSpDistBack[label2] = patternSpDistBack[label2].sort(function (a, b) {\n      return a - b;\n    }); // 计算 Q 中所有 label2 节点到 beginPNode 的 NDS 距离\n    // 所有 label2 节点到 beginPNode 的邻居相交诱导子图：\n    // key: node1.id-node2.id\n\n    patternIntGraphMap = getIntersectNeighborInducedGraph(patternNodePairMap, patternKNeighborUnits, pattern, patternIntGraphMap); // pattern 中 beginNode 到当前 label2 节点 的 NDS 距离（数组，无需关心具体对应到哪个节点）\n\n    var currentPatternNDSDistArray = [];\n    Object.keys(patternNodePairMap).forEach(function (key) {\n      if (patternNDSDist[key]) {\n        currentPatternNDSDistArray.push(patternNDSDist[key]);\n        return; // 缓存过则不需要再次计算\n      }\n\n      var patternIntGraph = patternIntGraphMap[key];\n      patternNDSDist[key] = getMatchedCount(patternIntGraph, dsG, nodeLabelProp, edgeLabelProp);\n      currentPatternNDSDistArray.push(patternNDSDist[key]);\n    }); // 根据值为 currentPatternNDSDist 从大到小排序\n\n    currentPatternNDSDistArray = currentPatternNDSDistArray.sort(function (a, b) {\n      return b - a;\n    });\n    patternNDSDistMap[beginPNode.id + \"-\" + label2] = currentPatternNDSDistArray;\n    if (label2 === label) return;\n    var candidatesNum = candidates.length;\n\n    var _loop_4 = function _loop_4(m) {\n      var cNode = candidates[m]; // prune1：若 candidates 中节点 cNode 的 kNeighborUnits 中标签为 label2 的节点个数少于 pattern 中 label2 个数，删去它\n\n      var graphNeighborUnit = kNeighborUnits[nodeMap[cNode.id].idx];\n      var graphNeighborUnitCountMap = graphNeighborUnit.nodeLabelCountMap[label2];\n      var patternLabel2Num = patternNodeLabelMap[label2].length;\n\n      if (!graphNeighborUnitCountMap || graphNeighborUnitCountMap.count < patternLabel2Num) {\n        candidates.splice(m, 1);\n        return \"continue\";\n      } // prune2：若 candidates 中节点 cNode 到 kNeighborUnits 中标签为 label2 的节点最短路径大于 patternSpDist[label2]，删去它\n      // (prune2 规则即：candidate 相关的最短路径的最大 spDist[label2].length 个，按照大小顺序依次和 patternSpDist[label2] 中的值比较，只要遇到一个是 G > Q 的，就删去这个 candidate)\n\n\n      var prune2Invalid = false;\n\n      for (var n = 0; n < patternLabel2Num; n++) {\n        if (graphNeighborUnitCountMap.dists[n] > patternSpDist[label2][n]) {\n          prune2Invalid = true;\n          break;\n        }\n      }\n\n      if (prune2Invalid) {\n        candidates.splice(m, 1);\n        return \"continue\";\n      } // prune3：若 candidates 中节点 cNode 到 kNeighborUnits 中标签为 label2 的节点 NDS 距离小于 patternNDSDist[beginNode.id-label2]，删去它\n      // TODO：prune3，currentPatternNDSDistArray 与 currentNDSDist 的比较\n      // 计算 G 中所有 label2 节点到 cNode 的 NDS 距离\n      // 所有 label2 节点到 cNode 的邻居相交诱导子图：\n\n\n      var cNodePairMap = {};\n      graphNeighborUnit.neighbors.forEach(function (neighborNode) {\n        var dist = spmMap[cNode.id + \"-\" + neighborNode.id];\n        cNodePairMap[cNode.id + \"-\" + neighborNode.id] = {\n          start: nodeMap[cNode.id].idx,\n          end: nodeMap[neighborNode.id].idx,\n          distance: dist\n        };\n      }); // 更新 intGMap\n\n      intGMap = getIntersectNeighborInducedGraph(cNodePairMap, kNeighborUnits, graphData, intGMap); // candidate 到它周围 label2 节点的 NDS 距离, key 是 node.id-node.id\n\n      var currentNDSDistArray = [];\n      Object.keys(cNodePairMap).forEach(function (key) {\n        if (ndsDist[key]) {\n          currentNDSDistArray.push(ndsDist[key]);\n          return; // 缓存过则不需要再次计算\n        }\n\n        var intGraph = intGMap[key];\n        ndsDist[key] = getMatchedCount(intGraph, dsG, nodeLabelProp, edgeLabelProp);\n        currentNDSDistArray.push(ndsDist[key]);\n      }); // 根据值为 currentNDSDistArray 从大到小排序\n\n      currentNDSDistArray = currentNDSDistArray.sort(function (a, b) {\n        return b - a;\n      });\n      var prune3Invalid = false;\n\n      for (var n = 0; n < patternLabel2Num; n++) {\n        if (currentNDSDistArray[n] < currentPatternNDSDistArray[n]) {\n          prune3Invalid = true;\n          break;\n        }\n      }\n\n      if (prune3Invalid) {\n        candidates.splice(m, 1);\n        return \"continue\";\n      }\n    };\n\n    for (var m = candidatesNum - 1; m >= 0; m--) {\n      _loop_4(m);\n    }\n  });\n  var candidateGraphs = []; // console.log(\n  //   \"----- stage3: going to splice neighbors for each candidate graph -------\"\n  // );\n  // candidates 经过筛选后，以每个 candidate 为中心，生成 Length-neighbor 的邻居诱导子图\n  // 并在诱导子图中去除不可能在 Q 上找到匹配的点：在 Q 上不存在的 label，其他 label 到 candidate 的最大最短距离符合 Q、NDS 距离符合 Q\n\n  candidates === null || candidates === void 0 ? void 0 : candidates.forEach(function (candidate) {\n    var nodeIdx = nodeMap[candidate.id].idx;\n    var lengthNeighborUnit = findKNeighborUnit(graphData.nodes, spm[nodeIdx], nodeIdx, nodeLabelProp, length);\n    var neighborNodes = lengthNeighborUnit.neighbors; // 删除不可能找到匹配的邻居点\n\n    var neighborNum = neighborNodes.length;\n    var unmatched = false;\n\n    for (var i = neighborNum - 1; i >= 0; i--) {\n      // 如果通过裁剪，符合条件的节点数量已过少，说明不能匹配这个 candidate 相关的图\n      if (neighborNodes.length + 1 < pattern.nodes.length) {\n        unmatched = true;\n        return;\n      }\n\n      var neighborNode = neighborNodes[i];\n      var neighborLabel = neighborNode[nodeLabelProp]; // prune1: 若该邻居点的 label 不存在于 pattern 中，移除这个点\n\n      if (!patternNodeLabelMap[neighborLabel] || !patternNodeLabelMap[neighborLabel].length) {\n        neighborNodes.splice(i, 1);\n        continue;\n      } // prune2: 若该邻居点到 candidate 的最短路径比和它有相同 label 的节点到 beginPNode 的最大最短路径长度长，移除这个点\n      // prune2.1: 如果没有这个标签到 beginPNode 的距离记录，说明 pattern 上（可能 beginPNode 是这个 label）没有其他这个 label 的节点\n\n\n      if (!patternSpDist[neighborLabel] || !patternSpDist[neighborLabel].length) {\n        neighborNodes.splice(i, 1);\n        continue;\n      }\n\n      var key = candidate.id + \"-\" + neighborNode.id; // prune2.2\n\n      var distToCandidate = spmMap[key];\n      var idx = patternSpDist[neighborLabel].length - 1;\n      var maxDistWithLabelInPattern = patternSpDist[neighborLabel][idx]; // patternSpDist[neighborLabel] 已经按照从小到大排序\n\n      if (distToCandidate > maxDistWithLabelInPattern) {\n        neighborNodes.splice(i, 1);\n        continue;\n      }\n\n      if (directed) {\n        var keyBack = neighborNode.id + \"-\" + candidate.id;\n        var distFromCandidate = spmMap[keyBack];\n        idx = patternSpDistBack[neighborLabel].length - 1;\n        var maxBackDistWithLabelInPattern = patternSpDistBack[neighborLabel][idx];\n\n        if (distFromCandidate > maxBackDistWithLabelInPattern) {\n          neighborNodes.splice(i, 1);\n          continue;\n        }\n      } // prune3: 若该邻居点到 candidate 的 NDS 距离比和它有相同 label 的节点到 beginPNode 的最小 NDS 距离小，移除这个点\n\n\n      var ndsToCandidate = ndsDist[key] ? ndsDist[key] : getNDSDist(graphData, candidate, neighborNode, nodeMap, distToCandidate, kNeighborUnits, dsG, nodeLabelProp, edgeLabelProp, ndsDist, intGMap);\n      var patternKey = beginPNode.id + \"-\" + neighborLabel;\n      var minNdsWithLabelInPattern = patternNDSDistMap[patternKey][patternNDSDistMap[patternKey].length - 1]; // patternNDSDist[key] 一定存在\n\n      if (ndsToCandidate < minNdsWithLabelInPattern) {\n        neighborNodes.splice(i, 1);\n        continue;\n      } // prune4: 若该邻居点的度数小于 pattern 同 label 节点最小度数，删去该点\n\n\n      var _a = stashPatternNodeLabelDegreeMap(minPatternNodeLabelDegreeMap, neighborLabel, patternNodeMap, patternNodeLabelMap),\n          minPatternNodeLabelDegree = _a.minPatternNodeLabelDegree,\n          minPatternNodeLabelInDegree = _a.minPatternNodeLabelInDegree,\n          minPatternNodeLabelOutDegree = _a.minPatternNodeLabelOutDegree;\n\n      if (nodeMap[neighborNode.id].degree < minPatternNodeLabelDegree) {\n        neighborNodes.splice(i, 1);\n        continue;\n      }\n    } // 节点在个数上符合匹配（不少于 pattern 的节点个数），现在筛选相关边\n\n\n    if (!unmatched) {\n      candidateGraphs.push({\n        nodes: [candidate].concat(neighborNodes)\n      });\n    }\n  }); // console.log(\n  //   \"----- stage4: going to splice edges and neighbors for each candidate graph -------\"\n  // );\n\n  var undirectedLengthsToBeginPNode = (0, _dijkstra.default)(pattern, beginPNode.id, false).length;\n  var undirectedLengthsToBeginPNodeLabelMap = {};\n\n  if (directed) {\n    Object.keys(undirectedLengthsToBeginPNode).forEach(function (nodeId) {\n      var nodeLabel = patternNodeMap[nodeId].node[nodeLabelProp];\n      if (!undirectedLengthsToBeginPNodeLabelMap[nodeLabel]) undirectedLengthsToBeginPNodeLabelMap[nodeLabel] = [undirectedLengthsToBeginPNode[nodeId]];else undirectedLengthsToBeginPNodeLabelMap[nodeLabel].push(undirectedLengthsToBeginPNode[nodeId]);\n    });\n    Object.keys(undirectedLengthsToBeginPNodeLabelMap).forEach(function (pLabel) {\n      undirectedLengthsToBeginPNodeLabelMap[pLabel].sort(function (a, b) {\n        return a - b;\n      });\n    });\n  } else {\n    undirectedLengthsToBeginPNodeLabelMap = patternSpDist;\n  } // 现在 candidateGraphs 里面只有节点，进行边的筛选\n\n\n  var candidateGraphNum = candidateGraphs.length;\n\n  var _loop_2 = function _loop_2(i) {\n    var candidateGraph = candidateGraphs[i];\n    var candidate = candidateGraph.nodes[0];\n    var candidateNodeLabelCountMap = {};\n    var candidateNodeMap = {};\n    candidateGraph.nodes.forEach(function (node, q) {\n      candidateNodeMap[node.id] = {\n        idx: q,\n        node: node,\n        degree: 0,\n        inDegree: 0,\n        outDegree: 0\n      };\n      var cNodeLabel = node[nodeLabelProp];\n      if (!candidateNodeLabelCountMap[cNodeLabel]) candidateNodeLabelCountMap[cNodeLabel] = 1;else candidateNodeLabelCountMap[cNodeLabel]++;\n    }); // 根据 candidate 和 neighborNodes 中的节点生成 G 的诱导子图\n    // 即，将 graphData 上两端都在 candidateGraph.nodes 中的边放入 candidateEdges\n\n    var candidateEdges = [];\n    var edgeLabelCountMap = {};\n    graphData.edges.forEach(function (edge) {\n      if (candidateNodeMap[edge.source] && candidateNodeMap[edge.target]) {\n        candidateEdges.push(edge);\n        if (!edgeLabelCountMap[edge[edgeLabelProp]]) edgeLabelCountMap[edge[edgeLabelProp]] = 1;else edgeLabelCountMap[edge[edgeLabelProp]]++;\n        candidateNodeMap[edge.source].degree++;\n        candidateNodeMap[edge.target].degree++;\n        candidateNodeMap[edge.source].outDegree++;\n        candidateNodeMap[edge.target].inDegree++;\n      }\n    }); // prune：若有一个 edgeLabel 在 candidateGraph 上的个数少于 pattern，去除该图\n\n    var pattenrEdgeLabelNum = Object.keys(patternEdgeLabelMap).length;\n    var prunedByEdgeLabel = false;\n\n    for (var e = 0; e < pattenrEdgeLabelNum; e++) {\n      var label_1 = Object.keys(patternEdgeLabelMap)[e];\n\n      if (!edgeLabelCountMap[label_1] || edgeLabelCountMap[label_1] < patternEdgeLabelMap[label_1].length) {\n        prunedByEdgeLabel = true;\n        break;\n      }\n    }\n\n    if (prunedByEdgeLabel) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    } // 遍历 candidateEdges，进行边的筛选\n\n\n    var candidateEdgeNum = candidateEdges.length; // prune：若边数过少，去除该图\n\n    if (candidateEdgeNum < pattern.edges.length) {\n      candidateGraphs.splice(i, 1);\n      return \"break\";\n    }\n\n    var candidateGraphInvalid = false;\n\n    var _loop_5 = function _loop_5(e) {\n      var edge = candidateEdges[e];\n      var edgeLabel = edge[edgeLabelProp];\n      var patternEdgesWithLabel = patternEdgeLabelMap[edgeLabel]; // prune 1: 若边的 label 不存在于 pattern 边 label 中，去除该边\n\n      if (!patternEdgesWithLabel || !patternEdgesWithLabel.length) {\n        edgeLabelCountMap[edgeLabel]--; // 若这个 label 的 count 减少之后，该 label 的边数不足，去除该图\n\n        if (patternEdgesWithLabel && edgeLabelCountMap[edgeLabel] < patternEdgesWithLabel.length) {\n          candidateGraphInvalid = true;\n          return \"break\";\n        }\n\n        candidateEdges.splice(e, 1);\n        candidateNodeMap[edge.source].degree--;\n        candidateNodeMap[edge.target].degree--;\n        candidateNodeMap[edge.source].outDegree--;\n        candidateNodeMap[edge.target].inDegree--;\n        return \"continue\";\n      } // prune 2: 若边的 label +两端 label 的三元组关系不能在 pattern 中找到，去除该边\n\n\n      var sourceLabel = candidateNodeMap[edge.source].node[nodeLabelProp];\n      var targetLabel = candidateNodeMap[edge.target].node[nodeLabelProp];\n      var edgeMatched = false;\n      patternEdgesWithLabel.forEach(function (patternEdge) {\n        var patternSource = patternNodeMap[patternEdge.source].node;\n        var patternTarget = patternNodeMap[patternEdge.target].node;\n        if (patternSource[nodeLabelProp] === sourceLabel && patternTarget[nodeLabelProp] === targetLabel) edgeMatched = true;\n        if (!directed && patternSource[nodeLabelProp] === targetLabel && patternTarget[nodeLabelProp] === sourceLabel) edgeMatched = true;\n      });\n\n      if (!edgeMatched) {\n        edgeLabelCountMap[edgeLabel]--; // 若这个 label 的 count 减少之后，该 label 的边数不足，去除该图\n\n        if (patternEdgesWithLabel && edgeLabelCountMap[edgeLabel] < patternEdgesWithLabel.length) {\n          candidateGraphInvalid = true;\n          return \"break\";\n        }\n\n        candidateEdges.splice(e, 1);\n        candidateNodeMap[edge.source].degree--;\n        candidateNodeMap[edge.target].degree--;\n        candidateNodeMap[edge.source].outDegree--;\n        candidateNodeMap[edge.target].inDegree--;\n        return \"continue\";\n      }\n    };\n\n    for (var e = candidateEdgeNum - 1; e >= 0; e--) {\n      var state_2 = _loop_5(e);\n\n      if (state_2 === \"break\") break;\n    } // prune2: 删除边的过程中，发现边数过少/边 label 数过少时，去除该图\n\n\n    if (candidateGraphInvalid) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    }\n\n    candidateGraph.edges = candidateEdges;\n    var lengthsToCandidate = (0, _dijkstra.default)(candidateGraph, candidateGraph.nodes[0].id, false).length;\n    Object.keys(lengthsToCandidate).reverse().forEach(function (targetId) {\n      if (targetId === candidateGraph.nodes[0].id || candidateGraphInvalid) return; // prune4: 通过上述裁剪，可能导致该邻居子图变为不连通。裁剪掉目前在这个邻居子图中和 candidate（第一个节点）不连通的节点\n\n      if (lengthsToCandidate[targetId] === Infinity) {\n        var targetNodeLabel = candidateNodeMap[targetId].node[nodeLabelProp];\n        candidateNodeLabelCountMap[targetNodeLabel]--;\n\n        if (candidateNodeLabelCountMap[targetNodeLabel] < patternNodeLabelMap[targetNodeLabel].length) {\n          candidateGraphInvalid = true;\n          return;\n        }\n\n        var idx = candidateGraph.nodes.indexOf(candidateNodeMap[targetId].node);\n        candidateGraph.nodes.splice(idx, 1);\n        candidateNodeMap[targetId] = undefined;\n        return;\n      } // prune5: 经过边裁剪后，可能又出现了最短路径过长的节点 （比 pattern 中同 label 的节点到 beginNode 最大最短距离远），删去这些节点\n\n\n      var nLabel = nodeMap[targetId].node[nodeLabelProp];\n\n      if (!undirectedLengthsToBeginPNodeLabelMap[nLabel] || !undirectedLengthsToBeginPNodeLabelMap[nLabel].length || lengthsToCandidate[targetId] > undirectedLengthsToBeginPNodeLabelMap[nLabel][undirectedLengthsToBeginPNodeLabelMap[nLabel].length - 1]) {\n        var targetNodeLabel = candidateNodeMap[targetId].node[nodeLabelProp];\n        candidateNodeLabelCountMap[targetNodeLabel]--;\n\n        if (candidateNodeLabelCountMap[targetNodeLabel] < patternNodeLabelMap[targetNodeLabel].length) {\n          candidateGraphInvalid = true;\n          return;\n        }\n\n        var idx = candidateGraph.nodes.indexOf(candidateNodeMap[targetId].node);\n        candidateGraph.nodes.splice(idx, 1);\n        candidateNodeMap[targetId] = undefined;\n      }\n    });\n\n    if (candidateGraphInvalid) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    }\n\n    var degreeChanged = true;\n    var loopCount = 0;\n\n    while (degreeChanged && !candidateGraphInvalid) {\n      degreeChanged = false; // candidate 度数不足，删去该图\n\n      var condition = directed ? candidateNodeMap[candidate.id].degree < patternNodeMap[beginPNode.id].degree || candidateNodeMap[candidate.id].inDegree < patternNodeMap[beginPNode.id].inDegree || candidateNodeMap[candidate.id].outDegree < patternNodeMap[beginPNode.id].outDegree : candidateNodeMap[candidate.id].degree < patternNodeMap[beginPNode.id].degree;\n\n      if (condition) {\n        candidateGraphInvalid = true;\n        break;\n      } // candidate label 个数不足，删去该图\n\n\n      if (candidateNodeLabelCountMap[candidate[nodeLabelProp]] < patternNodeLabelMap[candidate[nodeLabelProp]].length) {\n        candidateGraphInvalid = true;\n        break;\n      } // prune6：去除度数过小的节点\n\n\n      var currentCandidateNodeNum = candidateGraph.nodes.length;\n\n      for (var o = currentCandidateNodeNum - 1; o >= 0; o--) {\n        var cgNode = candidateGraph.nodes[o];\n        var nodeDegree = candidateNodeMap[cgNode.id].degree;\n        var nodeInDegree = candidateNodeMap[cgNode.id].inDegree;\n        var nodeOutDegree = candidateNodeMap[cgNode.id].outDegree;\n        var cNodeLabel = cgNode[nodeLabelProp];\n\n        var _d = stashPatternNodeLabelDegreeMap(minPatternNodeLabelDegreeMap, cNodeLabel, patternNodeMap, patternNodeLabelMap),\n            minPatternNodeLabelDegree = _d.minPatternNodeLabelDegree,\n            minPatternNodeLabelInDegree = _d.minPatternNodeLabelInDegree,\n            minPatternNodeLabelOutDegree = _d.minPatternNodeLabelOutDegree;\n\n        var deleteCondition = directed ? nodeDegree < minPatternNodeLabelDegree || nodeInDegree < minPatternNodeLabelInDegree || nodeOutDegree < minPatternNodeLabelOutDegree : nodeDegree < minPatternNodeLabelDegree;\n\n        if (deleteCondition) {\n          candidateNodeLabelCountMap[cgNode[nodeLabelProp]]--; // 节点 label 个数不足\n\n          if (candidateNodeLabelCountMap[cgNode[nodeLabelProp]] < patternNodeLabelMap[cgNode[nodeLabelProp]].length) {\n            candidateGraphInvalid = true;\n            break;\n          }\n\n          candidateGraph.nodes.splice(o, 1);\n          candidateNodeMap[cgNode.id] = undefined;\n          degreeChanged = true;\n        }\n      }\n\n      if (candidateGraphInvalid || !degreeChanged && loopCount !== 0) break; // 经过 prune5 节点裁剪，删去端点已经不在 candidateGraph 中的边\n\n      candidateEdgeNum = candidateEdges.length;\n\n      for (var y = candidateEdgeNum - 1; y >= 0; y--) {\n        var cedge = candidateEdges[y];\n\n        if (!candidateNodeMap[cedge.source] || !candidateNodeMap[cedge.target]) {\n          candidateEdges.splice(y, 1);\n          var edgeLabel = cedge[edgeLabelProp];\n          edgeLabelCountMap[edgeLabel]--;\n\n          if (candidateNodeMap[cedge.source]) {\n            candidateNodeMap[cedge.source].degree--;\n            candidateNodeMap[cedge.source].outDegree--;\n          }\n\n          if (candidateNodeMap[cedge.target]) {\n            candidateNodeMap[cedge.target].degree--;\n            candidateNodeMap[cedge.target].inDegree--;\n          } // 边 label 数量不足\n\n\n          if (patternEdgeLabelMap[edgeLabel] && edgeLabelCountMap[edgeLabel] < patternEdgeLabelMap[edgeLabel].length) {\n            candidateGraphInvalid = true;\n            break;\n          }\n\n          degreeChanged = true;\n        }\n      }\n\n      loopCount++;\n    }\n\n    if (candidateGraphInvalid) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    } // prune: 若节点/边数过少，节点/边 label 过少，去掉这个图\n\n\n    if (candidateGraphInvalid || candidateGraph.nodes.length < pattern.nodes.length || candidateEdges.length < pattern.edges.length) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    }\n  };\n\n  for (var i = candidateGraphNum - 1; i >= 0; i--) {\n    var state_1 = _loop_2(i);\n\n    if (state_1 === \"break\") break;\n  } // 此时已经生成的多个 candidateGraphs，可能有重复\n  // console.log(\n  //   \"----- stage5: going to splice dulplicated candidate graphs -------\"\n  // );\n  // 删去 candidateGraphs 中一模一样的子图，通过边的 node-node-edgeLabel 作为 key，这类边个数作为 value，进行匹配\n\n\n  var currentLength = candidateGraphs.length;\n\n  var _loop_3 = function _loop_3(i) {\n    var cg1 = candidateGraphs[i];\n    var cg1EdgeMap = {}; // [node1.id-node2.id-edge.label]: count\n\n    cg1.edges.forEach(function (edge) {\n      var key = edge.source + \"-\" + edge.target + \"-\" + edge.label;\n      if (!cg1EdgeMap[key]) cg1EdgeMap[key] = 1;else cg1EdgeMap[key]++;\n    });\n\n    var _loop_6 = function _loop_6(j) {\n      var cg2 = candidateGraphs[j];\n      var cg2EdgeMap = {}; // [node1.id-node2.id-edge.label]: count\n\n      cg2.edges.forEach(function (edge) {\n        var key = edge.source + \"-\" + edge.target + \"-\" + edge.label;\n        if (!cg2EdgeMap[key]) cg2EdgeMap[key] = 1;else cg2EdgeMap[key]++;\n      });\n      var same = true;\n\n      if (Object.keys(cg2EdgeMap).length !== Object.keys(cg1EdgeMap).length) {\n        same = false;\n      } else {\n        Object.keys(cg1EdgeMap).forEach(function (key) {\n          if (cg2EdgeMap[key] !== cg1EdgeMap[key]) same = false;\n        });\n      }\n\n      if (same) {\n        candidateGraphs.splice(j, 1);\n      }\n    };\n\n    for (var j = currentLength - 1; j > i; j--) {\n      _loop_6(j);\n    }\n\n    currentLength = candidateGraphs.length;\n  };\n\n  for (var i = 0; i <= currentLength - 1; i++) {\n    _loop_3(i);\n  }\n\n  return candidateGraphs;\n};\n\nvar _default = GADDI;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}