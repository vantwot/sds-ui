{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport Point from '../../geo/point';\nimport { indexTouches } from '../handler_util';\n\nvar TouchPanHandler = function () {\n  function TouchPanHandler(options) {\n    _classCallCheck(this, TouchPanHandler);\n\n    _defineProperty(this, \"enabled\", void 0);\n\n    _defineProperty(this, \"active\", void 0);\n\n    _defineProperty(this, \"touches\", void 0);\n\n    _defineProperty(this, \"minTouches\", void 0);\n\n    _defineProperty(this, \"clickTolerance\", void 0);\n\n    _defineProperty(this, \"sum\", void 0);\n\n    this.minTouches = 1;\n    this.clickTolerance = options.clickTolerance || 1;\n    this.reset();\n  }\n\n  _createClass(TouchPanHandler, [{\n    key: \"reset\",\n    value: function reset() {\n      this.active = false;\n      this.touches = {};\n      this.sum = new Point(0, 0);\n    }\n  }, {\n    key: \"touchstart\",\n    value: function touchstart(e, points, mapTouches) {\n      return this.calculateTransform(e, points, mapTouches);\n    }\n  }, {\n    key: \"touchmove\",\n    value: function touchmove(e, points, mapTouches) {\n      if (!this.active) {\n        return;\n      }\n\n      e.preventDefault();\n      return this.calculateTransform(e, points, mapTouches);\n    }\n  }, {\n    key: \"touchend\",\n    value: function touchend(e, points, mapTouches) {\n      this.calculateTransform(e, points, mapTouches);\n\n      if (this.active && mapTouches.length < this.minTouches) {\n        this.reset();\n      }\n    }\n  }, {\n    key: \"touchcancel\",\n    value: function touchcancel() {\n      this.reset();\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      this.enabled = true;\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.enabled = false;\n      this.reset();\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.enabled;\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.active;\n    }\n  }, {\n    key: \"calculateTransform\",\n    value: function calculateTransform(e, points, mapTouches) {\n      if (mapTouches.length > 0) {\n        this.active = true;\n      }\n\n      var touches = indexTouches(mapTouches, points);\n      var touchPointSum = new Point(0, 0);\n      var touchDeltaSum = new Point(0, 0);\n      var touchDeltaCount = 0;\n\n      for (var identifier in touches) {\n        if (touches[identifier]) {\n          var point = touches[identifier];\n          var prevPoint = this.touches[identifier];\n\n          if (prevPoint) {\n            touchPointSum._add(point);\n\n            touchDeltaSum._add(point.sub(prevPoint));\n\n            touchDeltaCount++;\n            touches[identifier] = point;\n          }\n        }\n      }\n\n      this.touches = touches;\n\n      if (touchDeltaCount < this.minTouches || !touchDeltaSum.mag()) {\n        return;\n      }\n\n      var panDelta = touchDeltaSum.div(touchDeltaCount);\n\n      this.sum._add(panDelta);\n\n      if (this.sum.mag() < this.clickTolerance) {\n        return;\n      }\n\n      var around = touchPointSum.div(touchDeltaCount);\n      return {\n        around: around,\n        panDelta: panDelta\n      };\n    }\n  }]);\n\n  return TouchPanHandler;\n}();\n\nexport { TouchPanHandler as default };","map":{"version":3,"sources":["../../../src/handler/touch/touch_pan.ts"],"names":["TouchPanHandler","options","e","mapTouches","touches","indexTouches","touchPointSum","touchDeltaSum","touchDeltaCount","point","prevPoint","panDelta","around"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport Point from '../../geo/point';\nimport { indexTouches } from '../handler_util';\n\nexport default class TouchPanHandler {\n  public enabled: boolean;\n  public active: boolean;\n  public touches: { [key: string]: Point };\n  public minTouches: number;\n  public clickTolerance: number;\n  public sum: Point;\n\n  constructor(options: { clickTolerance: number }) {\n    this.minTouches = 1;\n    this.clickTolerance = options.clickTolerance || 1;\n    this.reset();\n  }\n\n  public reset() {\n    this.active = false;\n    this.touches = {};\n    this.sum = new Point(0, 0);\n  }\n\n  public touchstart(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    return this.calculateTransform(e, points, mapTouches);\n  }\n\n  public touchmove(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    if (!this.active) {\n      return;\n    }\n    e.preventDefault();\n    return this.calculateTransform(e, points, mapTouches);\n  }\n\n  public touchend(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    this.calculateTransform(e, points, mapTouches);\n\n    if (this.active && mapTouches.length < this.minTouches) {\n      this.reset();\n    }\n  }\n\n  public touchcancel() {\n    this.reset();\n  }\n  public enable() {\n    this.enabled = true;\n  }\n\n  public disable() {\n    this.enabled = false;\n    this.reset();\n  }\n\n  public isEnabled() {\n    return this.enabled;\n  }\n\n  public isActive() {\n    return this.active;\n  }\n\n  private calculateTransform(\n    e: TouchEvent,\n    points: Point[],\n    mapTouches: Touch[],\n  ) {\n    if (mapTouches.length > 0) {\n      this.active = true;\n    }\n\n    const touches = indexTouches(mapTouches, points);\n\n    const touchPointSum = new Point(0, 0);\n    const touchDeltaSum = new Point(0, 0);\n    let touchDeltaCount = 0;\n\n    for (const identifier in touches) {\n      if (touches[identifier]) {\n        const point = touches[identifier];\n        const prevPoint = this.touches[identifier];\n        if (prevPoint) {\n          touchPointSum._add(point);\n          touchDeltaSum._add(point.sub(prevPoint));\n          touchDeltaCount++;\n          touches[identifier] = point;\n        }\n      }\n    }\n\n    this.touches = touches;\n\n    if (touchDeltaCount < this.minTouches || !touchDeltaSum.mag()) {\n      return;\n    }\n    // @ts-ignore\n    const panDelta = touchDeltaSum.div(touchDeltaCount);\n    this.sum._add(panDelta);\n    if (this.sum.mag() < this.clickTolerance) {\n      return;\n    }\n    // @ts-ignore\n    const around = touchPointSum.div(touchDeltaCount);\n\n    return {\n      around,\n      panDelta,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}