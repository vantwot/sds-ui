{"ast":null,"code":"import _defineProperty from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport React from 'react';\nimport { Spin } from 'antd';\nimport classnames from 'classnames';\nimport { usePositionStyle } from '@antv/xflow-core'; // component\n\nimport { Toolbar } from '@antv/x6-react-components';\nimport { ToolbarGroup } from './toolbar-group';\nimport { useToolbarModel } from '../service';\nimport classNames from 'classnames';\n/** render toolbar */\n\nvar ToolbarRender = function ToolbarRender(props) {\n  var idx = props.idx,\n      groups = props.groups,\n      layout = props.layout,\n      toolbarOptions = props.toolbarOptions;\n  var _toolbarOptions$hover = toolbarOptions.hoverEffect,\n      hoverEffect = _toolbarOptions$hover === void 0 ? true : _toolbarOptions$hover;\n  return React.createElement(Toolbar, {\n    hoverEffect: hoverEffect\n  }, groups.map(function (g, gIdx) {\n    var key = idx + gIdx;\n    return React.createElement(ToolbarGroup, {\n      key: key,\n      group: g,\n      layout: layout\n    });\n  }));\n};\n\nvar InnerRender = function InnerRender(props) {\n  var _classnames;\n\n  var _useToolbarModel = useToolbarModel(props),\n      isModelReady = _useToolbarModel.isModelReady,\n      state = _useToolbarModel.state;\n\n  var positionStyle = usePositionStyle(props.position);\n  var _state$mainGroups = state.mainGroups,\n      mainGroups = _state$mainGroups === void 0 ? [] : _state$mainGroups,\n      _state$extraGroups = state.extraGroups,\n      extraGroups = _state$extraGroups === void 0 ? [] : _state$extraGroups,\n      layout = state.layout,\n      customRender = state.customRender;\n  var containerClz = classNames(props.className, layout, 'xflow-toolbar');\n  var clz = classnames((_classnames = {}, _defineProperty(_classnames, layout, true), _defineProperty(_classnames, 'xflow-toolbar-root', true), _classnames)); // loading\n\n  if (!isModelReady) {\n    return React.createElement(\"div\", {\n      className: containerClz,\n      style: Object.assign(Object.assign({}, positionStyle), props.style)\n    }, React.createElement(Spin, {\n      spinning: true,\n      size: \"small\"\n    }));\n  } // render custom component\n\n\n  if (customRender) {\n    return React.createElement(\"div\", {\n      className: containerClz,\n      style: Object.assign(Object.assign({}, positionStyle), props.style)\n    }, React.createElement(customRender, {\n      config: state\n    }));\n  } // render toolbars\n\n\n  return React.createElement(\"div\", {\n    className: containerClz,\n    style: Object.assign(Object.assign({}, positionStyle), props.style)\n  }, React.createElement(\"div\", {\n    className: clz\n  }, mainGroups.length > 0 && React.createElement(ToolbarRender, {\n    idx: \"mainGroups\",\n    groups: mainGroups,\n    layout: layout,\n    toolbarOptions: state\n  }), extraGroups.length > 0 && React.createElement(ToolbarRender, {\n    idx: \"extraGroups\",\n    groups: extraGroups,\n    layout: layout,\n    toolbarOptions: state\n  })));\n};\n/** connect 数据 */\n\n\nexport var XFlowToolbar = React.memo(InnerRender);","map":{"version":3,"sources":["../../../src/canvas-toolbar/render-components/index.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React from 'react';\nimport { Spin } from 'antd';\nimport classnames from 'classnames';\nimport { usePositionStyle } from '@antv/xflow-core';\n// component\nimport { Toolbar } from '@antv/x6-react-components';\nimport { ToolbarGroup } from './toolbar-group';\nimport { useToolbarModel } from '../service';\nimport classNames from 'classnames';\n/** render toolbar */\nconst ToolbarRender = props => {\n    const { idx, groups, layout, toolbarOptions } = props;\n    const { hoverEffect = true } = toolbarOptions;\n    return (React.createElement(Toolbar, { hoverEffect: hoverEffect }, groups.map((g, gIdx) => {\n        const key = idx + gIdx;\n        return React.createElement(ToolbarGroup, { key: key, group: g, layout: layout });\n    })));\n};\nconst InnerRender = props => {\n    const { isModelReady, state } = useToolbarModel(props);\n    const positionStyle = usePositionStyle(props.position);\n    const { mainGroups = [], extraGroups = [], layout, customRender } = state;\n    const containerClz = classNames(props.className, layout, 'xflow-toolbar');\n    const clz = classnames({\n        [layout]: true,\n        ['xflow-toolbar-root']: true,\n    });\n    // loading\n    if (!isModelReady) {\n        return (React.createElement(\"div\", { className: containerClz, style: Object.assign(Object.assign({}, positionStyle), props.style) },\n            React.createElement(Spin, { spinning: true, size: \"small\" })));\n    }\n    // render custom component\n    if (customRender) {\n        return (React.createElement(\"div\", { className: containerClz, style: Object.assign(Object.assign({}, positionStyle), props.style) }, React.createElement(customRender, { config: state })));\n    }\n    // render toolbars\n    return (React.createElement(\"div\", { className: containerClz, style: Object.assign(Object.assign({}, positionStyle), props.style) },\n        React.createElement(\"div\", { className: clz },\n            mainGroups.length > 0 && (React.createElement(ToolbarRender, { idx: \"mainGroups\", groups: mainGroups, layout: layout, toolbarOptions: state })),\n            extraGroups.length > 0 && (React.createElement(ToolbarRender, { idx: \"extraGroups\", groups: extraGroups, layout: layout, toolbarOptions: state })))));\n};\n/** connect 数据 */\nexport const XFlowToolbar = React.memo(InnerRender);\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}