{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _dec, _class;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { DOM } from '@antv/l7-utils';\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../types';\nvar ControlService = (_dec = injectable(), _dec(_class = function () {\n  function ControlService() {\n    _classCallCheck(this, ControlService);\n\n    _defineProperty(this, \"container\", void 0);\n\n    _defineProperty(this, \"controlCorners\", void 0);\n\n    _defineProperty(this, \"controlContainer\", void 0);\n\n    _defineProperty(this, \"scene\", void 0);\n\n    _defineProperty(this, \"mapsService\", void 0);\n\n    _defineProperty(this, \"controls\", []);\n\n    _defineProperty(this, \"unAddControls\", []);\n  }\n\n  _createClass(ControlService, [{\n    key: \"init\",\n    value: function init(cfg, sceneContainer) {\n      this.container = cfg.container;\n      this.scene = sceneContainer;\n      this.mapsService = sceneContainer.get(TYPES.IMapService);\n      this.initControlPos();\n    }\n  }, {\n    key: \"addControl\",\n    value: function addControl(ctr, sceneContainer) {\n      var mapsService = sceneContainer.get(TYPES.IMapService);\n\n      if (mapsService.map) {\n        ctr.addTo(this.scene);\n        this.controls.push(ctr);\n      } else {\n        this.unAddControls.push(ctr);\n      }\n    }\n  }, {\n    key: \"getControlByName\",\n    value: function getControlByName(name) {\n      return this.controls.find(function (ctr) {\n        return ctr.controlOption.name === name;\n      });\n    }\n  }, {\n    key: \"removeControl\",\n    value: function removeControl(ctr) {\n      var index = this.controls.indexOf(ctr);\n\n      if (index > -1) {\n        this.controls.splice(index, 1);\n      }\n\n      ctr.remove();\n      return this;\n    }\n  }, {\n    key: \"addControls\",\n    value: function addControls() {\n      var _this = this;\n\n      this.unAddControls.forEach(function (ctr) {\n        ctr.addTo(_this.scene);\n\n        _this.controls.push(ctr);\n      });\n      this.unAddControls = [];\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _iterator = _createForOfIteratorHelper(this.controls),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ctr = _step.value;\n          ctr.remove();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.controls = [];\n      this.clearControlPos();\n    }\n  }, {\n    key: \"initControlPos\",\n    value: function initControlPos() {\n      var corners = this.controlCorners = {};\n      var l = 'l7-';\n      var container = this.controlContainer = DOM.create('div', l + 'control-container', this.container);\n\n      function createCorner() {\n        var vSideList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var className = vSideList.map(function (item) {\n          return l + item;\n        }).join(' ');\n        corners[vSideList.join('')] = DOM.create('div', className, container);\n      }\n\n      createCorner(['top', 'left']);\n      createCorner(['top', 'right']);\n      createCorner(['bottom', 'left']);\n      createCorner(['bottom', 'right']);\n      createCorner(['top', 'center']);\n      createCorner(['right', 'center']);\n      createCorner(['left', 'center']);\n      createCorner(['bottom', 'center']);\n    }\n  }, {\n    key: \"clearControlPos\",\n    value: function clearControlPos() {\n      for (var i in this.controlCorners) {\n        if (this.controlCorners[i]) {\n          DOM.remove(this.controlCorners[i]);\n        }\n      }\n\n      if (this.controlContainer) {\n        DOM.remove(this.controlContainer);\n      }\n\n      delete this.controlCorners;\n      delete this.controlContainer;\n    }\n  }]);\n\n  return ControlService;\n}()) || _class);\nexport { ControlService as default };","map":{"version":3,"sources":["../../../src/services/component/ControlService.ts"],"names":["injectable","ControlService","cfg","sceneContainer","TYPES","mapsService","ctr","index","corners","l","container","DOM","vSideList","className","createCorner"],"mappings":"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","sourcesContent":["import { DOM } from '@antv/l7-utils';\nimport { Container, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../types';\nimport { IMapService } from '../map/IMapService';\nimport {\n  IControl,\n  IControlCorners,\n  IControlService,\n  IControlServiceCfg,\n} from './IControlService';\n@injectable()\nexport default class ControlService implements IControlService {\n  public container: HTMLElement;\n  public controlCorners: IControlCorners;\n  public controlContainer: HTMLElement;\n  public scene: Container;\n  public mapsService: IMapService;\n  private controls: IControl[] = [];\n  private unAddControls: IControl[] = [];\n  public init(cfg: IControlServiceCfg, sceneContainer: Container) {\n    this.container = cfg.container;\n    this.scene = sceneContainer;\n    this.mapsService = sceneContainer.get<IMapService>(TYPES.IMapService);\n    this.initControlPos();\n  }\n  public addControl(ctr: IControl, sceneContainer: Container): void {\n    const mapsService = sceneContainer.get<IMapService>(TYPES.IMapService);\n    if (mapsService.map) {\n      ctr.addTo(this.scene); // scene对象\n      this.controls.push(ctr);\n    } else {\n      this.unAddControls.push(ctr);\n    }\n  }\n  public getControlByName(name: string | number): IControl | undefined {\n    return this.controls.find((ctr) => {\n      return ctr.controlOption.name === name;\n    });\n  }\n  public removeControl(ctr: IControl): this {\n    const index = this.controls.indexOf(ctr);\n    if (index > -1) {\n      this.controls.splice(index, 1);\n    }\n    ctr.remove();\n    return this;\n  }\n\n  public addControls() {\n    this.unAddControls.forEach((ctr: IControl) => {\n      ctr.addTo(this.scene); // scene对象\n      this.controls.push(ctr);\n    });\n    this.unAddControls = [];\n  }\n\n  public destroy(): void {\n    for (const ctr of this.controls) {\n      ctr.remove();\n    }\n    this.controls = [];\n    this.clearControlPos();\n  }\n\n  private initControlPos() {\n    const corners: IControlCorners = (this.controlCorners = {});\n    const l = 'l7-';\n    const container = (this.controlContainer = DOM.create(\n      'div',\n      l + 'control-container',\n      this.container,\n    ));\n\n    function createCorner(vSideList: string[] = []) {\n      const className = vSideList.map((item) => l + item).join(' ');\n      corners[vSideList.join('')] = DOM.create('div', className, container);\n    }\n\n    createCorner(['top', 'left']);\n    createCorner(['top', 'right']);\n    createCorner(['bottom', 'left']);\n    createCorner(['bottom', 'right']);\n\n    createCorner(['top', 'center']);\n    createCorner(['right', 'center']);\n    createCorner(['left', 'center']);\n    createCorner(['bottom', 'center']);\n  }\n\n  private clearControlPos() {\n    for (const i in this.controlCorners) {\n      if (this.controlCorners[i]) {\n        DOM.remove(this.controlCorners[i]);\n      }\n    }\n    if (this.controlContainer) {\n      DOM.remove(this.controlContainer);\n    }\n    delete this.controlCorners;\n    delete this.controlContainer;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}