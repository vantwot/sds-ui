{"ast":null,"code":"export function diff(oldList, newList, key) {\n  var oldMap = makeKeyIndexAndFree(oldList, key);\n  var newMap = makeKeyIndexAndFree(newList, key);\n  var newFree = newMap.free;\n  var oldKeyIndex = oldMap.keyIndex;\n  var newKeyIndex = newMap.keyIndex;\n  var moves = [];\n  var children = [];\n  var i = 0;\n  var item;\n  var itemKey;\n  var freeIndex = 0;\n\n  while (i < oldList.length) {\n    item = oldList[i];\n    itemKey = item[key];\n\n    if (itemKey) {\n      // eslint-disable-next-line\n      if (!newKeyIndex.hasOwnProperty(itemKey)) {\n        children.push(null);\n      } else {\n        var newItemIndex = newKeyIndex[itemKey];\n        children.push(newList[newItemIndex]);\n      }\n    } else {\n      freeIndex += 1;\n      var freeItem = newFree[freeIndex];\n      children.push(freeItem || null);\n    }\n\n    i += 1;\n  }\n\n  var simulateList = children.slice(0);\n  i = 0;\n\n  while (i < simulateList.length) {\n    if (simulateList[i] === null) {\n      remove(i);\n      removeSimulate(i);\n    } else {\n      i += 1;\n    }\n  }\n\n  var j = i = 0;\n\n  while (i < newList.length) {\n    item = newList[i];\n    itemKey = item[key];\n    var simulateItem = simulateList[j];\n\n    if (simulateItem) {\n      var simulateItemKey = simulateItem[key];\n\n      if (itemKey === simulateItemKey) {\n        j += 1;\n      } else {\n        // eslint-disable-next-line\n        if (!oldKeyIndex.hasOwnProperty(itemKey)) {\n          insert(i, item);\n        } else {\n          var nextSimulateItem = simulateList[j + 1];\n\n          if (nextSimulateItem) {\n            var nextItemKey = nextSimulateItem[key];\n\n            if (nextItemKey === itemKey) {\n              remove(i);\n              removeSimulate(j);\n              j += 1;\n            } else {\n              insert(i, item);\n            }\n          }\n        }\n      }\n    } else {\n      insert(i, item);\n    }\n\n    i += 1;\n  }\n\n  var k = simulateList.length - j;\n\n  while ((j += 1) < simulateList.length) {\n    k -= 1;\n    remove(k + i);\n  }\n\n  function remove(index) {\n    var move = {\n      index: index,\n      type: 0,\n      item: null\n    };\n    moves.push(move);\n  }\n\n  function insert(index, item) {\n    var move = {\n      index: index,\n      item: item,\n      type: 1\n    };\n    moves.push(move);\n  }\n\n  function removeSimulate(index) {\n    simulateList.splice(index, 1);\n  }\n\n  return {\n    moves: moves\n  };\n}\n\nfunction makeKeyIndexAndFree(list, key) {\n  var keyIndex = {};\n  var free = [];\n\n  for (var i = 0, len = list.length; i < len; i += 1) {\n    var item = list[i];\n    var itemKey = item[key];\n\n    if (itemKey) {\n      keyIndex[itemKey] = i;\n    } else {\n      free.push(item);\n    }\n  }\n\n  return {\n    keyIndex: keyIndex,\n    free: free\n  };\n}","map":{"version":3,"sources":["../../../src/util/array/diff.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["export function diff(oldList, newList, key) {\n    const oldMap = makeKeyIndexAndFree(oldList, key);\n    const newMap = makeKeyIndexAndFree(newList, key);\n    const newFree = newMap.free;\n    const oldKeyIndex = oldMap.keyIndex;\n    const newKeyIndex = newMap.keyIndex;\n    const moves = [];\n    const children = [];\n    let i = 0;\n    let item;\n    let itemKey;\n    let freeIndex = 0;\n    while (i < oldList.length) {\n        item = oldList[i];\n        itemKey = item[key];\n        if (itemKey) {\n            // eslint-disable-next-line\n            if (!newKeyIndex.hasOwnProperty(itemKey)) {\n                children.push(null);\n            }\n            else {\n                const newItemIndex = newKeyIndex[itemKey];\n                children.push(newList[newItemIndex]);\n            }\n        }\n        else {\n            freeIndex += 1;\n            const freeItem = newFree[freeIndex];\n            children.push(freeItem || null);\n        }\n        i += 1;\n    }\n    const simulateList = children.slice(0);\n    i = 0;\n    while (i < simulateList.length) {\n        if (simulateList[i] === null) {\n            remove(i);\n            removeSimulate(i);\n        }\n        else {\n            i += 1;\n        }\n    }\n    let j = (i = 0);\n    while (i < newList.length) {\n        item = newList[i];\n        itemKey = item[key];\n        const simulateItem = simulateList[j];\n        if (simulateItem) {\n            const simulateItemKey = simulateItem[key];\n            if (itemKey === simulateItemKey) {\n                j += 1;\n            }\n            else {\n                // eslint-disable-next-line\n                if (!oldKeyIndex.hasOwnProperty(itemKey)) {\n                    insert(i, item);\n                }\n                else {\n                    const nextSimulateItem = simulateList[j + 1];\n                    if (nextSimulateItem) {\n                        const nextItemKey = nextSimulateItem[key];\n                        if (nextItemKey === itemKey) {\n                            remove(i);\n                            removeSimulate(j);\n                            j += 1;\n                        }\n                        else {\n                            insert(i, item);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            insert(i, item);\n        }\n        i += 1;\n    }\n    let k = simulateList.length - j;\n    while ((j += 1) < simulateList.length) {\n        k -= 1;\n        remove(k + i);\n    }\n    function remove(index) {\n        const move = { index, type: 0, item: null };\n        moves.push(move);\n    }\n    function insert(index, item) {\n        const move = { index, item, type: 1 };\n        moves.push(move);\n    }\n    function removeSimulate(index) {\n        simulateList.splice(index, 1);\n    }\n    return {\n        moves,\n    };\n}\nfunction makeKeyIndexAndFree(list, key) {\n    const keyIndex = {};\n    const free = [];\n    for (let i = 0, len = list.length; i < len; i += 1) {\n        const item = list[i];\n        const itemKey = item[key];\n        if (itemKey) {\n            keyIndex[itemKey] = i;\n        }\n        else {\n            free.push(item);\n        }\n    }\n    return {\n        keyIndex,\n        free,\n    };\n}\n//# sourceMappingURL=diff.js.map"]},"metadata":{},"sourceType":"module"}