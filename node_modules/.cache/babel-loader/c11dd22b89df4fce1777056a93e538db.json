{"ast":null,"code":"import React from 'react';\nimport clamp from 'clamp';\nimport classNames from 'classnames';\nimport keys from 'rc-util/lib/KeyCode';\nimport { WheelHandler } from '../util/dom/WheelHandler';\nimport { MouseMoveTracker } from '../util/dom/MouseMoveTracker';\nexport class Scrollbar extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    this.triggerCallback = nextPosition => {\n      const max = this.props.contentSize - this.props.containerSize;\n      const position = clamp(nextPosition, 0, max);\n\n      if (position !== this.props.scrollPosition) {\n        this.props.onScroll(position);\n      }\n    };\n\n    this.onWheel = delta => {\n      this.triggerCallback(this.props.scrollPosition + delta);\n    };\n\n    this.onWheelX = (deltaX, deltaY) => {\n      if (Math.abs(deltaX) >= Math.abs(deltaY)) {\n        this.onWheel(deltaX);\n      }\n    };\n\n    this.onWheelY = (deltaX, deltaY) => {\n      if (Math.abs(deltaX) <= Math.abs(deltaY)) {\n        this.onWheel(deltaY);\n      }\n    };\n\n    this.onKeyDown = e => {\n      const keyCode = e.keyCode; // let focus move off the scrollbar\n\n      if (keyCode === keys.TAB) {\n        return;\n      }\n\n      const {\n        contentSize,\n        containerSize\n      } = this.props;\n      let distance = this.props.keyboardScrollAmount;\n      let direction = 0;\n\n      if (this.isHorizontal()) {\n        switch (keyCode) {\n          case keys.HOME:\n            direction = -1;\n            distance = contentSize;\n            break;\n\n          case keys.LEFT:\n            direction = -1;\n            break;\n\n          case keys.RIGHT:\n            direction = 1;\n            break;\n\n          default:\n            return;\n        }\n      } else {\n        switch (keyCode) {\n          case keys.SPACE:\n            if (e.shiftKey) {\n              direction = -1;\n            } else {\n              direction = 1;\n            }\n\n            break;\n\n          case keys.HOME:\n            direction = -1;\n            distance = contentSize;\n            break;\n\n          case keys.UP:\n            direction = -1;\n            break;\n\n          case keys.DOWN:\n            direction = 1;\n            break;\n\n          case keys.PAGE_UP:\n            direction = -1;\n            distance = containerSize;\n            break;\n\n          case keys.PAGE_DOWN:\n            direction = 1;\n            distance = containerSize;\n            break;\n\n          default:\n            return;\n        }\n      }\n\n      e.preventDefault();\n      this.triggerCallback(this.props.scrollPosition + distance * direction);\n    };\n\n    this.onMouseDown = e => {\n      if (e.target !== this.thumbElem) {\n        const nativeEvent = e.nativeEvent;\n        const position = this.isHorizontal() ? nativeEvent.offsetX || nativeEvent.layerX : nativeEvent.offsetY || nativeEvent.layerY; // mousedown on the scroll-track directly, move the\n        // center of the scroll-face to the mouse position.\n\n        this.triggerCallback((position - this.thumbSize * 0.5) / this.scale);\n      } else {\n        this.mouseMoveTracker.capture(e);\n      }\n\n      if (this.props.stopPropagation) {\n        e.stopPropagation();\n      } // focus the container so it may receive keyboard events\n\n\n      this.containerElem.focus();\n    };\n\n    this.onMouseMove = (deltaX, deltaY) => {\n      let delta = this.isHorizontal() ? deltaX : deltaY;\n\n      if (delta !== 0) {\n        delta /= this.scale;\n        this.triggerCallback(this.props.scrollPosition + delta);\n      }\n    };\n\n    this.onMouseMoveEnd = () => {\n      this.mouseMoveTracker.release();\n    };\n\n    this.refContainer = container => {\n      this.containerElem = container;\n    };\n\n    this.refThumb = thumb => {\n      this.thumbElem = thumb;\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.wheelHandler = new WheelHandler({\n      onWheel: this.isHorizontal() ? this.onWheelX : this.onWheelY,\n      shouldHandleScrollX: true,\n      shouldHandleScrollY: true,\n      stopPropagation: this.props.stopPropagation\n    });\n    this.mouseMoveTracker = new MouseMoveTracker({\n      elem: document.documentElement,\n      onMouseMove: this.onMouseMove,\n      onMouseMoveEnd: this.onMouseMoveEnd\n    });\n  }\n\n  componentWillUnmount() {\n    this.mouseMoveTracker.release();\n  }\n\n  isHorizontal() {\n    return this.props.orientation === 'horizontal';\n  }\n\n  fixPosition(position) {\n    const max = this.props.contentSize - this.props.containerSize;\n    return clamp(position, 0, max);\n  }\n\n  render() {\n    const {\n      prefixCls,\n      className,\n      scrollPosition,\n      containerSize,\n      contentSize,\n      miniThumbSize,\n      zIndex,\n      scrollbarSize\n    } = this.props; // unscrollable\n\n    if (containerSize < 1 || contentSize <= containerSize) {\n      return null;\n    }\n\n    let scale = containerSize / contentSize;\n    let thumbSize = containerSize * scale;\n\n    if (thumbSize < miniThumbSize) {\n      scale = (containerSize - miniThumbSize) / (contentSize - containerSize);\n      thumbSize = miniThumbSize;\n    } // cache\n\n\n    this.scale = scale;\n    this.thumbSize = thumbSize;\n    let trackStyle;\n    let thumbStyle;\n    const horizontal = this.isHorizontal();\n\n    if (horizontal) {\n      trackStyle = {\n        width: containerSize,\n        height: scrollbarSize\n      };\n      thumbStyle = {\n        width: thumbSize,\n        transform: `translate(${scrollPosition * scale}px, 0)`\n      };\n    } else {\n      trackStyle = {\n        width: scrollbarSize,\n        height: containerSize\n      };\n      thumbStyle = {\n        height: thumbSize,\n        transform: `translate(0, ${scrollPosition * scale}px)`\n      };\n    }\n\n    if (zIndex) {\n      trackStyle.zIndex = zIndex;\n    }\n\n    const baseCls = `${prefixCls}-scrollbar`;\n    return React.createElement(\"div\", {\n      role: \"button\",\n      className: classNames(baseCls, {\n        [`${baseCls}-vertical`]: !horizontal,\n        [`${baseCls}-horizontal`]: horizontal\n      }, className),\n      style: trackStyle,\n      tabIndex: 0,\n      ref: this.refContainer,\n      onKeyDown: this.onKeyDown,\n      onMouseDown: this.onMouseDown,\n      onWheel: this.wheelHandler.onWheel\n    }, React.createElement(\"div\", {\n      ref: this.refThumb,\n      style: thumbStyle,\n      className: `${baseCls}-thumb`\n    }));\n  }\n\n}\n\n(function (Scrollbar) {\n  Scrollbar.defaultProps = {\n    prefixCls: 'x6',\n    orientation: 'vertical',\n    contentSize: 0,\n    containerSize: 0,\n    defaultPosition: 0,\n    scrollbarSize: 4,\n    miniThumbSize: 16,\n    keyboardScrollAmount: 40\n  };\n})(Scrollbar || (Scrollbar = {}));","map":{"version":3,"sources":["../../src/scrollbar/index.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React from 'react';\nimport clamp from 'clamp';\nimport classNames from 'classnames';\nimport keys from 'rc-util/lib/KeyCode';\nimport { WheelHandler } from '../util/dom/WheelHandler';\nimport { MouseMoveTracker } from '../util/dom/MouseMoveTracker';\nexport class Scrollbar extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.triggerCallback = (nextPosition) => {\n            const max = this.props.contentSize - this.props.containerSize;\n            const position = clamp(nextPosition, 0, max);\n            if (position !== this.props.scrollPosition) {\n                this.props.onScroll(position);\n            }\n        };\n        this.onWheel = (delta) => {\n            this.triggerCallback(this.props.scrollPosition + delta);\n        };\n        this.onWheelX = (deltaX, deltaY) => {\n            if (Math.abs(deltaX) >= Math.abs(deltaY)) {\n                this.onWheel(deltaX);\n            }\n        };\n        this.onWheelY = (deltaX, deltaY) => {\n            if (Math.abs(deltaX) <= Math.abs(deltaY)) {\n                this.onWheel(deltaY);\n            }\n        };\n        this.onKeyDown = (e) => {\n            const keyCode = e.keyCode;\n            // let focus move off the scrollbar\n            if (keyCode === keys.TAB) {\n                return;\n            }\n            const { contentSize, containerSize } = this.props;\n            let distance = this.props.keyboardScrollAmount;\n            let direction = 0;\n            if (this.isHorizontal()) {\n                switch (keyCode) {\n                    case keys.HOME:\n                        direction = -1;\n                        distance = contentSize;\n                        break;\n                    case keys.LEFT:\n                        direction = -1;\n                        break;\n                    case keys.RIGHT:\n                        direction = 1;\n                        break;\n                    default:\n                        return;\n                }\n            }\n            else {\n                switch (keyCode) {\n                    case keys.SPACE:\n                        if (e.shiftKey) {\n                            direction = -1;\n                        }\n                        else {\n                            direction = 1;\n                        }\n                        break;\n                    case keys.HOME:\n                        direction = -1;\n                        distance = contentSize;\n                        break;\n                    case keys.UP:\n                        direction = -1;\n                        break;\n                    case keys.DOWN:\n                        direction = 1;\n                        break;\n                    case keys.PAGE_UP:\n                        direction = -1;\n                        distance = containerSize;\n                        break;\n                    case keys.PAGE_DOWN:\n                        direction = 1;\n                        distance = containerSize;\n                        break;\n                    default:\n                        return;\n                }\n            }\n            e.preventDefault();\n            this.triggerCallback(this.props.scrollPosition + distance * direction);\n        };\n        this.onMouseDown = (e) => {\n            if (e.target !== this.thumbElem) {\n                const nativeEvent = e.nativeEvent;\n                const position = this.isHorizontal()\n                    ? nativeEvent.offsetX || nativeEvent.layerX\n                    : nativeEvent.offsetY || nativeEvent.layerY;\n                // mousedown on the scroll-track directly, move the\n                // center of the scroll-face to the mouse position.\n                this.triggerCallback((position - this.thumbSize * 0.5) / this.scale);\n            }\n            else {\n                this.mouseMoveTracker.capture(e);\n            }\n            if (this.props.stopPropagation) {\n                e.stopPropagation();\n            }\n            // focus the container so it may receive keyboard events\n            this.containerElem.focus();\n        };\n        this.onMouseMove = (deltaX, deltaY) => {\n            let delta = this.isHorizontal() ? deltaX : deltaY;\n            if (delta !== 0) {\n                delta /= this.scale;\n                this.triggerCallback(this.props.scrollPosition + delta);\n            }\n        };\n        this.onMouseMoveEnd = () => {\n            this.mouseMoveTracker.release();\n        };\n        this.refContainer = (container) => {\n            this.containerElem = container;\n        };\n        this.refThumb = (thumb) => {\n            this.thumbElem = thumb;\n        };\n    }\n    UNSAFE_componentWillMount() {\n        this.wheelHandler = new WheelHandler({\n            onWheel: this.isHorizontal() ? this.onWheelX : this.onWheelY,\n            shouldHandleScrollX: true,\n            shouldHandleScrollY: true,\n            stopPropagation: this.props.stopPropagation,\n        });\n        this.mouseMoveTracker = new MouseMoveTracker({\n            elem: document.documentElement,\n            onMouseMove: this.onMouseMove,\n            onMouseMoveEnd: this.onMouseMoveEnd,\n        });\n    }\n    componentWillUnmount() {\n        this.mouseMoveTracker.release();\n    }\n    isHorizontal() {\n        return this.props.orientation === 'horizontal';\n    }\n    fixPosition(position) {\n        const max = this.props.contentSize - this.props.containerSize;\n        return clamp(position, 0, max);\n    }\n    render() {\n        const { prefixCls, className, scrollPosition, containerSize, contentSize, miniThumbSize, zIndex, scrollbarSize, } = this.props;\n        // unscrollable\n        if (containerSize < 1 || contentSize <= containerSize) {\n            return null;\n        }\n        let scale = containerSize / contentSize;\n        let thumbSize = containerSize * scale;\n        if (thumbSize < miniThumbSize) {\n            scale = (containerSize - miniThumbSize) / (contentSize - containerSize);\n            thumbSize = miniThumbSize;\n        }\n        // cache\n        this.scale = scale;\n        this.thumbSize = thumbSize;\n        let trackStyle;\n        let thumbStyle;\n        const horizontal = this.isHorizontal();\n        if (horizontal) {\n            trackStyle = {\n                width: containerSize,\n                height: scrollbarSize,\n            };\n            thumbStyle = {\n                width: thumbSize,\n                transform: `translate(${scrollPosition * scale}px, 0)`,\n            };\n        }\n        else {\n            trackStyle = {\n                width: scrollbarSize,\n                height: containerSize,\n            };\n            thumbStyle = {\n                height: thumbSize,\n                transform: `translate(0, ${scrollPosition * scale}px)`,\n            };\n        }\n        if (zIndex) {\n            trackStyle.zIndex = zIndex;\n        }\n        const baseCls = `${prefixCls}-scrollbar`;\n        return (React.createElement(\"div\", { role: \"button\", className: classNames(baseCls, {\n                [`${baseCls}-vertical`]: !horizontal,\n                [`${baseCls}-horizontal`]: horizontal,\n            }, className), style: trackStyle, tabIndex: 0, ref: this.refContainer, onKeyDown: this.onKeyDown, onMouseDown: this.onMouseDown, onWheel: this.wheelHandler.onWheel },\n            React.createElement(\"div\", { ref: this.refThumb, style: thumbStyle, className: `${baseCls}-thumb` })));\n    }\n}\n(function (Scrollbar) {\n    Scrollbar.defaultProps = {\n        prefixCls: 'x6',\n        orientation: 'vertical',\n        contentSize: 0,\n        containerSize: 0,\n        defaultPosition: 0,\n        scrollbarSize: 4,\n        miniThumbSize: 16,\n        keyboardScrollAmount: 40,\n    };\n})(Scrollbar || (Scrollbar = {}));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}