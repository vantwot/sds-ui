{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _dec, _class;\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { PassType } from '../IMultiPassRenderer';\nimport BaseNormalPass from './BaseNormalPass';\nvar RenderPass = (_dec = injectable(), _dec(_class = function (_BaseNormalPass) {\n  _inherits(RenderPass, _BaseNormalPass);\n\n  var _super = _createSuper(RenderPass);\n\n  function RenderPass() {\n    _classCallCheck(this, RenderPass);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(RenderPass, [{\n    key: \"getType\",\n    value: function getType() {\n      return PassType.Normal;\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return 'render';\n    }\n  }, {\n    key: \"init\",\n    value: function init(layer, config) {\n      _get(_getPrototypeOf(RenderPass.prototype), \"init\", this).call(this, layer, config);\n    }\n  }, {\n    key: \"render\",\n    value: function render(layer) {\n      var _this$rendererService = this.rendererService,\n          useFramebuffer = _this$rendererService.useFramebuffer,\n          clear = _this$rendererService.clear;\n      useFramebuffer(null, function () {\n        clear({\n          color: [0, 0, 0, 0],\n          depth: 1,\n          stencil: 0\n        });\n        layer.multiPassRenderer.setRenderFlag(false);\n        layer.render();\n        layer.multiPassRenderer.setRenderFlag(true);\n      });\n    }\n  }]);\n\n  return RenderPass;\n}(BaseNormalPass)) || _class);\nexport { RenderPass as default };","map":{"version":3,"sources":["../../../../src/services/renderer/passes/RenderPass.ts"],"names":["injectable","RenderPass","BaseNormalPass","PassType","useFramebuffer","clear","color","depth","stencil","layer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,UAAA,QAAA,WAAA;AACA,OAAA,kBAAA;AAEA,SAAA,QAAA,QAAA,uBAAA;AACA,OAAA,cAAA,MAAA,kBAAA;IAMqBC,U,WADpBD,UAAU,E;;;;;;;;;;;;;WAIT,SAAA,OAAA,GAAiB;AACf,aAAOG,QAAQ,CAAf,MAAA;AACD;;;WAED,SAAA,OAAA,GAAiB;AACf,aAAA,QAAA;AACD;;;WAED,SAAA,IAAA,CAAA,KAAA,EAAA,MAAA,EAAoE;AAClE,MAAA,IAAA,CAAA,eAAA,CAAA,UAAA,CAAA,SAAA,CAAA,EAAA,MAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA;AACD;;;WAED,SAAA,MAAA,CAAA,KAAA,EAA6B;AAC3B,UAAA,qBAAA,GAAkC,KAAlC,eAAA;AAAA,UAAQC,cAAR,GAAA,qBAAA,CAAA,cAAA;AAAA,UAAwBC,KAAxB,GAAA,qBAAA,CAAA,KAAA;AAEAD,MAAAA,cAAc,CAAA,IAAA,EAAO,YAAM;AACzBC,QAAAA,KAAK,CAAC;AACJC,UAAAA,KAAK,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EADH,CACG,CADH;AAEJC,UAAAA,KAAK,EAFD,CAAA;AAGJC,UAAAA,OAAO,EAAE;AAHL,SAAD,CAALH;AAQAI,QAAAA,KAAK,CAALA,iBAAAA,CAAAA,aAAAA,CAAAA,KAAAA;AACAA,QAAAA,KAAK,CAALA,MAAAA;AACAA,QAAAA,KAAK,CAALA,iBAAAA,CAAAA,aAAAA,CAAAA,IAAAA;AAXFL,OAAc,CAAdA;AAaD;;;;EA7BOF,c;SAFWD,U","sourcesContent":["import { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { ILayer } from '../../layer/ILayerService';\nimport { PassType } from '../IMultiPassRenderer';\nimport BaseNormalPass from './BaseNormalPass';\n\n/**\n * RenderPass，负责输出到后续 PostProcessor 的 readFBO 中\n */\n@injectable()\nexport default class RenderPass<\n  InitializationOptions = {}\n> extends BaseNormalPass<InitializationOptions> {\n  public getType() {\n    return PassType.Normal;\n  }\n\n  public getName() {\n    return 'render';\n  }\n\n  public init(layer: ILayer, config?: Partial<InitializationOptions>) {\n    super.init(layer, config);\n  }\n\n  public render(layer: ILayer) {\n    const { useFramebuffer, clear } = this.rendererService;\n    // const readFBO = layer.multiPassRenderer.getPostProcessor().getReadFBO();\n    useFramebuffer(null, () => {\n      clear({\n        color: [0, 0, 0, 0],\n        depth: 1,\n        stencil: 0,\n        // framebuffer: readFBO,\n      });\n\n      // render to post processor\n      layer.multiPassRenderer.setRenderFlag(false);\n      layer.render();\n      layer.multiPassRenderer.setRenderFlag(true);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}