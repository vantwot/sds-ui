{"ast":null,"code":"/**\n * The namespace for JSON-specific functions.\n */\nexport var JSONExt;\n\n(function (JSONExt) {\n  /**\n   * A shared frozen empty JSONObject\n   */\n  JSONExt.emptyObject = Object.freeze({});\n  /**\n   * A shared frozen empty JSONArray\n   */\n\n  JSONExt.emptyArray = Object.freeze([]);\n  /**\n   * Test whether a JSON value is a primitive.\n   *\n   * @param value - The JSON value of interest.\n   *\n   * @returns `true` if the value is a primitive,`false` otherwise.\n   */\n\n  function isPrimitive(value) {\n    return value === null || value === undefined || typeof value === 'boolean' || typeof value === 'number' || typeof value === 'string';\n  }\n\n  JSONExt.isPrimitive = isPrimitive;\n\n  function isArray(value) {\n    return Array.isArray(value);\n  }\n\n  JSONExt.isArray = isArray;\n\n  function isObject(value) {\n    return !isPrimitive(value) && !isArray(value);\n  }\n\n  JSONExt.isObject = isObject;\n  /**\n   * Compare two JSON values for deep equality.\n   *\n   * @param first - The first JSON value of interest.\n   *\n   * @param second - The second JSON value of interest.\n   *\n   * @returns `true` if the values are equivalent, `false` otherwise.\n   */\n\n  function deepEqual(first, second) {\n    // Check referential and primitive equality first.\n    if (first === second) {\n      return true;\n    } // If one is a primitive, the `===` check ruled out the other.\n\n\n    if (isPrimitive(first) || isPrimitive(second)) {\n      return false;\n    } // Test whether they are arrays.\n\n\n    var a1 = isArray(first);\n    var a2 = isArray(second); // Bail if the types are different.\n\n    if (a1 !== a2) {\n      return false;\n    } // If they are both arrays, compare them.\n\n\n    if (a1 && a2) {\n      return deepArrayEqual(first, second);\n    } // At this point, they must both be objects.\n\n\n    return deepObjectEqual(first, second);\n  }\n\n  JSONExt.deepEqual = deepEqual;\n  /**\n   * Create a deep copy of a JSON value.\n   *\n   * @param value - The JSON value to copy.\n   *\n   * @returns A deep copy of the given JSON value.\n   */\n\n  function deepCopy(value) {\n    // Do nothing for primitive values.\n    if (isPrimitive(value)) {\n      return value;\n    } // Deep copy an array.\n\n\n    if (isArray(value)) {\n      return deepArrayCopy(value);\n    } // Deep copy an object.\n\n\n    return deepObjectCopy(value);\n  }\n\n  JSONExt.deepCopy = deepCopy;\n  /**\n   * Compare two JSON arrays for deep equality.\n   */\n\n  function deepArrayEqual(first, second) {\n    // Check referential equality first.\n    if (first === second) {\n      return true;\n    } // Test the arrays for equal length.\n\n\n    if (first.length !== second.length) {\n      return false;\n    } // Compare the values for equality.\n\n\n    for (var i = 0, n = first.length; i < n; i += 1) {\n      if (!deepEqual(first[i], second[i])) {\n        return false;\n      }\n    } // At this point, the arrays are equal.\n\n\n    return true;\n  }\n  /**\n   * Compare two JSON objects for deep equality.\n   */\n\n\n  function deepObjectEqual(first, second) {\n    // Check referential equality first.\n    if (first === second) {\n      return true;\n    } // Check for the first object's keys in the second object.\n    // eslint-disable-next-line\n\n\n    for (var key in first) {\n      if (!(key in second)) {\n        return false;\n      }\n    } // Check for the second object's keys in the first object.\n    // eslint-disable-next-line\n\n\n    for (var _key in second) {\n      if (!(_key in first)) {\n        return false;\n      }\n    } // Compare the values for equality.\n    // eslint-disable-next-line\n\n\n    for (var _key2 in first) {\n      if (!deepEqual(first[_key2], second[_key2])) {\n        return false;\n      }\n    } // At this point, the objects are equal.\n\n\n    return true;\n  }\n  /**\n   * Create a deep copy of a JSON array.\n   */\n\n\n  function deepArrayCopy(value) {\n    var result = new Array(value.length); // eslint-disable-line\n\n    for (var i = 0, n = value.length; i < n; i += 1) {\n      result[i] = deepCopy(value[i]);\n    }\n\n    return result;\n  }\n  /**\n   * Create a deep copy of a JSON object.\n   */\n\n\n  function deepObjectCopy(value) {\n    var result = {};\n    Object.keys(value).forEach(function (key) {\n      result[key] = deepCopy(value[key]);\n    });\n    return result;\n  }\n})(JSONExt || (JSONExt = {}));","map":{"version":3,"sources":["../../../src/util/json/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * The namespace for JSON-specific functions.\n */\nexport var JSONExt;\n(function (JSONExt) {\n    /**\n     * A shared frozen empty JSONObject\n     */\n    JSONExt.emptyObject = Object.freeze({});\n    /**\n     * A shared frozen empty JSONArray\n     */\n    JSONExt.emptyArray = Object.freeze([]);\n    /**\n     * Test whether a JSON value is a primitive.\n     *\n     * @param value - The JSON value of interest.\n     *\n     * @returns `true` if the value is a primitive,`false` otherwise.\n     */\n    function isPrimitive(value) {\n        return (value === null ||\n            value === undefined ||\n            typeof value === 'boolean' ||\n            typeof value === 'number' ||\n            typeof value === 'string');\n    }\n    JSONExt.isPrimitive = isPrimitive;\n    function isArray(value) {\n        return Array.isArray(value);\n    }\n    JSONExt.isArray = isArray;\n    function isObject(value) {\n        return !isPrimitive(value) && !isArray(value);\n    }\n    JSONExt.isObject = isObject;\n    /**\n     * Compare two JSON values for deep equality.\n     *\n     * @param first - The first JSON value of interest.\n     *\n     * @param second - The second JSON value of interest.\n     *\n     * @returns `true` if the values are equivalent, `false` otherwise.\n     */\n    function deepEqual(first, second) {\n        // Check referential and primitive equality first.\n        if (first === second) {\n            return true;\n        }\n        // If one is a primitive, the `===` check ruled out the other.\n        if (isPrimitive(first) || isPrimitive(second)) {\n            return false;\n        }\n        // Test whether they are arrays.\n        const a1 = isArray(first);\n        const a2 = isArray(second);\n        // Bail if the types are different.\n        if (a1 !== a2) {\n            return false;\n        }\n        // If they are both arrays, compare them.\n        if (a1 && a2) {\n            return deepArrayEqual(first, second);\n        }\n        // At this point, they must both be objects.\n        return deepObjectEqual(first, second);\n    }\n    JSONExt.deepEqual = deepEqual;\n    /**\n     * Create a deep copy of a JSON value.\n     *\n     * @param value - The JSON value to copy.\n     *\n     * @returns A deep copy of the given JSON value.\n     */\n    function deepCopy(value) {\n        // Do nothing for primitive values.\n        if (isPrimitive(value)) {\n            return value;\n        }\n        // Deep copy an array.\n        if (isArray(value)) {\n            return deepArrayCopy(value);\n        }\n        // Deep copy an object.\n        return deepObjectCopy(value);\n    }\n    JSONExt.deepCopy = deepCopy;\n    /**\n     * Compare two JSON arrays for deep equality.\n     */\n    function deepArrayEqual(first, second) {\n        // Check referential equality first.\n        if (first === second) {\n            return true;\n        }\n        // Test the arrays for equal length.\n        if (first.length !== second.length) {\n            return false;\n        }\n        // Compare the values for equality.\n        for (let i = 0, n = first.length; i < n; i += 1) {\n            if (!deepEqual(first[i], second[i])) {\n                return false;\n            }\n        }\n        // At this point, the arrays are equal.\n        return true;\n    }\n    /**\n     * Compare two JSON objects for deep equality.\n     */\n    function deepObjectEqual(first, second) {\n        // Check referential equality first.\n        if (first === second) {\n            return true;\n        }\n        // Check for the first object's keys in the second object.\n        // eslint-disable-next-line\n        for (const key in first) {\n            if (!(key in second)) {\n                return false;\n            }\n        }\n        // Check for the second object's keys in the first object.\n        // eslint-disable-next-line\n        for (const key in second) {\n            if (!(key in first)) {\n                return false;\n            }\n        }\n        // Compare the values for equality.\n        // eslint-disable-next-line\n        for (const key in first) {\n            if (!deepEqual(first[key], second[key])) {\n                return false;\n            }\n        }\n        // At this point, the objects are equal.\n        return true;\n    }\n    /**\n     * Create a deep copy of a JSON array.\n     */\n    function deepArrayCopy(value) {\n        const result = new Array(value.length); // eslint-disable-line\n        for (let i = 0, n = value.length; i < n; i += 1) {\n            result[i] = deepCopy(value[i]);\n        }\n        return result;\n    }\n    /**\n     * Create a deep copy of a JSON object.\n     */\n    function deepObjectCopy(value) {\n        const result = {};\n        Object.keys(value).forEach((key) => {\n            result[key] = deepCopy(value[key]);\n        });\n        return result;\n    }\n})(JSONExt || (JSONExt = {}));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}