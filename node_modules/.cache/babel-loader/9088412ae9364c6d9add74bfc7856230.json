{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-unused-vars */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Rectangle, Point } from '../geometry';\nimport { ArrayExt, ObjectExt, Dom, FunctionExt, Vector } from '../util';\nimport { Registry } from '../registry/registry';\nimport { ConnectionStrategy } from '../registry/connection-strategy';\nimport { View } from './view';\nimport { Cache } from './cache';\nimport { Markup } from './markup';\nimport { ToolsView } from './tool';\nimport { AttrManager } from './attr';\nimport { FlagManager } from './flag';\nexport class CellView extends View {\n  constructor(cell) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    this.cell = cell;\n    this.options = this.ensureOptions(options);\n    this.graph = this.options.graph;\n    this.attr = new AttrManager(this);\n    this.flag = new FlagManager(this, this.options.actions, this.options.bootstrap);\n    this.cache = new Cache(this);\n    this.setContainer(this.ensureContainer());\n    this.setup();\n    this.$(this.container).data('view', this);\n    this.init();\n  }\n\n  static getDefaults() {\n    return this.defaults;\n  }\n\n  static config(options) {\n    this.defaults = this.getOptions(options);\n  }\n\n  static getOptions(options) {\n    const mergeActions = (arr1, arr2) => {\n      if (arr2 != null) {\n        return ArrayExt.uniq([...(Array.isArray(arr1) ? arr1 : [arr1]), ...(Array.isArray(arr2) ? arr2 : [arr2])]);\n      }\n\n      return Array.isArray(arr1) ? [...arr1] : [arr1];\n    };\n\n    const ret = ObjectExt.cloneDeep(this.getDefaults());\n\n    const {\n      bootstrap,\n      actions,\n      events,\n      documentEvents\n    } = options,\n          others = __rest(options, [\"bootstrap\", \"actions\", \"events\", \"documentEvents\"]);\n\n    if (bootstrap) {\n      ret.bootstrap = mergeActions(ret.bootstrap, bootstrap);\n    }\n\n    if (actions) {\n      Object.keys(actions).forEach(key => {\n        const val = actions[key];\n        const raw = ret.actions[key];\n\n        if (val && raw) {\n          ret.actions[key] = mergeActions(raw, val);\n        } else if (val) {\n          ret.actions[key] = mergeActions(val);\n        }\n      });\n    }\n\n    if (events) {\n      ret.events = Object.assign(Object.assign({}, ret.events), events);\n    }\n\n    if (options.documentEvents) {\n      ret.documentEvents = Object.assign(Object.assign({}, ret.documentEvents), documentEvents);\n    }\n\n    return ObjectExt.merge(ret, others);\n  }\n\n  get [Symbol.toStringTag]() {\n    return CellView.toStringTag;\n  }\n\n  init() {}\n\n  onRemove() {\n    this.removeTools();\n  }\n\n  get priority() {\n    return this.options.priority;\n  }\n\n  get rootSelector() {\n    return this.options.rootSelector;\n  }\n\n  getConstructor() {\n    return this.constructor;\n  }\n\n  ensureOptions(options) {\n    return this.getConstructor().getOptions(options);\n  }\n\n  getContainerTagName() {\n    return this.options.isSvgElement ? 'g' : 'div';\n  }\n\n  getContainerStyle() {}\n\n  getContainerAttrs() {\n    return {\n      'data-cell-id': this.cell.id,\n      'data-shape': this.cell.shape\n    };\n  }\n\n  getContainerClassName() {\n    return this.prefixClassName('cell');\n  }\n\n  ensureContainer() {\n    return View.createElement(this.getContainerTagName(), this.options.isSvgElement);\n  }\n\n  setContainer(container) {\n    if (this.container !== container) {\n      this.undelegateEvents();\n      this.container = container;\n\n      if (this.options.events != null) {\n        this.delegateEvents(this.options.events);\n      }\n\n      const attrs = this.getContainerAttrs();\n\n      if (attrs != null) {\n        this.setAttrs(attrs, container);\n      }\n\n      const style = this.getContainerStyle();\n\n      if (style != null) {\n        this.setStyle(style, container);\n      }\n\n      const className = this.getContainerClassName();\n\n      if (className != null) {\n        this.addClass(className, container);\n      }\n    }\n\n    return this;\n  }\n\n  isNodeView() {\n    return false;\n  }\n\n  isEdgeView() {\n    return false;\n  }\n\n  render() {\n    return this;\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  confirmUpdate(flag) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return 0;\n  }\n\n  getBootstrapFlag() {\n    return this.flag.getBootstrapFlag();\n  }\n\n  getFlag(actions) {\n    return this.flag.getFlag(actions);\n  }\n\n  hasAction(flag, actions) {\n    return this.flag.hasAction(flag, actions);\n  }\n\n  removeAction(flag, actions) {\n    return this.flag.removeAction(flag, actions);\n  }\n\n  handleAction(flag, action, handle, additionalRemovedActions) {\n    if (this.hasAction(flag, action)) {\n      handle();\n      const removedFlags = [action];\n\n      if (additionalRemovedActions) {\n        if (typeof additionalRemovedActions === 'string') {\n          removedFlags.push(additionalRemovedActions);\n        } else {\n          removedFlags.push(...additionalRemovedActions);\n        }\n      }\n\n      return this.removeAction(flag, removedFlags);\n    }\n\n    return flag;\n  }\n\n  setup() {\n    this.cell.on('changed', _ref => {\n      let {\n        options\n      } = _ref;\n      return this.onAttrsChange(options);\n    });\n  }\n\n  onAttrsChange(options) {\n    let flag = this.flag.getChangedFlag();\n\n    if (options.updated || !flag) {\n      return;\n    }\n\n    if (options.dirty && this.hasAction(flag, 'update')) {\n      flag |= this.getFlag('render'); // eslint-disable-line no-bitwise\n    } // tool changes should be sync render\n\n\n    if (options.toolId) {\n      options.async = false;\n    }\n\n    if (this.graph != null) {\n      this.graph.renderer.requestViewUpdate(this, flag, this.priority, options);\n    }\n  }\n\n  parseJSONMarkup(markup, rootElem) {\n    const result = Markup.parseJSONMarkup(markup);\n    const selectors = result.selectors;\n    const rootSelector = this.rootSelector;\n\n    if (rootElem && rootSelector) {\n      if (selectors[rootSelector]) {\n        throw new Error('Invalid root selector');\n      }\n\n      selectors[rootSelector] = rootElem;\n    }\n\n    return result;\n  }\n\n  can(feature) {\n    let interacting = this.graph.options.interacting;\n\n    if (typeof interacting === 'function') {\n      interacting = FunctionExt.call(interacting, this.graph, this);\n    }\n\n    if (typeof interacting === 'object') {\n      let val = interacting[feature];\n\n      if (typeof val === 'function') {\n        val = FunctionExt.call(val, this.graph, this);\n      }\n\n      return val !== false;\n    }\n\n    if (typeof interacting === 'boolean') {\n      return interacting;\n    }\n\n    return false;\n  }\n\n  cleanCache() {\n    this.cache.clean();\n    return this;\n  }\n\n  getCache(elem) {\n    return this.cache.get(elem);\n  }\n\n  getDataOfElement(elem) {\n    return this.cache.getData(elem);\n  }\n\n  getMatrixOfElement(elem) {\n    return this.cache.getMatrix(elem);\n  }\n\n  getShapeOfElement(elem) {\n    return this.cache.getShape(elem);\n  }\n\n  getScaleOfElement(node, scalableNode) {\n    let sx;\n    let sy;\n\n    if (scalableNode && scalableNode.contains(node)) {\n      const scale = Dom.scale(scalableNode);\n      sx = 1 / scale.sx;\n      sy = 1 / scale.sy;\n    } else {\n      sx = 1;\n      sy = 1;\n    }\n\n    return {\n      sx,\n      sy\n    };\n  }\n\n  getBoundingRectOfElement(elem) {\n    return this.cache.getBoundingRect(elem);\n  }\n\n  getBBoxOfElement(elem) {\n    const rect = this.getBoundingRectOfElement(elem);\n    const matrix = this.getMatrixOfElement(elem);\n    const rm = this.getRootRotatedMatrix();\n    const tm = this.getRootTranslatedMatrix();\n    return Dom.transformRectangle(rect, tm.multiply(rm).multiply(matrix));\n  }\n\n  getUnrotatedBBoxOfElement(elem) {\n    const rect = this.getBoundingRectOfElement(elem);\n    const matrix = this.getMatrixOfElement(elem);\n    const tm = this.getRootTranslatedMatrix();\n    return Dom.transformRectangle(rect, tm.multiply(matrix));\n  }\n\n  getBBox() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let bbox;\n\n    if (options.useCellGeometry) {\n      const cell = this.cell;\n      const angle = cell.isNode() ? cell.getAngle() : 0;\n      bbox = cell.getBBox().bbox(angle);\n    } else {\n      bbox = this.getBBoxOfElement(this.container);\n    }\n\n    return this.graph.localToGraph(bbox);\n  }\n\n  getRootTranslatedMatrix() {\n    const cell = this.cell;\n    const pos = cell.isNode() ? cell.getPosition() : {\n      x: 0,\n      y: 0\n    };\n    return Dom.createSVGMatrix().translate(pos.x, pos.y);\n  }\n\n  getRootRotatedMatrix() {\n    let matrix = Dom.createSVGMatrix();\n    const cell = this.cell;\n    const angle = cell.isNode() ? cell.getAngle() : 0;\n\n    if (angle) {\n      const bbox = cell.getBBox();\n      const cx = bbox.width / 2;\n      const cy = bbox.height / 2;\n      matrix = matrix.translate(cx, cy).rotate(angle).translate(-cx, -cy);\n    }\n\n    return matrix;\n  }\n\n  findMagnet() {\n    let elem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.container;\n    // If the overall cell has set `magnet === false`, then returns\n    // `undefined` to announce there is no magnet found for this cell.\n    // This is especially useful to set on cells that have 'ports'.\n    // In this case, only the ports have set `magnet === true` and the\n    // overall element has `magnet === false`.\n    return this.findByAttr('magnet', elem);\n  }\n\n  updateAttrs(rootNode, attrs) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (options.rootBBox == null) {\n      options.rootBBox = new Rectangle();\n    }\n\n    if (options.selectors == null) {\n      options.selectors = this.selectors;\n    }\n\n    this.attr.update(rootNode, attrs, options);\n  }\n\n  isEdgeElement(magnet) {\n    return this.cell.isEdge() && (magnet == null || magnet === this.container);\n  } // #region highlight\n\n\n  prepareHighlight(elem) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const magnet = elem && this.$(elem)[0] || this.container;\n    options.partial = magnet === this.container;\n    return magnet;\n  }\n\n  highlight(elem) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const magnet = this.prepareHighlight(elem, options);\n    this.notify('cell:highlight', {\n      magnet,\n      options,\n      view: this,\n      cell: this.cell\n    });\n\n    if (this.isEdgeView()) {\n      this.notify('edge:highlight', {\n        magnet,\n        options,\n        view: this,\n        edge: this.cell,\n        cell: this.cell\n      });\n    } else if (this.isNodeView()) {\n      this.notify('node:highlight', {\n        magnet,\n        options,\n        view: this,\n        node: this.cell,\n        cell: this.cell\n      });\n    }\n\n    return this;\n  }\n\n  unhighlight(elem) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const magnet = this.prepareHighlight(elem, options);\n    this.notify('cell:unhighlight', {\n      magnet,\n      options,\n      view: this,\n      cell: this.cell\n    });\n\n    if (this.isNodeView()) {\n      this.notify('node:unhighlight', {\n        magnet,\n        options,\n        view: this,\n        node: this.cell,\n        cell: this.cell\n      });\n    } else if (this.isEdgeView()) {\n      this.notify('edge:unhighlight', {\n        magnet,\n        options,\n        view: this,\n        edge: this.cell,\n        cell: this.cell\n      });\n    }\n\n    return this;\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  notifyUnhighlight(magnet, options) {} // #endregion\n\n\n  getEdgeTerminal(magnet, x, y, edge, type) {\n    const cell = this.cell;\n    const portId = this.findAttr('port', magnet);\n    const selector = magnet.getAttribute('data-selector');\n    const terminal = {\n      cell: cell.id\n    };\n\n    if (selector != null) {\n      terminal.magnet = selector;\n    }\n\n    if (portId != null) {\n      terminal.port = portId;\n\n      if (cell.isNode()) {\n        if (!cell.hasPort(portId) && selector == null) {\n          // port created via the `port` attribute (not API)\n          terminal.selector = this.getSelector(magnet);\n        }\n      }\n    } else if (selector == null && this.container !== magnet) {\n      terminal.selector = this.getSelector(magnet);\n    }\n\n    return this.customizeEdgeTerminal(terminal, magnet, x, y, edge, type);\n  }\n\n  customizeEdgeTerminal(terminal, magnet, x, y, edge, type) {\n    const raw = edge.getStrategy() || this.graph.options.connecting.strategy;\n\n    if (raw) {\n      const name = typeof raw === 'string' ? raw : raw.name;\n      const args = typeof raw === 'string' ? {} : raw.args || {};\n      const registry = ConnectionStrategy.registry;\n\n      if (name) {\n        const fn = registry.get(name);\n\n        if (fn == null) {\n          return registry.onNotFound(name);\n        }\n\n        const result = FunctionExt.call(fn, this.graph, terminal, this, magnet, new Point(x, y), edge, type, args);\n\n        if (result) {\n          return result;\n        }\n      }\n    }\n\n    return terminal;\n  }\n\n  getMagnetFromEdgeTerminal(terminal) {\n    const cell = this.cell;\n    const root = this.container;\n    const portId = terminal.port;\n    let selector = terminal.magnet;\n    let magnet;\n\n    if (portId != null && cell.isNode() && cell.hasPort(portId)) {\n      magnet = this.findPortElem(portId, selector) || root;\n    } else {\n      if (!selector) {\n        selector = terminal.selector;\n      }\n\n      if (!selector && portId != null) {\n        selector = `[port=\"${portId}\"]`;\n      }\n\n      magnet = this.findOne(selector, root, this.selectors);\n    }\n\n    return magnet;\n  } // #region animate\n\n\n  animate(elem, options) {\n    const target = typeof elem === 'string' ? this.findOne(elem) : elem;\n\n    if (target == null) {\n      throw new Error('Invalid animation element.');\n    }\n\n    const parent = target.parentNode;\n\n    const revert = () => {\n      if (!parent) {\n        Dom.remove(target);\n      }\n    };\n\n    const vTarget = Vector.create(target);\n\n    if (!parent) {\n      vTarget.appendTo(this.graph.view.stage);\n    }\n\n    const onComplete = options.complete;\n\n    options.complete = e => {\n      revert();\n\n      if (onComplete) {\n        onComplete(e);\n      }\n    };\n\n    return vTarget.animate(options);\n  }\n\n  animateTransform(elem, options) {\n    const target = typeof elem === 'string' ? this.findOne(elem) : elem;\n\n    if (target == null) {\n      throw new Error('Invalid animation element.');\n    }\n\n    const parent = target.parentNode;\n\n    const revert = () => {\n      if (!parent) {\n        Dom.remove(target);\n      }\n    };\n\n    const vTarget = Vector.create(target);\n\n    if (!parent) {\n      vTarget.appendTo(this.graph.view.stage);\n    }\n\n    const onComplete = options.complete;\n\n    options.complete = e => {\n      revert();\n\n      if (onComplete) {\n        onComplete(e);\n      }\n    };\n\n    return vTarget.animateTransform(options);\n  }\n\n  hasTools(name) {\n    const tools = this.tools;\n\n    if (tools == null) {\n      return false;\n    }\n\n    if (name == null) {\n      return true;\n    }\n\n    return tools.name === name;\n  }\n\n  addTools(config) {\n    if (!this.can('toolsAddable')) {\n      return this;\n    }\n\n    this.removeTools();\n\n    if (config) {\n      const tools = ToolsView.isToolsView(config) ? config : new ToolsView(config);\n      this.tools = tools;\n      this.graph.on('tools:hide', this.hideTools, this);\n      this.graph.on('tools:show', this.showTools, this);\n      this.graph.on('tools:remove', this.removeTools, this);\n      tools.config({\n        view: this\n      });\n      tools.mount();\n    }\n\n    return this;\n  }\n\n  updateTools() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (this.tools) {\n      this.tools.update(options);\n    }\n\n    return this;\n  }\n\n  removeTools() {\n    if (this.tools) {\n      this.tools.remove();\n      this.graph.off('tools:hide', this.hideTools, this);\n      this.graph.off('tools:show', this.showTools, this);\n      this.graph.off('tools:remove', this.removeTools, this);\n      this.tools = null;\n    }\n\n    return this;\n  }\n\n  hideTools() {\n    if (this.tools) {\n      this.tools.hide();\n    }\n\n    return this;\n  }\n\n  showTools() {\n    if (this.tools) {\n      this.tools.show();\n    }\n\n    return this;\n  }\n\n  renderTools() {\n    const tools = this.cell.getTools();\n    this.addTools(tools);\n    return this;\n  }\n\n  notify(name, args) {\n    this.trigger(name, args);\n    this.graph.trigger(name, args);\n    return this;\n  }\n\n  getEventArgs(e, x, y) {\n    const view = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n    const cell = view.cell;\n\n    if (x == null || y == null) {\n      return {\n        e,\n        view,\n        cell\n      };\n    }\n\n    return {\n      e,\n      x,\n      y,\n      view,\n      cell\n    };\n  }\n\n  onClick(e, x, y) {\n    this.notify('cell:click', this.getEventArgs(e, x, y));\n  }\n\n  onDblClick(e, x, y) {\n    this.notify('cell:dblclick', this.getEventArgs(e, x, y));\n  }\n\n  onContextMenu(e, x, y) {\n    this.notify('cell:contextmenu', this.getEventArgs(e, x, y));\n  }\n\n  onMouseDown(e, x, y) {\n    if (this.cell.model) {\n      this.cachedModelForMouseEvent = this.cell.model;\n      this.cachedModelForMouseEvent.startBatch('mouse');\n    }\n\n    this.notify('cell:mousedown', this.getEventArgs(e, x, y));\n  }\n\n  onMouseUp(e, x, y) {\n    this.notify('cell:mouseup', this.getEventArgs(e, x, y));\n\n    if (this.cachedModelForMouseEvent) {\n      this.cachedModelForMouseEvent.stopBatch('mouse', {\n        cell: this.cell\n      });\n      this.cachedModelForMouseEvent = null;\n    }\n  }\n\n  onMouseMove(e, x, y) {\n    this.notify('cell:mousemove', this.getEventArgs(e, x, y));\n  }\n\n  onMouseOver(e) {\n    this.notify('cell:mouseover', this.getEventArgs(e));\n  }\n\n  onMouseOut(e) {\n    this.notify('cell:mouseout', this.getEventArgs(e));\n  }\n\n  onMouseEnter(e) {\n    this.notify('cell:mouseenter', this.getEventArgs(e));\n  }\n\n  onMouseLeave(e) {\n    this.notify('cell:mouseleave', this.getEventArgs(e));\n  }\n\n  onMouseWheel(e, x, y, delta) {\n    this.notify('cell:mousewheel', Object.assign({\n      delta\n    }, this.getEventArgs(e, x, y)));\n  }\n\n  onCustomEvent(e, name, x, y) {\n    this.notify('cell:customevent', Object.assign({\n      name\n    }, this.getEventArgs(e, x, y)));\n    this.notify(name, Object.assign({}, this.getEventArgs(e, x, y)));\n  }\n\n  onMagnetMouseDown(e, magnet, x, y) {}\n\n  onMagnetDblClick(e, magnet, x, y) {}\n\n  onMagnetContextMenu(e, magnet, x, y) {}\n\n  onLabelMouseDown(e, x, y) {}\n\n  checkMouseleave(e) {\n    const graph = this.graph;\n\n    if (graph.renderer.isAsync()) {\n      // Do the updates of the current view synchronously now\n      graph.renderer.dumpView(this);\n    }\n\n    const target = this.getEventTarget(e, {\n      fromPoint: true\n    });\n    const view = graph.renderer.findViewByElem(target);\n\n    if (view === this) {\n      return;\n    } // Leaving the current view\n\n\n    this.onMouseLeave(e);\n\n    if (!view) {\n      return;\n    } // Entering another view\n\n\n    view.onMouseEnter(e);\n  }\n\n}\nCellView.defaults = {\n  isSvgElement: true,\n  rootSelector: 'root',\n  priority: 0,\n  bootstrap: [],\n  actions: {}\n};\n\n(function (CellView) {\n  CellView.Flag = FlagManager;\n  CellView.Attr = AttrManager;\n})(CellView || (CellView = {}));\n\n(function (CellView) {\n  CellView.toStringTag = `X6.${CellView.name}`;\n\n  function isCellView(instance) {\n    if (instance == null) {\n      return false;\n    }\n\n    if (instance instanceof CellView) {\n      return true;\n    }\n\n    const tag = instance[Symbol.toStringTag];\n    const view = instance;\n\n    if ((tag == null || tag === CellView.toStringTag) && typeof view.isNodeView === 'function' && typeof view.isEdgeView === 'function' && typeof view.confirmUpdate === 'function') {\n      return true;\n    }\n\n    return false;\n  }\n\n  CellView.isCellView = isCellView;\n})(CellView || (CellView = {})); // decorators\n// ----\n\n\n(function (CellView) {\n  function priority(value) {\n    return function (ctor) {\n      ctor.config({\n        priority: value\n      });\n    };\n  }\n\n  CellView.priority = priority;\n\n  function bootstrap(actions) {\n    return function (ctor) {\n      ctor.config({\n        bootstrap: actions\n      });\n    };\n  }\n\n  CellView.bootstrap = bootstrap;\n})(CellView || (CellView = {}));\n\n(function (CellView) {\n  CellView.registry = Registry.create({\n    type: 'view'\n  });\n})(CellView || (CellView = {}));","map":{"version":3,"sources":["../../src/view/cell.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { Rectangle, Point } from '../geometry';\nimport { ArrayExt, ObjectExt, Dom, FunctionExt, Vector } from '../util';\nimport { Registry } from '../registry/registry';\nimport { ConnectionStrategy } from '../registry/connection-strategy';\nimport { View } from './view';\nimport { Cache } from './cache';\nimport { Markup } from './markup';\nimport { ToolsView } from './tool';\nimport { AttrManager } from './attr';\nimport { FlagManager } from './flag';\nexport class CellView extends View {\n    constructor(cell, options = {}) {\n        super();\n        this.cell = cell;\n        this.options = this.ensureOptions(options);\n        this.graph = this.options.graph;\n        this.attr = new AttrManager(this);\n        this.flag = new FlagManager(this, this.options.actions, this.options.bootstrap);\n        this.cache = new Cache(this);\n        this.setContainer(this.ensureContainer());\n        this.setup();\n        this.$(this.container).data('view', this);\n        this.init();\n    }\n    static getDefaults() {\n        return this.defaults;\n    }\n    static config(options) {\n        this.defaults = this.getOptions(options);\n    }\n    static getOptions(options) {\n        const mergeActions = (arr1, arr2) => {\n            if (arr2 != null) {\n                return ArrayExt.uniq([\n                    ...(Array.isArray(arr1) ? arr1 : [arr1]),\n                    ...(Array.isArray(arr2) ? arr2 : [arr2]),\n                ]);\n            }\n            return Array.isArray(arr1) ? [...arr1] : [arr1];\n        };\n        const ret = ObjectExt.cloneDeep(this.getDefaults());\n        const { bootstrap, actions, events, documentEvents } = options, others = __rest(options, [\"bootstrap\", \"actions\", \"events\", \"documentEvents\"]);\n        if (bootstrap) {\n            ret.bootstrap = mergeActions(ret.bootstrap, bootstrap);\n        }\n        if (actions) {\n            Object.keys(actions).forEach((key) => {\n                const val = actions[key];\n                const raw = ret.actions[key];\n                if (val && raw) {\n                    ret.actions[key] = mergeActions(raw, val);\n                }\n                else if (val) {\n                    ret.actions[key] = mergeActions(val);\n                }\n            });\n        }\n        if (events) {\n            ret.events = Object.assign(Object.assign({}, ret.events), events);\n        }\n        if (options.documentEvents) {\n            ret.documentEvents = Object.assign(Object.assign({}, ret.documentEvents), documentEvents);\n        }\n        return ObjectExt.merge(ret, others);\n    }\n    get [Symbol.toStringTag]() {\n        return CellView.toStringTag;\n    }\n    init() { }\n    onRemove() {\n        this.removeTools();\n    }\n    get priority() {\n        return this.options.priority;\n    }\n    get rootSelector() {\n        return this.options.rootSelector;\n    }\n    getConstructor() {\n        return this.constructor;\n    }\n    ensureOptions(options) {\n        return this.getConstructor().getOptions(options);\n    }\n    getContainerTagName() {\n        return this.options.isSvgElement ? 'g' : 'div';\n    }\n    getContainerStyle() { }\n    getContainerAttrs() {\n        return {\n            'data-cell-id': this.cell.id,\n            'data-shape': this.cell.shape,\n        };\n    }\n    getContainerClassName() {\n        return this.prefixClassName('cell');\n    }\n    ensureContainer() {\n        return View.createElement(this.getContainerTagName(), this.options.isSvgElement);\n    }\n    setContainer(container) {\n        if (this.container !== container) {\n            this.undelegateEvents();\n            this.container = container;\n            if (this.options.events != null) {\n                this.delegateEvents(this.options.events);\n            }\n            const attrs = this.getContainerAttrs();\n            if (attrs != null) {\n                this.setAttrs(attrs, container);\n            }\n            const style = this.getContainerStyle();\n            if (style != null) {\n                this.setStyle(style, container);\n            }\n            const className = this.getContainerClassName();\n            if (className != null) {\n                this.addClass(className, container);\n            }\n        }\n        return this;\n    }\n    isNodeView() {\n        return false;\n    }\n    isEdgeView() {\n        return false;\n    }\n    render() {\n        return this;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    confirmUpdate(flag, options = {}) {\n        return 0;\n    }\n    getBootstrapFlag() {\n        return this.flag.getBootstrapFlag();\n    }\n    getFlag(actions) {\n        return this.flag.getFlag(actions);\n    }\n    hasAction(flag, actions) {\n        return this.flag.hasAction(flag, actions);\n    }\n    removeAction(flag, actions) {\n        return this.flag.removeAction(flag, actions);\n    }\n    handleAction(flag, action, handle, additionalRemovedActions) {\n        if (this.hasAction(flag, action)) {\n            handle();\n            const removedFlags = [action];\n            if (additionalRemovedActions) {\n                if (typeof additionalRemovedActions === 'string') {\n                    removedFlags.push(additionalRemovedActions);\n                }\n                else {\n                    removedFlags.push(...additionalRemovedActions);\n                }\n            }\n            return this.removeAction(flag, removedFlags);\n        }\n        return flag;\n    }\n    setup() {\n        this.cell.on('changed', ({ options }) => this.onAttrsChange(options));\n    }\n    onAttrsChange(options) {\n        let flag = this.flag.getChangedFlag();\n        if (options.updated || !flag) {\n            return;\n        }\n        if (options.dirty && this.hasAction(flag, 'update')) {\n            flag |= this.getFlag('render'); // eslint-disable-line no-bitwise\n        }\n        // tool changes should be sync render\n        if (options.toolId) {\n            options.async = false;\n        }\n        if (this.graph != null) {\n            this.graph.renderer.requestViewUpdate(this, flag, this.priority, options);\n        }\n    }\n    parseJSONMarkup(markup, rootElem) {\n        const result = Markup.parseJSONMarkup(markup);\n        const selectors = result.selectors;\n        const rootSelector = this.rootSelector;\n        if (rootElem && rootSelector) {\n            if (selectors[rootSelector]) {\n                throw new Error('Invalid root selector');\n            }\n            selectors[rootSelector] = rootElem;\n        }\n        return result;\n    }\n    can(feature) {\n        let interacting = this.graph.options.interacting;\n        if (typeof interacting === 'function') {\n            interacting = FunctionExt.call(interacting, this.graph, this);\n        }\n        if (typeof interacting === 'object') {\n            let val = interacting[feature];\n            if (typeof val === 'function') {\n                val = FunctionExt.call(val, this.graph, this);\n            }\n            return val !== false;\n        }\n        if (typeof interacting === 'boolean') {\n            return interacting;\n        }\n        return false;\n    }\n    cleanCache() {\n        this.cache.clean();\n        return this;\n    }\n    getCache(elem) {\n        return this.cache.get(elem);\n    }\n    getDataOfElement(elem) {\n        return this.cache.getData(elem);\n    }\n    getMatrixOfElement(elem) {\n        return this.cache.getMatrix(elem);\n    }\n    getShapeOfElement(elem) {\n        return this.cache.getShape(elem);\n    }\n    getScaleOfElement(node, scalableNode) {\n        let sx;\n        let sy;\n        if (scalableNode && scalableNode.contains(node)) {\n            const scale = Dom.scale(scalableNode);\n            sx = 1 / scale.sx;\n            sy = 1 / scale.sy;\n        }\n        else {\n            sx = 1;\n            sy = 1;\n        }\n        return { sx, sy };\n    }\n    getBoundingRectOfElement(elem) {\n        return this.cache.getBoundingRect(elem);\n    }\n    getBBoxOfElement(elem) {\n        const rect = this.getBoundingRectOfElement(elem);\n        const matrix = this.getMatrixOfElement(elem);\n        const rm = this.getRootRotatedMatrix();\n        const tm = this.getRootTranslatedMatrix();\n        return Dom.transformRectangle(rect, tm.multiply(rm).multiply(matrix));\n    }\n    getUnrotatedBBoxOfElement(elem) {\n        const rect = this.getBoundingRectOfElement(elem);\n        const matrix = this.getMatrixOfElement(elem);\n        const tm = this.getRootTranslatedMatrix();\n        return Dom.transformRectangle(rect, tm.multiply(matrix));\n    }\n    getBBox(options = {}) {\n        let bbox;\n        if (options.useCellGeometry) {\n            const cell = this.cell;\n            const angle = cell.isNode() ? cell.getAngle() : 0;\n            bbox = cell.getBBox().bbox(angle);\n        }\n        else {\n            bbox = this.getBBoxOfElement(this.container);\n        }\n        return this.graph.localToGraph(bbox);\n    }\n    getRootTranslatedMatrix() {\n        const cell = this.cell;\n        const pos = cell.isNode() ? cell.getPosition() : { x: 0, y: 0 };\n        return Dom.createSVGMatrix().translate(pos.x, pos.y);\n    }\n    getRootRotatedMatrix() {\n        let matrix = Dom.createSVGMatrix();\n        const cell = this.cell;\n        const angle = cell.isNode() ? cell.getAngle() : 0;\n        if (angle) {\n            const bbox = cell.getBBox();\n            const cx = bbox.width / 2;\n            const cy = bbox.height / 2;\n            matrix = matrix.translate(cx, cy).rotate(angle).translate(-cx, -cy);\n        }\n        return matrix;\n    }\n    findMagnet(elem = this.container) {\n        // If the overall cell has set `magnet === false`, then returns\n        // `undefined` to announce there is no magnet found for this cell.\n        // This is especially useful to set on cells that have 'ports'.\n        // In this case, only the ports have set `magnet === true` and the\n        // overall element has `magnet === false`.\n        return this.findByAttr('magnet', elem);\n    }\n    updateAttrs(rootNode, attrs, options = {}) {\n        if (options.rootBBox == null) {\n            options.rootBBox = new Rectangle();\n        }\n        if (options.selectors == null) {\n            options.selectors = this.selectors;\n        }\n        this.attr.update(rootNode, attrs, options);\n    }\n    isEdgeElement(magnet) {\n        return this.cell.isEdge() && (magnet == null || magnet === this.container);\n    }\n    // #region highlight\n    prepareHighlight(elem, options = {}) {\n        const magnet = (elem && this.$(elem)[0]) || this.container;\n        options.partial = magnet === this.container;\n        return magnet;\n    }\n    highlight(elem, options = {}) {\n        const magnet = this.prepareHighlight(elem, options);\n        this.notify('cell:highlight', {\n            magnet,\n            options,\n            view: this,\n            cell: this.cell,\n        });\n        if (this.isEdgeView()) {\n            this.notify('edge:highlight', {\n                magnet,\n                options,\n                view: this,\n                edge: this.cell,\n                cell: this.cell,\n            });\n        }\n        else if (this.isNodeView()) {\n            this.notify('node:highlight', {\n                magnet,\n                options,\n                view: this,\n                node: this.cell,\n                cell: this.cell,\n            });\n        }\n        return this;\n    }\n    unhighlight(elem, options = {}) {\n        const magnet = this.prepareHighlight(elem, options);\n        this.notify('cell:unhighlight', {\n            magnet,\n            options,\n            view: this,\n            cell: this.cell,\n        });\n        if (this.isNodeView()) {\n            this.notify('node:unhighlight', {\n                magnet,\n                options,\n                view: this,\n                node: this.cell,\n                cell: this.cell,\n            });\n        }\n        else if (this.isEdgeView()) {\n            this.notify('edge:unhighlight', {\n                magnet,\n                options,\n                view: this,\n                edge: this.cell,\n                cell: this.cell,\n            });\n        }\n        return this;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    notifyUnhighlight(magnet, options) { }\n    // #endregion\n    getEdgeTerminal(magnet, x, y, edge, type) {\n        const cell = this.cell;\n        const portId = this.findAttr('port', magnet);\n        const selector = magnet.getAttribute('data-selector');\n        const terminal = { cell: cell.id };\n        if (selector != null) {\n            terminal.magnet = selector;\n        }\n        if (portId != null) {\n            terminal.port = portId;\n            if (cell.isNode()) {\n                if (!cell.hasPort(portId) && selector == null) {\n                    // port created via the `port` attribute (not API)\n                    terminal.selector = this.getSelector(magnet);\n                }\n            }\n        }\n        else if (selector == null && this.container !== magnet) {\n            terminal.selector = this.getSelector(magnet);\n        }\n        return this.customizeEdgeTerminal(terminal, magnet, x, y, edge, type);\n    }\n    customizeEdgeTerminal(terminal, magnet, x, y, edge, type) {\n        const raw = edge.getStrategy() || this.graph.options.connecting.strategy;\n        if (raw) {\n            const name = typeof raw === 'string' ? raw : raw.name;\n            const args = typeof raw === 'string' ? {} : raw.args || {};\n            const registry = ConnectionStrategy.registry;\n            if (name) {\n                const fn = registry.get(name);\n                if (fn == null) {\n                    return registry.onNotFound(name);\n                }\n                const result = FunctionExt.call(fn, this.graph, terminal, this, magnet, new Point(x, y), edge, type, args);\n                if (result) {\n                    return result;\n                }\n            }\n        }\n        return terminal;\n    }\n    getMagnetFromEdgeTerminal(terminal) {\n        const cell = this.cell;\n        const root = this.container;\n        const portId = terminal.port;\n        let selector = terminal.magnet;\n        let magnet;\n        if (portId != null && cell.isNode() && cell.hasPort(portId)) {\n            magnet = this.findPortElem(portId, selector) || root;\n        }\n        else {\n            if (!selector) {\n                selector = terminal.selector;\n            }\n            if (!selector && portId != null) {\n                selector = `[port=\"${portId}\"]`;\n            }\n            magnet = this.findOne(selector, root, this.selectors);\n        }\n        return magnet;\n    }\n    // #region animate\n    animate(elem, options) {\n        const target = typeof elem === 'string' ? this.findOne(elem) : elem;\n        if (target == null) {\n            throw new Error('Invalid animation element.');\n        }\n        const parent = target.parentNode;\n        const revert = () => {\n            if (!parent) {\n                Dom.remove(target);\n            }\n        };\n        const vTarget = Vector.create(target);\n        if (!parent) {\n            vTarget.appendTo(this.graph.view.stage);\n        }\n        const onComplete = options.complete;\n        options.complete = (e) => {\n            revert();\n            if (onComplete) {\n                onComplete(e);\n            }\n        };\n        return vTarget.animate(options);\n    }\n    animateTransform(elem, options) {\n        const target = typeof elem === 'string' ? this.findOne(elem) : elem;\n        if (target == null) {\n            throw new Error('Invalid animation element.');\n        }\n        const parent = target.parentNode;\n        const revert = () => {\n            if (!parent) {\n                Dom.remove(target);\n            }\n        };\n        const vTarget = Vector.create(target);\n        if (!parent) {\n            vTarget.appendTo(this.graph.view.stage);\n        }\n        const onComplete = options.complete;\n        options.complete = (e) => {\n            revert();\n            if (onComplete) {\n                onComplete(e);\n            }\n        };\n        return vTarget.animateTransform(options);\n    }\n    hasTools(name) {\n        const tools = this.tools;\n        if (tools == null) {\n            return false;\n        }\n        if (name == null) {\n            return true;\n        }\n        return tools.name === name;\n    }\n    addTools(config) {\n        if (!this.can('toolsAddable')) {\n            return this;\n        }\n        this.removeTools();\n        if (config) {\n            const tools = ToolsView.isToolsView(config)\n                ? config\n                : new ToolsView(config);\n            this.tools = tools;\n            this.graph.on('tools:hide', this.hideTools, this);\n            this.graph.on('tools:show', this.showTools, this);\n            this.graph.on('tools:remove', this.removeTools, this);\n            tools.config({ view: this });\n            tools.mount();\n        }\n        return this;\n    }\n    updateTools(options = {}) {\n        if (this.tools) {\n            this.tools.update(options);\n        }\n        return this;\n    }\n    removeTools() {\n        if (this.tools) {\n            this.tools.remove();\n            this.graph.off('tools:hide', this.hideTools, this);\n            this.graph.off('tools:show', this.showTools, this);\n            this.graph.off('tools:remove', this.removeTools, this);\n            this.tools = null;\n        }\n        return this;\n    }\n    hideTools() {\n        if (this.tools) {\n            this.tools.hide();\n        }\n        return this;\n    }\n    showTools() {\n        if (this.tools) {\n            this.tools.show();\n        }\n        return this;\n    }\n    renderTools() {\n        const tools = this.cell.getTools();\n        this.addTools(tools);\n        return this;\n    }\n    notify(name, args) {\n        this.trigger(name, args);\n        this.graph.trigger(name, args);\n        return this;\n    }\n    getEventArgs(e, x, y) {\n        const view = this; // eslint-disable-line @typescript-eslint/no-this-alias\n        const cell = view.cell;\n        if (x == null || y == null) {\n            return { e, view, cell };\n        }\n        return { e, x, y, view, cell };\n    }\n    onClick(e, x, y) {\n        this.notify('cell:click', this.getEventArgs(e, x, y));\n    }\n    onDblClick(e, x, y) {\n        this.notify('cell:dblclick', this.getEventArgs(e, x, y));\n    }\n    onContextMenu(e, x, y) {\n        this.notify('cell:contextmenu', this.getEventArgs(e, x, y));\n    }\n    onMouseDown(e, x, y) {\n        if (this.cell.model) {\n            this.cachedModelForMouseEvent = this.cell.model;\n            this.cachedModelForMouseEvent.startBatch('mouse');\n        }\n        this.notify('cell:mousedown', this.getEventArgs(e, x, y));\n    }\n    onMouseUp(e, x, y) {\n        this.notify('cell:mouseup', this.getEventArgs(e, x, y));\n        if (this.cachedModelForMouseEvent) {\n            this.cachedModelForMouseEvent.stopBatch('mouse', { cell: this.cell });\n            this.cachedModelForMouseEvent = null;\n        }\n    }\n    onMouseMove(e, x, y) {\n        this.notify('cell:mousemove', this.getEventArgs(e, x, y));\n    }\n    onMouseOver(e) {\n        this.notify('cell:mouseover', this.getEventArgs(e));\n    }\n    onMouseOut(e) {\n        this.notify('cell:mouseout', this.getEventArgs(e));\n    }\n    onMouseEnter(e) {\n        this.notify('cell:mouseenter', this.getEventArgs(e));\n    }\n    onMouseLeave(e) {\n        this.notify('cell:mouseleave', this.getEventArgs(e));\n    }\n    onMouseWheel(e, x, y, delta) {\n        this.notify('cell:mousewheel', Object.assign({ delta }, this.getEventArgs(e, x, y)));\n    }\n    onCustomEvent(e, name, x, y) {\n        this.notify('cell:customevent', Object.assign({ name }, this.getEventArgs(e, x, y)));\n        this.notify(name, Object.assign({}, this.getEventArgs(e, x, y)));\n    }\n    onMagnetMouseDown(e, magnet, x, y) { }\n    onMagnetDblClick(e, magnet, x, y) { }\n    onMagnetContextMenu(e, magnet, x, y) { }\n    onLabelMouseDown(e, x, y) { }\n    checkMouseleave(e) {\n        const graph = this.graph;\n        if (graph.renderer.isAsync()) {\n            // Do the updates of the current view synchronously now\n            graph.renderer.dumpView(this);\n        }\n        const target = this.getEventTarget(e, { fromPoint: true });\n        const view = graph.renderer.findViewByElem(target);\n        if (view === this) {\n            return;\n        }\n        // Leaving the current view\n        this.onMouseLeave(e);\n        if (!view) {\n            return;\n        }\n        // Entering another view\n        view.onMouseEnter(e);\n    }\n}\nCellView.defaults = {\n    isSvgElement: true,\n    rootSelector: 'root',\n    priority: 0,\n    bootstrap: [],\n    actions: {},\n};\n(function (CellView) {\n    CellView.Flag = FlagManager;\n    CellView.Attr = AttrManager;\n})(CellView || (CellView = {}));\n(function (CellView) {\n    CellView.toStringTag = `X6.${CellView.name}`;\n    function isCellView(instance) {\n        if (instance == null) {\n            return false;\n        }\n        if (instance instanceof CellView) {\n            return true;\n        }\n        const tag = instance[Symbol.toStringTag];\n        const view = instance;\n        if ((tag == null || tag === CellView.toStringTag) &&\n            typeof view.isNodeView === 'function' &&\n            typeof view.isEdgeView === 'function' &&\n            typeof view.confirmUpdate === 'function') {\n            return true;\n        }\n        return false;\n    }\n    CellView.isCellView = isCellView;\n})(CellView || (CellView = {}));\n// decorators\n// ----\n(function (CellView) {\n    function priority(value) {\n        return function (ctor) {\n            ctor.config({ priority: value });\n        };\n    }\n    CellView.priority = priority;\n    function bootstrap(actions) {\n        return function (ctor) {\n            ctor.config({ bootstrap: actions });\n        };\n    }\n    CellView.bootstrap = bootstrap;\n})(CellView || (CellView = {}));\n(function (CellView) {\n    CellView.registry = Registry.create({\n        type: 'view',\n    });\n})(CellView || (CellView = {}));\n//# sourceMappingURL=cell.js.map"]},"metadata":{},"sourceType":"module"}