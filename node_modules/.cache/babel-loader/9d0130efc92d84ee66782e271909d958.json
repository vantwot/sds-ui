{"ast":null,"code":"import _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport JQuery from 'jquery';\nimport { DataUri, NumberExt, FunctionExt, Vector } from '../util';\nimport { Rectangle } from '../geometry';\nimport { Base } from './base';\nexport var FormatManager = /*#__PURE__*/function (_Base) {\n  _inherits(FormatManager, _Base);\n\n  var _super = _createSuper(FormatManager);\n\n  function FormatManager() {\n    _classCallCheck(this, FormatManager);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FormatManager, [{\n    key: \"toSVG\",\n    value: function toSVG(callback) {\n      var _this = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.graph.trigger('before:export', options);\n      var rawSVG = this.view.svg;\n      var vSVG = Vector.create(rawSVG).clone();\n      var clonedSVG = vSVG.node;\n      var vStage = vSVG.findOne(\".\".concat(this.view.prefixClassName('graph-svg-stage')));\n      var viewBox = options.viewBox || this.graph.graphToLocal(this.graph.getContentBBox());\n      var dimension = options.preserveDimensions;\n\n      if (dimension) {\n        var size = typeof dimension === 'boolean' ? viewBox : dimension;\n        vSVG.attr({\n          width: size.width,\n          height: size.height\n        });\n      }\n\n      vSVG.removeAttribute('style').attr('viewBox', [viewBox.x, viewBox.y, viewBox.width, viewBox.height].join(' '));\n      vStage.removeAttribute('transform'); // Stores all the CSS declarations from external stylesheets to the\n      // `style` attribute of the SVG document nodes.\n      // This is achieved in three steps.\n      // -----------------------------------\n      // 1. Disabling all the stylesheets in the page and therefore collecting\n      //    only default style values. This, together with the step 2, makes it\n      //    possible to discard default CSS property values and store only those\n      //    that differ.\n      //\n      // 2. Enabling back all the stylesheets in the page and collecting styles\n      //    that differ from the default values.\n      //\n      // 3. Applying the difference between default values and the ones set by\n      //    custom stylesheets onto the `style` attribute of each of the nodes\n      //    in SVG.\n\n      if (options.copyStyles !== false) {\n        var _document = rawSVG.ownerDocument;\n        var raws = Array.from(rawSVG.querySelectorAll('*'));\n        var clones = Array.from(clonedSVG.querySelectorAll('*'));\n        var styleSheetCount = _document.styleSheets.length;\n        var styleSheetsCopy = [];\n\n        for (var k = styleSheetCount - 1; k >= 0; k -= 1) {\n          // There is a bug (bugSS) in Chrome 14 and Safari. When you set\n          // `stylesheet.disable = true` it will also remove it from\n          // `document.styleSheets`. So we need to store all stylesheets before\n          // we disable them. Later on we put them back to `document.styleSheets`\n          // if needed.\n          // See the bug `https://code.google.com/p/chromium/issues/detail?id=88310`.\n          styleSheetsCopy[k] = _document.styleSheets[k];\n          _document.styleSheets[k].disabled = true;\n        }\n\n        var defaultComputedStyles = {};\n        raws.forEach(function (elem, index) {\n          var computedStyle = window.getComputedStyle(elem, null); // We're making a deep copy of the `computedStyle` so that it's not affected\n          // by that next step when all the stylesheets are re-enabled again.\n\n          var defaultComputedStyle = {};\n          Object.keys(computedStyle).forEach(function (property) {\n            defaultComputedStyle[property] = computedStyle.getPropertyValue(property);\n          });\n          defaultComputedStyles[index] = defaultComputedStyle;\n        }); // Copy all stylesheets back\n\n        if (styleSheetCount !== _document.styleSheets.length) {\n          styleSheetsCopy.forEach(function (copy, index) {\n            _document.styleSheets[index] = copy;\n          });\n        }\n\n        for (var i = 0; i < styleSheetCount; i += 1) {\n          _document.styleSheets[i].disabled = false;\n        }\n\n        var customStyles = {};\n        raws.forEach(function (elem, index) {\n          var computedStyle = window.getComputedStyle(elem, null);\n          var defaultComputedStyle = defaultComputedStyles[index];\n          var customStyle = {};\n          Object.keys(computedStyle).forEach(function (property) {\n            if (computedStyle.getPropertyValue(property) !== defaultComputedStyle[property]) {\n              customStyle[property] = computedStyle.getPropertyValue(property);\n            }\n          });\n          customStyles[index] = customStyle;\n        });\n        clones.forEach(function (elem, index) {\n          JQuery(elem).css(customStyles[index]);\n        });\n      }\n\n      var stylesheet = options.stylesheet;\n\n      if (typeof stylesheet === 'string') {\n        var cDATASection = rawSVG.ownerDocument.implementation.createDocument(null, 'xml', null).createCDATASection(stylesheet);\n        vSVG.prepend(Vector.create('style', {\n          type: 'text/css'\n        }, [cDATASection]));\n      }\n\n      var format = function format() {\n        var beforeSerialize = options.beforeSerialize;\n\n        if (typeof beforeSerialize === 'function') {\n          var ret = FunctionExt.call(beforeSerialize, _this.graph, clonedSVG);\n\n          if (ret instanceof SVGSVGElement) {\n            clonedSVG = ret;\n          }\n        }\n\n        var dataUri = new XMLSerializer().serializeToString(clonedSVG).replace(/&nbsp;/g, \"\\xA0\");\n\n        _this.graph.trigger('after:export', options);\n\n        callback(dataUri);\n      };\n\n      if (options.serializeImages) {\n        var deferrals = vSVG.find('image').map(function (vImage) {\n          return new Promise(function (resolve) {\n            var url = vImage.attr('xlink:href') || vImage.attr('href');\n            DataUri.imageToDataUri(url, function (err, dataUri) {\n              if (!err && dataUri) {\n                vImage.attr('xlink:href', dataUri);\n              }\n\n              resolve();\n            });\n          });\n        });\n        Promise.all(deferrals).then(format);\n      } else {\n        format();\n      }\n    }\n  }, {\n    key: \"toDataURL\",\n    value: function toDataURL(callback, options) {\n      var viewBox = options.viewBox || this.graph.getContentBBox();\n      var padding = NumberExt.normalizeSides(options.padding);\n\n      if (options.width && options.height) {\n        if (padding.left + padding.right >= options.width) {\n          padding.left = padding.right = 0;\n        }\n\n        if (padding.top + padding.bottom >= options.height) {\n          padding.top = padding.bottom = 0;\n        }\n      }\n\n      var expanding = new Rectangle(-padding.left, -padding.top, padding.left + padding.right, padding.top + padding.bottom);\n\n      if (options.width && options.height) {\n        var width = viewBox.width + padding.left + padding.right;\n        var height = viewBox.height + padding.top + padding.bottom;\n        expanding.scale(width / options.width, height / options.height);\n      }\n\n      viewBox = Rectangle.create(viewBox).moveAndExpand(expanding);\n      var rawSize = typeof options.width === 'number' && typeof options.height === 'number' ? {\n        width: options.width,\n        height: options.height\n      } : viewBox;\n      var scale = options.ratio ? parseFloat(options.ratio) : 1;\n\n      if (!Number.isFinite(scale) || scale === 0) {\n        scale = 1;\n      }\n\n      var size = {\n        width: Math.max(Math.round(rawSize.width * scale), 1),\n        height: Math.max(Math.round(rawSize.height * scale), 1)\n      };\n      {\n        var imgDataCanvas = document.createElement('canvas');\n        var context2D = imgDataCanvas.getContext('2d');\n        imgDataCanvas.width = size.width;\n        imgDataCanvas.height = size.height;\n        var x = size.width - 1;\n        var y = size.height - 1;\n        context2D.fillStyle = 'rgb(1,1,1)';\n        context2D.fillRect(x, y, 1, 1);\n        var data = context2D.getImageData(x, y, 1, 1).data;\n\n        if (data[0] !== 1 || data[1] !== 1 || data[2] !== 1) {\n          throw new Error('size exceeded');\n        }\n      }\n      var img = new Image();\n\n      img.onload = function () {\n        var canvas = document.createElement('canvas');\n        canvas.width = size.width;\n        canvas.height = size.height;\n        var context = canvas.getContext('2d');\n        context.fillStyle = options.backgroundColor || 'white';\n        context.fillRect(0, 0, size.width, size.height);\n\n        try {\n          context.drawImage(img, 0, 0, size.width, size.height);\n          var dataUri = canvas.toDataURL(options.type, options.quality);\n          callback(dataUri);\n        } catch (error) {// pass\n        }\n      };\n\n      this.toSVG(function (dataUri) {\n        img.src = \"data:image/svg+xml,\".concat(encodeURIComponent(dataUri));\n      }, Object.assign(Object.assign({}, options), {\n        viewBox: viewBox,\n        serializeImages: true,\n        preserveDimensions: Object.assign({}, size)\n      }));\n    }\n  }, {\n    key: \"toPNG\",\n    value: function toPNG(callback) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.toDataURL(callback, Object.assign(Object.assign({}, options), {\n        type: 'image/png'\n      }));\n    }\n  }, {\n    key: \"toJPEG\",\n    value: function toJPEG(callback) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.toDataURL(callback, Object.assign(Object.assign({}, options), {\n        type: 'image/jpeg'\n      }));\n    }\n  }]);\n\n  return FormatManager;\n}(Base);","map":{"version":3,"sources":["../../src/graph/format.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import JQuery from 'jquery';\nimport { DataUri, NumberExt, FunctionExt, Vector } from '../util';\nimport { Rectangle } from '../geometry';\nimport { Base } from './base';\nexport class FormatManager extends Base {\n    toSVG(callback, options = {}) {\n        this.graph.trigger('before:export', options);\n        const rawSVG = this.view.svg;\n        const vSVG = Vector.create(rawSVG).clone();\n        let clonedSVG = vSVG.node;\n        const vStage = vSVG.findOne(`.${this.view.prefixClassName('graph-svg-stage')}`);\n        const viewBox = options.viewBox || this.graph.graphToLocal(this.graph.getContentBBox());\n        const dimension = options.preserveDimensions;\n        if (dimension) {\n            const size = typeof dimension === 'boolean' ? viewBox : dimension;\n            vSVG.attr({\n                width: size.width,\n                height: size.height,\n            });\n        }\n        vSVG\n            .removeAttribute('style')\n            .attr('viewBox', [viewBox.x, viewBox.y, viewBox.width, viewBox.height].join(' '));\n        vStage.removeAttribute('transform');\n        // Stores all the CSS declarations from external stylesheets to the\n        // `style` attribute of the SVG document nodes.\n        // This is achieved in three steps.\n        // -----------------------------------\n        // 1. Disabling all the stylesheets in the page and therefore collecting\n        //    only default style values. This, together with the step 2, makes it\n        //    possible to discard default CSS property values and store only those\n        //    that differ.\n        //\n        // 2. Enabling back all the stylesheets in the page and collecting styles\n        //    that differ from the default values.\n        //\n        // 3. Applying the difference between default values and the ones set by\n        //    custom stylesheets onto the `style` attribute of each of the nodes\n        //    in SVG.\n        if (options.copyStyles !== false) {\n            const document = rawSVG.ownerDocument;\n            const raws = Array.from(rawSVG.querySelectorAll('*'));\n            const clones = Array.from(clonedSVG.querySelectorAll('*'));\n            const styleSheetCount = document.styleSheets.length;\n            const styleSheetsCopy = [];\n            for (let k = styleSheetCount - 1; k >= 0; k -= 1) {\n                // There is a bug (bugSS) in Chrome 14 and Safari. When you set\n                // `stylesheet.disable = true` it will also remove it from\n                // `document.styleSheets`. So we need to store all stylesheets before\n                // we disable them. Later on we put them back to `document.styleSheets`\n                // if needed.\n                // See the bug `https://code.google.com/p/chromium/issues/detail?id=88310`.\n                styleSheetsCopy[k] = document.styleSheets[k];\n                document.styleSheets[k].disabled = true;\n            }\n            const defaultComputedStyles = {};\n            raws.forEach((elem, index) => {\n                const computedStyle = window.getComputedStyle(elem, null);\n                // We're making a deep copy of the `computedStyle` so that it's not affected\n                // by that next step when all the stylesheets are re-enabled again.\n                const defaultComputedStyle = {};\n                Object.keys(computedStyle).forEach((property) => {\n                    defaultComputedStyle[property] =\n                        computedStyle.getPropertyValue(property);\n                });\n                defaultComputedStyles[index] = defaultComputedStyle;\n            });\n            // Copy all stylesheets back\n            if (styleSheetCount !== document.styleSheets.length) {\n                styleSheetsCopy.forEach((copy, index) => {\n                    document.styleSheets[index] = copy;\n                });\n            }\n            for (let i = 0; i < styleSheetCount; i += 1) {\n                document.styleSheets[i].disabled = false;\n            }\n            const customStyles = {};\n            raws.forEach((elem, index) => {\n                const computedStyle = window.getComputedStyle(elem, null);\n                const defaultComputedStyle = defaultComputedStyles[index];\n                const customStyle = {};\n                Object.keys(computedStyle).forEach((property) => {\n                    if (computedStyle.getPropertyValue(property) !==\n                        defaultComputedStyle[property]) {\n                        customStyle[property] = computedStyle.getPropertyValue(property);\n                    }\n                });\n                customStyles[index] = customStyle;\n            });\n            clones.forEach((elem, index) => {\n                JQuery(elem).css(customStyles[index]);\n            });\n        }\n        const stylesheet = options.stylesheet;\n        if (typeof stylesheet === 'string') {\n            const cDATASection = rawSVG\n                .ownerDocument.implementation.createDocument(null, 'xml', null)\n                .createCDATASection(stylesheet);\n            vSVG.prepend(Vector.create('style', {\n                type: 'text/css',\n            }, [cDATASection]));\n        }\n        const format = () => {\n            const beforeSerialize = options.beforeSerialize;\n            if (typeof beforeSerialize === 'function') {\n                const ret = FunctionExt.call(beforeSerialize, this.graph, clonedSVG);\n                if (ret instanceof SVGSVGElement) {\n                    clonedSVG = ret;\n                }\n            }\n            const dataUri = new XMLSerializer()\n                .serializeToString(clonedSVG)\n                .replace(/&nbsp;/g, '\\u00a0');\n            this.graph.trigger('after:export', options);\n            callback(dataUri);\n        };\n        if (options.serializeImages) {\n            const deferrals = vSVG.find('image').map((vImage) => {\n                return new Promise((resolve) => {\n                    const url = vImage.attr('xlink:href') || vImage.attr('href');\n                    DataUri.imageToDataUri(url, (err, dataUri) => {\n                        if (!err && dataUri) {\n                            vImage.attr('xlink:href', dataUri);\n                        }\n                        resolve();\n                    });\n                });\n            });\n            Promise.all(deferrals).then(format);\n        }\n        else {\n            format();\n        }\n    }\n    toDataURL(callback, options) {\n        let viewBox = options.viewBox || this.graph.getContentBBox();\n        const padding = NumberExt.normalizeSides(options.padding);\n        if (options.width && options.height) {\n            if (padding.left + padding.right >= options.width) {\n                padding.left = padding.right = 0;\n            }\n            if (padding.top + padding.bottom >= options.height) {\n                padding.top = padding.bottom = 0;\n            }\n        }\n        const expanding = new Rectangle(-padding.left, -padding.top, padding.left + padding.right, padding.top + padding.bottom);\n        if (options.width && options.height) {\n            const width = viewBox.width + padding.left + padding.right;\n            const height = viewBox.height + padding.top + padding.bottom;\n            expanding.scale(width / options.width, height / options.height);\n        }\n        viewBox = Rectangle.create(viewBox).moveAndExpand(expanding);\n        const rawSize = typeof options.width === 'number' && typeof options.height === 'number'\n            ? { width: options.width, height: options.height }\n            : viewBox;\n        let scale = options.ratio ? parseFloat(options.ratio) : 1;\n        if (!Number.isFinite(scale) || scale === 0) {\n            scale = 1;\n        }\n        const size = {\n            width: Math.max(Math.round(rawSize.width * scale), 1),\n            height: Math.max(Math.round(rawSize.height * scale), 1),\n        };\n        {\n            const imgDataCanvas = document.createElement('canvas');\n            const context2D = imgDataCanvas.getContext('2d');\n            imgDataCanvas.width = size.width;\n            imgDataCanvas.height = size.height;\n            const x = size.width - 1;\n            const y = size.height - 1;\n            context2D.fillStyle = 'rgb(1,1,1)';\n            context2D.fillRect(x, y, 1, 1);\n            const data = context2D.getImageData(x, y, 1, 1).data;\n            if (data[0] !== 1 || data[1] !== 1 || data[2] !== 1) {\n                throw new Error('size exceeded');\n            }\n        }\n        const img = new Image();\n        img.onload = () => {\n            const canvas = document.createElement('canvas');\n            canvas.width = size.width;\n            canvas.height = size.height;\n            const context = canvas.getContext('2d');\n            context.fillStyle = options.backgroundColor || 'white';\n            context.fillRect(0, 0, size.width, size.height);\n            try {\n                context.drawImage(img, 0, 0, size.width, size.height);\n                const dataUri = canvas.toDataURL(options.type, options.quality);\n                callback(dataUri);\n            }\n            catch (error) {\n                // pass\n            }\n        };\n        this.toSVG((dataUri) => {\n            img.src = `data:image/svg+xml,${encodeURIComponent(dataUri)}`;\n        }, Object.assign(Object.assign({}, options), { viewBox, serializeImages: true, preserveDimensions: Object.assign({}, size) }));\n    }\n    toPNG(callback, options = {}) {\n        this.toDataURL(callback, Object.assign(Object.assign({}, options), { type: 'image/png' }));\n    }\n    toJPEG(callback, options = {}) {\n        this.toDataURL(callback, Object.assign(Object.assign({}, options), { type: 'image/jpeg' }));\n    }\n}\n//# sourceMappingURL=format.js.map"]},"metadata":{},"sourceType":"module"}