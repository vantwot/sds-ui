{"ast":null,"code":"import _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { ToolsView } from '../../view/tool';\nimport { Point } from '../../geometry';\nimport { Dom, FunctionExt } from '../../util';\nexport var CellEditor = /*#__PURE__*/function (_ToolsView$ToolItem) {\n  _inherits(CellEditor, _ToolsView$ToolItem);\n\n  var _super = _createSuper(CellEditor);\n\n  function CellEditor() {\n    var _this;\n\n    _classCallCheck(this, CellEditor);\n\n    _this = _super.apply(this, arguments);\n    _this.labelIndex = -1;\n    _this.distance = 0.5;\n    return _this;\n  }\n\n  _createClass(CellEditor, [{\n    key: \"render\",\n    value: function render() {\n      this.createElement();\n      this.update();\n      this.autoFocus();\n      this.delegateDocumentEvents(this.options.documentEvents);\n      return this;\n    }\n  }, {\n    key: \"createElement\",\n    value: function createElement() {\n      var cell = this.cell;\n      var classNames = [this.prefixClassName(\"\".concat(cell.isEdge() ? 'edge' : 'node', \"-tool-editor\")), this.prefixClassName('cell-tool-editor')];\n      this.editor = ToolsView.createElement('div', false);\n      this.addClass(classNames, this.editor);\n      this.editor.contentEditable = 'true';\n      this.container.appendChild(this.editor);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var graph = this.graph,\n          cell = this.cell,\n          editor = this.editor;\n      var style = editor.style; // set tool position\n\n      var pos = new Point();\n      var minWidth = 20;\n\n      if (cell.isNode()) {\n        pos = cell.getBBox().center;\n        minWidth = cell.size().width - 4;\n      } else if (cell.isEdge()) {\n        var e = this.options.event;\n        var target = e.target;\n        var parent = target.parentElement;\n        var isEdgeLabel = parent && Dom.hasClass(parent, this.prefixClassName('edge-label'));\n\n        if (isEdgeLabel) {\n          var index = parent.getAttribute('data-index') || '0';\n          this.labelIndex = parseInt(index, 10);\n          var matrix = parent.getAttribute('transform');\n\n          var _Dom$parseTransformSt = Dom.parseTransformString(matrix),\n              translation = _Dom$parseTransformSt.translation;\n\n          pos = new Point(translation.tx, translation.ty);\n          minWidth = Dom.getBBox(target).width;\n        } else {\n          pos = graph.clientToLocal(Point.create(e.clientX, e.clientY));\n          var view = this.cellView;\n          var d = view.path.closestPointLength(pos);\n          this.distance = d;\n        }\n      }\n\n      pos = graph.localToGraph(pos);\n      style.left = \"\".concat(pos.x, \"px\");\n      style.top = \"\".concat(pos.y, \"px\");\n      style.minWidth = \"\".concat(minWidth, \"px\"); // set tool transform\n\n      var scale = graph.scale();\n      style.transform = \"scale(\".concat(scale.sx, \", \").concat(scale.sy, \") translate(-50%, -50%)\"); // set font style\n\n      var attrs = this.options.attrs;\n      style.fontSize = \"\".concat(attrs.fontSize, \"px\");\n      style.fontFamily = attrs.fontFamily;\n      style.color = attrs.color;\n      style.backgroundColor = attrs.backgroundColor; // set init value\n\n      var getText = this.options.getText;\n      var text;\n\n      if (typeof getText === 'function') {\n        text = FunctionExt.call(getText, this.cellView, {\n          cell: this.cell,\n          index: this.labelIndex\n        });\n      }\n\n      editor.innerText = text || '';\n      return this;\n    }\n  }, {\n    key: \"onDocumentMouseDown\",\n    value: function onDocumentMouseDown(e) {\n      if (e.target !== this.editor) {\n        var cell = this.cell;\n        var value = this.editor.innerText.replace(/\\n$/, '') || ''; // set value\n\n        var setText = this.options.setText;\n\n        if (typeof setText === 'function') {\n          FunctionExt.call(setText, this.cellView, {\n            cell: this.cell,\n            value: value,\n            index: this.labelIndex,\n            distance: this.distance\n          });\n        } // remove tool\n\n\n        cell.removeTool(cell.isEdge() ? 'edge-editor' : 'node-editor');\n        this.undelegateDocumentEvents();\n      }\n    }\n  }, {\n    key: \"onDblClick\",\n    value: function onDblClick(e) {\n      e.stopPropagation();\n    }\n  }, {\n    key: \"onMouseDown\",\n    value: function onMouseDown(e) {\n      e.stopPropagation();\n    }\n  }, {\n    key: \"autoFocus\",\n    value: function autoFocus() {\n      var _this2 = this;\n\n      setTimeout(function () {\n        _this2.editor.focus();\n\n        _this2.selectText();\n      });\n    }\n  }, {\n    key: \"selectText\",\n    value: function selectText() {\n      if (window.getSelection) {\n        var range = document.createRange();\n        var selection = window.getSelection();\n        range.selectNodeContents(this.editor);\n        selection.removeAllRanges();\n        selection.addRange(range);\n      }\n    }\n  }]);\n\n  return CellEditor;\n}(ToolsView.ToolItem);\n\n(function (CellEditor) {\n  CellEditor.config({\n    tagName: 'div',\n    isSVGElement: false,\n    events: {\n      dblclick: 'onDblClick',\n      mousedown: 'onMouseDown'\n    },\n    documentEvents: {\n      mousedown: 'onDocumentMouseDown'\n    }\n  });\n})(CellEditor || (CellEditor = {}));\n\n(function (CellEditor) {\n  CellEditor.NodeEditor = CellEditor.define({\n    attrs: {\n      fontSize: 14,\n      fontFamily: 'Arial, helvetica, sans-serif',\n      color: '#000',\n      backgroundColor: '#fff'\n    },\n    getText: function getText(_ref) {\n      var cell = _ref.cell;\n      return cell.attr('text/text');\n    },\n    setText: function setText(_ref2) {\n      var cell = _ref2.cell,\n          value = _ref2.value;\n      cell.attr('text/text', value);\n    }\n  });\n  CellEditor.EdgeEditor = CellEditor.define({\n    attrs: {\n      fontSize: 14,\n      fontFamily: 'Arial, helvetica, sans-serif',\n      color: '#000',\n      backgroundColor: '#fff'\n    },\n    getText: function getText(_ref3) {\n      var cell = _ref3.cell,\n          index = _ref3.index;\n\n      if (index === -1) {\n        return '';\n      }\n\n      return cell.prop(\"labels/\".concat(index, \"/attrs/label/text\"));\n    },\n    setText: function setText(_ref4) {\n      var cell = _ref4.cell,\n          value = _ref4.value,\n          index = _ref4.index,\n          distance = _ref4.distance;\n      var edge = cell;\n\n      if (index === -1) {\n        edge.appendLabel({\n          position: {\n            distance: distance\n          },\n          attrs: {\n            label: {\n              text: value\n            }\n          }\n        });\n      } else {\n        edge.prop(\"labels/\".concat(index, \"/attrs/label/text\"), value);\n      }\n    }\n  });\n})(CellEditor || (CellEditor = {}));","map":{"version":3,"sources":["../../../src/registry/tool/editor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { ToolsView } from '../../view/tool';\nimport { Point } from '../../geometry';\nimport { Dom, FunctionExt } from '../../util';\nexport class CellEditor extends ToolsView.ToolItem {\n    constructor() {\n        super(...arguments);\n        this.labelIndex = -1;\n        this.distance = 0.5;\n    }\n    render() {\n        this.createElement();\n        this.update();\n        this.autoFocus();\n        this.delegateDocumentEvents(this.options.documentEvents);\n        return this;\n    }\n    createElement() {\n        const { cell } = this;\n        const classNames = [\n            this.prefixClassName(`${cell.isEdge() ? 'edge' : 'node'}-tool-editor`),\n            this.prefixClassName('cell-tool-editor'),\n        ];\n        this.editor = ToolsView.createElement('div', false);\n        this.addClass(classNames, this.editor);\n        this.editor.contentEditable = 'true';\n        this.container.appendChild(this.editor);\n    }\n    update() {\n        const { graph, cell, editor } = this;\n        const style = editor.style;\n        // set tool position\n        let pos = new Point();\n        let minWidth = 20;\n        if (cell.isNode()) {\n            pos = cell.getBBox().center;\n            minWidth = cell.size().width - 4;\n        }\n        else if (cell.isEdge()) {\n            const e = this.options.event;\n            const target = e.target;\n            const parent = target.parentElement;\n            const isEdgeLabel = parent && Dom.hasClass(parent, this.prefixClassName('edge-label'));\n            if (isEdgeLabel) {\n                const index = parent.getAttribute('data-index') || '0';\n                this.labelIndex = parseInt(index, 10);\n                const matrix = parent.getAttribute('transform');\n                const { translation } = Dom.parseTransformString(matrix);\n                pos = new Point(translation.tx, translation.ty);\n                minWidth = Dom.getBBox(target).width;\n            }\n            else {\n                pos = graph.clientToLocal(Point.create(e.clientX, e.clientY));\n                const view = this.cellView;\n                const d = view.path.closestPointLength(pos);\n                this.distance = d;\n            }\n        }\n        pos = graph.localToGraph(pos);\n        style.left = `${pos.x}px`;\n        style.top = `${pos.y}px`;\n        style.minWidth = `${minWidth}px`;\n        // set tool transform\n        const scale = graph.scale();\n        style.transform = `scale(${scale.sx}, ${scale.sy}) translate(-50%, -50%)`;\n        // set font style\n        const attrs = this.options.attrs;\n        style.fontSize = `${attrs.fontSize}px`;\n        style.fontFamily = attrs.fontFamily;\n        style.color = attrs.color;\n        style.backgroundColor = attrs.backgroundColor;\n        // set init value\n        const getText = this.options.getText;\n        let text;\n        if (typeof getText === 'function') {\n            text = FunctionExt.call(getText, this.cellView, {\n                cell: this.cell,\n                index: this.labelIndex,\n            });\n        }\n        editor.innerText = text || '';\n        return this;\n    }\n    onDocumentMouseDown(e) {\n        if (e.target !== this.editor) {\n            const cell = this.cell;\n            const value = this.editor.innerText.replace(/\\n$/, '') || '';\n            // set value\n            const setText = this.options.setText;\n            if (typeof setText === 'function') {\n                FunctionExt.call(setText, this.cellView, {\n                    cell: this.cell,\n                    value,\n                    index: this.labelIndex,\n                    distance: this.distance,\n                });\n            }\n            // remove tool\n            cell.removeTool(cell.isEdge() ? 'edge-editor' : 'node-editor');\n            this.undelegateDocumentEvents();\n        }\n    }\n    onDblClick(e) {\n        e.stopPropagation();\n    }\n    onMouseDown(e) {\n        e.stopPropagation();\n    }\n    autoFocus() {\n        setTimeout(() => {\n            this.editor.focus();\n            this.selectText();\n        });\n    }\n    selectText() {\n        if (window.getSelection) {\n            const range = document.createRange();\n            const selection = window.getSelection();\n            range.selectNodeContents(this.editor);\n            selection.removeAllRanges();\n            selection.addRange(range);\n        }\n    }\n}\n(function (CellEditor) {\n    CellEditor.config({\n        tagName: 'div',\n        isSVGElement: false,\n        events: {\n            dblclick: 'onDblClick',\n            mousedown: 'onMouseDown',\n        },\n        documentEvents: {\n            mousedown: 'onDocumentMouseDown',\n        },\n    });\n})(CellEditor || (CellEditor = {}));\n(function (CellEditor) {\n    CellEditor.NodeEditor = CellEditor.define({\n        attrs: {\n            fontSize: 14,\n            fontFamily: 'Arial, helvetica, sans-serif',\n            color: '#000',\n            backgroundColor: '#fff',\n        },\n        getText({ cell }) {\n            return cell.attr('text/text');\n        },\n        setText({ cell, value }) {\n            cell.attr('text/text', value);\n        },\n    });\n    CellEditor.EdgeEditor = CellEditor.define({\n        attrs: {\n            fontSize: 14,\n            fontFamily: 'Arial, helvetica, sans-serif',\n            color: '#000',\n            backgroundColor: '#fff',\n        },\n        getText({ cell, index }) {\n            if (index === -1) {\n                return '';\n            }\n            return cell.prop(`labels/${index}/attrs/label/text`);\n        },\n        setText({ cell, value, index, distance }) {\n            const edge = cell;\n            if (index === -1) {\n                edge.appendLabel({\n                    position: {\n                        distance: distance,\n                    },\n                    attrs: {\n                        label: {\n                            text: value,\n                        },\n                    },\n                });\n            }\n            else {\n                edge.prop(`labels/${index}/attrs/label/text`, value);\n            }\n        },\n    });\n})(CellEditor || (CellEditor = {}));\n//# sourceMappingURL=editor.js.map"]},"metadata":{},"sourceType":"module"}