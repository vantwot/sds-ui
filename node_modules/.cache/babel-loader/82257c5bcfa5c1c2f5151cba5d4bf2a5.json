{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDrillStepDefaultConfig = exports.isEqualDrillSteps = exports.topojson2geojson = exports.getGeoAreaConfig = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar util_1 = require(\"@antv/util\");\n\nvar topojson = (0, tslib_1.__importStar)(require(\"topojson-client\"));\n\nvar constants_1 = require(\"./constants\");\n\nvar getGeoAreaConfig = function (geoArea) {\n  var config = {\n    url: constants_1.GEO_AREA_URL,\n    type: 'topojson',\n    extension: 'topo.json'\n  };\n  if ((0, util_1.isUndefined)(geoArea)) return config;\n\n  if (typeof geoArea === 'string') {\n    config.url = geoArea;\n  } else {\n    config.url = (geoArea === null || geoArea === void 0 ? void 0 : geoArea.url) || constants_1.GEO_AREA_URL;\n    config.type = geoArea.type;\n    config.extension = geoArea.type === 'topojson' ? 'topo.json' : 'json';\n  }\n\n  return config;\n};\n\nexports.getGeoAreaConfig = getGeoAreaConfig;\n\nvar topojson2geojson = function (json) {\n  try {\n    var geojson = topojson.feature(json, 'json');\n    return geojson;\n  } catch (err) {\n    throw new Error('Failed convert to geojson from topojson, topojson default layer name \"json\"');\n  }\n};\n\nexports.topojson2geojson = topojson2geojson;\n\nvar isEqualDrillSteps = function (newSteps, oldSteps) {\n  if (newSteps.length !== oldSteps.length) {\n    return false;\n  }\n\n  for (var index = 0; index < newSteps.length; index++) {\n    var _a = newSteps[index],\n        level = _a.level,\n        granularity = _a.granularity;\n\n    if (oldSteps[index].level !== level || oldSteps[index].granularity !== granularity) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexports.isEqualDrillSteps = isEqualDrillSteps;\n\nvar getDrillStepDefaultConfig = function (options) {\n  var config = (0, util_1.pick)(options, ['source', 'color', 'style', 'state', 'label', 'tooltip']);\n  return config;\n};\n\nexports.getDrillStepDefaultConfig = getDrillStepDefaultConfig;","map":{"version":3,"sources":["../../../../src/plots/choropleth/helper.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,IAAA,QAAA,GAAA,CAAA,GAAA,OAAA,CAAA,YAAA,EAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;;AAEA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAGO,IAAM,gBAAgB,GAAG,UAAC,OAAD,EAAuC;AACrE,MAAM,MAAM,GAAG;AAAE,IAAA,GAAG,EAAE,WAAA,CAAA,YAAP;AAAqB,IAAA,IAAI,EAAE,UAA3B;AAAuC,IAAA,SAAS,EAAE;AAAlD,GAAf;AACA,MAAI,CAAA,GAAA,MAAA,CAAA,WAAA,EAAY,OAAZ,CAAJ,EAA0B,OAAO,MAAP;;AAC1B,MAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,IAAA,MAAM,CAAC,GAAP,GAAa,OAAb;AACD,GAFD,MAEO;AACL,IAAA,MAAM,CAAC,GAAP,GAAa,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,GAAT,KAAgB,WAAA,CAAA,YAA7B;AACA,IAAA,MAAM,CAAC,IAAP,GAAc,OAAO,CAAC,IAAtB;AACA,IAAA,MAAM,CAAC,SAAP,GAAmB,OAAO,CAAC,IAAR,KAAiB,UAAjB,GAA8B,WAA9B,GAA4C,MAA/D;AACD;;AACD,SAAO,MAAP;AACD,CAXM;;AAAM,OAAA,CAAA,gBAAA,GAAgB,gBAAhB;;AAaN,IAAM,gBAAgB,GAAG,UAAC,IAAD,EAAe;AAC7C,MAAI;AACF,QAAM,OAAO,GAAG,QAAQ,CAAC,OAAT,CAAiB,IAAjB,EAAuB,MAAvB,CAAhB;AACA,WAAO,OAAP;AACD,GAHD,CAGE,OAAO,GAAP,EAAY;AACZ,UAAM,IAAI,KAAJ,CAAU,6EAAV,CAAN;AACD;AACF,CAPM;;AAAM,OAAA,CAAA,gBAAA,GAAgB,gBAAhB;;AASN,IAAM,iBAAiB,GAAG,UAAC,QAAD,EAAwB,QAAxB,EAA6C;AAC5E,MAAI,QAAQ,CAAC,MAAT,KAAoB,QAAQ,CAAC,MAAjC,EAAyC;AACvC,WAAO,KAAP;AACD;;AAED,OAAK,IAAI,KAAK,GAAG,CAAjB,EAAoB,KAAK,GAAG,QAAQ,CAAC,MAArC,EAA6C,KAAK,EAAlD,EAAsD;AAC9C,QAAA,EAAA,GAAyB,QAAQ,CAAC,KAAD,CAAjC;AAAA,QAAE,KAAK,GAAA,EAAA,CAAA,KAAP;AAAA,QAAS,WAAW,GAAA,EAAA,CAAA,WAApB;;AACN,QAAI,QAAQ,CAAC,KAAD,CAAR,CAAgB,KAAhB,KAA0B,KAA1B,IAAmC,QAAQ,CAAC,KAAD,CAAR,CAAgB,WAAhB,KAAgC,WAAvE,EAAoF;AAClF,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD,CAbM;;AAAM,OAAA,CAAA,iBAAA,GAAiB,iBAAjB;;AAeN,IAAM,yBAAyB,GAAG,UAAC,OAAD,EAA2B;AAClE,MAAM,MAAM,GAAG,CAAA,GAAA,MAAA,CAAA,IAAA,EAAU,OAAV,EAAmB,CAAC,QAAD,EAAW,OAAX,EAAoB,OAApB,EAA6B,OAA7B,EAAsC,OAAtC,EAA+C,SAA/C,CAAnB,CAAf;AAEA,SAAO,MAAP;AACD,CAJM;;AAAM,OAAA,CAAA,yBAAA,GAAyB,yBAAzB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDrillStepDefaultConfig = exports.isEqualDrillSteps = exports.topojson2geojson = exports.getGeoAreaConfig = void 0;\nvar tslib_1 = require(\"tslib\");\nvar util_1 = require(\"@antv/util\");\nvar topojson = (0, tslib_1.__importStar)(require(\"topojson-client\"));\nvar constants_1 = require(\"./constants\");\nvar getGeoAreaConfig = function (geoArea) {\n    var config = { url: constants_1.GEO_AREA_URL, type: 'topojson', extension: 'topo.json' };\n    if ((0, util_1.isUndefined)(geoArea))\n        return config;\n    if (typeof geoArea === 'string') {\n        config.url = geoArea;\n    }\n    else {\n        config.url = (geoArea === null || geoArea === void 0 ? void 0 : geoArea.url) || constants_1.GEO_AREA_URL;\n        config.type = geoArea.type;\n        config.extension = geoArea.type === 'topojson' ? 'topo.json' : 'json';\n    }\n    return config;\n};\nexports.getGeoAreaConfig = getGeoAreaConfig;\nvar topojson2geojson = function (json) {\n    try {\n        var geojson = topojson.feature(json, 'json');\n        return geojson;\n    }\n    catch (err) {\n        throw new Error('Failed convert to geojson from topojson, topojson default layer name \"json\"');\n    }\n};\nexports.topojson2geojson = topojson2geojson;\nvar isEqualDrillSteps = function (newSteps, oldSteps) {\n    if (newSteps.length !== oldSteps.length) {\n        return false;\n    }\n    for (var index = 0; index < newSteps.length; index++) {\n        var _a = newSteps[index], level = _a.level, granularity = _a.granularity;\n        if (oldSteps[index].level !== level || oldSteps[index].granularity !== granularity) {\n            return false;\n        }\n    }\n    return true;\n};\nexports.isEqualDrillSteps = isEqualDrillSteps;\nvar getDrillStepDefaultConfig = function (options) {\n    var config = (0, util_1.pick)(options, ['source', 'color', 'style', 'state', 'label', 'tooltip']);\n    return config;\n};\nexports.getDrillStepDefaultConfig = getDrillStepDefaultConfig;\n//# sourceMappingURL=helper.js.map"]},"metadata":{},"sourceType":"script"}