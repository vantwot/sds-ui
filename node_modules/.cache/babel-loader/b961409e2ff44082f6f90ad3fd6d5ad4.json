{"ast":null,"code":"import { Dom, ObjectExt, FunctionExt } from '../../util';\nimport { Point, Line } from '../../geometry';\nimport { View } from '../../view/view';\nimport { ToolsView } from '../../view/tool';\nimport * as Util from './util';\nexport class Segments extends ToolsView.ToolItem {\n  constructor() {\n    super(...arguments);\n    this.handles = [];\n  }\n\n  get vertices() {\n    return this.cellView.cell.getVertices();\n  }\n\n  update() {\n    this.render();\n    return this;\n  }\n\n  onRender() {\n    Dom.addClass(this.container, this.prefixClassName('edge-tool-segments'));\n    this.resetHandles();\n    const edgeView = this.cellView;\n    const vertices = [...this.vertices];\n    vertices.unshift(edgeView.sourcePoint);\n    vertices.push(edgeView.targetPoint);\n\n    for (let i = 0, l = vertices.length; i < l - 1; i += 1) {\n      const vertex = vertices[i];\n      const nextVertex = vertices[i + 1];\n      const handle = this.renderHandle(vertex, nextVertex, i);\n      this.stamp(handle.container);\n      this.handles.push(handle);\n    }\n\n    return this;\n  }\n\n  renderHandle(vertex, nextVertex, index) {\n    const handle = this.options.createHandle({\n      index,\n      graph: this.graph,\n      guard: evt => this.guard(evt),\n      attrs: this.options.attrs || {}\n    });\n\n    if (this.options.processHandle) {\n      this.options.processHandle(handle);\n    }\n\n    this.graph.hook.onToolItemCreated({\n      name: 'segments',\n      cell: this.cell,\n      view: this.cellView,\n      tool: handle\n    });\n    this.updateHandle(handle, vertex, nextVertex);\n    this.container.appendChild(handle.container);\n    this.startHandleListening(handle);\n    return handle;\n  }\n\n  startHandleListening(handle) {\n    handle.on('change', this.onHandleChange, this);\n    handle.on('changing', this.onHandleChanging, this);\n    handle.on('changed', this.onHandleChanged, this);\n  }\n\n  stopHandleListening(handle) {\n    handle.off('change', this.onHandleChange, this);\n    handle.off('changing', this.onHandleChanging, this);\n    handle.off('changed', this.onHandleChanged, this);\n  }\n\n  resetHandles() {\n    const handles = this.handles;\n    this.handles = [];\n\n    if (handles) {\n      handles.forEach(handle => {\n        this.stopHandleListening(handle);\n        handle.remove();\n      });\n    }\n  }\n\n  shiftHandleIndexes(delta) {\n    const handles = this.handles;\n\n    for (let i = 0, n = handles.length; i < n; i += 1) {\n      handles[i].options.index += delta;\n    }\n  }\n\n  resetAnchor(type, anchor) {\n    const edge = this.cellView.cell;\n    const options = {\n      ui: true,\n      toolId: this.cid\n    };\n\n    if (anchor) {\n      edge.prop([type, 'anchor'], anchor, options);\n    } else {\n      edge.removeProp([type, 'anchor'], options);\n    }\n  }\n\n  snapHandle(handle, position, data) {\n    const axis = handle.options.axis;\n    const index = handle.options.index;\n    const edgeView = this.cellView;\n    const edge = edgeView.cell;\n    const vertices = edge.getVertices();\n    const prev = vertices[index - 2] || data.sourceAnchor;\n    const next = vertices[index + 1] || data.targetAnchor;\n    const snapRadius = this.options.snapRadius;\n\n    if (Math.abs(position[axis] - prev[axis]) < snapRadius) {\n      position[axis] = prev[axis];\n    } else if (Math.abs(position[axis] - next[axis]) < snapRadius) {\n      position[axis] = next[axis];\n    }\n\n    return position;\n  }\n\n  onHandleChanging(_ref) {\n    let {\n      handle,\n      e\n    } = _ref;\n    const graph = this.graph;\n    const options = this.options;\n    const edgeView = this.cellView;\n    const anchorFn = options.anchor;\n    const axis = handle.options.axis;\n    const index = handle.options.index - 1;\n    const data = this.getEventData(e);\n    const evt = this.normalizeEvent(e);\n    const coords = graph.snapToGrid(evt.clientX, evt.clientY);\n    const position = this.snapHandle(handle, coords.clone(), data);\n    const vertices = ObjectExt.cloneDeep(this.vertices);\n    let vertex = vertices[index];\n    let nextVertex = vertices[index + 1]; // First Segment\n\n    const sourceView = edgeView.sourceView;\n    const sourceBBox = edgeView.sourceBBox;\n    let changeSourceAnchor = false;\n    let deleteSourceAnchor = false;\n\n    if (!vertex) {\n      vertex = edgeView.sourceAnchor.toJSON();\n      vertex[axis] = position[axis];\n\n      if (sourceBBox.containsPoint(vertex)) {\n        changeSourceAnchor = true;\n      } else {\n        vertices.unshift(vertex);\n        this.shiftHandleIndexes(1);\n        deleteSourceAnchor = true;\n      }\n    } else if (index === 0) {\n      if (sourceBBox.containsPoint(vertex)) {\n        vertices.shift();\n        this.shiftHandleIndexes(-1);\n        changeSourceAnchor = true;\n      } else {\n        vertex[axis] = position[axis];\n        deleteSourceAnchor = true;\n      }\n    } else {\n      vertex[axis] = position[axis];\n    }\n\n    if (typeof anchorFn === 'function' && sourceView) {\n      if (changeSourceAnchor) {\n        const sourceAnchorPosition = data.sourceAnchor.clone();\n        sourceAnchorPosition[axis] = position[axis];\n        const sourceAnchor = FunctionExt.call(anchorFn, edgeView, sourceAnchorPosition, sourceView, edgeView.sourceMagnet || sourceView.container, 'source', edgeView, this);\n        this.resetAnchor('source', sourceAnchor);\n      }\n\n      if (deleteSourceAnchor) {\n        this.resetAnchor('source', data.sourceAnchorDef);\n      }\n    } // Last segment\n\n\n    const targetView = edgeView.targetView;\n    const targetBBox = edgeView.targetBBox;\n    let changeTargetAnchor = false;\n    let deleteTargetAnchor = false;\n\n    if (!nextVertex) {\n      nextVertex = edgeView.targetAnchor.toJSON();\n      nextVertex[axis] = position[axis];\n\n      if (targetBBox.containsPoint(nextVertex)) {\n        changeTargetAnchor = true;\n      } else {\n        vertices.push(nextVertex);\n        deleteTargetAnchor = true;\n      }\n    } else if (index === vertices.length - 2) {\n      if (targetBBox.containsPoint(nextVertex)) {\n        vertices.pop();\n        changeTargetAnchor = true;\n      } else {\n        nextVertex[axis] = position[axis];\n        deleteTargetAnchor = true;\n      }\n    } else {\n      nextVertex[axis] = position[axis];\n    }\n\n    if (typeof anchorFn === 'function' && targetView) {\n      if (changeTargetAnchor) {\n        const targetAnchorPosition = data.targetAnchor.clone();\n        targetAnchorPosition[axis] = position[axis];\n        const targetAnchor = FunctionExt.call(anchorFn, edgeView, targetAnchorPosition, targetView, edgeView.targetMagnet || targetView.container, 'target', edgeView, this);\n        this.resetAnchor('target', targetAnchor);\n      }\n\n      if (deleteTargetAnchor) {\n        this.resetAnchor('target', data.targetAnchorDef);\n      }\n    }\n\n    if (!Point.equalPoints(vertices, this.vertices)) {\n      this.cellView.cell.setVertices(vertices, {\n        ui: true,\n        toolId: this.cid\n      });\n    }\n\n    this.updateHandle(handle, vertex, nextVertex, 0);\n\n    if (!options.stopPropagation) {\n      edgeView.notifyMouseMove(evt, coords.x, coords.y);\n    }\n  }\n\n  onHandleChange(_ref2) {\n    let {\n      handle,\n      e\n    } = _ref2;\n    const options = this.options;\n    const handles = this.handles;\n    const edgeView = this.cellView;\n    const index = handle.options.index;\n\n    if (!Array.isArray(handles)) {\n      return;\n    }\n\n    for (let i = 0, n = handles.length; i < n; i += 1) {\n      if (i !== index) {\n        handles[i].hide();\n      }\n    }\n\n    this.focus();\n    this.setEventData(e, {\n      sourceAnchor: edgeView.sourceAnchor.clone(),\n      targetAnchor: edgeView.targetAnchor.clone(),\n      sourceAnchorDef: ObjectExt.cloneDeep(this.cell.prop(['source', 'anchor'])),\n      targetAnchorDef: ObjectExt.cloneDeep(this.cell.prop(['target', 'anchor']))\n    });\n    this.cell.startBatch('move-segment', {\n      ui: true,\n      toolId: this.cid\n    });\n\n    if (!options.stopPropagation) {\n      const normalizedEvent = this.normalizeEvent(e);\n      const coords = this.graph.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);\n      edgeView.notifyMouseDown(normalizedEvent, coords.x, coords.y);\n    }\n  }\n\n  onHandleChanged(_ref3) {\n    let {\n      e\n    } = _ref3;\n    const options = this.options;\n    const edgeView = this.cellView;\n\n    if (options.removeRedundancies) {\n      edgeView.removeRedundantLinearVertices({\n        ui: true,\n        toolId: this.cid\n      });\n    }\n\n    const normalizedEvent = this.normalizeEvent(e);\n    const coords = this.graph.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);\n    this.render();\n    this.blur();\n    this.cell.stopBatch('move-segment', {\n      ui: true,\n      toolId: this.cid\n    });\n\n    if (!options.stopPropagation) {\n      edgeView.notifyMouseUp(normalizedEvent, coords.x, coords.y);\n    }\n\n    edgeView.checkMouseleave(normalizedEvent);\n    options.onChanged && options.onChanged({\n      edge: edgeView.cell,\n      edgeView\n    });\n  }\n\n  updateHandle(handle, vertex, nextVertex) {\n    let offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    const precision = this.options.precision || 0;\n    const vertical = Math.abs(vertex.x - nextVertex.x) < precision;\n    const horizontal = Math.abs(vertex.y - nextVertex.y) < precision;\n\n    if (vertical || horizontal) {\n      const segmentLine = new Line(vertex, nextVertex);\n      const length = segmentLine.length();\n\n      if (length < this.options.threshold) {\n        handle.hide();\n      } else {\n        const position = segmentLine.getCenter();\n        const axis = vertical ? 'x' : 'y';\n        position[axis] += offset || 0;\n        const angle = segmentLine.vector().vectorAngle(new Point(1, 0));\n        handle.updatePosition(position.x, position.y, angle, this.cellView);\n        handle.show();\n        handle.options.axis = axis;\n      }\n    } else {\n      handle.hide();\n    }\n  }\n\n  onRemove() {\n    this.resetHandles();\n  }\n\n}\n\n(function (Segments) {\n  class Handle extends View {\n    constructor(options) {\n      super();\n      this.options = options;\n      this.render();\n      this.delegateEvents({\n        mousedown: 'onMouseDown',\n        touchstart: 'onMouseDown'\n      });\n    }\n\n    render() {\n      this.container = View.createElement('rect', true);\n      const attrs = this.options.attrs;\n\n      if (typeof attrs === 'function') {\n        const defaults = Segments.getDefaults();\n        this.setAttrs(Object.assign(Object.assign({}, defaults.attrs), attrs(this)));\n      } else {\n        this.setAttrs(attrs);\n      }\n\n      this.addClass(this.prefixClassName('edge-tool-segment'));\n    }\n\n    updatePosition(x, y, angle, view) {\n      const p = view.getClosestPoint(new Point(x, y)) || new Point(x, y);\n      let matrix = Dom.createSVGMatrix().translate(p.x, p.y);\n\n      if (!p.equals({\n        x,\n        y\n      })) {\n        const line = new Line(x, y, p.x, p.y);\n        let deg = line.vector().vectorAngle(new Point(1, 0));\n\n        if (deg !== 0) {\n          deg += 90;\n        }\n\n        matrix = matrix.rotate(deg);\n      } else {\n        matrix = matrix.rotate(angle);\n      }\n\n      this.setAttrs({\n        transform: Dom.matrixToTransformString(matrix),\n        cursor: angle % 180 === 0 ? 'row-resize' : 'col-resize'\n      });\n    }\n\n    onMouseDown(evt) {\n      if (this.options.guard(evt)) {\n        return;\n      }\n\n      this.trigger('change', {\n        e: evt,\n        handle: this\n      });\n      evt.stopPropagation();\n      evt.preventDefault();\n      this.options.graph.view.undelegateEvents();\n      this.delegateDocumentEvents({\n        mousemove: 'onMouseMove',\n        touchmove: 'onMouseMove',\n        mouseup: 'onMouseUp',\n        touchend: 'onMouseUp',\n        touchcancel: 'onMouseUp'\n      }, evt.data);\n    }\n\n    onMouseMove(evt) {\n      this.emit('changing', {\n        e: evt,\n        handle: this\n      });\n    }\n\n    onMouseUp(evt) {\n      this.emit('changed', {\n        e: evt,\n        handle: this\n      });\n      this.undelegateDocumentEvents();\n      this.options.graph.view.delegateEvents();\n    }\n\n    show() {\n      this.container.style.display = '';\n    }\n\n    hide() {\n      this.container.style.display = 'none';\n    }\n\n  }\n\n  Segments.Handle = Handle;\n})(Segments || (Segments = {}));\n\n(function (Segments) {\n  Segments.config({\n    name: 'segments',\n    precision: 0.5,\n    threshold: 40,\n    snapRadius: 10,\n    stopPropagation: true,\n    removeRedundancies: true,\n    attrs: {\n      width: 20,\n      height: 8,\n      x: -10,\n      y: -4,\n      rx: 4,\n      ry: 4,\n      fill: '#333',\n      stroke: '#fff',\n      'stroke-width': 2\n    },\n    createHandle: options => new Segments.Handle(options),\n    anchor: Util.getAnchor\n  });\n})(Segments || (Segments = {}));","map":{"version":3,"sources":["../../../src/registry/tool/segments.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Dom, ObjectExt, FunctionExt } from '../../util';\nimport { Point, Line } from '../../geometry';\nimport { View } from '../../view/view';\nimport { ToolsView } from '../../view/tool';\nimport * as Util from './util';\nexport class Segments extends ToolsView.ToolItem {\n    constructor() {\n        super(...arguments);\n        this.handles = [];\n    }\n    get vertices() {\n        return this.cellView.cell.getVertices();\n    }\n    update() {\n        this.render();\n        return this;\n    }\n    onRender() {\n        Dom.addClass(this.container, this.prefixClassName('edge-tool-segments'));\n        this.resetHandles();\n        const edgeView = this.cellView;\n        const vertices = [...this.vertices];\n        vertices.unshift(edgeView.sourcePoint);\n        vertices.push(edgeView.targetPoint);\n        for (let i = 0, l = vertices.length; i < l - 1; i += 1) {\n            const vertex = vertices[i];\n            const nextVertex = vertices[i + 1];\n            const handle = this.renderHandle(vertex, nextVertex, i);\n            this.stamp(handle.container);\n            this.handles.push(handle);\n        }\n        return this;\n    }\n    renderHandle(vertex, nextVertex, index) {\n        const handle = this.options.createHandle({\n            index,\n            graph: this.graph,\n            guard: (evt) => this.guard(evt),\n            attrs: this.options.attrs || {},\n        });\n        if (this.options.processHandle) {\n            this.options.processHandle(handle);\n        }\n        this.graph.hook.onToolItemCreated({\n            name: 'segments',\n            cell: this.cell,\n            view: this.cellView,\n            tool: handle,\n        });\n        this.updateHandle(handle, vertex, nextVertex);\n        this.container.appendChild(handle.container);\n        this.startHandleListening(handle);\n        return handle;\n    }\n    startHandleListening(handle) {\n        handle.on('change', this.onHandleChange, this);\n        handle.on('changing', this.onHandleChanging, this);\n        handle.on('changed', this.onHandleChanged, this);\n    }\n    stopHandleListening(handle) {\n        handle.off('change', this.onHandleChange, this);\n        handle.off('changing', this.onHandleChanging, this);\n        handle.off('changed', this.onHandleChanged, this);\n    }\n    resetHandles() {\n        const handles = this.handles;\n        this.handles = [];\n        if (handles) {\n            handles.forEach((handle) => {\n                this.stopHandleListening(handle);\n                handle.remove();\n            });\n        }\n    }\n    shiftHandleIndexes(delta) {\n        const handles = this.handles;\n        for (let i = 0, n = handles.length; i < n; i += 1) {\n            handles[i].options.index += delta;\n        }\n    }\n    resetAnchor(type, anchor) {\n        const edge = this.cellView.cell;\n        const options = {\n            ui: true,\n            toolId: this.cid,\n        };\n        if (anchor) {\n            edge.prop([type, 'anchor'], anchor, options);\n        }\n        else {\n            edge.removeProp([type, 'anchor'], options);\n        }\n    }\n    snapHandle(handle, position, data) {\n        const axis = handle.options.axis;\n        const index = handle.options.index;\n        const edgeView = this.cellView;\n        const edge = edgeView.cell;\n        const vertices = edge.getVertices();\n        const prev = vertices[index - 2] || data.sourceAnchor;\n        const next = vertices[index + 1] || data.targetAnchor;\n        const snapRadius = this.options.snapRadius;\n        if (Math.abs(position[axis] - prev[axis]) < snapRadius) {\n            position[axis] = prev[axis];\n        }\n        else if (Math.abs(position[axis] - next[axis]) < snapRadius) {\n            position[axis] = next[axis];\n        }\n        return position;\n    }\n    onHandleChanging({ handle, e, }) {\n        const graph = this.graph;\n        const options = this.options;\n        const edgeView = this.cellView;\n        const anchorFn = options.anchor;\n        const axis = handle.options.axis;\n        const index = handle.options.index - 1;\n        const data = this.getEventData(e);\n        const evt = this.normalizeEvent(e);\n        const coords = graph.snapToGrid(evt.clientX, evt.clientY);\n        const position = this.snapHandle(handle, coords.clone(), data);\n        const vertices = ObjectExt.cloneDeep(this.vertices);\n        let vertex = vertices[index];\n        let nextVertex = vertices[index + 1];\n        // First Segment\n        const sourceView = edgeView.sourceView;\n        const sourceBBox = edgeView.sourceBBox;\n        let changeSourceAnchor = false;\n        let deleteSourceAnchor = false;\n        if (!vertex) {\n            vertex = edgeView.sourceAnchor.toJSON();\n            vertex[axis] = position[axis];\n            if (sourceBBox.containsPoint(vertex)) {\n                changeSourceAnchor = true;\n            }\n            else {\n                vertices.unshift(vertex);\n                this.shiftHandleIndexes(1);\n                deleteSourceAnchor = true;\n            }\n        }\n        else if (index === 0) {\n            if (sourceBBox.containsPoint(vertex)) {\n                vertices.shift();\n                this.shiftHandleIndexes(-1);\n                changeSourceAnchor = true;\n            }\n            else {\n                vertex[axis] = position[axis];\n                deleteSourceAnchor = true;\n            }\n        }\n        else {\n            vertex[axis] = position[axis];\n        }\n        if (typeof anchorFn === 'function' && sourceView) {\n            if (changeSourceAnchor) {\n                const sourceAnchorPosition = data.sourceAnchor.clone();\n                sourceAnchorPosition[axis] = position[axis];\n                const sourceAnchor = FunctionExt.call(anchorFn, edgeView, sourceAnchorPosition, sourceView, edgeView.sourceMagnet || sourceView.container, 'source', edgeView, this);\n                this.resetAnchor('source', sourceAnchor);\n            }\n            if (deleteSourceAnchor) {\n                this.resetAnchor('source', data.sourceAnchorDef);\n            }\n        }\n        // Last segment\n        const targetView = edgeView.targetView;\n        const targetBBox = edgeView.targetBBox;\n        let changeTargetAnchor = false;\n        let deleteTargetAnchor = false;\n        if (!nextVertex) {\n            nextVertex = edgeView.targetAnchor.toJSON();\n            nextVertex[axis] = position[axis];\n            if (targetBBox.containsPoint(nextVertex)) {\n                changeTargetAnchor = true;\n            }\n            else {\n                vertices.push(nextVertex);\n                deleteTargetAnchor = true;\n            }\n        }\n        else if (index === vertices.length - 2) {\n            if (targetBBox.containsPoint(nextVertex)) {\n                vertices.pop();\n                changeTargetAnchor = true;\n            }\n            else {\n                nextVertex[axis] = position[axis];\n                deleteTargetAnchor = true;\n            }\n        }\n        else {\n            nextVertex[axis] = position[axis];\n        }\n        if (typeof anchorFn === 'function' && targetView) {\n            if (changeTargetAnchor) {\n                const targetAnchorPosition = data.targetAnchor.clone();\n                targetAnchorPosition[axis] = position[axis];\n                const targetAnchor = FunctionExt.call(anchorFn, edgeView, targetAnchorPosition, targetView, edgeView.targetMagnet || targetView.container, 'target', edgeView, this);\n                this.resetAnchor('target', targetAnchor);\n            }\n            if (deleteTargetAnchor) {\n                this.resetAnchor('target', data.targetAnchorDef);\n            }\n        }\n        if (!Point.equalPoints(vertices, this.vertices)) {\n            this.cellView.cell.setVertices(vertices, { ui: true, toolId: this.cid });\n        }\n        this.updateHandle(handle, vertex, nextVertex, 0);\n        if (!options.stopPropagation) {\n            edgeView.notifyMouseMove(evt, coords.x, coords.y);\n        }\n    }\n    onHandleChange({ handle, e }) {\n        const options = this.options;\n        const handles = this.handles;\n        const edgeView = this.cellView;\n        const index = handle.options.index;\n        if (!Array.isArray(handles)) {\n            return;\n        }\n        for (let i = 0, n = handles.length; i < n; i += 1) {\n            if (i !== index) {\n                handles[i].hide();\n            }\n        }\n        this.focus();\n        this.setEventData(e, {\n            sourceAnchor: edgeView.sourceAnchor.clone(),\n            targetAnchor: edgeView.targetAnchor.clone(),\n            sourceAnchorDef: ObjectExt.cloneDeep(this.cell.prop(['source', 'anchor'])),\n            targetAnchorDef: ObjectExt.cloneDeep(this.cell.prop(['target', 'anchor'])),\n        });\n        this.cell.startBatch('move-segment', { ui: true, toolId: this.cid });\n        if (!options.stopPropagation) {\n            const normalizedEvent = this.normalizeEvent(e);\n            const coords = this.graph.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);\n            edgeView.notifyMouseDown(normalizedEvent, coords.x, coords.y);\n        }\n    }\n    onHandleChanged({ e }) {\n        const options = this.options;\n        const edgeView = this.cellView;\n        if (options.removeRedundancies) {\n            edgeView.removeRedundantLinearVertices({ ui: true, toolId: this.cid });\n        }\n        const normalizedEvent = this.normalizeEvent(e);\n        const coords = this.graph.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);\n        this.render();\n        this.blur();\n        this.cell.stopBatch('move-segment', { ui: true, toolId: this.cid });\n        if (!options.stopPropagation) {\n            edgeView.notifyMouseUp(normalizedEvent, coords.x, coords.y);\n        }\n        edgeView.checkMouseleave(normalizedEvent);\n        options.onChanged && options.onChanged({ edge: edgeView.cell, edgeView });\n    }\n    updateHandle(handle, vertex, nextVertex, offset = 0) {\n        const precision = this.options.precision || 0;\n        const vertical = Math.abs(vertex.x - nextVertex.x) < precision;\n        const horizontal = Math.abs(vertex.y - nextVertex.y) < precision;\n        if (vertical || horizontal) {\n            const segmentLine = new Line(vertex, nextVertex);\n            const length = segmentLine.length();\n            if (length < this.options.threshold) {\n                handle.hide();\n            }\n            else {\n                const position = segmentLine.getCenter();\n                const axis = vertical ? 'x' : 'y';\n                position[axis] += offset || 0;\n                const angle = segmentLine.vector().vectorAngle(new Point(1, 0));\n                handle.updatePosition(position.x, position.y, angle, this.cellView);\n                handle.show();\n                handle.options.axis = axis;\n            }\n        }\n        else {\n            handle.hide();\n        }\n    }\n    onRemove() {\n        this.resetHandles();\n    }\n}\n(function (Segments) {\n    class Handle extends View {\n        constructor(options) {\n            super();\n            this.options = options;\n            this.render();\n            this.delegateEvents({\n                mousedown: 'onMouseDown',\n                touchstart: 'onMouseDown',\n            });\n        }\n        render() {\n            this.container = View.createElement('rect', true);\n            const attrs = this.options.attrs;\n            if (typeof attrs === 'function') {\n                const defaults = Segments.getDefaults();\n                this.setAttrs(Object.assign(Object.assign({}, defaults.attrs), attrs(this)));\n            }\n            else {\n                this.setAttrs(attrs);\n            }\n            this.addClass(this.prefixClassName('edge-tool-segment'));\n        }\n        updatePosition(x, y, angle, view) {\n            const p = view.getClosestPoint(new Point(x, y)) || new Point(x, y);\n            let matrix = Dom.createSVGMatrix().translate(p.x, p.y);\n            if (!p.equals({ x, y })) {\n                const line = new Line(x, y, p.x, p.y);\n                let deg = line.vector().vectorAngle(new Point(1, 0));\n                if (deg !== 0) {\n                    deg += 90;\n                }\n                matrix = matrix.rotate(deg);\n            }\n            else {\n                matrix = matrix.rotate(angle);\n            }\n            this.setAttrs({\n                transform: Dom.matrixToTransformString(matrix),\n                cursor: angle % 180 === 0 ? 'row-resize' : 'col-resize',\n            });\n        }\n        onMouseDown(evt) {\n            if (this.options.guard(evt)) {\n                return;\n            }\n            this.trigger('change', { e: evt, handle: this });\n            evt.stopPropagation();\n            evt.preventDefault();\n            this.options.graph.view.undelegateEvents();\n            this.delegateDocumentEvents({\n                mousemove: 'onMouseMove',\n                touchmove: 'onMouseMove',\n                mouseup: 'onMouseUp',\n                touchend: 'onMouseUp',\n                touchcancel: 'onMouseUp',\n            }, evt.data);\n        }\n        onMouseMove(evt) {\n            this.emit('changing', { e: evt, handle: this });\n        }\n        onMouseUp(evt) {\n            this.emit('changed', { e: evt, handle: this });\n            this.undelegateDocumentEvents();\n            this.options.graph.view.delegateEvents();\n        }\n        show() {\n            this.container.style.display = '';\n        }\n        hide() {\n            this.container.style.display = 'none';\n        }\n    }\n    Segments.Handle = Handle;\n})(Segments || (Segments = {}));\n(function (Segments) {\n    Segments.config({\n        name: 'segments',\n        precision: 0.5,\n        threshold: 40,\n        snapRadius: 10,\n        stopPropagation: true,\n        removeRedundancies: true,\n        attrs: {\n            width: 20,\n            height: 8,\n            x: -10,\n            y: -4,\n            rx: 4,\n            ry: 4,\n            fill: '#333',\n            stroke: '#fff',\n            'stroke-width': 2,\n        },\n        createHandle: (options) => new Segments.Handle(options),\n        anchor: Util.getAnchor,\n    });\n})(Segments || (Segments = {}));\n//# sourceMappingURL=segments.js.map"]},"metadata":{},"sourceType":"module"}