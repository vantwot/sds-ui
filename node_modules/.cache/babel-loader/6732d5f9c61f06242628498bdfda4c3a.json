{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _dec, _class;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { decodePickingColor, DOM, encodePickingColor } from '@antv/l7-utils';\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { InteractionEvent } from '../../interaction/IInteractionService';\nimport { gl } from '../gl';\nimport { PassType } from '../IMultiPassRenderer';\nimport BaseNormalPass from './BaseNormalPass';\nvar PixelPickingPass = (_dec = injectable(), _dec(_class = function (_BaseNormalPass) {\n  _inherits(PixelPickingPass, _BaseNormalPass);\n\n  var _super = _createSuper(PixelPickingPass);\n\n  function PixelPickingPass() {\n    var _this;\n\n    _classCallCheck(this, PixelPickingPass);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"pickingFBO\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"layer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"width\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"height\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"alreadyInRendering\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"pickFromPickingFBO\", function (_ref) {\n      var x = _ref.x,\n          y = _ref.y,\n          lngLat = _ref.lngLat,\n          type = _ref.type;\n\n      if (!_this.layer.isVisible() || !_this.layer.needPick(type)) {\n        return;\n      }\n\n      var _this$rendererService = _this.rendererService,\n          getViewportSize = _this$rendererService.getViewportSize,\n          readPixels = _this$rendererService.readPixels,\n          useFramebuffer = _this$rendererService.useFramebuffer;\n\n      var _getViewportSize = getViewportSize(),\n          width = _getViewportSize.width,\n          height = _getViewportSize.height;\n\n      var _this$layer$getLayerC = _this.layer.getLayerConfig(),\n          enableHighlight = _this$layer$getLayerC.enableHighlight,\n          enableSelect = _this$layer$getLayerC.enableSelect;\n\n      var xInDevicePixel = x * DOM.DPR;\n      var yInDevicePixel = y * DOM.DPR;\n\n      if (xInDevicePixel > width || xInDevicePixel < 0 || yInDevicePixel > height || yInDevicePixel < 0) {\n        return;\n      }\n\n      var pickedColors;\n      useFramebuffer(_this.pickingFBO, function () {\n        var _pickedColors;\n\n        pickedColors = readPixels({\n          x: Math.round(xInDevicePixel),\n          y: Math.round(height - (y + 1) * DOM.DPR),\n          width: 1,\n          height: 1,\n          data: new Uint8Array(1 * 1 * 4),\n          framebuffer: _this.pickingFBO\n        });\n\n        if (pickedColors[0] !== 0 || pickedColors[1] !== 0 || pickedColors[2] !== 0) {\n          var pickedFeatureIdx = decodePickingColor(pickedColors);\n\n          var rawFeature = _this.layer.getSource().getFeatureById(pickedFeatureIdx);\n\n          var target = {\n            x: x,\n            y: y,\n            type: type,\n            lngLat: lngLat,\n            featureId: pickedFeatureIdx,\n            feature: rawFeature\n          };\n\n          if (!rawFeature) {} else {\n            _this.layer.setCurrentPickId(pickedFeatureIdx);\n\n            _this.triggerHoverOnLayer(target);\n          }\n        } else {\n          var _target = {\n            x: x,\n            y: y,\n            lngLat: lngLat,\n            type: _this.layer.getCurrentPickId() === null ? 'un' + type : 'mouseout',\n            featureId: null,\n            feature: null\n          };\n\n          _this.triggerHoverOnLayer(_objectSpread(_objectSpread({}, _target), {}, {\n            type: 'unpick'\n          }));\n\n          _this.triggerHoverOnLayer(_target);\n\n          _this.layer.setCurrentPickId(null);\n        }\n\n        if (enableHighlight) {\n          _this.highlightPickedFeature(pickedColors);\n        }\n\n        if (enableSelect && type === 'click' && ((_pickedColors = pickedColors) === null || _pickedColors === void 0 ? void 0 : _pickedColors.toString()) !== [0, 0, 0, 0].toString()) {\n          _this.selectFeature(pickedColors);\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(PixelPickingPass, [{\n    key: \"getType\",\n    value: function getType() {\n      return PassType.Normal;\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return 'pixelPicking';\n    }\n  }, {\n    key: \"init\",\n    value: function init(layer, config) {\n      _get(_getPrototypeOf(PixelPickingPass.prototype), \"init\", this).call(this, layer, config);\n\n      this.layer = layer;\n      var _this$rendererService2 = this.rendererService,\n          createTexture2D = _this$rendererService2.createTexture2D,\n          createFramebuffer = _this$rendererService2.createFramebuffer,\n          getViewportSize = _this$rendererService2.getViewportSize;\n\n      var _getViewportSize2 = getViewportSize(),\n          width = _getViewportSize2.width,\n          height = _getViewportSize2.height;\n\n      this.pickingFBO = createFramebuffer({\n        color: createTexture2D({\n          width: width,\n          height: height,\n          wrapS: gl.CLAMP_TO_EDGE,\n          wrapT: gl.CLAMP_TO_EDGE\n        })\n      });\n      this.interactionService.on(InteractionEvent.Hover, this.pickFromPickingFBO);\n      this.interactionService.on(InteractionEvent.Select, this.selectFeatureHandle.bind(this));\n      this.interactionService.on(InteractionEvent.Active, this.highlightFeatureHandle.bind(this));\n    }\n  }, {\n    key: \"render\",\n    value: function render(layer) {\n      var _this2 = this;\n\n      if (this.alreadyInRendering) {\n        return;\n      }\n\n      var _this$rendererService3 = this.rendererService,\n          getViewportSize = _this$rendererService3.getViewportSize,\n          useFramebuffer = _this$rendererService3.useFramebuffer,\n          clear = _this$rendererService3.clear;\n\n      var _getViewportSize3 = getViewportSize(),\n          width = _getViewportSize3.width,\n          height = _getViewportSize3.height;\n\n      this.alreadyInRendering = true;\n\n      if (this.width !== width || this.height !== height) {\n        this.pickingFBO.resize({\n          width: width,\n          height: height\n        });\n        this.width = width;\n        this.height = height;\n      }\n\n      useFramebuffer(this.pickingFBO, function () {\n        clear({\n          framebuffer: _this2.pickingFBO,\n          color: [0, 0, 0, 0],\n          stencil: 0,\n          depth: 1\n        });\n\n        var originRenderFlag = _this2.layer.multiPassRenderer.getRenderFlag();\n\n        _this2.layer.multiPassRenderer.setRenderFlag(false);\n\n        layer.hooks.beforePickingEncode.call();\n        layer.render();\n        layer.hooks.afterPickingEncode.call();\n\n        _this2.layer.multiPassRenderer.setRenderFlag(originRenderFlag);\n\n        _this2.alreadyInRendering = false;\n      });\n    }\n  }, {\n    key: \"triggerHoverOnLayer\",\n    value: function triggerHoverOnLayer(target) {\n      this.layer.emit(target.type, target);\n    }\n  }, {\n    key: \"highlightPickedFeature\",\n    value: function highlightPickedFeature(pickedColors) {\n      var _pickedColors2 = _slicedToArray(pickedColors, 3),\n          r = _pickedColors2[0],\n          g = _pickedColors2[1],\n          b = _pickedColors2[2];\n\n      this.layer.hooks.beforeHighlight.call([r, g, b]);\n      this.layerService.renderLayers();\n    }\n  }, {\n    key: \"selectFeature\",\n    value: function selectFeature(pickedColors) {\n      var _pickedColors3 = _slicedToArray(pickedColors, 3),\n          r = _pickedColors3[0],\n          g = _pickedColors3[1],\n          b = _pickedColors3[2];\n\n      this.layer.hooks.beforeSelect.call([r, g, b]);\n      this.layerService.renderLayers();\n    }\n  }, {\n    key: \"selectFeatureHandle\",\n    value: function selectFeatureHandle(_ref2) {\n      var featureId = _ref2.featureId;\n      var pickedColors = encodePickingColor(featureId);\n      this.selectFeature(new Uint8Array(pickedColors));\n    }\n  }, {\n    key: \"highlightFeatureHandle\",\n    value: function highlightFeatureHandle(_ref3) {\n      var featureId = _ref3.featureId;\n      var pickedColors = encodePickingColor(featureId);\n      this.highlightPickedFeature(new Uint8Array(pickedColors));\n    }\n  }]);\n\n  return PixelPickingPass;\n}(BaseNormalPass)) || _class);\nexport { PixelPickingPass as default };","map":{"version":3,"sources":["../../../../src/services/renderer/passes/PixelPickingPass.ts"],"names":["injectable","PixelPickingPass","BaseNormalPass","PassType","createTexture2D","createFramebuffer","getViewportSize","width","height","color","wrapS","gl","wrapT","CLAMP_TO_EDGE","InteractionEvent","useFramebuffer","clear","framebuffer","stencil","depth","originRenderFlag","layer","x","y","lngLat","type","readPixels","enableHighlight","enableSelect","xInDevicePixel","DOM","yInDevicePixel","pickedColors","Math","data","pickingFBO","pickedFeatureIdx","decodePickingColor","rawFeature","target","featureId","feature","r","g","b","encodePickingColor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,kBAAA,EAAA,GAAA,EAAA,kBAAA,QAAA,gBAAA;AACA,SAAA,UAAA,QAAA,WAAA;AACA,OAAA,kBAAA;AAEA,SAAA,gBAAA,QAAA,uCAAA;AAMA,SAAA,EAAA,QAAA,OAAA;AAEA,SAAA,QAAA,QAAA,uBAAA;AACA,OAAA,cAAA,MAAA,kBAAA;IAOqBC,gB,WADpBD,UAAU,E;;;;;;;;;;;;;;;;;;;;4DAce,C;;6DAEC,C;;yEAKa,K;;yEAwFT,UAAA,IAAA,EAAgD;AAAA,UAA7CsB,CAA6C,GAAA,IAAA,CAA7CA,CAA6C;AAAA,UAA1CC,CAA0C,GAAA,IAAA,CAA1CA,CAA0C;AAAA,UAAvCC,MAAuC,GAAA,IAAA,CAAvCA,MAAuC;AAAA,UAA/BC,IAA+B,GAAA,IAAA,CAA/BA,IAA+B;;AAC3E,UAAI,CAAC,KAAA,CAAA,KAAA,CAAD,SAAC,EAAD,IAA2B,CAAC,KAAA,CAAA,KAAA,CAAA,QAAA,CAAhC,IAAgC,CAAhC,EAA2D;AACzD;AACD;;AACD,UAAA,qBAAA,GAII,KAAA,CAJJ,eAAA;AAAA,UACEnB,eADF,GAAA,qBAAA,CAAA,eAAA;AAAA,UAEEoB,UAFF,GAAA,qBAAA,CAAA,UAAA;AAAA,UAGEX,cAHF,GAAA,qBAAA,CAAA,cAAA;;AAKA,UAAA,gBAAA,GAA0BT,eAA1B,EAAA;AAAA,UAAQC,KAAR,GAAA,gBAAA,CAAA,KAAA;AAAA,UAAeC,MAAf,GAAA,gBAAA,CAAA,MAAA;;AACA,UAAA,qBAAA,GAA0C,KAAA,CAAA,KAAA,CAA1C,cAA0C,EAA1C;AAAA,UAAQmB,eAAR,GAAA,qBAAA,CAAA,eAAA;AAAA,UAAyBC,YAAzB,GAAA,qBAAA,CAAA,YAAA;;AAEA,UAAMC,cAAc,GAAGP,CAAC,GAAGQ,GAAG,CAA9B,GAAA;AACA,UAAMC,cAAc,GAAGR,CAAC,GAAGO,GAAG,CAA9B,GAAA;;AACA,UACED,cAAc,GAAdA,KAAAA,IACAA,cAAc,GADdA,CAAAA,IAEAE,cAAc,GAFdF,MAAAA,IAGAE,cAAc,GAJhB,CAAA,EAKE;AACA;AACD;;AACD,UAAA,YAAA;AACAhB,MAAAA,cAAc,CAAC,KAAA,CAAD,UAAA,EAAkB,YAAM;AAAA,YAAA,aAAA;;AAEpCiB,QAAAA,YAAY,GAAGN,UAAU,CAAC;AACxBJ,UAAAA,CAAC,EAAEW,IAAI,CAAJA,KAAAA,CADqB,cACrBA,CADqB;AAGxBV,UAAAA,CAAC,EAAEU,IAAI,CAAJA,KAAAA,CAAWzB,MAAM,GAAG,CAACe,CAAC,GAAF,CAAA,IAAUO,GAAG,CAHZ,GAGrBG,CAHqB;AAIxB1B,UAAAA,KAAK,EAJmB,CAAA;AAKxBC,UAAAA,MAAM,EALkB,CAAA;AAMxB0B,UAAAA,IAAI,EAAE,IAAA,UAAA,CAAe,IAAA,CAAA,GANG,CAMlB,CANkB;AAOxBjB,UAAAA,WAAW,EAAE,KAAA,CAAKkB;AAPM,SAAD,CAAzBH;;AAUA,YACEA,YAAY,CAAZA,CAAY,CAAZA,KAAAA,CAAAA,IACAA,YAAY,CAAZA,CAAY,CAAZA,KADAA,CAAAA,IAEAA,YAAY,CAAZA,CAAY,CAAZA,KAHF,CAAA,EAIE;AACA,cAAMI,gBAAgB,GAAGC,kBAAkB,CAA3C,YAA2C,CAA3C;;AACA,cAAMC,UAAU,GAAG,KAAA,CAAA,KAAA,CAAA,SAAA,GAAA,cAAA,CAAnB,gBAAmB,CAAnB;;AAGA,cAAMC,MAAM,GAAG;AACbjB,YAAAA,CAAC,EADY,CAAA;AAEbC,YAAAA,CAAC,EAFY,CAAA;AAGbE,YAAAA,IAAI,EAHS,IAAA;AAIbD,YAAAA,MAAM,EAJO,MAAA;AAKbgB,YAAAA,SAAS,EALI,gBAAA;AAMbC,YAAAA,OAAO,EAAEH;AANI,WAAf;;AAQA,cAAI,CAAJ,UAAA,EAAiB,CAAjB,CAAA,MAIO;AAEL,YAAA,KAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,gBAAA;;AACA,YAAA,KAAA,CAAA,mBAAA,CAAA,MAAA;AACD;AAzBH,SAAA,MA0BO;AACL,cAAMC,OAAM,GAAG;AACbjB,YAAAA,CAAC,EADY,CAAA;AAEbC,YAAAA,CAAC,EAFY,CAAA;AAGbC,YAAAA,MAAM,EAHO,MAAA;AAIbC,YAAAA,IAAI,EACF,KAAA,CAAA,KAAA,CAAA,gBAAA,OAAA,IAAA,GAAyC,OAAzC,IAAA,GALW,UAAA;AAMbe,YAAAA,SAAS,EANI,IAAA;AAObC,YAAAA,OAAO,EAAE;AAPI,WAAf;;AASA,UAAA,KAAA,CAAA,mBAAA,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,OAAA,CAAA,EAAA,EAAA,EAAA;AAEEhB,YAAAA,IAAI,EAAE;AAFR,WAAA,CAAA;;AAIA,UAAA,KAAA,CAAA,mBAAA,CAAA,OAAA;;AACA,UAAA,KAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,IAAA;AACD;;AAED,YAAA,eAAA,EAAqB;AACnB,UAAA,KAAA,CAAA,sBAAA,CAAA,YAAA;AACD;;AACD,YACEG,YAAY,IACZH,IAAI,KADJG,OAAAA,IAEA,CAAA,CAAA,aAAA,GAAA,YAAA,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAA,QAAA,EAAA,MAA6B,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAH/B,QAG+B,EAH/B,EAIE;AACA,UAAA,KAAA,CAAA,aAAA,CAAA,YAAA;AACD;AAjEHb,OAAc,CAAdA;;;;;;;;WA7GF,SAAA,OAAA,GAAiB;AACf,aAAOZ,QAAQ,CAAf,MAAA;AACD;;;WAED,SAAA,OAAA,GAAiB;AACf,aAAA,cAAA;AACD;;;WAED,SAAA,IAAA,CAAA,KAAA,EAAA,MAAA,EAAoE;AAClE,MAAA,IAAA,CAAA,eAAA,CAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,MAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA;;AACA,WAAA,KAAA,GAAA,KAAA;AACA,UAAA,sBAAA,GAII,KAJJ,eAAA;AAAA,UACEC,eADF,GAAA,sBAAA,CAAA,eAAA;AAAA,UAEEC,iBAFF,GAAA,sBAAA,CAAA,iBAAA;AAAA,UAGEC,eAHF,GAAA,sBAAA,CAAA,eAAA;;AAKA,UAAA,iBAAA,GAA0BA,eAA1B,EAAA;AAAA,UAAQC,KAAR,GAAA,iBAAA,CAAA,KAAA;AAAA,UAAeC,MAAf,GAAA,iBAAA,CAAA,MAAA;;AAEA,WAAA,UAAA,GAAkBH,iBAAiB,CAAC;AAClCI,QAAAA,KAAK,EAAEL,eAAe,CAAC;AACrBG,UAAAA,KAAK,EADgB,KAAA;AAErBC,UAAAA,MAAM,EAFe,MAAA;AAGrBE,UAAAA,KAAK,EAAEC,EAAE,CAHY,aAAA;AAIrBC,UAAAA,KAAK,EAAED,EAAE,CAACE;AAJW,SAAD;AADY,OAAD,CAAnC;AAUA,WAAA,kBAAA,CAAA,EAAA,CAA2BC,gBAAgB,CAA3C,KAAA,EAAmD,KAAnD,kBAAA;AACA,WAAA,kBAAA,CAAA,EAAA,CACEA,gBAAgB,CADlB,MAAA,EAEE,KAAA,mBAAA,CAAA,IAAA,CAFF,IAEE,CAFF;AAIA,WAAA,kBAAA,CAAA,EAAA,CACEA,gBAAgB,CADlB,MAAA,EAEE,KAAA,sBAAA,CAAA,IAAA,CAFF,IAEE,CAFF;AAID;;;WAED,SAAA,MAAA,CAAA,KAAA,EAA6B;AAAA,UAAA,MAAA,GAAA,IAAA;;AAC3B,UAAI,KAAJ,kBAAA,EAA6B;AAC3B;AACD;;AAED,UAAA,sBAAA,GAAmD,KAAnD,eAAA;AAAA,UAAQR,eAAR,GAAA,sBAAA,CAAA,eAAA;AAAA,UAAyBS,cAAzB,GAAA,sBAAA,CAAA,cAAA;AAAA,UAAyCC,KAAzC,GAAA,sBAAA,CAAA,KAAA;;AACA,UAAA,iBAAA,GAA0BV,eAA1B,EAAA;AAAA,UAAQC,KAAR,GAAA,iBAAA,CAAA,KAAA;AAAA,UAAeC,MAAf,GAAA,iBAAA,CAAA,MAAA;;AAGA,WAAA,kBAAA,GAAA,IAAA;;AAGA,UAAI,KAAA,KAAA,KAAA,KAAA,IAAwB,KAAA,MAAA,KAA5B,MAAA,EAAoD;AAClD,aAAA,UAAA,CAAA,MAAA,CAAuB;AAAED,UAAAA,KAAK,EAAP,KAAA;AAASC,UAAAA,MAAM,EAANA;AAAT,SAAvB;AACA,aAAA,KAAA,GAAA,KAAA;AACA,aAAA,MAAA,GAAA,MAAA;AACD;;AACDO,MAAAA,cAAc,CAAC,KAAD,UAAA,EAAkB,YAAM;AACpCC,QAAAA,KAAK,CAAC;AACJC,UAAAA,WAAW,EAAE,MAAI,CADb,UAAA;AAEJR,UAAAA,KAAK,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAFH,CAEG,CAFH;AAGJS,UAAAA,OAAO,EAHH,CAAA;AAIJC,UAAAA,KAAK,EAAE;AAJH,SAAD,CAALH;;AAaA,YAAMI,gBAAgB,GAAG,MAAI,CAAJ,KAAA,CAAA,iBAAA,CAAzB,aAAyB,EAAzB;;AACA,QAAA,MAAI,CAAJ,KAAA,CAAA,iBAAA,CAAA,aAAA,CAAA,KAAA;;AAEAC,QAAAA,KAAK,CAALA,KAAAA,CAAAA,mBAAAA,CAAAA,IAAAA;AACAA,QAAAA,KAAK,CAALA,MAAAA;AACAA,QAAAA,KAAK,CAALA,KAAAA,CAAAA,kBAAAA,CAAAA,IAAAA;;AACA,QAAA,MAAI,CAAJ,KAAA,CAAA,iBAAA,CAAA,aAAA,CAAA,gBAAA;;AAEA,QAAA,MAAI,CAAJ,kBAAA,GAAA,KAAA;AAtBFN,OAAc,CAAdA;AAwBD;;;WAkGD,SAAA,mBAAA,CAAA,MAAA,EAOG;AACD,WAAA,KAAA,CAAA,IAAA,CAAgBwB,MAAM,CAAtB,IAAA,EAAA,MAAA;AACD;;;WAeD,SAAA,sBAAA,CAAA,YAAA,EAAqE;AAEnE,UAAA,cAAA,GAAA,cAAA,CAAA,YAAA,EAAA,CAAA,CAAA;AAAA,UAAOG,CAAP,GAAA,cAAA,CAAA,CAAA,CAAA;AAAA,UAAUC,CAAV,GAAA,cAAA,CAAA,CAAA,CAAA;AAAA,UAAaC,CAAb,GAAA,cAAA,CAAA,CAAA,CAAA;;AACA,WAAA,KAAA,CAAA,KAAA,CAAA,eAAA,CAAA,IAAA,CAAsC,CAAA,CAAA,EAAA,CAAA,EAAtC,CAAsC,CAAtC;AACA,WAAA,YAAA,CAAA,YAAA;AACD;;;WAED,SAAA,aAAA,CAAA,YAAA,EAA4D;AAE1D,UAAA,cAAA,GAAA,cAAA,CAAA,YAAA,EAAA,CAAA,CAAA;AAAA,UAAOF,CAAP,GAAA,cAAA,CAAA,CAAA,CAAA;AAAA,UAAUC,CAAV,GAAA,cAAA,CAAA,CAAA,CAAA;AAAA,UAAaC,CAAb,GAAA,cAAA,CAAA,CAAA,CAAA;;AACA,WAAA,KAAA,CAAA,KAAA,CAAA,YAAA,CAAA,IAAA,CAAmC,CAAA,CAAA,EAAA,CAAA,EAAnC,CAAmC,CAAnC;AACA,WAAA,YAAA,CAAA,YAAA;AACD;;;WAED,SAAA,mBAAA,CAAA,KAAA,EAAwE;AAAA,UAA1CJ,SAA0C,GAAA,KAAA,CAA1CA,SAA0C;AACtE,UAAMR,YAAY,GAAGa,kBAAkB,CAAvC,SAAuC,CAAvC;AACA,WAAA,aAAA,CAAmB,IAAA,UAAA,CAAnB,YAAmB,CAAnB;AACD;;;WAED,SAAA,sBAAA,CAAA,KAAA,EAA2E;AAAA,UAA1CL,SAA0C,GAAA,KAAA,CAA1CA,SAA0C;AACzE,UAAMR,YAAY,GAAGa,kBAAkB,CAAvC,SAAuC,CAAvC;AACA,WAAA,sBAAA,CAA4B,IAAA,UAAA,CAA5B,YAA4B,CAA5B;AACD;;;;EApPO3C,c;SAFWD,gB","sourcesContent":["import { decodePickingColor, DOM, encodePickingColor } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../../types';\nimport {\n  IInteractionTarget,\n  InteractionEvent,\n} from '../../interaction/IInteractionService';\nimport { ILayer } from '../../layer/ILayerService';\nimport { ILngLat } from '../../map/IMapService';\nimport { gl } from '../gl';\nimport { IFramebuffer } from '../IFramebuffer';\nimport { PassType } from '../IMultiPassRenderer';\nimport BaseNormalPass from './BaseNormalPass';\n\n/**\n * color-based PixelPickingPass\n * @see https://github.com/antvis/L7/blob/next/dev-docs/PixelPickingEngine.md\n */\n@injectable()\nexport default class PixelPickingPass<\n  InitializationOptions = {}\n> extends BaseNormalPass<InitializationOptions> {\n  /**\n   * picking framebuffer，供 attributes 颜色编码后输出\n   */\n  private pickingFBO: IFramebuffer;\n\n  /**\n   * 保存 layer 引用\n   */\n  private layer: ILayer;\n\n  private width: number = 0;\n\n  private height: number = 0;\n\n  /**\n   * 简单的 throttle，防止连续触发 hover 时导致频繁渲染到 picking framebuffer\n   */\n  private alreadyInRendering: boolean = false;\n\n  public getType() {\n    return PassType.Normal;\n  }\n\n  public getName() {\n    return 'pixelPicking';\n  }\n\n  public init(layer: ILayer, config?: Partial<InitializationOptions>) {\n    super.init(layer, config);\n    this.layer = layer;\n    const {\n      createTexture2D,\n      createFramebuffer,\n      getViewportSize,\n    } = this.rendererService;\n    const { width, height } = getViewportSize();\n    // 创建 picking framebuffer，后续实时 resize\n    this.pickingFBO = createFramebuffer({\n      color: createTexture2D({\n        width,\n        height,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n      }),\n    });\n\n    // 监听 hover 事件\n    this.interactionService.on(InteractionEvent.Hover, this.pickFromPickingFBO);\n    this.interactionService.on(\n      InteractionEvent.Select,\n      this.selectFeatureHandle.bind(this),\n    );\n    this.interactionService.on(\n      InteractionEvent.Active,\n      this.highlightFeatureHandle.bind(this),\n    );\n  }\n\n  public render(layer: ILayer) {\n    if (this.alreadyInRendering) {\n      return;\n    }\n\n    const { getViewportSize, useFramebuffer, clear } = this.rendererService;\n    const { width, height } = getViewportSize();\n\n    // throttled\n    this.alreadyInRendering = true;\n\n    // resize first, fbo can't be resized in use\n    if (this.width !== width || this.height !== height) {\n      this.pickingFBO.resize({ width, height });\n      this.width = width;\n      this.height = height;\n    }\n    useFramebuffer(this.pickingFBO, () => {\n      clear({\n        framebuffer: this.pickingFBO,\n        color: [0, 0, 0, 0],\n        stencil: 0,\n        depth: 1,\n      });\n\n      /**\n       * picking pass 不需要 multipass，原因如下：\n       * 1. 已经 clear，无需 ClearPass\n       * 2. 只需要 RenderPass\n       * 3. 后处理 pass 需要跳过\n       */\n      const originRenderFlag = this.layer.multiPassRenderer.getRenderFlag();\n      this.layer.multiPassRenderer.setRenderFlag(false);\n      // trigger hooks\n      layer.hooks.beforePickingEncode.call();\n      layer.render();\n      layer.hooks.afterPickingEncode.call();\n      this.layer.multiPassRenderer.setRenderFlag(originRenderFlag);\n\n      this.alreadyInRendering = false;\n    });\n  }\n\n  /**\n   * 拾取视口指定坐标属于的要素\n   * TODO：支持区域拾取\n   */\n  private pickFromPickingFBO = ({ x, y, lngLat, type }: IInteractionTarget) => {\n    if (!this.layer.isVisible() || !this.layer.needPick(type)) {\n      return;\n    }\n    const {\n      getViewportSize,\n      readPixels,\n      useFramebuffer,\n    } = this.rendererService;\n    const { width, height } = getViewportSize();\n    const { enableHighlight, enableSelect } = this.layer.getLayerConfig();\n\n    const xInDevicePixel = x * DOM.DPR;\n    const yInDevicePixel = y * DOM.DPR;\n    if (\n      xInDevicePixel > width ||\n      xInDevicePixel < 0 ||\n      yInDevicePixel > height ||\n      yInDevicePixel < 0\n    ) {\n      return;\n    }\n    let pickedColors: Uint8Array | undefined;\n    useFramebuffer(this.pickingFBO, () => {\n      // avoid realloc\n      pickedColors = readPixels({\n        x: Math.round(xInDevicePixel),\n        // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n        y: Math.round(height - (y + 1) * DOM.DPR),\n        width: 1,\n        height: 1,\n        data: new Uint8Array(1 * 1 * 4),\n        framebuffer: this.pickingFBO,\n      });\n\n      if (\n        pickedColors[0] !== 0 ||\n        pickedColors[1] !== 0 ||\n        pickedColors[2] !== 0\n      ) {\n        const pickedFeatureIdx = decodePickingColor(pickedColors);\n        const rawFeature = this.layer\n          .getSource()\n          .getFeatureById(pickedFeatureIdx);\n        const target = {\n          x,\n          y,\n          type,\n          lngLat,\n          featureId: pickedFeatureIdx,\n          feature: rawFeature,\n        };\n        if (!rawFeature) {\n          // this.logger.error(\n          //   '未找到颜色编码解码后的原始 feature，请检查 fragment shader 中末尾是否添加了 `gl_FragColor = filterColor(gl_FragColor);`',\n          // );\n        } else {\n          // trigger onHover/Click callback on layer\n          this.layer.setCurrentPickId(pickedFeatureIdx);\n          this.triggerHoverOnLayer(target);\n        }\n      } else {\n        const target = {\n          x,\n          y,\n          lngLat,\n          type:\n            this.layer.getCurrentPickId() === null ? 'un' + type : 'mouseout',\n          featureId: null,\n          feature: null,\n        };\n        this.triggerHoverOnLayer({\n          ...target,\n          type: 'unpick',\n        });\n        this.triggerHoverOnLayer(target);\n        this.layer.setCurrentPickId(null);\n      }\n\n      if (enableHighlight) {\n        this.highlightPickedFeature(pickedColors);\n      }\n      if (\n        enableSelect &&\n        type === 'click' &&\n        pickedColors?.toString() !== [0, 0, 0, 0].toString()\n      ) {\n        this.selectFeature(pickedColors);\n      }\n    });\n  };\n\n  private triggerHoverOnLayer(target: {\n    x: number;\n    y: number;\n    type: string;\n    lngLat: ILngLat;\n    feature: unknown;\n    featureId: number | null;\n  }) {\n    this.layer.emit(target.type, target);\n  }\n\n  /**\n   * highlight 如果直接修改选中 feature 的 buffer，存在两个问题：\n   * 1. 鼠标移走时无法恢复\n   * 2. 无法实现高亮颜色与原始原色的 alpha 混合\n   * 因此高亮还是放在 shader 中做比较好\n   * @example\n   * this.layer.color('name', ['#000000'], {\n   *  featureRange: {\n   *    startIndex: pickedFeatureIdx,\n   *    endIndex: pickedFeatureIdx + 1,\n   *  },\n   * });\n   */\n  private highlightPickedFeature(pickedColors: Uint8Array | undefined) {\n    // @ts-ignore\n    const [r, g, b] = pickedColors;\n    this.layer.hooks.beforeHighlight.call([r, g, b]);\n    this.layerService.renderLayers();\n  }\n\n  private selectFeature(pickedColors: Uint8Array | undefined) {\n    // @ts-ignore\n    const [r, g, b] = pickedColors;\n    this.layer.hooks.beforeSelect.call([r, g, b]);\n    this.layerService.renderLayers();\n  }\n\n  private selectFeatureHandle({ featureId }: Partial<IInteractionTarget>) {\n    const pickedColors = encodePickingColor(featureId as number);\n    this.selectFeature(new Uint8Array(pickedColors));\n  }\n\n  private highlightFeatureHandle({ featureId }: Partial<IInteractionTarget>) {\n    const pickedColors = encodePickingColor(featureId as number);\n    this.highlightPickedFeature(new Uint8Array(pickedColors));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}