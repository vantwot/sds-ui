{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _dec, _class;\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nvar quad = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nvar sepia = \"varying vec2 v_UV;\\n\\nuniform sampler2D u_Texture;\\n\\nuniform float u_Amount : 0.5;\\n\\n// https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/sepia.js\\nvec4 sepia_filterColor(vec4 color) {\\n  float r = color.r;\\n  float g = color.g;\\n  float b = color.b;\\n  color.r =\\n    min(1.0, (r * (1.0 - (0.607 * u_Amount))) + (g * (0.769 * u_Amount)) + (b * (0.189 * u_Amount)));\\n  color.g = min(1.0, (r * 0.349 * u_Amount) + (g * (1.0 - (0.314 * u_Amount))) + (b * 0.168 * u_Amount));\\n  color.b = min(1.0, (r * 0.272 * u_Amount) + (g * 0.534 * u_Amount) + (b * (1.0 - (0.869 * u_Amount))));\\n  return color;\\n}\\n\\nvoid main() {\\n  gl_FragColor = vec4(texture2D(u_Texture, v_UV));\\n  gl_FragColor = sepia_filterColor(gl_FragColor);\\n}\";\nimport BasePostProcessingPass from '../BasePostProcessingPass';\nvar SepiaPass = (_dec = injectable(), _dec(_class = function (_BasePostProcessingPa) {\n  _inherits(SepiaPass, _BasePostProcessingPa);\n\n  var _super = _createSuper(SepiaPass);\n\n  function SepiaPass() {\n    _classCallCheck(this, SepiaPass);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SepiaPass, [{\n    key: \"setupShaders\",\n    value: function setupShaders() {\n      this.shaderModuleService.registerModule('sepia-pass', {\n        vs: quad,\n        fs: sepia\n      });\n      return this.shaderModuleService.getModule('sepia-pass');\n    }\n  }]);\n\n  return SepiaPass;\n}(BasePostProcessingPass)) || _class);\nexport { SepiaPass as default };","map":{"version":3,"sources":["../../../../../src/services/renderer/passes/post-processing/SepiaPass.ts"],"names":["injectable","SepiaPass","BasePostProcessingPass","vs","fs","sepia"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,UAAA,QAAA,WAAA;AACA,OAAA,kBAAA;;;AAGA,OAAA,sBAAA,MAAA,2BAAA;IAOqBC,S,WADpBD,UAAU,E;;;;;;;;;;;;;WAIT,SAAA,YAAA,GAAsB;AACpB,WAAA,mBAAA,CAAA,cAAA,CAAA,YAAA,EAAsD;AACpDG,QAAAA,EAAE,EADkD,IAAA;AAEpDC,QAAAA,EAAE,EAAEC;AAFgD,OAAtD;AAKA,aAAO,KAAA,mBAAA,CAAA,SAAA,CAAP,YAAO,CAAP;AACD;;;;EAVoCH,sB;SAAlBD,S","sourcesContent":["import { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport quad from '../../../../shaders/post-processing/quad.glsl';\nimport sepia from '../../../../shaders/post-processing/sepia.glsl';\nimport BasePostProcessingPass from '../BasePostProcessingPass';\n\nexport interface ISepiaPassConfig {\n  amount: number;\n}\n\n@injectable()\nexport default class SepiaPass extends BasePostProcessingPass<\n  ISepiaPassConfig\n> {\n  public setupShaders() {\n    this.shaderModuleService.registerModule('sepia-pass', {\n      vs: quad,\n      fs: sepia,\n    });\n\n    return this.shaderModuleService.getModule('sepia-pass');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}