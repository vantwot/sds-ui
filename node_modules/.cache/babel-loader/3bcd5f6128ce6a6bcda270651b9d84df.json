{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nexport var Blob = function () {\n  function Blob(buffers, type) {\n    _classCallCheck(this, Blob);\n\n    this.buffers = buffers;\n    this.type = type;\n  }\n\n  _createClass(Blob, [{\n    key: \"arraybuffer\",\n    value: function arraybuffer() {\n      return Promise.resolve(this.buffers[0]);\n    }\n  }, {\n    key: \"stream\",\n    value: function stream() {\n      throw new Error('not implemented');\n    }\n  }, {\n    key: \"text\",\n    value: function text() {\n      throw new Error('not implemented');\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(start, end, contentType) {\n      throw new Error('not implemented');\n    }\n  }]);\n\n  return Blob;\n}();","map":{"version":3,"sources":["../../src/mini-adapter/blob.ts"],"names":["Blob","buffers","type","Promise"],"mappings":";;AAEA,OAAA,IAAaA,IAAb,GAAA,YAAA;AAME,WAAA,IAAA,CAAA,OAAA,EAAA,IAAA,EAGE;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,CAAA;;AAAA,SAFgBC,OAEhB,GAFgBA,OAEhB;AAAA,SADgBC,IAChB,GADgBA,IAChB;AAAE;;AATN,EAAA,YAAA,CAAA,IAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAWE,SAAA,WAAA,GAA2C;AACzC,aAAOC,OAAO,CAAPA,OAAAA,CAAgB,KAAA,OAAA,CAAvB,CAAuB,CAAhBA,CAAP;AACD;AAbH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,QAAA;AAAA,IAAA,KAAA,EAeE,SAAA,MAAA,GAAgB;AACd,YAAM,IAAA,KAAA,CAAN,iBAAM,CAAN;AACD;AAjBH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,MAAA;AAAA,IAAA,KAAA,EAmBE,SAAA,IAAA,GAAc;AACZ,YAAM,IAAA,KAAA,CAAN,iBAAM,CAAN;AACD;AArBH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,OAAA;AAAA,IAAA,KAAA,EAuBE,SAAA,KAAA,CAAA,KAAA,EAAA,GAAA,EAAA,WAAA,EAAiE;AAC/D,YAAM,IAAA,KAAA,CAAN,iBAAM,CAAN;AACD;AAzBH,GAAA,CAAA,CAAA;;AAAA,SAAA,IAAA;AAAA,CAAA,EAAA","sourcesContent":["// @ts-nocheck\n// tslint:disable\nexport class Blob {\n  /**\n   *\n   * @param buffers only support zero index\n   * @param type mimetype image/png image/webp...\n   */\n  constructor(\n    public readonly buffers: ArrayBuffer[],\n    public readonly type: string | { type: string },\n  ) {}\n\n  public arraybuffer(): Promise<ArrayBuffer> {\n    return Promise.resolve(this.buffers[0]);\n  }\n\n  public stream() {\n    throw new Error('not implemented');\n  }\n\n  public text() {\n    throw new Error('not implemented');\n  }\n\n  public slice(start?: number, end?: number, contentType?: string) {\n    throw new Error('not implemented');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}