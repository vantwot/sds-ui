{"ast":null,"code":"import _regeneratorRuntime from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _toConsumableArray from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/* eslint-disable @typescript-eslint/no-redeclare */\n\n\nimport 'reflect-metadata';\n/** Application 扩展依赖 */\n\nimport { ICommandHandler, IGraphCommandFactory, IGraphCommandContribution } from '../command/interface';\nimport { inject, singleton } from 'mana-syringe';\nimport { IHookContribution } from '../hooks/interface';\nimport { Disposable, DisposableCollection } from '../common/disposable';\n/** Commands */\n\nimport { registerNodeCommand, hookhubList as nodeHooks } from './node';\nimport { registerGraphCommand, hookhubList as graphHooks } from './graph';\nimport { registerEdgeCommand, hookhubList as edgeHooks } from './edge';\nimport { registerGroupCommand, hookhubList as groupHooks } from './group';\nimport { registerModelServiceCommand, hookhubList as observablesHooks } from './models';\n/** Command Hooks*/\n\nimport { HookHub } from '@antv/xflow-hook';\nimport { CommandConfig } from './config';\n/** Commands 配置项目*/\n\nvar hookhubList = [].concat(_toConsumableArray(nodeHooks), _toConsumableArray(edgeHooks), _toConsumableArray(groupHooks), _toConsumableArray(graphHooks), _toConsumableArray(observablesHooks));\n\nvar defaultHookFactory = function defaultHookFactory() {\n  return new HookHub();\n};\n\nvar XFlowCommandContribution = /*#__PURE__*/function () {\n  function XFlowCommandContribution() {\n    var _this = this;\n\n    _classCallCheck(this, XFlowCommandContribution);\n\n    /** 注册钩子 */\n    this.registerHook = function (hooks) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var d;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                d = hooks.x6Events.registerHook({\n                  name: 'bind group node move event',\n                  handler: function handler(args) {\n                    return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                      var _this3 = this;\n\n                      var event;\n                      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              event = {\n                                eventName: 'node:moving',\n                                callback: function callback(_ref) {\n                                  var node = _ref.node;\n                                  return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                                    var isGroup, graph, _node$getData, groupId, group, isCollapsed, originSize, hasChange, originPosition, x, y, cornerX, cornerY, childs, groupData;\n\n                                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                      while (1) {\n                                        switch (_context.prev = _context.next) {\n                                          case 0:\n                                            isGroup = node.prop('isGroup');\n\n                                            if (!isGroup) {\n                                              _context.next = 4;\n                                              break;\n                                            }\n\n                                            node.prop('originPosition', node.getPosition());\n                                            return _context.abrupt(\"return\");\n\n                                          case 4:\n                                            graph = node.model.graph;\n                                            _node$getData = node.getData(), groupId = _node$getData.group;\n                                            group = graph.getNodes().find(function (cell) {\n                                              return cell.id === groupId;\n                                            });\n\n                                            if (group) {\n                                              _context.next = 9;\n                                              break;\n                                            }\n\n                                            return _context.abrupt(\"return\");\n\n                                          case 9:\n                                            isCollapsed = group.getProp('isCollapsed');\n                                            originSize = group.getProp('originSize');\n                                            hasChange = false;\n\n                                            if (originSize == null) {\n                                              originSize = group.size();\n                                              group.prop('originSize', originSize);\n                                            }\n\n                                            originPosition = group.prop('originPosition');\n\n                                            if (originPosition == null) {\n                                              originPosition = group.getPosition();\n                                              group.prop('originPosition', originPosition);\n                                            }\n\n                                            x = originPosition.x;\n                                            y = originPosition.y;\n                                            cornerX = originPosition.x + originSize.width;\n                                            cornerY = originPosition.y + originSize.height;\n                                            childs = group.getChildren();\n\n                                            if (childs) {\n                                              childs.forEach(function (child) {\n                                                var bbox = child.getBBox().inflate(12);\n                                                var corner = bbox.getCorner();\n\n                                                if (bbox.x < x) {\n                                                  x = bbox.x;\n                                                  hasChange = true;\n                                                }\n\n                                                if (bbox.y < y) {\n                                                  y = bbox.y;\n                                                  hasChange = true;\n                                                }\n\n                                                if (corner.x > cornerX) {\n                                                  cornerX = corner.x;\n                                                  hasChange = true;\n                                                }\n\n                                                if (corner.y > cornerY) {\n                                                  cornerY = corner.y;\n                                                  hasChange = true;\n                                                }\n                                              });\n                                            }\n\n                                            if (hasChange) {\n                                              group.prop({\n                                                position: {\n                                                  x: x,\n                                                  y: y\n                                                },\n                                                size: {\n                                                  width: cornerX - x,\n                                                  height: cornerY - y\n                                                }\n                                              });\n                                              groupData = Object.assign(Object.assign({}, group.getData()), {\n                                                x: x,\n                                                y: y,\n                                                width: cornerX - x,\n                                                height: cornerY - y\n                                              });\n\n                                              if (isCollapsed !== true) {\n                                                groupData.groupChildrenSize = {\n                                                  width: cornerX - x,\n                                                  height: cornerY - y\n                                                };\n                                              }\n\n                                              group.setData(groupData);\n                                            }\n                                            /**\n                                             *  updateNodeData:\n                                             *  1. 折叠时移动更新xy，size需要更新，childrenSize不变\n                                             *  2. 展开时\n                                             *      - 移动Group更新xy，size不需要更新，childrenSize不更新\n                                             *      - 移动children, 更新xy, size childrenSize\n                                             */\n\n\n                                          case 22:\n                                          case \"end\":\n                                            return _context.stop();\n                                        }\n                                      }\n                                    }, _callee);\n                                  }));\n                                }\n                              };\n                              args.push(event);\n\n                            case 2:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2);\n                    }));\n                  }\n                });\n                return _context3.abrupt(\"return\", Disposable.create(function () {\n                  d.dispose();\n                }));\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n    };\n    /** 注册钩子 */\n\n\n    this.registerHookHub = function (registry) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var toDispose;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                toDispose = new DisposableCollection();\n                hookhubList.forEach(function (_ref2) {\n                  var hookKey = _ref2.hookKey,\n                      _ref2$createHook = _ref2.createHook,\n                      createHook = _ref2$createHook === void 0 ? defaultHookFactory : _ref2$createHook;\n                  var d = registry.registerHookHub(hookKey, createHook());\n                  toDispose.push(d);\n                });\n                this.commandConfig.getConfig().then(function (_ref3) {\n                  var getContributions = _ref3.getContributions;\n                  var CommandContributions = getContributions();\n                  CommandContributions.forEach(function (_ref4) {\n                    var hookKey = _ref4.hookKey,\n                        _ref4$createHook = _ref4.createHook,\n                        createHook = _ref4$createHook === void 0 ? defaultHookFactory : _ref4$createHook;\n                    var d = registry.registerHookHub(hookKey, createHook());\n                    toDispose.push(d);\n                  });\n                });\n                return _context4.abrupt(\"return\", toDispose);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n  }\n  /** 注册画布节点命令 */\n\n\n  _createClass(XFlowCommandContribution, [{\n    key: \"registerGraphCommands\",\n    value: function registerGraphCommands(registry) {\n      var _this4 = this;\n\n      /** 注册内置的命令 */\n      hookhubList.forEach(function (_ref5) {\n        var command = _ref5.command;\n        registry.registerCommand(command, {\n          createCommand: _this4.commandFactory\n        });\n      });\n      /** 注册外部传入的命令 */\n\n      this.commandConfig.getConfig().then(function (_ref6) {\n        var getContributions = _ref6.getContributions;\n        var CommandContributions = getContributions();\n        CommandContributions.forEach(function (cmd) {\n          registry.registerCommand(cmd.command, {\n            createCommand: _this4.commandFactory\n          });\n        });\n      });\n    }\n  }]);\n\n  return XFlowCommandContribution;\n}();\n\n__decorate([inject(IGraphCommandFactory), __metadata(\"design:type\", Function)], XFlowCommandContribution.prototype, \"commandFactory\", void 0);\n\n__decorate([inject(CommandConfig), __metadata(\"design:type\", CommandConfig\n/** 注册画布节点命令 */\n)], XFlowCommandContribution.prototype, \"commandConfig\", void 0);\n\nXFlowCommandContribution = __decorate([singleton({\n  contrib: [IGraphCommandContribution, IHookContribution]\n})], XFlowCommandContribution);\nexport { XFlowCommandContribution };\nexport var registerXFlowCommandContribution = function registerXFlowCommandContribution(register, commandConfig) {\n  /** 扩展 用户自定义命令 */\n  var configContributions = commandConfig.getCommandContributions();\n  configContributions.forEach(function (execution) {\n    var CommandHandler = execution.CommandHandler,\n        command = execution.command;\n    register({\n      token: {\n        token: ICommandHandler,\n        named: command.id\n      },\n      useClass: CommandHandler\n    });\n  });\n  /** 扩展 Graph 命令 */\n\n  registerGraphCommand(register);\n  /** 扩展 Node 命令 */\n\n  registerNodeCommand(register);\n  /** 扩展 Edge 命令 */\n\n  registerEdgeCommand(register);\n  /** 扩展 Edge 命令 */\n\n  registerGroupCommand(register);\n  /** 扩展 Observable 命令 */\n\n  registerModelServiceCommand(register);\n  /** 注册 XFlowCommandContribution */\n\n  register(XFlowCommandContribution);\n};","map":{"version":3,"sources":["../../src/command-contributions/command-contribution.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/* eslint-disable @typescript-eslint/no-redeclare */\nimport 'reflect-metadata';\n/** Application 扩展依赖 */\nimport { ICommandHandler, IGraphCommandFactory, IGraphCommandContribution, } from '../command/interface';\nimport { inject, singleton } from 'mana-syringe';\nimport { IHookContribution } from '../hooks/interface';\nimport { Disposable, DisposableCollection } from '../common/disposable';\n/** Commands */\nimport { registerNodeCommand, hookhubList as nodeHooks } from './node';\nimport { registerGraphCommand, hookhubList as graphHooks } from './graph';\nimport { registerEdgeCommand, hookhubList as edgeHooks } from './edge';\nimport { registerGroupCommand, hookhubList as groupHooks } from './group';\nimport { registerModelServiceCommand, hookhubList as observablesHooks } from './models';\n/** Command Hooks*/\nimport { HookHub } from '@antv/xflow-hook';\nimport { CommandConfig } from './config';\n/** Commands 配置项目*/\nconst hookhubList = [...nodeHooks, ...edgeHooks, ...groupHooks, ...graphHooks, ...observablesHooks];\nconst defaultHookFactory = () => new HookHub();\nlet XFlowCommandContribution = class XFlowCommandContribution {\n    constructor() {\n        /** 注册钩子 */\n        this.registerHook = (hooks) => __awaiter(this, void 0, void 0, function* () {\n            const d = hooks.x6Events.registerHook({\n                name: 'bind group node move event',\n                handler: (args) => __awaiter(this, void 0, void 0, function* () {\n                    const event = {\n                        eventName: 'node:moving',\n                        callback: ({ node }) => __awaiter(this, void 0, void 0, function* () {\n                            const isGroup = node.prop('isGroup');\n                            if (isGroup) {\n                                node.prop('originPosition', node.getPosition());\n                                return;\n                            }\n                            const graph = node.model.graph;\n                            const { group: groupId } = node.getData();\n                            const group = graph.getNodes().find(cell => cell.id === groupId);\n                            if (!group) {\n                                return;\n                            }\n                            const isCollapsed = group.getProp('isCollapsed');\n                            let originSize = group.getProp('originSize');\n                            let hasChange = false;\n                            if (originSize == null) {\n                                originSize = group.size();\n                                group.prop('originSize', originSize);\n                            }\n                            let originPosition = group.prop('originPosition');\n                            if (originPosition == null) {\n                                originPosition = group.getPosition();\n                                group.prop('originPosition', originPosition);\n                            }\n                            let x = originPosition.x;\n                            let y = originPosition.y;\n                            let cornerX = originPosition.x + originSize.width;\n                            let cornerY = originPosition.y + originSize.height;\n                            const childs = group.getChildren();\n                            if (childs) {\n                                childs.forEach(child => {\n                                    const bbox = child.getBBox().inflate(12);\n                                    const corner = bbox.getCorner();\n                                    if (bbox.x < x) {\n                                        x = bbox.x;\n                                        hasChange = true;\n                                    }\n                                    if (bbox.y < y) {\n                                        y = bbox.y;\n                                        hasChange = true;\n                                    }\n                                    if (corner.x > cornerX) {\n                                        cornerX = corner.x;\n                                        hasChange = true;\n                                    }\n                                    if (corner.y > cornerY) {\n                                        cornerY = corner.y;\n                                        hasChange = true;\n                                    }\n                                });\n                            }\n                            if (hasChange) {\n                                group.prop({\n                                    position: { x, y },\n                                    size: { width: cornerX - x, height: cornerY - y },\n                                });\n                                const groupData = Object.assign(Object.assign({}, group.getData()), { x,\n                                    y, width: cornerX - x, height: cornerY - y });\n                                if (isCollapsed !== true) {\n                                    groupData.groupChildrenSize = { width: cornerX - x, height: cornerY - y };\n                                }\n                                group.setData(groupData);\n                            }\n                            /**\n                             *  updateNodeData:\n                             *  1. 折叠时移动更新xy，size需要更新，childrenSize不变\n                             *  2. 展开时\n                             *      - 移动Group更新xy，size不需要更新，childrenSize不更新\n                             *      - 移动children, 更新xy, size childrenSize\n                             */\n                        }),\n                    };\n                    args.push(event);\n                }),\n            });\n            return Disposable.create(() => {\n                d.dispose();\n            });\n        });\n        /** 注册钩子 */\n        this.registerHookHub = (registry) => __awaiter(this, void 0, void 0, function* () {\n            const toDispose = new DisposableCollection();\n            hookhubList.forEach(({ hookKey, createHook = defaultHookFactory }) => {\n                const d = registry.registerHookHub(hookKey, createHook());\n                toDispose.push(d);\n            });\n            this.commandConfig.getConfig().then(({ getContributions }) => {\n                const CommandContributions = getContributions();\n                CommandContributions.forEach(({ hookKey, createHook = defaultHookFactory }) => {\n                    const d = registry.registerHookHub(hookKey, createHook());\n                    toDispose.push(d);\n                });\n            });\n            return toDispose;\n        });\n    }\n    /** 注册画布节点命令 */\n    registerGraphCommands(registry) {\n        /** 注册内置的命令 */\n        hookhubList.forEach(({ command }) => {\n            registry.registerCommand(command, {\n                createCommand: this.commandFactory,\n            });\n        });\n        /** 注册外部传入的命令 */\n        this.commandConfig.getConfig().then(({ getContributions }) => {\n            const CommandContributions = getContributions();\n            CommandContributions.forEach(cmd => {\n                registry.registerCommand(cmd.command, {\n                    createCommand: this.commandFactory,\n                });\n            });\n        });\n    }\n};\n__decorate([\n    inject(IGraphCommandFactory),\n    __metadata(\"design:type\", Function)\n], XFlowCommandContribution.prototype, \"commandFactory\", void 0);\n__decorate([\n    inject(CommandConfig),\n    __metadata(\"design:type\", CommandConfig\n    /** 注册画布节点命令 */\n    )\n], XFlowCommandContribution.prototype, \"commandConfig\", void 0);\nXFlowCommandContribution = __decorate([\n    singleton({ contrib: [IGraphCommandContribution, IHookContribution] })\n], XFlowCommandContribution);\nexport { XFlowCommandContribution };\nexport const registerXFlowCommandContribution = (register, commandConfig) => {\n    /** 扩展 用户自定义命令 */\n    const configContributions = commandConfig.getCommandContributions();\n    configContributions.forEach(execution => {\n        const { CommandHandler, command } = execution;\n        register({\n            token: { token: ICommandHandler, named: command.id },\n            useClass: CommandHandler,\n        });\n    });\n    /** 扩展 Graph 命令 */\n    registerGraphCommand(register);\n    /** 扩展 Node 命令 */\n    registerNodeCommand(register);\n    /** 扩展 Edge 命令 */\n    registerEdgeCommand(register);\n    /** 扩展 Edge 命令 */\n    registerGroupCommand(register);\n    /** 扩展 Observable 命令 */\n    registerModelServiceCommand(register);\n    /** 注册 XFlowCommandContribution */\n    register(XFlowCommandContribution);\n};\n//# sourceMappingURL=command-contribution.js.map"]},"metadata":{},"sourceType":"module"}