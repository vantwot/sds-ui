{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar DragRotateHandler = function () {\n  function DragRotateHandler(options, mouseRotate, mousePitch) {\n    _classCallCheck(this, DragRotateHandler);\n\n    _defineProperty(this, \"mouseRotate\", void 0);\n\n    _defineProperty(this, \"mousePitch\", void 0);\n\n    _defineProperty(this, \"pitchWithRotate\", void 0);\n\n    this.pitchWithRotate = options.pitchWithRotate;\n    this.mouseRotate = mouseRotate;\n    this.mousePitch = mousePitch;\n  }\n\n  _createClass(DragRotateHandler, [{\n    key: \"enable\",\n    value: function enable() {\n      this.mouseRotate.enable();\n\n      if (this.pitchWithRotate) {\n        this.mousePitch.enable();\n      }\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.mouseRotate.disable();\n      this.mousePitch.disable();\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.mouseRotate.isEnabled() && (!this.pitchWithRotate || this.mousePitch.isEnabled());\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.mouseRotate.isActive() || this.mousePitch.isActive();\n    }\n  }]);\n\n  return DragRotateHandler;\n}();\n\nexport { DragRotateHandler as default };","map":{"version":3,"sources":["../../../src/handler/shim/drag_rotate.ts"],"names":["DragRotateHandler","options"],"mappings":";;;;IAMqBA,iB;AAYnB,WAAA,iBAAA,CAAA,OAAA,EAAA,WAAA,EAAA,UAAA,EAIE;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAAA,KAAA,CAAA,CAAA;;AACA,SAAA,eAAA,GAAuBC,OAAO,CAA9B,eAAA;AACA,SAAA,WAAA,GAAA,WAAA;AACA,SAAA,UAAA,GAAA,UAAA;AACD;;;;WAQD,SAAA,MAAA,GAAgB;AACd,WAAA,WAAA,CAAA,MAAA;;AACA,UAAI,KAAJ,eAAA,EAA0B;AACxB,aAAA,UAAA,CAAA,MAAA;AACD;AACF;;;WAQD,SAAA,OAAA,GAAiB;AACf,WAAA,WAAA,CAAA,OAAA;AACA,WAAA,UAAA,CAAA,OAAA;AACD;;;WAOD,SAAA,SAAA,GAAmB;AACjB,aACE,KAAA,WAAA,CAAA,SAAA,OACC,CAAC,KAAD,eAAA,IAAyB,KAAA,UAAA,CAF5B,SAE4B,EAD1B,CADF;AAID;;;WAOD,SAAA,QAAA,GAAkB;AAChB,aAAO,KAAA,WAAA,CAAA,QAAA,MAA+B,KAAA,UAAA,CAAtC,QAAsC,EAAtC;AACD;;;;;;SAjEkBD,iB","sourcesContent":["import { MousePitchHandler, MouseRotateHandler } from '../mouse';\n\n/**\n * The `DragRotateHandler` allows the user to rotate the map by clicking and\n * dragging the cursor while holding the right mouse button or `ctrl` key.\n */\nexport default class DragRotateHandler {\n  private mouseRotate: MouseRotateHandler;\n  private mousePitch: MousePitchHandler;\n  private pitchWithRotate: boolean;\n\n  /**\n   * @param {Object} [options]\n   * @param {number} [options.bearingSnap] The threshold, measured in degrees, that determines when the map's\n   *   bearing will snap to north.\n   * @param {bool} [options.pitchWithRotate=true] Control the map pitch in addition to the bearing\n   * @private\n   */\n  constructor(\n    options: { pitchWithRotate: boolean },\n    mouseRotate: MouseRotateHandler,\n    mousePitch: MousePitchHandler,\n  ) {\n    this.pitchWithRotate = options.pitchWithRotate;\n    this.mouseRotate = mouseRotate;\n    this.mousePitch = mousePitch;\n  }\n\n  /**\n   * Enables the \"drag to rotate\" interaction.\n   *\n   * @example\n   * map.dragRotate.enable();\n   */\n  public enable() {\n    this.mouseRotate.enable();\n    if (this.pitchWithRotate) {\n      this.mousePitch.enable();\n    }\n  }\n\n  /**\n   * Disables the \"drag to rotate\" interaction.\n   *\n   * @example\n   * map.dragRotate.disable();\n   */\n  public disable() {\n    this.mouseRotate.disable();\n    this.mousePitch.disable();\n  }\n\n  /**\n   * Returns a Boolean indicating whether the \"drag to rotate\" interaction is enabled.\n   *\n   * @returns {boolean} `true` if the \"drag to rotate\" interaction is enabled.\n   */\n  public isEnabled() {\n    return (\n      this.mouseRotate.isEnabled() &&\n      (!this.pitchWithRotate || this.mousePitch.isEnabled())\n    );\n  }\n\n  /**\n   * Returns a Boolean indicating whether the \"drag to rotate\" interaction is active, i.e. currently being used.\n   *\n   * @returns {boolean} `true` if the \"drag to rotate\" interaction is active.\n   */\n  public isActive() {\n    return this.mouseRotate.isActive() || this.mousePitch.isActive();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}