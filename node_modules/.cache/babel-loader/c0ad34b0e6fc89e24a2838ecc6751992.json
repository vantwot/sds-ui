{"ast":null,"code":"function max(x) {\n  if (x.length === 0) {\n    throw new Error('max requires at least one data point');\n  }\n\n  var value = x[0];\n\n  for (var i = 1; i < x.length; i++) {\n    if (x[i] > value) {\n      value = x[i];\n    }\n  }\n\n  return value;\n}\n\nfunction min(x) {\n  if (x.length === 0) {\n    throw new Error('min requires at least one data point');\n  }\n\n  var value = x[0];\n\n  for (var i = 1; i < x.length; i++) {\n    if (x[i] < value) {\n      value = x[i];\n    }\n  }\n\n  return value;\n}\n\nfunction sum(x) {\n  if (x.length === 0) {\n    return 0;\n  }\n\n  var sumNum = x[0];\n  var correction = 0;\n  var transition;\n\n  for (var i = 1; i < x.length; i++) {\n    transition = sumNum + x[i] * 1;\n\n    if (Math.abs(sumNum) >= Math.abs(x[i])) {\n      correction += sumNum - transition + x[i];\n    } else {\n      correction += x[i] - transition + sumNum;\n    }\n\n    sumNum = transition;\n  }\n\n  return sumNum + correction * 1;\n}\n\nfunction mean(x) {\n  if (x.length === 0) {\n    throw new Error('mean requires at least one data point');\n  }\n\n  return sum(x) / x.length;\n}\n\nexport { sum, max, min, mean };\nexport var statMap = {\n  min: min,\n  max: max,\n  mean: mean,\n  sum: sum\n};","map":{"version":3,"sources":["../../src/utils/statistics.ts"],"names":["x","value","i","sumNum","correction","transition","Math","sum","statMap","min","max","mean"],"mappings":"AAAA,SAAA,GAAA,CAAA,CAAA,EAA0B;AACxB,MAAIA,CAAC,CAADA,MAAAA,KAAJ,CAAA,EAAoB;AAClB,UAAM,IAAA,KAAA,CAAN,sCAAM,CAAN;AACD;;AAED,MAAIC,KAAK,GAAGD,CAAC,CAAb,CAAa,CAAb;;AACA,OAAK,IAAIE,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGF,CAAC,CAArB,MAAA,EAA8BE,CAA9B,EAAA,EAAmC;AAGjC,QAAIF,CAAC,CAADA,CAAC,CAADA,GAAJ,KAAA,EAAkB;AAChBC,MAAAA,KAAK,GAAGD,CAAC,CAATC,CAAS,CAATA;AACD;AACF;;AACD,SAAA,KAAA;AACD;;AAED,SAAA,GAAA,CAAA,CAAA,EAA0B;AACxB,MAAID,CAAC,CAADA,MAAAA,KAAJ,CAAA,EAAoB;AAClB,UAAM,IAAA,KAAA,CAAN,sCAAM,CAAN;AACD;;AAED,MAAIC,KAAK,GAAGD,CAAC,CAAb,CAAa,CAAb;;AACA,OAAK,IAAIE,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGF,CAAC,CAArB,MAAA,EAA8BE,CAA9B,EAAA,EAAmC;AAGjC,QAAIF,CAAC,CAADA,CAAC,CAADA,GAAJ,KAAA,EAAkB;AAChBC,MAAAA,KAAK,GAAGD,CAAC,CAATC,CAAS,CAATA;AACD;AACF;;AACD,SAAA,KAAA;AACD;;AAED,SAAA,GAAA,CAAA,CAAA,EAA0B;AAExB,MAAID,CAAC,CAADA,MAAAA,KAAJ,CAAA,EAAoB;AAClB,WAAA,CAAA;AACD;;AAGD,MAAIG,MAAM,GAAGH,CAAC,CAAd,CAAc,CAAd;AAGA,MAAII,UAAU,GAAd,CAAA;AAEA,MAAA,UAAA;;AAEA,OAAK,IAAIF,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGF,CAAC,CAArB,MAAA,EAA8BE,CAA9B,EAAA,EAAmC;AACjCG,IAAAA,UAAU,GAAGF,MAAM,GAAGH,CAAC,CAADA,CAAC,CAADA,GAAtBK,CAAAA;;AAIA,QAAIC,IAAI,CAAJA,GAAAA,CAAAA,MAAAA,KAAoBA,IAAI,CAAJA,GAAAA,CAASN,CAAC,CAAlC,CAAkC,CAAVM,CAAxB,EAAwC;AACtCF,MAAAA,UAAU,IAAID,MAAM,GAANA,UAAAA,GAAsBH,CAAC,CAArCI,CAAqC,CAArCA;AADF,KAAA,MAEO;AACLA,MAAAA,UAAU,IAAIJ,CAAC,CAADA,CAAC,CAADA,GAAAA,UAAAA,GAAdI,MAAAA;AACD;;AAEDD,IAAAA,MAAM,GAANA,UAAAA;AACD;;AAGD,SAAOA,MAAM,GAAGC,UAAU,GAA1B,CAAA;AACD;;AACD,SAAA,IAAA,CAAA,CAAA,EAA2B;AACzB,MAAIJ,CAAC,CAADA,MAAAA,KAAJ,CAAA,EAAoB;AAClB,UAAM,IAAA,KAAA,CAAN,uCAAM,CAAN;AACD;;AACD,SAAOO,GAAG,CAAHA,CAAG,CAAHA,GAASP,CAAC,CAAjB,MAAA;AACD;;AAED,SAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;AACA,OAAO,IAAMQ,OAA+B,GAAG;AAC7CC,EAAAA,GAAG,EAD0C,GAAA;AAE7CC,EAAAA,GAAG,EAF0C,GAAA;AAG7CC,EAAAA,IAAI,EAHyC,IAAA;AAI7CJ,EAAAA,GAAG,EAAHA;AAJ6C,CAAxC","sourcesContent":["function max(x: number[]) {\n  if (x.length === 0) {\n    throw new Error('max requires at least one data point');\n  }\n\n  let value = x[0];\n  for (let i = 1; i < x.length; i++) {\n    // On the first iteration of this loop, max is\n    // undefined and is thus made the maximum element in the array\n    if (x[i] > value) {\n      value = x[i];\n    }\n  }\n  return value;\n}\n\nfunction min(x: number[]) {\n  if (x.length === 0) {\n    throw new Error('min requires at least one data point');\n  }\n\n  let value = x[0];\n  for (let i = 1; i < x.length; i++) {\n    // On the first iteration of this loop, min is\n    // undefined and is thus made the minimum element in the array\n    if (x[i] < value) {\n      value = x[i];\n    }\n  }\n  return value;\n}\n\nfunction sum(x: number[]) {\n  // If the array is empty, we needn't bother computing its sum\n  if (x.length === 0) {\n    return 0;\n  }\n\n  // Initializing the sum as the first number in the array\n  let sumNum = x[0];\n\n  // Keeping track of the floating-point error correction\n  let correction = 0;\n\n  let transition;\n\n  for (let i = 1; i < x.length; i++) {\n    transition = sumNum + x[i] * 1;\n\n    // Here we need to update the correction in a different fashion\n    // if the new absolute value is greater than the absolute sum\n    if (Math.abs(sumNum) >= Math.abs(x[i])) {\n      correction += sumNum - transition + x[i];\n    } else {\n      correction += x[i] - transition + sumNum;\n    }\n\n    sumNum = transition;\n  }\n\n  // Returning the corrected sum\n  return sumNum + correction * 1;\n}\nfunction mean(x: number[]) {\n  if (x.length === 0) {\n    throw new Error('mean requires at least one data point');\n  }\n  return sum(x) / x.length;\n}\n\nexport { sum, max, min, mean };\nexport const statMap: { [key: string]: any } = {\n  min,\n  max,\n  mean,\n  sum,\n};\n"]},"metadata":{},"sourceType":"module"}