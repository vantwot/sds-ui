{"ast":null,"code":"var rclass = /[\\t\\r\\n\\f]/g;\nvar rnotwhite = /\\S+/g;\n\nvar fillSpaces = function fillSpaces(str) {\n  return \" \".concat(str, \" \");\n};\n\nexport function getClass(elem) {\n  return elem && elem.getAttribute && elem.getAttribute('class') || '';\n}\nexport function hasClass(elem, selector) {\n  if (elem == null || selector == null) {\n    return false;\n  }\n\n  var classNames = fillSpaces(getClass(elem));\n  var className = fillSpaces(selector);\n  return elem.nodeType === 1 ? classNames.replace(rclass, ' ').includes(className) : false;\n}\nexport function addClass(elem, selector) {\n  if (elem == null || selector == null) {\n    return;\n  }\n\n  if (typeof selector === 'function') {\n    return addClass(elem, selector(getClass(elem)));\n  }\n\n  if (typeof selector === 'string' && elem.nodeType === 1) {\n    var classes = selector.match(rnotwhite) || [];\n    var oldValue = fillSpaces(getClass(elem)).replace(rclass, ' ');\n    var newValue = classes.reduce(function (memo, cls) {\n      if (memo.indexOf(fillSpaces(cls)) < 0) {\n        return \"\".concat(memo).concat(cls, \" \");\n      }\n\n      return memo;\n    }, oldValue);\n    newValue = newValue.trim();\n\n    if (oldValue !== newValue) {\n      elem.setAttribute('class', newValue);\n    }\n  }\n}\nexport function removeClass(elem, selector) {\n  if (elem == null) {\n    return;\n  }\n\n  if (typeof selector === 'function') {\n    return removeClass(elem, selector(getClass(elem)));\n  }\n\n  if ((!selector || typeof selector === 'string') && elem.nodeType === 1) {\n    var classes = (selector || '').match(rnotwhite) || [];\n    var oldValue = fillSpaces(getClass(elem)).replace(rclass, ' ');\n    var newValue = classes.reduce(function (memo, cls) {\n      var className = fillSpaces(cls);\n\n      if (memo.indexOf(className) > -1) {\n        return memo.replace(className, ' ');\n      }\n\n      return memo;\n    }, oldValue);\n    newValue = selector ? newValue.trim() : '';\n\n    if (oldValue !== newValue) {\n      elem.setAttribute('class', newValue);\n    }\n  }\n}\nexport function toggleClass(elem, selector, stateVal) {\n  if (elem == null || selector == null) {\n    return;\n  }\n\n  if (stateVal != null && typeof selector === 'string') {\n    stateVal ? addClass(elem, selector) : removeClass(elem, selector);\n    return;\n  }\n\n  if (typeof selector === 'function') {\n    return toggleClass(elem, selector(getClass(elem), stateVal), stateVal);\n  }\n\n  if (typeof selector === 'string') {\n    var metches = selector.match(rnotwhite) || [];\n    metches.forEach(function (cls) {\n      hasClass(elem, cls) ? removeClass(elem, cls) : addClass(elem, cls);\n    });\n  }\n}","map":{"version":3,"sources":["../../../src/util/dom/class.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["const rclass = /[\\t\\r\\n\\f]/g;\nconst rnotwhite = /\\S+/g;\nconst fillSpaces = (str) => ` ${str} `;\nexport function getClass(elem) {\n    return (elem && elem.getAttribute && elem.getAttribute('class')) || '';\n}\nexport function hasClass(elem, selector) {\n    if (elem == null || selector == null) {\n        return false;\n    }\n    const classNames = fillSpaces(getClass(elem));\n    const className = fillSpaces(selector);\n    return elem.nodeType === 1\n        ? classNames.replace(rclass, ' ').includes(className)\n        : false;\n}\nexport function addClass(elem, selector) {\n    if (elem == null || selector == null) {\n        return;\n    }\n    if (typeof selector === 'function') {\n        return addClass(elem, selector(getClass(elem)));\n    }\n    if (typeof selector === 'string' && elem.nodeType === 1) {\n        const classes = selector.match(rnotwhite) || [];\n        const oldValue = fillSpaces(getClass(elem)).replace(rclass, ' ');\n        let newValue = classes.reduce((memo, cls) => {\n            if (memo.indexOf(fillSpaces(cls)) < 0) {\n                return `${memo}${cls} `;\n            }\n            return memo;\n        }, oldValue);\n        newValue = newValue.trim();\n        if (oldValue !== newValue) {\n            elem.setAttribute('class', newValue);\n        }\n    }\n}\nexport function removeClass(elem, selector) {\n    if (elem == null) {\n        return;\n    }\n    if (typeof selector === 'function') {\n        return removeClass(elem, selector(getClass(elem)));\n    }\n    if ((!selector || typeof selector === 'string') && elem.nodeType === 1) {\n        const classes = (selector || '').match(rnotwhite) || [];\n        const oldValue = fillSpaces(getClass(elem)).replace(rclass, ' ');\n        let newValue = classes.reduce((memo, cls) => {\n            const className = fillSpaces(cls);\n            if (memo.indexOf(className) > -1) {\n                return memo.replace(className, ' ');\n            }\n            return memo;\n        }, oldValue);\n        newValue = selector ? newValue.trim() : '';\n        if (oldValue !== newValue) {\n            elem.setAttribute('class', newValue);\n        }\n    }\n}\nexport function toggleClass(elem, selector, stateVal) {\n    if (elem == null || selector == null) {\n        return;\n    }\n    if (stateVal != null && typeof selector === 'string') {\n        stateVal ? addClass(elem, selector) : removeClass(elem, selector);\n        return;\n    }\n    if (typeof selector === 'function') {\n        return toggleClass(elem, selector(getClass(elem), stateVal), stateVal);\n    }\n    if (typeof selector === 'string') {\n        const metches = selector.match(rnotwhite) || [];\n        metches.forEach((cls) => {\n            hasClass(elem, cls) ? removeClass(elem, cls) : addClass(elem, cls);\n        });\n    }\n}\n//# sourceMappingURL=class.js.map"]},"metadata":{},"sourceType":"module"}