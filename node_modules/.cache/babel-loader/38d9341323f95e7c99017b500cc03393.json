{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\nimport _isObject from \"lodash/isObject\";\nimport _isFunction from \"lodash/isFunction\";\nvar _excluded = [\"passes\"],\n    _excluded2 = [\"moduleName\", \"vertexShader\", \"fragmentShader\", \"triangulation\", \"segmentNumber\"];\n\nvar _dec, _dec2, _class, _descriptor, _descriptor2;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { SyncBailHook, SyncHook, SyncWaterfallHook } from '@antv/async-hook';\nimport { BlendType, lazyInject, TYPES } from '@antv/l7-core';\nimport { encodePickingColor } from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\nimport { normalizePasses } from '../plugins/MultiPassRendererPlugin';\nimport { BlendTypes } from '../utils/blend';\nimport { handleStyleDataMapping } from '../utils/dataMappingStyle';\nimport { updateShape } from '../utils/updateShape';\nvar layerIdCounter = 0;\nvar BaseLayer = (_dec = lazyInject(TYPES.IGlobalConfigService), _dec2 = lazyInject(TYPES.IShaderModuleService), (_class = function (_EventEmitter) {\n  _inherits(BaseLayer, _EventEmitter);\n\n  var _super = _createSuper(BaseLayer);\n\n  function BaseLayer() {\n    var _this;\n\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, BaseLayer);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"id\", \"\".concat(layerIdCounter++));\n\n    _defineProperty(_assertThisInitialized(_this), \"name\", \"\".concat(layerIdCounter));\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"visible\", true);\n\n    _defineProperty(_assertThisInitialized(_this), \"zIndex\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"minZoom\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"maxZoom\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"inited\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"layerModelNeedUpdate\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"pickedFeatureID\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"selectedFeatureID\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"styleNeedUpdate\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"rendering\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"dataState\", {\n      dataSourceNeedUpdate: false,\n      dataMappingNeedUpdate: false,\n      filterNeedUpdate: false,\n      featureScaleNeedUpdate: false,\n      StyleAttrNeedUpdate: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hooks\", {\n      init: new SyncBailHook(),\n      afterInit: new SyncBailHook(),\n      beforeRender: new SyncBailHook(),\n      beforeRenderData: new SyncWaterfallHook(),\n      afterRender: new SyncHook(),\n      beforePickingEncode: new SyncHook(),\n      afterPickingEncode: new SyncHook(),\n      beforeHighlight: new SyncHook(['pickedColor']),\n      afterHighlight: new SyncHook(),\n      beforeSelect: new SyncHook(['pickedColor']),\n      afterSelect: new SyncHook(),\n      beforeDestroy: new SyncHook(),\n      afterDestroy: new SyncHook()\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"models\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"multiPassRenderer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"plugins\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"sourceOption\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"layerModel\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"sceneContainer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"layerChildren\", []);\n\n    _initializerDefineProperty(_assertThisInitialized(_this), \"configService\", _descriptor, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_assertThisInitialized(_this), \"shaderModuleService\", _descriptor2, _assertThisInitialized(_this));\n\n    _defineProperty(_assertThisInitialized(_this), \"cameraService\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"coordinateService\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"iconService\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"fontService\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"pickingService\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"rendererService\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"layerService\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"interactionService\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"mapService\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"styleAttributeService\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"layerSource\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"postProcessingPassFactory\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"normalPassFactory\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"animateOptions\", {\n      enable: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"container\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"encodedData\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"configSchema\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"currentPickId\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"rawConfig\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"needUpdateConfig\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"pendingStyleAttributes\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"scaleOptions\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"animateStartTime\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"aniamateStatus\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"sourceEvent\", function () {\n      _this.dataState.dataSourceNeedUpdate = true;\n\n      var _this$getLayerConfig = _this.getLayerConfig(),\n          autoFit = _this$getLayerConfig.autoFit,\n          fitBoundsOptions = _this$getLayerConfig.fitBoundsOptions;\n\n      if (autoFit) {\n        _this.fitBounds(fitBoundsOptions);\n      }\n\n      _this.emit('dataUpdate');\n\n      _this.reRender();\n    });\n\n    _this.name = config.name || _this.id;\n    _this.zIndex = config.zIndex || 0;\n    _this.rawConfig = config;\n    return _this;\n  }\n\n  _createClass(BaseLayer, [{\n    key: \"getLayerConfig\",\n    value: function getLayerConfig() {\n      return this.configService.getLayerConfig(this.id);\n    }\n  }, {\n    key: \"updateLayerConfig\",\n    value: function updateLayerConfig(configToUpdate) {\n      if (!this.inited) {\n        this.needUpdateConfig = _objectSpread(_objectSpread({}, this.needUpdateConfig), configToUpdate);\n      } else {\n        var sceneId = this.container.get(TYPES.SceneID);\n        handleStyleDataMapping(configToUpdate, this);\n        this.configService.setLayerConfig(sceneId, this.id, _objectSpread(_objectSpread(_objectSpread({}, this.configService.getLayerConfig(this.id)), this.needUpdateConfig), configToUpdate));\n        this.needUpdateConfig = {};\n      }\n    }\n  }, {\n    key: \"setContainer\",\n    value: function setContainer(container, sceneContainer) {\n      this.container = container;\n      this.sceneContainer = sceneContainer;\n    }\n  }, {\n    key: \"getContainer\",\n    value: function getContainer() {\n      return this.container;\n    }\n  }, {\n    key: \"addPlugin\",\n    value: function addPlugin(plugin) {\n      this.plugins.push(plugin);\n      return this;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      var sceneId = this.container.get(TYPES.SceneID);\n      var _this$rawConfig$enabl = this.rawConfig.enableMultiPassRenderer,\n          enableMultiPassRenderer = _this$rawConfig$enabl === void 0 ? false : _this$rawConfig$enabl;\n      this.configService.setLayerConfig(sceneId, this.id, {\n        enableMultiPassRenderer: enableMultiPassRenderer\n      });\n      this.iconService = this.container.get(TYPES.IIconService);\n      this.fontService = this.container.get(TYPES.IFontService);\n      this.rendererService = this.container.get(TYPES.IRendererService);\n      this.layerService = this.container.get(TYPES.ILayerService);\n      this.interactionService = this.container.get(TYPES.IInteractionService);\n      this.pickingService = this.container.get(TYPES.IPickingService);\n      this.mapService = this.container.get(TYPES.IMapService);\n      this.cameraService = this.container.get(TYPES.ICameraService);\n      this.coordinateService = this.container.get(TYPES.ICoordinateSystemService);\n      this.postProcessingPassFactory = this.container.get(TYPES.IFactoryPostProcessingPass);\n      this.normalPassFactory = this.container.get(TYPES.IFactoryNormalPass);\n      this.styleAttributeService = this.container.get(TYPES.IStyleAttributeService);\n      this.multiPassRenderer = this.container.get(TYPES.IMultiPassRenderer);\n      this.multiPassRenderer.setLayer(this);\n      this.pendingStyleAttributes.forEach(function (_ref) {\n        var attributeName = _ref.attributeName,\n            attributeField = _ref.attributeField,\n            attributeValues = _ref.attributeValues,\n            updateOptions = _ref.updateOptions;\n\n        _this2.styleAttributeService.updateStyleAttribute(attributeName, {\n          scale: _objectSpread({\n            field: attributeField\n          }, _this2.splitValuesAndCallbackInAttribute(attributeValues, _this2.getLayerConfig()[attributeName]))\n        }, updateOptions);\n      });\n      this.pendingStyleAttributes = [];\n      this.plugins = this.container.getAll(TYPES.ILayerPlugin);\n\n      var _iterator = _createForOfIteratorHelper(this.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var plugin = _step.value;\n          plugin.apply(this, {\n            rendererService: this.rendererService,\n            mapService: this.mapService,\n            styleAttributeService: this.styleAttributeService,\n            normalPassFactory: this.normalPassFactory,\n            postProcessingPassFactory: this.postProcessingPassFactory\n          });\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.hooks.init.call();\n      this.hooks.afterInit.call();\n      this.emit('inited', {\n        target: this,\n        type: 'inited'\n      });\n      this.emit('add', {\n        target: this,\n        type: 'add'\n      });\n      return this;\n    }\n  }, {\n    key: \"prepareBuildModel\",\n    value: function prepareBuildModel() {\n      this.inited = true;\n      this.updateLayerConfig(_objectSpread(_objectSpread({}, this.getDefaultConfig()), this.rawConfig));\n\n      var _this$getLayerConfig2 = this.getLayerConfig(),\n          animateOption = _this$getLayerConfig2.animateOption;\n\n      if (animateOption !== null && animateOption !== void 0 && animateOption.enable) {\n        this.layerService.startAnimate();\n        this.aniamateStatus = true;\n      }\n    }\n  }, {\n    key: \"color\",\n    value: function color(field, values, updateOptions) {\n      this.updateStyleAttribute('color', field, values, updateOptions);\n      return this;\n    }\n  }, {\n    key: \"texture\",\n    value: function texture(field, values, updateOptions) {\n      this.updateStyleAttribute('texture', field, values, updateOptions);\n      return this;\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(field, values, updateOptions) {\n      this.updateStyleAttribute('rotate', field, values, updateOptions);\n      return this;\n    }\n  }, {\n    key: \"size\",\n    value: function size(field, values, updateOptions) {\n      this.updateStyleAttribute('size', field, values, updateOptions);\n      return this;\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(field, values, updateOptions) {\n      this.updateStyleAttribute('filter', field, values, updateOptions);\n      return this;\n    }\n  }, {\n    key: \"shape\",\n    value: function shape(field, values, updateOptions) {\n      var _this$styleAttributeS, _this$styleAttributeS2, _this$styleAttributeS3;\n\n      var lastShape = (_this$styleAttributeS = this.styleAttributeService) === null || _this$styleAttributeS === void 0 ? void 0 : (_this$styleAttributeS2 = _this$styleAttributeS.getLayerStyleAttribute('shape')) === null || _this$styleAttributeS2 === void 0 ? void 0 : (_this$styleAttributeS3 = _this$styleAttributeS2.scale) === null || _this$styleAttributeS3 === void 0 ? void 0 : _this$styleAttributeS3.field;\n      var currentShape = field;\n      this.updateStyleAttribute('shape', field, values, updateOptions);\n      updateShape(this, lastShape, currentShape);\n      return this;\n    }\n  }, {\n    key: \"label\",\n    value: function label(field, values, updateOptions) {\n      this.pendingStyleAttributes.push({\n        attributeName: 'label',\n        attributeField: field,\n        attributeValues: values,\n        updateOptions: updateOptions\n      });\n      return this;\n    }\n  }, {\n    key: \"animate\",\n    value: function animate(options) {\n      var rawAnimate = {};\n\n      if (_isObject(options)) {\n        rawAnimate.enable = true;\n        rawAnimate = _objectSpread(_objectSpread({}, rawAnimate), options);\n      } else {\n        rawAnimate.enable = options;\n      }\n\n      this.updateLayerConfig({\n        animateOption: rawAnimate\n      });\n      return this;\n    }\n  }, {\n    key: \"source\",\n    value: function source(data, options) {\n      if (data !== null && data !== void 0 && data.data) {\n        this.setSource(data);\n        return this;\n      }\n\n      this.sourceOption = {\n        data: data,\n        options: options\n      };\n      return this;\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(data, options) {\n      var _this3 = this;\n\n      if (this.inited) {\n        this.layerSource.setData(data, options);\n      } else {\n        this.on('inited', function () {\n          _this3.layerSource.setData(data, options);\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"style\",\n    value: function style(options) {\n      var _this4 = this;\n\n      var passes = options.passes,\n          rest = _objectWithoutProperties(options, _excluded);\n\n      if (passes) {\n        normalizePasses(passes).forEach(function (pass) {\n          var postProcessingPass = _this4.multiPassRenderer.getPostProcessor().getPostProcessingPassByName(pass[0]);\n\n          if (postProcessingPass) {\n            postProcessingPass.updateOptions(pass[1]);\n          }\n        });\n      }\n\n      this.rawConfig = _objectSpread(_objectSpread({}, this.rawConfig), rest);\n\n      if (this.container) {\n        this.updateLayerConfig(this.rawConfig);\n        this.styleNeedUpdate = true;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(field, cfg) {\n      if (_isObject(field)) {\n        this.scaleOptions = _objectSpread(_objectSpread({}, this.scaleOptions), field);\n      } else {\n        this.scaleOptions[field] = cfg;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      this.rendering = true;\n      this.layerService.renderLayers();\n      this.rendering = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.getEncodedData().length !== 0) {\n        this.renderModels();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"active\",\n    value: function active(options) {\n      var activeOption = {};\n      activeOption.enableHighlight = _isObject(options) ? true : options;\n\n      if (_isObject(options)) {\n        activeOption.enableHighlight = true;\n\n        if (options.color) {\n          activeOption.highlightColor = options.color;\n        }\n      } else {\n        activeOption.enableHighlight = !!options;\n      }\n\n      this.updateLayerConfig(activeOption);\n      return this;\n    }\n  }, {\n    key: \"setActive\",\n    value: function setActive(id, options) {\n      var _this5 = this;\n\n      if (_isObject(id)) {\n        var _id$x = id.x,\n            x = _id$x === void 0 ? 0 : _id$x,\n            _id$y = id.y,\n            y = _id$y === void 0 ? 0 : _id$y;\n        this.updateLayerConfig({\n          highlightColor: _isObject(options) ? options.color : this.getLayerConfig().highlightColor\n        });\n        this.pick({\n          x: x,\n          y: y\n        });\n      } else {\n        this.updateLayerConfig({\n          pickedFeatureID: id,\n          highlightColor: _isObject(options) ? options.color : this.getLayerConfig().highlightColor\n        });\n        this.hooks.beforeSelect.call(encodePickingColor(id)).then(function () {\n          setTimeout(function () {\n            _this5.reRender();\n          }, 1);\n        });\n      }\n    }\n  }, {\n    key: \"select\",\n    value: function select(option) {\n      var activeOption = {};\n      activeOption.enableSelect = _isObject(option) ? true : option;\n\n      if (_isObject(option)) {\n        activeOption.enableSelect = true;\n\n        if (option.color) {\n          activeOption.selectColor = option.color;\n        }\n      } else {\n        activeOption.enableSelect = !!option;\n      }\n\n      this.updateLayerConfig(activeOption);\n      return this;\n    }\n  }, {\n    key: \"setSelect\",\n    value: function setSelect(id, options) {\n      var _this6 = this;\n\n      if (_isObject(id)) {\n        var _id$x2 = id.x,\n            x = _id$x2 === void 0 ? 0 : _id$x2,\n            _id$y2 = id.y,\n            y = _id$y2 === void 0 ? 0 : _id$y2;\n        this.updateLayerConfig({\n          selectColor: _isObject(options) ? options.color : this.getLayerConfig().selectColor\n        });\n        this.pick({\n          x: x,\n          y: y\n        });\n      } else {\n        this.updateLayerConfig({\n          pickedFeatureID: id,\n          selectColor: _isObject(options) ? options.color : this.getLayerConfig().selectColor\n        });\n        this.hooks.beforeSelect.call(encodePickingColor(id)).then(function () {\n          setTimeout(function () {\n            _this6.reRender();\n          }, 1);\n        });\n      }\n    }\n  }, {\n    key: \"setBlend\",\n    value: function setBlend(type) {\n      this.updateLayerConfig({\n        blend: type\n      });\n      this.layerModelNeedUpdate = true;\n      this.reRender();\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.updateLayerConfig({\n        visible: true\n      });\n      this.reRender();\n      return this;\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.updateLayerConfig({\n        visible: false\n      });\n      this.reRender();\n      return this;\n    }\n  }, {\n    key: \"setIndex\",\n    value: function setIndex(index) {\n      this.zIndex = index;\n      this.layerService.updateLayerRenderList();\n      this.layerService.renderLayers();\n      return this;\n    }\n  }, {\n    key: \"setCurrentPickId\",\n    value: function setCurrentPickId(id) {\n      this.currentPickId = id;\n    }\n  }, {\n    key: \"getCurrentPickId\",\n    value: function getCurrentPickId() {\n      return this.currentPickId;\n    }\n  }, {\n    key: \"setCurrentSelectedId\",\n    value: function setCurrentSelectedId(id) {\n      this.selectedFeatureID = id;\n    }\n  }, {\n    key: \"getCurrentSelectedId\",\n    value: function getCurrentSelectedId() {\n      return this.selectedFeatureID;\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      var zoom = this.mapService.getZoom();\n\n      var _this$getLayerConfig3 = this.getLayerConfig(),\n          visible = _this$getLayerConfig3.visible,\n          _this$getLayerConfig4 = _this$getLayerConfig3.minZoom,\n          minZoom = _this$getLayerConfig4 === void 0 ? -Infinity : _this$getLayerConfig4,\n          _this$getLayerConfig5 = _this$getLayerConfig3.maxZoom,\n          maxZoom = _this$getLayerConfig5 === void 0 ? Infinity : _this$getLayerConfig5;\n\n      return !!visible && zoom >= minZoom && zoom <= maxZoom;\n    }\n  }, {\n    key: \"setMinZoom\",\n    value: function setMinZoom(minZoom) {\n      this.updateLayerConfig({\n        minZoom: minZoom\n      });\n      return this;\n    }\n  }, {\n    key: \"getMinZoom\",\n    value: function getMinZoom() {\n      var _this$getLayerConfig6 = this.getLayerConfig(),\n          minZoom = _this$getLayerConfig6.minZoom;\n\n      return minZoom;\n    }\n  }, {\n    key: \"getMaxZoom\",\n    value: function getMaxZoom() {\n      var _this$getLayerConfig7 = this.getLayerConfig(),\n          maxZoom = _this$getLayerConfig7.maxZoom;\n\n      return maxZoom;\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      var cfg = this.getLayerConfig();\n      return cfg[name];\n    }\n  }, {\n    key: \"setMaxZoom\",\n    value: function setMaxZoom(maxZoom) {\n      this.updateLayerConfig({\n        maxZoom: maxZoom\n      });\n      return this;\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(fitBoundsOptions) {\n      if (!this.inited) {\n        this.updateLayerConfig({\n          autoFit: true\n        });\n        return this;\n      }\n\n      var source = this.getSource();\n      var extent = source.extent;\n      var isValid = extent.some(function (v) {\n        return Math.abs(v) === Infinity;\n      });\n\n      if (isValid) {\n        return this;\n      }\n\n      this.mapService.fitBounds([[extent[0], extent[1]], [extent[2], extent[3]]], fitBoundsOptions);\n      return this;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.hooks.beforeDestroy.call();\n      this.layerSource.off('update', this.sourceEvent);\n      this.multiPassRenderer.destroy();\n      this.styleAttributeService.clearAllAttributes();\n      this.hooks.afterDestroy.call();\n      this.emit('remove', {\n        target: this,\n        type: 'remove'\n      });\n      this.removeAllListeners();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.styleAttributeService.clearAllAttributes();\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      this.models.forEach(function (model) {\n        return model.destroy();\n      });\n      this.layerModel.clearModels();\n    }\n  }, {\n    key: \"isDirty\",\n    value: function isDirty() {\n      return !!(this.styleAttributeService.getLayerStyleAttributes() || []).filter(function (attribute) {\n        return attribute.needRescale || attribute.needRemapping || attribute.needRegenerateVertices;\n      }).length;\n    }\n  }, {\n    key: \"setSource\",\n    value: function setSource(source) {\n      if (this.layerSource) {\n        this.layerSource.off('update', this.sourceEvent);\n      }\n\n      this.layerSource = source;\n\n      if (this.inited && this.layerSource.cluster) {\n        var zoom = this.mapService.getZoom();\n        this.layerSource.updateClusterData(zoom);\n      }\n\n      this.layerSource.on('update', this.sourceEvent);\n    }\n  }, {\n    key: \"getSource\",\n    value: function getSource() {\n      return this.layerSource;\n    }\n  }, {\n    key: \"getScaleOptions\",\n    value: function getScaleOptions() {\n      return this.scaleOptions;\n    }\n  }, {\n    key: \"setEncodedData\",\n    value: function setEncodedData(encodedData) {\n      this.encodedData = encodedData;\n    }\n  }, {\n    key: \"getEncodedData\",\n    value: function getEncodedData() {\n      return this.encodedData;\n    }\n  }, {\n    key: \"getLegendItems\",\n    value: function getLegendItems(name) {\n      var scale = this.styleAttributeService.getLayerAttributeScale(name);\n\n      if (scale) {\n        if (scale.ticks) {\n          var items = scale.ticks().map(function (item) {\n            return _defineProperty({\n              value: item\n            }, name, scale(item));\n          });\n          return items;\n        } else if (scale.invertExtent) {\n          var _items = scale.range().map(function (item) {\n            return _defineProperty({\n              value: scale.invertExtent(item)\n            }, name, item);\n          });\n\n          return _items;\n        }\n      } else {\n        return [];\n      }\n    }\n  }, {\n    key: \"pick\",\n    value: function pick(_ref4) {\n      var x = _ref4.x,\n          y = _ref4.y;\n      this.interactionService.triggerHover({\n        x: x,\n        y: y\n      });\n    }\n  }, {\n    key: \"boxSelect\",\n    value: function boxSelect(box, cb) {\n      this.pickingService.boxPickLayer(this, box, cb);\n    }\n  }, {\n    key: \"buildLayerModel\",\n    value: function buildLayerModel(options) {\n      var moduleName = options.moduleName,\n          vertexShader = options.vertexShader,\n          fragmentShader = options.fragmentShader,\n          triangulation = options.triangulation,\n          segmentNumber = options.segmentNumber,\n          rest = _objectWithoutProperties(options, _excluded2);\n\n      this.shaderModuleService.registerModule(moduleName, {\n        vs: vertexShader,\n        fs: fragmentShader\n      });\n\n      var _this$shaderModuleSer = this.shaderModuleService.getModule(moduleName),\n          vs = _this$shaderModuleSer.vs,\n          fs = _this$shaderModuleSer.fs,\n          uniforms = _this$shaderModuleSer.uniforms;\n\n      var createModel = this.rendererService.createModel;\n\n      var _this$styleAttributeS4 = this.styleAttributeService.createAttributesAndIndices(this.encodedData, triangulation, segmentNumber),\n          attributes = _this$styleAttributeS4.attributes,\n          elements = _this$styleAttributeS4.elements;\n\n      return createModel(_objectSpread({\n        attributes: attributes,\n        uniforms: uniforms,\n        fs: fs,\n        vs: vs,\n        elements: elements,\n        blend: BlendTypes[BlendType.normal]\n      }, rest));\n    }\n  }, {\n    key: \"getTime\",\n    value: function getTime() {\n      return this.layerService.clock.getDelta();\n    }\n  }, {\n    key: \"setAnimateStartTime\",\n    value: function setAnimateStartTime() {\n      this.animateStartTime = this.layerService.clock.getElapsedTime();\n    }\n  }, {\n    key: \"stopAnimate\",\n    value: function stopAnimate() {\n      if (this.aniamateStatus) {\n        this.layerService.stopAnimate();\n        this.aniamateStatus = false;\n        this.updateLayerConfig({\n          animateOption: {\n            enable: false\n          }\n        });\n      }\n    }\n  }, {\n    key: \"getLayerAnimateTime\",\n    value: function getLayerAnimateTime() {\n      return this.layerService.clock.getElapsedTime() - this.animateStartTime;\n    }\n  }, {\n    key: \"needPick\",\n    value: function needPick(type) {\n      var _this$getLayerConfig8 = this.getLayerConfig(),\n          _this$getLayerConfig9 = _this$getLayerConfig8.enableHighlight,\n          enableHighlight = _this$getLayerConfig9 === void 0 ? true : _this$getLayerConfig9,\n          _this$getLayerConfig10 = _this$getLayerConfig8.enableSelect,\n          enableSelect = _this$getLayerConfig10 === void 0 ? true : _this$getLayerConfig10;\n\n      var isPick = this.eventNames().indexOf(type) !== -1 || this.eventNames().indexOf('un' + type) !== -1;\n\n      if ((type === 'click' || type === 'dblclick') && enableSelect) {\n        isPick = true;\n      }\n\n      if (type === 'mousemove' && (enableHighlight || this.eventNames().indexOf('mouseenter') !== -1 || this.eventNames().indexOf('unmousemove') !== -1 || this.eventNames().indexOf('mouseout') !== -1)) {\n        isPick = true;\n      }\n\n      return this.isVisible() && isPick;\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"rebuildModels\",\n    value: function rebuildModels() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"renderModels\",\n    value: function renderModels() {\n      var _this7 = this;\n\n      if (this.getEncodedData().length > 0) {\n        if (this.layerModelNeedUpdate && this.layerModel) {\n          this.models = this.layerModel.buildModels();\n          this.hooks.beforeRender.call();\n          this.layerModelNeedUpdate = false;\n        }\n\n        this.models.forEach(function (model) {\n          model.draw({\n            uniforms: _this7.layerModel.getUninforms()\n          });\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"updateStyleAttribute\",\n    value: function updateStyleAttribute(type, field, values, updateOptions) {\n      if (!this.inited) {\n        this.pendingStyleAttributes.push({\n          attributeName: type,\n          attributeField: field,\n          attributeValues: values,\n          updateOptions: updateOptions\n        });\n      } else {\n        this.styleAttributeService.updateStyleAttribute(type, {\n          scale: _objectSpread({\n            field: field\n          }, this.splitValuesAndCallbackInAttribute(values, this.getLayerConfig()[field]))\n        }, updateOptions);\n      }\n    }\n  }, {\n    key: \"setEarthTime\",\n    value: function setEarthTime(time) {\n      console.warn('empty fn');\n    }\n  }, {\n    key: \"getConfigSchema\",\n    value: function getConfigSchema() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"getModelType\",\n    value: function getModelType() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"getDefaultConfig\",\n    value: function getDefaultConfig() {\n      return {};\n    }\n  }, {\n    key: \"reRender\",\n    value: function reRender() {\n      if (this.inited) {\n        this.layerService.updateLayerRenderList();\n        this.layerService.renderLayers();\n      }\n    }\n  }, {\n    key: \"splitValuesAndCallbackInAttribute\",\n    value: function splitValuesAndCallbackInAttribute(valuesOrCallback, defaultValues) {\n      return {\n        values: _isFunction(valuesOrCallback) ? undefined : valuesOrCallback || defaultValues,\n        callback: _isFunction(valuesOrCallback) ? valuesOrCallback : undefined\n      };\n    }\n  }]);\n\n  return BaseLayer;\n}(EventEmitter), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"configService\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"shaderModuleService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class));\nexport { BaseLayer as default };","map":{"version":3,"sources":["../../src/core/BaseLayer.ts"],"names":["layerIdCounter","BaseLayer","EventEmitter","dataSourceNeedUpdate","dataMappingNeedUpdate","filterNeedUpdate","featureScaleNeedUpdate","StyleAttrNeedUpdate","init","afterInit","beforeRender","beforeRenderData","afterRender","beforePickingEncode","afterPickingEncode","beforeHighlight","afterHighlight","beforeSelect","afterSelect","beforeDestroy","afterDestroy","lazyInject","TYPES","enable","config","sceneId","handleStyleDataMapping","enableMultiPassRenderer","attributeName","attributeField","attributeValues","updateOptions","scale","field","plugin","rendererService","mapService","styleAttributeService","normalPassFactory","postProcessingPassFactory","target","type","animateOption","lastShape","currentShape","updateShape","rawAnimate","data","options","passes","rest","normalizePasses","postProcessingPass","pass","activeOption","x","y","id","highlightColor","pickedFeatureID","encodePickingColor","setTimeout","option","selectColor","blend","visible","zoom","minZoom","maxZoom","cfg","autoFit","source","extent","isValid","Math","model","attribute","items","value","item","moduleName","vertexShader","fragmentShader","triangulation","segmentNumber","vs","fs","uniforms","createModel","attributes","elements","BlendTypes","BlendType","enableHighlight","enableSelect","isPick","console","fitBoundsOptions","values","valuesOrCallback","callback","undefined"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport { SyncBailHook, SyncHook, SyncWaterfallHook } from '@antv/async-hook';\nimport {\n  BlendType,\n  gl,\n  IActiveOption,\n  IAnimateOption,\n  ICameraService,\n  ICoordinateSystemService,\n  IDataState,\n  IEncodeFeature,\n  IFontService,\n  IGlobalConfigService,\n  IIconService,\n  IInteractionService,\n  ILayer,\n  ILayerConfig,\n  ILayerModel,\n  ILayerModelInitializationOptions,\n  ILayerPlugin,\n  ILayerService,\n  IMapService,\n  IModel,\n  IModelInitializationOptions,\n  IMultiPassRenderer,\n  IPass,\n  IPickingService,\n  IPostProcessingPass,\n  IRendererService,\n  IScale,\n  IScaleOptions,\n  IShaderModuleService,\n  ISource,\n  ISourceCFG,\n  IStyleAttributeInitializationOptions,\n  IStyleAttributeService,\n  IStyleAttributeUpdateOptions,\n  lazyInject,\n  ScaleAttributeType,\n  ScaleTypeName,\n  ScaleTypes,\n  StyleAttributeField,\n  StyleAttributeOption,\n  TYPES,\n} from '@antv/l7-core';\nimport Source from '@antv/l7-source';\nimport { encodePickingColor } from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\nimport { Container } from 'inversify';\nimport { isFunction, isObject } from 'lodash';\nimport { normalizePasses } from '../plugins/MultiPassRendererPlugin';\nimport { BlendTypes } from '../utils/blend';\nimport { handleStyleDataMapping } from '../utils/dataMappingStyle';\nimport { updateShape } from '../utils/updateShape';\nimport baseLayerSchema from './schema';\n/**\n * 分配 layer id\n */\nlet layerIdCounter = 0;\n\nexport default class BaseLayer<ChildLayerStyleOptions = {}> extends EventEmitter\n  implements ILayer {\n  public id: string = `${layerIdCounter++}`;\n  public name: string = `${layerIdCounter}`;\n  public type: string;\n  public visible: boolean = true;\n  public zIndex: number = 0;\n  public minZoom: number;\n  public maxZoom: number;\n  public inited: boolean = false;\n  public layerModelNeedUpdate: boolean = false;\n  public pickedFeatureID: number | null = null;\n  public selectedFeatureID: number | null = null;\n  public styleNeedUpdate: boolean = false;\n  public rendering: boolean;\n\n  public dataState: IDataState = {\n    dataSourceNeedUpdate: false,\n    dataMappingNeedUpdate: false,\n    filterNeedUpdate: false,\n    featureScaleNeedUpdate: false,\n    StyleAttrNeedUpdate: false,\n  };\n  // 生命周期钩子\n  public hooks = {\n    init: new SyncBailHook(),\n    afterInit: new SyncBailHook(),\n    beforeRender: new SyncBailHook(),\n    beforeRenderData: new SyncWaterfallHook(),\n    afterRender: new SyncHook(),\n    beforePickingEncode: new SyncHook(),\n    afterPickingEncode: new SyncHook(),\n    beforeHighlight: new SyncHook(['pickedColor']),\n    afterHighlight: new SyncHook(),\n    beforeSelect: new SyncHook(['pickedColor']),\n    afterSelect: new SyncHook(),\n    beforeDestroy: new SyncHook(),\n    afterDestroy: new SyncHook(),\n  };\n\n  // 待渲染 model 列表\n  public models: IModel[] = [];\n\n  // 每个 Layer 都有一个\n  public multiPassRenderer: IMultiPassRenderer;\n\n  // 注入插件集\n  public plugins: ILayerPlugin[];\n\n  public sourceOption: {\n    data: any;\n    options?: ISourceCFG;\n  };\n\n  public layerModel: ILayerModel;\n\n  // TODO: 记录 sceneContainer 供创建子图层的时候使用 如 imageTileLayer\n  public sceneContainer: Container | undefined;\n  // TODO: 用于保存子图层对象\n  public layerChildren: ILayer[] = [];\n\n  @lazyInject(TYPES.IGlobalConfigService)\n  protected readonly configService: IGlobalConfigService;\n\n  @lazyInject(TYPES.IShaderModuleService)\n  protected readonly shaderModuleService: IShaderModuleService;\n\n  protected cameraService: ICameraService;\n\n  protected coordinateService: ICoordinateSystemService;\n\n  protected iconService: IIconService;\n\n  protected fontService: IFontService;\n\n  protected pickingService: IPickingService;\n\n  protected rendererService: IRendererService;\n\n  protected layerService: ILayerService;\n\n  protected interactionService: IInteractionService;\n\n  protected mapService: IMapService;\n\n  protected styleAttributeService: IStyleAttributeService;\n\n  protected layerSource: Source;\n\n  protected postProcessingPassFactory: (\n    name: string,\n  ) => IPostProcessingPass<unknown>;\n  protected normalPassFactory: (name: string) => IPass<unknown>;\n\n  protected animateOptions: IAnimateOption = { enable: false };\n\n  /**\n   * 图层容器\n   */\n  private container: Container;\n\n  private encodedData: IEncodeFeature[];\n\n  private configSchema: object;\n\n  private currentPickId: number | null = null;\n\n  private rawConfig: Partial<ILayerConfig & ChildLayerStyleOptions>;\n\n  private needUpdateConfig: Partial<ILayerConfig & ChildLayerStyleOptions>;\n\n  /**\n   * 待更新样式属性，在初始化阶段完成注册\n   */\n  private pendingStyleAttributes: Array<{\n    attributeName: string;\n    attributeField: StyleAttributeField;\n    attributeValues?: StyleAttributeOption;\n    defaultName?: string;\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>;\n  }> = [];\n\n  private scaleOptions: IScaleOptions = {};\n\n  private animateStartTime: number;\n\n  private aniamateStatus: boolean = false;\n\n  // private pickingPassRender: IPass<'pixelPicking'>;\n\n  constructor(config: Partial<ILayerConfig & ChildLayerStyleOptions> = {}) {\n    super();\n    this.name = config.name || this.id;\n    this.zIndex = config.zIndex || 0;\n    this.rawConfig = config;\n  }\n\n  public getLayerConfig() {\n    return this.configService.getLayerConfig<ChildLayerStyleOptions>(this.id);\n  }\n\n  public updateLayerConfig(\n    configToUpdate: Partial<ILayerConfig | ChildLayerStyleOptions>,\n  ) {\n    if (!this.inited) {\n      this.needUpdateConfig = {\n        ...this.needUpdateConfig,\n        ...configToUpdate,\n      };\n    } else {\n      const sceneId = this.container.get<string>(TYPES.SceneID);\n\n      // @ts-ignore\n      handleStyleDataMapping(configToUpdate, this); // 处理 style 中进行数据映射的属性字段\n\n      this.configService.setLayerConfig(sceneId, this.id, {\n        ...this.configService.getLayerConfig(this.id),\n        ...this.needUpdateConfig,\n        ...configToUpdate,\n      });\n      this.needUpdateConfig = {};\n    }\n  }\n\n  /**\n   * 注入图层容器，父容器为场景容器\n   * RootContainer 1\n   *  -> SceneContainer 1.*\n   *   -> LayerContainer 1.*\n   */\n  public setContainer(container: Container, sceneContainer: Container) {\n    this.container = container;\n    this.sceneContainer = sceneContainer;\n  }\n\n  public getContainer() {\n    return this.container;\n  }\n\n  public addPlugin(plugin: ILayerPlugin): ILayer {\n    // TODO: 控制插件注册顺序\n    // @example:\n    // pointLayer.addPlugin(new MyCustomPlugin(), {\n    //   before: 'L7BuiltinPlugin'\n    // });\n    this.plugins.push(plugin);\n    return this;\n  }\n\n  public init() {\n    // 设置配置项\n    const sceneId = this.container.get<string>(TYPES.SceneID);\n    // 初始化图层配置项\n    const { enableMultiPassRenderer = false } = this.rawConfig;\n    this.configService.setLayerConfig(sceneId, this.id, {\n      enableMultiPassRenderer,\n    });\n\n    // 全局容器服务\n\n    // 场景容器服务\n    this.iconService = this.container.get<IIconService>(TYPES.IIconService);\n    this.fontService = this.container.get<IFontService>(TYPES.IFontService);\n\n    this.rendererService = this.container.get<IRendererService>(\n      TYPES.IRendererService,\n    );\n    this.layerService = this.container.get<ILayerService>(TYPES.ILayerService);\n    this.interactionService = this.container.get<IInteractionService>(\n      TYPES.IInteractionService,\n    );\n\n    this.pickingService = this.container.get<IPickingService>(\n      TYPES.IPickingService,\n    );\n    this.mapService = this.container.get<IMapService>(TYPES.IMapService);\n    this.cameraService = this.container.get<ICameraService>(\n      TYPES.ICameraService,\n    );\n    this.coordinateService = this.container.get<ICoordinateSystemService>(\n      TYPES.ICoordinateSystemService,\n    );\n    this.postProcessingPassFactory = this.container.get(\n      TYPES.IFactoryPostProcessingPass,\n    );\n    this.normalPassFactory = this.container.get(TYPES.IFactoryNormalPass);\n\n    // 图层容器服务\n    this.styleAttributeService = this.container.get<IStyleAttributeService>(\n      TYPES.IStyleAttributeService,\n    );\n    this.multiPassRenderer = this.container.get<IMultiPassRenderer>(\n      TYPES.IMultiPassRenderer,\n    );\n    this.multiPassRenderer.setLayer(this);\n\n    // 完成样式服务注册完成前添加的属性\n    this.pendingStyleAttributes.forEach(\n      ({ attributeName, attributeField, attributeValues, updateOptions }) => {\n        this.styleAttributeService.updateStyleAttribute(\n          attributeName,\n          {\n            // @ts-ignore\n            scale: {\n              field: attributeField,\n              ...this.splitValuesAndCallbackInAttribute(\n                // @ts-ignore\n                attributeValues,\n                // @ts-ignore\n                this.getLayerConfig()[attributeName],\n              ),\n            },\n          },\n          // @ts-ignore\n          updateOptions,\n        );\n      },\n    );\n    this.pendingStyleAttributes = [];\n\n    // 获取插件集\n    this.plugins = this.container.getAll<ILayerPlugin>(TYPES.ILayerPlugin);\n    // 完成插件注册，传入场景和图层容器内的服务\n    for (const plugin of this.plugins) {\n      plugin.apply(this, {\n        rendererService: this.rendererService,\n        mapService: this.mapService,\n        styleAttributeService: this.styleAttributeService,\n        normalPassFactory: this.normalPassFactory,\n        postProcessingPassFactory: this.postProcessingPassFactory,\n      });\n    }\n\n    // 触发 init 生命周期插件\n    this.hooks.init.call();\n    // this.pickingPassRender = this.normalPassFactory('pixelPicking');\n    // this.pickingPassRender.init(this);\n    this.hooks.afterInit.call();\n\n    // 触发初始化完成事件;\n    this.emit('inited', {\n      target: this,\n      type: 'inited',\n    });\n    this.emit('add', {\n      target: this,\n      type: 'add',\n    });\n    return this;\n  }\n  /**\n   * Model初始化前需要更新Model样式\n   */\n  public prepareBuildModel() {\n    this.inited = true;\n    this.updateLayerConfig({\n      ...(this.getDefaultConfig() as object),\n      ...this.rawConfig,\n    });\n\n    // 启动动画\n    const { animateOption } = this.getLayerConfig();\n    if (animateOption?.enable) {\n      this.layerService.startAnimate();\n      this.aniamateStatus = true;\n    }\n  }\n  public color(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    // 设置 color、size、shape、style 时由于场景服务尚未完成（并没有调用 scene.addLayer），因此暂时加入待更新属性列表\n    this.updateStyleAttribute('color', field, values, updateOptions);\n\n    // this.pendingStyleAttributes.push({\n    //   attributeName: 'color',\n    //   attributeField: field,\n    //   attributeValues: values,\n    //   defaultName: 'colors',\n    //   updateOptions,\n    // });\n    return this;\n  }\n\n  // 为对应的图层传入纹理的编号名称（point/image 在 shape 方法中传入纹理名称的方法并不通用）\n  public texture(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    this.updateStyleAttribute('texture', field, values, updateOptions);\n    return this;\n  }\n\n  public rotate(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    this.updateStyleAttribute('rotate', field, values, updateOptions);\n    return this;\n  }\n  public size(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    this.updateStyleAttribute('size', field, values, updateOptions);\n    return this;\n  }\n  // 对mapping后的数据过滤，scale保持不变\n  public filter(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    this.updateStyleAttribute('filter', field, values, updateOptions);\n    return this;\n  }\n\n  public shape(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    const lastShape = this.styleAttributeService?.getLayerStyleAttribute(\n      'shape',\n    )?.scale?.field;\n    const currentShape = field;\n    this.updateStyleAttribute('shape', field, values, updateOptions);\n    // TODO: 根据 shape 判断是否需要更新 model\n    updateShape(this, lastShape, currentShape);\n    return this;\n  }\n  public label(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    this.pendingStyleAttributes.push({\n      attributeName: 'label',\n      attributeField: field,\n      attributeValues: values,\n      updateOptions,\n    });\n    return this;\n  }\n  public animate(options: IAnimateOption | boolean) {\n    let rawAnimate: Partial<IAnimateOption> = {};\n    if (isObject(options)) {\n      rawAnimate.enable = true;\n      rawAnimate = {\n        ...rawAnimate,\n        ...options,\n      };\n    } else {\n      rawAnimate.enable = options;\n    }\n    this.updateLayerConfig({\n      animateOption: rawAnimate,\n    });\n    // this.animateOptions = options;\n    return this;\n  }\n\n  public source(data: any, options?: ISourceCFG): ILayer {\n    if (data?.data) {\n      // 判断是否为source\n      this.setSource(data);\n      return this;\n    }\n    this.sourceOption = {\n      data,\n      options,\n    };\n    return this;\n  }\n  public setData(data: any, options?: ISourceCFG) {\n    if (this.inited) {\n      this.layerSource.setData(data, options);\n    } else {\n      this.on('inited', () => {\n        this.layerSource.setData(data, options);\n      });\n    }\n\n    return this;\n  }\n  public style(\n    options: Partial<ChildLayerStyleOptions> & Partial<ILayerConfig>,\n  ): ILayer {\n    const { passes, ...rest } = options;\n\n    // passes 特殊处理\n    if (passes) {\n      normalizePasses(passes).forEach(\n        (pass: [string, { [key: string]: unknown }]) => {\n          const postProcessingPass = this.multiPassRenderer\n            .getPostProcessor()\n            .getPostProcessingPassByName(pass[0]);\n          if (postProcessingPass) {\n            postProcessingPass.updateOptions(pass[1]);\n          }\n        },\n      );\n    }\n\n    this.rawConfig = {\n      ...this.rawConfig,\n      ...rest,\n    };\n    if (this.container) {\n      this.updateLayerConfig(this.rawConfig);\n      this.styleNeedUpdate = true;\n    }\n    return this;\n  }\n  public scale(field: string | number | IScaleOptions, cfg?: IScale) {\n    if (isObject(field)) {\n      this.scaleOptions = {\n        ...this.scaleOptions,\n        ...field,\n      };\n    } else {\n      this.scaleOptions[field] = cfg;\n    }\n    return this;\n  }\n\n  /**\n   * 渲染所有的图层\n   */\n  public renderLayers(): void {\n    this.rendering = true;\n\n    this.layerService.renderLayers();\n\n    this.rendering = false;\n  }\n\n  public render(): ILayer {\n    // if (\n    //   this.needPick() &&\n    //   this.multiPassRenderer &&\n    //   this.multiPassRenderer.getRenderFlag()\n    // ) {\n    //   this.multiPassRenderer.render();\n    // } else if (this.needPick() && this.multiPassRenderer) {\n    //   this.renderModels();\n    // } else {\n    //   this.renderModels();\n    // }\n    // TODO: this.getEncodedData().length !== 0 这个判断是为了解决在 2.5.x 引入数据纹理后产生的 空数据渲染导致 texture 超出上限问题\n    if (this.getEncodedData().length !== 0) {\n      this.renderModels();\n    }\n    // this.renderModels();\n\n    // this.multiPassRenderer.render();\n    // this.renderModels();\n    return this;\n  }\n\n  public active(options: IActiveOption | boolean) {\n    const activeOption: Partial<ILayerConfig> = {};\n    activeOption.enableHighlight = isObject(options) ? true : options;\n    if (isObject(options)) {\n      activeOption.enableHighlight = true;\n      if (options.color) {\n        activeOption.highlightColor = options.color;\n      }\n    } else {\n      activeOption.enableHighlight = !!options;\n    }\n    this.updateLayerConfig(activeOption);\n    return this;\n  }\n  public setActive(\n    id: number | { x: number; y: number },\n    options?: IActiveOption,\n  ): void {\n    if (isObject(id)) {\n      const { x = 0, y = 0 } = id;\n      this.updateLayerConfig({\n        highlightColor: isObject(options)\n          ? options.color\n          : this.getLayerConfig().highlightColor,\n      });\n      this.pick({ x, y });\n    } else {\n      this.updateLayerConfig({\n        pickedFeatureID: id,\n        highlightColor: isObject(options)\n          ? options.color\n          : this.getLayerConfig().highlightColor,\n      });\n      this.hooks.beforeSelect\n        .call(encodePickingColor(id as number) as number[])\n        // @ts-ignore\n        .then(() => {\n          setTimeout(() => {\n            this.reRender();\n          }, 1);\n        });\n    }\n  }\n\n  public select(option: IActiveOption | boolean): ILayer {\n    const activeOption: Partial<ILayerConfig> = {};\n    activeOption.enableSelect = isObject(option) ? true : option;\n    if (isObject(option)) {\n      activeOption.enableSelect = true;\n      if (option.color) {\n        activeOption.selectColor = option.color;\n      }\n    } else {\n      activeOption.enableSelect = !!option;\n    }\n    this.updateLayerConfig(activeOption);\n    return this;\n  }\n\n  public setSelect(\n    id: number | { x: number; y: number },\n    options?: IActiveOption,\n  ): void {\n    if (isObject(id)) {\n      const { x = 0, y = 0 } = id;\n      this.updateLayerConfig({\n        selectColor: isObject(options)\n          ? options.color\n          : this.getLayerConfig().selectColor,\n      });\n      this.pick({ x, y });\n    } else {\n      this.updateLayerConfig({\n        pickedFeatureID: id,\n        selectColor: isObject(options)\n          ? options.color\n          : this.getLayerConfig().selectColor,\n      });\n      this.hooks.beforeSelect\n        .call(encodePickingColor(id as number) as number[])\n        // @ts-ignore\n        .then(() => {\n          setTimeout(() => {\n            this.reRender();\n          }, 1);\n        });\n    }\n  }\n  public setBlend(type: keyof typeof BlendType): void {\n    this.updateLayerConfig({\n      blend: type,\n    });\n    this.layerModelNeedUpdate = true;\n    this.reRender();\n  }\n  public show(): ILayer {\n    this.updateLayerConfig({\n      visible: true,\n    });\n    this.reRender();\n    return this;\n  }\n\n  public hide(): ILayer {\n    this.updateLayerConfig({\n      visible: false,\n    });\n    this.reRender();\n    return this;\n  }\n  public setIndex(index: number): ILayer {\n    this.zIndex = index;\n    this.layerService.updateLayerRenderList();\n    this.layerService.renderLayers();\n    return this;\n  }\n\n  public setCurrentPickId(id: number) {\n    this.currentPickId = id;\n  }\n\n  public getCurrentPickId(): number | null {\n    return this.currentPickId;\n  }\n\n  public setCurrentSelectedId(id: number) {\n    this.selectedFeatureID = id;\n  }\n\n  public getCurrentSelectedId(): number | null {\n    return this.selectedFeatureID;\n  }\n  public isVisible(): boolean {\n    const zoom = this.mapService.getZoom();\n    const {\n      visible,\n      minZoom = -Infinity,\n      maxZoom = Infinity,\n    } = this.getLayerConfig();\n    return !!visible && zoom >= minZoom && zoom <= maxZoom;\n  }\n\n  public setMinZoom(minZoom: number): ILayer {\n    this.updateLayerConfig({\n      minZoom,\n    });\n    return this;\n  }\n\n  public getMinZoom(): number {\n    const { minZoom } = this.getLayerConfig();\n    return minZoom as number;\n  }\n\n  public getMaxZoom(): number {\n    const { maxZoom } = this.getLayerConfig();\n    return maxZoom as number;\n  }\n\n  public get(name: string) {\n    const cfg = this.getLayerConfig();\n    // @ts-ignore\n    return cfg[name];\n  }\n\n  public setMaxZoom(maxZoom: number): ILayer {\n    this.updateLayerConfig({\n      maxZoom,\n    });\n    return this;\n  }\n  /**\n   * zoom to layer Bounds\n   */\n  public fitBounds(fitBoundsOptions?: unknown): ILayer {\n    if (!this.inited) {\n      this.updateLayerConfig({\n        autoFit: true,\n      });\n      return this;\n    }\n    const source = this.getSource();\n    const extent = source.extent;\n    const isValid = extent.some((v) => Math.abs(v) === Infinity);\n    if (isValid) {\n      return this;\n    }\n    this.mapService.fitBounds(\n      [\n        [extent[0], extent[1]],\n        [extent[2], extent[3]],\n      ],\n      fitBoundsOptions,\n    );\n    return this;\n  }\n\n  public destroy() {\n    this.hooks.beforeDestroy.call();\n    // 清除sources事件\n    this.layerSource.off('update', this.sourceEvent);\n\n    this.multiPassRenderer.destroy();\n\n    // 清除所有属性以及关联的 vao\n    this.styleAttributeService.clearAllAttributes();\n    // 销毁所有 model\n    // this.models.forEach((model) => model.destroy());\n\n    this.hooks.afterDestroy.call();\n\n    this.emit('remove', {\n      target: this,\n      type: 'remove',\n    });\n\n    this.removeAllListeners();\n\n    // 解绑图层容器中的服务\n    // this.container.unbind(TYPES.IStyleAttributeService);\n  }\n  public clear() {\n    this.styleAttributeService.clearAllAttributes();\n    // 销毁所有 model\n  }\n  public clearModels() {\n    this.models.forEach((model) => model.destroy());\n    this.layerModel.clearModels();\n  }\n\n  public isDirty() {\n    return !!(\n      this.styleAttributeService.getLayerStyleAttributes() || []\n    ).filter(\n      (attribute) =>\n        attribute.needRescale ||\n        attribute.needRemapping ||\n        attribute.needRegenerateVertices,\n    ).length;\n  }\n\n  public setSource(source: Source) {\n    // 清除旧 sources 事件\n    if (this.layerSource) {\n      this.layerSource.off('update', this.sourceEvent);\n    }\n\n    this.layerSource = source;\n\n    // 已 inited 且启用聚合进行更新聚合数据\n    if (this.inited && this.layerSource.cluster) {\n      const zoom = this.mapService.getZoom();\n      this.layerSource.updateClusterData(zoom);\n    }\n    // source 可能会复用，会在其它layer被修改\n    this.layerSource.on('update', this.sourceEvent);\n  }\n  public getSource() {\n    return this.layerSource;\n  }\n\n  public getScaleOptions() {\n    return this.scaleOptions;\n  }\n\n  public setEncodedData(encodedData: IEncodeFeature[]) {\n    this.encodedData = encodedData;\n  }\n  public getEncodedData() {\n    return this.encodedData;\n  }\n  public getLegendItems(name: string): any {\n    const scale = this.styleAttributeService.getLayerAttributeScale(name);\n    if (scale) {\n      if (scale.ticks) {\n        const items = scale.ticks().map((item: any) => {\n          return {\n            value: item,\n            [name]: scale(item),\n          };\n        });\n        return items;\n      } else if (scale.invertExtent) {\n        const items = scale.range().map((item: any) => {\n          return {\n            value: scale.invertExtent(item),\n            [name]: item,\n          };\n        });\n        return items;\n      }\n    } else {\n      return [];\n    }\n  }\n\n  public pick({ x, y }: { x: number; y: number }) {\n    this.interactionService.triggerHover({ x, y });\n  }\n\n  public boxSelect(\n    box: [number, number, number, number],\n    cb: (...args: any[]) => void,\n  ) {\n    this.pickingService.boxPickLayer(this, box, cb);\n  }\n\n  public buildLayerModel(\n    options: ILayerModelInitializationOptions &\n      Partial<IModelInitializationOptions>,\n  ): IModel {\n    const {\n      moduleName,\n      vertexShader,\n      fragmentShader,\n      triangulation,\n      segmentNumber,\n      ...rest\n    } = options;\n    this.shaderModuleService.registerModule(moduleName, {\n      vs: vertexShader,\n      fs: fragmentShader,\n    });\n    const { vs, fs, uniforms } = this.shaderModuleService.getModule(moduleName);\n    const { createModel } = this.rendererService;\n    const {\n      attributes,\n      elements,\n    } = this.styleAttributeService.createAttributesAndIndices(\n      this.encodedData,\n      triangulation,\n      segmentNumber,\n    );\n    return createModel({\n      attributes,\n      uniforms,\n      fs,\n      vs,\n      elements,\n      blend: BlendTypes[BlendType.normal],\n      ...rest,\n    });\n  }\n\n  public getTime() {\n    return this.layerService.clock.getDelta();\n  }\n  public setAnimateStartTime() {\n    this.animateStartTime = this.layerService.clock.getElapsedTime();\n  }\n  public stopAnimate() {\n    if (this.aniamateStatus) {\n      this.layerService.stopAnimate();\n      this.aniamateStatus = false;\n      this.updateLayerConfig({\n        animateOption: {\n          enable: false,\n        },\n      });\n    }\n  }\n  public getLayerAnimateTime(): number {\n    return this.layerService.clock.getElapsedTime() - this.animateStartTime;\n  }\n\n  public needPick(type: string): boolean {\n    const {\n      enableHighlight = true,\n      enableSelect = true,\n    } = this.getLayerConfig();\n    // 判断layer是否监听事件;\n    let isPick =\n      this.eventNames().indexOf(type) !== -1 ||\n      this.eventNames().indexOf('un' + type) !== -1;\n    if ((type === 'click' || type === 'dblclick') && enableSelect) {\n      isPick = true;\n    }\n    if (\n      type === 'mousemove' &&\n      (enableHighlight ||\n        this.eventNames().indexOf('mouseenter') !== -1 ||\n        this.eventNames().indexOf('unmousemove') !== -1 ||\n        this.eventNames().indexOf('mouseout') !== -1)\n    ) {\n      isPick = true;\n    }\n    return this.isVisible() && isPick;\n  }\n\n  public buildModels() {\n    throw new Error('Method not implemented.');\n  }\n  public rebuildModels() {\n    throw new Error('Method not implemented.');\n  }\n\n  public renderModels() {\n    // TODO: this.getEncodedData().length > 0 这个判断是为了解决在 2.5.x 引入数据纹理后产生的 空数据渲染导致 texture 超出上限问题\n    if (this.getEncodedData().length > 0) {\n      if (this.layerModelNeedUpdate && this.layerModel) {\n        this.models = this.layerModel.buildModels();\n        this.hooks.beforeRender.call();\n        this.layerModelNeedUpdate = false;\n      }\n      this.models.forEach((model) => {\n        model.draw({\n          uniforms: this.layerModel.getUninforms(),\n        });\n      });\n    }\n    return this;\n  }\n\n  public updateStyleAttribute(\n    type: string,\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    if (!this.inited) {\n      this.pendingStyleAttributes.push({\n        attributeName: type,\n        attributeField: field,\n        attributeValues: values,\n        updateOptions,\n      });\n    } else {\n      this.styleAttributeService.updateStyleAttribute(\n        type,\n        {\n          // @ts-ignore\n          scale: {\n            field,\n            ...this.splitValuesAndCallbackInAttribute(\n              // @ts-ignore\n              values,\n              // @ts-ignore\n              this.getLayerConfig()[field],\n            ),\n          },\n        },\n        // @ts-ignore\n        updateOptions,\n      );\n    }\n  }\n\n  /**\n   * 继承空方法\n   * @param time\n   */\n  public setEarthTime(time: number) {\n    console.warn('empty fn');\n  }\n\n  protected getConfigSchema() {\n    throw new Error('Method not implemented.');\n  }\n\n  protected getModelType(): unknown {\n    throw new Error('Method not implemented.');\n  }\n  protected getDefaultConfig() {\n    return {};\n  }\n\n  private sourceEvent = () => {\n    this.dataState.dataSourceNeedUpdate = true;\n    const { autoFit, fitBoundsOptions } = this.getLayerConfig();\n    if (autoFit) {\n      this.fitBounds(fitBoundsOptions);\n    }\n\n    this.emit('dataUpdate');\n    this.reRender();\n  };\n\n  private reRender() {\n    if (this.inited) {\n      this.layerService.updateLayerRenderList();\n      this.layerService.renderLayers();\n    }\n  }\n  private splitValuesAndCallbackInAttribute(\n    valuesOrCallback?: unknown[],\n    defaultValues?: unknown[],\n  ) {\n    return {\n      values: isFunction(valuesOrCallback)\n        ? undefined\n        : valuesOrCallback || defaultValues,\n      callback: isFunction(valuesOrCallback) ? valuesOrCallback : undefined,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}