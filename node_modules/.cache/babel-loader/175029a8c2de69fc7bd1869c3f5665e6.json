{"ast":null,"code":"import React from 'react';\nvar twitterWidgetJs = 'https://platform.twitter.com/widgets.js';\nvar methodName = 'createTimeline';\n\nvar TwitterTimelineEmbed = function TwitterTimelineEmbed(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  var buildOptions = function buildOptions() {\n    var options = Object.assign({}, props.options);\n\n    if (props !== null && props !== void 0 && props.autoHeight) {\n      var _ref$current, _ref$current$parentNo;\n\n      options.height = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : (_ref$current$parentNo = _ref$current.parentNode) === null || _ref$current$parentNo === void 0 ? void 0 : _ref$current$parentNo.offsetHeight;\n    }\n\n    options = Object.assign({}, options, {\n      theme: props === null || props === void 0 ? void 0 : props.theme,\n      linkColor: props === null || props === void 0 ? void 0 : props.linkColor,\n      borderColor: props === null || props === void 0 ? void 0 : props.borderColor,\n      lang: props === null || props === void 0 ? void 0 : props.lang,\n      tweetLimit: props === null || props === void 0 ? void 0 : props.tweetLimit,\n      ariaPolite: props === null || props === void 0 ? void 0 : props.ariaPolite\n    });\n    return options;\n  };\n\n  var buildChromeOptions = function buildChromeOptions(options) {\n    options.chrome = '';\n\n    if (props.noHeader) {\n      options.chrome = options.chrome + ' noheader';\n    }\n\n    if (props.noFooter) {\n      options.chrome = options.chrome + ' nofooter';\n    }\n\n    if (props.noBorders) {\n      options.chrome = options.chrome + ' noborders';\n    }\n\n    if (props.noScrollbar) {\n      options.chrome = options.chrome + ' noscrollbar';\n    }\n\n    if (props.transparent) {\n      options.chrome = options.chrome + ' transparent';\n    }\n\n    return options;\n  };\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\"Method \" + methodName + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        var options = buildOptions();\n        options = buildChromeOptions(options);\n        window.twttr.widgets[methodName]({\n          sourceType: props.sourceType,\n          screenName: props.screenName,\n          userId: props.userId,\n          ownerScreenName: props.ownerScreenName,\n          slug: props.slug,\n          id: props.id || props.widgetId,\n          url: props.url\n        }, ref === null || ref === void 0 ? void 0 : ref.current, options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$1 = 'createShareButton';\n\nvar TwitterShareButton = function TwitterShareButton(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$1]) {\n          console.error(\"Method \" + methodName$1 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$1](props.url, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$2 = 'createFollowButton';\n\nvar TwitterFollowButton = function TwitterFollowButton(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$2]) {\n          console.error(\"Method \" + methodName$2 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$2](props.screenName, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$3 = 'createHashtagButton';\n\nvar TwitterHashtagButton = function TwitterHashtagButton(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$3]) {\n          console.error(\"Method \" + methodName$3 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$3](props.tag, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$4 = 'createMentionButton';\n\nvar TwitterMentionButton = function TwitterMentionButton(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$4]) {\n          console.error(\"Method \" + methodName$4 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$4](props.screenName, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$5 = 'createTweet';\n\nvar TwitterTweetEmbed = function TwitterTweetEmbed(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$5]) {\n          console.error(\"Method \" + methodName$5 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$5](props.tweetId, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$6 = 'createMoment';\n\nvar TwitterMomentShare = function TwitterMomentShare(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$6]) {\n          console.error(\"Method \" + methodName$6 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$6](props.momentId, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$7 = 'createDMButton';\n\nvar TwitterDMButton = function TwitterDMButton(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$7]) {\n          console.error(\"Method \" + methodName$7 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$7](props.id, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          if (isComponentMounted) {\n            setLoading(false);\n\n            if (props.onLoad) {\n              props.onLoad(element);\n            }\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$8 = 'createVideo';\n\nvar TwitterVideoEmbed = function TwitterVideoEmbed(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$8]) {\n          console.error(\"Method \" + methodName$8 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$8](props.id, ref === null || ref === void 0 ? void 0 : ref.current).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$9 = 'createPeriscopeOnAirButton';\n\nvar TwitterOnAirButton = function TwitterOnAirButton(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$9]) {\n          console.error(\"Method \" + methodName$9 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$9](props.username, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nexport { TwitterDMButton, TwitterFollowButton, TwitterHashtagButton, TwitterMentionButton, TwitterMomentShare, TwitterOnAirButton, TwitterShareButton, TwitterTimelineEmbed, TwitterTweetEmbed, TwitterVideoEmbed };","map":{"version":3,"sources":["../src/components/twiter-widget-url.ts","../src/components/TwitterTimelineEmbed.tsx","../src/components/TwitterShareButton.tsx","../src/components/TwitterFollowButton.tsx","../src/components/TwitterHashtagButton.tsx","../src/components/TwitterMentionButton.tsx","../src/components/TwitterTweetEmbed.tsx","../src/components/TwitterMomentShare.tsx","../src/components/TwitterDMButton.tsx","../src/components/TwitterVideoEmbed.tsx","../src/components/TwitterOnAirButton.tsx"],"names":["twitterWidgetJs","methodName","TwitterTimelineEmbed","ref","React","loading","setLoading","buildOptions","options","Object","props","theme","linkColor","borderColor","lang","tweetLimit","ariaPolite","buildChromeOptions","isComponentMounted","script","require","window","console","sourceType","screenName","userId","ownerScreenName","slug","id","url","TwitterShareButton","TwitterFollowButton","TwitterHashtagButton","TwitterMentionButton","TwitterTweetEmbed","TwitterMomentShare","TwitterDMButton","TwitterVideoEmbed","TwitterOnAirButton"],"mappings":"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","sourcesContent":["const twitterWidgetJs = 'https://platform.twitter.com/widgets.js';\n\nexport default twitterWidgetJs;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterTimelineEmbedBase {\n  /**\n   * Additional options to pass to twitter widget plugin\n   */\n  options?: JSONObject;\n  /**\n   * Automatically fit into parent container height\n   */\n  autoHeight?: boolean;\n  /**\n   * With dark or light theme\n   */\n  theme?: 'dark' | 'light';\n  /**\n   * With custom link colors. Note: Only Hex colors are supported.\n   */\n  linkColor?: string;\n  /**\n   * With custom border colors. Note: Only Hex colors are supported.\n   */\n  borderColor?: string;\n  /**\n   * Hide the header from timeline\n   */\n  noHeader?: boolean;\n  /**\n   * Hide the footer from timeline\n   */\n  noFooter?: boolean;\n  /**\n   * Hide the border from timeline\n   */\n  noBorders?: boolean;\n  /**\n   * Hide the scrollbars\n   */\n  noScrollbar?: boolean;\n  /**\n   * Enable Transparancy\n   */\n  transparent?: boolean;\n  /**\n   * Custom language code. Supported codes here: https://developer.twitter.com/en/docs/twitter-for-websites/twitter-for-websites-supported-languages/overview.html\n   */\n  lang?: string;\n  /**\n   * ariaPolite\n   */\n  ariaPolite?: 'polite' | 'assertive' | 'rude';\n  /**\n   * Limit of tweets to be shown\n   */\n  tweetLimit?: number;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nexport interface TwitterTimelineEmbedSourceScreenName\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of profile, likes\n   */\n  sourceType: 'profile' | 'likes';\n  /**\n   * username of twitter handle as String\n   */\n  screenName: string;\n}\n\nexport interface TwitterTimelineEmbedSourceUserId\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of profile, likes\n   */\n  sourceType: 'profile' | 'likes';\n  /**\n   * UserId of twitter handle as number\n   */\n  userId: string;\n}\n\nexport interface TwitterTimelineEmbedSourceTimeline\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of timeline\n   */\n  sourceType: 'timeline';\n  /**\n   * To show list, unique list id\n   * Also used with collections, in that case its valid collection id\n   */\n  id: string;\n}\n\nexport interface TwitterTimelineEmbedSourceTimelineWidget\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of timeline\n   */\n  sourceType: 'timeline';\n  /**\n   * To show list, unique list id\n   * Also used with collections, in that case its valid collection id\n   */\n  widgetId: string;\n}\n\nexport interface TwitterTimelineEmbedSourceList\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of list\n   */\n  sourceType: 'list';\n  /**\n   * To show list, used along with slug\n   */\n  ownerScreenName: string;\n  /**\n   * To show list, used along with ownerScreenName\n   */\n  slug: string;\n}\n\nexport interface TwitterTimelineEmbedSourceListId\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of list\n   */\n  sourceType: 'list';\n  /**\n   * To show list, unique list id\n   * Also used with collections, in that case its valid collection id\n   */\n  id: string | number;\n}\n\nexport interface TwitterTimelineEmbedSourceCollectionId\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be collection\n   */\n  sourceType: 'collection';\n  /**\n   * To show list, unique list id\n   * Also used with collections, in that case its valid collection id\n   */\n  id: string | number;\n}\n\nexport interface TwitterTimelineEmbedSourceCollectionUrl\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be collection\n   */\n  sourceType: 'collection';\n  /**\n   * To show list, unique list url\n   * Also used with collections, in that case its valid collection id\n   */\n  url: string;\n}\n\nexport interface TwitterTimelineEmbedSourceUrl\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be url\n   */\n  sourceType: 'url';\n  /**\n   * To show twitter content with url.\n   * Supported content includes profiles, likes, lists, and collections.\n   */\n  url: string;\n}\n\nexport interface TwitterTimelineEmbedSourceWidget\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be widget\n   */\n  sourceType: 'widget';\n  /**\n   * To show custom widget\n   */\n  widgetId: string;\n}\n\nexport type TwitterTimelineEmbedPropsType =\n  | TwitterTimelineEmbedSourceScreenName\n  | TwitterTimelineEmbedSourceUserId\n  | TwitterTimelineEmbedSourceTimeline\n  | TwitterTimelineEmbedSourceTimelineWidget\n  | TwitterTimelineEmbedSourceList\n  | TwitterTimelineEmbedSourceListId\n  | TwitterTimelineEmbedSourceCollectionId\n  | TwitterTimelineEmbedSourceCollectionUrl\n  | TwitterTimelineEmbedSourceUrl\n  | TwitterTimelineEmbedSourceWidget;\n\n// export interface TwitterTimelineEmbedProps {\n//   sourceType: 'profile' | 'likes' | 'list' | 'collection' | 'URL' | 'widget'\n//   url: string;\n//   options?: JSONObject,\n//   placeholder?: string | React.ReactNode;\n//   onLoad?: (element: any) => void;\n// };\n\nconst methodName = 'createTimeline';\n\nconst TwitterTimelineEmbed = (props: TwitterTimelineEmbedPropsType): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  const buildOptions = () => {\n    let options = Object.assign({}, props.options);\n    if (props?.autoHeight) {\n      options.height = (ref.current?.parentNode as HTMLElement)?.offsetHeight;\n    }\n\n    options = Object.assign({}, options, {\n      theme: props?.theme,\n      linkColor: props?.linkColor,\n      borderColor: props?.borderColor,\n      lang: props?.lang,\n      tweetLimit: props?.tweetLimit,\n      ariaPolite: props?.ariaPolite\n    });\n\n    return options;\n  };\n\n  const buildChromeOptions = (options: JSONObject) => {\n    options.chrome = '';\n    if (props.noHeader) {\n      options.chrome = options.chrome + ' noheader';\n    }\n    if (props.noFooter) {\n      options.chrome = options.chrome + ' nofooter';\n    }\n    if (props.noBorders) {\n      options.chrome = options.chrome + ' noborders';\n    }\n    if (props.noScrollbar) {\n      options.chrome = options.chrome + ' noscrollbar';\n    }\n    if (props.transparent) {\n      options.chrome = options.chrome + ' transparent';\n    }\n\n    return options;\n  };\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        let options = buildOptions();\n        /** Append chrome options */\n        options = buildChromeOptions(options);\n\n        window.twttr.widgets[methodName](\n          {\n            // @ts-ignore\n            sourceType: props.sourceType,\n            // @ts-ignore\n            screenName: props.screenName,\n            // @ts-ignore\n            userId: props.userId,\n            // @ts-ignore\n            ownerScreenName: props.ownerScreenName,\n            // @ts-ignore\n            slug: props.slug,\n            // @ts-ignore\n            id: props.id || props.widgetId,\n            // @ts-ignore\n            url: props.url\n          },\n          ref?.current,\n          options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterTimelineEmbed;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterShareButtonProps {\n  /**\n   * Url for sharing\n   */\n  url: string;\n  /**\n   * Additional options for overriding config. Details at : https://dev.twitter.com/web/tweet-button/parameters\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createShareButton';\n\nconst TwitterShareButton = (props: TwitterShareButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.url,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterShareButton;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterFollowButtonProps {\n  /**\n   * Username of twitter user which will be followed on click\n   */\n  screenName: string;\n  /**\n   * Additional options to be added to the button\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createFollowButton';\n\nconst TwitterFollowButton = (props: TwitterFollowButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.screenName,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterFollowButton;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterHashtagButtonProps {\n  /**\n   * Tag name for hashtag button\n   */\n  tag: string;\n  /**\n   * Additional options to be added to the button\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createHashtagButton';\n\nconst TwitterHashtagButton = (props: TwitterHashtagButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.tag,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterHashtagButton;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterMentionButtonProps {\n  /**\n   * Username to which you will need to tweet\n   */\n  screenName: string;\n  /**\n   * Additional options for overriding config.\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createMentionButton';\n\nconst TwitterMentionButton = (props: TwitterMentionButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.screenName,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterMentionButton;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterTweetEmbedProps {\n  /**\n   * Tweet id that needs to be shown\n   */\n  tweetId: string;\n  /**\n   * Additional options to pass to twitter widget plugin\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createTweet';\n\nconst TwitterTweetEmbed = (props: TwitterTweetEmbedProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.tweetId,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterTweetEmbed;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterMomentShareProps {\n  /**\n   * id of Twitter moment to show\n   */\n  momentId: string;\n  /**\n   * Additional options for overriding config.\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createMoment';\n\nconst TwitterMomentShare = (props: TwitterMomentShareProps) => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.momentId,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterMomentShare;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterDMButtonProps {\n  /**\n   * Twitter user id for DM button\n   */\n  id: number;\n  /**\n   * Additional options to be added to the button\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createDMButton';\n\nconst TwitterDMButton = (props: TwitterDMButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.id,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          if (isComponentMounted) {\n            setLoading(false);\n            if (props.onLoad) {\n              props.onLoad(element);\n            }\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterDMButton;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\nexport interface TwitterVideoEmbedProps {\n  /**\n   * Id of video tweet.\n   */\n  id: string;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createVideo';\n\nconst TwitterVideoEmbed = (props: TwitterVideoEmbedProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](props.id, ref?.current).then(\n          (element: any) => {\n            setLoading(false);\n            if (props.onLoad) {\n              props.onLoad(element);\n            }\n          }\n        );\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterVideoEmbed;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterOnAirButtonProps {\n  /**\n   * Username for which you require periscope on air button\n   */\n  username: string;\n  /**\n   * Additional options for overriding config.\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createPeriscopeOnAirButton';\n\nconst TwitterOnAirButton = (props: TwitterOnAirButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.username,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterOnAirButton;\n"]},"metadata":{},"sourceType":"module"}