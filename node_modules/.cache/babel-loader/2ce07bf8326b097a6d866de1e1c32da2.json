{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { isMini } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { RasterImageTriangulation } from '../../core/triangulation';\nvar ImageFrag = \"precision mediump float;\\nuniform float u_opacity: 1.0;\\nuniform sampler2D u_texture;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n  vec4 color = texture2D(u_texture,vec2(v_texCoord.x,v_texCoord.y));\\n  gl_FragColor = color;\\n  gl_FragColor.a *= u_opacity;\\n}\\n\";\nvar ImageVert = \"precision highp float;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\nattribute vec3 a_Position;\\nattribute vec2 a_Uv;\\nvarying vec2 v_texCoord;\\n#pragma include \\\"projection\\\"\\nvoid main() {\\n   v_texCoord = a_Uv;\\n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\\n   // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy,0., 1.0));\\n   if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n      gl_Position = u_Mvp * (vec4(project_pos.xy,0., 1.0));\\n   } else {\\n      gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy,0., 1.0));\\n   }\\n}\\n\";\n\nvar ImageModel = function (_BaseModel) {\n  _inherits(ImageModel, _BaseModel);\n\n  var _super = _createSuper(ImageModel);\n\n  function ImageModel() {\n    var _this;\n\n    _classCallCheck(this, ImageModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"texture\", void 0);\n\n    return _this;\n  }\n\n  _createClass(ImageModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          opacity = _ref.opacity;\n\n      return {\n        u_opacity: opacity || 1,\n        u_texture: this.texture\n      };\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      var _this2 = this;\n\n      var source = this.layer.getSource();\n      var createTexture2D = this.rendererService.createTexture2D;\n      this.texture = createTexture2D({\n        height: 0,\n        width: 0\n      });\n\n      if (isMini) {\n        var canvas = this.layerService.sceneService.getSceneConfig().canvas;\n        var img = canvas.createImage();\n        img.crossOrigin = 'anonymous';\n        img.src = source.data.originData;\n\n        img.onload = function () {\n          _this2.texture = createTexture2D({\n            data: img,\n            width: img.width,\n            height: img.height\n          });\n\n          _this2.layerService.updateLayerRenderList();\n\n          _this2.layerService.renderLayers();\n        };\n      } else {\n        source.data.images.then(function (imageData) {\n          _this2.texture = createTexture2D({\n            data: imageData[0],\n            width: imageData[0].width,\n            height: imageData[0].height\n          });\n\n          _this2.layerService.updateLayerRenderList();\n\n          _this2.layerService.renderLayers();\n        });\n      }\n\n      return [this.layer.buildLayerModel({\n        moduleName: 'RasterImage',\n        vertexShader: ImageVert,\n        fragmentShader: ImageFrag,\n        triangulation: RasterImageTriangulation,\n        primitive: gl.TRIANGLES,\n        depth: {\n          enable: false\n        },\n        blend: this.getBlend()\n      })];\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      return this.initModels();\n    }\n  }, {\n    key: \"getConfigSchema\",\n    value: function getConfigSchema() {\n      return {\n        properties: {\n          opacity: {\n            type: 'number',\n            minimum: 0,\n            maximum: 1\n          }\n        }\n      };\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Uv',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[3], vertex[4]];\n          }\n        }\n      });\n    }\n  }]);\n\n  return ImageModel;\n}(BaseModel);\n\nexport { ImageModel as default };","map":{"version":3,"sources":["../../../src/image/models/image.ts"],"names":["ImageModel","BaseModel","opacity","u_opacity","u_texture","texture","source","createTexture2D","height","width","canvas","img","data","imageData","moduleName","vertexShader","fragmentShader","triangulation","primitive","gl","depth","enable","blend","properties","type","minimum","maximum","name","AttributeType","descriptor","buffer","usage","FLOAT","size","update","vertex"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  ILayer,\n  ILayerPlugin,\n  IModel,\n  IModelUniform,\n  IRasterParserDataItem,\n  IStyleAttributeService,\n  ITexture2D,\n  lazyInject,\n  TYPES,\n} from '@antv/l7-core';\nimport { isMini } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { RasterImageTriangulation } from '../../core/triangulation';\nimport ImageFrag from '../shaders/image_frag.glsl';\nimport ImageVert from '../shaders/image_vert.glsl';\n\ninterface IImageLayerStyleOptions {\n  opacity: number;\n}\nexport default class ImageModel extends BaseModel {\n  protected texture: ITexture2D;\n  public getUninforms(): IModelUniform {\n    const { opacity } = this.layer.getLayerConfig() as IImageLayerStyleOptions;\n    return {\n      u_opacity: opacity || 1,\n      u_texture: this.texture,\n    };\n  }\n  public initModels() {\n    const source = this.layer.getSource();\n    const { createTexture2D } = this.rendererService;\n    this.texture = createTexture2D({\n      height: 0,\n      width: 0,\n    });\n\n    if (isMini) {\n      // @ts-ignore\n      const canvas = this.layerService.sceneService.getSceneConfig().canvas;\n      const img = canvas.createImage();\n      // let img = new Image()\n      img.crossOrigin = 'anonymous';\n      img.src = source.data.originData;\n\n      img.onload = () => {\n        this.texture = createTexture2D({\n          data: img,\n          width: img.width,\n          height: img.height,\n        });\n        this.layerService.updateLayerRenderList();\n        this.layerService.renderLayers();\n      };\n    } else {\n      source.data.images.then((imageData: HTMLImageElement[]) => {\n        this.texture = createTexture2D({\n          data: imageData[0],\n          width: imageData[0].width,\n          height: imageData[0].height,\n        });\n        this.layerService.updateLayerRenderList();\n        this.layerService.renderLayers();\n      });\n    }\n\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'RasterImage',\n        vertexShader: ImageVert,\n        fragmentShader: ImageFrag,\n        triangulation: RasterImageTriangulation,\n        primitive: gl.TRIANGLES,\n        depth: { enable: false },\n        blend: this.getBlend(),\n      }),\n    ];\n  }\n  public buildModels() {\n    return this.initModels();\n  }\n\n  protected getConfigSchema() {\n    return {\n      properties: {\n        opacity: {\n          type: 'number',\n          minimum: 0,\n          maximum: 1,\n        },\n      },\n    };\n  }\n\n  protected registerBuiltinAttributes() {\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[3], vertex[4]];\n        },\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}