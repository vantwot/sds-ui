{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { singleton, contrib, Contribution } from 'mana-syringe';\nimport { DisposableCollection, Disposable } from '../common/disposable';\nimport { IFrontendApplicationContribution } from '../xflow-main/interface';\nimport { IMenuService, IMenuContribution } from './interface';\nlet MenuRegistry = class MenuRegistry {\n  constructor() {\n    /** disposables */\n    this.toDispose = new DisposableCollection();\n    /** menuMap */\n\n    this.menuMap = new Map();\n    /**\n     * 获取 menu\n     * @param menuId menuId\n     */\n\n    this.getMenu = menuId => {\n      return this.menuMap.get(menuId);\n    };\n    /**\n     * 注册一批可单独dispose的扩展项目\n     * @param externalRegisterFn IRegisterMenuFunction\n     */\n\n\n    this.registerDisposableMenu = externalRegisterFn => {\n      const toDispose = new DisposableCollection();\n      const disposableRegistry = {\n        registerMenu: config => {\n          const disposable = this.registerMenu(config);\n          toDispose.push(disposable);\n          return disposable;\n        }\n      };\n      externalRegisterFn(disposableRegistry);\n      this.toDispose.push(toDispose);\n      return toDispose;\n    };\n  }\n  /** app启动时，收集menu扩展点的注册项 */\n\n\n  onStart() {\n    const contributions = this.contributionProvider.getContributions();\n\n    for (const contribution of contributions) {\n      contribution.registerMenu(this);\n    }\n  }\n  /** app的停止逻辑 */\n\n\n  onStop() {\n    this.toDispose.dispose();\n  }\n  /**\n   * 注册 menu 类型\n   * @param config IMenu\n   */\n\n\n  registerMenu(config) {\n    this.menuMap.set(config.id, config);\n    return Disposable.create(() => this.menuMap.delete(config.id));\n  }\n\n};\n\n__decorate([contrib(IMenuContribution), __metadata(\"design:type\", Object)], MenuRegistry.prototype, \"contributionProvider\", void 0);\n\nMenuRegistry = __decorate([singleton({\n  contrib: [IFrontendApplicationContribution, IMenuService]\n})], MenuRegistry);\nexport { MenuRegistry };","map":{"version":3,"sources":["../../src/menu/menu-registry.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,SAAS,SAAT,EAAoB,OAApB,EAA6B,YAA7B,QAAiD,cAAjD;AACA,SAAS,oBAAT,EAA+B,UAA/B,QAAiD,sBAAjD;AACA,SAAS,gCAAT,QAAiD,yBAAjD;AAGA,SAAS,YAAT,EAAuB,iBAAvB,QAAgD,aAAhD;AAGA,IAAa,YAAY,GAAzB,MAAa,YAAb,CAAyB;AAAzB,EAAA,WAAA,GAAA;AACE;AACQ,SAAA,SAAA,GAAY,IAAI,oBAAJ,EAAZ;AACR;;AACQ,SAAA,OAAA,GAAU,IAAI,GAAJ,EAAV;AAuBR;;;AAGG;;AACH,SAAA,OAAA,GAAW,MAAD,IAAoB;AAC5B,aAAO,KAAK,OAAL,CAAa,GAAb,CAAiB,MAAjB,CAAP;AACD,KAFD;AAGA;;;AAGG;;;AACH,SAAA,sBAAA,GAA0B,kBAAD,IAA8C;AACrE,YAAM,SAAS,GAAG,IAAI,oBAAJ,EAAlB;AACA,YAAM,kBAAkB,GAAG;AACzB,QAAA,YAAY,EAAG,MAAD,IAAyB;AACrC,gBAAM,UAAU,GAAG,KAAK,YAAL,CAAkB,MAAlB,CAAnB;AACA,UAAA,SAAS,CAAC,IAAV,CAAe,UAAf;AACA,iBAAO,UAAP;AACD;AALwB,OAA3B;AAOA,MAAA,kBAAkB,CAAC,kBAAD,CAAlB;AACA,WAAK,SAAL,CAAe,IAAf,CAAoB,SAApB;AACA,aAAO,SAAP;AACD,KAZD;AAaD;AA3CC;;;AACA,EAAA,OAAO,GAAA;AACL,UAAM,aAAa,GAAG,KAAK,oBAAL,CAA0B,gBAA1B,EAAtB;;AACA,SAAK,MAAM,YAAX,IAA2B,aAA3B,EAA0C;AACxC,MAAA,YAAY,CAAC,YAAb,CAA0B,IAA1B;AACD;AACF;AACD;;;AACA,EAAA,MAAM,GAAA;AACJ,SAAK,SAAL,CAAe,OAAf;AACD;AACD;;;AAGG;;;AACH,EAAA,YAAY,CAAC,MAAD,EAAqB;AAC/B,SAAK,OAAL,CAAa,GAAb,CAAiB,MAAM,CAAC,EAAxB,EAA4B,MAA5B;AACA,WAAO,UAAU,CAAC,MAAX,CAAkB,MAAM,KAAK,OAAL,CAAa,MAAb,CAAoB,MAAM,CAAC,EAA3B,CAAxB,CAAP;AACD;;AA1BsB,CAAzB;;AAOE,UAAA,CAAA,CADC,OAAO,CAAC,iBAAD,CACR,E,iCAAA,CAAA,E,sBAAA,E,sBAAA,E,KAAiF,CAAjF,CAAA;;AAPW,YAAY,GAAA,UAAA,CAAA,CADxB,SAAS,CAAC;AAAE,EAAA,OAAO,EAAE,CAAC,gCAAD,EAAmC,YAAnC;AAAX,CAAD,CACe,CAAA,EAAZ,YAAY,CAAZ;SAAA,Y","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { singleton, contrib, Contribution } from 'mana-syringe';\nimport { DisposableCollection, Disposable } from '../common/disposable';\nimport { IFrontendApplicationContribution } from '../xflow-main/interface';\nimport { IMenuService, IMenuContribution } from './interface';\nlet MenuRegistry = class MenuRegistry {\n    constructor() {\n        /** disposables */\n        this.toDispose = new DisposableCollection();\n        /** menuMap */\n        this.menuMap = new Map();\n        /**\n         * 获取 menu\n         * @param menuId menuId\n         */\n        this.getMenu = (menuId) => {\n            return this.menuMap.get(menuId);\n        };\n        /**\n         * 注册一批可单独dispose的扩展项目\n         * @param externalRegisterFn IRegisterMenuFunction\n         */\n        this.registerDisposableMenu = (externalRegisterFn) => {\n            const toDispose = new DisposableCollection();\n            const disposableRegistry = {\n                registerMenu: (config) => {\n                    const disposable = this.registerMenu(config);\n                    toDispose.push(disposable);\n                    return disposable;\n                },\n            };\n            externalRegisterFn(disposableRegistry);\n            this.toDispose.push(toDispose);\n            return toDispose;\n        };\n    }\n    /** app启动时，收集menu扩展点的注册项 */\n    onStart() {\n        const contributions = this.contributionProvider.getContributions();\n        for (const contribution of contributions) {\n            contribution.registerMenu(this);\n        }\n    }\n    /** app的停止逻辑 */\n    onStop() {\n        this.toDispose.dispose();\n    }\n    /**\n     * 注册 menu 类型\n     * @param config IMenu\n     */\n    registerMenu(config) {\n        this.menuMap.set(config.id, config);\n        return Disposable.create(() => this.menuMap.delete(config.id));\n    }\n};\n__decorate([\n    contrib(IMenuContribution),\n    __metadata(\"design:type\", Object)\n], MenuRegistry.prototype, \"contributionProvider\", void 0);\nMenuRegistry = __decorate([\n    singleton({ contrib: [IFrontendApplicationContribution, IMenuService] })\n], MenuRegistry);\nexport { MenuRegistry };\n//# sourceMappingURL=menu-registry.js.map"]},"metadata":{},"sourceType":"module"}