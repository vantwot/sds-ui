{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { createMat4, transformVector } from './math-utils';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\nvar PI = Math.PI;\nvar PI_4 = PI / 4;\nvar DEGREES_TO_RADIANS = PI / 180;\nvar RADIANS_TO_DEGREES = 180 / PI;\nvar TILE_SIZE = 512;\nvar EARTH_CIRCUMFERENCE = 40.03e6;\nvar DEFAULT_ALTITUDE = 1.5;\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\nexport function scaleToZoom(scale) {\n  return Math.log2(scale);\n}\nexport function lngLatToWorld(_ref, scale) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      lng = _ref2[0],\n      lat = _ref2[1];\n\n  assert(Number.isFinite(lng) && Number.isFinite(scale));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n  scale *= TILE_SIZE;\n  var lambda2 = lng * DEGREES_TO_RADIANS;\n  var phi2 = lat * DEGREES_TO_RADIANS;\n  var x = scale * (lambda2 + PI) / (2 * PI);\n  var y = scale * (PI - Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);\n  return [x, y];\n}\nexport function worldToLngLat(_ref3, scale) {\n  var _ref4 = _slicedToArray(_ref3, 2),\n      x = _ref4[0],\n      y = _ref4[1];\n\n  scale *= TILE_SIZE;\n  var lambda2 = x / scale * (2 * PI) - PI;\n  var phi2 = 2 * (Math.atan(Math.exp(PI - y / scale * (2 * PI))) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\nexport function getMeterZoom(_ref5) {\n  var latitude = _ref5.latitude;\n  assert(Number.isFinite(latitude));\n  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\nexport function getDistanceScales(_ref6) {\n  var latitude = _ref6.latitude,\n      longitude = _ref6.longitude,\n      zoom = _ref6.zoom,\n      scale = _ref6.scale,\n      _ref6$highPrecision = _ref6.highPrecision,\n      highPrecision = _ref6$highPrecision === void 0 ? false : _ref6$highPrecision;\n  scale = scale !== undefined ? scale : zoomToScale(zoom);\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude) && Number.isFinite(scale));\n  var result = {};\n  var worldSize = TILE_SIZE * scale;\n  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  var pixelsPerDegreeX = worldSize / 360;\n  var pixelsPerDegreeY = pixelsPerDegreeX / latCosine;\n  var altPixelsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n  result.pixelsPerMeter = [altPixelsPerMeter, -altPixelsPerMeter, altPixelsPerMeter];\n  result.metersPerPixel = [1 / altPixelsPerMeter, -1 / altPixelsPerMeter, 1 / altPixelsPerMeter];\n  result.pixelsPerDegree = [pixelsPerDegreeX, -pixelsPerDegreeY, altPixelsPerMeter];\n  result.degreesPerPixel = [1 / pixelsPerDegreeX, -1 / pixelsPerDegreeY, 1 / altPixelsPerMeter];\n\n  if (highPrecision) {\n    var latCosine2 = DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS) / latCosine;\n    var pixelsPerDegreeY2 = pixelsPerDegreeX * latCosine2 / 2;\n    var altPixelsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;\n    var altPixelsPerMeter2 = altPixelsPerDegree2 / pixelsPerDegreeY * altPixelsPerMeter;\n    result.pixelsPerDegree2 = [0, -pixelsPerDegreeY2, altPixelsPerDegree2];\n    result.pixelsPerMeter2 = [altPixelsPerMeter2, 0, altPixelsPerMeter2];\n  }\n\n  return result;\n}\nexport function addMetersToLngLat(lngLatZ, xyz) {\n  var _lngLatZ = _slicedToArray(lngLatZ, 3),\n      longitude = _lngLatZ[0],\n      latitude = _lngLatZ[1],\n      z0 = _lngLatZ[2];\n\n  var _xyz = _slicedToArray(xyz, 3),\n      x = _xyz[0],\n      y = _xyz[1],\n      z = _xyz[2];\n\n  var scale = 1;\n\n  var _getDistanceScales = getDistanceScales({\n    longitude: longitude,\n    latitude: latitude,\n    scale: scale,\n    highPrecision: true\n  }),\n      pixelsPerMeter = _getDistanceScales.pixelsPerMeter,\n      pixelsPerMeter2 = _getDistanceScales.pixelsPerMeter2;\n\n  var worldspace = lngLatToWorld(lngLatZ, scale);\n  worldspace[0] += x * (pixelsPerMeter[0] + pixelsPerMeter2[0] * y);\n  worldspace[1] += y * (pixelsPerMeter[1] + pixelsPerMeter2[1] * y);\n  var newLngLat = worldToLngLat(worldspace, scale);\n  var newZ = (z0 || 0) + (z || 0);\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\nexport function getViewMatrix(_ref7) {\n  var height = _ref7.height,\n      pitch = _ref7.pitch,\n      bearing = _ref7.bearing,\n      altitude = _ref7.altitude,\n      _ref7$center = _ref7.center,\n      center = _ref7$center === void 0 ? null : _ref7$center,\n      _ref7$flipY = _ref7.flipY,\n      flipY = _ref7$flipY === void 0 ? false : _ref7$flipY;\n  var vm = createMat4();\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n  mat4.scale(vm, vm, [1, 1, 1 / height]);\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n\n  if (flipY) {\n    mat4.scale(vm, vm, [1, -1, 1]);\n  }\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\nexport function getProjectionParameters(_ref8) {\n  var width = _ref8.width,\n      height = _ref8.height,\n      _ref8$altitude = _ref8.altitude,\n      altitude = _ref8$altitude === void 0 ? DEFAULT_ALTITUDE : _ref8$altitude,\n      _ref8$pitch = _ref8.pitch,\n      pitch = _ref8$pitch === void 0 ? 0 : _ref8$pitch,\n      _ref8$nearZMultiplier = _ref8.nearZMultiplier,\n      nearZMultiplier = _ref8$nearZMultiplier === void 0 ? 1 : _ref8$nearZMultiplier,\n      _ref8$farZMultiplier = _ref8.farZMultiplier,\n      farZMultiplier = _ref8$farZMultiplier === void 0 ? 1 : _ref8$farZMultiplier;\n  var pitchRadians = pitch * DEGREES_TO_RADIANS;\n  var halfFov = Math.atan(0.5 / altitude);\n  var topHalfSurfaceDistance = Math.sin(halfFov) * altitude / Math.sin(Math.PI / 2 - pitchRadians - halfFov);\n  var farZ = Math.cos(Math.PI / 2 - pitchRadians) * topHalfSurfaceDistance + altitude;\n  return {\n    fov: 2 * Math.atan(height / 2 / altitude),\n    aspect: width / height,\n    focalDistance: altitude,\n    near: nearZMultiplier,\n    far: farZ * farZMultiplier\n  };\n}\nexport function getProjectionMatrix(_ref9) {\n  var width = _ref9.width,\n      height = _ref9.height,\n      pitch = _ref9.pitch,\n      altitude = _ref9.altitude,\n      nearZMultiplier = _ref9.nearZMultiplier,\n      farZMultiplier = _ref9.farZMultiplier;\n\n  var _getProjectionParamet = getProjectionParameters({\n    width: width,\n    height: height,\n    altitude: altitude,\n    pitch: pitch,\n    nearZMultiplier: nearZMultiplier,\n    farZMultiplier: farZMultiplier\n  }),\n      fov = _getProjectionParamet.fov,\n      aspect = _getProjectionParamet.aspect,\n      near = _getProjectionParamet.near,\n      far = _getProjectionParamet.far;\n\n  var projectionMatrix = mat4.perspective([], fov, aspect, near, far);\n  return projectionMatrix;\n}\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  var _xyz2 = _slicedToArray(xyz, 3),\n      x = _xyz2[0],\n      y = _xyz2[1],\n      _xyz2$ = _xyz2[2],\n      z = _xyz2$ === void 0 ? 0 : _xyz2$;\n\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix) {\n  var targetZ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  var _xyz3 = _slicedToArray(xyz, 3),\n      x = _xyz3[0],\n      y = _xyz3[1],\n      z = _xyz3[2];\n\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    var coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  var coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  var coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n  var z0 = coord0[2];\n  var z1 = coord1[2];\n  var t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([], coord0, coord1, t);\n}","map":{"version":3,"sources":["../../src/web-mercator-utils.js"],"names":["PI","Math","PI_4","DEGREES_TO_RADIANS","RADIANS_TO_DEGREES","TILE_SIZE","EARTH_CIRCUMFERENCE","DEFAULT_ALTITUDE","lng","lat","assert","Number","scale","lambda2","phi2","x","y","latitude","latCosine","scaleToZoom","longitude","zoom","highPrecision","zoomToScale","result","worldSize","pixelsPerDegreeX","pixelsPerDegreeY","altPixelsPerMeter","latCosine2","pixelsPerDegreeY2","altPixelsPerDegree2","altPixelsPerMeter2","z0","z","pixelsPerMeter","pixelsPerMeter2","getDistanceScales","worldspace","lngLatToWorld","newLngLat","worldToLngLat","newZ","height","pitch","bearing","altitude","center","flipY","vm","createMat4","mat4","vec3","width","nearZMultiplier","farZMultiplier","pitchRadians","halfFov","topHalfSurfaceDistance","farZ","fov","aspect","focalDistance","near","far","getProjectionParameters","projectionMatrix","transformVector","targetZ","coord","coord0","coord1","z1","t","vec2"],"mappings":"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","sourcesContent":["// TODO - THE UTILITIES IN THIS FILE SHOULD BE IMPORTED FROM WEB-MERCATOR-VIEWPORT MODULE\n\nimport {createMat4, transformVector} from './math-utils';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\n\n// CONSTANTS\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\n// Average circumference (40075 km equatorial, 40007 km meridional)\nconst EARTH_CIRCUMFERENCE = 40.03e6;\n\n// Mapbox default altitude\nconst DEFAULT_ALTITUDE = 1.5;\n\n/** Util functions **/\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\n\nexport function scaleToZoom(scale) {\n  return Math.log2(scale);\n}\n\n/**\n * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n * Performs the nonlinear part of the web mercator projection.\n * Remaining projection is done with 4x4 matrices which also handles\n * perspective.\n *\n * @param {Array} lngLat - [lng, lat] coordinates\n *   Specifies a point on the sphere to project onto the map.\n * @return {Array} [x,y] coordinates.\n */\nexport function lngLatToWorld([lng, lat], scale) {\n  assert(Number.isFinite(lng) && Number.isFinite(scale));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n\n  scale *= TILE_SIZE;\n  const lambda2 = lng * DEGREES_TO_RADIANS;\n  const phi2 = lat * DEGREES_TO_RADIANS;\n  const x = scale * (lambda2 + PI) / (2 * PI);\n  const y = scale * (PI - Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);\n  return [x, y];\n}\n\n/**\n * Unproject world point [x,y] on map onto {lat, lon} on sphere\n *\n * @param {object|Vector} xy - object with {x,y} members\n *  representing point on projected map plane\n * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n *   Has toArray method if you need a GeoJSON Array.\n *   Per cartographic tradition, lat and lon are specified as degrees.\n */\nexport function worldToLngLat([x, y], scale) {\n  scale *= TILE_SIZE;\n  const lambda2 = (x / scale) * (2 * PI) - PI;\n  const phi2 = 2 * (Math.atan(Math.exp(PI - (y / scale) * (2 * PI))) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\n\n// Returns the zoom level that gives a 1 meter pixel at a certain latitude\n// 1 = C*cos(y)/2^z/TILE_SIZE = C*cos(y)/2^(z+9)\nexport function getMeterZoom({latitude}) {\n  assert(Number.isFinite(latitude));\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\n\n/**\n * Calculate distance scales in meters around current lat/lon, both for\n * degrees and pixels.\n * In mercator projection mode, the distance scales vary significantly\n * with latitude.\n */\nexport function getDistanceScales({latitude, longitude, zoom, scale, highPrecision = false}) {\n  // Calculate scale from zoom if not provided\n  scale = scale !== undefined ? scale : zoomToScale(zoom);\n\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude) && Number.isFinite(scale));\n\n  const result = {};\n  const worldSize = TILE_SIZE * scale;\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n\n  /**\n   * Number of pixels occupied by one degree longitude around current lat/lon:\n     pixelsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)\n       = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)\n     pixelsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)\n       = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)\n   */\n  const pixelsPerDegreeX = worldSize / 360;\n  const pixelsPerDegreeY = pixelsPerDegreeX / latCosine;\n\n  /**\n   * Number of pixels occupied by one meter around current lat/lon:\n   */\n  const altPixelsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n\n  /**\n   * LngLat: longitude -> east and latitude -> north (bottom left)\n   * UTM meter offset: x -> east and y -> north (bottom left)\n   * World space: x -> east and y -> south (top left)\n   *\n   * Y needs to be flipped when converting delta degree/meter to delta pixels\n   */\n  result.pixelsPerMeter = [altPixelsPerMeter, -altPixelsPerMeter, altPixelsPerMeter];\n  result.metersPerPixel = [1 / altPixelsPerMeter, -1 / altPixelsPerMeter, 1 / altPixelsPerMeter];\n\n  result.pixelsPerDegree = [pixelsPerDegreeX, -pixelsPerDegreeY, altPixelsPerMeter];\n  result.degreesPerPixel = [1 / pixelsPerDegreeX, -1 / pixelsPerDegreeY, 1 / altPixelsPerMeter];\n\n  /**\n   * Taylor series 2nd order for 1/latCosine\n     f'(a) * (x - a)\n       = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat\n       = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat\n   */\n  if (highPrecision) {\n    const latCosine2 = DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS) / latCosine;\n    const pixelsPerDegreeY2 = pixelsPerDegreeX * latCosine2 / 2;\n    const altPixelsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;\n    const altPixelsPerMeter2 = altPixelsPerDegree2 / pixelsPerDegreeY * altPixelsPerMeter;\n\n    result.pixelsPerDegree2 = [0, -pixelsPerDegreeY2, altPixelsPerDegree2];\n    result.pixelsPerMeter2 = [altPixelsPerMeter2, 0, altPixelsPerMeter2];\n  }\n\n  // Main results, used for converting meters to latlng deltas and scaling offsets\n  return result;\n}\n\n/**\n * Offset a lng/lat position by meterOffset (northing, easting)\n */\nexport function addMetersToLngLat(lngLatZ, xyz) {\n  const [longitude, latitude, z0] = lngLatZ;\n  const [x, y, z] = xyz;\n\n  const scale = 1; // any constant works\n  const {pixelsPerMeter, pixelsPerMeter2} = getDistanceScales({\n    longitude,\n    latitude,\n    scale,\n    highPrecision: true\n  });\n\n  const worldspace = lngLatToWorld(lngLatZ, scale);\n  worldspace[0] += x * (pixelsPerMeter[0] + pixelsPerMeter2[0] * y);\n  worldspace[1] += y * (pixelsPerMeter[1] + pixelsPerMeter2[1] * y);\n\n  const newLngLat = worldToLngLat(worldspace, scale);\n  const newZ = (z0 || 0) + (z || 0);\n\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\n\n// ATTRIBUTION:\n// view and projection matrix creation is intentionally kept compatible with\n// mapbox-gl's implementation to ensure that seamless interoperation\n// with mapbox and react-map-gl. See: https://github.com/mapbox/mapbox-gl-js\n\nexport function getViewMatrix({\n  // Viewport props\n  height,\n  pitch,\n  bearing,\n  altitude,\n  // Pre-calculated parameters\n  center = null,\n  // Options\n  flipY = false\n}) {\n\n  // VIEW MATRIX: PROJECTS MERCATOR WORLD COORDINATES\n  // Note that mercator world coordinates typically need to be flipped\n  //\n  // Note: As usual, matrix operation orders should be read in reverse\n  // since vectors will be multiplied from the right during transformation\n  const vm = createMat4();\n\n  // Move camera to altitude (along the pitch & bearing direction)\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n\n  // After the rotateX, z values are in pixel units. Convert them to\n  // altitude units. 1 altitude unit = the screen height.\n  mat4.scale(vm, vm, [1, 1, 1 / height]);\n\n  // Rotate by bearing, and then by pitch (which tilts the view)\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n\n  if (flipY) {\n    mat4.scale(vm, vm, [1, -1, 1]);\n  }\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\n\n// PROJECTION MATRIX PARAMETERS\n// Variable fov (in radians)\nexport function getProjectionParameters({\n  width,\n  height,\n  altitude = DEFAULT_ALTITUDE,\n  pitch = 0,\n  nearZMultiplier = 1,\n  farZMultiplier = 1\n}) {\n  // Find the distance from the center point to the center top\n  // in altitude units using law of sines.\n  const pitchRadians = pitch * DEGREES_TO_RADIANS;\n  const halfFov = Math.atan(0.5 / altitude);\n  const topHalfSurfaceDistance =\n    Math.sin(halfFov) * altitude / Math.sin(Math.PI / 2 - pitchRadians - halfFov);\n\n  // Calculate z value of the farthest fragment that should be rendered.\n  const farZ = Math.cos(Math.PI / 2 - pitchRadians) * topHalfSurfaceDistance + altitude;\n\n  return {\n    fov: 2 * Math.atan((height / 2) / altitude),\n    aspect: width / height,\n    focalDistance: altitude,\n    near: nearZMultiplier,\n    far: farZ * farZMultiplier\n  };\n}\n\n// PROJECTION MATRIX: PROJECTS FROM CAMERA (VIEW) SPACE TO CLIPSPACE\n// To match mapbox's z buffer:\n// <= 0.28 - nearZMultiplier: 0.1, farZmultiplier: 1\n// >= 0.29 - nearZMultiplier: 1 / height, farZMultiplier: 1.01\nexport function getProjectionMatrix({\n  width,\n  height,\n  pitch,\n  altitude,\n  nearZMultiplier,\n  farZMultiplier\n}) {\n  const {fov, aspect, near, far} =\n    getProjectionParameters({width, height, altitude, pitch, nearZMultiplier, farZMultiplier});\n\n  const projectionMatrix = mat4.perspective(\n    [],\n    fov,      // fov in radians\n    aspect,   // aspect ratio\n    near,     // near plane\n    far       // far plane\n  );\n\n  return projectionMatrix;\n}\n\n/**\n * Project flat coordinates to pixels on screen.\n *\n * @param {Array} xyz - flat coordinate on 512*512 Mercator Zoom 0 tile\n * @param {Matrix4} pixelProjectionMatrix - projection matrix\n * @return {Array} [x, y, depth] pixel coordinate on screen.\n */\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  const [x, y, z = 0] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\n\n/**\n * Unproject pixels on screen to flat coordinates.\n *\n * @param {Array} xyz - pixel coordinate on screen.\n * @param {Matrix4} pixelUnprojectionMatrix - unprojection matrix\n * @param {Number} targetZ - if pixel coordinate does not have a 3rd component (depth),\n *    targetZ is used as the elevation plane to unproject onto\n * @return {Array} [x, y, Z] flat coordinates on 512*512 Mercator Zoom 0 tile.\n */\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix, targetZ = 0) {\n  const [x, y, z] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    // Has depth component\n    const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  // since we don't know the correct projected z value for the point,\n  // unproject two points to get a line and then find the point on that line with z=0\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n\n  const z0 = coord0[2];\n  const z1 = coord1[2];\n\n  const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([], coord0, coord1, t);\n}\n"]},"metadata":{},"sourceType":"module"}