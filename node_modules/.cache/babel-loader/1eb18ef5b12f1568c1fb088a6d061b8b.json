{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ManaSyringe, DisposableCollection, NsGraph, Disposable, XFlowEdgeCommands } from '@antv/xflow-core';\nimport { IGraphCommandFactory, IHookContribution, IModelContribution, IGraphCommandContribution } from '@antv/xflow-core';\nimport { HookHub } from '@antv/xflow-hook';\nimport { XFlowNode } from '../x6-extension/node';\nimport { XFlowEdge, EDGE_PATH_TYPE } from '../x6-extension/edge';\nimport { GRAPH_STATUS_INFO } from '../constants';\nimport { NsGraphStatusCommand } from './command';\nexport var NsAddEdgeEvent;\n\n(function (NsAddEdgeEvent) {\n  NsAddEdgeEvent.EVENT_NAME = 'ADD_EDGE_CMD_EVENT';\n})(NsAddEdgeEvent || (NsAddEdgeEvent = {}));\n\nexport const ANT_PREFIX = 'ant';\nexport const dagOptions = {\n  keyboard: {\n    enabled: true\n  },\n  // 点选/框选配置（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/selection）\n  selecting: {\n    enabled: true,\n    multiple: true,\n    selectCellOnMoved: true,\n    showNodeSelectionBox: false,\n    // 框选可以选中edge\n    rubberEdge: true,\n    // 框选可以选中node\n    rubberNode: true,\n    movable: true\n  },\n  connecting: {\n    //链接桩的位置 https://x6.antv.vision/zh/docs/api/registry/node-anchor\n    sourceAnchor: 'bottom',\n    //链接桩的位置 https://x6.antv.vision/zh/docs/api/registry/node-anchor\n    targetAnchor: 'center',\n    connectionPoint: 'anchor',\n    snap: {\n      radius: 20\n    },\n    router: {\n      name: 'manhattan'\n    },\n    connector: {\n      name: EDGE_PATH_TYPE.VERTICAL_NODE,\n      args: {\n        radius: 15\n      }\n    },\n    highlight: true,\n    dangling: false,\n\n    createEdge() {\n      /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n      const graph = this;\n      const edge = new XFlowEdge({\n        attrs: {\n          line: {\n            strokeDasharray: '5 5',\n            stroke: '#888',\n            strokeWidth: 1,\n            targetMarker: {\n              name: 'block',\n              args: {\n                size: '6'\n              }\n            }\n          }\n        }\n      });\n      graph.once('edge:connected', args => {\n        const {\n          isNew\n        } = args;\n        const edgeCell = args.edge;\n\n        if (isNew && edgeCell.isEdge()) {\n          const portId = edgeCell.getTargetPortId();\n          const targetNode = edgeCell.getTargetCell();\n\n          if (targetNode && targetNode.isNode()) {\n            targetNode.setPortProp(portId, 'connected', false);\n            edgeCell.attr({\n              line: {\n                strokeDasharray: '',\n                targetMarker: '',\n                stroke: '#d5d5d5'\n              }\n            });\n            const targetPortId = edgeCell.getTargetPortId();\n            const sourcePortId = edgeCell.getSourcePortId();\n            const sourceCellId = edgeCell.getSourceCellId();\n            const targetCellId = edgeCell.getTargetCellId();\n            graph.trigger(NsAddEdgeEvent.EVENT_NAME, {\n              targetPortId,\n              sourcePortId,\n              source: sourceCellId,\n              target: targetCellId,\n              edge: edge\n            });\n          }\n        }\n      });\n      return edge;\n    },\n\n    validateEdge: args => {\n      var _a;\n\n      const {\n        edge\n      } = args;\n      return !!((_a = edge === null || edge === void 0 ? void 0 : edge.target) === null || _a === void 0 ? void 0 : _a.port);\n    },\n\n    // 是否触发交互事件\n    validateMagnet(_ref) {\n      let {\n        magnet\n      } = _ref;\n      return magnet.getAttribute('port-group') !== NsGraph.AnchorGroup.TOP;\n    },\n\n    // 显示可用的链接桩\n    validateConnection(_ref2) {\n      let {\n        sourceView,\n        targetView,\n        sourceMagnet,\n        targetMagnet\n      } = _ref2;\n\n      // 不允许连接到自己\n      if (sourceView === targetView) {\n        return false;\n      } // 只能从上游节点的输出链接桩创建连接\n\n\n      if (!sourceMagnet || sourceMagnet.getAttribute('port-group') === NsGraph.AnchorGroup.TOP) {\n        return false;\n      } // 只能连接到下游节点的输入桩\n\n\n      if (!targetMagnet || targetMagnet.getAttribute('port-group') !== NsGraph.AnchorGroup.TOP) {\n        return false;\n      }\n\n      const node = targetView.cell; // 判断目标链接桩是否可连接\n\n      const portId = targetMagnet.getAttribute('port');\n      const port = node.getPort(portId);\n      return !(port && port.connected);\n    }\n\n  },\n  highlighting: {\n    nodeAvailable: {\n      name: 'className',\n      args: {\n        className: 'available'\n      }\n    },\n    magnetAvailable: {\n      name: 'className',\n      args: {\n        className: 'available'\n      }\n    },\n    magnetAdsorbed: {\n      name: 'className',\n      args: {\n        className: 'adsorbed'\n      }\n    }\n  },\n  scaling: {\n    max: 1.05,\n    min: 0.01\n  }\n};\n/**\n * 内置的hook contribution\n * 处理 config上的runtime的注册项\n */\n\nlet DagHooksContribution = class DagHooksContribution {\n  constructor() {\n    /** 注册Command */\n    this.registerGraphCommands = commands => {\n      commands.registerCommand(NsGraphStatusCommand.command, {\n        createCommand: this.commandFactory\n      });\n    };\n    /** 注册Hub */\n\n\n    this.toDispose = new DisposableCollection();\n    /** 注册Hook */\n\n    this.registerHook = hooks => __awaiter(this, void 0, void 0, function* () {\n      const toDispose = new DisposableCollection();\n      const disposables = [hooks.addNode.registerHook({\n        name: 'dag-add-node',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const cellFactory = nodeConfig => __awaiter(this, void 0, void 0, function* () {\n            const node = new XFlowNode(Object.assign({}, nodeConfig));\n            return node;\n          });\n\n          args.cellFactory = cellFactory;\n        })\n      }), hooks.addEdge.registerHook({\n        name: 'dag-add-edge',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const cellFactory = edgeConfig => __awaiter(this, void 0, void 0, function* () {\n            const cell = new XFlowEdge({\n              id: edgeConfig.id,\n              source: {\n                cell: edgeConfig.source,\n                port: edgeConfig.sourcePortId,\n                anchor: {\n                  name: 'bottom'\n                }\n              },\n              target: {\n                cell: edgeConfig.target,\n                port: edgeConfig.targetPortId,\n                anchor: {\n                  name: 'center'\n                }\n              },\n              attrs: {\n                line: {\n                  strokeDasharray: '',\n                  targetMarker: '',\n                  stroke: '#d5d5d5',\n                  strokeWidth: 1\n                }\n              },\n              data: Object.assign({}, edgeConfig)\n            });\n            return cell;\n          });\n\n          args.cellFactory = cellFactory;\n        })\n      }), hooks.addEdge.registerHook({\n        name: 'after add edge, set target port props',\n        handler: (handlerArgs, handler) => __awaiter(this, void 0, void 0, function* () {\n          const main = args => __awaiter(this, void 0, void 0, function* () {\n            const res = yield handler(args);\n            const targetNode = res.edgeCell.getTargetCell();\n            const portId = res.edgeCell.getTargetPortId();\n            targetNode.setPortProp(portId, 'connected', true);\n            return res;\n          });\n\n          return main;\n        })\n      }), hooks.delEdge.registerHook({\n        name: 'afetr del edge, reset target node port props',\n        handler: (args, handler) => __awaiter(this, void 0, void 0, function* () {\n          const newHandler = handlerArgs => __awaiter(this, void 0, void 0, function* () {\n            const result = yield handler(handlerArgs);\n            const {\n              targetCell,\n              targetPortId\n            } = result;\n\n            if (targetCell && targetCell.isNode() && targetPortId) {\n              targetCell.setPortProp(targetPortId, 'connected', false);\n            }\n\n            return result;\n          });\n\n          return newHandler;\n        })\n      }), hooks.afterGraphInit.registerHook({\n        name: 'call add edge to replace temp edge',\n        handler: handlerArgs => __awaiter(this, void 0, void 0, function* () {\n          const {\n            commandService,\n            graph\n          } = handlerArgs;\n          graph.on(NsAddEdgeEvent.EVENT_NAME, args => {\n            commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n              edgeConfig: args\n            });\n            args.edge.remove();\n          });\n        })\n      }), hooks.graphOptions.registerHook({\n        name: 'dag-extension-x6-options',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          Object.assign(args, dagOptions);\n        })\n      })];\n      toDispose.pushAll(disposables);\n      return Disposable.create(() => {});\n    });\n    /** 注册Hub */\n\n\n    this.registerHookHub = registry => __awaiter(this, void 0, void 0, function* () {\n      return registry.registerHookHub(NsGraphStatusCommand.hookKey, new HookHub());\n    });\n  }\n  /** 扩展Model */\n\n\n  registerModel(registry) {\n    /** node status map */\n    registry.registerModel({\n      id: GRAPH_STATUS_INFO.id,\n      getInitialValue: () => ({\n        statusMap: new Map(),\n        subscription: new DisposableCollection(),\n        graphStatus: GRAPH_STATUS_INFO.StatusEnum.DEFAULT\n      }),\n      watchChange: self => __awaiter(this, void 0, void 0, function* () {\n        const {\n          subscription\n        } = yield self.getValidValue();\n        return subscription;\n      })\n    });\n  }\n\n};\n\n__decorate([ManaSyringe.inject(IGraphCommandFactory), __metadata(\"design:type\", Function)], DagHooksContribution.prototype, \"commandFactory\", void 0);\n\nDagHooksContribution = __decorate([ManaSyringe.singleton({\n  contrib: [IHookContribution, IModelContribution, IGraphCommandContribution]\n})], DagHooksContribution);\nexport { DagHooksContribution };","map":{"version":3,"sources":["../../../src/canvas-dag-extension/contributions/dag.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ManaSyringe, DisposableCollection, NsGraph, Disposable, XFlowEdgeCommands, } from '@antv/xflow-core';\nimport { IGraphCommandFactory, IHookContribution, IModelContribution, IGraphCommandContribution, } from '@antv/xflow-core';\nimport { HookHub } from '@antv/xflow-hook';\nimport { XFlowNode } from '../x6-extension/node';\nimport { XFlowEdge, EDGE_PATH_TYPE } from '../x6-extension/edge';\nimport { GRAPH_STATUS_INFO } from '../constants';\nimport { NsGraphStatusCommand } from './command';\nexport var NsAddEdgeEvent;\n(function (NsAddEdgeEvent) {\n    NsAddEdgeEvent.EVENT_NAME = 'ADD_EDGE_CMD_EVENT';\n})(NsAddEdgeEvent || (NsAddEdgeEvent = {}));\nexport const ANT_PREFIX = 'ant';\nexport const dagOptions = {\n    keyboard: {\n        enabled: true,\n    },\n    // 点选/框选配置（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/selection）\n    selecting: {\n        enabled: true,\n        multiple: true,\n        selectCellOnMoved: true,\n        showNodeSelectionBox: false,\n        // 框选可以选中edge\n        rubberEdge: true,\n        // 框选可以选中node\n        rubberNode: true,\n        movable: true,\n    },\n    connecting: {\n        //链接桩的位置 https://x6.antv.vision/zh/docs/api/registry/node-anchor\n        sourceAnchor: 'bottom',\n        //链接桩的位置 https://x6.antv.vision/zh/docs/api/registry/node-anchor\n        targetAnchor: 'center',\n        connectionPoint: 'anchor',\n        snap: { radius: 20 },\n        router: { name: 'manhattan' },\n        connector: {\n            name: EDGE_PATH_TYPE.VERTICAL_NODE,\n            args: {\n                radius: 15,\n            },\n        },\n        highlight: true,\n        dangling: false,\n        createEdge() {\n            /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n            const graph = this;\n            const edge = new XFlowEdge({\n                attrs: {\n                    line: {\n                        strokeDasharray: '5 5',\n                        stroke: '#888',\n                        strokeWidth: 1,\n                        targetMarker: {\n                            name: 'block',\n                            args: {\n                                size: '6',\n                            },\n                        },\n                    },\n                },\n            });\n            graph.once('edge:connected', args => {\n                const { isNew } = args;\n                const edgeCell = args.edge;\n                if (isNew && edgeCell.isEdge()) {\n                    const portId = edgeCell.getTargetPortId();\n                    const targetNode = edgeCell.getTargetCell();\n                    if (targetNode && targetNode.isNode()) {\n                        targetNode.setPortProp(portId, 'connected', false);\n                        edgeCell.attr({\n                            line: {\n                                strokeDasharray: '',\n                                targetMarker: '',\n                                stroke: '#d5d5d5',\n                            },\n                        });\n                        const targetPortId = edgeCell.getTargetPortId();\n                        const sourcePortId = edgeCell.getSourcePortId();\n                        const sourceCellId = edgeCell.getSourceCellId();\n                        const targetCellId = edgeCell.getTargetCellId();\n                        graph.trigger(NsAddEdgeEvent.EVENT_NAME, {\n                            targetPortId,\n                            sourcePortId,\n                            source: sourceCellId,\n                            target: targetCellId,\n                            edge: edge,\n                        });\n                    }\n                }\n            });\n            return edge;\n        },\n        validateEdge: args => {\n            var _a;\n            const { edge } = args;\n            return !!((_a = edge === null || edge === void 0 ? void 0 : edge.target) === null || _a === void 0 ? void 0 : _a.port);\n        },\n        // 是否触发交互事件\n        validateMagnet({ magnet }) {\n            return magnet.getAttribute('port-group') !== NsGraph.AnchorGroup.TOP;\n        },\n        // 显示可用的链接桩\n        validateConnection({ sourceView, targetView, sourceMagnet, targetMagnet }) {\n            // 不允许连接到自己\n            if (sourceView === targetView) {\n                return false;\n            }\n            // 只能从上游节点的输出链接桩创建连接\n            if (!sourceMagnet || sourceMagnet.getAttribute('port-group') === NsGraph.AnchorGroup.TOP) {\n                return false;\n            }\n            // 只能连接到下游节点的输入桩\n            if (!targetMagnet || targetMagnet.getAttribute('port-group') !== NsGraph.AnchorGroup.TOP) {\n                return false;\n            }\n            const node = targetView.cell;\n            // 判断目标链接桩是否可连接\n            const portId = targetMagnet.getAttribute('port');\n            const port = node.getPort(portId);\n            return !(port && port.connected);\n        },\n    },\n    highlighting: {\n        nodeAvailable: {\n            name: 'className',\n            args: {\n                className: 'available',\n            },\n        },\n        magnetAvailable: {\n            name: 'className',\n            args: {\n                className: 'available',\n            },\n        },\n        magnetAdsorbed: {\n            name: 'className',\n            args: {\n                className: 'adsorbed',\n            },\n        },\n    },\n    scaling: {\n        max: 1.05,\n        min: 0.01,\n    },\n};\n/**\n * 内置的hook contribution\n * 处理 config上的runtime的注册项\n */\nlet DagHooksContribution = class DagHooksContribution {\n    constructor() {\n        /** 注册Command */\n        this.registerGraphCommands = (commands) => {\n            commands.registerCommand(NsGraphStatusCommand.command, {\n                createCommand: this.commandFactory,\n            });\n        };\n        /** 注册Hub */\n        this.toDispose = new DisposableCollection();\n        /** 注册Hook */\n        this.registerHook = (hooks) => __awaiter(this, void 0, void 0, function* () {\n            const toDispose = new DisposableCollection();\n            const disposables = [\n                hooks.addNode.registerHook({\n                    name: 'dag-add-node',\n                    handler: (args) => __awaiter(this, void 0, void 0, function* () {\n                        const cellFactory = (nodeConfig) => __awaiter(this, void 0, void 0, function* () {\n                            const node = new XFlowNode(Object.assign({}, nodeConfig));\n                            return node;\n                        });\n                        args.cellFactory = cellFactory;\n                    }),\n                }),\n                hooks.addEdge.registerHook({\n                    name: 'dag-add-edge',\n                    handler: (args) => __awaiter(this, void 0, void 0, function* () {\n                        const cellFactory = (edgeConfig) => __awaiter(this, void 0, void 0, function* () {\n                            const cell = new XFlowEdge({\n                                id: edgeConfig.id,\n                                source: {\n                                    cell: edgeConfig.source,\n                                    port: edgeConfig.sourcePortId,\n                                    anchor: {\n                                        name: 'bottom',\n                                    },\n                                },\n                                target: {\n                                    cell: edgeConfig.target,\n                                    port: edgeConfig.targetPortId,\n                                    anchor: {\n                                        name: 'center',\n                                    },\n                                },\n                                attrs: {\n                                    line: {\n                                        strokeDasharray: '',\n                                        targetMarker: '',\n                                        stroke: '#d5d5d5',\n                                        strokeWidth: 1,\n                                    },\n                                },\n                                data: Object.assign({}, edgeConfig),\n                            });\n                            return cell;\n                        });\n                        args.cellFactory = cellFactory;\n                    }),\n                }),\n                hooks.addEdge.registerHook({\n                    name: 'after add edge, set target port props',\n                    handler: (handlerArgs, handler) => __awaiter(this, void 0, void 0, function* () {\n                        const main = (args) => __awaiter(this, void 0, void 0, function* () {\n                            const res = yield handler(args);\n                            const targetNode = res.edgeCell.getTargetCell();\n                            const portId = res.edgeCell.getTargetPortId();\n                            targetNode.setPortProp(portId, 'connected', true);\n                            return res;\n                        });\n                        return main;\n                    }),\n                }),\n                hooks.delEdge.registerHook({\n                    name: 'afetr del edge, reset target node port props',\n                    handler: (args, handler) => __awaiter(this, void 0, void 0, function* () {\n                        const newHandler = (handlerArgs) => __awaiter(this, void 0, void 0, function* () {\n                            const result = yield handler(handlerArgs);\n                            const { targetCell, targetPortId } = result;\n                            if (targetCell && targetCell.isNode() && targetPortId) {\n                                targetCell.setPortProp(targetPortId, 'connected', false);\n                            }\n                            return result;\n                        });\n                        return newHandler;\n                    }),\n                }),\n                hooks.afterGraphInit.registerHook({\n                    name: 'call add edge to replace temp edge',\n                    handler: (handlerArgs) => __awaiter(this, void 0, void 0, function* () {\n                        const { commandService, graph } = handlerArgs;\n                        graph.on(NsAddEdgeEvent.EVENT_NAME, (args) => {\n                            commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, { edgeConfig: args });\n                            args.edge.remove();\n                        });\n                    }),\n                }),\n                hooks.graphOptions.registerHook({\n                    name: 'dag-extension-x6-options',\n                    handler: (args) => __awaiter(this, void 0, void 0, function* () {\n                        Object.assign(args, dagOptions);\n                    }),\n                }),\n            ];\n            toDispose.pushAll(disposables);\n            return Disposable.create(() => { });\n        });\n        /** 注册Hub */\n        this.registerHookHub = (registry) => __awaiter(this, void 0, void 0, function* () {\n            return registry.registerHookHub(NsGraphStatusCommand.hookKey, new HookHub());\n        });\n    }\n    /** 扩展Model */\n    registerModel(registry) {\n        /** node status map */\n        registry.registerModel({\n            id: GRAPH_STATUS_INFO.id,\n            getInitialValue: () => ({\n                statusMap: new Map(),\n                subscription: new DisposableCollection(),\n                graphStatus: GRAPH_STATUS_INFO.StatusEnum.DEFAULT,\n            }),\n            watchChange: (self) => __awaiter(this, void 0, void 0, function* () {\n                const { subscription } = yield self.getValidValue();\n                return subscription;\n            }),\n        });\n    }\n};\n__decorate([\n    ManaSyringe.inject(IGraphCommandFactory),\n    __metadata(\"design:type\", Function)\n], DagHooksContribution.prototype, \"commandFactory\", void 0);\nDagHooksContribution = __decorate([\n    ManaSyringe.singleton({\n        contrib: [IHookContribution, IModelContribution, IGraphCommandContribution],\n    })\n], DagHooksContribution);\nexport { DagHooksContribution };\n//# sourceMappingURL=dag.js.map"]},"metadata":{},"sourceType":"module"}