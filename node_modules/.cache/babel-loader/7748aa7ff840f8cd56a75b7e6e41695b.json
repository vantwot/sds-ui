{"ast":null,"code":"/**\n * @fileOverview fruchterman layout\n * @author shiwu.wyy@antfin.com\n */\nimport { Base } from \"./base\";\nimport { getEdgeTerminal, isNumber } from \"../util\";\nconst SPEED_DIVISOR = 800;\n/**\n * fruchterman 布局\n */\n\nexport class FruchtermanLayout extends Base {\n  constructor(options) {\n    super();\n    /** 停止迭代的最大迭代数 */\n\n    this.maxIteration = 1000;\n    /** 是否启动 worker */\n\n    this.workerEnabled = false;\n    /** 重力大小，影响图的紧凑程度 */\n\n    this.gravity = 10;\n    /** 速度 */\n\n    this.speed = 5;\n    /** 是否产生聚类力 */\n\n    this.clustering = false;\n    /** 聚类力大小 */\n\n    this.clusterGravity = 10;\n    this.nodes = [];\n    this.edges = [];\n    this.width = 300;\n    this.height = 300;\n    this.nodeMap = {};\n    this.nodeIdxMap = {};\n    /** 迭代结束的回调函数 */\n\n    this.onLayoutEnd = () => {};\n    /** 每次迭代结束的回调函数 */\n\n\n    this.tick = () => {};\n\n    this.updateCfg(options);\n  }\n\n  getDefaultCfg() {\n    return {\n      maxIteration: 1000,\n      gravity: 10,\n      speed: 1,\n      clustering: false,\n      clusterGravity: 10\n    };\n  }\n  /**\n   * 执行布局\n   */\n\n\n  execute() {\n    var _a, _b;\n\n    const self = this;\n    const nodes = self.nodes;\n\n    if (self.timeInterval !== undefined && typeof window !== \"undefined\") {\n      window.clearInterval(self.timeInterval);\n    }\n\n    if (!nodes || nodes.length === 0) {\n      (_a = self.onLayoutEnd) === null || _a === void 0 ? void 0 : _a.call(self);\n      return;\n    }\n\n    if (!self.width && typeof window !== \"undefined\") {\n      self.width = window.innerWidth;\n    }\n\n    if (!self.height && typeof window !== \"undefined\") {\n      self.height = window.innerHeight;\n    }\n\n    if (!self.center) {\n      self.center = [self.width / 2, self.height / 2];\n    }\n\n    const center = self.center;\n\n    if (nodes.length === 1) {\n      nodes[0].x = center[0];\n      nodes[0].y = center[1];\n      (_b = self.onLayoutEnd) === null || _b === void 0 ? void 0 : _b.call(self);\n      return;\n    }\n\n    const nodeMap = {};\n    const nodeIdxMap = {};\n    nodes.forEach((node, i) => {\n      if (!isNumber(node.x)) node.x = Math.random() * this.width;\n      if (!isNumber(node.y)) node.y = Math.random() * this.height;\n      nodeMap[node.id] = node;\n      nodeIdxMap[node.id] = i;\n    });\n    self.nodeMap = nodeMap;\n    self.nodeIdxMap = nodeIdxMap; // layout\n\n    return self.run();\n  }\n\n  run() {\n    var _a;\n\n    const self = this;\n    const nodes = self.nodes;\n    if (!nodes) return;\n    const {\n      edges,\n      maxIteration,\n      workerEnabled\n    } = self;\n    const clustering = self.clustering;\n    const clusterMap = {};\n\n    if (clustering) {\n      nodes.forEach(n => {\n        if (clusterMap[n.cluster] === undefined) {\n          const cluster = {\n            name: n.cluster,\n            cx: 0,\n            cy: 0,\n            count: 0\n          };\n          clusterMap[n.cluster] = cluster;\n        }\n\n        const c = clusterMap[n.cluster];\n\n        if (isNumber(n.x)) {\n          c.cx += n.x;\n        }\n\n        if (isNumber(n.y)) {\n          c.cy += n.y;\n        }\n\n        c.count++;\n      });\n\n      for (const key in clusterMap) {\n        clusterMap[key].cx /= clusterMap[key].count;\n        clusterMap[key].cy /= clusterMap[key].count;\n      }\n    }\n\n    if (workerEnabled) {\n      for (let i = 0; i < maxIteration; i++) {\n        self.runOneStep(clusterMap);\n      }\n\n      (_a = self.onLayoutEnd) === null || _a === void 0 ? void 0 : _a.call(self);\n    } else {\n      if (typeof window === \"undefined\") return;\n      let iter = 0; // interval for render the result after each iteration\n\n      this.timeInterval = window.setInterval(() => {\n        var _a;\n\n        self.runOneStep(clusterMap);\n        iter++;\n\n        if (iter >= maxIteration) {\n          (_a = self.onLayoutEnd) === null || _a === void 0 ? void 0 : _a.call(self);\n          window.clearInterval(self.timeInterval);\n        }\n      }, 0);\n    }\n\n    return {\n      nodes,\n      edges\n    };\n  }\n\n  runOneStep(clusterMap) {\n    var _a;\n\n    const self = this;\n    const nodes = self.nodes;\n    if (!nodes) return;\n    const {\n      edges,\n      center,\n      gravity,\n      speed,\n      clustering\n    } = self;\n    const area = self.height * self.width;\n    const maxDisplace = Math.sqrt(area) / 10;\n    const k2 = area / (nodes.length + 1);\n    const k = Math.sqrt(k2);\n    const displacements = [];\n    nodes.forEach((_, j) => {\n      displacements[j] = {\n        x: 0,\n        y: 0\n      };\n    });\n    self.applyCalculate(nodes, edges, displacements, k, k2); // gravity for clusters\n\n    if (clustering) {\n      const clusterGravity = self.clusterGravity || gravity;\n      nodes.forEach((n, j) => {\n        if (!isNumber(n.x) || !isNumber(n.y)) return;\n        const c = clusterMap[n.cluster];\n        const distLength = Math.sqrt((n.x - c.cx) * (n.x - c.cx) + (n.y - c.cy) * (n.y - c.cy));\n        const gravityForce = k * clusterGravity;\n        displacements[j].x -= gravityForce * (n.x - c.cx) / distLength;\n        displacements[j].y -= gravityForce * (n.y - c.cy) / distLength;\n      });\n\n      for (const key in clusterMap) {\n        clusterMap[key].cx = 0;\n        clusterMap[key].cy = 0;\n        clusterMap[key].count = 0;\n      }\n\n      nodes.forEach(n => {\n        const c = clusterMap[n.cluster];\n\n        if (isNumber(n.x)) {\n          c.cx += n.x;\n        }\n\n        if (isNumber(n.y)) {\n          c.cy += n.y;\n        }\n\n        c.count++;\n      });\n\n      for (const key in clusterMap) {\n        clusterMap[key].cx /= clusterMap[key].count;\n        clusterMap[key].cy /= clusterMap[key].count;\n      }\n    } // gravity\n\n\n    nodes.forEach((n, j) => {\n      if (!isNumber(n.x) || !isNumber(n.y)) return;\n      const gravityForce = 0.01 * k * gravity;\n      displacements[j].x -= gravityForce * (n.x - center[0]);\n      displacements[j].y -= gravityForce * (n.y - center[1]);\n    }); // move\n\n    nodes.forEach((n, j) => {\n      if (isNumber(n.fx) && isNumber(n.fy)) {\n        n.x = n.fx;\n        n.y = n.fy;\n        return;\n      }\n\n      if (!isNumber(n.x) || !isNumber(n.y)) return;\n      const distLength = Math.sqrt(displacements[j].x * displacements[j].x + displacements[j].y * displacements[j].y);\n\n      if (distLength > 0) {\n        // && !n.isFixed()\n        const limitedDist = Math.min(maxDisplace * (speed / SPEED_DIVISOR), distLength);\n        n.x += displacements[j].x / distLength * limitedDist;\n        n.y += displacements[j].y / distLength * limitedDist;\n      }\n    });\n    (_a = self.tick) === null || _a === void 0 ? void 0 : _a.call(self);\n  }\n\n  applyCalculate(nodes, edges, displacements, k, k2) {\n    const self = this;\n    self.calRepulsive(nodes, displacements, k2);\n    if (edges) self.calAttractive(edges, displacements, k);\n  }\n\n  calRepulsive(nodes, displacements, k2) {\n    nodes.forEach((v, i) => {\n      displacements[i] = {\n        x: 0,\n        y: 0\n      };\n      nodes.forEach((u, j) => {\n        if (i === j) {\n          return;\n        }\n\n        if (!isNumber(v.x) || !isNumber(u.x) || !isNumber(v.y) || !isNumber(u.y)) {\n          return;\n        }\n\n        let vecX = v.x - u.x;\n        let vecY = v.y - u.y;\n        let vecLengthSqr = vecX * vecX + vecY * vecY;\n\n        if (vecLengthSqr === 0) {\n          vecLengthSqr = 1;\n          const sign = i > j ? 1 : -1;\n          vecX = 0.01 * sign;\n          vecY = 0.01 * sign;\n        }\n\n        const common = k2 / vecLengthSqr;\n        displacements[i].x += vecX * common;\n        displacements[i].y += vecY * common;\n      });\n    });\n  }\n\n  calAttractive(edges, displacements, k) {\n    edges.forEach(e => {\n      const source = getEdgeTerminal(e, 'source');\n      const target = getEdgeTerminal(e, 'target');\n      if (!source || !target) return;\n      const uIndex = this.nodeIdxMap[source];\n      const vIndex = this.nodeIdxMap[target];\n\n      if (uIndex === vIndex) {\n        return;\n      }\n\n      const u = this.nodeMap[source];\n      const v = this.nodeMap[target];\n\n      if (!isNumber(v.x) || !isNumber(u.x) || !isNumber(v.y) || !isNumber(u.y)) {\n        return;\n      }\n\n      const vecX = v.x - u.x;\n      const vecY = v.y - u.y;\n      const vecLength = Math.sqrt(vecX * vecX + vecY * vecY);\n      const common = vecLength * vecLength / k;\n      displacements[vIndex].x -= vecX / vecLength * common;\n      displacements[vIndex].y -= vecY / vecLength * common;\n      displacements[uIndex].x += vecX / vecLength * common;\n      displacements[uIndex].y += vecY / vecLength * common;\n    });\n  }\n\n  stop() {\n    if (this.timeInterval && typeof window !== \"undefined\") {\n      window.clearInterval(this.timeInterval);\n    }\n  }\n\n  destroy() {\n    const self = this;\n    self.stop();\n    self.tick = null;\n    self.nodes = null;\n    self.edges = null;\n    self.destroyed = true;\n  }\n\n  getType() {\n    return \"fruchterman\";\n  }\n\n}","map":{"version":3,"sources":["../../src/layout/fruchterman.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @fileOverview fruchterman layout\n * @author shiwu.wyy@antfin.com\n */\nimport { Base } from \"./base\";\nimport { getEdgeTerminal, isNumber } from \"../util\";\nconst SPEED_DIVISOR = 800;\n/**\n * fruchterman 布局\n */\nexport class FruchtermanLayout extends Base {\n    constructor(options) {\n        super();\n        /** 停止迭代的最大迭代数 */\n        this.maxIteration = 1000;\n        /** 是否启动 worker */\n        this.workerEnabled = false;\n        /** 重力大小，影响图的紧凑程度 */\n        this.gravity = 10;\n        /** 速度 */\n        this.speed = 5;\n        /** 是否产生聚类力 */\n        this.clustering = false;\n        /** 聚类力大小 */\n        this.clusterGravity = 10;\n        this.nodes = [];\n        this.edges = [];\n        this.width = 300;\n        this.height = 300;\n        this.nodeMap = {};\n        this.nodeIdxMap = {};\n        /** 迭代结束的回调函数 */\n        this.onLayoutEnd = () => { };\n        /** 每次迭代结束的回调函数 */\n        this.tick = () => { };\n        this.updateCfg(options);\n    }\n    getDefaultCfg() {\n        return {\n            maxIteration: 1000,\n            gravity: 10,\n            speed: 1,\n            clustering: false,\n            clusterGravity: 10\n        };\n    }\n    /**\n     * 执行布局\n     */\n    execute() {\n        var _a, _b;\n        const self = this;\n        const nodes = self.nodes;\n        if (self.timeInterval !== undefined && typeof window !== \"undefined\") {\n            window.clearInterval(self.timeInterval);\n        }\n        if (!nodes || nodes.length === 0) {\n            (_a = self.onLayoutEnd) === null || _a === void 0 ? void 0 : _a.call(self);\n            return;\n        }\n        if (!self.width && typeof window !== \"undefined\") {\n            self.width = window.innerWidth;\n        }\n        if (!self.height && typeof window !== \"undefined\") {\n            self.height = window.innerHeight;\n        }\n        if (!self.center) {\n            self.center = [self.width / 2, self.height / 2];\n        }\n        const center = self.center;\n        if (nodes.length === 1) {\n            nodes[0].x = center[0];\n            nodes[0].y = center[1];\n            (_b = self.onLayoutEnd) === null || _b === void 0 ? void 0 : _b.call(self);\n            return;\n        }\n        const nodeMap = {};\n        const nodeIdxMap = {};\n        nodes.forEach((node, i) => {\n            if (!isNumber(node.x))\n                node.x = Math.random() * this.width;\n            if (!isNumber(node.y))\n                node.y = Math.random() * this.height;\n            nodeMap[node.id] = node;\n            nodeIdxMap[node.id] = i;\n        });\n        self.nodeMap = nodeMap;\n        self.nodeIdxMap = nodeIdxMap;\n        // layout\n        return self.run();\n    }\n    run() {\n        var _a;\n        const self = this;\n        const nodes = self.nodes;\n        if (!nodes)\n            return;\n        const { edges, maxIteration, workerEnabled } = self;\n        const clustering = self.clustering;\n        const clusterMap = {};\n        if (clustering) {\n            nodes.forEach((n) => {\n                if (clusterMap[n.cluster] === undefined) {\n                    const cluster = {\n                        name: n.cluster,\n                        cx: 0,\n                        cy: 0,\n                        count: 0\n                    };\n                    clusterMap[n.cluster] = cluster;\n                }\n                const c = clusterMap[n.cluster];\n                if (isNumber(n.x)) {\n                    c.cx += n.x;\n                }\n                if (isNumber(n.y)) {\n                    c.cy += n.y;\n                }\n                c.count++;\n            });\n            for (const key in clusterMap) {\n                clusterMap[key].cx /= clusterMap[key].count;\n                clusterMap[key].cy /= clusterMap[key].count;\n            }\n        }\n        if (workerEnabled) {\n            for (let i = 0; i < maxIteration; i++) {\n                self.runOneStep(clusterMap);\n            }\n            (_a = self.onLayoutEnd) === null || _a === void 0 ? void 0 : _a.call(self);\n        }\n        else {\n            if (typeof window === \"undefined\")\n                return;\n            let iter = 0;\n            // interval for render the result after each iteration\n            this.timeInterval = window.setInterval(() => {\n                var _a;\n                self.runOneStep(clusterMap);\n                iter++;\n                if (iter >= maxIteration) {\n                    (_a = self.onLayoutEnd) === null || _a === void 0 ? void 0 : _a.call(self);\n                    window.clearInterval(self.timeInterval);\n                }\n            }, 0);\n        }\n        return {\n            nodes,\n            edges\n        };\n    }\n    runOneStep(clusterMap) {\n        var _a;\n        const self = this;\n        const nodes = self.nodes;\n        if (!nodes)\n            return;\n        const { edges, center, gravity, speed, clustering } = self;\n        const area = self.height * self.width;\n        const maxDisplace = Math.sqrt(area) / 10;\n        const k2 = area / (nodes.length + 1);\n        const k = Math.sqrt(k2);\n        const displacements = [];\n        nodes.forEach((_, j) => {\n            displacements[j] = { x: 0, y: 0 };\n        });\n        self.applyCalculate(nodes, edges, displacements, k, k2);\n        // gravity for clusters\n        if (clustering) {\n            const clusterGravity = self.clusterGravity || gravity;\n            nodes.forEach((n, j) => {\n                if (!isNumber(n.x) || !isNumber(n.y))\n                    return;\n                const c = clusterMap[n.cluster];\n                const distLength = Math.sqrt((n.x - c.cx) * (n.x - c.cx) + (n.y - c.cy) * (n.y - c.cy));\n                const gravityForce = k * clusterGravity;\n                displacements[j].x -= (gravityForce * (n.x - c.cx)) / distLength;\n                displacements[j].y -= (gravityForce * (n.y - c.cy)) / distLength;\n            });\n            for (const key in clusterMap) {\n                clusterMap[key].cx = 0;\n                clusterMap[key].cy = 0;\n                clusterMap[key].count = 0;\n            }\n            nodes.forEach((n) => {\n                const c = clusterMap[n.cluster];\n                if (isNumber(n.x)) {\n                    c.cx += n.x;\n                }\n                if (isNumber(n.y)) {\n                    c.cy += n.y;\n                }\n                c.count++;\n            });\n            for (const key in clusterMap) {\n                clusterMap[key].cx /= clusterMap[key].count;\n                clusterMap[key].cy /= clusterMap[key].count;\n            }\n        }\n        // gravity\n        nodes.forEach((n, j) => {\n            if (!isNumber(n.x) || !isNumber(n.y))\n                return;\n            const gravityForce = 0.01 * k * gravity;\n            displacements[j].x -= gravityForce * (n.x - center[0]);\n            displacements[j].y -= gravityForce * (n.y - center[1]);\n        });\n        // move\n        nodes.forEach((n, j) => {\n            if (isNumber(n.fx) && isNumber(n.fy)) {\n                n.x = n.fx;\n                n.y = n.fy;\n                return;\n            }\n            if (!isNumber(n.x) || !isNumber(n.y))\n                return;\n            const distLength = Math.sqrt(displacements[j].x * displacements[j].x +\n                displacements[j].y * displacements[j].y);\n            if (distLength > 0) {\n                // && !n.isFixed()\n                const limitedDist = Math.min(maxDisplace * (speed / SPEED_DIVISOR), distLength);\n                n.x += (displacements[j].x / distLength) * limitedDist;\n                n.y += (displacements[j].y / distLength) * limitedDist;\n            }\n        });\n        (_a = self.tick) === null || _a === void 0 ? void 0 : _a.call(self);\n    }\n    applyCalculate(nodes, edges, displacements, k, k2) {\n        const self = this;\n        self.calRepulsive(nodes, displacements, k2);\n        if (edges)\n            self.calAttractive(edges, displacements, k);\n    }\n    calRepulsive(nodes, displacements, k2) {\n        nodes.forEach((v, i) => {\n            displacements[i] = { x: 0, y: 0 };\n            nodes.forEach((u, j) => {\n                if (i === j) {\n                    return;\n                }\n                if (!isNumber(v.x) ||\n                    !isNumber(u.x) ||\n                    !isNumber(v.y) ||\n                    !isNumber(u.y)) {\n                    return;\n                }\n                let vecX = v.x - u.x;\n                let vecY = v.y - u.y;\n                let vecLengthSqr = vecX * vecX + vecY * vecY;\n                if (vecLengthSqr === 0) {\n                    vecLengthSqr = 1;\n                    const sign = i > j ? 1 : -1;\n                    vecX = 0.01 * sign;\n                    vecY = 0.01 * sign;\n                }\n                const common = k2 / vecLengthSqr;\n                displacements[i].x += vecX * common;\n                displacements[i].y += vecY * common;\n            });\n        });\n    }\n    calAttractive(edges, displacements, k) {\n        edges.forEach((e) => {\n            const source = getEdgeTerminal(e, 'source');\n            const target = getEdgeTerminal(e, 'target');\n            if (!source || !target)\n                return;\n            const uIndex = this.nodeIdxMap[source];\n            const vIndex = this.nodeIdxMap[target];\n            if (uIndex === vIndex) {\n                return;\n            }\n            const u = this.nodeMap[source];\n            const v = this.nodeMap[target];\n            if (!isNumber(v.x) || !isNumber(u.x) || !isNumber(v.y) || !isNumber(u.y)) {\n                return;\n            }\n            const vecX = v.x - u.x;\n            const vecY = v.y - u.y;\n            const vecLength = Math.sqrt(vecX * vecX + vecY * vecY);\n            const common = (vecLength * vecLength) / k;\n            displacements[vIndex].x -= (vecX / vecLength) * common;\n            displacements[vIndex].y -= (vecY / vecLength) * common;\n            displacements[uIndex].x += (vecX / vecLength) * common;\n            displacements[uIndex].y += (vecY / vecLength) * common;\n        });\n    }\n    stop() {\n        if (this.timeInterval && typeof window !== \"undefined\") {\n            window.clearInterval(this.timeInterval);\n        }\n    }\n    destroy() {\n        const self = this;\n        self.stop();\n        self.tick = null;\n        self.nodes = null;\n        self.edges = null;\n        self.destroyed = true;\n    }\n    getType() {\n        return \"fruchterman\";\n    }\n}\n//# sourceMappingURL=fruchterman.js.map"]},"metadata":{},"sourceType":"module"}