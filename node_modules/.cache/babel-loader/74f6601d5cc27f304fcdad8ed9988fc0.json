{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { XFlowGraphCommands } from '@antv/xflow-core';\nimport { debounce } from 'lodash'; // 解决配置共享问题\n\nexport const globalProps = {\n  config: {}\n};\nexport const setProps = props => {\n  globalProps.config = props;\n};\nexport const getProps = key => {\n  var _a;\n\n  return (_a = globalProps.config) === null || _a === void 0 ? void 0 : _a[key];\n};\nconst graphInstance = new Map();\nconst appInstance = new Map();\nexport const setInstance = app => __awaiter(void 0, void 0, void 0, function* () {\n  const x6graph = yield app.getGraphInstance();\n  graphInstance.set('x6graph', x6graph);\n  appInstance.set('app', app);\n});\nexport const getGraphInstance = () => {\n  return graphInstance.get('x6graph');\n};\nexport const getAppInstance = () => {\n  return appInstance.get('app');\n};\nexport const getGraphData = () => __awaiter(void 0, void 0, void 0, function* () {\n  const app = getAppInstance();\n  let data;\n  yield app.executeCommand(XFlowGraphCommands.SAVE_GRAPH_DATA.id, {\n    saveGraphDataService: (graphMeta, graphData) => __awaiter(void 0, void 0, void 0, function* () {\n      data = graphData;\n    })\n  });\n  return data;\n});\n/** 更新配置时通知上传执行保存 */\n\nexport const onConfigChange = debounce(config => {\n  const configChange = getProps('onConfigChange');\n\n  if (!configChange || typeof configChange !== 'function') {\n    return;\n  }\n\n  return configChange(Object.assign({\n    data: getGraphData()\n  }, config));\n}, 300, {\n  trailing: true\n});","map":{"version":3,"sources":["../../../src/flowchart-canvas/utils/util.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAS,kBAAT,QAAmC,kBAAnC;AAEA,SAAS,QAAT,QAAyB,QAAzB,C,CAEA;;AACA,OAAO,MAAM,WAAW,GAAG;AACzB,EAAA,MAAM,EAAE;AADiB,CAApB;AAIP,OAAO,MAAM,QAAQ,GAAG,KAAK,IAAG;AAC9B,EAAA,WAAW,CAAC,MAAZ,GAAqB,KAArB;AACD,CAFM;AAGP,OAAO,MAAM,QAAQ,GAAI,GAAD,IAAgB;;;AACtC,SAAO,CAAA,EAAA,GAAA,WAAW,CAAC,MAAZ,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAG,GAAH,CAAzB;AACD,CAFM;AAIP,MAAM,aAAa,GAAG,IAAI,GAAJ,EAAtB;AACA,MAAM,WAAW,GAAG,IAAI,GAAJ,EAApB;AAEA,OAAO,MAAM,WAAW,GAAU,GAAP,IAA6B,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACtD,QAAM,OAAO,GAAG,MAAM,GAAG,CAAC,gBAAJ,EAAtB;AACA,EAAA,aAAa,CAAC,GAAd,CAAkB,SAAlB,EAA6B,OAA7B;AACA,EAAA,WAAW,CAAC,GAAZ,CAAgB,KAAhB,EAAuB,GAAvB;AACD,CAJuD,CAAjD;AAMP,OAAO,MAAM,gBAAgB,GAAG,MAAK;AACnC,SAAO,aAAa,CAAC,GAAd,CAAkB,SAAlB,CAAP;AACD,CAFM;AAIP,OAAO,MAAM,cAAc,GAAG,MAAK;AACjC,SAAO,WAAW,CAAC,GAAZ,CAAgB,KAAhB,CAAP;AACD,CAFM;AAIP,OAAO,MAAM,YAAY,GAAG,MAAW,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACrC,QAAM,GAAG,GAAG,cAAc,EAA1B;AACA,MAAI,IAAJ;AACA,QAAM,GAAG,CAAC,cAAJ,CAAmB,kBAAkB,CAAC,eAAnB,CAAmC,EAAtD,EAA0D;AAC9D,IAAA,oBAAoB,EAAE,CAAO,SAAP,EAAkB,SAAlB,KAA+B,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACnD,MAAA,IAAI,GAAG,SAAP;AACD,KAFoD;AADS,GAA1D,CAAN;AAKA,SAAO,IAAP;AACD,CATsC,CAAhC;AAWP;;AACA,OAAO,MAAM,cAAc,GAAG,QAAQ,CACpC,MAAM,IAAG;AACP,QAAM,YAAY,GAAG,QAAQ,CAAC,gBAAD,CAA7B;;AACA,MAAI,CAAC,YAAD,IAAiB,OAAO,YAAP,KAAwB,UAA7C,EAAyD;AACvD;AACD;;AACD,SAAO,YAAY,CAAA,MAAA,CAAA,MAAA,CAAA;AACjB,IAAA,IAAI,EAAE,YAAY;AADD,GAAA,EAEd,MAFc,CAAA,CAAnB;AAID,CAVmC,EAWpC,GAXoC,EAYpC;AACE,EAAA,QAAQ,EAAE;AADZ,CAZoC,CAA/B","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { XFlowGraphCommands } from '@antv/xflow-core';\nimport { debounce } from 'lodash';\n// 解决配置共享问题\nexport const globalProps = {\n    config: {},\n};\nexport const setProps = props => {\n    globalProps.config = props;\n};\nexport const getProps = (key) => {\n    var _a;\n    return (_a = globalProps.config) === null || _a === void 0 ? void 0 : _a[key];\n};\nconst graphInstance = new Map();\nconst appInstance = new Map();\nexport const setInstance = (app) => __awaiter(void 0, void 0, void 0, function* () {\n    const x6graph = yield app.getGraphInstance();\n    graphInstance.set('x6graph', x6graph);\n    appInstance.set('app', app);\n});\nexport const getGraphInstance = () => {\n    return graphInstance.get('x6graph');\n};\nexport const getAppInstance = () => {\n    return appInstance.get('app');\n};\nexport const getGraphData = () => __awaiter(void 0, void 0, void 0, function* () {\n    const app = getAppInstance();\n    let data;\n    yield app.executeCommand(XFlowGraphCommands.SAVE_GRAPH_DATA.id, {\n        saveGraphDataService: (graphMeta, graphData) => __awaiter(void 0, void 0, void 0, function* () {\n            data = graphData;\n        }),\n    });\n    return data;\n});\n/** 更新配置时通知上传执行保存 */\nexport const onConfigChange = debounce(config => {\n    const configChange = getProps('onConfigChange');\n    if (!configChange || typeof configChange !== 'function') {\n        return;\n    }\n    return configChange(Object.assign({ data: getGraphData() }, config));\n}, 300, {\n    trailing: true,\n});\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}