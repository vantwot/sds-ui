{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _dec, _class;\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport BaseNormalPass from './BaseNormalPass';\nvar ClearPass = (_dec = injectable(), _dec(_class = function (_BaseNormalPass) {\n  _inherits(ClearPass, _BaseNormalPass);\n\n  var _super = _createSuper(ClearPass);\n\n  function ClearPass() {\n    _classCallCheck(this, ClearPass);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ClearPass, [{\n    key: \"getName\",\n    value: function getName() {\n      return 'clear';\n    }\n  }, {\n    key: \"init\",\n    value: function init(layer, config) {\n      _get(_getPrototypeOf(ClearPass.prototype), \"init\", this).call(this, layer, config);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.rendererService.clear({\n        color: [0, 0, 0, 0],\n        depth: 1,\n        framebuffer: null\n      });\n    }\n  }]);\n\n  return ClearPass;\n}(BaseNormalPass)) || _class);\nexport { ClearPass as default };","map":{"version":3,"sources":["../../../../src/services/renderer/passes/ClearPass.ts"],"names":["injectable","ClearPass","BaseNormalPass","color","depth","framebuffer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,UAAA,QAAA,WAAA;AACA,OAAA,kBAAA;AAEA,OAAA,cAAA,MAAA,kBAAA;IAMqBC,S,WADpBD,UAAU,E;;;;;;;;;;;;;WAIT,SAAA,OAAA,GAAiB;AACf,aAAA,OAAA;AACD;;;WAED,SAAA,IAAA,CAAA,KAAA,EAAA,MAAA,EAAoE;AAClE,MAAA,IAAA,CAAA,eAAA,CAAA,SAAA,CAAA,SAAA,CAAA,EAAA,MAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA;AACD;;;WAED,SAAA,MAAA,GAAgB;AACd,WAAA,eAAA,CAAA,KAAA,CAA2B;AACzBG,QAAAA,KAAK,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EADkB,CAClB,CADkB;AAEzBC,QAAAA,KAAK,EAFoB,CAAA;AAGzBC,QAAAA,WAAW,EAAE;AAHY,OAA3B;AAKD;;;;EAfOH,c;SAFWD,S","sourcesContent":["import { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { ILayer } from '../../layer/ILayerService';\nimport BaseNormalPass from './BaseNormalPass';\n\n/**\n * ClearPass\n */\n@injectable()\nexport default class ClearPass<\n  InitializationOptions = {}\n> extends BaseNormalPass<InitializationOptions> {\n  public getName() {\n    return 'clear';\n  }\n\n  public init(layer: ILayer, config?: Partial<InitializationOptions>) {\n    super.init(layer, config);\n  }\n\n  public render() {\n    this.rendererService.clear({\n      color: [0, 0, 0, 0],\n      depth: 1,\n      framebuffer: null,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}