{"ast":null,"code":"import _slicedToArray from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport React from 'react';\nimport uniqBy from 'lodash/uniqBy';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { // utils\nDisposable, // context\nuseXFlowApp, // models\nMODELS, createComponentModel, // commands\nXFlowModelCommands } from '@antv/xflow-core';\nimport { TREE_ROOT_ID } from './constants';\nexport var NsNodeTreePanelModel;\n\n(function (NsNodeTreePanelModel) {\n  var _this = this;\n\n  NsNodeTreePanelModel.id = 'TREE_PANEL_MODEL';\n\n  NsNodeTreePanelModel.useModel = function (model) {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", model.awaitModel(NsNodeTreePanelModel.id));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  };\n})(NsNodeTreePanelModel || (NsNodeTreePanelModel = {}));\n/** 方便其他组件执行Command改变Panel内部状态 */\n\n\nexport var executeNodeDndTreeCommand = function executeNodeDndTreeCommand(cmds, updateModel) {\n  cmds.executeCommand(XFlowModelCommands.UPDATE_MODEL.id, {\n    getModel: function getModel(modelService) {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", NsNodeTreePanelModel.useModel(modelService));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    },\n    updateModel: updateModel\n  });\n};\nexport var useTreePanelData = function useTreePanelData(props) {\n  var treeDataService = props.treeDataService,\n      searchService = props.searchService;\n\n  var _useXFlowApp = useXFlowApp(),\n      modelService = _useXFlowApp.modelService;\n  /** 使用model */\n\n\n  var _createComponentModel = createComponentModel({\n    treeData: [],\n    searchList: [],\n    treeNodeList: [],\n    expandedKeys: [],\n    defaultExpandAll: false,\n    keyword: ''\n  }),\n      _createComponentModel2 = _slicedToArray(_createComponentModel, 3),\n      state = _createComponentModel2[0],\n      setState = _createComponentModel2[1],\n      panelModel = _createComponentModel2[2];\n  /** 注册成为全局状态，方便其他组件联动 */\n\n\n  React.useEffect(function () {\n    if (modelService.findDeferredModel(NsNodeTreePanelModel.id)) {\n      return;\n    }\n\n    modelService.registerModel({\n      id: NsNodeTreePanelModel.id,\n      modelFactory: function modelFactory() {\n        return panelModel;\n      },\n      watchChange: function watchChange(self) {\n        return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n          var graphMetaModel, fetch, graphMetaDisposable;\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return MODELS.GRAPH_META.getModel(modelService);\n\n                case 2:\n                  graphMetaModel = _context5.sent;\n\n                  //useContext(MODELS.GRAPH_META.id)\n                  fetch = function fetch(meta) {\n                    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                      var listData, _NodeList2Tree, treeData, rootNodes, currentState, expandedKeys;\n\n                      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              _context3.next = 2;\n                              return treeDataService(meta, modelService);\n\n                            case 2:\n                              listData = _context3.sent;\n                              _NodeList2Tree = NodeList2Tree(listData), treeData = _NodeList2Tree.treeData, rootNodes = _NodeList2Tree.rootNodes;\n                              _context3.next = 6;\n                              return self.getValidValue();\n\n                            case 6:\n                              currentState = _context3.sent;\n                              // 设置默认展开的keys\n                              expandedKeys = currentState.expandedKeys.length > 0 ? currentState.expandedKeys : rootNodes.map(function (i) {\n                                return i.id;\n                              });\n                              return _context3.abrupt(\"return\", {\n                                listData: listData,\n                                treeData: treeData,\n                                expandedKeys: expandedKeys\n                              });\n\n                            case 9:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, _callee3);\n                    }));\n                  };\n\n                  graphMetaDisposable = graphMetaModel.watch(function (meta) {\n                    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                      var data;\n                      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                        while (1) {\n                          switch (_context4.prev = _context4.next) {\n                            case 0:\n                              _context4.next = 2;\n                              return fetch(meta);\n\n                            case 2:\n                              data = _context4.sent;\n                              self.setValue({\n                                treeNodeList: data.listData,\n                                treeData: data.treeData,\n                                expandedKeys: data.expandedKeys,\n                                defaultExpandAll: false,\n                                keyword: '',\n                                searchList: []\n                              });\n\n                            case 4:\n                            case \"end\":\n                              return _context4.stop();\n                          }\n                        }\n                      }, _callee4);\n                    }));\n                  });\n                  return _context5.abrupt(\"return\", Disposable.create(function () {\n                    graphMetaDisposable.dispose();\n                  }));\n\n                case 6:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n      }\n    });\n    /* eslint-disable-next-line  */\n  }, []);\n  /** 折叠文件夹 */\n\n  var onFolderExpand = React.useCallback(function (expandedKeys) {\n    setState(function (modelState) {\n      modelState.expandedKeys = expandedKeys;\n    });\n  }, [setState]);\n  /** 搜索 */\n\n  var onKeywordChange = React.useCallback(function (keyword) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var list;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (searchService) {\n                _context6.next = 2;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", console.warn('searchService is not defined'));\n\n            case 2:\n              if (!keyword) {\n                _context6.next = 9;\n                break;\n              }\n\n              _context6.next = 5;\n              return searchService(state.treeNodeList, keyword);\n\n            case 5:\n              list = _context6.sent;\n              setState(function (modelState) {\n                modelState.keyword = keyword;\n                modelState.searchList = list;\n              });\n              _context6.next = 10;\n              break;\n\n            case 9:\n              setState(function (modelState) {\n                modelState.keyword = '';\n                modelState.searchList = [];\n              });\n\n            case 10:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n  }, // eslint-disable-next-line\n  [searchService, state.treeNodeList]);\n  return {\n    state: state,\n    setState: setState,\n    onKeywordChange: onKeywordChange,\n    onFolderExpand: onFolderExpand\n  };\n}; // 将list数据转换为树\n\nexport function NodeList2Tree() {\n  var treeNodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  var getGroupByIdMap = function getGroupByIdMap(list) {\n    var uniqList = uniqBy(list, 'id');\n    var groups = uniqList.reduce(function (map, node) {\n      var parentId = node.parentId || TREE_ROOT_ID;\n\n      if (!map.has(parentId)) {\n        map.set(parentId, []);\n      }\n\n      var group = map.get(parentId);\n      group.push(node);\n      return map;\n    }, new Map());\n    return groups;\n  };\n\n  var groupMap = getGroupByIdMap(cloneDeep(treeNodes));\n\n  function iterator(nodes, groupMapArgs) {\n    return nodes.map(function (node) {\n      if (groupMapArgs.has(node.id)) {\n        var children = groupMapArgs.get(node.id);\n        node.key = node.id;\n        node.isDirectory = true;\n        node.children = iterator(children, groupMapArgs) || [];\n      } else {\n        node.isLeaf = true;\n      }\n\n      return node;\n    });\n  }\n\n  var rootNodes = groupMap.get(TREE_ROOT_ID) || [];\n  var treeData = iterator(rootNodes, groupMap);\n  return {\n    treeData: treeData,\n    rootNodes: rootNodes\n  };\n}","map":{"version":3,"sources":["../../src/canvas-node-tree-panel/service.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport React from 'react';\nimport uniqBy from 'lodash/uniqBy';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { \n// utils\nDisposable, \n// context\nuseXFlowApp, \n// models\nMODELS, createComponentModel, \n// commands\nXFlowModelCommands, } from '@antv/xflow-core';\nimport { TREE_ROOT_ID } from './constants';\nexport var NsNodeTreePanelModel;\n(function (NsNodeTreePanelModel) {\n    NsNodeTreePanelModel.id = 'TREE_PANEL_MODEL';\n    NsNodeTreePanelModel.useModel = (model) => __awaiter(this, void 0, void 0, function* () {\n        return model.awaitModel(NsNodeTreePanelModel.id);\n    });\n})(NsNodeTreePanelModel || (NsNodeTreePanelModel = {}));\n/** 方便其他组件执行Command改变Panel内部状态 */\nexport const executeNodeDndTreeCommand = (cmds, updateModel) => {\n    cmds.executeCommand(XFlowModelCommands.UPDATE_MODEL.id, {\n        getModel: (modelService) => __awaiter(void 0, void 0, void 0, function* () {\n            return NsNodeTreePanelModel.useModel(modelService);\n        }),\n        updateModel: updateModel,\n    });\n};\nexport const useTreePanelData = (props) => {\n    const { treeDataService, searchService } = props;\n    const { modelService } = useXFlowApp();\n    /** 使用model */\n    const [state, setState, panelModel] = createComponentModel({\n        treeData: [],\n        searchList: [],\n        treeNodeList: [],\n        expandedKeys: [],\n        defaultExpandAll: false,\n        keyword: '',\n    });\n    /** 注册成为全局状态，方便其他组件联动 */\n    React.useEffect(() => {\n        if (modelService.findDeferredModel(NsNodeTreePanelModel.id)) {\n            return;\n        }\n        modelService.registerModel({\n            id: NsNodeTreePanelModel.id,\n            modelFactory: () => panelModel,\n            watchChange: (self) => __awaiter(void 0, void 0, void 0, function* () {\n                const graphMetaModel = yield MODELS.GRAPH_META.getModel(modelService); //useContext(MODELS.GRAPH_META.id)\n                const fetch = (meta) => __awaiter(void 0, void 0, void 0, function* () {\n                    const listData = yield treeDataService(meta, modelService);\n                    const { treeData, rootNodes } = NodeList2Tree(listData);\n                    const currentState = yield self.getValidValue();\n                    // 设置默认展开的keys\n                    const expandedKeys = currentState.expandedKeys.length > 0\n                        ? currentState.expandedKeys\n                        : rootNodes.map(i => i.id);\n                    return { listData, treeData, expandedKeys };\n                });\n                const graphMetaDisposable = graphMetaModel.watch((meta) => __awaiter(void 0, void 0, void 0, function* () {\n                    const data = yield fetch(meta);\n                    self.setValue({\n                        treeNodeList: data.listData,\n                        treeData: data.treeData,\n                        expandedKeys: data.expandedKeys,\n                        defaultExpandAll: false,\n                        keyword: '',\n                        searchList: [],\n                    });\n                }));\n                return Disposable.create(() => {\n                    graphMetaDisposable.dispose();\n                });\n            }),\n        });\n        /* eslint-disable-next-line  */\n    }, []);\n    /** 折叠文件夹 */\n    const onFolderExpand = React.useCallback((expandedKeys) => {\n        setState(modelState => {\n            modelState.expandedKeys = expandedKeys;\n        });\n    }, [setState]);\n    /** 搜索 */\n    const onKeywordChange = React.useCallback((keyword) => __awaiter(void 0, void 0, void 0, function* () {\n        if (!searchService) {\n            return console.warn('searchService is not defined');\n        }\n        if (keyword) {\n            const list = yield searchService(state.treeNodeList, keyword);\n            setState(modelState => {\n                modelState.keyword = keyword;\n                modelState.searchList = list;\n            });\n        }\n        else {\n            setState(modelState => {\n                modelState.keyword = '';\n                modelState.searchList = [];\n            });\n        }\n    }), \n    // eslint-disable-next-line\n    [searchService, state.treeNodeList]);\n    return {\n        state,\n        setState,\n        onKeywordChange,\n        onFolderExpand,\n    };\n};\n// 将list数据转换为树\nexport function NodeList2Tree(treeNodes = []) {\n    const getGroupByIdMap = (list) => {\n        const uniqList = uniqBy(list, 'id');\n        const groups = uniqList.reduce((map, node) => {\n            const parentId = node.parentId || TREE_ROOT_ID;\n            if (!map.has(parentId)) {\n                map.set(parentId, []);\n            }\n            const group = map.get(parentId);\n            group.push(node);\n            return map;\n        }, new Map());\n        return groups;\n    };\n    const groupMap = getGroupByIdMap(cloneDeep(treeNodes));\n    function iterator(nodes, groupMapArgs) {\n        return nodes.map(node => {\n            if (groupMapArgs.has(node.id)) {\n                const children = groupMapArgs.get(node.id);\n                node.key = node.id;\n                node.isDirectory = true;\n                node.children = iterator(children, groupMapArgs) || [];\n            }\n            else {\n                node.isLeaf = true;\n            }\n            return node;\n        });\n    }\n    const rootNodes = groupMap.get(TREE_ROOT_ID) || [];\n    const treeData = iterator(rootNodes, groupMap);\n    return { treeData, rootNodes };\n}\n//# sourceMappingURL=service.js.map"]},"metadata":{},"sourceType":"module"}