{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport React from 'react';\nimport { createComponentModel, Disposable, MODELS, useXFlowApp } from '@antv/xflow-core';\nimport { nodeService } from './utils';\nexport var NsPanelData;\n\n(function (NsPanelData) {\n  NsPanelData.id = 'NODE_PANEL_DATA';\n})(NsPanelData || (NsPanelData = {}));\n/** 节点查找 */\n\n\nconst DefaultsearchService = function () {\n  let nodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let keyword = arguments.length > 1 ? arguments[1] : undefined;\n  return __awaiter(void 0, void 0, void 0, function* () {\n    const list = nodeList.filter(i => {\n      var _a, _b;\n\n      return i.isDirectory || ((_a = i.label) === null || _a === void 0 ? void 0 : _a.includes(keyword)) || ((_b = i.name) === null || _b === void 0 ? void 0 : _b.includes(keyword));\n    });\n    return list;\n  });\n};\n\nexport const usePanelData = props => {\n  const {\n    registerNode,\n    searchService = DefaultsearchService\n  } = props;\n  const {\n    nodes\n  } = registerNode !== null && registerNode !== void 0 ? registerNode : {};\n  const {\n    modelService\n  } = useXFlowApp();\n  /** 使用model */\n\n  const [state, setState, panelModel] = createComponentModel({\n    searchList: [],\n    nodeList: [],\n    defaultExpandAll: false,\n    keyword: ''\n  });\n  /** 注册成为全局状态，方便其他组件联动 */\n\n  React.useEffect(() => {\n    if (modelService.findDeferredModel(NsPanelData.id)) {\n      return;\n    }\n\n    modelService.registerModel({\n      id: NsPanelData.id,\n      modelFactory: () => panelModel,\n      watchChange: self => __awaiter(void 0, void 0, void 0, function* () {\n        const graphMetaModel = yield MODELS.GRAPH_META.getModel(modelService); //useContext(MODELS.GRAPH_META.id)\n\n        const fetch = () => __awaiter(void 0, void 0, void 0, function* () {\n          const listData = yield nodeService(nodes);\n          return {\n            listData\n          };\n        });\n\n        const graphMetaDisposable = graphMetaModel.watch(() => __awaiter(void 0, void 0, void 0, function* () {\n          const data = yield fetch();\n          self.setValue({\n            nodeList: data.listData,\n            defaultExpandAll: false,\n            keyword: '',\n            searchList: []\n          });\n        }));\n        return Disposable.create(() => {\n          graphMetaDisposable.dispose();\n        });\n      })\n    });\n    /* eslint-disable-next-line  */\n  }, []);\n  /** 搜索 */\n\n  const onKeywordChange = React.useCallback(keyword => __awaiter(void 0, void 0, void 0, function* () {\n    if (!searchService) {\n      return;\n    }\n\n    if (keyword) {\n      // @ts-ignore\n      const list = yield searchService(state.nodeList, keyword);\n      setState(modelState => {\n        modelState.keyword = keyword;\n        modelState.searchList = list;\n      });\n    } else {\n      setState(modelState => {\n        modelState.keyword = '';\n        modelState.searchList = [];\n      });\n    }\n  }), [searchService, state.nodeList, setState]);\n  return {\n    state,\n    setState,\n    onKeywordChange\n  };\n};","map":{"version":3,"sources":["../../src/flowchart-node-panel/service.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport React from 'react';\nimport { createComponentModel, Disposable, MODELS, useXFlowApp } from '@antv/xflow-core';\nimport { nodeService } from './utils';\nexport var NsPanelData;\n(function (NsPanelData) {\n    NsPanelData.id = 'NODE_PANEL_DATA';\n})(NsPanelData || (NsPanelData = {}));\n/** 节点查找 */\nconst DefaultsearchService = (nodeList = [], keyword) => __awaiter(void 0, void 0, void 0, function* () {\n    const list = nodeList.filter(i => { var _a, _b; return i.isDirectory || ((_a = i.label) === null || _a === void 0 ? void 0 : _a.includes(keyword)) || ((_b = i.name) === null || _b === void 0 ? void 0 : _b.includes(keyword)); });\n    return list;\n});\nexport const usePanelData = (props) => {\n    const { registerNode, searchService = DefaultsearchService } = props;\n    const { nodes } = registerNode !== null && registerNode !== void 0 ? registerNode : {};\n    const { modelService } = useXFlowApp();\n    /** 使用model */\n    const [state, setState, panelModel] = createComponentModel({\n        searchList: [],\n        nodeList: [],\n        defaultExpandAll: false,\n        keyword: '',\n    });\n    /** 注册成为全局状态，方便其他组件联动 */\n    React.useEffect(() => {\n        if (modelService.findDeferredModel(NsPanelData.id)) {\n            return;\n        }\n        modelService.registerModel({\n            id: NsPanelData.id,\n            modelFactory: () => panelModel,\n            watchChange: (self) => __awaiter(void 0, void 0, void 0, function* () {\n                const graphMetaModel = yield MODELS.GRAPH_META.getModel(modelService); //useContext(MODELS.GRAPH_META.id)\n                const fetch = () => __awaiter(void 0, void 0, void 0, function* () {\n                    const listData = yield nodeService(nodes);\n                    return { listData };\n                });\n                const graphMetaDisposable = graphMetaModel.watch(() => __awaiter(void 0, void 0, void 0, function* () {\n                    const data = yield fetch();\n                    self.setValue({\n                        nodeList: data.listData,\n                        defaultExpandAll: false,\n                        keyword: '',\n                        searchList: [],\n                    });\n                }));\n                return Disposable.create(() => {\n                    graphMetaDisposable.dispose();\n                });\n            }),\n        });\n        /* eslint-disable-next-line  */\n    }, []);\n    /** 搜索 */\n    const onKeywordChange = React.useCallback((keyword) => __awaiter(void 0, void 0, void 0, function* () {\n        if (!searchService) {\n            return;\n        }\n        if (keyword) {\n            // @ts-ignore\n            const list = yield searchService(state.nodeList, keyword);\n            setState(modelState => {\n                modelState.keyword = keyword;\n                modelState.searchList = list;\n            });\n        }\n        else {\n            setState(modelState => {\n                modelState.keyword = '';\n                modelState.searchList = [];\n            });\n        }\n    }), [searchService, state.nodeList, setState]);\n    return {\n        state,\n        setState,\n        onKeywordChange,\n    };\n};\n//# sourceMappingURL=service.js.map"]},"metadata":{},"sourceType":"module"}