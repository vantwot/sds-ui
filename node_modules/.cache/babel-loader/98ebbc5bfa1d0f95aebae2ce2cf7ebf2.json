{"ast":null,"code":"import _defineProperty from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Platform, StringExt, ObjectExt, Dom } from '../../util';\nimport { Node } from '../../model';\nimport { NodeView } from '../../view';\nimport { getName } from './util';\nvar contentSelector = '.text-block-content';\nvar registryName = getName('text-block');\nexport var TextBlock = /*#__PURE__*/function (_Node) {\n  _inherits(TextBlock, _Node);\n\n  var _super = _createSuper(TextBlock);\n\n  function TextBlock() {\n    _classCallCheck(this, TextBlock);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TextBlock, [{\n    key: \"content\",\n    get: function get() {\n      return this.getContent();\n    },\n    set: function set(val) {\n      this.setContent(val);\n    }\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      return this.store.get('content', '');\n    }\n  }, {\n    key: \"setContent\",\n    value: function setContent(content) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.store.set('content', content, options);\n    }\n  }, {\n    key: \"setup\",\n    value: function setup() {\n      var _this = this;\n\n      _get(_getPrototypeOf(TextBlock.prototype), \"setup\", this).call(this);\n\n      this.store.on('change:*', function (metadata) {\n        var key = metadata.key;\n\n        if (key === 'content') {\n          _this.updateContent(_this.getContent());\n        } else if (key === 'size') {\n          _this.updateSize(_this.getSize());\n        }\n      });\n      this.updateSize(this.getSize());\n      this.updateContent(this.getContent());\n    }\n  }, {\n    key: \"updateSize\",\n    value: function updateSize(size) {\n      if (Platform.SUPPORT_FOREIGNOBJECT) {\n        this.setAttrs(_defineProperty({\n          foreignObject: Object.assign({}, size)\n        }, contentSelector, {\n          style: Object.assign({}, size)\n        }));\n      }\n    }\n  }, {\n    key: \"updateContent\",\n    value: function updateContent(content) {\n      if (Platform.SUPPORT_FOREIGNOBJECT) {\n        this.setAttrs(_defineProperty({}, contentSelector, {\n          html: content ? StringExt.sanitizeHTML(content) : ''\n        }));\n      } else {\n        this.setAttrs(_defineProperty({}, contentSelector, {\n          text: content\n        }));\n      }\n    }\n  }]);\n\n  return TextBlock;\n}(Node);\n\n(function (TextBlock) {\n  TextBlock.config({\n    type: registryName,\n    view: registryName,\n    markup: ['<g class=\"rotatable\">', '<g class=\"scalable\"><rect/></g>', Platform.SUPPORT_FOREIGNOBJECT ? [\"<foreignObject>\", \"<body xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\", \"<div class=\\\"\".concat(contentSelector.substr(1), \"\\\" />\"), \"</body>\", \"</foreignObject>\"].join('') : \"<text class=\\\"\".concat(contentSelector.substr(1), \"\\\"/>\"), '</g>'].join(''),\n    attrs: _defineProperty({\n      '.': {\n        fill: '#ffffff',\n        stroke: 'none'\n      },\n      rect: {\n        fill: '#ffffff',\n        stroke: '#000000',\n        width: 80,\n        height: 100\n      },\n      text: {\n        fill: '#000000',\n        fontSize: 14,\n        fontFamily: 'Arial, helvetica, sans-serif'\n      },\n      body: {\n        style: {\n          background: 'transparent',\n          position: 'static',\n          margin: 0,\n          padding: 0\n        }\n      },\n      foreignObject: {\n        style: {\n          overflow: 'hidden'\n        }\n      }\n    }, contentSelector, {\n      refX: 0.5,\n      refY: 0.5,\n      yAlign: 'middle',\n      xAlign: 'middle',\n      style: {\n        textAlign: 'center',\n        verticalAlign: 'middle',\n        display: 'table-cell',\n        padding: '0 5px',\n        margin: 0\n      }\n    })\n  });\n  Node.registry.register(registryName, TextBlock);\n})(TextBlock || (TextBlock = {}));\n\n(function (TextBlock) {\n  var contentAction = 'content';\n\n  var View = /*#__PURE__*/function (_NodeView) {\n    _inherits(View, _NodeView);\n\n    var _super2 = _createSuper(View);\n\n    function View() {\n      _classCallCheck(this, View);\n\n      return _super2.apply(this, arguments);\n    }\n\n    _createClass(View, [{\n      key: \"confirmUpdate\",\n      value: function confirmUpdate(flag) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var ret = _get(_getPrototypeOf(View.prototype), \"confirmUpdate\", this).call(this, flag, options);\n\n        if (this.hasAction(ret, contentAction)) {\n          this.updateContent();\n          ret = this.removeAction(ret, contentAction);\n        }\n\n        return ret;\n      }\n    }, {\n      key: \"update\",\n      value: function update(partialAttrs) {\n        if (Platform.SUPPORT_FOREIGNOBJECT) {\n          _get(_getPrototypeOf(View.prototype), \"update\", this).call(this, partialAttrs);\n        } else {\n          var node = this.cell;\n          var attrs = Object.assign({}, partialAttrs || node.getAttrs());\n          delete attrs[contentSelector];\n\n          _get(_getPrototypeOf(View.prototype), \"update\", this).call(this, attrs);\n\n          if (!partialAttrs || ObjectExt.has(partialAttrs, contentSelector)) {\n            this.updateContent(partialAttrs);\n          }\n        }\n      }\n    }, {\n      key: \"updateContent\",\n      value: function updateContent(partialAttrs) {\n        if (Platform.SUPPORT_FOREIGNOBJECT) {\n          _get(_getPrototypeOf(View.prototype), \"update\", this).call(this, partialAttrs);\n        } else {\n          var node = this.cell;\n          var textAttrs = (partialAttrs || node.getAttrs())[contentSelector]; // Break the text to fit the node size taking into\n          // account the attributes set on the node.\n\n          var text = Dom.breakText(node.getContent(), node.getSize(), textAttrs, {\n            svgDocument: this.graph.view.svg\n          });\n\n          var attrs = _defineProperty({}, contentSelector, ObjectExt.merge({}, textAttrs, {\n            text: text\n          }));\n\n          _get(_getPrototypeOf(View.prototype), \"update\", this).call(this, attrs);\n        }\n      }\n    }]);\n\n    return View;\n  }(NodeView);\n\n  TextBlock.View = View;\n\n  (function (View) {\n    View.config({\n      bootstrap: ['render', contentAction],\n      actions: Platform.SUPPORT_FOREIGNOBJECT ? {} : {\n        size: contentAction,\n        content: contentAction\n      }\n    });\n    NodeView.registry.register(registryName, View);\n  })(View = TextBlock.View || (TextBlock.View = {}));\n})(TextBlock || (TextBlock = {}));","map":{"version":3,"sources":["../../../src/shape/basic/text-block.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Platform, StringExt, ObjectExt, Dom } from '../../util';\nimport { Node } from '../../model';\nimport { NodeView } from '../../view';\nimport { getName } from './util';\nconst contentSelector = '.text-block-content';\nconst registryName = getName('text-block');\nexport class TextBlock extends Node {\n    get content() {\n        return this.getContent();\n    }\n    set content(val) {\n        this.setContent(val);\n    }\n    getContent() {\n        return this.store.get('content', '');\n    }\n    setContent(content, options = {}) {\n        this.store.set('content', content, options);\n    }\n    setup() {\n        super.setup();\n        this.store.on('change:*', (metadata) => {\n            const key = metadata.key;\n            if (key === 'content') {\n                this.updateContent(this.getContent());\n            }\n            else if (key === 'size') {\n                this.updateSize(this.getSize());\n            }\n        });\n        this.updateSize(this.getSize());\n        this.updateContent(this.getContent());\n    }\n    updateSize(size) {\n        if (Platform.SUPPORT_FOREIGNOBJECT) {\n            this.setAttrs({\n                foreignObject: Object.assign({}, size),\n                [contentSelector]: {\n                    style: Object.assign({}, size),\n                },\n            });\n        }\n    }\n    updateContent(content) {\n        if (Platform.SUPPORT_FOREIGNOBJECT) {\n            this.setAttrs({\n                [contentSelector]: {\n                    html: content ? StringExt.sanitizeHTML(content) : '',\n                },\n            });\n        }\n        else {\n            this.setAttrs({\n                [contentSelector]: {\n                    text: content,\n                },\n            });\n        }\n    }\n}\n(function (TextBlock) {\n    TextBlock.config({\n        type: registryName,\n        view: registryName,\n        markup: [\n            '<g class=\"rotatable\">',\n            '<g class=\"scalable\"><rect/></g>',\n            Platform.SUPPORT_FOREIGNOBJECT\n                ? [\n                    `<foreignObject>`,\n                    `<body xmlns=\"http://www.w3.org/1999/xhtml\">`,\n                    `<div class=\"${contentSelector.substr(1)}\" />`,\n                    `</body>`,\n                    `</foreignObject>`,\n                ].join('')\n                : `<text class=\"${contentSelector.substr(1)}\"/>`,\n            '</g>',\n        ].join(''),\n        attrs: {\n            '.': {\n                fill: '#ffffff',\n                stroke: 'none',\n            },\n            rect: {\n                fill: '#ffffff',\n                stroke: '#000000',\n                width: 80,\n                height: 100,\n            },\n            text: {\n                fill: '#000000',\n                fontSize: 14,\n                fontFamily: 'Arial, helvetica, sans-serif',\n            },\n            body: {\n                style: {\n                    background: 'transparent',\n                    position: 'static',\n                    margin: 0,\n                    padding: 0,\n                },\n            },\n            foreignObject: {\n                style: {\n                    overflow: 'hidden',\n                },\n            },\n            [contentSelector]: {\n                refX: 0.5,\n                refY: 0.5,\n                yAlign: 'middle',\n                xAlign: 'middle',\n                style: {\n                    textAlign: 'center',\n                    verticalAlign: 'middle',\n                    display: 'table-cell',\n                    padding: '0 5px',\n                    margin: 0,\n                },\n            },\n        },\n    });\n    Node.registry.register(registryName, TextBlock);\n})(TextBlock || (TextBlock = {}));\n(function (TextBlock) {\n    const contentAction = 'content';\n    class View extends NodeView {\n        confirmUpdate(flag, options = {}) {\n            let ret = super.confirmUpdate(flag, options);\n            if (this.hasAction(ret, contentAction)) {\n                this.updateContent();\n                ret = this.removeAction(ret, contentAction);\n            }\n            return ret;\n        }\n        update(partialAttrs) {\n            if (Platform.SUPPORT_FOREIGNOBJECT) {\n                super.update(partialAttrs);\n            }\n            else {\n                const node = this.cell;\n                const attrs = Object.assign({}, (partialAttrs || node.getAttrs()));\n                delete attrs[contentSelector];\n                super.update(attrs);\n                if (!partialAttrs || ObjectExt.has(partialAttrs, contentSelector)) {\n                    this.updateContent(partialAttrs);\n                }\n            }\n        }\n        updateContent(partialAttrs) {\n            if (Platform.SUPPORT_FOREIGNOBJECT) {\n                super.update(partialAttrs);\n            }\n            else {\n                const node = this.cell;\n                const textAttrs = (partialAttrs || node.getAttrs())[contentSelector];\n                // Break the text to fit the node size taking into\n                // account the attributes set on the node.\n                const text = Dom.breakText(node.getContent(), node.getSize(), textAttrs, {\n                    svgDocument: this.graph.view.svg,\n                });\n                const attrs = {\n                    [contentSelector]: ObjectExt.merge({}, textAttrs, { text }),\n                };\n                super.update(attrs);\n            }\n        }\n    }\n    TextBlock.View = View;\n    (function (View) {\n        View.config({\n            bootstrap: ['render', contentAction],\n            actions: Platform.SUPPORT_FOREIGNOBJECT\n                ? {}\n                : {\n                    size: contentAction,\n                    content: contentAction,\n                },\n        });\n        NodeView.registry.register(registryName, View);\n    })(View = TextBlock.View || (TextBlock.View = {}));\n})(TextBlock || (TextBlock = {}));\n//# sourceMappingURL=text-block.js.map"]},"metadata":{},"sourceType":"module"}