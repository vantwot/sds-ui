{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _isNumber from \"lodash/isNumber\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport BaseModel from '../../core/BaseModel';\nimport { PointImageTriangulation } from '../../core/triangulation';\nvar pointImageFrag = \"\\nuniform sampler2D u_texture;\\nvarying vec4 v_color;\\nvarying vec2 v_uv;\\nuniform vec2 u_textSize;\\nuniform float u_opacity : 1;\\n\\nvarying mat4 styleMappingMat; // \\u4F20\\u9012\\u4ECE\\u7247\\u5143\\u4E2D\\u4F20\\u9012\\u7684\\u6620\\u5C04\\u6570\\u636E\\n\\n#pragma include \\\"picking\\\"\\nvoid main(){\\n      float opacity = styleMappingMat[0][0];\\n      vec2 pos= v_uv / u_textSize + gl_PointCoord / u_textSize * 64.;\\n      vec4 textureColor=texture2D(u_texture,pos);\\n      if(all(lessThan(v_color, vec4(1.0+0.00001))) && all(greaterThan(v_color, vec4(1.0-0.00001))) || v_color==vec4(1.0)){\\n            gl_FragColor= textureColor;\\n      }else {\\n            gl_FragColor= step(0.01, textureColor.z) * v_color;\\n      }\\n      // gl_FragColor.a =gl_FragColor.a * u_opacity;\\n      gl_FragColor.a =gl_FragColor.a * opacity;\\n      gl_FragColor = filterColor(gl_FragColor);\\n}\\n\";\nvar pointImageVert = \"precision highp float;\\nattribute vec3 a_Position;\\nattribute vec4 a_Color;\\nattribute vec2 a_Uv;\\nattribute float a_Size;\\nvarying vec4 v_color;\\nvarying vec2 v_uv;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\nuniform float u_stroke_width : 1;\\nuniform vec2 u_offsets;\\n\\nuniform float u_opacity : 1;\\n\\nvarying mat4 styleMappingMat; // \\u7528\\u4E8E\\u5C06\\u5728\\u9876\\u70B9\\u7740\\u8272\\u5668\\u4E2D\\u8BA1\\u7B97\\u597D\\u7684\\u6837\\u5F0F\\u503C\\u4F20\\u9012\\u7ED9\\u7247\\u5143\\n\\n#pragma include \\\"styleMapping\\\"\\n#pragma include \\\"styleMappingCalOpacity\\\"\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n  styleMappingMat = mat4(\\n    0.0, 0.0, 0.0, 0.0, // opacity - strokeOpacity - strokeWidth - empty\\n    0.0, 0.0, 0.0, 0.0, // strokeR - strokeG - strokeB - strokeA\\n    0.0, 0.0, 0.0, 0.0, // offsets[0] - offsets[1]\\n    0.0, 0.0, 0.0, 0.0\\n  );\\n\\n  float rowCount = u_cellTypeLayout[0][0];    // \\u5F53\\u524D\\u7684\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u884C\\n  float columnCount = u_cellTypeLayout[0][1]; // \\u5F53\\u770B\\u5230\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u5217\\n  float columnWidth = 1.0/columnCount;  // \\u5217\\u5BBD\\n  float rowHeight = 1.0/rowCount;       // \\u884C\\u9AD8\\n  float cellCount = calCellCount(); // opacity - strokeOpacity - strokeWidth - stroke - offsets\\n  float id = a_vertexId; // \\u7B2Cn\\u4E2A\\u9876\\u70B9\\n  float cellCurrentRow = floor(id * cellCount / columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u884C\\n  float cellCurrentColumn = mod(id * cellCount, columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u5217\\n  \\n  // cell \\u56FA\\u5B9A\\u987A\\u5E8F opacity -> strokeOpacity -> strokeWidth -> stroke ... \\n  // \\u6309\\u987A\\u5E8F\\u4ECE cell \\u4E2D\\u53D6\\u503C\\u3001\\u82E5\\u6CA1\\u6709\\u5219\\u81EA\\u52A8\\u5F80\\u4E0B\\u53D6\\u503C\\n  float textureOffset = 0.0; // \\u5728 cell \\u4E2D\\u53D6\\u503C\\u7684\\u504F\\u79FB\\u91CF\\n\\n  vec2 opacityAndOffset = calOpacityAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\\n  styleMappingMat[0][0] = opacityAndOffset.r;\\n  textureOffset = opacityAndOffset.g;\\n\\n  vec2 textrueOffsets = vec2(0.0, 0.0);\\n  if(hasOffsets()) {\\n    vec2 valueXPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    textrueOffsets.r = pos2value(valueXPos, columnWidth, rowHeight); // x\\n    textureOffset += 1.0;\\n\\n    vec2 valueYPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    textrueOffsets.g = pos2value(valueYPos, columnWidth, rowHeight); // x\\n    textureOffset += 1.0;\\n  } else {\\n    textrueOffsets = u_offsets;\\n  }\\n\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n   v_color = a_Color;\\n   v_uv = a_Uv;\\n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\\n   \\n  //  vec2 offset = project_pixel(u_offsets);\\n  vec2 offset = project_pixel(textrueOffsets);\\n\\n  //  gl_Position = project_common_position_to_clipspace(vec4(vec2(project_pos.xy + offset),project_pos.z, 1.0));\\n\\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n      gl_Position = u_Mvp * vec4(vec2(project_pos.xy + offset),project_pos.z, 1.0);\\n    } else {\\n      gl_Position = project_common_position_to_clipspace(vec4(vec2(project_pos.xy + offset),project_pos.z, 1.0));\\n    }\\n   gl_PointSize = a_Size * 2.0 * u_DevicePixelRatio;\\n\\n  setPickingColor(a_PickingColor);\\n\\n}\\n\";\n\nvar ImageModel = function (_BaseModel) {\n  _inherits(ImageModel, _BaseModel);\n\n  var _super = _createSuper(ImageModel);\n\n  function ImageModel() {\n    var _this;\n\n    _classCallCheck(this, ImageModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"texture\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"updateTexture\", function () {\n      var createTexture2D = _this.rendererService.createTexture2D;\n\n      if (_this.texture) {\n        _this.texture.update({\n          data: _this.iconService.getCanvas()\n        });\n\n        _this.layer.renderLayers();\n\n        return;\n      }\n\n      _this.texture = createTexture2D({\n        data: _this.iconService.getCanvas(),\n        mag: gl.LINEAR,\n        min: gl.LINEAR,\n        premultiplyAlpha: false,\n        width: 1024,\n        height: _this.iconService.canvasHeight || 128\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ImageModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          opacity = _ref.opacity,\n          _ref$offsets = _ref.offsets,\n          offsets = _ref$offsets === void 0 ? [0, 0] : _ref$offsets;\n\n      if (this.rendererService.getDirty()) {\n        this.texture.bind();\n      }\n\n      if (this.dataTextureTest && this.dataTextureNeedUpdate({\n        opacity: opacity,\n        offsets: offsets\n      })) {\n        this.judgeStyleAttributes({\n          opacity: opacity,\n          offsets: offsets\n        });\n        var encodeData = this.layer.getEncodedData();\n\n        var _this$calDataFrame = this.calDataFrame(this.cellLength, encodeData, this.cellProperties),\n            data = _this$calDataFrame.data,\n            width = _this$calDataFrame.width,\n            height = _this$calDataFrame.height;\n\n        this.rowCount = height;\n        this.dataTexture = this.cellLength > 0 && data.length > 0 ? this.createTexture2D({\n          flipY: true,\n          data: data,\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: width,\n          height: height\n        }) : this.createTexture2D({\n          flipY: true,\n          data: [1],\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: 1,\n          height: 1\n        });\n      }\n\n      return {\n        u_dataTexture: this.dataTexture,\n        u_cellTypeLayout: this.getCellTypeLayout(),\n        u_texture: this.texture,\n        u_textSize: [1024, this.iconService.canvasHeight || 128],\n        u_opacity: _isNumber(opacity) ? opacity : 1.0,\n        u_offsets: this.isOffsetStatic(offsets) ? offsets : [0, 0]\n      };\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      this.registerBuiltinAttributes();\n      this.updateTexture();\n      this.iconService.on('imageUpdate', this.updateTexture);\n      return this.buildModels();\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$texture, _this$dataTexture;\n\n      (_this$texture = this.texture) === null || _this$texture === void 0 ? void 0 : _this$texture.destroy();\n      (_this$dataTexture = this.dataTexture) === null || _this$dataTexture === void 0 ? void 0 : _this$dataTexture.destroy();\n      this.iconService.off('imageUpdate', this.updateTexture);\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      return [this.layer.buildLayerModel({\n        moduleName: 'pointImage',\n        vertexShader: pointImageVert,\n        fragmentShader: pointImageFrag,\n        triangulation: PointImageTriangulation,\n        primitive: gl.POINTS,\n        depth: {\n          enable: false\n        },\n        blend: this.getBlend()\n      })];\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      var _this2 = this;\n\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var _feature$size = feature.size,\n                size = _feature$size === void 0 ? 5 : _feature$size;\n            return Array.isArray(size) ? [size[0]] : [size];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Uv',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var iconMap = _this2.iconService.getIconMap();\n\n            var shape = feature.shape;\n\n            var _ref2 = iconMap[shape] || {\n              x: 0,\n              y: 0\n            },\n                x = _ref2.x,\n                y = _ref2.y;\n\n            return [x, y];\n          }\n        }\n      });\n    }\n  }]);\n\n  return ImageModel;\n}(BaseModel);\n\nexport { ImageModel as default };","map":{"version":3,"sources":["../../../src/point/models/image.ts"],"names":["ImageModel","BaseModel","opacity","offsets","encodeData","data","width","height","flipY","format","gl","type","u_dataTexture","u_cellTypeLayout","u_texture","u_textSize","u_opacity","u_offsets","moduleName","vertexShader","fragmentShader","triangulation","primitive","depth","enable","blend","name","AttributeType","descriptor","buffer","usage","FLOAT","size","update","feature","Array","iconMap","shape","x","y","createTexture2D","mag","min","premultiplyAlpha"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  ILayer,\n  IModel,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\nimport { isNumber } from 'lodash';\nimport BaseModel, { styleOffset, styleSingle } from '../../core/BaseModel';\nimport { PointImageTriangulation } from '../../core/triangulation';\nimport pointImageFrag from '../shaders/image_frag.glsl';\nimport pointImageVert from '../shaders/image_vert.glsl';\ninterface IImageLayerStyleOptions {\n  opacity: styleSingle;\n  offsets: styleOffset;\n}\nexport default class ImageModel extends BaseModel {\n  private texture: ITexture2D;\n\n  public getUninforms(): IModelUniform {\n    const {\n      opacity,\n      offsets = [0, 0],\n    } = this.layer.getLayerConfig() as IImageLayerStyleOptions;\n    if (this.rendererService.getDirty()) {\n      this.texture.bind();\n    }\n\n    if (\n      this.dataTextureTest &&\n      this.dataTextureNeedUpdate({\n        opacity,\n        offsets,\n      })\n    ) {\n      this.judgeStyleAttributes({\n        opacity,\n        offsets,\n      });\n      const encodeData = this.layer.getEncodedData();\n      const { data, width, height } = this.calDataFrame(\n        this.cellLength,\n        encodeData,\n        this.cellProperties,\n      );\n      this.rowCount = height; // 当前数据纹理有多少行\n\n      this.dataTexture =\n        this.cellLength > 0 && data.length > 0\n          ? this.createTexture2D({\n              flipY: true,\n              data,\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width,\n              height,\n            })\n          : this.createTexture2D({\n              flipY: true,\n              data: [1],\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width: 1,\n              height: 1,\n            });\n    }\n    return {\n      u_dataTexture: this.dataTexture, // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]\n      u_cellTypeLayout: this.getCellTypeLayout(),\n\n      u_texture: this.texture,\n      u_textSize: [1024, this.iconService.canvasHeight || 128],\n      // u_opacity: opacity || 1.0,\n      // u_offsets: [-offsets[0], offsets[1]],\n      u_opacity: isNumber(opacity) ? opacity : 1.0,\n      u_offsets: this.isOffsetStatic(offsets)\n        ? (offsets as [number, number])\n        : [0, 0],\n    };\n  }\n\n  public initModels(): IModel[] {\n    this.registerBuiltinAttributes();\n    this.updateTexture();\n    this.iconService.on('imageUpdate', this.updateTexture);\n    return this.buildModels();\n  }\n\n  public clearModels() {\n    this.texture?.destroy();\n    this.dataTexture?.destroy();\n    this.iconService.off('imageUpdate', this.updateTexture);\n  }\n\n  public buildModels(): IModel[] {\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'pointImage',\n        vertexShader: pointImageVert,\n        fragmentShader: pointImageFrag,\n        triangulation: PointImageTriangulation,\n        primitive: gl.POINTS,\n        depth: { enable: false },\n        blend: this.getBlend(),\n      }),\n    ];\n  }\n  protected registerBuiltinAttributes() {\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 5 } = feature;\n          return Array.isArray(size) ? [size[0]] : [size as number];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const iconMap = this.iconService.getIconMap();\n          const { shape } = feature;\n          const { x, y } = iconMap[shape as string] || { x: 0, y: 0 };\n          return [x, y];\n        },\n      },\n    });\n  }\n\n  private updateTexture = () => {\n    const { createTexture2D } = this.rendererService;\n    if (this.texture) {\n      this.texture.update({\n        data: this.iconService.getCanvas(),\n      });\n      // this.layer.render();\n      // TODO: 更新完纹理后在更新的图层的时候需要更新所有的图层\n      this.layer.renderLayers();\n      return;\n    }\n    this.texture = createTexture2D({\n      data: this.iconService.getCanvas(),\n      mag: gl.LINEAR,\n      min: gl.LINEAR,\n      premultiplyAlpha: false,\n      width: 1024,\n      height: this.iconService.canvasHeight || 128,\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}