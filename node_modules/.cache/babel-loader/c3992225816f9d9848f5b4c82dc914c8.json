{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uniqueId = exports.getEdgesByNodeId = exports.getOutEdgesNodeId = exports.getNeighbors = void 0;\n/**\n * 获取指定节点的所有邻居\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n * @param type 邻居类型\n */\n\nvar getNeighbors = function getNeighbors(nodeId, edges, type) {\n  if (edges === void 0) {\n    edges = [];\n  }\n\n  var currentEdges = edges.filter(function (edge) {\n    return edge.source === nodeId || edge.target === nodeId;\n  });\n\n  if (type === 'target') {\n    // 当前节点为 source，它所指向的目标节点\n    var neighhborsConverter_1 = function neighhborsConverter_1(edge) {\n      return edge.source === nodeId;\n    };\n\n    return currentEdges.filter(neighhborsConverter_1).map(function (edge) {\n      return edge.target;\n    });\n  }\n\n  if (type === 'source') {\n    // 当前节点为 target，它所指向的源节点\n    var neighhborsConverter_2 = function neighhborsConverter_2(edge) {\n      return edge.target === nodeId;\n    };\n\n    return currentEdges.filter(neighhborsConverter_2).map(function (edge) {\n      return edge.source;\n    });\n  } // 若未指定 type ，则返回所有邻居\n\n\n  var neighhborsConverter = function neighhborsConverter(edge) {\n    return edge.source === nodeId ? edge.target : edge.source;\n  };\n\n  return currentEdges.map(neighhborsConverter);\n};\n/**\n * 获取指定节点的出边\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n */\n\n\nexports.getNeighbors = getNeighbors;\n\nvar getOutEdgesNodeId = function getOutEdgesNodeId(nodeId, edges) {\n  return edges.filter(function (edge) {\n    return edge.source === nodeId;\n  });\n};\n/**\n * 获取指定节点的边，包括出边和入边\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n */\n\n\nexports.getOutEdgesNodeId = getOutEdgesNodeId;\n\nvar getEdgesByNodeId = function getEdgesByNodeId(nodeId, edges) {\n  return edges.filter(function (edge) {\n    return edge.source === nodeId || edge.target === nodeId;\n  });\n};\n/**\n * 生成唯一的 ID，规则是序号 + 时间戳\n * @param index 序号\n */\n\n\nexports.getEdgesByNodeId = getEdgesByNodeId;\n\nvar uniqueId = function uniqueId(index) {\n  if (index === void 0) {\n    index = 0;\n  }\n\n  var random1 = (\"\" + Math.random()).split('.')[1].substr(0, 5);\n  var random2 = (\"\" + Math.random()).split('.')[1].substr(0, 5);\n  return index + \"-\" + random1 + random2;\n};\n\nexports.uniqueId = uniqueId;","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/@antv/algorithm/lib/util.js"],"names":["Object","defineProperty","exports","value","uniqueId","getEdgesByNodeId","getOutEdgesNodeId","getNeighbors","nodeId","edges","type","currentEdges","filter","edge","source","target","neighhborsConverter_1","map","neighhborsConverter_2","neighhborsConverter","index","random1","Math","random","split","substr","random2"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uniqueId = exports.getEdgesByNodeId = exports.getOutEdgesNodeId = exports.getNeighbors = void 0;\n\n/**\n * 获取指定节点的所有邻居\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n * @param type 邻居类型\n */\nvar getNeighbors = function getNeighbors(nodeId, edges, type) {\n  if (edges === void 0) {\n    edges = [];\n  }\n\n  var currentEdges = edges.filter(function (edge) {\n    return edge.source === nodeId || edge.target === nodeId;\n  });\n\n  if (type === 'target') {\n    // 当前节点为 source，它所指向的目标节点\n    var neighhborsConverter_1 = function neighhborsConverter_1(edge) {\n      return edge.source === nodeId;\n    };\n\n    return currentEdges.filter(neighhborsConverter_1).map(function (edge) {\n      return edge.target;\n    });\n  }\n\n  if (type === 'source') {\n    // 当前节点为 target，它所指向的源节点\n    var neighhborsConverter_2 = function neighhborsConverter_2(edge) {\n      return edge.target === nodeId;\n    };\n\n    return currentEdges.filter(neighhborsConverter_2).map(function (edge) {\n      return edge.source;\n    });\n  } // 若未指定 type ，则返回所有邻居\n\n\n  var neighhborsConverter = function neighhborsConverter(edge) {\n    return edge.source === nodeId ? edge.target : edge.source;\n  };\n\n  return currentEdges.map(neighhborsConverter);\n};\n/**\n * 获取指定节点的出边\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n */\n\n\nexports.getNeighbors = getNeighbors;\n\nvar getOutEdgesNodeId = function getOutEdgesNodeId(nodeId, edges) {\n  return edges.filter(function (edge) {\n    return edge.source === nodeId;\n  });\n};\n/**\n * 获取指定节点的边，包括出边和入边\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n */\n\n\nexports.getOutEdgesNodeId = getOutEdgesNodeId;\n\nvar getEdgesByNodeId = function getEdgesByNodeId(nodeId, edges) {\n  return edges.filter(function (edge) {\n    return edge.source === nodeId || edge.target === nodeId;\n  });\n};\n/**\n * 生成唯一的 ID，规则是序号 + 时间戳\n * @param index 序号\n */\n\n\nexports.getEdgesByNodeId = getEdgesByNodeId;\n\nvar uniqueId = function uniqueId(index) {\n  if (index === void 0) {\n    index = 0;\n  }\n\n  var random1 = (\"\" + Math.random()).split('.')[1].substr(0, 5);\n  var random2 = (\"\" + Math.random()).split('.')[1].substr(0, 5);\n  return index + \"-\" + random1 + random2;\n};\n\nexports.uniqueId = uniqueId;"]},"metadata":{},"sourceType":"script"}