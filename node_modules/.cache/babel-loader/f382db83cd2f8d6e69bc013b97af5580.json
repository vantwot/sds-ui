{"ast":null,"code":"import _regeneratorRuntime from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { XFlowNodeCommands, XFlowEdgeCommands } from '@antv/xflow-core';\nimport { get } from 'lodash';\nimport { onConfigChange, getGraphInstance } from './util';\n/** 节点移动时，实时更新位置信息，内置之后可去掉 */\n\nexport var movedNode = function movedNode(e, cmds) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var node, data, x6Graph, nodeConfig;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            node = e.node;\n\n            if (node) {\n              _context2.next = 3;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 3:\n            data = node.data; // 更新组内元素\n\n            if (data === null || data === void 0 ? void 0 : data.groupChildren) {\n              x6Graph = getGraphInstance();\n              data === null || data === void 0 ? void 0 : data.groupChildren.forEach(function (id) {\n                return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var _a, currentNode, position;\n\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          currentNode = x6Graph.getCellById(id);\n                          position = (_a = currentNode.getPosition) === null || _a === void 0 ? void 0 : _a.call(currentNode);\n\n                          if (!(currentNode && position)) {\n                            _context.next = 5;\n                            break;\n                          }\n\n                          _context.next = 5;\n                          return cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n                            nodeConfig: Object.assign(Object.assign(Object.assign({}, currentNode.data), position), currentNode.getSize())\n                          });\n\n                        case 5:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n              });\n            }\n\n            nodeConfig = Object.assign(Object.assign(Object.assign({}, node.data), node.getPosition()), node.getSize());\n            _context2.next = 8;\n            return cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n              nodeConfig: nodeConfig\n            });\n\n          case 8:\n            onConfigChange({\n              type: 'move:node',\n              config: nodeConfig\n            });\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n};\n/** 修改节点大小 */\n\nexport var resizeNode = function resizeNode(e, cmds) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var node, nodeConfig;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            node = e.node;\n\n            if (node) {\n              _context3.next = 3;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 3:\n            nodeConfig = Object.assign(Object.assign(Object.assign({}, node.data), node.getPosition()), node.size());\n            _context3.next = 6;\n            return cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n              nodeConfig: nodeConfig\n            });\n\n          case 6:\n            onConfigChange({\n              type: 'resize:node',\n              config: nodeConfig\n            });\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n};\n\nvar getContainer = function getContainer(e) {\n  var _a;\n\n  var currentNode = (_a = e === null || e === void 0 ? void 0 : e.e) === null || _a === void 0 ? void 0 : _a.currentTarget;\n\n  if (!currentNode) {\n    return document.getElementsByClassName('xflow-canvas-root');\n  }\n\n  var containter = null;\n\n  while (!containter) {\n    var current = currentNode.getElementsByClassName('xflow-canvas-root');\n\n    if ((current === null || current === void 0 ? void 0 : current.length) > 0) {\n      containter = current;\n    }\n\n    currentNode = currentNode.parentNode;\n  }\n\n  return containter;\n};\n/** 设置 ports visible */\n\n\nexport var changePortsVisible = function changePortsVisible(visible, e) {\n  var containers = getContainer(e);\n  Array.from(containers).forEach(function (container) {\n    var _a, _b;\n\n    var ports = container.querySelectorAll('.x6-port-body');\n    var graph = getGraphInstance(); // 选中中节点时不展示链接桩\n\n    var isSelectedNode = (_b = (_a = graph.getSelectedCells()) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.isNode();\n\n    for (var i = 0, len = ports.length; i < len; i = i + 1) {\n      ports[i].style.visibility = !isSelectedNode && visible ? 'visible' : 'hidden';\n    }\n  });\n};\n/** 添加辅助工具 */\n\nexport var addTools = function addTools(e) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var edge;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            edge = e.edge;\n\n            if (edge) {\n              _context4.next = 3;\n              break;\n            }\n\n            return _context4.abrupt(\"return\");\n\n          case 3:\n            edge.addTools('vertices', 'ondbclick');\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n};\n/** 移除辅助工具 */\n\nexport var removeTools = function removeTools(e, cmds) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var edge;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            edge = e.edge;\n\n            if (edge) {\n              _context5.next = 3;\n              break;\n            }\n\n            return _context5.abrupt(\"return\");\n\n          case 3:\n            if (edge.hasTools('ondbclick')) {\n              cmds.executeCommand(XFlowEdgeCommands.UPDATE_EDGE.id, {\n                edgeConfig: Object.assign(Object.assign({}, get(edge, 'data')), {\n                  vertices: edge.getVertices()\n                })\n              });\n              edge.removeTools();\n            }\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n};","map":{"version":3,"sources":["../../../src/flowchart-canvas/utils/events.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAS,iBAAT,EAA4B,iBAA5B,QAAqD,kBAArD;AACA,SAAS,GAAT,QAAoB,QAApB;AACA,SAAS,cAAT,EAAyB,gBAAzB,QAAiD,QAAjD;AAGA;;AACA,OAAO,IAAM,SAAS,GAAG,SAAZ,SAAY,CAAO,CAAP,EAAe,IAAf;AAAA,SAA6C,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5D,YAAA,IAD4D,GACnD,CADmD,CAC5D,IAD4D;;AAAA,gBAE/D,IAF+D;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAM5D,YAAA,IAN4D,GAMnD,IANmD,CAM5D,IAN4D,EAOpE;;AACA,gBAAI,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,aAAV,EAAyB;AACjB,cAAA,OADiB,GACP,gBAAgB,EADT;AAEvB,cAAA,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,aAAN,CAAoB,OAApB,CAA4B,UAAO,EAAP;AAAA,uBAAqB,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACzC,0BAAA,WADyC,GAC3B,OAAO,CAAC,WAAR,CAAoB,EAApB,CAD2B;AAEzC,0BAAA,QAFyC,GAE9B,CAAA,EAAA,GAAA,WAAW,CAAC,WAAZ,MAAuB,IAAvB,IAAuB,EAAA,KAAA,KAAA,CAAvB,GAAuB,KAAA,CAAvB,GAAuB,EAAA,CAAA,IAAA,CAAvB,WAAuB,CAFO;;AAAA,gCAG3C,WAAW,IAAI,QAH4B;AAAA;AAAA;AAAA;;AAAA;AAI7C,iCAAM,IAAI,CAAC,cAAL,CAAoB,iBAAiB,CAAC,WAAlB,CAA8B,EAAlD,EAAsD;AAC1D,4BAAA,UAAU,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACL,WAAW,CAAC,IADP,CAAA,EAEL,QAFK,CAAA,EAGL,WAAW,CAAC,OAAZ,EAHK;AADgD,2BAAtD,CAAN;;AAJ6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAA,EAArB;AAAA,eAA5B,CAAA;AAaD;;AACK,YAAA,UAxB8D,GAwBpD,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACX,IAAI,CAAC,IADM,CAAA,EAEX,IAAI,CAAC,WAAL,EAFW,CAAA,EAGX,IAAI,CAAC,OAAL,EAHW,CAxBoD;AAAA;AA6BpE,mBAAM,IAAI,CAAC,cAAL,CAAoB,iBAAiB,CAAC,WAAlB,CAA8B,EAAlD,EAAsD;AAC1D,cAAA,UAAU,EAAV;AAD0D,aAAtD,CAAN;;AA7BoE;AAgCpE,YAAA,cAAc,CAAC;AAAE,cAAA,IAAI,EAAE,WAAR;AAAqB,cAAA,MAAM,EAAE;AAA7B,aAAD,CAAd;;AAhCoE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EAA7C;AAAA,CAAlB;AAmCP;;AACA,OAAO,IAAM,UAAU,GAAG,SAAb,UAAa,CAAO,CAAP,EAAe,IAAf;AAAA,SAA6C,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7D,YAAA,IAD6D,GACpD,CADoD,CAC7D,IAD6D;;AAAA,gBAEhE,IAFgE;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAK/D,YAAA,UAL+D,GAKrD,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACX,IAAI,CAAC,IADM,CAAA,EAEX,IAAI,CAAC,WAAL,EAFW,CAAA,EAGX,IAAI,CAAC,IAAL,EAHW,CALqD;AAAA;AAUrE,mBAAM,IAAI,CAAC,cAAL,CAAoB,iBAAiB,CAAC,WAAlB,CAA8B,EAAlD,EAAsD;AAC1D,cAAA,UAAU,EAAV;AAD0D,aAAtD,CAAN;;AAVqE;AAarE,YAAA,cAAc,CAAC;AAAE,cAAA,IAAI,EAAE,aAAR;AAAuB,cAAA,MAAM,EAAE;AAA/B,aAAD,CAAd;;AAbqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EAA7C;AAAA,CAAnB;;AAgBP,IAAM,YAAY,GAAG,SAAf,YAAe,CAAA,CAAC,EAAG;;;AACvB,MAAI,WAAW,GAAG,CAAA,EAAA,GAAA,CAAC,KAAA,IAAD,IAAA,CAAC,KAAA,KAAA,CAAD,GAAC,KAAA,CAAD,GAAA,CAAC,CAAE,CAAH,MAAI,IAAJ,IAAI,EAAA,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAI,EAAA,CAAE,aAAxB;;AACA,MAAI,CAAC,WAAL,EAAkB;AAChB,WAAO,QAAQ,CAAC,sBAAT,CAAgC,mBAAhC,CAAP;AACD;;AACD,MAAI,UAAU,GAAG,IAAjB;;AACA,SAAO,CAAC,UAAR,EAAoB;AAClB,QAAM,OAAO,GAAG,WAAW,CAAC,sBAAZ,CAAmC,mBAAnC,CAAhB;;AACA,QAAI,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,MAAT,IAAkB,CAAtB,EAAyB;AACvB,MAAA,UAAU,GAAG,OAAb;AACD;;AACD,IAAA,WAAW,GAAG,WAAW,CAAC,UAA1B;AACD;;AACD,SAAO,UAAP;AACD,CAdD;AAgBA;;;AACA,OAAO,IAAM,kBAAkB,GAAG,SAArB,kBAAqB,CAAC,OAAD,EAAmB,CAAnB,EAA8B;AAC9D,MAAM,UAAU,GAAG,YAAY,CAAC,CAAD,CAA/B;AACA,EAAA,KAAK,CAAC,IAAN,CAAW,UAAX,EAAuB,OAAvB,CAA+B,UAAC,SAAD,EAA8B;;;AAC3D,QAAM,KAAK,GAAG,SAAS,CAAC,gBAAV,CAA2B,eAA3B,CAAd;AACA,QAAM,KAAK,GAAG,gBAAgB,EAA9B,CAF2D,CAG3D;;AACA,QAAM,cAAc,GAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAK,CAAC,gBAAN,EAAA,MAAwB,IAAxB,IAAwB,EAAA,KAAA,KAAA,CAAxB,GAAwB,KAAA,CAAxB,GAAwB,EAAA,CAAG,CAAH,CAAxB,MAA6B,IAA7B,IAA6B,EAAA,KAAA,KAAA,CAA7B,GAA6B,KAAA,CAA7B,GAA6B,EAAA,CAAE,MAAF,EAApD;;AACA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,GAAG,GAAG,KAAK,CAAC,MAA5B,EAAoC,CAAC,GAAG,GAAxC,EAA6C,CAAC,GAAG,CAAC,GAAG,CAArD,EAAwD;AACtD,MAAA,KAAK,CAAC,CAAD,CAAL,CAAS,KAAT,CAAe,UAAf,GAA4B,CAAC,cAAD,IAAmB,OAAnB,GAA6B,SAA7B,GAAyC,QAArE;AACD;AACF,GARD;AASD,CAXM;AAaP;;AACA,OAAO,IAAM,QAAQ,GAAG,SAAX,QAAW,CAAO,CAAP;AAAA,SAAiB,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/B,YAAA,IAD+B,GACtB,CADsB,CAC/B,IAD+B;;AAAA,gBAElC,IAFkC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAKvC,YAAA,IAAI,CAAC,QAAL,CAAc,UAAd,EAA0B,WAA1B;;AALuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EAAjB;AAAA,CAAjB;AAQP;;AACA,OAAO,IAAM,WAAW,GAAG,SAAd,WAAc,CAAO,CAAP,EAAe,IAAf;AAAA,SAA6C,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9D,YAAA,IAD8D,GACrD,CADqD,CAC9D,IAD8D;;AAAA,gBAEjE,IAFiE;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAKtE,gBAAI,IAAI,CAAC,QAAL,CAAc,WAAd,CAAJ,EAAgC;AAC9B,cAAA,IAAI,CAAC,cAAL,CAAoB,iBAAiB,CAAC,WAAlB,CAA8B,EAAlD,EAAsD;AACpD,gBAAA,UAAU,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACL,GAAG,CAAC,IAAD,EAAO,MAAP,CADE,CAAA,EACY;AACpB,kBAAA,QAAQ,EAAE,IAAI,CAAC,WAAL;AADU,iBADZ;AAD0C,eAAtD;AAMA,cAAA,IAAI,CAAC,WAAL;AACD;;AAbqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EAA7C;AAAA,CAApB","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { XFlowNodeCommands, XFlowEdgeCommands } from '@antv/xflow-core';\nimport { get } from 'lodash';\nimport { onConfigChange, getGraphInstance } from './util';\n/** 节点移动时，实时更新位置信息，内置之后可去掉 */\nexport const movedNode = (e, cmds) => __awaiter(void 0, void 0, void 0, function* () {\n    const { node } = e;\n    if (!node) {\n        return;\n    }\n    const { data } = node;\n    // 更新组内元素\n    if (data === null || data === void 0 ? void 0 : data.groupChildren) {\n        const x6Graph = getGraphInstance();\n        data === null || data === void 0 ? void 0 : data.groupChildren.forEach((id) => __awaiter(void 0, void 0, void 0, function* () {\n            var _a;\n            const currentNode = x6Graph.getCellById(id);\n            const position = (_a = currentNode.getPosition) === null || _a === void 0 ? void 0 : _a.call(currentNode);\n            if (currentNode && position) {\n                yield cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n                    nodeConfig: Object.assign(Object.assign(Object.assign({}, currentNode.data), position), currentNode.getSize()),\n                });\n            }\n        }));\n    }\n    const nodeConfig = Object.assign(Object.assign(Object.assign({}, node.data), node.getPosition()), node.getSize());\n    yield cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n        nodeConfig,\n    });\n    onConfigChange({ type: 'move:node', config: nodeConfig });\n});\n/** 修改节点大小 */\nexport const resizeNode = (e, cmds) => __awaiter(void 0, void 0, void 0, function* () {\n    const { node } = e;\n    if (!node) {\n        return;\n    }\n    const nodeConfig = Object.assign(Object.assign(Object.assign({}, node.data), node.getPosition()), node.size());\n    yield cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n        nodeConfig,\n    });\n    onConfigChange({ type: 'resize:node', config: nodeConfig });\n});\nconst getContainer = e => {\n    var _a;\n    let currentNode = (_a = e === null || e === void 0 ? void 0 : e.e) === null || _a === void 0 ? void 0 : _a.currentTarget;\n    if (!currentNode) {\n        return document.getElementsByClassName('xflow-canvas-root');\n    }\n    let containter = null;\n    while (!containter) {\n        const current = currentNode.getElementsByClassName('xflow-canvas-root');\n        if ((current === null || current === void 0 ? void 0 : current.length) > 0) {\n            containter = current;\n        }\n        currentNode = currentNode.parentNode;\n    }\n    return containter;\n};\n/** 设置 ports visible */\nexport const changePortsVisible = (visible, e) => {\n    const containers = getContainer(e);\n    Array.from(containers).forEach((container) => {\n        var _a, _b;\n        const ports = container.querySelectorAll('.x6-port-body');\n        const graph = getGraphInstance();\n        // 选中中节点时不展示链接桩\n        const isSelectedNode = (_b = (_a = graph.getSelectedCells()) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.isNode();\n        for (let i = 0, len = ports.length; i < len; i = i + 1) {\n            ports[i].style.visibility = !isSelectedNode && visible ? 'visible' : 'hidden';\n        }\n    });\n};\n/** 添加辅助工具 */\nexport const addTools = (e) => __awaiter(void 0, void 0, void 0, function* () {\n    const { edge } = e;\n    if (!edge) {\n        return;\n    }\n    edge.addTools('vertices', 'ondbclick');\n});\n/** 移除辅助工具 */\nexport const removeTools = (e, cmds) => __awaiter(void 0, void 0, void 0, function* () {\n    const { edge } = e;\n    if (!edge) {\n        return;\n    }\n    if (edge.hasTools('ondbclick')) {\n        cmds.executeCommand(XFlowEdgeCommands.UPDATE_EDGE.id, {\n            edgeConfig: Object.assign(Object.assign({}, get(edge, 'data')), { vertices: edge.getVertices() }),\n        });\n        edge.removeTools();\n    }\n});\n//# sourceMappingURL=events.js.map"]},"metadata":{},"sourceType":"module"}