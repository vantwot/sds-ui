{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isMini } from '@antv/l7-utils';\n\nvar DragPanHandler = function () {\n  function DragPanHandler(el, mousePan, touchPan) {\n    _classCallCheck(this, DragPanHandler);\n\n    _defineProperty(this, \"inertiaOptions\", void 0);\n\n    _defineProperty(this, \"el\", void 0);\n\n    _defineProperty(this, \"mousePan\", void 0);\n\n    _defineProperty(this, \"touchPan\", void 0);\n\n    this.el = el;\n    this.mousePan = mousePan;\n    this.touchPan = touchPan;\n  }\n\n  _createClass(DragPanHandler, [{\n    key: \"enable\",\n    value: function enable(options) {\n      this.inertiaOptions = options || {};\n      this.mousePan.enable();\n      this.touchPan.enable();\n\n      if (!isMini) {\n        this.el.classList.add('l7-touch-drag-pan');\n      }\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.mousePan.disable();\n      this.touchPan.disable();\n\n      if (!isMini) {\n        this.el.classList.remove('l7-touch-drag-pan');\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.mousePan.isEnabled() && this.touchPan.isEnabled();\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.mousePan.isActive() || this.touchPan.isActive();\n    }\n  }]);\n\n  return DragPanHandler;\n}();\n\nexport { DragPanHandler as default };","map":{"version":3,"sources":["../../../src/handler/shim/drag_pan.ts"],"names":["DragPanHandler","options"],"mappings":";;;AAAA,SAAA,MAAA,QAAA,gBAAA;;IAeqBA,c;AAQnB,WAAA,cAAA,CAAA,EAAA,EAAA,QAAA,EAAA,QAAA,EAIE;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,gBAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA;;AACA,SAAA,EAAA,GAAA,EAAA;AACA,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,QAAA,GAAA,QAAA;AACD;;;;WAqBD,SAAA,MAAA,CAAA,OAAA,EAAyC;AACvC,WAAA,cAAA,GAAsBC,OAAO,IAA7B,EAAA;AACA,WAAA,QAAA,CAAA,MAAA;AACA,WAAA,QAAA,CAAA,MAAA;;AACA,UAAI,CAAJ,MAAA,EAAa;AACX,aAAA,EAAA,CAAA,SAAA,CAAA,GAAA,CAAA,mBAAA;AACD;AACF;;;WAQD,SAAA,OAAA,GAAiB;AACf,WAAA,QAAA,CAAA,OAAA;AACA,WAAA,QAAA,CAAA,OAAA;;AACA,UAAI,CAAJ,MAAA,EAAa;AACX,aAAA,EAAA,CAAA,SAAA,CAAA,MAAA,CAAA,mBAAA;AACD;AACF;;;WAOD,SAAA,SAAA,GAAmB;AACjB,aAAO,KAAA,QAAA,CAAA,SAAA,MAA6B,KAAA,QAAA,CAApC,SAAoC,EAApC;AACD;;;WAOD,SAAA,QAAA,GAAkB;AAChB,aAAO,KAAA,QAAA,CAAA,QAAA,MAA4B,KAAA,QAAA,CAAnC,QAAmC,EAAnC;AACD;;;;;;SA5EkBD,c","sourcesContent":["import { isMini } from '@antv/l7-utils';\nimport { MousePanHandler } from '../mouse/';\nimport { TouchPanHandler } from '../touch/';\n\nexport interface IDragPanOptions {\n  linearity?: number;\n  easing?: (t: number) => number;\n  deceleration?: number;\n  maxSpeed?: number;\n}\n\n/**\n * The `DragPanHandler` allows the user to pan the map by clicking and dragging\n * the cursor.\n */\nexport default class DragPanHandler {\n  public inertiaOptions: IDragPanOptions;\n  private el: HTMLElement;\n  private mousePan: MousePanHandler;\n  private touchPan: TouchPanHandler;\n  /**\n   * @private\n   */\n  constructor(\n    el: HTMLElement,\n    mousePan: MousePanHandler,\n    touchPan: TouchPanHandler,\n  ) {\n    this.el = el;\n    this.mousePan = mousePan;\n    this.touchPan = touchPan;\n  }\n\n  /**\n   * Enables the \"drag to pan\" interaction.\n   *\n   * @param {Object} [options] Options object\n   * @param {number} [options.linearity=0] factor used to scale the drag velocity\n   * @param {Function} [options.easing=bezier(0, 0, 0.3, 1)] easing function applled to `map.panTo` when applying the drag.\n   * @param {number} [options.maxSpeed=1400] the maximum value of the drag velocity.\n   * @param {number} [options.deceleration=2500] the rate at which the speed reduces after the pan ends.\n   *\n   * @example\n   *   map.dragPan.enable();\n   * @example\n   *   map.dragPan.enable({\n   *      linearity: 0.3,\n   *      easing: bezier(0, 0, 0.3, 1),\n   *      maxSpeed: 1400,\n   *      deceleration: 2500,\n   *   });\n   */\n  public enable(options?: IDragPanOptions) {\n    this.inertiaOptions = options || {};\n    this.mousePan.enable();\n    this.touchPan.enable();\n    if (!isMini) {\n      this.el.classList.add('l7-touch-drag-pan');\n    }\n  }\n\n  /**\n   * Disables the \"drag to pan\" interaction.\n   *\n   * @example\n   * map.dragPan.disable();\n   */\n  public disable() {\n    this.mousePan.disable();\n    this.touchPan.disable();\n    if (!isMini) {\n      this.el.classList.remove('l7-touch-drag-pan');\n    }\n  }\n\n  /**\n   * Returns a Boolean indicating whether the \"drag to pan\" interaction is enabled.\n   *\n   * @returns {boolean} `true` if the \"drag to pan\" interaction is enabled.\n   */\n  public isEnabled() {\n    return this.mousePan.isEnabled() && this.touchPan.isEnabled();\n  }\n\n  /**\n   * Returns a Boolean indicating whether the \"drag to pan\" interaction is active, i.e. currently being used.\n   *\n   * @returns {boolean} `true` if the \"drag to pan\" interaction is active.\n   */\n  public isActive() {\n    return this.mousePan.isActive() || this.touchPan.isActive();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}