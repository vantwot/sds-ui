{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { contrib, Contribution, singleton } from 'mana-syringe';\nimport { RxModel } from '../common/rx-model';\nimport { Disposable, DisposableCollection } from '../common/disposable';\nimport { IFrontendApplicationContribution } from '../xflow-main/interface';\nimport { IGraphCommandService, IGraphCommandContribution } from './interface';\nimport 'reflect-metadata';\nexport var NCommand;\n\n(function (NCommand) {\n  /* Determine whether object is a Command */\n  function is(arg) {\n    return !!arg && arg === Object(arg) && 'id' in arg;\n  }\n\n  NCommand.is = is;\n  /** Comparator function for when sorting commands */\n\n  function compareCommands(a, b) {\n    if (a.label && b.label) {\n      var aCommand = (a.category ? \"\".concat(a.category, \": \").concat(a.label) : a.label).toLowerCase();\n      var bCommand = (b.category ? \"\".concat(b.category, \": \").concat(b.label) : b.label).toLowerCase();\n      return aCommand.localeCompare(bCommand);\n    } else {\n      return 0;\n    }\n  }\n\n  NCommand.compareCommands = compareCommands;\n  /**\n   * Determine if two commands are equal.\n   *\n   * @param a the first command for comparison.\n   * @param b the second command for comparison.\n   */\n\n  function equals(a, b) {\n    return a.id === b.id && a.label === b.label && a.iconName === b.iconName && a.category === b.category;\n  }\n\n  NCommand.equals = equals;\n})(NCommand || (NCommand = {}));\n\nvar GraphCommandRegistry = /*#__PURE__*/function () {\n  function GraphCommandRegistry(contributionProvider) {\n    var _this = this;\n\n    _classCallCheck(this, GraphCommandRegistry);\n\n    this.contributionProvider = contributionProvider;\n    /**\n     * undo cmd后将命令存储在队列中给redo调用\n     */\n\n    this.redoStack = [];\n    /**\n     * executeCommand后将命令存储在队列中给undo调用\n     */\n\n    this.undoStack = [];\n    /**\n     * 储存所有注册的command\n     */\n\n    this.commands = new Map();\n    /**\n     * 储存所有注册的command factory\n     */\n\n    this.factories = new Map();\n    /**\n     * 储存所有注册的command handler disposables\n     */\n\n    this.disposables = new Map();\n    /**\n     * 监听cmdregistry的变化\n     */\n\n    this.cmdChangeEvent = new RxModel(null);\n    /**\n     * 在Command实例间共享变量\n     */\n\n    this.Globals = new RxModel(new Map());\n    /** 设置command间的共享变量 */\n\n    this.setGlobal = function (key, value) {\n      _this.Globals.setValue(function (map) {\n        map.set(key, value);\n      });\n    };\n    /** 获取共享变量 */\n\n\n    this.getGlobal = function (key) {\n      var map = _this.Globals.getValue();\n\n      return map.get(key);\n    };\n    /**\n     * 执行undo stack中最后一条Command\n     */\n\n\n    this.undoCommand = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var cmd;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                /* 获取可以undo的Command */\n                cmd = this.undoStack.pop();\n\n                if (cmd) {\n                  _context.next = 4;\n                  break;\n                }\n\n                console.error('empty undo stack');\n                return _context.abrupt(\"return\");\n\n              case 4:\n                _context.next = 6;\n                return cmd.undo();\n\n              case 6:\n                /* 执行后塞到redo的栈中 */\n                this.redoStack.push(cmd);\n                /* 触发事件回调 */\n\n                this.cmdChangeEvent.setValue(null);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    };\n    /**\n     * 执行redo stack中最后一条Command\n     */\n\n\n    this.redoCommand = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var cmd;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                /* 获取可以redo的Command */\n                cmd = this.redoStack.pop();\n\n                if (cmd) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                console.error('empty undo stack');\n                return _context2.abrupt(\"return\");\n\n              case 4:\n                _context2.next = 6;\n                return cmd.redo();\n\n              case 6:\n                /* 执行后塞到undo的栈中 */\n                this.undoStack.push(cmd);\n                /* 触发事件回调 */\n\n                this.cmdChangeEvent.setValue(null);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    };\n    /**\n     * 注册一批可单独dispose的Command\n     * @param externalRegisterFn ICommandRegisterFunction\n     */\n\n\n    this.registerDisposableCommand = function (externalRegisterFn) {\n      var toDispose = new DisposableCollection();\n      var disposableRegistry = {\n        registerCommand: function registerCommand(command, factory) {\n          var disposable = _this.registerCommand(command, factory);\n\n          toDispose.push(disposable);\n          return disposable;\n        }\n      };\n      externalRegisterFn(disposableRegistry);\n      return toDispose;\n    };\n  }\n  /**\n   * 监听cmdregistry的变化\n   */\n\n\n  _createClass(GraphCommandRegistry, [{\n    key: \"watchChange\",\n    get: function get() {\n      return this.cmdChangeEvent.watch;\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart() {\n      var contributions = this.contributionProvider.getContributions();\n\n      var _iterator = _createForOfIteratorHelper(contributions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var contribItem = _step.value;\n          contribItem.registerGraphCommands(this);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"executeCommandPipeline\",\n    value: function executeCommandPipeline(cmdOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var res, _iterator2, _step2, cmdOption, cmdCtx, _yield, args, hooks;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                res = null;\n                _iterator2 = _createForOfIteratorHelper(cmdOptions);\n                _context3.prev = 2;\n\n                _iterator2.s();\n\n              case 4:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                cmdOption = _step2.value;\n                cmdCtx = res === null || res === void 0 ? void 0 : res.contextProvider();\n                _context3.next = 9;\n                return cmdOption === null || cmdOption === void 0 ? void 0 : cmdOption.getCommandOption(cmdCtx);\n\n              case 9:\n                _yield = _context3.sent;\n                args = _yield.args;\n                hooks = _yield.hooks;\n                _context3.next = 14;\n                return this.executeCommand(cmdOption === null || cmdOption === void 0 ? void 0 : cmdOption.commandId, args, hooks);\n\n              case 14:\n                res = _context3.sent;\n\n              case 15:\n                _context3.next = 4;\n                break;\n\n              case 17:\n                _context3.next = 22;\n                break;\n\n              case 19:\n                _context3.prev = 19;\n                _context3.t0 = _context3[\"catch\"](2);\n\n                _iterator2.e(_context3.t0);\n\n              case 22:\n                _context3.prev = 22;\n\n                _iterator2.f();\n\n                return _context3.finish(22);\n\n              case 25:\n                /* 触发事件回调 */\n                this.cmdChangeEvent.setValue(null);\n                return _context3.abrupt(\"return\", res);\n\n              case 27:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 19, 22, 25]]);\n      }));\n    }\n    /** 执行 Command：会在undo stack中push cmd */\n\n  }, {\n    key: \"executeCommand\",\n    value: function executeCommand(commandId, cmdArgs) {\n      var hook = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var factory, cmd;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                factory = this.getFactory(commandId);\n\n                if (!factory) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                _context4.next = 4;\n                return factory.createCommand(commandId, cmdArgs, hook);\n\n              case 4:\n                cmd = _context4.sent;\n                _context4.next = 7;\n                return cmd.execute();\n\n              case 7:\n                if (cmd.isUndoable()) {\n                  this.undoStack.push(cmd);\n                }\n                /* 触发事件回调 */\n\n\n                this.cmdChangeEvent.setValue(null);\n                return _context4.abrupt(\"return\", cmd);\n\n              case 10:\n                throw Object.assign(new Error(\"The command '\".concat(commandId, \"' cannot be executed. There are no active handlers available for the command.\")), {\n                  code: 'NO_ACTIVE_HANDLER'\n                });\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n    /** 执行 unod Command：不会在undo stack中push新的command记录 */\n\n  }, {\n    key: \"executeUndoCommand\",\n    value: function executeUndoCommand(commandId, cmdArgs) {\n      var hook = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var factory, cmd;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                factory = this.getFactory(commandId);\n\n                if (!factory) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                _context5.next = 4;\n                return factory.createCommand(commandId, cmdArgs, hook);\n\n              case 4:\n                cmd = _context5.sent;\n                _context5.next = 7;\n                return cmd.execute();\n\n              case 7:\n                return _context5.abrupt(\"return\", cmd);\n\n              case 8:\n                throw Object.assign(new Error(\"The command '\".concat(commandId, \"' cannot be executed. There are no active handlers available for the command.\")), {\n                  code: 'NO_ACTIVE_HANDLER'\n                });\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n    /**\n     * Execute the active handler for the given command and arguments.\n     *\n     * Reject if a command cannot be executed.\n     */\n\n  }, {\n    key: \"createCommand\",\n    value: function createCommand(commandId, cmdArgs) {\n      var hook = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var factory, cmd;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                factory = this.getFactory(commandId);\n\n                if (!factory) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                _context6.next = 4;\n                return factory.createCommand(commandId, cmdArgs, hook);\n\n              case 4:\n                cmd = _context6.sent;\n                return _context6.abrupt(\"return\", cmd);\n\n              case 6:\n                throw Object.assign(new Error(\"The command '\".concat(commandId, \"' cannot be executed. There are no active handlers available for the command.\")), {\n                  code: 'NO_ACTIVE_HANDLER'\n                });\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n    /**\n     * 检查是否注册了Command\n     */\n\n  }, {\n    key: \"isUndoable\",\n    get: function get() {\n      return this.undoStack.length > 0;\n    }\n    /**\n     * 检查是否注册了Command\n     */\n\n  }, {\n    key: \"isRedoable\",\n    get: function get() {\n      return this.redoStack.length > 0;\n    }\n    /**\n     * 检查是否注册了Command\n     */\n\n  }, {\n    key: \"hasCommand\",\n    value: function hasCommand(commandId) {\n      return this.commands.has(commandId);\n    }\n    /**\n     * Get a command for the given command identifier.\n     */\n\n  }, {\n    key: \"getCommand\",\n    value: function getCommand(id) {\n      return this.commands.get(id);\n    }\n    /**\n     * Register the given command and handler if present.\n     *\n     * Throw if a command is already registered for the given command identifier.\n     */\n\n  }, {\n    key: \"registerCommand\",\n    value: function registerCommand(command, factory) {\n      var _this2 = this;\n\n      if (this.factories.has(command.id)) {\n        console.warn(\"A command \".concat(command.id, \" is already registered.\"));\n        return Disposable.NULL;\n      }\n\n      var toDispose = new DisposableCollection(this.doRegisterCommand(command), this.registerFactory(command.id, factory), Disposable.create(function () {\n        return _this2.disposables.delete(command.id);\n      }));\n      this.disposables.set(command.id, toDispose);\n      return toDispose;\n    }\n  }, {\n    key: \"doRegisterCommand\",\n    value: function doRegisterCommand(command) {\n      var _this3 = this;\n\n      this.commands.set(command.id, command);\n      return Disposable.create(function () {\n        return _this3.disposables.delete(command.id);\n      });\n    }\n    /**\n     * Unregister command from the registry\n     *\n     * @param id\n     */\n\n  }, {\n    key: \"unregisterCommand\",\n    value: function unregisterCommand(commandOrId) {\n      var id = NCommand.is(commandOrId) ? commandOrId.id : commandOrId;\n      var disposableCmd = this.disposables.get(id);\n\n      if (disposableCmd) {\n        disposableCmd.dispose();\n      }\n    }\n    /**\n     * 检查commandId是否有Factory\n     */\n\n  }, {\n    key: \"hasFactory\",\n    value: function hasFactory(commandId) {\n      var factory = this.factories.get(commandId);\n      return !!factory;\n    }\n    /**\n     * Get a visible handler for the given command or `undefined`.\n     */\n\n  }, {\n    key: \"getFactory\",\n    value: function getFactory(commandId) {\n      var factory = this.factories.get(commandId);\n      return factory;\n    }\n    /**\n     * Register the given handler for the given command identifier.\n     *\n     * If there is already a handler for the given command\n     * then the given handler is registered as more specific, and\n     * has higher priority during enablement, visibility and toggle state evaluations.\n     */\n\n  }, {\n    key: \"registerFactory\",\n    value: function registerFactory(commandId, factory) {\n      var _this4 = this;\n\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (this.hasFactory(commandId) && force === false) {\n        console.error('cannot register command:', commandId);\n      }\n\n      this.factories.set(commandId, factory);\n      return Disposable.create(function () {\n        _this4.factories.delete(commandId);\n      });\n    }\n    /**\n     * Returns with all handlers for the given command. If the command does not have any handlers,\n     * or the command is not registered, returns an empty array.\n     */\n\n  }, {\n    key: \"getAllFactories\",\n    value: function getAllFactories() {\n      return Array.from(this.factories.entries());\n    }\n  }]);\n\n  return GraphCommandRegistry;\n}();\n\nGraphCommandRegistry = __decorate([singleton({\n  contrib: [IFrontendApplicationContribution, IGraphCommandService]\n}), __param(0, contrib(IGraphCommandContribution)), __metadata(\"design:paramtypes\", [Object])], GraphCommandRegistry);\nexport { GraphCommandRegistry };","map":{"version":3,"sources":["../../src/command/graph-command.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { contrib, Contribution, singleton } from 'mana-syringe';\nimport { RxModel } from '../common/rx-model';\nimport { Disposable, DisposableCollection } from '../common/disposable';\nimport { IFrontendApplicationContribution } from '../xflow-main/interface';\nimport { IGraphCommandService, IGraphCommandContribution } from './interface';\nimport 'reflect-metadata';\nexport var NCommand;\n(function (NCommand) {\n    /* Determine whether object is a Command */\n    function is(arg) {\n        return !!arg && arg === Object(arg) && 'id' in arg;\n    }\n    NCommand.is = is;\n    /** Comparator function for when sorting commands */\n    function compareCommands(a, b) {\n        if (a.label && b.label) {\n            const aCommand = (a.category ? `${a.category}: ${a.label}` : a.label).toLowerCase();\n            const bCommand = (b.category ? `${b.category}: ${b.label}` : b.label).toLowerCase();\n            return aCommand.localeCompare(bCommand);\n        }\n        else {\n            return 0;\n        }\n    }\n    NCommand.compareCommands = compareCommands;\n    /**\n     * Determine if two commands are equal.\n     *\n     * @param a the first command for comparison.\n     * @param b the second command for comparison.\n     */\n    function equals(a, b) {\n        return (a.id === b.id && a.label === b.label && a.iconName === b.iconName && a.category === b.category);\n    }\n    NCommand.equals = equals;\n})(NCommand || (NCommand = {}));\nlet GraphCommandRegistry = class GraphCommandRegistry {\n    constructor(contributionProvider) {\n        this.contributionProvider = contributionProvider;\n        /**\n         * undo cmd后将命令存储在队列中给redo调用\n         */\n        this.redoStack = [];\n        /**\n         * executeCommand后将命令存储在队列中给undo调用\n         */\n        this.undoStack = [];\n        /**\n         * 储存所有注册的command\n         */\n        this.commands = new Map();\n        /**\n         * 储存所有注册的command factory\n         */\n        this.factories = new Map();\n        /**\n         * 储存所有注册的command handler disposables\n         */\n        this.disposables = new Map();\n        /**\n         * 监听cmdregistry的变化\n         */\n        this.cmdChangeEvent = new RxModel(null);\n        /**\n         * 在Command实例间共享变量\n         */\n        this.Globals = new RxModel(new Map());\n        /** 设置command间的共享变量 */\n        this.setGlobal = (key, value) => {\n            this.Globals.setValue(map => {\n                map.set(key, value);\n            });\n        };\n        /** 获取共享变量 */\n        this.getGlobal = (key) => {\n            const map = this.Globals.getValue();\n            return map.get(key);\n        };\n        /**\n         * 执行undo stack中最后一条Command\n         */\n        this.undoCommand = () => __awaiter(this, void 0, void 0, function* () {\n            /* 获取可以undo的Command */\n            const cmd = this.undoStack.pop();\n            if (!cmd) {\n                console.error('empty undo stack');\n                return;\n            }\n            /* 执行命令的undo方法 */\n            yield cmd.undo();\n            /* 执行后塞到redo的栈中 */\n            this.redoStack.push(cmd);\n            /* 触发事件回调 */\n            this.cmdChangeEvent.setValue(null);\n        });\n        /**\n         * 执行redo stack中最后一条Command\n         */\n        this.redoCommand = () => __awaiter(this, void 0, void 0, function* () {\n            /* 获取可以redo的Command */\n            const cmd = this.redoStack.pop();\n            if (!cmd) {\n                console.error('empty undo stack');\n                return;\n            }\n            /* 执行命令的undo */\n            yield cmd.redo();\n            /* 执行后塞到undo的栈中 */\n            this.undoStack.push(cmd);\n            /* 触发事件回调 */\n            this.cmdChangeEvent.setValue(null);\n        });\n        /**\n         * 注册一批可单独dispose的Command\n         * @param externalRegisterFn ICommandRegisterFunction\n         */\n        this.registerDisposableCommand = (externalRegisterFn) => {\n            const toDispose = new DisposableCollection();\n            const disposableRegistry = {\n                registerCommand: (command, factory) => {\n                    const disposable = this.registerCommand(command, factory);\n                    toDispose.push(disposable);\n                    return disposable;\n                },\n            };\n            externalRegisterFn(disposableRegistry);\n            return toDispose;\n        };\n    }\n    /**\n     * 监听cmdregistry的变化\n     */\n    get watchChange() {\n        return this.cmdChangeEvent.watch;\n    }\n    onStart() {\n        const contributions = this.contributionProvider.getContributions();\n        for (const contribItem of contributions) {\n            contribItem.registerGraphCommands(this);\n        }\n    }\n    executeCommandPipeline(cmdOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = null;\n            for (const cmdOption of cmdOptions) {\n                const cmdCtx = res === null || res === void 0 ? void 0 : res.contextProvider();\n                const { args, hooks } = yield (cmdOption === null || cmdOption === void 0 ? void 0 : cmdOption.getCommandOption(cmdCtx));\n                res = yield this.executeCommand(cmdOption === null || cmdOption === void 0 ? void 0 : cmdOption.commandId, args, hooks);\n            }\n            /* 触发事件回调 */\n            this.cmdChangeEvent.setValue(null);\n            return res;\n        });\n    }\n    /** 执行 Command：会在undo stack中push cmd */\n    executeCommand(commandId, cmdArgs, hook = []) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const factory = this.getFactory(commandId);\n            if (factory) {\n                const cmd = (yield factory.createCommand(commandId, cmdArgs, hook));\n                yield cmd.execute();\n                if (cmd.isUndoable()) {\n                    this.undoStack.push(cmd);\n                }\n                /* 触发事件回调 */\n                this.cmdChangeEvent.setValue(null);\n                return cmd;\n            }\n            throw Object.assign(new Error(`The command '${commandId}' cannot be executed. There are no active handlers available for the command.`), { code: 'NO_ACTIVE_HANDLER' });\n        });\n    }\n    /** 执行 unod Command：不会在undo stack中push新的command记录 */\n    executeUndoCommand(commandId, cmdArgs, hook = []) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const factory = this.getFactory(commandId);\n            if (factory) {\n                const cmd = yield factory.createCommand(commandId, cmdArgs, hook);\n                yield cmd.execute();\n                return cmd;\n            }\n            throw Object.assign(new Error(`The command '${commandId}' cannot be executed. There are no active handlers available for the command.`), { code: 'NO_ACTIVE_HANDLER' });\n        });\n    }\n    /**\n     * Execute the active handler for the given command and arguments.\n     *\n     * Reject if a command cannot be executed.\n     */\n    createCommand(commandId, cmdArgs, hook = []) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const factory = this.getFactory(commandId);\n            if (factory) {\n                const cmd = yield factory.createCommand(commandId, cmdArgs, hook);\n                return cmd;\n            }\n            throw Object.assign(new Error(`The command '${commandId}' cannot be executed. There are no active handlers available for the command.`), { code: 'NO_ACTIVE_HANDLER' });\n        });\n    }\n    /**\n     * 检查是否注册了Command\n     */\n    get isUndoable() {\n        return this.undoStack.length > 0;\n    }\n    /**\n     * 检查是否注册了Command\n     */\n    get isRedoable() {\n        return this.redoStack.length > 0;\n    }\n    /**\n     * 检查是否注册了Command\n     */\n    hasCommand(commandId) {\n        return this.commands.has(commandId);\n    }\n    /**\n     * Get a command for the given command identifier.\n     */\n    getCommand(id) {\n        return this.commands.get(id);\n    }\n    /**\n     * Register the given command and handler if present.\n     *\n     * Throw if a command is already registered for the given command identifier.\n     */\n    registerCommand(command, factory) {\n        if (this.factories.has(command.id)) {\n            console.warn(`A command ${command.id} is already registered.`);\n            return Disposable.NULL;\n        }\n        const toDispose = new DisposableCollection(this.doRegisterCommand(command), this.registerFactory(command.id, factory), Disposable.create(() => this.disposables.delete(command.id)));\n        this.disposables.set(command.id, toDispose);\n        return toDispose;\n    }\n    doRegisterCommand(command) {\n        this.commands.set(command.id, command);\n        return Disposable.create(() => this.disposables.delete(command.id));\n    }\n    /**\n     * Unregister command from the registry\n     *\n     * @param id\n     */\n    unregisterCommand(commandOrId) {\n        const id = NCommand.is(commandOrId) ? commandOrId.id : commandOrId;\n        const disposableCmd = this.disposables.get(id);\n        if (disposableCmd) {\n            disposableCmd.dispose();\n        }\n    }\n    /**\n     * 检查commandId是否有Factory\n     */\n    hasFactory(commandId) {\n        const factory = this.factories.get(commandId);\n        return !!factory;\n    }\n    /**\n     * Get a visible handler for the given command or `undefined`.\n     */\n    getFactory(commandId) {\n        const factory = this.factories.get(commandId);\n        return factory;\n    }\n    /**\n     * Register the given handler for the given command identifier.\n     *\n     * If there is already a handler for the given command\n     * then the given handler is registered as more specific, and\n     * has higher priority during enablement, visibility and toggle state evaluations.\n     */\n    registerFactory(commandId, factory, force = false) {\n        if (this.hasFactory(commandId) && force === false) {\n            console.error('cannot register command:', commandId);\n        }\n        this.factories.set(commandId, factory);\n        return Disposable.create(() => {\n            this.factories.delete(commandId);\n        });\n    }\n    /**\n     * Returns with all handlers for the given command. If the command does not have any handlers,\n     * or the command is not registered, returns an empty array.\n     */\n    getAllFactories() {\n        return Array.from(this.factories.entries());\n    }\n};\nGraphCommandRegistry = __decorate([\n    singleton({\n        contrib: [IFrontendApplicationContribution, IGraphCommandService],\n    }),\n    __param(0, contrib(IGraphCommandContribution)),\n    __metadata(\"design:paramtypes\", [Object])\n], GraphCommandRegistry);\nexport { GraphCommandRegistry };\n//# sourceMappingURL=graph-command.js.map"]},"metadata":{},"sourceType":"module"}