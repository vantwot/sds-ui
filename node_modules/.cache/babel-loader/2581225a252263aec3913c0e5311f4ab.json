{"ast":null,"code":"import { NumberExt } from '../../util';\nimport { Point } from '../../geometry'; // `x-align` when set to `middle` causes centering of the subelement around its new x coordinate.\n// `x-align` when set to `right` uses the x coordinate as referenced to the right of the bbox.\n\nexport var xAlign = {\n  offset: offsetWrapper('x', 'width', 'right')\n}; // `y-align` when set to `middle` causes centering of the subelement around its new y coordinate.\n// `y-align` when set to `bottom` uses the y coordinate as referenced to the bottom of the bbox.\n\nexport var yAlign = {\n  offset: offsetWrapper('y', 'height', 'bottom')\n};\nexport var resetOffset = {\n  offset: function offset(val, _ref) {\n    var refBBox = _ref.refBBox;\n    return val ? {\n      x: -refBBox.x,\n      y: -refBBox.y\n    } : {\n      x: 0,\n      y: 0\n    };\n  }\n};\n\nfunction offsetWrapper(axis, dimension, corner) {\n  return function (value, _ref2) {\n    var refBBox = _ref2.refBBox;\n    var point = new Point();\n    var delta;\n\n    if (value === 'middle') {\n      delta = refBBox[dimension] / 2;\n    } else if (value === corner) {\n      delta = refBBox[dimension];\n    } else if (typeof value === 'number' && Number.isFinite(value)) {\n      delta = value > -1 && value < 1 ? -refBBox[dimension] * value : -value;\n    } else if (NumberExt.isPercentage(value)) {\n      delta = refBBox[dimension] * parseFloat(value) / 100;\n    } else {\n      delta = 0;\n    }\n\n    point[axis] = -(refBBox[axis] + delta);\n    return point;\n  };\n}","map":{"version":3,"sources":["../../../src/registry/attr/align.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,YAA1B;AACA,SAAS,KAAT,QAAsB,gBAAtB,C,CAGA;AACA;;AACA,OAAO,IAAM,MAAM,GAAoB;AACrC,EAAA,MAAM,EAAE,aAAa,CAAC,GAAD,EAAM,OAAN,EAAe,OAAf;AADgB,CAAhC,C,CAIP;AACA;;AACA,OAAO,IAAM,MAAM,GAAoB;AACrC,EAAA,MAAM,EAAE,aAAa,CAAC,GAAD,EAAM,QAAN,EAAgB,QAAhB;AADgB,CAAhC;AAIP,OAAO,IAAM,WAAW,GAAoB;AAC1C,EAAA,MAD0C,kBACnC,GADmC,QACnB;AAAA,QAAT,OAAS,QAAT,OAAS;AACrB,WAAO,GAAG,GAAG;AAAE,MAAA,CAAC,EAAE,CAAC,OAAO,CAAC,CAAd;AAAiB,MAAA,CAAC,EAAE,CAAC,OAAO,CAAC;AAA7B,KAAH,GAAsC;AAAE,MAAA,CAAC,EAAE,CAAL;AAAQ,MAAA,CAAC,EAAE;AAAX,KAAhD;AACD;AAHyC,CAArC;;AAMP,SAAS,aAAT,CACE,IADF,EAEE,SAFF,EAGE,MAHF,EAG4B;AAE1B,SAAO,UAAC,KAAD,SAAuB;AAAA,QAAb,OAAa,SAAb,OAAa;AAC5B,QAAM,KAAK,GAAG,IAAI,KAAJ,EAAd;AACA,QAAI,KAAJ;;AACA,QAAI,KAAK,KAAK,QAAd,EAAwB;AACtB,MAAA,KAAK,GAAG,OAAO,CAAC,SAAD,CAAP,GAAqB,CAA7B;AACD,KAFD,MAEO,IAAI,KAAK,KAAK,MAAd,EAAsB;AAC3B,MAAA,KAAK,GAAG,OAAO,CAAC,SAAD,CAAf;AACD,KAFM,MAEA,IAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,MAAM,CAAC,QAAP,CAAgB,KAAhB,CAAjC,EAAyD;AAC9D,MAAA,KAAK,GAAG,KAAK,GAAG,CAAC,CAAT,IAAc,KAAK,GAAG,CAAtB,GAA0B,CAAC,OAAO,CAAC,SAAD,CAAR,GAAsB,KAAhD,GAAwD,CAAC,KAAjE;AACD,KAFM,MAEA,IAAI,SAAS,CAAC,YAAV,CAAuB,KAAvB,CAAJ,EAAmC;AACxC,MAAA,KAAK,GAAI,OAAO,CAAC,SAAD,CAAP,GAAqB,UAAU,CAAC,KAAD,CAAhC,GAA2C,GAAnD;AACD,KAFM,MAEA;AACL,MAAA,KAAK,GAAG,CAAR;AACD;;AACD,IAAA,KAAK,CAAC,IAAD,CAAL,GAAc,EAAE,OAAO,CAAC,IAAD,CAAP,GAAgB,KAAlB,CAAd;AACA,WAAO,KAAP;AACD,GAhBD;AAiBD","sourceRoot":"","sourcesContent":["import { NumberExt } from '../../util';\nimport { Point } from '../../geometry';\n// `x-align` when set to `middle` causes centering of the subelement around its new x coordinate.\n// `x-align` when set to `right` uses the x coordinate as referenced to the right of the bbox.\nexport const xAlign = {\n    offset: offsetWrapper('x', 'width', 'right'),\n};\n// `y-align` when set to `middle` causes centering of the subelement around its new y coordinate.\n// `y-align` when set to `bottom` uses the y coordinate as referenced to the bottom of the bbox.\nexport const yAlign = {\n    offset: offsetWrapper('y', 'height', 'bottom'),\n};\nexport const resetOffset = {\n    offset(val, { refBBox }) {\n        return val ? { x: -refBBox.x, y: -refBBox.y } : { x: 0, y: 0 };\n    },\n};\nfunction offsetWrapper(axis, dimension, corner) {\n    return (value, { refBBox }) => {\n        const point = new Point();\n        let delta;\n        if (value === 'middle') {\n            delta = refBBox[dimension] / 2;\n        }\n        else if (value === corner) {\n            delta = refBBox[dimension];\n        }\n        else if (typeof value === 'number' && Number.isFinite(value)) {\n            delta = value > -1 && value < 1 ? -refBBox[dimension] * value : -value;\n        }\n        else if (NumberExt.isPercentage(value)) {\n            delta = (refBBox[dimension] * parseFloat(value)) / 100;\n        }\n        else {\n            delta = 0;\n        }\n        point[axis] = -(refBBox[axis] + delta);\n        return point;\n    };\n}\n//# sourceMappingURL=align.js.map"]},"metadata":{},"sourceType":"module"}