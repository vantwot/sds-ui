{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ManaSyringe, DisposableCollection, Disposable } from '@antv/xflow-core';\nimport { IHookContribution } from '@antv/xflow-core';\nimport { XFlowNode } from '../x6-extension/node';\nimport { Shape } from '@antv/x6';\nexport const flowOptions = {\n  grid: true,\n  mousewheel: {\n    enabled: true,\n    zoomAtMousePosition: true,\n    modifiers: 'ctrl',\n    minScale: 0.5,\n    maxScale: 3\n  },\n  connecting: {\n    router: 'manhattan',\n    connector: {\n      name: 'rounded',\n      args: {\n        radius: 8\n      }\n    },\n    anchor: 'center',\n    connectionPoint: 'anchor',\n    allowBlank: false,\n    snap: {\n      radius: 20\n    },\n\n    createEdge() {\n      return new Shape.Edge({\n        attrs: {\n          line: {\n            stroke: '#A2B1C3',\n            strokeWidth: 2,\n            targetMarker: {\n              name: 'block',\n              width: 12,\n              height: 8\n            }\n          }\n        },\n        zIndex: 0\n      });\n    },\n\n    validateConnection(_ref) {\n      let {\n        targetMagnet\n      } = _ref;\n      return !!targetMagnet;\n    }\n\n  },\n  highlighting: {\n    magnetAdsorbed: {\n      name: 'stroke',\n      args: {\n        attrs: {\n          fill: '#5F95FF',\n          stroke: '#5F95FF'\n        }\n      }\n    }\n  },\n  resizing: true,\n  rotating: true,\n  selecting: {\n    enabled: true,\n    rubberband: true,\n    showNodeSelectionBox: true,\n    modifiers: 'shift'\n  },\n  snapline: true,\n  keyboard: true,\n  clipboard: true\n};\n/**\n * 内置的hook contribution\n * 处理 config上的runtime的注册项\n */\n\nlet FlowHooksContribution = class FlowHooksContribution {\n  constructor() {\n    this.toDispose = new DisposableCollection();\n\n    this.registerHookHub = () => __awaiter(this, void 0, void 0, function* () {\n      return Disposable.create(() => {});\n    });\n\n    this.registerHook = hooks => __awaiter(this, void 0, void 0, function* () {\n      const toDispose = new DisposableCollection();\n      const disposables = [hooks.addNode.registerHook({\n        name: 'flow-add-node',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const cellFactory = nodeConfig => __awaiter(this, void 0, void 0, function* () {\n            const node = new XFlowNode(Object.assign({}, nodeConfig));\n            return node;\n          });\n\n          args.cellFactory = cellFactory;\n        })\n      }), hooks.addEdge.registerHook({\n        name: 'flow-add-edge',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const cellFactory = edgeConfig => __awaiter(this, void 0, void 0, function* () {\n            delete edgeConfig.id;\n            const cell = new Shape.Edge({\n              source: {\n                cell: edgeConfig.source,\n                port: edgeConfig.sourcePortId\n              },\n              target: {\n                cell: edgeConfig.target,\n                port: edgeConfig.targetPortId\n              },\n              attrs: {\n                line: {\n                  stroke: '#A2B1C3',\n                  strokeWidth: 2,\n                  targetMarker: {\n                    name: 'block',\n                    width: 12,\n                    height: 8\n                  }\n                }\n              },\n              zIndex: -1,\n              data: Object.assign({}, edgeConfig)\n            });\n            return cell;\n          });\n\n          args.cellFactory = cellFactory;\n        })\n      }), hooks.graphOptions.registerHook({\n        name: 'assign options ',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          Object.assign(args, flowOptions);\n        })\n      })];\n      toDispose.pushAll(disposables);\n      return Disposable.create(() => {});\n    });\n  }\n\n};\nFlowHooksContribution = __decorate([ManaSyringe.singleton({\n  contrib: IHookContribution\n})], FlowHooksContribution);\nexport { FlowHooksContribution };","map":{"version":3,"sources":["../../../src/canvas-flow-extension/contributions/flow.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ManaSyringe, DisposableCollection, Disposable } from '@antv/xflow-core';\nimport { IHookContribution } from '@antv/xflow-core';\nimport { XFlowNode } from '../x6-extension/node';\nimport { Shape } from '@antv/x6';\nexport const flowOptions = {\n    grid: true,\n    mousewheel: {\n        enabled: true,\n        zoomAtMousePosition: true,\n        modifiers: 'ctrl',\n        minScale: 0.5,\n        maxScale: 3,\n    },\n    connecting: {\n        router: 'manhattan',\n        connector: {\n            name: 'rounded',\n            args: {\n                radius: 8,\n            },\n        },\n        anchor: 'center',\n        connectionPoint: 'anchor',\n        allowBlank: false,\n        snap: {\n            radius: 20,\n        },\n        createEdge() {\n            return new Shape.Edge({\n                attrs: {\n                    line: {\n                        stroke: '#A2B1C3',\n                        strokeWidth: 2,\n                        targetMarker: {\n                            name: 'block',\n                            width: 12,\n                            height: 8,\n                        },\n                    },\n                },\n                zIndex: 0,\n            });\n        },\n        validateConnection({ targetMagnet }) {\n            return !!targetMagnet;\n        },\n    },\n    highlighting: {\n        magnetAdsorbed: {\n            name: 'stroke',\n            args: {\n                attrs: {\n                    fill: '#5F95FF',\n                    stroke: '#5F95FF',\n                },\n            },\n        },\n    },\n    resizing: true,\n    rotating: true,\n    selecting: {\n        enabled: true,\n        rubberband: true,\n        showNodeSelectionBox: true,\n        modifiers: 'shift',\n    },\n    snapline: true,\n    keyboard: true,\n    clipboard: true,\n};\n/**\n * 内置的hook contribution\n * 处理 config上的runtime的注册项\n */\nlet FlowHooksContribution = class FlowHooksContribution {\n    constructor() {\n        this.toDispose = new DisposableCollection();\n        this.registerHookHub = () => __awaiter(this, void 0, void 0, function* () {\n            return Disposable.create(() => { });\n        });\n        this.registerHook = (hooks) => __awaiter(this, void 0, void 0, function* () {\n            const toDispose = new DisposableCollection();\n            const disposables = [\n                hooks.addNode.registerHook({\n                    name: 'flow-add-node',\n                    handler: (args) => __awaiter(this, void 0, void 0, function* () {\n                        const cellFactory = (nodeConfig) => __awaiter(this, void 0, void 0, function* () {\n                            const node = new XFlowNode(Object.assign({}, nodeConfig));\n                            return node;\n                        });\n                        args.cellFactory = cellFactory;\n                    }),\n                }),\n                hooks.addEdge.registerHook({\n                    name: 'flow-add-edge',\n                    handler: (args) => __awaiter(this, void 0, void 0, function* () {\n                        const cellFactory = (edgeConfig) => __awaiter(this, void 0, void 0, function* () {\n                            delete edgeConfig.id;\n                            const cell = new Shape.Edge({\n                                source: {\n                                    cell: edgeConfig.source,\n                                    port: edgeConfig.sourcePortId,\n                                },\n                                target: {\n                                    cell: edgeConfig.target,\n                                    port: edgeConfig.targetPortId,\n                                },\n                                attrs: {\n                                    line: {\n                                        stroke: '#A2B1C3',\n                                        strokeWidth: 2,\n                                        targetMarker: {\n                                            name: 'block',\n                                            width: 12,\n                                            height: 8,\n                                        },\n                                    },\n                                },\n                                zIndex: -1,\n                                data: Object.assign({}, edgeConfig),\n                            });\n                            return cell;\n                        });\n                        args.cellFactory = cellFactory;\n                    }),\n                }),\n                hooks.graphOptions.registerHook({\n                    name: 'assign options ',\n                    handler: (args) => __awaiter(this, void 0, void 0, function* () {\n                        Object.assign(args, flowOptions);\n                    }),\n                }),\n            ];\n            toDispose.pushAll(disposables);\n            return Disposable.create(() => { });\n        });\n    }\n};\nFlowHooksContribution = __decorate([\n    ManaSyringe.singleton({ contrib: IHookContribution })\n], FlowHooksContribution);\nexport { FlowHooksContribution };\n//# sourceMappingURL=flow.js.map"]},"metadata":{},"sourceType":"module"}