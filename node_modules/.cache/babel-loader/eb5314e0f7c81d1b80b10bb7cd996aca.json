{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"../lodash\");\n\nmodule.exports = initDataOrder;\n/**\n * 按照数据中的结果设置fixorder\n */\n\nfunction initDataOrder(g, nodeOrder) {\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n\n  var maxRank = _.max(_.map(simpleNodes, function (v) {\n    return g.node(v).rank;\n  }));\n\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n\n  _.forEach(nodeOrder, function (n) {\n    var node = g.node(n); // 只考虑原有节点，dummy节点需要按照后续算法排出\n\n    if (node.dummy) {\n      return;\n    }\n\n    node.fixorder = layers[node.rank].length; // 设置fixorder为当层的顺序\n\n    layers[node.rank].push(n);\n  });\n}","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/dagrejs/lib/order/init-data-order.js"],"names":["_","require","module","exports","initDataOrder","g","nodeOrder","simpleNodes","filter","nodes","v","children","length","maxRank","max","map","node","rank","layers","range","forEach","n","dummy","fixorder","push"],"mappings":"AAAA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,WAAD,CAAf;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,aAAjB;AAGA;AACA;AACA;;AACA,SAASA,aAAT,CAAuBC,CAAvB,EAA0BC,SAA1B,EAAqC;AACnC,MAAIC,WAAW,GAAGP,CAAC,CAACQ,MAAF,CAASH,CAAC,CAACI,KAAF,EAAT,EAAoB,UAASC,CAAT,EAAY;AAChD,WAAO,CAACL,CAAC,CAACM,QAAF,CAAWD,CAAX,EAAcE,MAAtB;AACD,GAFiB,CAAlB;;AAGA,MAAIC,OAAO,GAAGb,CAAC,CAACc,GAAF,CAAMd,CAAC,CAACe,GAAF,CAAMR,WAAN,EAAmB,UAASG,CAAT,EAAY;AAAE,WAAOL,CAAC,CAACW,IAAF,CAAON,CAAP,EAAUO,IAAjB;AAAwB,GAAzD,CAAN,CAAd;;AACA,MAAIC,MAAM,GAAGlB,CAAC,CAACe,GAAF,CAAMf,CAAC,CAACmB,KAAF,CAAQN,OAAO,GAAG,CAAlB,CAAN,EAA4B,YAAW;AAAE,WAAO,EAAP;AAAY,GAArD,CAAb;;AACAb,EAAAA,CAAC,CAACoB,OAAF,CAAUd,SAAV,EAAqB,UAASe,CAAT,EAAY;AAC/B,QAAIL,IAAI,GAAGX,CAAC,CAACW,IAAF,CAAOK,CAAP,CAAX,CAD+B,CAE/B;;AACA,QAAIL,IAAI,CAACM,KAAT,EAAgB;AACd;AACD;;AACDN,IAAAA,IAAI,CAACO,QAAL,GAAgBL,MAAM,CAACF,IAAI,CAACC,IAAN,CAAN,CAAkBL,MAAlC,CAN+B,CAMW;;AAC1CM,IAAAA,MAAM,CAACF,IAAI,CAACC,IAAN,CAAN,CAAkBO,IAAlB,CAAuBH,CAAvB;AACD,GARD;AASD","sourcesContent":["\"use strict\";\n\nvar _ = require(\"../lodash\");\n\nmodule.exports = initDataOrder;\n\n\n/**\n * 按照数据中的结果设置fixorder\n */\nfunction initDataOrder(g, nodeOrder) {\n  var simpleNodes = _.filter(g.nodes(), function(v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(_.map(simpleNodes, function(v) { return g.node(v).rank; }));\n  var layers = _.map(_.range(maxRank + 1), function() { return []; });\n  _.forEach(nodeOrder, function(n) {\n    var node = g.node(n);\n    // 只考虑原有节点，dummy节点需要按照后续算法排出\n    if (node.dummy) {\n      return;\n    }\n    node.fixorder = layers[node.rank].length; // 设置fixorder为当层的顺序\n    layers[node.rank].push(n);\n  });\n}"]},"metadata":{},"sourceType":"script"}