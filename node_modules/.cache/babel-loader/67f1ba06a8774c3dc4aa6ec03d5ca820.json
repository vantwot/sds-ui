{"ast":null,"code":"import React from 'react';\nimport { useXFlowApp } from '@antv/xflow-core';\nimport { ToolbarConfig } from './config';\nimport { XFlowToolbar } from './render-components';\nexport var CanvasToolbar = function CanvasToolbar(props) {\n  var app = useXFlowApp();\n  var hasApp = !!app;\n  /** 获取ContextMenu的配置 */\n\n  var contextMenuConfig = React.useMemo(function () {\n    return props.config ? props.config : new ToolbarConfig();\n  }, [props.config]);\n\n  if (!hasApp) {\n    return null;\n  }\n\n  return React.createElement(XFlowToolbar, Object.assign({}, props, {\n    config: contextMenuConfig\n  }));\n};\nexport var createToolbarConfig = function createToolbarConfig(addOptions) {\n  return function (value) {\n    /** bridge config and value */\n    var proxy = React.useMemo(function () {\n      return {\n        getValue: function getValue() {\n          return {};\n        }\n      };\n    }, []);\n\n    proxy.getValue = function () {\n      return value;\n    };\n    /** 生成config */\n\n\n    var toolbarConfig = React.useMemo(function () {\n      var config = new ToolbarConfig();\n      addOptions(config, proxy);\n      return config;\n    }, [proxy]);\n    return toolbarConfig;\n  };\n};","map":{"version":3,"sources":["../../src/canvas-toolbar/index.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,WAAT,QAA4B,kBAA5B;AACA,SAAS,aAAT,QAA8B,UAA9B;AACA,SAAS,YAAT,QAA6B,qBAA7B;AAGA,OAAO,IAAM,aAAa,GAA4B,SAAzC,aAAyC,CAAA,KAAK,EAAG;AAC5D,MAAM,GAAG,GAAG,WAAW,EAAvB;AACA,MAAM,MAAM,GAAG,CAAC,CAAC,GAAjB;AACA;;AACA,MAAM,iBAAiB,GAAG,KAAK,CAAC,OAAN,CACxB;AAAA,WAAO,KAAK,CAAC,MAAN,GAAe,KAAK,CAAC,MAArB,GAA8B,IAAI,aAAJ,EAArC;AAAA,GADwB,EAExB,CAAC,KAAK,CAAC,MAAP,CAFwB,CAA1B;;AAKA,MAAI,CAAC,MAAL,EAAa;AACX,WAAO,IAAP;AACD;;AAED,SAAO,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,EAAU;AAAE,IAAA,MAAM,EAAE;AAAV,GAAV,CAAb,CAAP;AACD,CAdM;AAqBP,OAAO,IAAM,mBAAmB,GAC9B,SADW,mBACX,CAA0B,UAA1B;AAAA,SACA,UAAC,KAAD,EAAc;AACZ;AACA,QAAM,KAAK,GAAG,KAAK,CAAC,OAAN,CAAc;AAAA,aAAO;AAAE,QAAA,QAAQ,EAAE;AAAA,iBAAO,EAAP;AAAA;AAAZ,OAAP;AAAA,KAAd,EAAqD,EAArD,CAAd;;AACA,IAAA,KAAK,CAAC,QAAN,GAAiB;AAAA,aAAM,KAAN;AAAA,KAAjB;AACA;;;AACA,QAAM,aAAa,GAAG,KAAK,CAAC,OAAN,CAAc,YAAK;AACvC,UAAM,MAAM,GAAG,IAAI,aAAJ,EAAf;AACA,MAAA,UAAU,CAAC,MAAD,EAAS,KAAT,CAAV;AACA,aAAO,MAAP;AACD,KAJqB,EAInB,CAAC,KAAD,CAJmB,CAAtB;AAMA,WAAO,aAAP;AACD,GAbD;AAAA,CADK","sourceRoot":"","sourcesContent":["import React from 'react';\nimport { useXFlowApp } from '@antv/xflow-core';\nimport { ToolbarConfig } from './config';\nimport { XFlowToolbar } from './render-components';\nexport const CanvasToolbar = props => {\n    const app = useXFlowApp();\n    const hasApp = !!app;\n    /** 获取ContextMenu的配置 */\n    const contextMenuConfig = React.useMemo(() => (props.config ? props.config : new ToolbarConfig()), [props.config]);\n    if (!hasApp) {\n        return null;\n    }\n    return React.createElement(XFlowToolbar, Object.assign({}, props, { config: contextMenuConfig }));\n};\nexport const createToolbarConfig = (addOptions) => (value) => {\n    /** bridge config and value */\n    const proxy = React.useMemo(() => ({ getValue: () => ({}) }), []);\n    proxy.getValue = () => value;\n    /** 生成config */\n    const toolbarConfig = React.useMemo(() => {\n        const config = new ToolbarConfig();\n        addOptions(config, proxy);\n        return config;\n    }, [proxy]);\n    return toolbarConfig;\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}