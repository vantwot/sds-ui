{"ast":null,"code":"import _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Util } from '../../global';\nimport { FunctionExt } from '../../util';\nimport { Rectangle } from '../../geometry';\nimport { View } from '../../view/view';\nimport { Graph } from '../../graph/graph';\nexport var Dnd = /*#__PURE__*/function (_View) {\n  _inherits(Dnd, _View);\n\n  var _super = _createSuper(Dnd);\n\n  function Dnd(options) {\n    var _this;\n\n    _classCallCheck(this, Dnd);\n\n    _this = _super.call(this);\n    _this.options = Object.assign(Object.assign({}, Dnd.defaults), options);\n    _this.container = document.createElement('div');\n    _this.$container = _this.$(_this.container).addClass(_this.prefixClassName('widget-dnd'));\n    _this.draggingGraph = new Graph(Object.assign(Object.assign({}, _this.options.delegateGraphOptions), {\n      container: document.createElement('div'),\n      width: 1,\n      height: 1\n    }));\n\n    _this.$container.append(_this.draggingGraph.container);\n\n    return _this;\n  }\n\n  _createClass(Dnd, [{\n    key: \"targetScroller\",\n    get: function get() {\n      var target = this.options.target;\n      return Graph.isGraph(target) ? target.scroller.widget : target;\n    }\n  }, {\n    key: \"targetGraph\",\n    get: function get() {\n      var target = this.options.target;\n      return Graph.isGraph(target) ? target : target.graph;\n    }\n  }, {\n    key: \"targetModel\",\n    get: function get() {\n      return this.targetGraph.model;\n    }\n  }, {\n    key: \"snapline\",\n    get: function get() {\n      return this.targetGraph.snapline.widget;\n    }\n  }, {\n    key: \"start\",\n    value: function start(node, evt) {\n      var e = evt;\n      e.preventDefault();\n      this.targetModel.startBatch('dnd');\n      this.$container.addClass('dragging').appendTo(this.options.containerParent || document.body);\n      this.sourceNode = node;\n      this.prepareDragging(node, e.clientX, e.clientY);\n      var local = this.updateNodePosition(e.clientX, e.clientY);\n\n      if (this.isSnaplineEnabled()) {\n        this.snapline.captureCursorOffset({\n          e: e,\n          node: node,\n          cell: node,\n          view: this.draggingView,\n          x: local.x,\n          y: local.y\n        });\n        this.draggingNode.on('change:position', this.snap, this);\n      }\n\n      this.delegateDocumentEvents(Dnd.documentEvents, e.data);\n    }\n  }, {\n    key: \"isSnaplineEnabled\",\n    value: function isSnaplineEnabled() {\n      return this.snapline && !this.snapline.disabled;\n    }\n  }, {\n    key: \"prepareDragging\",\n    value: function prepareDragging(sourceNode, clientX, clientY) {\n      var draggingGraph = this.draggingGraph;\n      var draggingModel = draggingGraph.model;\n      var draggingNode = this.options.getDragNode(sourceNode, {\n        sourceNode: sourceNode,\n        draggingGraph: draggingGraph,\n        targetGraph: this.targetGraph\n      });\n      draggingNode.position(0, 0);\n      var padding = 5;\n\n      if (this.isSnaplineEnabled()) {\n        padding += this.snapline.options.tolerance || 0;\n      }\n\n      if (this.isSnaplineEnabled() || this.options.scaled) {\n        var scale = this.targetGraph.transform.getScale();\n        draggingGraph.scale(scale.sx, scale.sy);\n        padding *= Math.max(scale.sx, scale.sy);\n      } else {\n        draggingGraph.scale(1, 1);\n      }\n\n      this.clearDragging();\n\n      if (this.options.animation) {\n        this.$container.stop(true, true);\n      }\n\n      draggingModel.resetCells([draggingNode]);\n      var delegateView = draggingGraph.findViewByCell(draggingNode);\n      delegateView.undelegateEvents();\n      delegateView.cell.off('changed');\n      draggingGraph.fitToContent({\n        padding: padding,\n        allowNewOrigin: 'any'\n      });\n      var bbox = delegateView.getBBox();\n      this.geometryBBox = delegateView.getBBox({\n        useCellGeometry: true\n      });\n      this.delta = this.geometryBBox.getTopLeft().diff(bbox.getTopLeft());\n      this.draggingNode = draggingNode;\n      this.draggingView = delegateView;\n      this.draggingBBox = draggingNode.getBBox();\n      this.padding = padding;\n      this.originOffset = this.updateGraphPosition(clientX, clientY);\n    }\n  }, {\n    key: \"updateGraphPosition\",\n    value: function updateGraphPosition(clientX, clientY) {\n      var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n      var delta = this.delta;\n      var nodeBBox = this.geometryBBox;\n      var padding = this.padding || 5;\n      var offset = {\n        left: clientX - delta.x - nodeBBox.width / 2 - padding,\n        top: clientY - delta.y - nodeBBox.height / 2 - padding + scrollTop\n      };\n\n      if (this.draggingGraph) {\n        this.$container.offset(offset);\n      }\n\n      return offset;\n    }\n  }, {\n    key: \"updateNodePosition\",\n    value: function updateNodePosition(x, y) {\n      var local = this.targetGraph.clientToLocal(x, y);\n      var bbox = this.draggingBBox;\n      local.x -= bbox.width / 2;\n      local.y -= bbox.height / 2;\n      this.draggingNode.position(local.x, local.y);\n      return local;\n    }\n  }, {\n    key: \"snap\",\n    value: function snap(_ref) {\n      var cell = _ref.cell,\n          current = _ref.current,\n          options = _ref.options;\n      var node = cell;\n\n      if (options.snapped) {\n        var bbox = this.draggingBBox;\n        node.position(bbox.x + options.tx, bbox.y + options.ty, {\n          silent: true\n        });\n        this.draggingView.translate();\n        node.position(current.x, current.y, {\n          silent: true\n        });\n        this.snapOffset = {\n          x: options.tx,\n          y: options.ty\n        };\n      } else {\n        this.snapOffset = null;\n      }\n    }\n  }, {\n    key: \"onDragging\",\n    value: function onDragging(evt) {\n      var draggingView = this.draggingView;\n\n      if (draggingView) {\n        evt.preventDefault();\n        var e = this.normalizeEvent(evt);\n        var clientX = e.clientX;\n        var clientY = e.clientY;\n        this.updateGraphPosition(clientX, clientY);\n        var local = this.updateNodePosition(clientX, clientY);\n        var embeddingMode = this.targetGraph.options.embedding.enabled;\n        var isValidArea = (embeddingMode || this.isSnaplineEnabled()) && this.isInsideValidArea({\n          x: clientX,\n          y: clientY\n        });\n\n        if (embeddingMode) {\n          draggingView.setEventData(e, {\n            graph: this.targetGraph,\n            candidateEmbedView: this.candidateEmbedView\n          });\n          var data = draggingView.getEventData(e);\n\n          if (isValidArea) {\n            draggingView.processEmbedding(e, data);\n          } else {\n            draggingView.clearEmbedding(data);\n          }\n\n          this.candidateEmbedView = data.candidateEmbedView;\n        } // update snapline\n\n\n        if (this.isSnaplineEnabled()) {\n          if (isValidArea) {\n            this.snapline.snapOnMoving({\n              e: e,\n              view: draggingView,\n              x: local.x,\n              y: local.y\n            });\n          } else {\n            this.snapline.hide();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"onDragEnd\",\n    value: function onDragEnd(evt) {\n      var _this2 = this;\n\n      var draggingNode = this.draggingNode;\n\n      if (draggingNode) {\n        var e = this.normalizeEvent(evt);\n        var draggingView = this.draggingView;\n        var draggingBBox = this.draggingBBox;\n        var snapOffset = this.snapOffset;\n        var x = draggingBBox.x;\n        var y = draggingBBox.y;\n\n        if (snapOffset) {\n          x += snapOffset.x;\n          y += snapOffset.y;\n        }\n\n        draggingNode.position(x, y, {\n          silent: true\n        });\n        var ret = this.drop(draggingNode, {\n          x: e.clientX,\n          y: e.clientY\n        });\n\n        var callback = function callback(node) {\n          if (node) {\n            _this2.onDropped(draggingNode);\n\n            if (_this2.targetGraph.options.embedding.enabled && draggingView) {\n              draggingView.setEventData(e, {\n                cell: node,\n                graph: _this2.targetGraph,\n                candidateEmbedView: _this2.candidateEmbedView\n              });\n              draggingView.finalizeEmbedding(e, draggingView.getEventData(e));\n            }\n          } else {\n            _this2.onDropInvalid();\n          }\n\n          _this2.candidateEmbedView = null;\n\n          _this2.targetModel.stopBatch('dnd');\n        };\n\n        if (FunctionExt.isAsync(ret)) {\n          // stop dragging\n          this.undelegateDocumentEvents();\n          ret.then(callback); // eslint-disable-line\n        } else {\n          callback(ret);\n        }\n      }\n    }\n  }, {\n    key: \"clearDragging\",\n    value: function clearDragging() {\n      if (this.draggingNode) {\n        this.sourceNode = null;\n        this.draggingNode.remove();\n        this.draggingNode = null;\n        this.draggingView = null;\n        this.delta = null;\n        this.padding = null;\n        this.snapOffset = null;\n        this.originOffset = null;\n        this.undelegateDocumentEvents();\n      }\n    }\n  }, {\n    key: \"onDropped\",\n    value: function onDropped(draggingNode) {\n      if (this.draggingNode === draggingNode) {\n        this.clearDragging();\n        this.$container.removeClass('dragging').remove();\n      }\n    }\n  }, {\n    key: \"onDropInvalid\",\n    value: function onDropInvalid() {\n      var _this3 = this;\n\n      var draggingNode = this.draggingNode;\n\n      if (draggingNode) {\n        var anim = this.options.animation;\n\n        if (anim) {\n          var duration = typeof anim === 'object' && anim.duration || 150;\n          var easing = typeof anim === 'object' && anim.easing || 'swing';\n          this.draggingView = null;\n          this.$container.animate(this.originOffset, duration, easing, function () {\n            return _this3.onDropped(draggingNode);\n          });\n        } else {\n          this.onDropped(draggingNode);\n        }\n      }\n    }\n  }, {\n    key: \"isInsideValidArea\",\n    value: function isInsideValidArea(p) {\n      var targetRect;\n      var targetGraph = this.targetGraph;\n      var targetScroller = this.targetScroller;\n\n      if (targetScroller) {\n        if (targetScroller.options.autoResize) {\n          targetRect = this.getDropArea(targetScroller.container);\n        } else {\n          var outter = this.getDropArea(targetScroller.container);\n          targetRect = this.getDropArea(targetGraph.container).intersectsWithRect(outter);\n        }\n      } else {\n        targetRect = this.getDropArea(targetGraph.container);\n      }\n\n      return targetRect && targetRect.containsPoint(p);\n    }\n  }, {\n    key: \"getDropArea\",\n    value: function getDropArea(elem) {\n      var $elem = this.$(elem);\n      var offset = $elem.offset();\n      var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n      var scrollLeft = document.body.scrollLeft || document.documentElement.scrollLeft;\n      return Rectangle.create({\n        x: offset.left + parseInt($elem.css('border-left-width'), 10) - scrollLeft,\n        y: offset.top + parseInt($elem.css('border-top-width'), 10) - scrollTop,\n        width: $elem.innerWidth(),\n        height: $elem.innerHeight()\n      });\n    }\n  }, {\n    key: \"drop\",\n    value: function drop(draggingNode, pos) {\n      var _this4 = this;\n\n      if (this.isInsideValidArea(pos)) {\n        var targetGraph = this.targetGraph;\n        var targetModel = targetGraph.model;\n        var local = targetGraph.clientToLocal(pos);\n        var sourceNode = this.sourceNode;\n        var droppingNode = this.options.getDropNode(draggingNode, {\n          sourceNode: sourceNode,\n          draggingNode: draggingNode,\n          targetGraph: this.targetGraph,\n          draggingGraph: this.draggingGraph\n        });\n        var bbox = droppingNode.getBBox();\n        local.x += bbox.x - bbox.width / 2;\n        local.y += bbox.y - bbox.height / 2;\n        var gridSize = this.snapOffset ? 1 : targetGraph.getGridSize();\n        droppingNode.position(Util.snapToGrid(local.x, gridSize), Util.snapToGrid(local.y, gridSize));\n        droppingNode.removeZIndex();\n        var validateNode = this.options.validateNode;\n        var ret = validateNode ? validateNode(droppingNode, {\n          sourceNode: sourceNode,\n          draggingNode: draggingNode,\n          droppingNode: droppingNode,\n          targetGraph: targetGraph,\n          draggingGraph: this.draggingGraph\n        }) : true;\n\n        if (typeof ret === 'boolean') {\n          if (ret) {\n            targetModel.addCell(droppingNode, {\n              stencil: this.cid\n            });\n            return droppingNode;\n          }\n\n          return null;\n        }\n\n        return FunctionExt.toDeferredBoolean(ret).then(function (valid) {\n          if (valid) {\n            targetModel.addCell(droppingNode, {\n              stencil: _this4.cid\n            });\n            return droppingNode;\n          }\n\n          return null;\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"onRemove\",\n    value: function onRemove() {\n      if (this.draggingGraph) {\n        this.draggingGraph.view.remove();\n        this.draggingGraph.dispose();\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.remove();\n    }\n  }]);\n\n  return Dnd;\n}(View);\n\n__decorate([View.dispose()], Dnd.prototype, \"dispose\", null);\n\n(function (Dnd) {\n  Dnd.defaults = {\n    animation: false,\n    getDragNode: function getDragNode(sourceNode) {\n      return sourceNode.clone();\n    },\n    getDropNode: function getDropNode(draggingNode) {\n      return draggingNode.clone();\n    }\n  };\n  Dnd.documentEvents = {\n    mousemove: 'onDragging',\n    touchmove: 'onDragging',\n    mouseup: 'onDragEnd',\n    touchend: 'onDragEnd',\n    touchcancel: 'onDragEnd'\n  };\n})(Dnd || (Dnd = {}));","map":{"version":3,"sources":["../../../src/addon/dnd/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,SAAS,IAAT,QAAqB,cAArB;AACA,SAAS,WAAT,QAA4B,YAA5B;AACA,SAAS,SAAT,QAAiC,gBAAjC;AAGA,SAAS,IAAT,QAAqB,iBAArB;AAEA,SAAS,KAAT,QAAsB,mBAAtB;AAIA,WAAa,GAAb;AAAA;;AAAA;;AAiCE,eAAY,OAAZ,EAAwE;AAAA;;AAAA;;AACtE;AAEA,UAAK,OAAL,GAAe,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACV,GAAG,CAAC,QADM,CAAA,EAEV,OAFU,CAAf;AAKA,UAAK,SAAL,GAAiB,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAAjB;AACA,UAAK,UAAL,GAAkB,MAAK,CAAL,CAAO,MAAK,SAAZ,EAAuB,QAAvB,CAChB,MAAK,eAAL,CAAqB,YAArB,CADgB,CAAlB;AAIA,UAAK,aAAL,GAAqB,IAAI,KAAJ,CAAS,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACzB,MAAK,OAAL,CAAa,oBADY,CAAA,EACQ;AACpC,MAAA,SAAS,EAAE,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CADyB;AAEpC,MAAA,KAAK,EAAE,CAF6B;AAGpC,MAAA,MAAM,EAAE;AAH4B,KADR,CAAT,CAArB;;AAOA,UAAK,UAAL,CAAgB,MAAhB,CAAuB,MAAK,aAAL,CAAmB,SAA1C;;AApBsE;AAqBvE;;AAtDH;AAAA;AAAA,SAeE,eAA4B;AAC1B,UAAM,MAAM,GAAG,KAAK,OAAL,CAAa,MAA5B;AACA,aAAO,KAAK,CAAC,OAAN,CAAc,MAAd,IAAwB,MAAM,CAAC,QAAP,CAAgB,MAAxC,GAAiD,MAAxD;AACD;AAlBH;AAAA;AAAA,SAoBE,eAAyB;AACvB,UAAM,MAAM,GAAG,KAAK,OAAL,CAAa,MAA5B;AACA,aAAO,KAAK,CAAC,OAAN,CAAc,MAAd,IAAwB,MAAxB,GAAiC,MAAM,CAAC,KAA/C;AACD;AAvBH;AAAA;AAAA,SAyBE,eAAyB;AACvB,aAAO,KAAK,WAAL,CAAiB,KAAxB;AACD;AA3BH;AAAA;AAAA,SA6BE,eAAsB;AACpB,aAAO,KAAK,WAAL,CAAiB,QAAjB,CAA0B,MAAjC;AACD;AA/BH;AAAA;AAAA,WAwDE,eAAM,IAAN,EAAkB,GAAlB,EAAyD;AACvD,UAAM,CAAC,GAAG,GAAV;AAEA,MAAA,CAAC,CAAC,cAAF;AAEA,WAAK,WAAL,CAAiB,UAAjB,CAA4B,KAA5B;AACA,WAAK,UAAL,CACG,QADH,CACY,UADZ,EAEG,QAFH,CAEY,KAAK,OAAL,CAAa,eAAb,IAAgC,QAAQ,CAAC,IAFrD;AAIA,WAAK,UAAL,GAAkB,IAAlB;AACA,WAAK,eAAL,CAAqB,IAArB,EAA2B,CAAC,CAAC,OAA7B,EAAsC,CAAC,CAAC,OAAxC;AAEA,UAAM,KAAK,GAAG,KAAK,kBAAL,CAAwB,CAAC,CAAC,OAA1B,EAAmC,CAAC,CAAC,OAArC,CAAd;;AAEA,UAAI,KAAK,iBAAL,EAAJ,EAA8B;AAC5B,aAAK,QAAL,CAAc,mBAAd,CAAkC;AAChC,UAAA,CAAC,EAAD,CADgC;AAEhC,UAAA,IAAI,EAAJ,IAFgC;AAGhC,UAAA,IAAI,EAAE,IAH0B;AAIhC,UAAA,IAAI,EAAE,KAAK,YAJqB;AAKhC,UAAA,CAAC,EAAE,KAAK,CAAC,CALuB;AAMhC,UAAA,CAAC,EAAE,KAAK,CAAC;AANuB,SAAlC;AAQA,aAAK,YAAL,CAAmB,EAAnB,CAAsB,iBAAtB,EAAyC,KAAK,IAA9C,EAAoD,IAApD;AACD;;AAED,WAAK,sBAAL,CAA4B,GAAG,CAAC,cAAhC,EAAgD,CAAC,CAAC,IAAlD;AACD;AApFH;AAAA;AAAA,WAsFY,6BAAiB;AACzB,aAAO,KAAK,QAAL,IAAiB,CAAC,KAAK,QAAL,CAAc,QAAvC;AACD;AAxFH;AAAA;AAAA,WA0FY,yBACR,UADQ,EAER,OAFQ,EAGR,OAHQ,EAGO;AAEf,UAAM,aAAa,GAAG,KAAK,aAA3B;AACA,UAAM,aAAa,GAAG,aAAa,CAAC,KAApC;AACA,UAAM,YAAY,GAAG,KAAK,OAAL,CAAa,WAAb,CAAyB,UAAzB,EAAqC;AACxD,QAAA,UAAU,EAAV,UADwD;AAExD,QAAA,aAAa,EAAb,aAFwD;AAGxD,QAAA,WAAW,EAAE,KAAK;AAHsC,OAArC,CAArB;AAMA,MAAA,YAAY,CAAC,QAAb,CAAsB,CAAtB,EAAyB,CAAzB;AAEA,UAAI,OAAO,GAAG,CAAd;;AACA,UAAI,KAAK,iBAAL,EAAJ,EAA8B;AAC5B,QAAA,OAAO,IAAI,KAAK,QAAL,CAAc,OAAd,CAAsB,SAAtB,IAAmC,CAA9C;AACD;;AAED,UAAI,KAAK,iBAAL,MAA4B,KAAK,OAAL,CAAa,MAA7C,EAAqD;AACnD,YAAM,KAAK,GAAG,KAAK,WAAL,CAAiB,SAAjB,CAA2B,QAA3B,EAAd;AACA,QAAA,aAAa,CAAC,KAAd,CAAoB,KAAK,CAAC,EAA1B,EAA8B,KAAK,CAAC,EAApC;AACA,QAAA,OAAO,IAAI,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,EAAf,EAAmB,KAAK,CAAC,EAAzB,CAAX;AACD,OAJD,MAIO;AACL,QAAA,aAAa,CAAC,KAAd,CAAoB,CAApB,EAAuB,CAAvB;AACD;;AAED,WAAK,aAAL;;AAEA,UAAI,KAAK,OAAL,CAAa,SAAjB,EAA4B;AAC1B,aAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,EAA2B,IAA3B;AACD;;AAED,MAAA,aAAa,CAAC,UAAd,CAAyB,CAAC,YAAD,CAAzB;AAEA,UAAM,YAAY,GAAG,aAAa,CAAC,cAAd,CAA6B,YAA7B,CAArB;AACA,MAAA,YAAY,CAAC,gBAAb;AACA,MAAA,YAAY,CAAC,IAAb,CAAkB,GAAlB,CAAsB,SAAtB;AACA,MAAA,aAAa,CAAC,YAAd,CAA2B;AACzB,QAAA,OAAO,EAAP,OADyB;AAEzB,QAAA,cAAc,EAAE;AAFS,OAA3B;AAKA,UAAM,IAAI,GAAG,YAAY,CAAC,OAAb,EAAb;AACA,WAAK,YAAL,GAAoB,YAAY,CAAC,OAAb,CAAqB;AAAE,QAAA,eAAe,EAAE;AAAnB,OAArB,CAApB;AACA,WAAK,KAAL,GAAa,KAAK,YAAL,CAAkB,UAAlB,GAA+B,IAA/B,CAAoC,IAAI,CAAC,UAAL,EAApC,CAAb;AACA,WAAK,YAAL,GAAoB,YAApB;AACA,WAAK,YAAL,GAAoB,YAApB;AACA,WAAK,YAAL,GAAoB,YAAY,CAAC,OAAb,EAApB;AACA,WAAK,OAAL,GAAe,OAAf;AACA,WAAK,YAAL,GAAoB,KAAK,mBAAL,CAAyB,OAAzB,EAAkC,OAAlC,CAApB;AACD;AA9IH;AAAA;AAAA,WAgJY,6BAAoB,OAApB,EAAqC,OAArC,EAAoD;AAC5D,UAAM,SAAS,GACb,QAAQ,CAAC,IAAT,CAAc,SAAd,IAA2B,QAAQ,CAAC,eAAT,CAAyB,SADtD;AAEA,UAAM,KAAK,GAAG,KAAK,KAAnB;AACA,UAAM,QAAQ,GAAG,KAAK,YAAtB;AACA,UAAM,OAAO,GAAG,KAAK,OAAL,IAAgB,CAAhC;AACA,UAAM,MAAM,GAAG;AACb,QAAA,IAAI,EAAE,OAAO,GAAG,KAAK,CAAC,CAAhB,GAAoB,QAAQ,CAAC,KAAT,GAAiB,CAArC,GAAyC,OADlC;AAEb,QAAA,GAAG,EAAE,OAAO,GAAG,KAAK,CAAC,CAAhB,GAAoB,QAAQ,CAAC,MAAT,GAAkB,CAAtC,GAA0C,OAA1C,GAAoD;AAF5C,OAAf;;AAKA,UAAI,KAAK,aAAT,EAAwB;AACtB,aAAK,UAAL,CAAgB,MAAhB,CAAuB,MAAvB;AACD;;AAED,aAAO,MAAP;AACD;AAhKH;AAAA;AAAA,WAkKY,4BAAmB,CAAnB,EAA8B,CAA9B,EAAuC;AAC/C,UAAM,KAAK,GAAG,KAAK,WAAL,CAAiB,aAAjB,CAA+B,CAA/B,EAAkC,CAAlC,CAAd;AACA,UAAM,IAAI,GAAG,KAAK,YAAlB;AACA,MAAA,KAAK,CAAC,CAAN,IAAW,IAAI,CAAC,KAAL,GAAa,CAAxB;AACA,MAAA,KAAK,CAAC,CAAN,IAAW,IAAI,CAAC,MAAL,GAAc,CAAzB;AACA,WAAK,YAAL,CAAmB,QAAnB,CAA4B,KAAK,CAAC,CAAlC,EAAqC,KAAK,CAAC,CAA3C;AACA,aAAO,KAAP;AACD;AAzKH;AAAA;AAAA,WA2KY,oBAI0B;AAAA,UAHlC,IAGkC,QAHlC,IAGkC;AAAA,UAFlC,OAEkC,QAFlC,OAEkC;AAAA,UADlC,OACkC,QADlC,OACkC;AAClC,UAAM,IAAI,GAAG,IAAb;;AACA,UAAI,OAAO,CAAC,OAAZ,EAAqB;AACnB,YAAM,IAAI,GAAG,KAAK,YAAlB;AACA,QAAA,IAAI,CAAC,QAAL,CAAc,IAAI,CAAC,CAAL,GAAS,OAAO,CAAC,EAA/B,EAAmC,IAAI,CAAC,CAAL,GAAS,OAAO,CAAC,EAApD,EAAwD;AAAE,UAAA,MAAM,EAAE;AAAV,SAAxD;AACA,aAAK,YAAL,CAAmB,SAAnB;AACA,QAAA,IAAI,CAAC,QAAL,CAAc,OAAQ,CAAC,CAAvB,EAA0B,OAAQ,CAAC,CAAnC,EAAsC;AAAE,UAAA,MAAM,EAAE;AAAV,SAAtC;AAEA,aAAK,UAAL,GAAkB;AAChB,UAAA,CAAC,EAAE,OAAO,CAAC,EADK;AAEhB,UAAA,CAAC,EAAE,OAAO,CAAC;AAFK,SAAlB;AAID,OAVD,MAUO;AACL,aAAK,UAAL,GAAkB,IAAlB;AACD;AACF;AA9LH;AAAA;AAAA,WAgMY,oBAAW,GAAX,EAAqC;AAC7C,UAAM,YAAY,GAAG,KAAK,YAA1B;;AACA,UAAI,YAAJ,EAAkB;AAChB,QAAA,GAAG,CAAC,cAAJ;AACA,YAAM,CAAC,GAAG,KAAK,cAAL,CAAoB,GAApB,CAAV;AACA,YAAM,OAAO,GAAG,CAAC,CAAC,OAAlB;AACA,YAAM,OAAO,GAAG,CAAC,CAAC,OAAlB;AAEA,aAAK,mBAAL,CAAyB,OAAzB,EAAkC,OAAlC;AACA,YAAM,KAAK,GAAG,KAAK,kBAAL,CAAwB,OAAxB,EAAiC,OAAjC,CAAd;AACA,YAAM,aAAa,GAAG,KAAK,WAAL,CAAiB,OAAjB,CAAyB,SAAzB,CAAmC,OAAzD;AACA,YAAM,WAAW,GACf,CAAC,aAAa,IAAI,KAAK,iBAAL,EAAlB,KACA,KAAK,iBAAL,CAAuB;AACrB,UAAA,CAAC,EAAE,OADkB;AAErB,UAAA,CAAC,EAAE;AAFkB,SAAvB,CAFF;;AAOA,YAAI,aAAJ,EAAmB;AACjB,UAAA,YAAY,CAAC,YAAb,CAA0B,CAA1B,EAA6B;AAC3B,YAAA,KAAK,EAAE,KAAK,WADe;AAE3B,YAAA,kBAAkB,EAAE,KAAK;AAFE,WAA7B;AAIA,cAAM,IAAI,GAAG,YAAY,CAAC,YAAb,CAA+B,CAA/B,CAAb;;AACA,cAAI,WAAJ,EAAiB;AACf,YAAA,YAAY,CAAC,gBAAb,CAA8B,CAA9B,EAAiC,IAAjC;AACD,WAFD,MAEO;AACL,YAAA,YAAY,CAAC,cAAb,CAA4B,IAA5B;AACD;;AACD,eAAK,kBAAL,GAA0B,IAAI,CAAC,kBAA/B;AACD,SA5Be,CA8BhB;;;AACA,YAAI,KAAK,iBAAL,EAAJ,EAA8B;AAC5B,cAAI,WAAJ,EAAiB;AACf,iBAAK,QAAL,CAAc,YAAd,CAA2B;AACzB,cAAA,CAAC,EAAD,CADyB;AAEzB,cAAA,IAAI,EAAE,YAFmB;AAGzB,cAAA,CAAC,EAAE,KAAK,CAAC,CAHgB;AAIzB,cAAA,CAAC,EAAE,KAAK,CAAC;AAJgB,aAA3B;AAMD,WAPD,MAOO;AACL,iBAAK,QAAL,CAAc,IAAd;AACD;AACF;AACF;AACF;AA9OH;AAAA;AAAA,WAgPY,mBAAU,GAAV,EAAkC;AAAA;;AAC1C,UAAM,YAAY,GAAG,KAAK,YAA1B;;AACA,UAAI,YAAJ,EAAkB;AAChB,YAAM,CAAC,GAAG,KAAK,cAAL,CAAoB,GAApB,CAAV;AACA,YAAM,YAAY,GAAG,KAAK,YAA1B;AACA,YAAM,YAAY,GAAG,KAAK,YAA1B;AACA,YAAM,UAAU,GAAG,KAAK,UAAxB;AACA,YAAI,CAAC,GAAG,YAAY,CAAC,CAArB;AACA,YAAI,CAAC,GAAG,YAAY,CAAC,CAArB;;AAEA,YAAI,UAAJ,EAAgB;AACd,UAAA,CAAC,IAAI,UAAU,CAAC,CAAhB;AACA,UAAA,CAAC,IAAI,UAAU,CAAC,CAAhB;AACD;;AAED,QAAA,YAAY,CAAC,QAAb,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B;AAAE,UAAA,MAAM,EAAE;AAAV,SAA5B;AAEA,YAAM,GAAG,GAAG,KAAK,IAAL,CAAU,YAAV,EAAwB;AAAE,UAAA,CAAC,EAAE,CAAC,CAAC,OAAP;AAAgB,UAAA,CAAC,EAAE,CAAC,CAAC;AAArB,SAAxB,CAAZ;;AACA,YAAM,QAAQ,GAAG,SAAX,QAAW,CAAC,IAAD,EAAsB;AACrC,cAAI,IAAJ,EAAU;AACR,YAAA,MAAI,CAAC,SAAL,CAAe,YAAf;;AACA,gBAAI,MAAI,CAAC,WAAL,CAAiB,OAAjB,CAAyB,SAAzB,CAAmC,OAAnC,IAA8C,YAAlD,EAAgE;AAC9D,cAAA,YAAY,CAAC,YAAb,CAA0B,CAA1B,EAA6B;AAC3B,gBAAA,IAAI,EAAE,IADqB;AAE3B,gBAAA,KAAK,EAAE,MAAI,CAAC,WAFe;AAG3B,gBAAA,kBAAkB,EAAE,MAAI,CAAC;AAHE,eAA7B;AAKA,cAAA,YAAY,CAAC,iBAAb,CAA+B,CAA/B,EAAkC,YAAY,CAAC,YAAb,CAA+B,CAA/B,CAAlC;AACD;AACF,WAVD,MAUO;AACL,YAAA,MAAI,CAAC,aAAL;AACD;;AAED,UAAA,MAAI,CAAC,kBAAL,GAA0B,IAA1B;;AACA,UAAA,MAAI,CAAC,WAAL,CAAiB,SAAjB,CAA2B,KAA3B;AACD,SAjBD;;AAmBA,YAAI,WAAW,CAAC,OAAZ,CAAoB,GAApB,CAAJ,EAA8B;AAC5B;AACA,eAAK,wBAAL;AACA,UAAA,GAAG,CAAC,IAAJ,CAAS,QAAT,EAH4B,CAGT;AACpB,SAJD,MAIO;AACL,UAAA,QAAQ,CAAC,GAAD,CAAR;AACD;AACF;AACF;AA7RH;AAAA;AAAA,WA+RY,yBAAa;AACrB,UAAI,KAAK,YAAT,EAAuB;AACrB,aAAK,UAAL,GAAkB,IAAlB;AACA,aAAK,YAAL,CAAkB,MAAlB;AACA,aAAK,YAAL,GAAoB,IAApB;AACA,aAAK,YAAL,GAAoB,IAApB;AACA,aAAK,KAAL,GAAa,IAAb;AACA,aAAK,OAAL,GAAe,IAAf;AACA,aAAK,UAAL,GAAkB,IAAlB;AACA,aAAK,YAAL,GAAoB,IAApB;AACA,aAAK,wBAAL;AACD;AACF;AA3SH;AAAA;AAAA,WA6SY,mBAAU,YAAV,EAA4B;AACpC,UAAI,KAAK,YAAL,KAAsB,YAA1B,EAAwC;AACtC,aAAK,aAAL;AACA,aAAK,UAAL,CAAgB,WAAhB,CAA4B,UAA5B,EAAwC,MAAxC;AACD;AACF;AAlTH;AAAA;AAAA,WAoTY,yBAAa;AAAA;;AACrB,UAAM,YAAY,GAAG,KAAK,YAA1B;;AACA,UAAI,YAAJ,EAAkB;AAChB,YAAM,IAAI,GAAG,KAAK,OAAL,CAAa,SAA1B;;AACA,YAAI,IAAJ,EAAU;AACR,cAAM,QAAQ,GAAI,OAAO,IAAP,KAAgB,QAAhB,IAA4B,IAAI,CAAC,QAAlC,IAA+C,GAAhE;AACA,cAAM,MAAM,GAAI,OAAO,IAAP,KAAgB,QAAhB,IAA4B,IAAI,CAAC,MAAlC,IAA6C,OAA5D;AAEA,eAAK,YAAL,GAAoB,IAApB;AAEA,eAAK,UAAL,CAAgB,OAAhB,CAAwB,KAAK,YAA7B,EAA4C,QAA5C,EAAsD,MAAtD,EAA8D;AAAA,mBAC5D,MAAI,CAAC,SAAL,CAAe,YAAf,CAD4D;AAAA,WAA9D;AAGD,SATD,MASO;AACL,eAAK,SAAL,CAAe,YAAf;AACD;AACF;AACF;AArUH;AAAA;AAAA,WAuUY,2BAAkB,CAAlB,EAAoC;AAC5C,UAAI,UAAJ;AACA,UAAM,WAAW,GAAG,KAAK,WAAzB;AACA,UAAM,cAAc,GAAG,KAAK,cAA5B;;AAEA,UAAI,cAAJ,EAAoB;AAClB,YAAI,cAAc,CAAC,OAAf,CAAuB,UAA3B,EAAuC;AACrC,UAAA,UAAU,GAAG,KAAK,WAAL,CAAiB,cAAc,CAAC,SAAhC,CAAb;AACD,SAFD,MAEO;AACL,cAAM,MAAM,GAAG,KAAK,WAAL,CAAiB,cAAc,CAAC,SAAhC,CAAf;AACA,UAAA,UAAU,GAAG,KAAK,WAAL,CAAiB,WAAW,CAAC,SAA7B,EAAwC,kBAAxC,CACX,MADW,CAAb;AAGD;AACF,OATD,MASO;AACL,QAAA,UAAU,GAAG,KAAK,WAAL,CAAiB,WAAW,CAAC,SAA7B,CAAb;AACD;;AAED,aAAO,UAAU,IAAI,UAAU,CAAC,aAAX,CAAyB,CAAzB,CAArB;AACD;AA1VH;AAAA;AAAA,WA4VY,qBAAY,IAAZ,EAAyB;AACjC,UAAM,KAAK,GAAG,KAAK,CAAL,CAAO,IAAP,CAAd;AACA,UAAM,MAAM,GAAG,KAAK,CAAC,MAAN,EAAf;AACA,UAAM,SAAS,GACb,QAAQ,CAAC,IAAT,CAAc,SAAd,IAA2B,QAAQ,CAAC,eAAT,CAAyB,SADtD;AAEA,UAAM,UAAU,GACd,QAAQ,CAAC,IAAT,CAAc,UAAd,IAA4B,QAAQ,CAAC,eAAT,CAAyB,UADvD;AAGA,aAAO,SAAS,CAAC,MAAV,CAAiB;AACtB,QAAA,CAAC,EACC,MAAM,CAAC,IAAP,GAAc,QAAQ,CAAC,KAAK,CAAC,GAAN,CAAU,mBAAV,CAAD,EAAiC,EAAjC,CAAtB,GAA6D,UAFzC;AAGtB,QAAA,CAAC,EAAE,MAAM,CAAC,GAAP,GAAa,QAAQ,CAAC,KAAK,CAAC,GAAN,CAAU,kBAAV,CAAD,EAAgC,EAAhC,CAArB,GAA2D,SAHxC;AAItB,QAAA,KAAK,EAAE,KAAK,CAAC,UAAN,EAJe;AAKtB,QAAA,MAAM,EAAE,KAAK,CAAC,WAAN;AALc,OAAjB,CAAP;AAOD;AA3WH;AAAA;AAAA,WA6WY,cAAK,YAAL,EAAyB,GAAzB,EAA6C;AAAA;;AACrD,UAAI,KAAK,iBAAL,CAAuB,GAAvB,CAAJ,EAAiC;AAC/B,YAAM,WAAW,GAAG,KAAK,WAAzB;AACA,YAAM,WAAW,GAAG,WAAW,CAAC,KAAhC;AACA,YAAM,KAAK,GAAG,WAAW,CAAC,aAAZ,CAA0B,GAA1B,CAAd;AACA,YAAM,UAAU,GAAG,KAAK,UAAxB;AACA,YAAM,YAAY,GAAG,KAAK,OAAL,CAAa,WAAb,CAAyB,YAAzB,EAAuC;AAC1D,UAAA,UAAU,EAAV,UAD0D;AAE1D,UAAA,YAAY,EAAZ,YAF0D;AAG1D,UAAA,WAAW,EAAE,KAAK,WAHwC;AAI1D,UAAA,aAAa,EAAE,KAAK;AAJsC,SAAvC,CAArB;AAMA,YAAM,IAAI,GAAG,YAAY,CAAC,OAAb,EAAb;AACA,QAAA,KAAK,CAAC,CAAN,IAAW,IAAI,CAAC,CAAL,GAAS,IAAI,CAAC,KAAL,GAAa,CAAjC;AACA,QAAA,KAAK,CAAC,CAAN,IAAW,IAAI,CAAC,CAAL,GAAS,IAAI,CAAC,MAAL,GAAc,CAAlC;AACA,YAAM,QAAQ,GAAG,KAAK,UAAL,GAAkB,CAAlB,GAAsB,WAAW,CAAC,WAAZ,EAAvC;AAEA,QAAA,YAAY,CAAC,QAAb,CACE,IAAI,CAAC,UAAL,CAAgB,KAAK,CAAC,CAAtB,EAAyB,QAAzB,CADF,EAEE,IAAI,CAAC,UAAL,CAAgB,KAAK,CAAC,CAAtB,EAAyB,QAAzB,CAFF;AAKA,QAAA,YAAY,CAAC,YAAb;AAEA,YAAM,YAAY,GAAG,KAAK,OAAL,CAAa,YAAlC;AACA,YAAM,GAAG,GAAG,YAAY,GACpB,YAAY,CAAC,YAAD,EAAe;AACzB,UAAA,UAAU,EAAV,UADyB;AAEzB,UAAA,YAAY,EAAZ,YAFyB;AAGzB,UAAA,YAAY,EAAZ,YAHyB;AAIzB,UAAA,WAAW,EAAX,WAJyB;AAKzB,UAAA,aAAa,EAAE,KAAK;AALK,SAAf,CADQ,GAQpB,IARJ;;AAUA,YAAI,OAAO,GAAP,KAAe,SAAnB,EAA8B;AAC5B,cAAI,GAAJ,EAAS;AACP,YAAA,WAAW,CAAC,OAAZ,CAAoB,YAApB,EAAkC;AAAE,cAAA,OAAO,EAAE,KAAK;AAAhB,aAAlC;AACA,mBAAO,YAAP;AACD;;AACD,iBAAO,IAAP;AACD;;AAED,eAAO,WAAW,CAAC,iBAAZ,CAA8B,GAA9B,EAAmC,IAAnC,CAAwC,UAAC,KAAD,EAAU;AACvD,cAAI,KAAJ,EAAW;AACT,YAAA,WAAW,CAAC,OAAZ,CAAoB,YAApB,EAAkC;AAAE,cAAA,OAAO,EAAE,MAAI,CAAC;AAAhB,aAAlC;AACA,mBAAO,YAAP;AACD;;AACD,iBAAO,IAAP;AACD,SANM,CAAP;AAOD;;AAED,aAAO,IAAP;AACD;AAlaH;AAAA;AAAA,WAoaY,oBAAQ;AAChB,UAAI,KAAK,aAAT,EAAwB;AACtB,aAAK,aAAL,CAAmB,IAAnB,CAAwB,MAAxB;AACA,aAAK,aAAL,CAAmB,OAAnB;AACD;AACF;AAzaH;AAAA;AAAA,WA4aE,mBAAO;AACL,WAAK,MAAL;AACD;AA9aH;;AAAA;AAAA,EAAyB,IAAzB;;AA4aE,UAAA,CAAA,CADC,IAAI,CAAC,OAAL,EACD,CAAA,E,aAAA,E,SAAA,EAEC,IAFD,CAAA;;AAKF,CAAA,UAAiB,GAAjB,EAAoB;AAqCL,EAAA,GAAA,CAAA,QAAA,GAA6B;AACxC,IAAA,SAAS,EAAE,KAD6B;AAExC,IAAA,WAAW,EAAE,qBAAC,UAAD;AAAA,aAAgB,UAAU,CAAC,KAAX,EAAhB;AAAA,KAF2B;AAGxC,IAAA,WAAW,EAAE,qBAAC,YAAD;AAAA,aAAkB,YAAY,CAAC,KAAb,EAAlB;AAAA;AAH2B,GAA7B;AAMA,EAAA,GAAA,CAAA,cAAA,GAAiB;AAC5B,IAAA,SAAS,EAAE,YADiB;AAE5B,IAAA,SAAS,EAAE,YAFiB;AAG5B,IAAA,OAAO,EAAE,WAHmB;AAI5B,IAAA,QAAQ,EAAE,WAJkB;AAK5B,IAAA,WAAW,EAAE;AALe,GAAjB;AAOd,CAlDD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Util } from '../../global';\nimport { FunctionExt } from '../../util';\nimport { Rectangle } from '../../geometry';\nimport { View } from '../../view/view';\nimport { Graph } from '../../graph/graph';\nexport class Dnd extends View {\n    constructor(options) {\n        super();\n        this.options = Object.assign(Object.assign({}, Dnd.defaults), options);\n        this.container = document.createElement('div');\n        this.$container = this.$(this.container).addClass(this.prefixClassName('widget-dnd'));\n        this.draggingGraph = new Graph(Object.assign(Object.assign({}, this.options.delegateGraphOptions), { container: document.createElement('div'), width: 1, height: 1 }));\n        this.$container.append(this.draggingGraph.container);\n    }\n    get targetScroller() {\n        const target = this.options.target;\n        return Graph.isGraph(target) ? target.scroller.widget : target;\n    }\n    get targetGraph() {\n        const target = this.options.target;\n        return Graph.isGraph(target) ? target : target.graph;\n    }\n    get targetModel() {\n        return this.targetGraph.model;\n    }\n    get snapline() {\n        return this.targetGraph.snapline.widget;\n    }\n    start(node, evt) {\n        const e = evt;\n        e.preventDefault();\n        this.targetModel.startBatch('dnd');\n        this.$container\n            .addClass('dragging')\n            .appendTo(this.options.containerParent || document.body);\n        this.sourceNode = node;\n        this.prepareDragging(node, e.clientX, e.clientY);\n        const local = this.updateNodePosition(e.clientX, e.clientY);\n        if (this.isSnaplineEnabled()) {\n            this.snapline.captureCursorOffset({\n                e,\n                node,\n                cell: node,\n                view: this.draggingView,\n                x: local.x,\n                y: local.y,\n            });\n            this.draggingNode.on('change:position', this.snap, this);\n        }\n        this.delegateDocumentEvents(Dnd.documentEvents, e.data);\n    }\n    isSnaplineEnabled() {\n        return this.snapline && !this.snapline.disabled;\n    }\n    prepareDragging(sourceNode, clientX, clientY) {\n        const draggingGraph = this.draggingGraph;\n        const draggingModel = draggingGraph.model;\n        const draggingNode = this.options.getDragNode(sourceNode, {\n            sourceNode,\n            draggingGraph,\n            targetGraph: this.targetGraph,\n        });\n        draggingNode.position(0, 0);\n        let padding = 5;\n        if (this.isSnaplineEnabled()) {\n            padding += this.snapline.options.tolerance || 0;\n        }\n        if (this.isSnaplineEnabled() || this.options.scaled) {\n            const scale = this.targetGraph.transform.getScale();\n            draggingGraph.scale(scale.sx, scale.sy);\n            padding *= Math.max(scale.sx, scale.sy);\n        }\n        else {\n            draggingGraph.scale(1, 1);\n        }\n        this.clearDragging();\n        if (this.options.animation) {\n            this.$container.stop(true, true);\n        }\n        draggingModel.resetCells([draggingNode]);\n        const delegateView = draggingGraph.findViewByCell(draggingNode);\n        delegateView.undelegateEvents();\n        delegateView.cell.off('changed');\n        draggingGraph.fitToContent({\n            padding,\n            allowNewOrigin: 'any',\n        });\n        const bbox = delegateView.getBBox();\n        this.geometryBBox = delegateView.getBBox({ useCellGeometry: true });\n        this.delta = this.geometryBBox.getTopLeft().diff(bbox.getTopLeft());\n        this.draggingNode = draggingNode;\n        this.draggingView = delegateView;\n        this.draggingBBox = draggingNode.getBBox();\n        this.padding = padding;\n        this.originOffset = this.updateGraphPosition(clientX, clientY);\n    }\n    updateGraphPosition(clientX, clientY) {\n        const scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n        const delta = this.delta;\n        const nodeBBox = this.geometryBBox;\n        const padding = this.padding || 5;\n        const offset = {\n            left: clientX - delta.x - nodeBBox.width / 2 - padding,\n            top: clientY - delta.y - nodeBBox.height / 2 - padding + scrollTop,\n        };\n        if (this.draggingGraph) {\n            this.$container.offset(offset);\n        }\n        return offset;\n    }\n    updateNodePosition(x, y) {\n        const local = this.targetGraph.clientToLocal(x, y);\n        const bbox = this.draggingBBox;\n        local.x -= bbox.width / 2;\n        local.y -= bbox.height / 2;\n        this.draggingNode.position(local.x, local.y);\n        return local;\n    }\n    snap({ cell, current, options, }) {\n        const node = cell;\n        if (options.snapped) {\n            const bbox = this.draggingBBox;\n            node.position(bbox.x + options.tx, bbox.y + options.ty, { silent: true });\n            this.draggingView.translate();\n            node.position(current.x, current.y, { silent: true });\n            this.snapOffset = {\n                x: options.tx,\n                y: options.ty,\n            };\n        }\n        else {\n            this.snapOffset = null;\n        }\n    }\n    onDragging(evt) {\n        const draggingView = this.draggingView;\n        if (draggingView) {\n            evt.preventDefault();\n            const e = this.normalizeEvent(evt);\n            const clientX = e.clientX;\n            const clientY = e.clientY;\n            this.updateGraphPosition(clientX, clientY);\n            const local = this.updateNodePosition(clientX, clientY);\n            const embeddingMode = this.targetGraph.options.embedding.enabled;\n            const isValidArea = (embeddingMode || this.isSnaplineEnabled()) &&\n                this.isInsideValidArea({\n                    x: clientX,\n                    y: clientY,\n                });\n            if (embeddingMode) {\n                draggingView.setEventData(e, {\n                    graph: this.targetGraph,\n                    candidateEmbedView: this.candidateEmbedView,\n                });\n                const data = draggingView.getEventData(e);\n                if (isValidArea) {\n                    draggingView.processEmbedding(e, data);\n                }\n                else {\n                    draggingView.clearEmbedding(data);\n                }\n                this.candidateEmbedView = data.candidateEmbedView;\n            }\n            // update snapline\n            if (this.isSnaplineEnabled()) {\n                if (isValidArea) {\n                    this.snapline.snapOnMoving({\n                        e,\n                        view: draggingView,\n                        x: local.x,\n                        y: local.y,\n                    });\n                }\n                else {\n                    this.snapline.hide();\n                }\n            }\n        }\n    }\n    onDragEnd(evt) {\n        const draggingNode = this.draggingNode;\n        if (draggingNode) {\n            const e = this.normalizeEvent(evt);\n            const draggingView = this.draggingView;\n            const draggingBBox = this.draggingBBox;\n            const snapOffset = this.snapOffset;\n            let x = draggingBBox.x;\n            let y = draggingBBox.y;\n            if (snapOffset) {\n                x += snapOffset.x;\n                y += snapOffset.y;\n            }\n            draggingNode.position(x, y, { silent: true });\n            const ret = this.drop(draggingNode, { x: e.clientX, y: e.clientY });\n            const callback = (node) => {\n                if (node) {\n                    this.onDropped(draggingNode);\n                    if (this.targetGraph.options.embedding.enabled && draggingView) {\n                        draggingView.setEventData(e, {\n                            cell: node,\n                            graph: this.targetGraph,\n                            candidateEmbedView: this.candidateEmbedView,\n                        });\n                        draggingView.finalizeEmbedding(e, draggingView.getEventData(e));\n                    }\n                }\n                else {\n                    this.onDropInvalid();\n                }\n                this.candidateEmbedView = null;\n                this.targetModel.stopBatch('dnd');\n            };\n            if (FunctionExt.isAsync(ret)) {\n                // stop dragging\n                this.undelegateDocumentEvents();\n                ret.then(callback); // eslint-disable-line\n            }\n            else {\n                callback(ret);\n            }\n        }\n    }\n    clearDragging() {\n        if (this.draggingNode) {\n            this.sourceNode = null;\n            this.draggingNode.remove();\n            this.draggingNode = null;\n            this.draggingView = null;\n            this.delta = null;\n            this.padding = null;\n            this.snapOffset = null;\n            this.originOffset = null;\n            this.undelegateDocumentEvents();\n        }\n    }\n    onDropped(draggingNode) {\n        if (this.draggingNode === draggingNode) {\n            this.clearDragging();\n            this.$container.removeClass('dragging').remove();\n        }\n    }\n    onDropInvalid() {\n        const draggingNode = this.draggingNode;\n        if (draggingNode) {\n            const anim = this.options.animation;\n            if (anim) {\n                const duration = (typeof anim === 'object' && anim.duration) || 150;\n                const easing = (typeof anim === 'object' && anim.easing) || 'swing';\n                this.draggingView = null;\n                this.$container.animate(this.originOffset, duration, easing, () => this.onDropped(draggingNode));\n            }\n            else {\n                this.onDropped(draggingNode);\n            }\n        }\n    }\n    isInsideValidArea(p) {\n        let targetRect;\n        const targetGraph = this.targetGraph;\n        const targetScroller = this.targetScroller;\n        if (targetScroller) {\n            if (targetScroller.options.autoResize) {\n                targetRect = this.getDropArea(targetScroller.container);\n            }\n            else {\n                const outter = this.getDropArea(targetScroller.container);\n                targetRect = this.getDropArea(targetGraph.container).intersectsWithRect(outter);\n            }\n        }\n        else {\n            targetRect = this.getDropArea(targetGraph.container);\n        }\n        return targetRect && targetRect.containsPoint(p);\n    }\n    getDropArea(elem) {\n        const $elem = this.$(elem);\n        const offset = $elem.offset();\n        const scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n        const scrollLeft = document.body.scrollLeft || document.documentElement.scrollLeft;\n        return Rectangle.create({\n            x: offset.left + parseInt($elem.css('border-left-width'), 10) - scrollLeft,\n            y: offset.top + parseInt($elem.css('border-top-width'), 10) - scrollTop,\n            width: $elem.innerWidth(),\n            height: $elem.innerHeight(),\n        });\n    }\n    drop(draggingNode, pos) {\n        if (this.isInsideValidArea(pos)) {\n            const targetGraph = this.targetGraph;\n            const targetModel = targetGraph.model;\n            const local = targetGraph.clientToLocal(pos);\n            const sourceNode = this.sourceNode;\n            const droppingNode = this.options.getDropNode(draggingNode, {\n                sourceNode,\n                draggingNode,\n                targetGraph: this.targetGraph,\n                draggingGraph: this.draggingGraph,\n            });\n            const bbox = droppingNode.getBBox();\n            local.x += bbox.x - bbox.width / 2;\n            local.y += bbox.y - bbox.height / 2;\n            const gridSize = this.snapOffset ? 1 : targetGraph.getGridSize();\n            droppingNode.position(Util.snapToGrid(local.x, gridSize), Util.snapToGrid(local.y, gridSize));\n            droppingNode.removeZIndex();\n            const validateNode = this.options.validateNode;\n            const ret = validateNode\n                ? validateNode(droppingNode, {\n                    sourceNode,\n                    draggingNode,\n                    droppingNode,\n                    targetGraph,\n                    draggingGraph: this.draggingGraph,\n                })\n                : true;\n            if (typeof ret === 'boolean') {\n                if (ret) {\n                    targetModel.addCell(droppingNode, { stencil: this.cid });\n                    return droppingNode;\n                }\n                return null;\n            }\n            return FunctionExt.toDeferredBoolean(ret).then((valid) => {\n                if (valid) {\n                    targetModel.addCell(droppingNode, { stencil: this.cid });\n                    return droppingNode;\n                }\n                return null;\n            });\n        }\n        return null;\n    }\n    onRemove() {\n        if (this.draggingGraph) {\n            this.draggingGraph.view.remove();\n            this.draggingGraph.dispose();\n        }\n    }\n    dispose() {\n        this.remove();\n    }\n}\n__decorate([\n    View.dispose()\n], Dnd.prototype, \"dispose\", null);\n(function (Dnd) {\n    Dnd.defaults = {\n        animation: false,\n        getDragNode: (sourceNode) => sourceNode.clone(),\n        getDropNode: (draggingNode) => draggingNode.clone(),\n    };\n    Dnd.documentEvents = {\n        mousemove: 'onDragging',\n        touchmove: 'onDragging',\n        mouseup: 'onDragEnd',\n        touchend: 'onDragEnd',\n        touchcancel: 'onDragEnd',\n    };\n})(Dnd || (Dnd = {}));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}