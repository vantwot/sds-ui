{"ast":null,"code":"import _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Point } from '../../geometry';\nimport { Dom, NumberExt, FunctionExt } from '../../util';\nimport { ToolsView } from '../../view/tool';\nimport * as Util from './util';\nexport var Button = /*#__PURE__*/function (_ToolsView$ToolItem) {\n  _inherits(Button, _ToolsView$ToolItem);\n\n  var _super = _createSuper(Button);\n\n  function Button() {\n    _classCallCheck(this, Button);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Button, [{\n    key: \"onRender\",\n    value: function onRender() {\n      Dom.addClass(this.container, this.prefixClassName('cell-tool-button'));\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.updatePosition();\n      return this;\n    }\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      var view = this.cellView;\n      var matrix = view.cell.isEdge() ? this.getEdgeMatrix() : this.getNodeMatrix();\n      Dom.transform(this.container, matrix, {\n        absolute: true\n      });\n    }\n  }, {\n    key: \"getNodeMatrix\",\n    value: function getNodeMatrix() {\n      var view = this.cellView;\n      var options = this.options;\n      var _options$x = options.x,\n          x = _options$x === void 0 ? 0 : _options$x,\n          _options$y = options.y,\n          y = _options$y === void 0 ? 0 : _options$y;\n      var offset = options.offset,\n          useCellGeometry = options.useCellGeometry,\n          rotate = options.rotate;\n      var bbox = Util.getViewBBox(view, useCellGeometry);\n      var angle = view.cell.getAngle();\n\n      if (!rotate) {\n        bbox = bbox.bbox(angle);\n      }\n\n      var offsetX = 0;\n      var offsetY = 0;\n\n      if (typeof offset === 'number') {\n        offsetX = offset;\n        offsetY = offset;\n      } else if (typeof offset === 'object') {\n        offsetX = offset.x;\n        offsetY = offset.y;\n      }\n\n      x = NumberExt.normalizePercentage(x, bbox.width);\n      y = NumberExt.normalizePercentage(y, bbox.height);\n      var matrix = Dom.createSVGMatrix().translate(bbox.x + bbox.width / 2, bbox.y + bbox.height / 2);\n\n      if (rotate) {\n        matrix = matrix.rotate(angle);\n      }\n\n      matrix = matrix.translate(x + offsetX - bbox.width / 2, y + offsetY - bbox.height / 2);\n      return matrix;\n    }\n  }, {\n    key: \"getEdgeMatrix\",\n    value: function getEdgeMatrix() {\n      var view = this.cellView;\n      var options = this.options;\n      var _options$offset = options.offset,\n          offset = _options$offset === void 0 ? 0 : _options$offset,\n          _options$distance = options.distance,\n          distance = _options$distance === void 0 ? 0 : _options$distance,\n          rotate = options.rotate;\n      var tangent;\n      var position;\n      var angle;\n\n      if (NumberExt.isPercentage(distance)) {\n        tangent = view.getTangentAtRatio(parseFloat(distance) / 100);\n      } else {\n        tangent = view.getTangentAtLength(distance);\n      }\n\n      if (tangent) {\n        position = tangent.start;\n        angle = tangent.vector().vectorAngle(new Point(1, 0)) || 0;\n      } else {\n        position = view.getConnection().start;\n        angle = 0;\n      }\n\n      var matrix = Dom.createSVGMatrix().translate(position.x, position.y).rotate(angle);\n\n      if (typeof offset === 'object') {\n        matrix = matrix.translate(offset.x || 0, offset.y || 0);\n      } else {\n        matrix = matrix.translate(0, offset);\n      }\n\n      if (!rotate) {\n        matrix = matrix.rotate(-angle);\n      }\n\n      return matrix;\n    }\n  }, {\n    key: \"onMouseDown\",\n    value: function onMouseDown(e) {\n      if (this.guard(e)) {\n        return;\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n      var onClick = this.options.onClick;\n\n      if (typeof onClick === 'function') {\n        FunctionExt.call(onClick, this.cellView, {\n          e: e,\n          view: this.cellView,\n          cell: this.cellView.cell,\n          btn: this\n        });\n      }\n    }\n  }]);\n\n  return Button;\n}(ToolsView.ToolItem);\n\n(function (Button) {\n  Button.config({\n    name: 'button',\n    events: {\n      mousedown: 'onMouseDown',\n      touchstart: 'onMouseDown'\n    }\n  });\n})(Button || (Button = {}));\n\n(function (Button) {\n  Button.Remove = Button.define({\n    name: 'button-remove',\n    markup: [{\n      tagName: 'circle',\n      selector: 'button',\n      attrs: {\n        r: 7,\n        fill: '#FF1D00',\n        cursor: 'pointer'\n      }\n    }, {\n      tagName: 'path',\n      selector: 'icon',\n      attrs: {\n        d: 'M -3 -3 3 3 M -3 3 3 -3',\n        fill: 'none',\n        stroke: '#FFFFFF',\n        'stroke-width': 2,\n        'pointer-events': 'none'\n      }\n    }],\n    distance: 60,\n    offset: 0,\n    onClick: function onClick(_ref) {\n      var view = _ref.view,\n          btn = _ref.btn;\n      btn.parent.remove();\n      view.cell.remove({\n        ui: true,\n        toolId: btn.cid\n      });\n    }\n  });\n})(Button || (Button = {}));","map":{"version":3,"sources":["../../../src/registry/tool/button.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Point } from '../../geometry';\nimport { Dom, NumberExt, FunctionExt } from '../../util';\nimport { ToolsView } from '../../view/tool';\nimport * as Util from './util';\nexport class Button extends ToolsView.ToolItem {\n    onRender() {\n        Dom.addClass(this.container, this.prefixClassName('cell-tool-button'));\n        this.update();\n    }\n    update() {\n        this.updatePosition();\n        return this;\n    }\n    updatePosition() {\n        const view = this.cellView;\n        const matrix = view.cell.isEdge()\n            ? this.getEdgeMatrix()\n            : this.getNodeMatrix();\n        Dom.transform(this.container, matrix, { absolute: true });\n    }\n    getNodeMatrix() {\n        const view = this.cellView;\n        const options = this.options;\n        let { x = 0, y = 0 } = options;\n        const { offset, useCellGeometry, rotate } = options;\n        let bbox = Util.getViewBBox(view, useCellGeometry);\n        const angle = view.cell.getAngle();\n        if (!rotate) {\n            bbox = bbox.bbox(angle);\n        }\n        let offsetX = 0;\n        let offsetY = 0;\n        if (typeof offset === 'number') {\n            offsetX = offset;\n            offsetY = offset;\n        }\n        else if (typeof offset === 'object') {\n            offsetX = offset.x;\n            offsetY = offset.y;\n        }\n        x = NumberExt.normalizePercentage(x, bbox.width);\n        y = NumberExt.normalizePercentage(y, bbox.height);\n        let matrix = Dom.createSVGMatrix().translate(bbox.x + bbox.width / 2, bbox.y + bbox.height / 2);\n        if (rotate) {\n            matrix = matrix.rotate(angle);\n        }\n        matrix = matrix.translate(x + offsetX - bbox.width / 2, y + offsetY - bbox.height / 2);\n        return matrix;\n    }\n    getEdgeMatrix() {\n        const view = this.cellView;\n        const options = this.options;\n        const { offset = 0, distance = 0, rotate } = options;\n        let tangent;\n        let position;\n        let angle;\n        if (NumberExt.isPercentage(distance)) {\n            tangent = view.getTangentAtRatio(parseFloat(distance) / 100);\n        }\n        else {\n            tangent = view.getTangentAtLength(distance);\n        }\n        if (tangent) {\n            position = tangent.start;\n            angle = tangent.vector().vectorAngle(new Point(1, 0)) || 0;\n        }\n        else {\n            position = view.getConnection().start;\n            angle = 0;\n        }\n        let matrix = Dom.createSVGMatrix()\n            .translate(position.x, position.y)\n            .rotate(angle);\n        if (typeof offset === 'object') {\n            matrix = matrix.translate(offset.x || 0, offset.y || 0);\n        }\n        else {\n            matrix = matrix.translate(0, offset);\n        }\n        if (!rotate) {\n            matrix = matrix.rotate(-angle);\n        }\n        return matrix;\n    }\n    onMouseDown(e) {\n        if (this.guard(e)) {\n            return;\n        }\n        e.stopPropagation();\n        e.preventDefault();\n        const onClick = this.options.onClick;\n        if (typeof onClick === 'function') {\n            FunctionExt.call(onClick, this.cellView, {\n                e,\n                view: this.cellView,\n                cell: this.cellView.cell,\n                btn: this,\n            });\n        }\n    }\n}\n(function (Button) {\n    Button.config({\n        name: 'button',\n        events: {\n            mousedown: 'onMouseDown',\n            touchstart: 'onMouseDown',\n        },\n    });\n})(Button || (Button = {}));\n(function (Button) {\n    Button.Remove = Button.define({\n        name: 'button-remove',\n        markup: [\n            {\n                tagName: 'circle',\n                selector: 'button',\n                attrs: {\n                    r: 7,\n                    fill: '#FF1D00',\n                    cursor: 'pointer',\n                },\n            },\n            {\n                tagName: 'path',\n                selector: 'icon',\n                attrs: {\n                    d: 'M -3 -3 3 3 M -3 3 3 -3',\n                    fill: 'none',\n                    stroke: '#FFFFFF',\n                    'stroke-width': 2,\n                    'pointer-events': 'none',\n                },\n            },\n        ],\n        distance: 60,\n        offset: 0,\n        onClick({ view, btn }) {\n            btn.parent.remove();\n            view.cell.remove({ ui: true, toolId: btn.cid });\n        },\n    });\n})(Button || (Button = {}));\n//# sourceMappingURL=button.js.map"]},"metadata":{},"sourceType":"module"}