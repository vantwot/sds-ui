{"ast":null,"code":"import React from 'react';\nimport classNames from 'classnames';\nimport { Tooltip } from 'antd';\nimport 'antd/es/tooltip/style/index.css';\nimport { Menu } from '../menu';\nimport { Dropdown } from '../dropdown';\nimport { ToolbarContext } from './context';\n\nclass ToolbarItemInner extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    this.handleClick = () => {\n      this.processClick();\n    };\n\n    this.handleDropdownItemClick = name => {\n      this.processClick(name, false);\n    };\n  }\n\n  processClick() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.name;\n    let dropdown = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props.dropdown;\n\n    if (!this.props.disabled && !dropdown) {\n      if (name) {\n        this.props.context.onClick(name);\n      }\n\n      if (this.props.onClick) {\n        this.props.onClick(name);\n      }\n    }\n  }\n\n  renderButton() {\n    const {\n      className,\n      hidden,\n      disabled,\n      active,\n      icon,\n      text,\n      dropdown,\n      dropdownArrow,\n      tooltip,\n      tooltipProps,\n      tooltipAsTitle,\n      children\n    } = this.props;\n    const {\n      prefixCls\n    } = this.props.context;\n    const baseCls = `${prefixCls}-item`;\n    const props = {\n      onClick: this.handleClick,\n      className: classNames(baseCls, {\n        [`${baseCls}-hidden`]: hidden,\n        [`${baseCls}-active`]: active,\n        [`${baseCls}-disabled`]: disabled,\n        [`${baseCls}-dropdown`]: dropdown\n      }, className)\n    };\n\n    if (tooltip && tooltipAsTitle) {\n      props.title = tooltip;\n    }\n\n    const button = React.createElement(\"button\", Object.assign({\n      type: \"button\"\n    }, props), icon && React.isValidElement(icon) && React.createElement(\"span\", {\n      className: `${baseCls}-icon`\n    }, icon), (text || children) && React.createElement(\"span\", {\n      className: `${baseCls}-text`\n    }, text || children), dropdown && dropdownArrow && React.createElement(\"span\", {\n      className: `${baseCls}-dropdown-arrow`\n    }));\n\n    if (tooltip && !tooltipAsTitle && !disabled) {\n      return React.createElement(Tooltip, Object.assign({\n        title: tooltip,\n        placement: \"bottom\",\n        mouseEnterDelay: 0,\n        mouseLeaveDelay: 0\n      }, tooltipProps), button);\n    }\n\n    return button;\n  }\n\n  render() {\n    const {\n      dropdown,\n      dropdownProps,\n      disabled\n    } = this.props;\n    const content = this.renderButton();\n\n    if (dropdown != null && !disabled) {\n      const overlay = React.createElement(\"div\", null, dropdown.type === Menu ? React.cloneElement(dropdown, {\n        onClick: this.handleDropdownItemClick\n      }) : dropdown);\n      const props = Object.assign(Object.assign({\n        trigger: ['click']\n      }, dropdownProps), {\n        disabled,\n        overlay\n      });\n      return React.createElement(Dropdown, Object.assign({}, props), content);\n    }\n\n    return content;\n  }\n\n}\n\nexport const ToolbarItem = props => React.createElement(ToolbarContext.Consumer, null, context => React.createElement(ToolbarItemInner, Object.assign({\n  context: context\n}, props)));\nToolbarItem.defaultProps = {\n  dropdownArrow: true\n};","map":{"version":3,"sources":["../../src/toolbar/item.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Tooltip } from 'antd';\nimport 'antd/es/tooltip/style/index.css';\nimport { Menu } from '../menu';\nimport { Dropdown } from '../dropdown';\nimport { ToolbarContext } from './context';\nclass ToolbarItemInner extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.handleClick = () => {\n            this.processClick();\n        };\n        this.handleDropdownItemClick = (name) => {\n            this.processClick(name, false);\n        };\n    }\n    processClick(name = this.props.name, dropdown = this.props.dropdown) {\n        if (!this.props.disabled && !dropdown) {\n            if (name) {\n                this.props.context.onClick(name);\n            }\n            if (this.props.onClick) {\n                this.props.onClick(name);\n            }\n        }\n    }\n    renderButton() {\n        const { className, hidden, disabled, active, icon, text, dropdown, dropdownArrow, tooltip, tooltipProps, tooltipAsTitle, children, } = this.props;\n        const { prefixCls } = this.props.context;\n        const baseCls = `${prefixCls}-item`;\n        const props = {\n            onClick: this.handleClick,\n            className: classNames(baseCls, {\n                [`${baseCls}-hidden`]: hidden,\n                [`${baseCls}-active`]: active,\n                [`${baseCls}-disabled`]: disabled,\n                [`${baseCls}-dropdown`]: dropdown,\n            }, className),\n        };\n        if (tooltip && tooltipAsTitle) {\n            props.title = tooltip;\n        }\n        const button = (React.createElement(\"button\", Object.assign({ type: \"button\" }, props),\n            icon && React.isValidElement(icon) && (React.createElement(\"span\", { className: `${baseCls}-icon` }, icon)),\n            (text || children) && (React.createElement(\"span\", { className: `${baseCls}-text` }, text || children)),\n            dropdown && dropdownArrow && (React.createElement(\"span\", { className: `${baseCls}-dropdown-arrow` }))));\n        if (tooltip && !tooltipAsTitle && !disabled) {\n            return (React.createElement(Tooltip, Object.assign({ title: tooltip, placement: \"bottom\", mouseEnterDelay: 0, mouseLeaveDelay: 0 }, tooltipProps), button));\n        }\n        return button;\n    }\n    render() {\n        const { dropdown, dropdownProps, disabled } = this.props;\n        const content = this.renderButton();\n        if (dropdown != null && !disabled) {\n            const overlay = (React.createElement(\"div\", null, dropdown.type === Menu\n                ? React.cloneElement(dropdown, {\n                    onClick: this.handleDropdownItemClick,\n                })\n                : dropdown));\n            const props = Object.assign(Object.assign({ trigger: ['click'] }, dropdownProps), { disabled,\n                overlay });\n            return React.createElement(Dropdown, Object.assign({}, props), content);\n        }\n        return content;\n    }\n}\nexport const ToolbarItem = (props) => (React.createElement(ToolbarContext.Consumer, null, (context) => React.createElement(ToolbarItemInner, Object.assign({ context: context }, props))));\nToolbarItem.defaultProps = {\n    dropdownArrow: true,\n};\n//# sourceMappingURL=item.js.map"]},"metadata":{},"sourceType":"module"}