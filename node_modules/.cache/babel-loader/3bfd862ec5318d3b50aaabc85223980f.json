{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _geometryShape;\n\nexport var ShapeType3D;\n\n(function (ShapeType3D) {\n  ShapeType3D[\"CYLINDER\"] = \"cylinder\";\n  ShapeType3D[\"SQUARECOLUMN\"] = \"squareColumn\";\n  ShapeType3D[\"TRIANGLECOLUMN\"] = \"triangleColumn\";\n  ShapeType3D[\"HEXAGONCOLUMN\"] = \"hexagonColumn\";\n  ShapeType3D[\"PENTAGONCOLUMN\"] = \"pentagonColumn\";\n})(ShapeType3D || (ShapeType3D = {}));\n\nexport var ShapeType2D;\n\n(function (ShapeType2D) {\n  ShapeType2D[\"CIRCLE\"] = \"circle\";\n  ShapeType2D[\"SQUARE\"] = \"square\";\n  ShapeType2D[\"TRIANGLE\"] = \"triangle\";\n  ShapeType2D[\"HEXAGON\"] = \"hexagon\";\n  ShapeType2D[\"PENTAGON\"] = \"pentagon\";\n})(ShapeType2D || (ShapeType2D = {}));\n\nexport function polygonPath(pointCount) {\n  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var step = Math.PI * 2 / pointCount;\n  var line = [];\n\n  for (var i = 0; i < pointCount; i++) {\n    line.push(step * i + start * Math.PI / 12);\n  }\n\n  var path = line.map(function (t) {\n    var x = Math.sin(t + Math.PI / 4);\n    var y = Math.cos(t + Math.PI / 4);\n    return [x, y, 0];\n  });\n  return path;\n}\nexport function circle() {\n  return polygonPath(30);\n}\nexport function square() {\n  return polygonPath(4);\n}\nexport function triangle() {\n  return polygonPath(3);\n}\nexport function hexagon() {\n  return polygonPath(6, 1);\n}\nexport function pentagon() {\n  return polygonPath(5);\n}\nexport var geometryShape = (_geometryShape = {}, _defineProperty(_geometryShape, ShapeType2D.CIRCLE, circle), _defineProperty(_geometryShape, ShapeType2D.HEXAGON, hexagon), _defineProperty(_geometryShape, ShapeType2D.TRIANGLE, triangle), _defineProperty(_geometryShape, ShapeType2D.SQUARE, square), _defineProperty(_geometryShape, ShapeType2D.PENTAGON, pentagon), _defineProperty(_geometryShape, ShapeType3D.CYLINDER, circle), _defineProperty(_geometryShape, ShapeType3D.HEXAGONCOLUMN, hexagon), _defineProperty(_geometryShape, ShapeType3D.TRIANGLECOLUMN, triangle), _defineProperty(_geometryShape, ShapeType3D.SQUARECOLUMN, square), _defineProperty(_geometryShape, ShapeType3D.PENTAGONCOLUMN, pentagon), _geometryShape);","map":{"version":3,"sources":["../../../src/core/shape/Path.ts"],"names":["ShapeType3D","ShapeType2D","start","step","Math","line","i","path","x","t","y","polygonPath","geometryShape"],"mappings":"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","sourcesContent":["export type IPosition = [number, number, number] | [number, number];\nexport type IPath = IPosition[];\nexport enum ShapeType3D {\n  CYLINDER = 'cylinder',\n  SQUARECOLUMN = 'squareColumn',\n  TRIANGLECOLUMN = 'triangleColumn',\n  HEXAGONCOLUMN = 'hexagonColumn',\n  PENTAGONCOLUMN = 'pentagonColumn',\n}\nexport enum ShapeType2D {\n  CIRCLE = 'circle',\n  SQUARE = 'square',\n  TRIANGLE = 'triangle',\n  HEXAGON = 'hexagon',\n  PENTAGON = 'pentagon',\n}\n\n/**\n * 生成规则多边形顶点个数\n * @param pointCount  顶点个数 3 => 三角形\n * @param start 顶点起始角度 调整图形的方向\n */\nexport function polygonPath(pointCount: number, start: number = 0): IPath {\n  const step = (Math.PI * 2) / pointCount;\n  const line = [];\n  for (let i = 0; i < pointCount; i++) {\n    line.push(step * i + (start * Math.PI) / 12);\n  }\n  const path: IPath = line.map((t) => {\n    const x = Math.sin(t + Math.PI / 4);\n    const y = Math.cos(t + Math.PI / 4);\n    return [x, y, 0];\n  });\n  // path.push(path[0]);\n  return path;\n}\n\nexport function circle(): IPath {\n  return polygonPath(30);\n}\nexport function square(): IPath {\n  return polygonPath(4);\n}\nexport function triangle(): IPath {\n  return polygonPath(3);\n}\nexport function hexagon(): IPath {\n  return polygonPath(6, 1);\n}\nexport function pentagon(): IPath {\n  return polygonPath(5);\n}\n\nexport const geometryShape = {\n  [ShapeType2D.CIRCLE]: circle,\n  [ShapeType2D.HEXAGON]: hexagon,\n  [ShapeType2D.TRIANGLE]: triangle,\n  [ShapeType2D.SQUARE]: square,\n  [ShapeType2D.PENTAGON]: pentagon,\n  [ShapeType3D.CYLINDER]: circle,\n  [ShapeType3D.HEXAGONCOLUMN]: hexagon,\n  [ShapeType3D.TRIANGLECOLUMN]: triangle,\n  [ShapeType3D.SQUARECOLUMN]: square,\n  [ShapeType3D.PENTAGONCOLUMN]: pentagon,\n};\n"]},"metadata":{},"sourceType":"module"}