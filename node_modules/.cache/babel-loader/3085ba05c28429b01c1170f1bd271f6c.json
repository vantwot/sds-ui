{"ast":null,"code":"var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction InvalidCharacterError(message) {\n  this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = 'InvalidCharacterError';\nexport function atob(input) {\n  var str = String(input).replace(/=+$/, '');\n\n  if (str.length % 4 === 1) {\n    throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n  }\n\n  var output = '';\n\n  for (var bc = 0, bs, buffer, idx = 0; buffer = str.charAt(idx++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n    buffer = chars.indexOf(buffer);\n  }\n\n  return output;\n}\nexport function btoa(string) {\n  string = String(string);\n  var bitmap,\n      a,\n      b,\n      c,\n      result = '',\n      i = 0,\n      rest = string.length % 3;\n\n  for (; i < string.length;) {\n    if ((a = string.charCodeAt(i++)) > 255 || (b = string.charCodeAt(i++)) > 255 || (c = string.charCodeAt(i++)) > 255) {\n      throw new TypeError(\"Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.\");\n    }\n\n    bitmap = a << 16 | b << 8 | c;\n    result += chars.charAt(bitmap >> 18 & 63) + chars.charAt(bitmap >> 12 & 63) + chars.charAt(bitmap >> 6 & 63) + chars.charAt(bitmap & 63);\n  }\n\n  return rest ? result.slice(0, rest - 3) + '==='.substring(rest) : result;\n}","map":{"version":3,"sources":["../../src/mini-adapter/atob.ts"],"names":["chars","InvalidCharacterError","str","String","output","bc","idx","buffer","bs","string","result","i","rest","a","b","c","bitmap"],"mappings":"AAEA,IAAMA,KAAK,GAAX,mEAAA;;AAGA,SAAA,qBAAA,CAAA,OAAA,EAAwC;AACtC,OAAA,OAAA,GAAA,OAAA;AACD;;AAEDC,qBAAqB,CAArBA,SAAAA,GAAkC,IAAlCA,KAAkC,EAAlCA;AACAA,qBAAqB,CAArBA,SAAAA,CAAAA,IAAAA,GAAAA,uBAAAA;AAEA,OAAO,SAAA,IAAA,CAAA,KAAA,EAA6B;AAClC,MAAMC,GAAG,GAAGC,MAAM,CAANA,KAAM,CAANA,CAAAA,OAAAA,CAAAA,KAAAA,EAAZ,EAAYA,CAAZ;;AACA,MAAID,GAAG,CAAHA,MAAAA,GAAAA,CAAAA,KAAJ,CAAA,EAA0B;AACxB,UAAM,IAAA,qBAAA,CAAN,mEAAM,CAAN;AAGD;;AACD,MAAIE,MAAM,GAAV,EAAA;;AACA,OAEE,IAAIC,EAAE,GAAN,CAAA,EAAA,EAAA,EAAA,MAAA,EAAwBC,GAAG,GAF7B,CAAA,EAIGC,MAAM,GAAGL,GAAG,CAAHA,MAAAA,CAAWI,GAJvB,EAIYJ,CAJZ,EAME,CAAA,MAAA,KACEM,EAAE,GAAGH,EAAE,GAAFA,CAAAA,GAASG,EAAE,GAAFA,EAAAA,GAATH,MAAAA,GAAN,MAACG,EAGFH,EAAE,KAJF,CAAA,IAKKD,MAAM,IAAID,MAAM,CAANA,YAAAA,CAAoB,MAAOK,EAAE,KAAM,CAAA,CAAA,GAAD,EAAC,GALlD,CAK4C,CAA7BL,CALf,GANF,CAAA,EAaE;AAEAI,IAAAA,MAAM,GAAGP,KAAK,CAALA,OAAAA,CAATO,MAASP,CAATO;AACD;;AACD,SAAA,MAAA;AACD;AAED,OAAO,SAAA,IAAA,CAAA,MAAA,EAA8B;AACnCE,EAAAA,MAAM,GAAGN,MAAM,CAAfM,MAAe,CAAfA;AACA,MAAA,MAAA;AAAA,MAAA,CAAA;AAAA,MAAA,CAAA;AAAA,MAAA,CAAA;AAAA,MAIEC,MAAM,GAJR,EAAA;AAAA,MAKEC,CAAC,GALH,CAAA;AAAA,MAMEC,IAAI,GAAGH,MAAM,CAANA,MAAAA,GANT,CAAA;;AAQA,SAAOE,CAAC,GAAGF,MAAM,CAAjB,MAAA,GAA4B;AAC1B,QACE,CAACI,CAAC,GAAGJ,MAAM,CAANA,UAAAA,CAAkBE,CAAvB,EAAKF,CAAL,IAAA,GAAA,IACA,CAACK,CAAC,GAAGL,MAAM,CAANA,UAAAA,CAAkBE,CAAvB,EAAKF,CAAL,IADA,GAAA,IAEA,CAACM,CAAC,GAAGN,MAAM,CAANA,UAAAA,CAAkBE,CAAvB,EAAKF,CAAL,IAHF,GAAA,EAIE;AACA,YAAM,IAAA,SAAA,CAAN,iHAAM,CAAN;AAGD;;AAEDO,IAAAA,MAAM,GAAIH,CAAC,IAAF,EAACA,GAAYC,CAAC,IAAd,CAACD,GAAVG,CAAAA;AACAN,IAAAA,MAAM,IACJV,KAAK,CAALA,MAAAA,CAAcgB,MAAM,IAAP,EAACA,GAAdhB,EAAAA,IACAA,KAAK,CAALA,MAAAA,CAAcgB,MAAM,IAAP,EAACA,GADdhB,EACAA,CADAA,GAEAA,KAAK,CAALA,MAAAA,CAAcgB,MAAM,IAAP,CAACA,GAFdhB,EAEAA,CAFAA,GAGAA,KAAK,CAALA,MAAAA,CAAagB,MAAM,GAJrBN,EAIEV,CAJFU;AAKD;;AAGD,SAAOE,IAAI,GAAGF,MAAM,CAANA,KAAAA,CAAAA,CAAAA,EAAgBE,IAAI,GAApBF,CAAAA,IAA4B,MAAA,SAAA,CAA/B,IAA+B,CAA/B,GAAX,MAAA;AACD","sourcesContent":["// @ts-nocheck\n// tslint:disable\nconst chars =\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction InvalidCharacterError(message) {\n  this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\nexport function atob(input: string) {\n  const str = String(input).replace(/=+$/, '');\n  if (str.length % 4 === 1) {\n    throw new InvalidCharacterError(\n      \"'atob' failed: The string to be decoded is not correctly encoded.\",\n    );\n  }\n  let output = '';\n  for (\n    // initialize result and counters\n    let bc = 0, bs, buffer, idx = 0;\n    // get next character\n    (buffer = str.charAt(idx++));\n    // character found in table? initialize bit storage and add its ascii value;\n    ~buffer &&\n    ((bs = bc % 4 ? bs * 64 + buffer : buffer),\n    // and if not first of each 4 characters,\n    // convert the first 8 bits to one ascii character\n    bc++ % 4)\n      ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n      : 0\n  ) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = chars.indexOf(buffer);\n  }\n  return output;\n}\n\nexport function btoa(string: string) {\n  string = String(string);\n  let bitmap,\n    a,\n    b,\n    c,\n    result = '',\n    i = 0,\n    rest = string.length % 3; // To determine the final padding\n\n  for (; i < string.length; ) {\n    if (\n      (a = string.charCodeAt(i++)) > 255 ||\n      (b = string.charCodeAt(i++)) > 255 ||\n      (c = string.charCodeAt(i++)) > 255\n    ) {\n      throw new TypeError(\n        \"Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.\",\n      );\n    }\n\n    bitmap = (a << 16) | (b << 8) | c;\n    result +=\n      chars.charAt((bitmap >> 18) & 63) +\n      chars.charAt((bitmap >> 12) & 63) +\n      chars.charAt((bitmap >> 6) & 63) +\n      chars.charAt(bitmap & 63);\n  }\n\n  // If there's need of padding, replace the last 'A's with equal signs\n  return rest ? result.slice(0, rest - 3) + '==='.substring(rest) : result;\n}\n"]},"metadata":{},"sourceType":"module"}