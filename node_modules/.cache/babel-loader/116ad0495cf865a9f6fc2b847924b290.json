{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport React from 'react';\nimport { Tree, Empty, Popover } from 'antd';\nimport { FolderFilled, FolderOpenFilled } from '@ant-design/icons';\nimport { Addon } from '@antv/x6';\nimport { getNodeReactComponent, useXFlowApp, XFlowConstants } from '@antv/xflow-core';\nimport { XFlowNode } from '../canvas-dag-extension/x6-extension/node';\nconst {\n  DirectoryTree,\n  TreeNode\n} = Tree;\n\nconst FolderIcon = _ref => {\n  let {\n    expanded\n  } = _ref;\n  return expanded ? React.createElement(FolderOpenFilled, null) : React.createElement(FolderFilled, null);\n};\n\nexport const defaultNodeFactory = args => {\n  return new XFlowNode(args);\n};\nexport const renderNode = props => {\n  const {\n    nodeConfig,\n    onMouseDown,\n    graphConfig,\n    modelService,\n    commandService\n  } = props;\n\n  if (!graphConfig) {\n    return React.createElement(\"div\", null);\n  }\n\n  const renderKey = graphConfig.nodeTypeParser(nodeConfig) || XFlowConstants.XFLOW_DEFAULT_NODE;\n  const reactComponent = graphConfig.nodeRender.get(renderKey);\n  return React.createElement(\"div\", {\n    onMouseDown: onMouseDown\n  }, React.createElement(reactComponent, {\n    commandService,\n    modelService,\n    data: nodeConfig,\n    isNodeTreePanel: true\n  }));\n};\nexport const NodeTitle = props => {\n  const [isVisible, setVisible] = React.useState(false);\n  const {\n    prefixClz,\n    graphConfig,\n    commandService,\n    modelService,\n    popoverContent,\n    onMouseDown,\n    item\n  } = props;\n  return React.createElement(React.Fragment, null, popoverContent && React.createElement(Popover, {\n    placement: \"right\",\n    destroyTooltipOnHide: true,\n    content: popoverContent,\n    visible: isVisible,\n    onVisibleChange: val => {\n      setVisible(val);\n    }\n  }, React.createElement(\"div\", {\n    className: `${prefixClz}-node-wrapper`,\n    onMouseEnter: () => {\n      setVisible(true);\n    }\n  }, renderNode({\n    graphConfig,\n    commandService: commandService,\n    onMouseDown,\n    modelService,\n    nodeConfig: item\n  }))), !popoverContent && React.createElement(\"div\", {\n    className: `${prefixClz}-node-wrapper`,\n    onMouseEnter: () => {\n      setVisible(true);\n    }\n  }, renderNode({\n    graphConfig,\n    commandService: commandService,\n    onMouseDown,\n    modelService,\n    nodeConfig: item\n  })));\n};\nexport const NodePanelBody = props => {\n  const {\n    x6NodeFactory,\n    dndOptions,\n    onNodeDrop,\n    state,\n    onFolderExpand,\n    prefixClz\n  } = props;\n  const {\n    graphProvider,\n    modelService,\n    commandService\n  } = useXFlowApp();\n  const [graphConfig, setConfig] = React.useState();\n  const [dnd, setDnd] = React.useState();\n  const [graph, setGraph] = React.useState();\n  graphProvider.getGraphInstance().then(x6Graph => {\n    setGraph(x6Graph);\n  });\n  React.useEffect(() => {\n    graphProvider.getGraphOptions().then(x6GraphConfig => {\n      setConfig(x6GraphConfig);\n    });\n\n    if (!graph) {\n      return;\n    }\n\n    const dndInstance = new Addon.Dnd(Object.assign(Object.assign({\n      scaled: false,\n      animation: false\n    }, dndOptions), {\n      target: graph,\n\n      /** 这里考虑到需要新增群组的需求，不使用x6的getDropNod方法\n       * 在validateNode时调用command添加\n       */\n      validateNode: droppingNode => __awaiter(void 0, void 0, void 0, function* () {\n        const nodeConfig = Object.assign(Object.assign({}, droppingNode.getData()), droppingNode.getPosition());\n\n        if (onNodeDrop) {\n          yield onNodeDrop(nodeConfig, commandService, modelService);\n        } else {\n          console.error('onNodeDrop method is required in NodeTree Panel');\n        }\n\n        return false;\n      })\n    }));\n    setDnd(dndInstance);\n  }, [commandService, dndOptions, graph, graphProvider, modelService, onNodeDrop]);\n  const onMouseDown = React.useCallback(nodeConfig => e => {\n    if (!graph || !dnd || !graphConfig) {\n      return;\n    }\n\n    const renderKey = graphConfig.nodeTypeParser(nodeConfig);\n    const reactComponent = graphConfig.nodeRender.get(renderKey);\n    const wrappedComponent = getNodeReactComponent(reactComponent, commandService, modelService);\n    const nodeData = {\n      data: nodeConfig,\n      width: nodeConfig.width || 180,\n      height: nodeConfig.height || 40,\n      // X6_NODE_PORTAL_NODE_VIEW\n      view: graphConfig.graphId,\n      component: wrappedComponent\n    };\n    const x6Node = x6NodeFactory ? x6NodeFactory(nodeData) : defaultNodeFactory(nodeData);\n    dnd.start(x6Node, e.nativeEvent);\n  }, [commandService, dnd, graph, graphConfig, modelService, x6NodeFactory]);\n  const renderTree = React.useCallback(function () {\n    let treeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return treeList.map(item => {\n      const {\n        isDirectory,\n        children,\n        popoverContent\n      } = item;\n\n      if (isDirectory) {\n        return React.createElement(TreeNode, {\n          icon: FolderIcon,\n          key: item.id,\n          title: item.label,\n          className: `${prefixClz}-tree-folder`\n        }, renderTree(children));\n      }\n\n      return React.createElement(TreeNode, {\n        isLeaf: true,\n        key: item.id,\n        className: `${prefixClz}-tree-leaf`,\n        icon: React.createElement(\"span\", null),\n        title: React.createElement(NodeTitle, {\n          item: item,\n          onMouseDown: onMouseDown(item),\n          popoverContent: popoverContent,\n          prefixClz: prefixClz,\n          modelService: modelService,\n          commandService: commandService,\n          graphConfig: graphConfig\n        })\n      });\n    });\n  }, [commandService, graphConfig, modelService, onMouseDown, prefixClz]);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: `${prefixClz}-body`,\n    style: props.style\n  }, !state.keyword && React.createElement(DirectoryTree, {\n    showIcon: true,\n    selectable: false,\n    autoExpandParent: false,\n    onExpand: onFolderExpand,\n    expandedKeys: state.expandedKeys,\n    className: `${prefixClz}-tree`\n  }, renderTree(state.treeData)), state.searchList.length > 0 && React.createElement(\"ul\", {\n    className: `${prefixClz}-body-list`\n  }, state.searchList.map(treeNode => React.createElement(\"li\", {\n    className: `${prefixClz}-body-list-item`\n  }, React.createElement(NodeTitle, {\n    item: treeNode,\n    onMouseDown: onMouseDown(treeNode),\n    popoverContent: treeNode.popoverContent,\n    prefixClz: prefixClz,\n    modelService: modelService,\n    commandService: commandService,\n    graphConfig: graphConfig\n  })))), state.keyword && state.searchList.length === 0 && React.createElement(Empty, {\n    style: {\n      marginTop: '48px'\n    }\n  })));\n};","map":{"version":3,"sources":["../../src/canvas-node-tree-panel/panel-body.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport React from 'react';\nimport { Tree, Empty, Popover } from 'antd';\nimport { FolderFilled, FolderOpenFilled } from '@ant-design/icons';\nimport { Addon } from '@antv/x6';\nimport { getNodeReactComponent, useXFlowApp, XFlowConstants } from '@antv/xflow-core';\nimport { XFlowNode } from '../canvas-dag-extension/x6-extension/node';\nconst { DirectoryTree, TreeNode } = Tree;\nconst FolderIcon = ({ expanded }) => {\n    return expanded ? React.createElement(FolderOpenFilled, null) : React.createElement(FolderFilled, null);\n};\nexport const defaultNodeFactory = (args) => {\n    return new XFlowNode(args);\n};\nexport const renderNode = (props) => {\n    const { nodeConfig, onMouseDown, graphConfig, modelService, commandService } = props;\n    if (!graphConfig) {\n        return React.createElement(\"div\", null);\n    }\n    const renderKey = graphConfig.nodeTypeParser(nodeConfig) || XFlowConstants.XFLOW_DEFAULT_NODE;\n    const reactComponent = graphConfig.nodeRender.get(renderKey);\n    return (React.createElement(\"div\", { onMouseDown: onMouseDown }, React.createElement(reactComponent, {\n        commandService,\n        modelService,\n        data: nodeConfig,\n        isNodeTreePanel: true,\n    })));\n};\nexport const NodeTitle = (props) => {\n    const [isVisible, setVisible] = React.useState(false);\n    const { prefixClz, graphConfig, commandService, modelService, popoverContent, onMouseDown, item, } = props;\n    return (React.createElement(React.Fragment, null,\n        popoverContent && (React.createElement(Popover, { placement: \"right\", destroyTooltipOnHide: true, content: popoverContent, visible: isVisible, onVisibleChange: val => {\n                setVisible(val);\n            } },\n            React.createElement(\"div\", { className: `${prefixClz}-node-wrapper`, onMouseEnter: () => {\n                    setVisible(true);\n                } }, renderNode({\n                graphConfig,\n                commandService: commandService,\n                onMouseDown,\n                modelService,\n                nodeConfig: item,\n            })))),\n        !popoverContent && (React.createElement(\"div\", { className: `${prefixClz}-node-wrapper`, onMouseEnter: () => {\n                setVisible(true);\n            } }, renderNode({\n            graphConfig,\n            commandService: commandService,\n            onMouseDown,\n            modelService,\n            nodeConfig: item,\n        })))));\n};\nexport const NodePanelBody = props => {\n    const { x6NodeFactory, dndOptions, onNodeDrop, state, onFolderExpand, prefixClz } = props;\n    const { graphProvider, modelService, commandService } = useXFlowApp();\n    const [graphConfig, setConfig] = React.useState();\n    const [dnd, setDnd] = React.useState();\n    const [graph, setGraph] = React.useState();\n    graphProvider.getGraphInstance().then(x6Graph => {\n        setGraph(x6Graph);\n    });\n    React.useEffect(() => {\n        graphProvider.getGraphOptions().then(x6GraphConfig => {\n            setConfig(x6GraphConfig);\n        });\n        if (!graph) {\n            return;\n        }\n        const dndInstance = new Addon.Dnd(Object.assign(Object.assign({ scaled: false, animation: false }, dndOptions), { target: graph, \n            /** 这里考虑到需要新增群组的需求，不使用x6的getDropNod方法\n             * 在validateNode时调用command添加\n             */\n            validateNode: (droppingNode) => __awaiter(void 0, void 0, void 0, function* () {\n                const nodeConfig = Object.assign(Object.assign({}, droppingNode.getData()), droppingNode.getPosition());\n                if (onNodeDrop) {\n                    yield onNodeDrop(nodeConfig, commandService, modelService);\n                }\n                else {\n                    console.error('onNodeDrop method is required in NodeTree Panel');\n                }\n                return false;\n            }) }));\n        setDnd(dndInstance);\n    }, [commandService, dndOptions, graph, graphProvider, modelService, onNodeDrop]);\n    const onMouseDown = React.useCallback((nodeConfig) => (e) => {\n        if (!graph || !dnd || !graphConfig) {\n            return;\n        }\n        const renderKey = graphConfig.nodeTypeParser(nodeConfig);\n        const reactComponent = graphConfig.nodeRender.get(renderKey);\n        const wrappedComponent = getNodeReactComponent(reactComponent, commandService, modelService);\n        const nodeData = {\n            data: nodeConfig,\n            width: nodeConfig.width || 180,\n            height: nodeConfig.height || 40,\n            // X6_NODE_PORTAL_NODE_VIEW\n            view: graphConfig.graphId,\n            component: wrappedComponent,\n        };\n        const x6Node = x6NodeFactory ? x6NodeFactory(nodeData) : defaultNodeFactory(nodeData);\n        dnd.start(x6Node, e.nativeEvent);\n    }, [commandService, dnd, graph, graphConfig, modelService, x6NodeFactory]);\n    const renderTree = React.useCallback((treeList = []) => {\n        return treeList.map(item => {\n            const { isDirectory, children, popoverContent } = item;\n            if (isDirectory) {\n                return (React.createElement(TreeNode, { icon: FolderIcon, key: item.id, title: item.label, className: `${prefixClz}-tree-folder` }, renderTree(children)));\n            }\n            return (React.createElement(TreeNode, { isLeaf: true, key: item.id, className: `${prefixClz}-tree-leaf`, icon: React.createElement(\"span\", null), title: React.createElement(NodeTitle, { item: item, onMouseDown: onMouseDown(item), popoverContent: popoverContent, prefixClz: prefixClz, modelService: modelService, commandService: commandService, graphConfig: graphConfig }) }));\n        });\n    }, [commandService, graphConfig, modelService, onMouseDown, prefixClz]);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: `${prefixClz}-body`, style: props.style },\n            !state.keyword && (React.createElement(DirectoryTree, { showIcon: true, selectable: false, autoExpandParent: false, onExpand: onFolderExpand, expandedKeys: state.expandedKeys, className: `${prefixClz}-tree` }, renderTree(state.treeData))),\n            state.searchList.length > 0 && (React.createElement(\"ul\", { className: `${prefixClz}-body-list` }, state.searchList.map(treeNode => (React.createElement(\"li\", { className: `${prefixClz}-body-list-item` },\n                React.createElement(NodeTitle, { item: treeNode, onMouseDown: onMouseDown(treeNode), popoverContent: treeNode.popoverContent, prefixClz: prefixClz, modelService: modelService, commandService: commandService, graphConfig: graphConfig })))))),\n            state.keyword && state.searchList.length === 0 && React.createElement(Empty, { style: { marginTop: '48px' } }))));\n};\n//# sourceMappingURL=panel-body.js.map"]},"metadata":{},"sourceType":"module"}