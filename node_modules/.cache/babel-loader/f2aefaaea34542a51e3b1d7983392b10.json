{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _throttle from \"lodash/throttle\";\nimport { $window } from '@antv/l7-utils';\n\nvar Hash = function () {\n  function Hash(hashName) {\n    var _this = this;\n\n    _classCallCheck(this, Hash);\n\n    _defineProperty(this, \"map\", void 0);\n\n    _defineProperty(this, \"updateHash\", void 0);\n\n    _defineProperty(this, \"hashName\", void 0);\n\n    _defineProperty(this, \"onHashChange\", function () {\n      var loc = _this.getCurrentHash();\n\n      if (loc.length >= 3 && !loc.some(function (v) {\n        return isNaN(+v);\n      })) {\n        var bearing = _this.map.dragRotate.isEnabled() && _this.map.touchZoomRotate.isEnabled() ? +(loc[3] || 0) : _this.map.getBearing();\n\n        _this.map.jumpTo({\n          center: [+loc[2], +loc[1]],\n          zoom: +loc[0],\n          bearing: bearing,\n          pitch: +(loc[4] || 0)\n        });\n\n        return true;\n      }\n\n      return false;\n    });\n\n    _defineProperty(this, \"getCurrentHash\", function () {\n      var hash = window.location.hash.replace('#', '');\n\n      if (_this.hashName) {\n        var keyval;\n        hash.split('&').map(function (part) {\n          return part.split('=');\n        }).forEach(function (part) {\n          if (part[0] === _this.hashName) {\n            keyval = part;\n          }\n        });\n        return (keyval ? keyval[1] || '' : '').split('/');\n      }\n\n      return hash.split('/');\n    });\n\n    _defineProperty(this, \"updateHashUnthrottled\", function () {\n      var hash = _this.getHashString();\n\n      try {\n        window.history.replaceState(window.history.state, '', hash);\n      } catch (SecurityError) {}\n    });\n\n    this.hashName = hashName && encodeURIComponent(hashName);\n    this.updateHash = _throttle(this.updateHashUnthrottled, 30 * 1000 / 100);\n  }\n\n  _createClass(Hash, [{\n    key: \"addTo\",\n    value: function addTo(map) {\n      this.map = map;\n      $window.addEventListener('hashchange', this.onHashChange, false);\n      this.map.on('moveend', this.updateHash);\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      $window.removeEventListener('hashchange', this.onHashChange, false);\n      this.map.off('moveend', this.updateHash);\n      delete this.map;\n      return this;\n    }\n  }, {\n    key: \"getHashString\",\n    value: function getHashString(mapFeedback) {\n      var center = this.map.getCenter();\n      var zoom = Math.round(this.map.getZoom() * 100) / 100;\n      var precision = Math.ceil((zoom * Math.LN2 + Math.log(512 / 360 / 0.5)) / Math.LN10);\n      var m = Math.pow(10, precision);\n      var lng = Math.round(center.lng * m) / m;\n      var lat = Math.round(center.lat * m) / m;\n      var bearing = this.map.getBearing();\n      var pitch = this.map.getPitch();\n      var hash = '';\n\n      if (mapFeedback) {\n        hash += \"/\".concat(lng, \"/\").concat(lat, \"/\").concat(zoom);\n      } else {\n        hash += \"\".concat(zoom, \"/\").concat(lat, \"/\").concat(lng);\n      }\n\n      if (bearing || pitch) {\n        hash += \"/\".concat(Math.round(bearing * 10) / 10);\n      }\n\n      if (pitch) {\n        hash += \"/\".concat(Math.round(pitch));\n      }\n\n      if (this.hashName) {\n        var hashName = this.hashName;\n        var found = false;\n        var parts = window.location.hash.slice(1).split('&').map(function (part) {\n          var key = part.split('=')[0];\n\n          if (key === hashName) {\n            found = true;\n            return \"\".concat(key, \"=\").concat(hash);\n          }\n\n          return part;\n        }).filter(function (a) {\n          return a;\n        });\n\n        if (!found) {\n          parts.push(\"\".concat(hashName, \"=\").concat(hash));\n        }\n\n        return \"#\".concat(parts.join('&'));\n      }\n\n      return \"#\".concat(hash);\n    }\n  }]);\n\n  return Hash;\n}();\n\nexport default Hash;","map":{"version":3,"sources":["../src/hash.ts"],"names":["Hash","hashName","encodeURIComponent","$window","loc","isNaN","bearing","center","zoom","pitch","hash","window","part","keyval","Math","precision","m","lng","lat","found","parts","key"],"mappings":"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","sourcesContent":["// @ts-ignore\n// tslint:disable-next-line:no-submodule-imports\nimport { $window } from '@antv/l7-utils';\nimport { throttle } from 'lodash';\nimport { Map } from './map';\n\n/*\n * Adds the map's position to its page's location hash.\n * Passed as an option to the map object.\n *\n * @returns {Hash} `this`\n */\nclass Hash {\n  private map: Map;\n  private updateHash: () => number | void;\n  private hashName?: string;\n\n  constructor(hashName?: string) {\n    this.hashName = hashName && encodeURIComponent(hashName);\n\n    // Mobile Safari doesn't allow updating the hash more than 100 times per 30 seconds.\n    this.updateHash = throttle(this.updateHashUnthrottled, (30 * 1000) / 100);\n  }\n  public addTo(map: Map) {\n    this.map = map;\n    $window.addEventListener('hashchange', this.onHashChange, false);\n    this.map.on('moveend', this.updateHash);\n    return this;\n  }\n  public remove() {\n    $window.removeEventListener('hashchange', this.onHashChange, false);\n    this.map.off('moveend', this.updateHash);\n    // clearTimeout(this.updateHash());\n\n    // @ts-ignore\n    delete this.map;\n    return this;\n  }\n\n  public onHashChange = () => {\n    const loc = this.getCurrentHash();\n    if (loc.length >= 3 && !loc.some((v: string) => isNaN(+v))) {\n      const bearing =\n        this.map.dragRotate.isEnabled() && this.map.touchZoomRotate.isEnabled()\n          ? +(loc[3] || 0)\n          : this.map.getBearing();\n      this.map.jumpTo({\n        center: [+loc[2], +loc[1]],\n        zoom: +loc[0],\n        bearing,\n        pitch: +(loc[4] || 0),\n      });\n      return true;\n    }\n    return false;\n  };\n\n  private getCurrentHash = () => {\n    // Get the current hash from location, stripped from its number sign\n    const hash = window.location.hash.replace('#', '');\n    if (this.hashName) {\n      // Split the parameter-styled hash into parts and find the value we need\n      let keyval;\n      hash\n        .split('&')\n        .map((part) => part.split('='))\n        .forEach((part) => {\n          if (part[0] === this.hashName) {\n            keyval = part;\n          }\n        });\n      return (keyval ? keyval[1] || '' : '').split('/');\n    }\n    return hash.split('/');\n  };\n\n  private getHashString(mapFeedback?: boolean) {\n    const center = this.map.getCenter();\n    const zoom = Math.round(this.map.getZoom() * 100) / 100;\n    // derived from equation: 512px * 2^z / 360 / 10^d < 0.5px\n    const precision = Math.ceil(\n      (zoom * Math.LN2 + Math.log(512 / 360 / 0.5)) / Math.LN10,\n    );\n    const m = Math.pow(10, precision);\n    const lng = Math.round(center.lng * m) / m;\n    const lat = Math.round(center.lat * m) / m;\n    const bearing = this.map.getBearing();\n    const pitch = this.map.getPitch();\n    let hash = '';\n    if (mapFeedback) {\n      // new map feedback site has some constraints that don't allow\n      // us to use the same hash format as we do for the Map hash option.\n      hash += `/${lng}/${lat}/${zoom}`;\n    } else {\n      hash += `${zoom}/${lat}/${lng}`;\n    }\n\n    if (bearing || pitch) {\n      hash += `/${Math.round(bearing * 10) / 10}`;\n    }\n    if (pitch) {\n      hash += `/${Math.round(pitch)}`;\n    }\n\n    if (this.hashName) {\n      const hashName = this.hashName;\n      let found = false;\n      const parts = window.location.hash\n        .slice(1)\n        .split('&')\n        .map((part) => {\n          const key = part.split('=')[0];\n          if (key === hashName) {\n            found = true;\n            return `${key}=${hash}`;\n          }\n          return part;\n        })\n        .filter((a) => a);\n      if (!found) {\n        parts.push(`${hashName}=${hash}`);\n      }\n      return `#${parts.join('&')}`;\n    }\n\n    return `#${hash}`;\n  }\n\n  private updateHashUnthrottled = () => {\n    const hash = this.getHashString();\n    try {\n      window.history.replaceState(window.history.state, '', hash);\n    } catch (SecurityError) {\n      // IE11 does not allow this if the page is within an iframe created\n      // with iframe.contentWindow.document.write(...).\n      // https://github.com/mapbox/mapbox-gl-js/issues/7410\n    }\n  };\n}\n\nexport default Hash;\n"]},"metadata":{},"sourceType":"module"}