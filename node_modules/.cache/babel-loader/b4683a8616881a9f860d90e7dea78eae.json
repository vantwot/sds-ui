{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { deepMix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape'; // 带有图标的圆，可用于拓扑图中\n\nShape.registerNode('simple-circle', {\n  // 自定义节点时的配置\n  options: {\n    size: Global.defaultNode.size,\n    style: {\n      x: 0,\n      y: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize,\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'simple-circle',\n  // 文本位置\n  labelPosition: 'center',\n  shapeMap: {},\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var name = this.type + \"-keyShape\";\n    var keyShape = group.addShape('circle', {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      name: name,\n      draggable: true\n    });\n    group['shapeMap'][name] = keyShape;\n    return keyShape;\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = deepMix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var r = size[0] / 2;\n\n    var styles = __assign({\n      x: 0,\n      y: 0,\n      r: r\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item, updateType) {\n    var size = this.getSize(cfg); // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      r: size[0] / 2\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var keyShape = item.get('keyShape');\n    var style = deepMix({}, keyShape.attr(), strokeStyle, cfg.style);\n    this.updateShape(cfg, item, style, true, updateType);\n  }\n}, 'single-node');","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/@antv/g6-core/es/element/nodes/simple-circle.js"],"names":["__assign","deepMix","Global","Shape","registerNode","options","size","defaultNode","style","x","y","stroke","fill","lineWidth","labelCfg","nodeLabel","fontSize","fontFamily","windowFontFamily","stateStyles","nodeStateStyles","shapeType","labelPosition","shapeMap","drawShape","cfg","group","getShapeStyle","name","type","keyShape","addShape","attrs","className","draggable","defaultStyle","mergeStyle","getOptions","strokeStyle","color","getSize","r","styles","update","item","updateType","get","attr","updateShape"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { deepMix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape'; // 带有图标的圆，可用于拓扑图中\n\nShape.registerNode('simple-circle', {\n  // 自定义节点时的配置\n  options: {\n    size: Global.defaultNode.size,\n    style: {\n      x: 0,\n      y: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize,\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'simple-circle',\n  // 文本位置\n  labelPosition: 'center',\n  shapeMap: {},\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var name = this.type + \"-keyShape\";\n    var keyShape = group.addShape('circle', {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      name: name,\n      draggable: true\n    });\n    group['shapeMap'][name] = keyShape;\n    return keyShape;\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = deepMix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var r = size[0] / 2;\n\n    var styles = __assign({\n      x: 0,\n      y: 0,\n      r: r\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item, updateType) {\n    var size = this.getSize(cfg); // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      r: size[0] / 2\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var keyShape = item.get('keyShape');\n    var style = deepMix({}, keyShape.attr(), strokeStyle, cfg.style);\n    this.updateShape(cfg, item, style, true, updateType);\n  }\n}, 'single-node');"]},"metadata":{},"sourceType":"module"}