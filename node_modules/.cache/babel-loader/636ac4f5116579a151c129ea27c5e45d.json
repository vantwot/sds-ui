{"ast":null,"code":"import { Geometry } from '../geometry';\nexport class Segment extends Geometry {\n  constructor() {\n    super(...arguments);\n    this.isVisible = true;\n    this.isSegment = true;\n    this.isSubpathStart = false;\n  }\n\n  get end() {\n    return this.endPoint;\n  }\n\n  get start() {\n    if (this.previousSegment == null) {\n      throw new Error('Missing previous segment. (This segment cannot be the ' + 'first segment of a path, or segment has not yet been ' + 'added to a path.)');\n    }\n\n    return this.previousSegment.end;\n  }\n\n  closestPointT(p, options) {\n    if (this.closestPointNormalizedLength) {\n      return this.closestPointNormalizedLength(p);\n    }\n\n    throw new Error('Neither `closestPointT` nor `closestPointNormalizedLength` method is implemented.');\n  } // eslint-disable-next-line\n\n\n  lengthAtT(t, options) {\n    if (t <= 0) {\n      return 0;\n    }\n\n    const length = this.length();\n\n    if (t >= 1) {\n      return length;\n    }\n\n    return length * t;\n  }\n\n  divideAtT(t) {\n    if (this.divideAt) {\n      return this.divideAt(t);\n    }\n\n    throw new Error('Neither `divideAtT` nor `divideAt` method is implemented.');\n  }\n\n  pointAtT(t) {\n    if (this.pointAt) {\n      return this.pointAt(t);\n    }\n\n    throw new Error('Neither `pointAtT` nor `pointAt` method is implemented.');\n  }\n\n  tangentAtT(t) {\n    if (this.tangentAt) {\n      return this.tangentAt(t);\n    }\n\n    throw new Error('Neither `tangentAtT` nor `tangentAt` method is implemented.');\n  }\n\n}","map":{"version":3,"sources":["../../../src/geometry/path/segment.ts"],"names":[],"mappings":"AAGA,SAAS,QAAT,QAAyB,aAAzB;AAEA,OAAM,MAAgB,OAAhB,SAAgC,QAAhC,CAAwC;AAA9C,EAAA,WAAA,GAAA;;AACE,SAAA,SAAA,GAAY,IAAZ;AACA,SAAA,SAAA,GAAY,IAAZ;AACA,SAAA,cAAA,GAAiB,KAAjB;AAuHD;;AAjHQ,MAAH,GAAG,GAAA;AACL,WAAO,KAAK,QAAZ;AACD;;AAEQ,MAAL,KAAK,GAAA;AACP,QAAI,KAAK,eAAL,IAAwB,IAA5B,EAAkC;AAChC,YAAM,IAAI,KAAJ,CACJ,2DACE,uDADF,GAEE,mBAHE,CAAN;AAKD;;AAED,WAAO,KAAK,eAAL,CAAqB,GAA5B;AACD;;AAcD,EAAA,aAAa,CACX,CADW,EAEX,OAFW,EAEc;AAEzB,QAAI,KAAK,4BAAT,EAAuC;AACrC,aAAO,KAAK,4BAAL,CAAkC,CAAlC,CAAP;AACD;;AAED,UAAM,IAAI,KAAJ,CACJ,mFADI,CAAN;AAGD,GAhD2C,CAwD5C;;;AACA,EAAA,SAAS,CAAC,CAAD,EAAY,OAAZ,EAAqC;AAC5C,QAAI,CAAC,IAAI,CAAT,EAAY;AACV,aAAO,CAAP;AACD;;AAED,UAAM,MAAM,GAAG,KAAK,MAAL,EAAf;;AACA,QAAI,CAAC,IAAI,CAAT,EAAY;AACV,aAAO,MAAP;AACD;;AAED,WAAO,MAAM,GAAG,CAAhB;AACD;;AAYD,EAAA,SAAS,CAAC,CAAD,EAAU;AACjB,QAAI,KAAK,QAAT,EAAmB;AACjB,aAAO,KAAK,QAAL,CAAc,CAAd,CAAP;AACD;;AAED,UAAM,IAAI,KAAJ,CAAU,2DAAV,CAAN;AACD;;AAQD,EAAA,QAAQ,CAAC,CAAD,EAAU;AAChB,QAAI,KAAK,OAAT,EAAkB;AAChB,aAAO,KAAK,OAAL,CAAa,CAAb,CAAP;AACD;;AAED,UAAM,IAAI,KAAJ,CAAU,yDAAV,CAAN;AACD;;AASD,EAAA,UAAU,CAAC,CAAD,EAAU;AAClB,QAAI,KAAK,SAAT,EAAoB;AAClB,aAAO,KAAK,SAAL,CAAe,CAAf,CAAP;AACD;;AAED,UAAM,IAAI,KAAJ,CACJ,6DADI,CAAN;AAGD;;AArH2C","sourceRoot":"","sourcesContent":["import { Geometry } from '../geometry';\nexport class Segment extends Geometry {\n    constructor() {\n        super(...arguments);\n        this.isVisible = true;\n        this.isSegment = true;\n        this.isSubpathStart = false;\n    }\n    get end() {\n        return this.endPoint;\n    }\n    get start() {\n        if (this.previousSegment == null) {\n            throw new Error('Missing previous segment. (This segment cannot be the ' +\n                'first segment of a path, or segment has not yet been ' +\n                'added to a path.)');\n        }\n        return this.previousSegment.end;\n    }\n    closestPointT(p, options) {\n        if (this.closestPointNormalizedLength) {\n            return this.closestPointNormalizedLength(p);\n        }\n        throw new Error('Neither `closestPointT` nor `closestPointNormalizedLength` method is implemented.');\n    }\n    // eslint-disable-next-line\n    lengthAtT(t, options) {\n        if (t <= 0) {\n            return 0;\n        }\n        const length = this.length();\n        if (t >= 1) {\n            return length;\n        }\n        return length * t;\n    }\n    divideAtT(t) {\n        if (this.divideAt) {\n            return this.divideAt(t);\n        }\n        throw new Error('Neither `divideAtT` nor `divideAt` method is implemented.');\n    }\n    pointAtT(t) {\n        if (this.pointAt) {\n            return this.pointAt(t);\n        }\n        throw new Error('Neither `pointAtT` nor `pointAt` method is implemented.');\n    }\n    tangentAtT(t) {\n        if (this.tangentAt) {\n            return this.tangentAt(t);\n        }\n        throw new Error('Neither `tangentAtT` nor `tangentAt` method is implemented.');\n    }\n}\n//# sourceMappingURL=segment.js.map"]},"metadata":{},"sourceType":"module"}