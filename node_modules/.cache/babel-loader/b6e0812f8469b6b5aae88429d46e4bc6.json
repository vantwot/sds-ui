{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Dom } from '../util';\nimport { Highlighter } from '../registry';\nimport { Base } from './base';\nexport class HighlightManager extends Base {\n  constructor() {\n    super(...arguments);\n    this.highlights = {};\n  }\n\n  init() {\n    this.startListening();\n  }\n\n  startListening() {\n    this.graph.on('cell:highlight', this.onCellHighlight, this);\n    this.graph.on('cell:unhighlight', this.onCellUnhighlight, this);\n  }\n\n  stopListening() {\n    this.graph.off('cell:highlight', this.onCellHighlight, this);\n    this.graph.off('cell:unhighlight', this.onCellUnhighlight, this);\n  }\n\n  onCellHighlight(_ref) {\n    let {\n      view: cellView,\n      magnet,\n      options = {}\n    } = _ref;\n    const resolved = this.resolveHighlighter(options);\n\n    if (!resolved) {\n      return;\n    }\n\n    const key = this.getHighlighterId(magnet, resolved);\n\n    if (!this.highlights[key]) {\n      const highlighter = resolved.highlighter;\n      highlighter.highlight(cellView, magnet, Object.assign({}, resolved.args));\n      this.highlights[key] = {\n        cellView,\n        magnet,\n        highlighter,\n        args: resolved.args\n      };\n    }\n  }\n\n  onCellUnhighlight(_ref2) {\n    let {\n      magnet,\n      options = {}\n    } = _ref2;\n    const resolved = this.resolveHighlighter(options);\n\n    if (!resolved) {\n      return;\n    }\n\n    const id = this.getHighlighterId(magnet, resolved);\n    this.unhighlight(id);\n  }\n\n  resolveHighlighter(options) {\n    const graphOptions = this.options;\n    let highlighterDef = options.highlighter;\n\n    if (highlighterDef == null) {\n      // check for built-in types\n      const type = options.type;\n      highlighterDef = type && graphOptions.highlighting[type] || graphOptions.highlighting.default;\n    }\n\n    if (highlighterDef == null) {\n      return null;\n    }\n\n    const def = typeof highlighterDef === 'string' ? {\n      name: highlighterDef\n    } : highlighterDef;\n    const name = def.name;\n    const highlighter = Highlighter.registry.get(name);\n\n    if (highlighter == null) {\n      return Highlighter.registry.onNotFound(name);\n    }\n\n    Highlighter.check(name, highlighter);\n    return {\n      name,\n      highlighter,\n      args: def.args || {}\n    };\n  }\n\n  getHighlighterId(magnet, options) {\n    Dom.ensureId(magnet);\n    return options.name + magnet.id + JSON.stringify(options.args);\n  }\n\n  unhighlight(id) {\n    const highlight = this.highlights[id];\n\n    if (highlight) {\n      highlight.highlighter.unhighlight(highlight.cellView, highlight.magnet, highlight.args);\n      delete this.highlights[id];\n    }\n  }\n\n  dispose() {\n    Object.keys(this.highlights).forEach(id => this.unhighlight(id));\n    this.stopListening();\n  }\n\n}\n\n__decorate([HighlightManager.dispose()], HighlightManager.prototype, \"dispose\", null);","map":{"version":3,"sources":["../../src/graph/highlight.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Dom } from '../util';\nimport { Highlighter } from '../registry';\nimport { Base } from './base';\nexport class HighlightManager extends Base {\n    constructor() {\n        super(...arguments);\n        this.highlights = {};\n    }\n    init() {\n        this.startListening();\n    }\n    startListening() {\n        this.graph.on('cell:highlight', this.onCellHighlight, this);\n        this.graph.on('cell:unhighlight', this.onCellUnhighlight, this);\n    }\n    stopListening() {\n        this.graph.off('cell:highlight', this.onCellHighlight, this);\n        this.graph.off('cell:unhighlight', this.onCellUnhighlight, this);\n    }\n    onCellHighlight({ view: cellView, magnet, options = {}, }) {\n        const resolved = this.resolveHighlighter(options);\n        if (!resolved) {\n            return;\n        }\n        const key = this.getHighlighterId(magnet, resolved);\n        if (!this.highlights[key]) {\n            const highlighter = resolved.highlighter;\n            highlighter.highlight(cellView, magnet, Object.assign({}, resolved.args));\n            this.highlights[key] = {\n                cellView,\n                magnet,\n                highlighter,\n                args: resolved.args,\n            };\n        }\n    }\n    onCellUnhighlight({ magnet, options = {}, }) {\n        const resolved = this.resolveHighlighter(options);\n        if (!resolved) {\n            return;\n        }\n        const id = this.getHighlighterId(magnet, resolved);\n        this.unhighlight(id);\n    }\n    resolveHighlighter(options) {\n        const graphOptions = this.options;\n        let highlighterDef = options.highlighter;\n        if (highlighterDef == null) {\n            // check for built-in types\n            const type = options.type;\n            highlighterDef =\n                (type && graphOptions.highlighting[type]) ||\n                    graphOptions.highlighting.default;\n        }\n        if (highlighterDef == null) {\n            return null;\n        }\n        const def = typeof highlighterDef === 'string'\n            ? {\n                name: highlighterDef,\n            }\n            : highlighterDef;\n        const name = def.name;\n        const highlighter = Highlighter.registry.get(name);\n        if (highlighter == null) {\n            return Highlighter.registry.onNotFound(name);\n        }\n        Highlighter.check(name, highlighter);\n        return {\n            name,\n            highlighter,\n            args: def.args || {},\n        };\n    }\n    getHighlighterId(magnet, options) {\n        Dom.ensureId(magnet);\n        return options.name + magnet.id + JSON.stringify(options.args);\n    }\n    unhighlight(id) {\n        const highlight = this.highlights[id];\n        if (highlight) {\n            highlight.highlighter.unhighlight(highlight.cellView, highlight.magnet, highlight.args);\n            delete this.highlights[id];\n        }\n    }\n    dispose() {\n        Object.keys(this.highlights).forEach((id) => this.unhighlight(id));\n        this.stopListening();\n    }\n}\n__decorate([\n    HighlightManager.dispose()\n], HighlightManager.prototype, \"dispose\", null);\n//# sourceMappingURL=highlight.js.map"]},"metadata":{},"sourceType":"module"}