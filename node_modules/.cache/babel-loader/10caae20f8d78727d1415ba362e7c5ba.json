{"ast":null,"code":"import { NumberExt } from '../../util';\nimport { Point } from '../../geometry'; // eslint-disable-next-line\n\nexport function resolve(fn) {\n  return function (view, magnet, ref, options) {\n    if (ref instanceof Element) {\n      var refView = this.graph.renderer.findViewByElem(ref);\n      var refPoint;\n\n      if (refView) {\n        if (refView.isEdgeElement(ref)) {\n          var distance = options.fixedAt != null ? options.fixedAt : '50%';\n          refPoint = getPointAtEdge(refView, distance);\n        } else {\n          refPoint = refView.getBBoxOfElement(ref).getCenter();\n        }\n      } else {\n        refPoint = new Point();\n      }\n\n      return fn.call(this, view, magnet, refPoint, options);\n    }\n\n    return fn.apply(this, arguments); // eslint-disable-line\n  };\n}\nexport function getPointAtEdge(edgeView, value) {\n  var isPercentage = NumberExt.isPercentage(value);\n  var num = typeof value === 'string' ? parseFloat(value) : value;\n\n  if (isPercentage) {\n    return edgeView.getPointAtRatio(num / 100);\n  }\n\n  return edgeView.getPointAtLength(num);\n}","map":{"version":3,"sources":["../../../src/registry/node-anchor/util.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,YAA1B;AACA,SAAS,KAAT,QAAsB,gBAAtB,C,CAOA;;AACA,OAAM,SAAU,OAAV,CAAyC,EAAzC,EAA8C;AAClD,SAAO,UAEL,IAFK,EAGL,MAHK,EAIL,GAJK,EAKL,OALK,EAKkB;AAEvB,QAAI,GAAG,YAAY,OAAnB,EAA4B;AAC1B,UAAM,OAAO,GAAG,KAAK,KAAL,CAAW,QAAX,CAAoB,cAApB,CAAmC,GAAnC,CAAhB;AACA,UAAI,QAAJ;;AACA,UAAI,OAAJ,EAAa;AACX,YAAI,OAAO,CAAC,aAAR,CAAsB,GAAtB,CAAJ,EAAgC;AAC9B,cAAM,QAAQ,GAAG,OAAO,CAAC,OAAR,IAAmB,IAAnB,GAA0B,OAAO,CAAC,OAAlC,GAA4C,KAA7D;AACA,UAAA,QAAQ,GAAG,cAAc,CAAC,OAAD,EAAsB,QAAtB,CAAzB;AACD,SAHD,MAGO;AACL,UAAA,QAAQ,GAAG,OAAO,CAAC,gBAAR,CAAyB,GAAzB,EAA8B,SAA9B,EAAX;AACD;AACF,OAPD,MAOO;AACL,QAAA,QAAQ,GAAG,IAAI,KAAJ,EAAX;AACD;;AACD,aAAO,EAAE,CAAC,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,MAApB,EAA4B,QAA5B,EAAsC,OAAtC,CAAP;AACD;;AACD,WAAO,EAAE,CAAC,KAAH,CAAS,IAAT,EAAe,SAAf,CAAP,CAjBuB,CAiBU;AACtB,GAvBb;AAwBD;AAED,OAAM,SAAU,cAAV,CAAyB,QAAzB,EAA6C,KAA7C,EAAmE;AACvE,MAAM,YAAY,GAAG,SAAS,CAAC,YAAV,CAAuB,KAAvB,CAArB;AACA,MAAM,GAAG,GAAG,OAAO,KAAP,KAAiB,QAAjB,GAA4B,UAAU,CAAC,KAAD,CAAtC,GAAgD,KAA5D;;AACA,MAAI,YAAJ,EAAkB;AAChB,WAAO,QAAQ,CAAC,eAAT,CAAyB,GAAG,GAAG,GAA/B,CAAP;AACD;;AACD,SAAO,QAAQ,CAAC,gBAAT,CAA0B,GAA1B,CAAP;AACD","sourceRoot":"","sourcesContent":["import { NumberExt } from '../../util';\nimport { Point } from '../../geometry';\n// eslint-disable-next-line\nexport function resolve(fn) {\n    return function (view, magnet, ref, options) {\n        if (ref instanceof Element) {\n            const refView = this.graph.renderer.findViewByElem(ref);\n            let refPoint;\n            if (refView) {\n                if (refView.isEdgeElement(ref)) {\n                    const distance = options.fixedAt != null ? options.fixedAt : '50%';\n                    refPoint = getPointAtEdge(refView, distance);\n                }\n                else {\n                    refPoint = refView.getBBoxOfElement(ref).getCenter();\n                }\n            }\n            else {\n                refPoint = new Point();\n            }\n            return fn.call(this, view, magnet, refPoint, options);\n        }\n        return fn.apply(this, arguments); // eslint-disable-line\n    };\n}\nexport function getPointAtEdge(edgeView, value) {\n    const isPercentage = NumberExt.isPercentage(value);\n    const num = typeof value === 'string' ? parseFloat(value) : value;\n    if (isPercentage) {\n        return edgeView.getPointAtRatio(num / 100);\n    }\n    return edgeView.getPointAtLength(num);\n}\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}