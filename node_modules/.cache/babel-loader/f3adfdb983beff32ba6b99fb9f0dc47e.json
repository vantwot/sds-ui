{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { PolygonExtrudeTriangulation } from '../../core/triangulation';\nvar buildFrag = \"uniform float u_opacity: 1.0;\\nuniform vec4 u_baseColor : [ 1.0, 0, 0, 1.0 ];\\nuniform vec4 u_brightColor : [ 1.0, 0, 0, 1.0 ];\\nuniform vec4 u_windowColor : [ 1.0, 0, 0, 1.0 ];\\nuniform float u_near : 0;\\nuniform float u_far : 1;\\nvarying vec4 v_Color;\\nvarying vec2 v_texCoord;\\nuniform float u_Zoom : 1;\\nuniform float u_time;\\n\\n#pragma include \\\"picking\\\"\\n\\nvec3 getWindowColor(float n, float hot, vec3 brightColor, vec3 darkColor) {\\n    float s = step(hot, n);\\n    vec3 color = mix(brightColor,vec3(0.9,0.9,1.0),n);\\n\\n    return mix(darkColor, color, s);\\n}\\nfloat random (vec2 st) {\\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);\\n}\\n\\nfloat LinearizeDepth()\\n{\\n    float z = gl_FragCoord.z * 2.0 - 1.0;\\n    return (2.0 * u_near * u_far) / (u_far + u_near - z * (u_far - u_near));\\n}\\n\\nvec3 fog(vec3 color, vec3 fogColor, float depth){\\n    float fogFactor=clamp(depth,0.0,1.0);\\n    vec3 output_color=mix(fogColor,color,fogFactor);\\n    return output_color;\\n}\\n\\nfloat sdRect(vec2 p, vec2 sz) {\\n  vec2 d = abs(p) - sz;\\n  float outside = length(max(d, 0.));\\n  float inside = min(max(d.x, d.y), 0.);\\n  return outside + inside;\\n}\\n\\nvoid main() {\\n  gl_FragColor = v_Color;\\n  vec3 baseColor = u_baseColor.xyz;\\n  vec3 brightColor = u_brightColor.xyz;\\n  vec3 windowColor = u_windowColor.xyz;\\n  float targetColId = 5.;\\n  float depth = 1.0 - LinearizeDepth() / u_far * u_Zoom;\\n  vec3 fogColor = vec3(23.0/255.0,31.0/255.0,51.0/255.0);\\n  if(v_texCoord.x < 0.) { //\\u9876\\u90E8\\u989C\\u8272\\n       vec3 foggedColor = fog(baseColor.xyz + vec3(0.12*0.9,0.2*0.9,0.3*0.9),fogColor,depth);\\n       gl_FragColor = vec4( foggedColor, v_Color.w);\\n  }else { // \\u4FA7\\u9762\\u989C\\u8272\\n        vec2 st = v_texCoord;\\n        vec2  UvScale = v_texCoord;\\n        float tStep = min(0.08,max(0.05* (18.0-u_Zoom),0.02));\\n        float tStart = 0.25 * tStep;\\n        float tEnd = 0.75 * tStep;\\n        float u = mod(UvScale.x, tStep);\\n        float v = mod(UvScale.y, tStep);\\n        float ux = floor(UvScale.x/tStep);\\n        float uy = floor(UvScale.y/tStep);\\n        float n = random(vec2(ux,uy));\\n        float lightP = u_time;\\n        float head = 1.0- step(0.005,st.y);\\n        /*step3*/\\n        // \\u5C06\\u7A97\\u6237\\u989C\\u8272\\u548C\\u5899\\u9762\\u989C\\u8272\\u533A\\u522B\\u5F00\\u6765\\n        float sU = step(tStart, u) - step(tEnd, u);\\n        float sV = step(tStart, v) - step(tEnd, v);\\n        vec2 windowSize = vec2(abs(tEnd-tStart),abs(tEnd-tStart));\\n        float dist = sdRect(vec2(u,v), windowSize);\\n        float s = sU * sV;\\n\\n        float curColId = floor(UvScale.x / tStep);\\n        float sCol = step(targetColId - 0.2, curColId) - step(targetColId + 0.2, curColId);\\n\\n        float mLightP = mod(lightP, 2.);\\n        float sRow = step(mLightP - 0.2, st.y) - step(mLightP, st.y);\\n        if(ux == targetColId){\\n            n =0.;\\n        }\\n        float timeP = min(0.75, abs ( sin(u_time/3.0) ) );\\n        float hot = smoothstep(1.0,0.0,timeP);\\n        vec3 color = mix(baseColor, getWindowColor(n,hot,brightColor,windowColor), s);\\n        //vec3 color = mix(baseColor, getWindowColor(n,hot,brightColor,windowColor), 1.0);\\n        float sFinal = s * sCol * sRow;\\n        color += mix(baseColor, brightColor, sFinal*n);\\n        if (st.y<0.01){\\n        color = baseColor;\\n         }\\n        if(head ==1.0) { // \\u9876\\u90E8\\u4EAE\\u7EBF\\n            color = brightColor;\\n        }\\n        color = color * v_Color.rgb;\\n\\n        vec3 foggedColor = fog(color,fogColor,depth);\\n\\n        gl_FragColor = vec4(foggedColor,1.0);\\n  }\\n  gl_FragColor.a *= u_opacity;\\n  gl_FragColor = filterColor(gl_FragColor);\\n}\\n\";\nvar buildVert = \"precision highp float;\\n\\n#define ambientRatio 0.5\\n#define diffuseRatio 0.3\\n#define specularRatio 0.2\\n\\nattribute vec4 a_Color;\\nattribute vec3 a_Position;\\nattribute vec3 a_Normal;\\nattribute float a_Size;\\nuniform mat4 u_ModelMatrix;\\n\\nattribute vec2 a_Uv;\\nvarying vec2 v_texCoord;\\n\\nvarying vec4 v_Color;\\nuniform mat4 u_Mvp;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"light\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  vec4 pos = vec4(a_Position.xy, a_Position.z * a_Size, 1.0);\\n  vec4 project_pos = project_position(pos);\\n   v_texCoord = a_Uv;\\n  // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n    gl_Position = u_Mvp * (vec4(project_pos.xyz, 1.0));\\n  } else {\\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\\n  }\\n\\n  float lightWeight = calc_lighting(pos);\\n  // v_Color = a_Color;\\n  v_Color = vec4(a_Color.rgb * lightWeight, a_Color.w);\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\n\nvar CityBuildModel = function (_BaseModel) {\n  _inherits(CityBuildModel, _BaseModel);\n\n  var _super = _createSuper(CityBuildModel);\n\n  function CityBuildModel() {\n    _classCallCheck(this, CityBuildModel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CityBuildModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          _ref$opacity = _ref.opacity,\n          opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n          _ref$baseColor = _ref.baseColor,\n          baseColor = _ref$baseColor === void 0 ? 'rgb(16,16,16)' : _ref$baseColor,\n          _ref$brightColor = _ref.brightColor,\n          brightColor = _ref$brightColor === void 0 ? 'rgb(255,176,38)' : _ref$brightColor,\n          _ref$windowColor = _ref.windowColor,\n          windowColor = _ref$windowColor === void 0 ? 'rgb(30,60,89)' : _ref$windowColor,\n          _ref$time = _ref.time,\n          time = _ref$time === void 0 ? 0 : _ref$time;\n\n      return {\n        u_opacity: opacity,\n        u_baseColor: rgb2arr(baseColor),\n        u_brightColor: rgb2arr(brightColor),\n        u_windowColor: rgb2arr(windowColor),\n        u_time: this.layer.getLayerAnimateTime() || time\n      };\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      this.startModelAnimate();\n      return [this.layer.buildLayerModel({\n        moduleName: 'cityBuilding',\n        vertexShader: buildVert,\n        fragmentShader: buildFrag,\n        triangulation: PolygonExtrudeTriangulation\n      })];\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'normal',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Normal',\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {\n            return normal;\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var _feature$size = feature.size,\n                size = _feature$size === void 0 ? 10 : _feature$size;\n            return Array.isArray(size) ? [size[0]] : [size];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Uv',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var size = feature.size;\n            return [vertex[3], vertex[4]];\n          }\n        }\n      });\n    }\n  }]);\n\n  return CityBuildModel;\n}(BaseModel);\n\nexport { CityBuildModel as default };","map":{"version":3,"sources":["../../../src/citybuliding/models/build.ts"],"names":["CityBuildModel","BaseModel","opacity","baseColor","brightColor","windowColor","time","u_opacity","u_baseColor","rgb2arr","u_brightColor","u_windowColor","u_time","moduleName","vertexShader","fragmentShader","triangulation","PolygonExtrudeTriangulation","name","type","AttributeType","descriptor","buffer","usage","gl","data","FLOAT","size","update","feature","Array","vertex"],"mappings":"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","sourcesContent":["import { AttributeType, gl, IEncodeFeature, IModel } from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { PolygonExtrudeTriangulation } from '../../core/triangulation';\nimport buildFrag from '../shaders/build_frag.glsl';\nimport buildVert from '../shaders/build_vert.glsl';\ninterface ICityBuildLayerStyleOptions {\n  opacity: number;\n  baseColor: string;\n  brightColor: string;\n  windowColor: string;\n  time: number;\n}\nexport default class CityBuildModel extends BaseModel {\n  public getUninforms() {\n    const {\n      opacity = 1,\n      baseColor = 'rgb(16,16,16)',\n      brightColor = 'rgb(255,176,38)',\n      windowColor = 'rgb(30,60,89)',\n      time = 0,\n    } = this.layer.getLayerConfig() as ICityBuildLayerStyleOptions;\n    return {\n      u_opacity: opacity,\n      u_baseColor: rgb2arr(baseColor),\n      u_brightColor: rgb2arr(brightColor),\n      u_windowColor: rgb2arr(windowColor),\n      u_time: this.layer.getLayerAnimateTime() || time,\n    };\n  }\n\n  public initModels(): IModel[] {\n    this.startModelAnimate();\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'cityBuilding',\n        vertexShader: buildVert,\n        fragmentShader: buildFrag,\n        triangulation: PolygonExtrudeTriangulation,\n      }),\n    ];\n  }\n\n  protected registerBuiltinAttributes() {\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'normal',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Normal',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n          normal: number[],\n        ) => {\n          return normal;\n        },\n      },\n    });\n\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 10 } = feature;\n          return Array.isArray(size) ? [size[0]] : [size as number];\n        },\n      },\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size } = feature;\n          return [vertex[3], vertex[4]];\n        },\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}