{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport React from 'react';\nimport { Syringe } from 'mana-syringe';\nimport { Deferred } from '../../common/deferred';\nimport { MAX_ZOOM, MIN_ZOOM, XFLOW_DEFAULT_EDGE, XFLOW_DEFAULT_NODE, XFLOW_DEFAULT_GROUP_NODE } from '../../constants';\nimport { uuidv4 } from '../../common/uuid';\nimport { XFlowDefaultGroupNode } from './react-group-node';\nimport { XFlowDefaultNode } from './react-node';\nexport var NsGraphConfig;\n\n(function (NsGraphConfig) {\n  NsGraphConfig.CONFIG_TYPE = 'GraphConfig';\n  /** 默认的Node解析函数 */\n\n  NsGraphConfig.defaultNodeTypeParser = nodeConfig => nodeConfig.renderKey;\n  /** 构造的Edge解析函数 */\n\n\n  NsGraphConfig.defaultEdgeTypeParser = edgeConfig => edgeConfig.renderKey;\n  /** XFlow默认的React组件 */\n\n\n  NsGraphConfig.defaultNodeMapValue = [[XFLOW_DEFAULT_NODE, XFlowDefaultNode], [XFLOW_DEFAULT_GROUP_NODE, XFlowDefaultGroupNode]];\n})(NsGraphConfig || (NsGraphConfig = {}));\n\nexport class GraphConfig {\n  /** 构造函数 */\n  constructor() {\n    /** 配置类型 */\n    this.CONFIG_TYPE = NsGraphConfig.CONFIG_TYPE;\n    /** 画布的属性 */\n\n    this.x6Options = new Deferred();\n    /** 画布的root节点 */\n\n    this.rootContainer = new Deferred();\n    /** 画布的dom节点 */\n\n    this.graphContainer = new Deferred();\n    /** 自定义节点 */\n\n    this.nodeRender = new Map(NsGraphConfig.defaultNodeMapValue);\n    /** 自定义边 */\n\n    this.edgeRender = new Map();\n    /** 解析node渲染类型的parser */\n\n    this.nodeTypeParser = NsGraphConfig.defaultNodeTypeParser;\n    /** 解析edge渲染类型的parser  */\n\n    this.edgeTypeParser = NsGraphConfig.defaultEdgeTypeParser;\n    /** 自定义事件 */\n\n    this.events = [];\n\n    this.mergeX6Config = config => __awaiter(this, void 0, void 0, function* () {\n      const current = yield this.getX6Config();\n      return Object.assign(current, config);\n    });\n\n    this.getX6Config = () => __awaiter(this, void 0, void 0, function* () {\n      const config = yield this.x6Options.promise;\n      return config;\n    });\n\n    this.setX6Config = options => {\n      var _a;\n\n      const defaultOptions = this.getDefaultGraphOptions();\n      (_a = this.x6Options) === null || _a === void 0 ? void 0 : _a.resolve(Object.assign(Object.assign({}, defaultOptions), options));\n    };\n\n    this.setRootContainer = ele => {\n      ele && (this === null || this === void 0 ? void 0 : this.rootContainer.resolve(ele));\n    };\n\n    this.setGraphContainer = ele => {\n      var _a;\n\n      ele && ((_a = this.graphContainer) === null || _a === void 0 ? void 0 : _a.resolve(ele));\n    };\n\n    this.setEvents = events => {\n      this.events = events;\n    };\n\n    this.setDefaultNodeRender = component => {\n      this.nodeRender.set(XFLOW_DEFAULT_NODE, component);\n    };\n\n    this.setDefaultEdgeRender = component => {\n      this.edgeRender.set(XFLOW_DEFAULT_EDGE, component);\n    };\n\n    this.setNodeRender = (renderKey, component) => {\n      this.nodeRender.set(renderKey, component);\n    };\n\n    this.setEdgeRender = (renderKey, component) => {\n      this.edgeRender.set(renderKey, component);\n    };\n    /** 设置解析node render key的 parser */\n\n\n    this.setNodeTypeParser = parser => {\n      this.nodeTypeParser = parser;\n    };\n    /** 设置解析edge render key的 parser */\n\n\n    this.setEdgeTypeParser = parser => {\n      this.edgeTypeParser = parser;\n    };\n    /** 获取Graph参数 */\n\n\n    this.getConfig = () => __awaiter(this, void 0, void 0, function* () {\n      const [rootContainer, graphContainer, x6Options] = yield Promise.all([this.rootContainer.promise, this.graphContainer.promise, this.x6Options.promise]);\n      const graphConfig = {\n        xflowInstanceId: this.xflowInstanceId,\n        graphId: this.graphId,\n        nodeViewId: this.graphId,\n        rootContainer,\n        graphContainer,\n        x6Options,\n        events: this.events,\n        nodeRender: this.nodeRender,\n        edgeRender: this.edgeRender,\n        nodeTypeParser: this.nodeTypeParser,\n        edgeTypeParser: this.edgeTypeParser\n      };\n      return graphConfig;\n    });\n\n    this.getDefaultGraphOptions = () => {\n      const defaultOptions = {\n        // 节点是否可旋转\n        rotating: false,\n        // 节点是否可调整大小\n        resizing: false,\n        // 节点连线规则配置（详细文档：https://X6.antv.vision/zh/docs/api/graph/interaction#connecting）\n        connecting: {\n          snap: true,\n          dangling: false,\n          highlight: false,\n          connectionPoint: 'rect',\n          router: {\n            name: 'er'\n          },\n          connector: {\n            name: 'rounded',\n            args: {\n              radius: 15\n            }\n          }\n        },\n        // 画布背景，支持颜色/图片/水印等（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/background）\n        background: {},\n        // 网格配置（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/grid）\n        grid: {\n          visible: true\n        },\n        // 点选/框选配置（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/selection）\n        selecting: {\n          strict: true,\n          enabled: true,\n          multiple: true,\n          selectCellOnMoved: true,\n          showNodeSelectionBox: false,\n          // 框选可以选中edge\n          rubberEdge: true,\n          // 框选可以选中node\n          rubberNode: true,\n          movable: true\n        },\n        // 对齐线配置，辅助移动节点排版（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/snapline）\n        snapline: {\n          enabled: false\n        },\n        // 撤销/重做能力（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/history）\n        history: {\n          enabled: false\n        },\n        // 剪切板，支持跨画布的复制/粘贴（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/clipboard）\n        clipboard: {\n          enabled: true,\n          useLocalStorage: true\n        },\n        // 使画布具备滚动、平移、居中、缩放等能力（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/scroller）\n        scroller: {\n          enabled: false\n        },\n        // 滚轮缩放 （详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/mousewheel）\n        mousewheel: {\n          enabled: true,\n          minScale: MIN_ZOOM,\n          maxScale: MAX_ZOOM,\n          factor: 1.1,\n          modifiers: ['ctrl', 'meta']\n        },\n\n        /** 普通画布, 支持拖拽平移 */\n        panning: {\n          enabled: true\n        },\n\n        /** 缩放参数 */\n        scaling: {\n          min: MIN_ZOOM,\n          max: MAX_ZOOM\n        },\n\n        /** keyboad */\n        keyboard: {\n          enabled: true\n        },\n\n        /** 定制节点和边的交互行为 */\n        interacting: {\n          /** 节点默认可以被移动 */\n          nodeMovable: true,\n\n          /** 边上标签默认不可以被移动 */\n          edgeLabelMovable: false\n        },\n        async: false\n      };\n      return defaultOptions;\n    };\n\n    this.dispose = () => {\n      // TODO: 统一看下defer的销毁\n      this.rootContainer = new Deferred();\n      this.graphContainer = new Deferred();\n      this.x6Options = new Deferred();\n    };\n\n    this.graphId = uuidv4();\n  }\n\n}\nexport const IGraphOptionProvider = Symbol('IGraphOptionProvider');\nexport const registerGraphConfig = (register, graphConfig) => {\n  register(IGraphOptionProvider, {\n    lifecycle: Syringe.Lifecycle.singleton,\n    useDynamic: () => {\n      return {\n        getOptions: () => __awaiter(void 0, void 0, void 0, function* () {\n          return graphConfig.getConfig();\n        })\n      };\n    }\n  });\n};\nexport const createGraphConfig = addOptions => props => {\n  /** bridge config and props */\n  const propsContainer = React.useMemo(() => ({\n    getValue: () => ({})\n  }), []);\n\n  propsContainer.getValue = () => props;\n\n  const graphConfig = React.useMemo(() => {\n    const config = new GraphConfig();\n    addOptions(config, propsContainer);\n    return config;\n  }, [propsContainer]);\n  return graphConfig;\n};","map":{"version":3,"sources":["../../../src/xflow-main/graph/config.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport React from 'react';\nimport { Syringe } from 'mana-syringe';\nimport { Deferred } from '../../common/deferred';\nimport { MAX_ZOOM, MIN_ZOOM, XFLOW_DEFAULT_EDGE, XFLOW_DEFAULT_NODE, XFLOW_DEFAULT_GROUP_NODE, } from '../../constants';\nimport { uuidv4 } from '../../common/uuid';\nimport { XFlowDefaultGroupNode } from './react-group-node';\nimport { XFlowDefaultNode } from './react-node';\nexport var NsGraphConfig;\n(function (NsGraphConfig) {\n    NsGraphConfig.CONFIG_TYPE = 'GraphConfig';\n    /** 默认的Node解析函数 */\n    NsGraphConfig.defaultNodeTypeParser = (nodeConfig) => nodeConfig.renderKey;\n    /** 构造的Edge解析函数 */\n    NsGraphConfig.defaultEdgeTypeParser = (edgeConfig) => edgeConfig.renderKey;\n    /** XFlow默认的React组件 */\n    NsGraphConfig.defaultNodeMapValue = [\n        [XFLOW_DEFAULT_NODE, XFlowDefaultNode],\n        [XFLOW_DEFAULT_GROUP_NODE, XFlowDefaultGroupNode],\n    ];\n})(NsGraphConfig || (NsGraphConfig = {}));\nexport class GraphConfig {\n    /** 构造函数 */\n    constructor() {\n        /** 配置类型 */\n        this.CONFIG_TYPE = NsGraphConfig.CONFIG_TYPE;\n        /** 画布的属性 */\n        this.x6Options = new Deferred();\n        /** 画布的root节点 */\n        this.rootContainer = new Deferred();\n        /** 画布的dom节点 */\n        this.graphContainer = new Deferred();\n        /** 自定义节点 */\n        this.nodeRender = new Map(NsGraphConfig.defaultNodeMapValue);\n        /** 自定义边 */\n        this.edgeRender = new Map();\n        /** 解析node渲染类型的parser */\n        this.nodeTypeParser = NsGraphConfig.defaultNodeTypeParser;\n        /** 解析edge渲染类型的parser  */\n        this.edgeTypeParser = NsGraphConfig.defaultEdgeTypeParser;\n        /** 自定义事件 */\n        this.events = [];\n        this.mergeX6Config = (config) => __awaiter(this, void 0, void 0, function* () {\n            const current = yield this.getX6Config();\n            return Object.assign(current, config);\n        });\n        this.getX6Config = () => __awaiter(this, void 0, void 0, function* () {\n            const config = yield this.x6Options.promise;\n            return config;\n        });\n        this.setX6Config = (options) => {\n            var _a;\n            const defaultOptions = this.getDefaultGraphOptions();\n            (_a = this.x6Options) === null || _a === void 0 ? void 0 : _a.resolve(Object.assign(Object.assign({}, defaultOptions), options));\n        };\n        this.setRootContainer = (ele) => {\n            ele && (this === null || this === void 0 ? void 0 : this.rootContainer.resolve(ele));\n        };\n        this.setGraphContainer = (ele) => {\n            var _a;\n            ele && ((_a = this.graphContainer) === null || _a === void 0 ? void 0 : _a.resolve(ele));\n        };\n        this.setEvents = (events) => {\n            this.events = events;\n        };\n        this.setDefaultNodeRender = (component) => {\n            this.nodeRender.set(XFLOW_DEFAULT_NODE, component);\n        };\n        this.setDefaultEdgeRender = (component) => {\n            this.edgeRender.set(XFLOW_DEFAULT_EDGE, component);\n        };\n        this.setNodeRender = (renderKey, component) => {\n            this.nodeRender.set(renderKey, component);\n        };\n        this.setEdgeRender = (renderKey, component) => {\n            this.edgeRender.set(renderKey, component);\n        };\n        /** 设置解析node render key的 parser */\n        this.setNodeTypeParser = (parser) => {\n            this.nodeTypeParser = parser;\n        };\n        /** 设置解析edge render key的 parser */\n        this.setEdgeTypeParser = (parser) => {\n            this.edgeTypeParser = parser;\n        };\n        /** 获取Graph参数 */\n        this.getConfig = () => __awaiter(this, void 0, void 0, function* () {\n            const [rootContainer, graphContainer, x6Options] = yield Promise.all([\n                this.rootContainer.promise,\n                this.graphContainer.promise,\n                this.x6Options.promise,\n            ]);\n            const graphConfig = {\n                xflowInstanceId: this.xflowInstanceId,\n                graphId: this.graphId,\n                nodeViewId: this.graphId,\n                rootContainer,\n                graphContainer,\n                x6Options,\n                events: this.events,\n                nodeRender: this.nodeRender,\n                edgeRender: this.edgeRender,\n                nodeTypeParser: this.nodeTypeParser,\n                edgeTypeParser: this.edgeTypeParser,\n            };\n            return graphConfig;\n        });\n        this.getDefaultGraphOptions = () => {\n            const defaultOptions = {\n                // 节点是否可旋转\n                rotating: false,\n                // 节点是否可调整大小\n                resizing: false,\n                // 节点连线规则配置（详细文档：https://X6.antv.vision/zh/docs/api/graph/interaction#connecting）\n                connecting: {\n                    snap: true,\n                    dangling: false,\n                    highlight: false,\n                    connectionPoint: 'rect',\n                    router: { name: 'er' },\n                    connector: {\n                        name: 'rounded',\n                        args: {\n                            radius: 15,\n                        },\n                    },\n                },\n                // 画布背景，支持颜色/图片/水印等（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/background）\n                background: {},\n                // 网格配置（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/grid）\n                grid: {\n                    visible: true,\n                },\n                // 点选/框选配置（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/selection）\n                selecting: {\n                    strict: true,\n                    enabled: true,\n                    multiple: true,\n                    selectCellOnMoved: true,\n                    showNodeSelectionBox: false,\n                    // 框选可以选中edge\n                    rubberEdge: true,\n                    // 框选可以选中node\n                    rubberNode: true,\n                    movable: true,\n                },\n                // 对齐线配置，辅助移动节点排版（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/snapline）\n                snapline: {\n                    enabled: false,\n                },\n                // 撤销/重做能力（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/history）\n                history: {\n                    enabled: false,\n                },\n                // 剪切板，支持跨画布的复制/粘贴（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/clipboard）\n                clipboard: {\n                    enabled: true,\n                    useLocalStorage: true,\n                },\n                // 使画布具备滚动、平移、居中、缩放等能力（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/scroller）\n                scroller: {\n                    enabled: false,\n                },\n                // 滚轮缩放 （详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/mousewheel）\n                mousewheel: {\n                    enabled: true,\n                    minScale: MIN_ZOOM,\n                    maxScale: MAX_ZOOM,\n                    factor: 1.1,\n                    modifiers: ['ctrl', 'meta'],\n                },\n                /** 普通画布, 支持拖拽平移 */\n                panning: {\n                    enabled: true,\n                },\n                /** 缩放参数 */\n                scaling: {\n                    min: MIN_ZOOM,\n                    max: MAX_ZOOM,\n                },\n                /** keyboad */\n                keyboard: {\n                    enabled: true,\n                },\n                /** 定制节点和边的交互行为 */\n                interacting: {\n                    /** 节点默认可以被移动 */\n                    nodeMovable: true,\n                    /** 边上标签默认不可以被移动 */\n                    edgeLabelMovable: false,\n                },\n                async: false,\n            };\n            return defaultOptions;\n        };\n        this.dispose = () => {\n            // TODO: 统一看下defer的销毁\n            this.rootContainer = new Deferred();\n            this.graphContainer = new Deferred();\n            this.x6Options = new Deferred();\n        };\n        this.graphId = uuidv4();\n    }\n}\nexport const IGraphOptionProvider = Symbol('IGraphOptionProvider');\nexport const registerGraphConfig = (register, graphConfig) => {\n    register(IGraphOptionProvider, {\n        lifecycle: Syringe.Lifecycle.singleton,\n        useDynamic: () => {\n            return {\n                getOptions: () => __awaiter(void 0, void 0, void 0, function* () {\n                    return graphConfig.getConfig();\n                }),\n            };\n        },\n    });\n};\nexport const createGraphConfig = (addOptions) => (props) => {\n    /** bridge config and props */\n    const propsContainer = React.useMemo(() => ({ getValue: () => ({}) }), []);\n    propsContainer.getValue = () => props;\n    const graphConfig = React.useMemo(() => {\n        const config = new GraphConfig();\n        addOptions(config, propsContainer);\n        return config;\n    }, [propsContainer]);\n    return graphConfig;\n};\n//# sourceMappingURL=config.js.map"]},"metadata":{},"sourceType":"module"}