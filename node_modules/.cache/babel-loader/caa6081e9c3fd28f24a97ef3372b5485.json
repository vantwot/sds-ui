{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport BaseLayer from '../core/BaseLayer';\nimport HeatMapModels from './models';\n\nvar HeatMapLayer = function (_BaseLayer) {\n  _inherits(HeatMapLayer, _BaseLayer);\n\n  var _super = _createSuper(HeatMapLayer);\n\n  function HeatMapLayer() {\n    var _this;\n\n    _classCallCheck(this, HeatMapLayer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", 'HeatMapLayer');\n\n    return _this;\n  }\n\n  _createClass(HeatMapLayer, [{\n    key: \"buildModels\",\n    value: function buildModels() {\n      var shape = this.getModelType();\n      this.layerModel = new HeatMapModels[shape](this);\n      this.models = this.layerModel.initModels();\n    }\n  }, {\n    key: \"rebuildModels\",\n    value: function rebuildModels() {\n      this.models = this.layerModel.buildModels();\n    }\n  }, {\n    key: \"renderModels\",\n    value: function renderModels() {\n      var _this2 = this;\n\n      var shape = this.getModelType();\n\n      if (shape === 'heatmap') {\n        if (this.layerModel) {\n          this.layerModel.render();\n        }\n\n        return this;\n      }\n\n      if (this.layerModelNeedUpdate) {\n        this.models = this.layerModel.buildModels();\n        this.layerModelNeedUpdate = false;\n      }\n\n      this.models.forEach(function (model) {\n        return model.draw({\n          uniforms: _this2.layerModel.getUninforms()\n        });\n      });\n      return this;\n    }\n  }, {\n    key: \"getConfigSchema\",\n    value: function getConfigSchema() {\n      return {\n        properties: {\n          opacity: {\n            type: 'number',\n            minimum: 0,\n            maximum: 1\n          }\n        }\n      };\n    }\n  }, {\n    key: \"getModelType\",\n    value: function getModelType() {\n      var _shapeAttribute$scale;\n\n      var shapeAttribute = this.styleAttributeService.getLayerStyleAttribute('shape');\n\n      var _this$getLayerConfig = this.getLayerConfig(),\n          shape3d = _this$getLayerConfig.shape3d;\n\n      var source = this.getSource();\n      var sourceType = source.data.type;\n      var shape = (shapeAttribute === null || shapeAttribute === void 0 ? void 0 : (_shapeAttribute$scale = shapeAttribute.scale) === null || _shapeAttribute$scale === void 0 ? void 0 : _shapeAttribute$scale.field) || 'heatmap';\n\n      if (shape === 'heatmap' || shape === 'heatmap3d') {\n        return 'heatmap';\n      }\n\n      if (sourceType === 'hexagon') {\n        return (shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) === -1 ? 'hexagon' : 'grid3d';\n      }\n\n      if (sourceType === 'grid') {\n        return (shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) === -1 ? 'grid' : 'grid3d';\n      }\n\n      return 'heatmap';\n    }\n  }]);\n\n  return HeatMapLayer;\n}(BaseLayer);\n\nexport { HeatMapLayer as default };","map":{"version":3,"sources":["../../src/heatmap/index.ts"],"names":["HeatMapLayer","BaseLayer","shape","HeatMapModels","uniforms","properties","opacity","type","minimum","maximum","shapeAttribute","shape3d","source","sourceType"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAA,SAAA,MAAA,mBAAA;AACA,OAAA,aAAA,MAAA,UAAA;;IAIqBA,Y;;;;;;;;;;;;;;;;2DACG,c;;;;;;;WAEtB,SAAA,WAAA,GAAqB;AACnB,UAAME,KAAK,GAAG,KAAd,YAAc,EAAd;AACA,WAAA,UAAA,GAAkB,IAAIC,aAAa,CAAjB,KAAiB,CAAjB,CAAlB,IAAkB,CAAlB;AACA,WAAA,MAAA,GAAc,KAAA,UAAA,CAAd,UAAc,EAAd;AACD;;;WACD,SAAA,aAAA,GAAuB;AACrB,WAAA,MAAA,GAAc,KAAA,UAAA,CAAd,WAAc,EAAd;AACD;;;WACD,SAAA,YAAA,GAAsB;AAAA,UAAA,MAAA,GAAA,IAAA;;AACpB,UAAMD,KAAK,GAAG,KAAd,YAAc,EAAd;;AACA,UAAIA,KAAK,KAAT,SAAA,EAAyB;AACvB,YAAI,KAAJ,UAAA,EAAqB;AACnB,eAAA,UAAA,CAAA,MAAA;AACD;;AAED,eAAA,IAAA;AACD;;AACD,UAAI,KAAJ,oBAAA,EAA+B;AAC7B,aAAA,MAAA,GAAc,KAAA,UAAA,CAAd,WAAc,EAAd;AACA,aAAA,oBAAA,GAAA,KAAA;AACD;;AACD,WAAA,MAAA,CAAA,OAAA,CAAoB,UAAA,KAAA,EAAA;AAAA,eAClB,KAAK,CAAL,IAAA,CAAW;AACTE,UAAAA,QAAQ,EAAE,MAAI,CAAJ,UAAA,CAAA,YAAA;AADD,SAAX,CADkB;AAApB,OAAA;AAKA,aAAA,IAAA;AACD;;;WACD,SAAA,eAAA,GAA4B;AAC1B,aAAO;AACLC,QAAAA,UAAU,EAAE;AACVC,UAAAA,OAAO,EAAE;AACPC,YAAAA,IAAI,EADG,QAAA;AAEPC,YAAAA,OAAO,EAFA,CAAA;AAGPC,YAAAA,OAAO,EAAE;AAHF;AADC;AADP,OAAP;AASD;;;WAED,SAAA,YAAA,GAA2C;AAAA,UAAA,qBAAA;;AACzC,UAAMC,cAAc,GAAG,KAAA,qBAAA,CAAA,sBAAA,CAAvB,OAAuB,CAAvB;;AAGA,UAAA,oBAAA,GAAoB,KAApB,cAAoB,EAApB;AAAA,UAAQC,OAAR,GAAA,oBAAA,CAAA,OAAA;;AACA,UAAMC,MAAM,GAAG,KAAf,SAAe,EAAf;AACA,UAAMC,UAAU,GAAGD,MAAM,CAANA,IAAAA,CAAnB,IAAA;AACA,UAAMV,KAAK,GACT,CAACQ,cAAD,KAAA,IAACA,IAAAA,cAAD,KAAA,KAAA,CAACA,GAAD,KAAA,CAACA,GAAD,CAAA,qBAAA,GAACA,cAAc,CAAf,KAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAACA,qBAAAA,CAAD,KAAA,KADF,SAAA;;AAEA,UAAIR,KAAK,KAALA,SAAAA,IAAuBA,KAAK,KAAhC,WAAA,EAAkD;AAChD,eAAA,SAAA;AACD;;AACD,UAAIW,UAAU,KAAd,SAAA,EAA8B;AAC5B,eAAO,CAAA,OAAO,KAAP,IAAA,IAAA,OAAO,KAAA,KAAP,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAP,OAAA,CAAA,KAAA,CAAA,MAA4B,CAA5B,CAAA,GAAA,SAAA,GAAP,QAAA;AACD;;AACD,UAAIA,UAAU,KAAd,MAAA,EAA2B;AACzB,eAAO,CAAA,OAAO,KAAP,IAAA,IAAA,OAAO,KAAA,KAAP,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAP,OAAA,CAAA,KAAA,CAAA,MAA4B,CAA5B,CAAA,GAAA,MAAA,GAAP,QAAA;AACD;;AACD,aAAA,SAAA;AACD;;;;EA9DuCZ,S;;SAArBD,Y","sourcesContent":["import { AttributeType, gl, IEncodeFeature, ILayer } from '@antv/l7-core';\nimport BaseLayer from '../core/BaseLayer';\nimport HeatMapModels, { HeatMapModelType } from './models';\ninterface IHeatMapLayerStyleOptions {\n  opacity: number;\n}\nexport default class HeatMapLayer extends BaseLayer<IHeatMapLayerStyleOptions> {\n  public type: string = 'HeatMapLayer';\n\n  public buildModels() {\n    const shape = this.getModelType();\n    this.layerModel = new HeatMapModels[shape](this);\n    this.models = this.layerModel.initModels();\n  }\n  public rebuildModels() {\n    this.models = this.layerModel.buildModels();\n  }\n  public renderModels() {\n    const shape = this.getModelType();\n    if (shape === 'heatmap') {\n      if (this.layerModel) {\n        this.layerModel.render(); // 独立的渲染流程\n      }\n\n      return this;\n    }\n    if (this.layerModelNeedUpdate) {\n      this.models = this.layerModel.buildModels();\n      this.layerModelNeedUpdate = false;\n    }\n    this.models.forEach((model) =>\n      model.draw({\n        uniforms: this.layerModel.getUninforms(),\n      }),\n    );\n    return this;\n  }\n  protected getConfigSchema() {\n    return {\n      properties: {\n        opacity: {\n          type: 'number',\n          minimum: 0,\n          maximum: 1,\n        },\n      },\n    };\n  }\n\n  protected getModelType(): HeatMapModelType {\n    const shapeAttribute = this.styleAttributeService.getLayerStyleAttribute(\n      'shape',\n    );\n    const { shape3d } = this.getLayerConfig();\n    const source = this.getSource();\n    const sourceType = source.data.type;\n    const shape =\n      (shapeAttribute?.scale?.field as HeatMapModelType) || 'heatmap';\n    if (shape === 'heatmap' || shape === 'heatmap3d') {\n      return 'heatmap';\n    }\n    if (sourceType === 'hexagon') {\n      return shape3d?.indexOf(shape) === -1 ? 'hexagon' : 'grid3d';\n    }\n    if (sourceType === 'grid') {\n      return shape3d?.indexOf(shape) === -1 ? 'grid' : 'grid3d';\n    }\n    return 'heatmap';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}