{"ast":null,"code":"import React from 'react';\nimport { useXFlowApp, usePositionStyle } from '@antv/xflow-core';\nimport classNames from 'classnames';\nimport { PropsProxy } from './config';\nimport { PanelContext } from './context';\n\nconst WorkspacePanel = props => {\n  const {\n    className,\n    position,\n    style,\n    children\n  } = props;\n  const app = useXFlowApp();\n  const positionStyle = usePositionStyle(position);\n  const propsProxy = React.useMemo(() => {\n    return new PropsProxy();\n  }, []);\n  React.useEffect(() => {\n    return () => {\n      propsProxy.dispose();\n    };\n  }, [propsProxy]);\n\n  if (!app || !app.modelService) {\n    return null;\n  }\n\n  propsProxy.getValue = () => props;\n\n  const clz = classNames({\n    [className]: !!className,\n    'xflow-workspace-panel': true\n  });\n  const {\n    commandService,\n    modelService\n  } = app;\n  return React.createElement(PanelContext.Provider, {\n    value: {\n      propsProxy,\n      commandService,\n      modelService\n    }\n  }, React.createElement(\"div\", {\n    className: clz,\n    style: Object.assign(Object.assign({}, positionStyle), style)\n  }, children));\n};\n\nexport { usePanelContext } from './context';\nexport { WorkspacePanel };","map":{"version":3,"sources":["../../src/base-panel/index.tsx"],"names":[],"mappings":"AAEA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,WAAT,EAAsB,gBAAtB,QAA8C,kBAA9C;AACA,OAAO,UAAP,MAAuB,YAAvB;AACA,SAAS,UAAT,QAA2B,UAA3B;AACA,SAAS,YAAT,QAA6B,WAA7B;;AASA,MAAM,cAAc,GAAmC,KAAK,IAAG;AAC7D,QAAM;AAAE,IAAA,SAAF;AAAa,IAAA,QAAb;AAAuB,IAAA,KAAvB;AAA8B,IAAA;AAA9B,MAA2C,KAAjD;AACA,QAAM,GAAG,GAAG,WAAW,EAAvB;AACA,QAAM,aAAa,GAAG,gBAAgB,CAAC,QAAD,CAAtC;AAEA,QAAM,UAAU,GAAG,KAAK,CAAC,OAAN,CAAc,MAAK;AACpC,WAAO,IAAI,UAAJ,EAAP;AACD,GAFkB,EAEhB,EAFgB,CAAnB;AAIA,EAAA,KAAK,CAAC,SAAN,CAAgB,MAAK;AACnB,WAAO,MAAK;AACV,MAAA,UAAU,CAAC,OAAX;AACD,KAFD;AAGD,GAJD,EAIG,CAAC,UAAD,CAJH;;AAMA,MAAI,CAAC,GAAD,IAAQ,CAAC,GAAG,CAAC,YAAjB,EAA+B;AAC7B,WAAO,IAAP;AACD;;AAED,EAAA,UAAU,CAAC,QAAX,GAAsB,MAAM,KAA5B;;AAEA,QAAM,GAAG,GAAG,UAAU,CAAC;AACrB,KAAC,SAAD,GAAa,CAAC,CAAC,SADM;AAErB,6BAAyB;AAFJ,GAAD,CAAtB;AAKA,QAAM;AAAE,IAAA,cAAF;AAAkB,IAAA;AAAlB,MAAmC,GAAzC;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,YAAY,CAAC,QAAd,EAAsB;AAAC,IAAA,KAAK,EAAE;AAAE,MAAA,UAAF;AAAc,MAAA,cAAd;AAA8B,MAAA;AAA9B;AAAR,GAAtB,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,IAAA,SAAS,EAAE,GADb;AAEE,IAAA,KAAK,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACA,aADA,CAAA,EAEA,KAFA;AAFP,GAAA,EAOG,QAPH,CADF,CADF;AAaD,CAzCD;;AA2CA,SAAS,eAAT,QAAgC,WAAhC;AACA,SAAS,cAAT","sourceRoot":"","sourcesContent":["import React from 'react';\nimport { useXFlowApp, usePositionStyle } from '@antv/xflow-core';\nimport classNames from 'classnames';\nimport { PropsProxy } from './config';\nimport { PanelContext } from './context';\nconst WorkspacePanel = props => {\n    const { className, position, style, children } = props;\n    const app = useXFlowApp();\n    const positionStyle = usePositionStyle(position);\n    const propsProxy = React.useMemo(() => {\n        return new PropsProxy();\n    }, []);\n    React.useEffect(() => {\n        return () => {\n            propsProxy.dispose();\n        };\n    }, [propsProxy]);\n    if (!app || !app.modelService) {\n        return null;\n    }\n    propsProxy.getValue = () => props;\n    const clz = classNames({\n        [className]: !!className,\n        'xflow-workspace-panel': true,\n    });\n    const { commandService, modelService } = app;\n    return (React.createElement(PanelContext.Provider, { value: { propsProxy, commandService, modelService } },\n        React.createElement(\"div\", { className: clz, style: Object.assign(Object.assign({}, positionStyle), style) }, children)));\n};\nexport { usePanelContext } from './context';\nexport { WorkspacePanel };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}