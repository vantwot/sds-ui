{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsAddEdge;\n\n(function (NsAddEdge) {\n  /** Command: 用于注册named factory */\n  NsAddEdge.command = XFlowEdgeCommands.ADD_EDGE;\n  /** hookName */\n\n  NsAddEdge.hookKey = 'addEdge';\n  /** edge id 类型 */\n\n  NsAddEdge.createEdgeId = edge => {\n    return `${edge.source}:${edge.sourcePortId}-${edge.target}:${edge.targetPortId}`;\n  };\n})(NsAddEdge || (NsAddEdge = {}));\n\nlet AddEdgeCommand =\n/** 创建节点命令 */\nclass AddEdgeCommand {\n  constructor() {\n    /** 处理edgeConfig的兜底逻辑 */\n    this.processEdgeConfig = (args, edge) => __awaiter(this, void 0, void 0, function* () {\n      /** 处理edgeConfig没有返回id的问题 */\n      if (!edge.id) {\n        const {\n          createIdService = NsAddEdge.createEdgeId\n        } = args;\n        edge.id = yield createIdService(edge);\n      }\n\n      return edge;\n    });\n    /** 执行Cmd */\n\n\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.addEdge.call(\n      /** 执行 hooks pipeline处理args */\n      args,\n      /** 执行 callback */\n      handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          cellFactory,\n          createEdgeService,\n          commandService\n        } = handlerArgs;\n        const edgeConfig = createEdgeService ? yield createEdgeService(handlerArgs) : handlerArgs.edgeConfig;\n        const graph = yield this.ctx.getX6Graph();\n        yield this.processEdgeConfig(handlerArgs, edgeConfig);\n        let edgeCell;\n\n        if (cellFactory) {\n          const cell = yield cellFactory(edgeConfig, this);\n          edgeCell = graph.addEdge(cell);\n        } else {\n          edgeCell = graph.addEdge(Object.assign(Object.assign({}, edgeConfig), {\n            /** 由于X6的实现是React节点挂在label上的, 所以必须要给label设置值 */\n            label: (edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.label) || edgeConfig,\n            data: Object.assign({}, edgeConfig)\n          }));\n        }\n        /** 创建 undo */\n\n\n        const undo = Disposable.create(() => {\n          commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, {\n            x6Edge: edgeCell\n          });\n        });\n        /** add undo */\n\n        this.ctx.addUndo(undo);\n        return {\n          edgeConfig: edgeConfig,\n          edgeCell\n        };\n      }), runtimeHook);\n      this.ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], AddEdgeCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], AddEdgeCommand.prototype, \"init\", null);\n\nAddEdgeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsAddEdge.command.id\n  }\n})\n/** 创建节点命令 */\n], AddEdgeCommand);\nexport { AddEdgeCommand };","map":{"version":3,"sources":["../../../src/command-contributions/edge/edge-add.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsAddEdge;\n(function (NsAddEdge) {\n    /** Command: 用于注册named factory */\n    NsAddEdge.command = XFlowEdgeCommands.ADD_EDGE;\n    /** hookName */\n    NsAddEdge.hookKey = 'addEdge';\n    /** edge id 类型 */\n    NsAddEdge.createEdgeId = (edge) => {\n        return `${edge.source}:${edge.sourcePortId}-${edge.target}:${edge.targetPortId}`;\n    };\n})(NsAddEdge || (NsAddEdge = {}));\nlet AddEdgeCommand = \n/** 创建节点命令 */\nclass AddEdgeCommand {\n    constructor() {\n        /** 处理edgeConfig的兜底逻辑 */\n        this.processEdgeConfig = (args, edge) => __awaiter(this, void 0, void 0, function* () {\n            /** 处理edgeConfig没有返回id的问题 */\n            if (!edge.id) {\n                const { createIdService = NsAddEdge.createEdgeId } = args;\n                edge.id = yield createIdService(edge);\n            }\n            return edge;\n        });\n        /** 执行Cmd */\n        this.execute = () => __awaiter(this, void 0, void 0, function* () {\n            const { args, hooks: runtimeHook } = this.ctx.getArgs();\n            const hooks = this.ctx.getHooks();\n            const result = yield hooks.addEdge.call(\n            /** 执行 hooks pipeline处理args */\n            args, \n            /** 执行 callback */\n            (handlerArgs) => __awaiter(this, void 0, void 0, function* () {\n                const { cellFactory, createEdgeService, commandService } = handlerArgs;\n                const edgeConfig = createEdgeService\n                    ? yield createEdgeService(handlerArgs)\n                    : handlerArgs.edgeConfig;\n                const graph = yield this.ctx.getX6Graph();\n                yield this.processEdgeConfig(handlerArgs, edgeConfig);\n                let edgeCell;\n                if (cellFactory) {\n                    const cell = yield cellFactory(edgeConfig, this);\n                    edgeCell = graph.addEdge(cell);\n                }\n                else {\n                    edgeCell = graph.addEdge(Object.assign(Object.assign({}, edgeConfig), { \n                        /** 由于X6的实现是React节点挂在label上的, 所以必须要给label设置值 */\n                        label: (edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.label) || edgeConfig, data: Object.assign({}, edgeConfig) }));\n                }\n                /** 创建 undo */\n                const undo = Disposable.create(() => {\n                    commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, {\n                        x6Edge: edgeCell,\n                    });\n                });\n                /** add undo */\n                this.ctx.addUndo(undo);\n                return { edgeConfig: edgeConfig, edgeCell };\n            }), runtimeHook);\n            this.ctx.setResult(result);\n            return this;\n        });\n        /** undo cmd */\n        this.undo = () => __awaiter(this, void 0, void 0, function* () {\n            this.ctx.undo();\n            return this;\n        });\n        /** redo cmd */\n        this.redo = () => __awaiter(this, void 0, void 0, function* () {\n            if (!this.isUndoable) {\n                yield this.execute();\n            }\n            return this;\n        });\n    }\n    init() {\n        this.ctx = this.contextProvider();\n    }\n    isUndoable() {\n        return this.ctx.isUndoable();\n    }\n};\n__decorate([\n    inject(ICommandContextProvider),\n    __metadata(\"design:type\", Object)\n], AddEdgeCommand.prototype, \"contextProvider\", void 0);\n__decorate([\n    postConstruct(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], AddEdgeCommand.prototype, \"init\", null);\nAddEdgeCommand = __decorate([\n    injectable({\n        token: { token: ICommandHandler, named: NsAddEdge.command.id },\n    })\n    /** 创建节点命令 */\n], AddEdgeCommand);\nexport { AddEdgeCommand };\n//# sourceMappingURL=edge-add.js.map"]},"metadata":{},"sourceType":"module"}