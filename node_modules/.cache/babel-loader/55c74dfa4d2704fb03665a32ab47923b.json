{"ast":null,"code":"import JQuery from 'jquery';\nimport { Dom } from '../util';\nimport { Basecoat } from '../common';\nimport { Util, Config } from '../global';\nexport class View extends Basecoat {\n  constructor() {\n    super();\n    this.cid = Private.uniqueId();\n    View.views[this.cid] = this;\n  }\n\n  get priority() {\n    return 2;\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  confirmUpdate(flag, options) {\n    return 0;\n  }\n\n  $(elem) {\n    return View.$(elem);\n  }\n\n  empty() {\n    let elem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.container;\n    this.$(elem).empty();\n    return this;\n  }\n\n  unmount() {\n    let elem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.container;\n    this.$(elem).remove();\n    return this;\n  }\n\n  remove() {\n    let elem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.container;\n\n    if (elem === this.container) {\n      this.removeEventListeners(document);\n      this.onRemove();\n      delete View.views[this.cid];\n    }\n\n    this.unmount(elem);\n    return this;\n  }\n\n  onRemove() {}\n\n  setClass(className) {\n    let elem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n    elem.classList.value = Array.isArray(className) ? className.join(' ') : className;\n  }\n\n  addClass(className) {\n    let elem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n    this.$(elem).addClass(Array.isArray(className) ? className.join(' ') : className);\n    return this;\n  }\n\n  removeClass(className) {\n    let elem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n    this.$(elem).removeClass(Array.isArray(className) ? className.join(' ') : className);\n    return this;\n  }\n\n  setStyle(style) {\n    let elem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n    this.$(elem).css(style);\n    return this;\n  }\n\n  setAttrs(attrs) {\n    let elem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n\n    if (attrs != null && elem != null) {\n      if (elem instanceof SVGElement) {\n        Dom.attr(elem, attrs);\n      } else {\n        this.$(elem).attr(attrs);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Returns the value of the specified attribute of `node`.\n   *\n   * If the node does not set a value for attribute, start recursing up\n   * the DOM tree from node to lookup for attribute at the ancestors of\n   * node. If the recursion reaches CellView's root node and attribute\n   * is not found even there, return `null`.\n   */\n\n\n  findAttr(attrName) {\n    let elem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n    let current = elem;\n\n    while (current && current.nodeType === 1) {\n      const value = current.getAttribute(attrName);\n\n      if (value != null) {\n        return value;\n      }\n\n      if (current === this.container) {\n        return null;\n      }\n\n      current = current.parentNode;\n    }\n\n    return null;\n  }\n\n  find(selector) {\n    let rootElem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n    let selectors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.selectors;\n    return View.find(selector, rootElem, selectors).elems;\n  }\n\n  findOne(selector) {\n    let rootElem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n    let selectors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.selectors;\n    const nodes = this.find(selector, rootElem, selectors);\n    return nodes.length > 0 ? nodes[0] : null;\n  }\n\n  findByAttr(attrName) {\n    let elem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n    let node = elem;\n\n    while (node && node.getAttribute) {\n      const val = node.getAttribute(attrName);\n\n      if ((val != null || node === this.container) && val !== 'false') {\n        return node;\n      }\n\n      node = node.parentNode;\n    } // If the overall cell has set `magnet === false`, then returns\n    // `null` to announce there is no magnet found for this cell.\n    // This is especially useful to set on cells that have 'ports'.\n    // In this case, only the ports have set `magnet === true` and the\n    // overall element has `magnet === false`.\n\n\n    return null;\n  }\n\n  getSelector(elem, prevSelector) {\n    let selector;\n\n    if (elem === this.container) {\n      if (typeof prevSelector === 'string') {\n        selector = `> ${prevSelector}`;\n      }\n\n      return selector;\n    }\n\n    if (elem) {\n      const nth = Dom.index(elem) + 1;\n      selector = `${elem.tagName.toLowerCase()}:nth-child(${nth})`;\n\n      if (prevSelector) {\n        selector += ` > ${prevSelector}`;\n      }\n\n      selector = this.getSelector(elem.parentNode, selector);\n    }\n\n    return selector;\n  }\n\n  prefixClassName(className) {\n    return Util.prefix(className);\n  }\n\n  delegateEvents(events, append) {\n    if (events == null) {\n      return this;\n    }\n\n    if (!append) {\n      this.undelegateEvents();\n    }\n\n    const splitter = /^(\\S+)\\s*(.*)$/;\n    Object.keys(events).forEach(key => {\n      const match = key.match(splitter);\n\n      if (match == null) {\n        return;\n      }\n\n      const method = this.getEventHandler(events[key]);\n\n      if (typeof method === 'function') {\n        this.delegateEvent(match[1], match[2], method);\n      }\n    });\n    return this;\n  }\n\n  undelegateEvents() {\n    this.$(this.container).off(this.getEventNamespace());\n    return this;\n  }\n\n  delegateDocumentEvents(events, data) {\n    this.addEventListeners(document, events, data);\n    return this;\n  }\n\n  undelegateDocumentEvents() {\n    this.removeEventListeners(document);\n    return this;\n  }\n\n  delegateEvent(eventName, selector, listener) {\n    this.$(this.container).on(eventName + this.getEventNamespace(), selector, listener);\n    return this;\n  }\n\n  undelegateEvent(eventName, selector, listener) {\n    const name = eventName + this.getEventNamespace();\n\n    if (selector == null) {\n      this.$(this.container).off(name);\n    } else if (typeof selector === 'string') {\n      this.$(this.container).off(name, selector, listener);\n    } else {\n      this.$(this.container).off(name, selector);\n    }\n\n    return this;\n  }\n\n  addEventListeners(elem, events, data) {\n    if (events == null) {\n      return this;\n    }\n\n    const ns = this.getEventNamespace();\n    const $elem = this.$(elem);\n    Object.keys(events).forEach(eventName => {\n      const method = this.getEventHandler(events[eventName]);\n\n      if (typeof method === 'function') {\n        $elem.on(eventName + ns, data, method);\n      }\n    });\n    return this;\n  }\n\n  removeEventListeners(elem) {\n    if (elem != null) {\n      this.$(elem).off(this.getEventNamespace());\n    }\n\n    return this;\n  }\n\n  getEventNamespace() {\n    return `.${Config.prefixCls}-event-${this.cid}`;\n  } // eslint-disable-next-line\n\n\n  getEventHandler(handler) {\n    var _this = this;\n\n    // eslint-disable-next-line\n    let method;\n\n    if (typeof handler === 'string') {\n      const fn = this[handler];\n\n      if (typeof fn === 'function') {\n        method = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return fn.call(_this, ...args);\n        };\n      }\n    } else {\n      method = function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return handler.call(_this, ...args);\n      };\n    }\n\n    return method;\n  }\n\n  getEventTarget(e) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Touchmove/Touchend event's target is not reflecting the element\n    // under the coordinates as mousemove does.\n    // It holds the element when a touchstart triggered.\n    const {\n      target,\n      type,\n      clientX = 0,\n      clientY = 0\n    } = e;\n\n    if (options.fromPoint || type === 'touchmove' || type === 'touchend') {\n      return document.elementFromPoint(clientX, clientY);\n    }\n\n    return target;\n  }\n\n  stopPropagation(e) {\n    this.setEventData(e, {\n      propagationStopped: true\n    });\n    return this;\n  }\n\n  isPropagationStopped(e) {\n    return this.getEventData(e).propagationStopped === true;\n  }\n\n  getEventData(e) {\n    return this.eventData(e);\n  }\n\n  setEventData(e, data) {\n    return this.eventData(e, data);\n  }\n\n  eventData(e, data) {\n    if (e == null) {\n      throw new TypeError('Event object required');\n    }\n\n    let currentData = e.data;\n    const key = `__${this.cid}__`; // get\n\n    if (data == null) {\n      if (currentData == null) {\n        return {};\n      }\n\n      return currentData[key] || {};\n    } // set\n\n\n    if (currentData == null) {\n      currentData = e.data = {};\n    }\n\n    if (currentData[key] == null) {\n      currentData[key] = Object.assign({}, data);\n    } else {\n      currentData[key] = Object.assign(Object.assign({}, currentData[key]), data);\n    }\n\n    return currentData[key];\n  }\n\n  normalizeEvent(evt) {\n    return View.normalizeEvent(evt);\n  }\n\n}\n\n(function (View) {\n  function $(elem) {\n    return JQuery(elem);\n  }\n\n  View.$ = $;\n\n  function createElement(tagName, isSvgElement) {\n    return isSvgElement ? Dom.createSvgElement(tagName || 'g') : Dom.createElementNS(tagName || 'div');\n  }\n\n  View.createElement = createElement;\n\n  function find(selector, rootElem, selectors) {\n    if (!selector || selector === '.') {\n      return {\n        elems: [rootElem]\n      };\n    }\n\n    if (selectors) {\n      const nodes = selectors[selector];\n\n      if (nodes) {\n        return {\n          elems: Array.isArray(nodes) ? nodes : [nodes]\n        };\n      }\n    }\n\n    if (Config.useCSSSelector) {\n      return {\n        isCSSSelector: true,\n        // elems: Array.prototype.slice.call(rootElem.querySelectorAll(selector)),\n        elems: $(rootElem).find(selector).toArray()\n      };\n    }\n\n    return {\n      elems: []\n    };\n  }\n\n  View.find = find;\n\n  function normalizeEvent(evt) {\n    let normalizedEvent = evt;\n    const originalEvent = evt.originalEvent;\n    const touchEvt = originalEvent && originalEvent.changedTouches && originalEvent.changedTouches[0];\n\n    if (touchEvt) {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const key in evt) {\n        // copy all the properties from the input event that are not\n        // defined on the touch event (functions included).\n        if (touchEvt[key] === undefined) {\n          touchEvt[key] = evt[key];\n        }\n      }\n\n      normalizedEvent = touchEvt;\n    } // IE: evt.target could be set to SVGElementInstance for SVGUseElement\n\n\n    const target = normalizedEvent.target;\n\n    if (target) {\n      const useElement = target.correspondingUseElement;\n\n      if (useElement) {\n        normalizedEvent.target = useElement;\n      }\n    }\n\n    return normalizedEvent;\n  }\n\n  View.normalizeEvent = normalizeEvent;\n})(View || (View = {}));\n\n(function (View) {\n  View.views = {};\n\n  function getView(cid) {\n    return View.views[cid] || null;\n  }\n\n  View.getView = getView;\n})(View || (View = {}));\n\nvar Private;\n\n(function (Private) {\n  let counter = 0;\n\n  function uniqueId() {\n    const id = `v${counter}`;\n    counter += 1;\n    return id;\n  }\n\n  Private.uniqueId = uniqueId;\n})(Private || (Private = {}));","map":{"version":3,"sources":["../../src/view/view.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import JQuery from 'jquery';\nimport { Dom } from '../util';\nimport { Basecoat } from '../common';\nimport { Util, Config } from '../global';\nexport class View extends Basecoat {\n    constructor() {\n        super();\n        this.cid = Private.uniqueId();\n        View.views[this.cid] = this;\n    }\n    get priority() {\n        return 2;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    confirmUpdate(flag, options) {\n        return 0;\n    }\n    $(elem) {\n        return View.$(elem);\n    }\n    empty(elem = this.container) {\n        this.$(elem).empty();\n        return this;\n    }\n    unmount(elem = this.container) {\n        this.$(elem).remove();\n        return this;\n    }\n    remove(elem = this.container) {\n        if (elem === this.container) {\n            this.removeEventListeners(document);\n            this.onRemove();\n            delete View.views[this.cid];\n        }\n        this.unmount(elem);\n        return this;\n    }\n    onRemove() { }\n    setClass(className, elem = this.container) {\n        elem.classList.value = Array.isArray(className)\n            ? className.join(' ')\n            : className;\n    }\n    addClass(className, elem = this.container) {\n        this.$(elem).addClass(Array.isArray(className) ? className.join(' ') : className);\n        return this;\n    }\n    removeClass(className, elem = this.container) {\n        this.$(elem).removeClass(Array.isArray(className) ? className.join(' ') : className);\n        return this;\n    }\n    setStyle(style, elem = this.container) {\n        this.$(elem).css(style);\n        return this;\n    }\n    setAttrs(attrs, elem = this.container) {\n        if (attrs != null && elem != null) {\n            if (elem instanceof SVGElement) {\n                Dom.attr(elem, attrs);\n            }\n            else {\n                this.$(elem).attr(attrs);\n            }\n        }\n        return this;\n    }\n    /**\n     * Returns the value of the specified attribute of `node`.\n     *\n     * If the node does not set a value for attribute, start recursing up\n     * the DOM tree from node to lookup for attribute at the ancestors of\n     * node. If the recursion reaches CellView's root node and attribute\n     * is not found even there, return `null`.\n     */\n    findAttr(attrName, elem = this.container) {\n        let current = elem;\n        while (current && current.nodeType === 1) {\n            const value = current.getAttribute(attrName);\n            if (value != null) {\n                return value;\n            }\n            if (current === this.container) {\n                return null;\n            }\n            current = current.parentNode;\n        }\n        return null;\n    }\n    find(selector, rootElem = this.container, selectors = this.selectors) {\n        return View.find(selector, rootElem, selectors).elems;\n    }\n    findOne(selector, rootElem = this.container, selectors = this.selectors) {\n        const nodes = this.find(selector, rootElem, selectors);\n        return nodes.length > 0 ? nodes[0] : null;\n    }\n    findByAttr(attrName, elem = this.container) {\n        let node = elem;\n        while (node && node.getAttribute) {\n            const val = node.getAttribute(attrName);\n            if ((val != null || node === this.container) && val !== 'false') {\n                return node;\n            }\n            node = node.parentNode;\n        }\n        // If the overall cell has set `magnet === false`, then returns\n        // `null` to announce there is no magnet found for this cell.\n        // This is especially useful to set on cells that have 'ports'.\n        // In this case, only the ports have set `magnet === true` and the\n        // overall element has `magnet === false`.\n        return null;\n    }\n    getSelector(elem, prevSelector) {\n        let selector;\n        if (elem === this.container) {\n            if (typeof prevSelector === 'string') {\n                selector = `> ${prevSelector}`;\n            }\n            return selector;\n        }\n        if (elem) {\n            const nth = Dom.index(elem) + 1;\n            selector = `${elem.tagName.toLowerCase()}:nth-child(${nth})`;\n            if (prevSelector) {\n                selector += ` > ${prevSelector}`;\n            }\n            selector = this.getSelector(elem.parentNode, selector);\n        }\n        return selector;\n    }\n    prefixClassName(className) {\n        return Util.prefix(className);\n    }\n    delegateEvents(events, append) {\n        if (events == null) {\n            return this;\n        }\n        if (!append) {\n            this.undelegateEvents();\n        }\n        const splitter = /^(\\S+)\\s*(.*)$/;\n        Object.keys(events).forEach((key) => {\n            const match = key.match(splitter);\n            if (match == null) {\n                return;\n            }\n            const method = this.getEventHandler(events[key]);\n            if (typeof method === 'function') {\n                this.delegateEvent(match[1], match[2], method);\n            }\n        });\n        return this;\n    }\n    undelegateEvents() {\n        this.$(this.container).off(this.getEventNamespace());\n        return this;\n    }\n    delegateDocumentEvents(events, data) {\n        this.addEventListeners(document, events, data);\n        return this;\n    }\n    undelegateDocumentEvents() {\n        this.removeEventListeners(document);\n        return this;\n    }\n    delegateEvent(eventName, selector, listener) {\n        this.$(this.container).on(eventName + this.getEventNamespace(), selector, listener);\n        return this;\n    }\n    undelegateEvent(eventName, selector, listener) {\n        const name = eventName + this.getEventNamespace();\n        if (selector == null) {\n            this.$(this.container).off(name);\n        }\n        else if (typeof selector === 'string') {\n            this.$(this.container).off(name, selector, listener);\n        }\n        else {\n            this.$(this.container).off(name, selector);\n        }\n        return this;\n    }\n    addEventListeners(elem, events, data) {\n        if (events == null) {\n            return this;\n        }\n        const ns = this.getEventNamespace();\n        const $elem = this.$(elem);\n        Object.keys(events).forEach((eventName) => {\n            const method = this.getEventHandler(events[eventName]);\n            if (typeof method === 'function') {\n                $elem.on(eventName + ns, data, method);\n            }\n        });\n        return this;\n    }\n    removeEventListeners(elem) {\n        if (elem != null) {\n            this.$(elem).off(this.getEventNamespace());\n        }\n        return this;\n    }\n    getEventNamespace() {\n        return `.${Config.prefixCls}-event-${this.cid}`;\n    }\n    // eslint-disable-next-line\n    getEventHandler(handler) {\n        // eslint-disable-next-line\n        let method;\n        if (typeof handler === 'string') {\n            const fn = this[handler];\n            if (typeof fn === 'function') {\n                method = (...args) => fn.call(this, ...args);\n            }\n        }\n        else {\n            method = (...args) => handler.call(this, ...args);\n        }\n        return method;\n    }\n    getEventTarget(e, options = {}) {\n        // Touchmove/Touchend event's target is not reflecting the element\n        // under the coordinates as mousemove does.\n        // It holds the element when a touchstart triggered.\n        const { target, type, clientX = 0, clientY = 0 } = e;\n        if (options.fromPoint || type === 'touchmove' || type === 'touchend') {\n            return document.elementFromPoint(clientX, clientY);\n        }\n        return target;\n    }\n    stopPropagation(e) {\n        this.setEventData(e, { propagationStopped: true });\n        return this;\n    }\n    isPropagationStopped(e) {\n        return this.getEventData(e).propagationStopped === true;\n    }\n    getEventData(e) {\n        return this.eventData(e);\n    }\n    setEventData(e, data) {\n        return this.eventData(e, data);\n    }\n    eventData(e, data) {\n        if (e == null) {\n            throw new TypeError('Event object required');\n        }\n        let currentData = e.data;\n        const key = `__${this.cid}__`;\n        // get\n        if (data == null) {\n            if (currentData == null) {\n                return {};\n            }\n            return currentData[key] || {};\n        }\n        // set\n        if (currentData == null) {\n            currentData = e.data = {};\n        }\n        if (currentData[key] == null) {\n            currentData[key] = Object.assign({}, data);\n        }\n        else {\n            currentData[key] = Object.assign(Object.assign({}, currentData[key]), data);\n        }\n        return currentData[key];\n    }\n    normalizeEvent(evt) {\n        return View.normalizeEvent(evt);\n    }\n}\n(function (View) {\n    function $(elem) {\n        return JQuery(elem);\n    }\n    View.$ = $;\n    function createElement(tagName, isSvgElement) {\n        return isSvgElement\n            ? Dom.createSvgElement(tagName || 'g')\n            : Dom.createElementNS(tagName || 'div');\n    }\n    View.createElement = createElement;\n    function find(selector, rootElem, selectors) {\n        if (!selector || selector === '.') {\n            return { elems: [rootElem] };\n        }\n        if (selectors) {\n            const nodes = selectors[selector];\n            if (nodes) {\n                return { elems: Array.isArray(nodes) ? nodes : [nodes] };\n            }\n        }\n        if (Config.useCSSSelector) {\n            return {\n                isCSSSelector: true,\n                // elems: Array.prototype.slice.call(rootElem.querySelectorAll(selector)),\n                elems: $(rootElem).find(selector).toArray(),\n            };\n        }\n        return { elems: [] };\n    }\n    View.find = find;\n    function normalizeEvent(evt) {\n        let normalizedEvent = evt;\n        const originalEvent = evt.originalEvent;\n        const touchEvt = originalEvent &&\n            originalEvent.changedTouches &&\n            originalEvent.changedTouches[0];\n        if (touchEvt) {\n            // eslint-disable-next-line no-restricted-syntax\n            for (const key in evt) {\n                // copy all the properties from the input event that are not\n                // defined on the touch event (functions included).\n                if (touchEvt[key] === undefined) {\n                    touchEvt[key] = evt[key];\n                }\n            }\n            normalizedEvent = touchEvt;\n        }\n        // IE: evt.target could be set to SVGElementInstance for SVGUseElement\n        const target = normalizedEvent.target;\n        if (target) {\n            const useElement = target.correspondingUseElement;\n            if (useElement) {\n                normalizedEvent.target = useElement;\n            }\n        }\n        return normalizedEvent;\n    }\n    View.normalizeEvent = normalizeEvent;\n})(View || (View = {}));\n(function (View) {\n    View.views = {};\n    function getView(cid) {\n        return View.views[cid] || null;\n    }\n    View.getView = getView;\n})(View || (View = {}));\nvar Private;\n(function (Private) {\n    let counter = 0;\n    function uniqueId() {\n        const id = `v${counter}`;\n        counter += 1;\n        return id;\n    }\n    Private.uniqueId = uniqueId;\n})(Private || (Private = {}));\n//# sourceMappingURL=view.js.map"]},"metadata":{},"sourceType":"module"}