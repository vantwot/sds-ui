{"ast":null,"code":"export var Angle;\n\n(function (Angle) {\n  /**\n   * Converts radian angle to degree angle.\n   * @param rad The radians to convert.\n   */\n  function toDeg(rad) {\n    return 180 * rad / Math.PI % 360;\n  }\n\n  Angle.toDeg = toDeg;\n  /**\n   * Converts degree angle to radian angle.\n   * @param deg The degree angle to convert.\n   * @param over360\n   */\n\n  Angle.toRad = function (deg) {\n    var over360 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var d = over360 ? deg : deg % 360;\n    return d * Math.PI / 180;\n  };\n  /**\n   * Returns the angle in degrees and clamps its value between `0` and `360`.\n   */\n\n\n  function normalize(angle) {\n    return angle % 360 + (angle < 0 ? 360 : 0);\n  }\n\n  Angle.normalize = normalize;\n})(Angle || (Angle = {}));","map":{"version":3,"sources":["../../src/geometry/angle.ts"],"names":[],"mappings":"AAAA,OAAM,IAAW,KAAX;;AAAN,CAAA,UAAiB,KAAjB,EAAsB;AACpB;;;AAGG;AACH,WAAgB,KAAhB,CAAsB,GAAtB,EAAiC;AAC/B,WAAS,MAAM,GAAP,GAAc,IAAI,CAAC,EAApB,GAA0B,GAAjC;AACD;;AAFe,EAAA,KAAA,CAAA,KAAA,GAAK,KAAL;AAIhB;;;;AAIG;;AACU,EAAA,KAAA,CAAA,KAAA,GAAQ,UAAU,GAAV,EAAsC;AAAA,QAAf,OAAe,uEAAL,KAAK;AACzD,QAAM,CAAC,GAAG,OAAO,GAAG,GAAH,GAAS,GAAG,GAAG,GAAhC;AACA,WAAQ,CAAC,GAAG,IAAI,CAAC,EAAV,GAAgB,GAAvB;AACD,GAHY;AAKb;;AAEG;;;AACH,WAAgB,SAAhB,CAA0B,KAA1B,EAAuC;AACrC,WAAQ,KAAK,GAAG,GAAT,IAAiB,KAAK,GAAG,CAAR,GAAY,GAAZ,GAAkB,CAAnC,CAAP;AACD;;AAFe,EAAA,KAAA,CAAA,SAAA,GAAS,SAAT;AAGjB,CAzBD,EAAiB,KAAK,KAAL,KAAK,GAAA,EAAA,CAAtB","sourceRoot":"","sourcesContent":["export var Angle;\n(function (Angle) {\n    /**\n     * Converts radian angle to degree angle.\n     * @param rad The radians to convert.\n     */\n    function toDeg(rad) {\n        return ((180 * rad) / Math.PI) % 360;\n    }\n    Angle.toDeg = toDeg;\n    /**\n     * Converts degree angle to radian angle.\n     * @param deg The degree angle to convert.\n     * @param over360\n     */\n    Angle.toRad = function (deg, over360 = false) {\n        const d = over360 ? deg : deg % 360;\n        return (d * Math.PI) / 180;\n    };\n    /**\n     * Returns the angle in degrees and clamps its value between `0` and `360`.\n     */\n    function normalize(angle) {\n        return (angle % 360) + (angle < 0 ? 360 : 0);\n    }\n    Angle.normalize = normalize;\n})(Angle || (Angle = {}));\n//# sourceMappingURL=angle.js.map"]},"metadata":{},"sourceType":"module"}