{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport TwoTouchHandler from './two_touch';\nvar ROTATION_THRESHOLD = 25;\n\nfunction getBearingDelta(a, b) {\n  return a.angleWith(b) * 180 / Math.PI;\n}\n\nvar TouchRotateHandler = function (_TwoTouchHandler) {\n  _inherits(TouchRotateHandler, _TwoTouchHandler);\n\n  var _super = _createSuper(TouchRotateHandler);\n\n  function TouchRotateHandler() {\n    var _this;\n\n    _classCallCheck(this, TouchRotateHandler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"minDiameter\", void 0);\n\n    return _this;\n  }\n\n  _createClass(TouchRotateHandler, [{\n    key: \"reset\",\n    value: function reset() {\n      _get(_getPrototypeOf(TouchRotateHandler.prototype), \"reset\", this).call(this);\n\n      delete this.minDiameter;\n      delete this.startVector;\n      delete this.vector;\n    }\n  }, {\n    key: \"start\",\n    value: function start(points) {\n      this.startVector = this.vector = points[0].sub(points[1]);\n      this.minDiameter = points[0].dist(points[1]);\n    }\n  }, {\n    key: \"move\",\n    value: function move(points, pinchAround) {\n      var lastVector = this.vector;\n      this.vector = points[0].sub(points[1]);\n\n      if (!this.active && this.isBelowThreshold(this.vector)) {\n        return;\n      }\n\n      this.active = true;\n      return {\n        bearingDelta: getBearingDelta(this.vector, lastVector),\n        pinchAround: pinchAround\n      };\n    }\n  }, {\n    key: \"isBelowThreshold\",\n    value: function isBelowThreshold(vector) {\n      this.minDiameter = Math.min(this.minDiameter, vector.mag());\n      var circumference = Math.PI * this.minDiameter;\n      var threshold = ROTATION_THRESHOLD / circumference * 360;\n      var bearingDeltaSinceStart = getBearingDelta(vector, this.startVector);\n      return Math.abs(bearingDeltaSinceStart) < threshold;\n    }\n  }]);\n\n  return TouchRotateHandler;\n}(TwoTouchHandler);\n\nexport { TouchRotateHandler as default };","map":{"version":3,"sources":["../../../src/handler/touch/touch_rotate.ts"],"names":["ROTATION_THRESHOLD","a","Math","TouchRotateHandler","TwoTouchHandler","points","lastVector","bearingDelta","getBearingDelta","pinchAround","vector","circumference","threshold","bearingDeltaSinceStart"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,OAAA,eAAA,MAAA,aAAA;AAEA,IAAMA,kBAAkB,GAAxB,EAAA;;AAEA,SAAA,eAAA,CAAA,CAAA,EAAA,CAAA,EAA6C;AAC3C,SAAQC,CAAC,CAADA,SAAAA,CAAAA,CAAAA,IAAD,GAACA,GAAwBC,IAAI,CAApC,EAAA;AACD;;IAEoBC,kB;;;;;;;;;;;;;;;;;;;;;;;WAGnB,SAAA,KAAA,GAAe;AACb,MAAA,IAAA,CAAA,eAAA,CAAA,kBAAA,CAAA,SAAA,CAAA,EAAA,OAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA;;AACA,aAAO,KAAP,WAAA;AACA,aAAO,KAAP,WAAA;AACA,aAAO,KAAP,MAAA;AACD;;;WAED,SAAA,KAAA,CAAA,MAAA,EAAqC;AACnC,WAAA,WAAA,GAAmB,KAAA,MAAA,GAAcE,MAAM,CAANA,CAAM,CAANA,CAAAA,GAAAA,CAAcA,MAAM,CAArD,CAAqD,CAApBA,CAAjC;AACA,WAAA,WAAA,GAAmBA,MAAM,CAANA,CAAM,CAANA,CAAAA,IAAAA,CAAeA,MAAM,CAAxC,CAAwC,CAArBA,CAAnB;AACD;;;WAED,SAAA,IAAA,CAAA,MAAA,EAAA,WAAA,EAAwD;AACtD,UAAMC,UAAU,GAAG,KAAnB,MAAA;AACA,WAAA,MAAA,GAAcD,MAAM,CAANA,CAAM,CAANA,CAAAA,GAAAA,CAAcA,MAAM,CAAlC,CAAkC,CAApBA,CAAd;;AAEA,UAAI,CAAC,KAAD,MAAA,IAAgB,KAAA,gBAAA,CAAsB,KAA1C,MAAoB,CAApB,EAAwD;AACtD;AACD;;AACD,WAAA,MAAA,GAAA,IAAA;AAEA,aAAO;AACLE,QAAAA,YAAY,EAAEC,eAAe,CAAC,KAAD,MAAA,EADxB,UACwB,CADxB;AAELC,QAAAA,WAAW,EAAXA;AAFK,OAAP;AAID;;;WAED,SAAA,gBAAA,CAAA,MAAA,EAAwC;AAWtC,WAAA,WAAA,GAAmBP,IAAI,CAAJA,GAAAA,CAAS,KAATA,WAAAA,EAA2BQ,MAAM,CAApD,GAA8CA,EAA3BR,CAAnB;AACA,UAAMS,aAAa,GAAGT,IAAI,CAAJA,EAAAA,GAAU,KAAhC,WAAA;AACA,UAAMU,SAAS,GAAIZ,kBAAkB,GAAnB,aAACA,GAAnB,GAAA;AAEA,UAAMa,sBAAsB,GAAGL,eAAe,CAAA,MAAA,EAAS,KAAvD,WAA8C,CAA9C;AACA,aAAON,IAAI,CAAJA,GAAAA,CAAAA,sBAAAA,IAAP,SAAA;AACD;;;;EA/C6CE,e;;SAA3BD,kB","sourcesContent":["// @ts-ignore\nimport Point from '../../geo/point';\nimport DOM from '../../utils/dom';\nimport TwoTouchHandler from './two_touch';\n\nconst ROTATION_THRESHOLD = 25; // pixels along circumference of touch circle\n\nfunction getBearingDelta(a: Point, b: Point) {\n  return (a.angleWith(b) * 180) / Math.PI;\n}\n\nexport default class TouchRotateHandler extends TwoTouchHandler {\n  private minDiameter: number;\n\n  public reset() {\n    super.reset();\n    delete this.minDiameter;\n    delete this.startVector;\n    delete this.vector;\n  }\n\n  public start(points: [Point, Point]) {\n    this.startVector = this.vector = points[0].sub(points[1]);\n    this.minDiameter = points[0].dist(points[1]);\n  }\n\n  public move(points: [Point, Point], pinchAround: Point) {\n    const lastVector = this.vector;\n    this.vector = points[0].sub(points[1]);\n\n    if (!this.active && this.isBelowThreshold(this.vector)) {\n      return;\n    }\n    this.active = true;\n\n    return {\n      bearingDelta: getBearingDelta(this.vector, lastVector),\n      pinchAround,\n    };\n  }\n\n  private isBelowThreshold(vector: Point) {\n    /*\n     * The threshold before a rotation actually happens is configured in\n     * pixels alongth circumference of the circle formed by the two fingers.\n     * This makes the threshold in degrees larger when the fingers are close\n     * together and smaller when the fingers are far apart.\n     *\n     * Use the smallest diameter from the whole gesture to reduce sensitivity\n     * when pinching in and out.\n     */\n\n    this.minDiameter = Math.min(this.minDiameter, vector.mag());\n    const circumference = Math.PI * this.minDiameter;\n    const threshold = (ROTATION_THRESHOLD / circumference) * 360;\n\n    const bearingDeltaSinceStart = getBearingDelta(vector, this.startVector);\n    return Math.abs(bearingDeltaSinceStart) < threshold;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}