{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { mix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape';\nShape.registerNode('simple-rect', {\n  // 自定义节点时的配置\n  options: {\n    size: [100, 30],\n    style: {\n      radius: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize,\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    // 连接点，默认为左右\n    // anchorPoints: [{ x: 0, y: 0.5 }, { x: 1, y: 0.5 }]\n    anchorPoints: [[0, 0.5], [1, 0.5]],\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'simple-rect',\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('rect', {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      name: this.type + \"-keyShape\",\n      draggable: true\n    });\n    return keyShape;\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = mix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var width = style.width || size[0];\n    var height = style.height || size[1];\n\n    var styles = __assign({\n      x: -width / 2,\n      y: -height / 2,\n      width: width,\n      height: height\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item, updateType) {\n    var group = item.getContainer(); // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\n\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var size = this.getSize(cfg);\n    var keyShape = item.get('keyShape');\n\n    if (!cfg.size) {\n      size[0] = keyShape.attr('width') || defaultStyle.width;\n      size[1] = keyShape.attr('height') || defaultStyle.height;\n    } // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      x: -size[0] / 2,\n      y: -size[1] / 2,\n      width: size[0],\n      height: size[1]\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\n    style = mix(style, cfg.style);\n    this.updateShape(cfg, item, style, false, updateType);\n  }\n}, 'single-node');","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/@antv/g6-core/es/element/nodes/simple-rect.js"],"names":["__assign","mix","Global","Shape","registerNode","options","size","style","radius","stroke","defaultNode","fill","lineWidth","labelCfg","nodeLabel","fontSize","fontFamily","windowFontFamily","anchorPoints","stateStyles","nodeStateStyles","shapeType","labelPosition","drawShape","cfg","group","getShapeStyle","keyShape","addShape","attrs","className","type","name","draggable","defaultStyle","mergeStyle","getOptions","strokeStyle","color","getSize","width","height","styles","x","y","update","item","updateType","getContainer","get","attr","updateShape"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { mix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape';\nShape.registerNode('simple-rect', {\n  // 自定义节点时的配置\n  options: {\n    size: [100, 30],\n    style: {\n      radius: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize,\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    // 连接点，默认为左右\n    // anchorPoints: [{ x: 0, y: 0.5 }, { x: 1, y: 0.5 }]\n    anchorPoints: [[0, 0.5], [1, 0.5]],\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'simple-rect',\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('rect', {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      name: this.type + \"-keyShape\",\n      draggable: true\n    });\n    return keyShape;\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = mix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var width = style.width || size[0];\n    var height = style.height || size[1];\n\n    var styles = __assign({\n      x: -width / 2,\n      y: -height / 2,\n      width: width,\n      height: height\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item, updateType) {\n    var group = item.getContainer(); // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\n\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var size = this.getSize(cfg);\n    var keyShape = item.get('keyShape');\n\n    if (!cfg.size) {\n      size[0] = keyShape.attr('width') || defaultStyle.width;\n      size[1] = keyShape.attr('height') || defaultStyle.height;\n    } // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      x: -size[0] / 2,\n      y: -size[1] / 2,\n      width: size[0],\n      height: size[1]\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\n    style = mix(style, cfg.style);\n    this.updateShape(cfg, item, style, false, updateType);\n  }\n}, 'single-node');"]},"metadata":{},"sourceType":"module"}