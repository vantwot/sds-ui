{"ast":null,"code":"import { debounce } from './util';\nexport function createSensor(element) {\n  let sensor = null;\n  let listeners = [];\n  const trigger = debounce(() => {\n    listeners.forEach(listener => {\n      listener(element);\n    });\n  });\n\n  const create = () => {\n    const s = new ResizeObserver(trigger);\n    s.observe(element);\n    trigger();\n    return s;\n  };\n\n  const bind = listener => {\n    if (!sensor) {\n      sensor = create();\n    }\n\n    if (listeners.indexOf(listener) === -1) {\n      listeners.push(listener);\n    }\n  };\n\n  const destroy = () => {\n    if (sensor) {\n      sensor.disconnect();\n      listeners = [];\n      sensor = null;\n    }\n  };\n\n  const unbind = listener => {\n    const idx = listeners.indexOf(listener);\n\n    if (idx !== -1) {\n      listeners.splice(idx, 1);\n    } // no listener, and sensor is exist then destroy the sensor\n\n\n    if (listeners.length === 0 && sensor) {\n      destroy();\n    }\n  };\n\n  return {\n    element,\n    bind,\n    destroy,\n    unbind\n  };\n}","map":{"version":3,"sources":["../../../../src/util/size-sensor/sensors/observer.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,QAAyB,QAAzB;AAGA,OAAM,SAAU,YAAV,CAAuB,OAAvB,EAAuC;AAC3C,MAAI,MAAM,GAA0B,IAApC;AACA,MAAI,SAAS,GAAe,EAA5B;AAEA,QAAM,OAAO,GAAG,QAAQ,CAAC,MAAK;AAC5B,IAAA,SAAS,CAAC,OAAV,CAAmB,QAAD,IAAa;AAC7B,MAAA,QAAQ,CAAC,OAAD,CAAR;AACD,KAFD;AAGD,GAJuB,CAAxB;;AAMA,QAAM,MAAM,GAAG,MAAK;AAClB,UAAM,CAAC,GAAG,IAAI,cAAJ,CAAmB,OAAnB,CAAV;AACA,IAAA,CAAC,CAAC,OAAF,CAAU,OAAV;AACA,IAAA,OAAO;AACP,WAAO,CAAP;AACD,GALD;;AAOA,QAAM,IAAI,GAAI,QAAD,IAAuB;AAClC,QAAI,CAAC,MAAL,EAAa;AACX,MAAA,MAAM,GAAG,MAAM,EAAf;AACD;;AAED,QAAI,SAAS,CAAC,OAAV,CAAkB,QAAlB,MAAgC,CAAC,CAArC,EAAwC;AACtC,MAAA,SAAS,CAAC,IAAV,CAAe,QAAf;AACD;AACF,GARD;;AAUA,QAAM,OAAO,GAAG,MAAK;AACnB,QAAI,MAAJ,EAAY;AACV,MAAA,MAAM,CAAC,UAAP;AACA,MAAA,SAAS,GAAG,EAAZ;AACA,MAAA,MAAM,GAAG,IAAT;AACD;AACF,GAND;;AAQA,QAAM,MAAM,GAAI,QAAD,IAAuB;AACpC,UAAM,GAAG,GAAG,SAAS,CAAC,OAAV,CAAkB,QAAlB,CAAZ;;AACA,QAAI,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,MAAA,SAAS,CAAC,MAAV,CAAiB,GAAjB,EAAsB,CAAtB;AACD,KAJmC,CAMpC;;;AACA,QAAI,SAAS,CAAC,MAAV,KAAqB,CAArB,IAA0B,MAA9B,EAAsC;AACpC,MAAA,OAAO;AACR;AACF,GAVD;;AAYA,SAAO;AACL,IAAA,OADK;AAEL,IAAA,IAFK;AAGL,IAAA,OAHK;AAIL,IAAA;AAJK,GAAP;AAMD","sourceRoot":"","sourcesContent":["import { debounce } from './util';\nexport function createSensor(element) {\n    let sensor = null;\n    let listeners = [];\n    const trigger = debounce(() => {\n        listeners.forEach((listener) => {\n            listener(element);\n        });\n    });\n    const create = () => {\n        const s = new ResizeObserver(trigger);\n        s.observe(element);\n        trigger();\n        return s;\n    };\n    const bind = (listener) => {\n        if (!sensor) {\n            sensor = create();\n        }\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    };\n    const destroy = () => {\n        if (sensor) {\n            sensor.disconnect();\n            listeners = [];\n            sensor = null;\n        }\n    };\n    const unbind = (listener) => {\n        const idx = listeners.indexOf(listener);\n        if (idx !== -1) {\n            listeners.splice(idx, 1);\n        }\n        // no listener, and sensor is exist then destroy the sensor\n        if (listeners.length === 0 && sensor) {\n            destroy();\n        }\n    };\n    return {\n        element,\n        bind,\n        destroy,\n        unbind,\n    };\n}\n//# sourceMappingURL=observer.js.map"]},"metadata":{},"sourceType":"module"}