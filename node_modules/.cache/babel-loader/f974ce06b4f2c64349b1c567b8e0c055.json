{"ast":null,"code":"import React from 'react';\nexport const AppContext = React.createContext({\n  cell: null,\n  x6Graph: null,\n  commands: null,\n  modelService: null\n});\nexport const useAppContext = () => React.useContext(AppContext);\nexport function getNodeReactComponent(Component, commands, modelService) {\n  return function (x6Node) {\n    /* eslint-disable-next-line  */\n    const x6Graph = this;\n    const nodeData = x6Node === null || x6Node === void 0 ? void 0 : x6Node.getData();\n    const size = x6Node === null || x6Node === void 0 ? void 0 : x6Node.getSize();\n    const position = x6Node === null || x6Node === void 0 ? void 0 : x6Node.getPosition();\n\n    const WrappedComponent = () => {\n      return React.createElement(AppContext.Provider, {\n        value: {\n          cell: x6Node,\n          x6Graph,\n          commands,\n          modelService\n        }\n      }, React.createElement(Component, {\n        cell: x6Node,\n        data: nodeData,\n        size,\n        position\n      }));\n    };\n\n    return React.createElement(WrappedComponent, null);\n  };\n}\nexport function getEdgeReactComponent(Component, commands, modelService) {\n  return function (x6Edge) {\n    /* eslint-disable-next-line  */\n    const x6Graph = this;\n    const edgeData = x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.getData();\n\n    const WrappedComponent = () => {\n      return React.createElement(AppContext.Provider, {\n        value: {\n          cell: x6Edge,\n          x6Graph,\n          commands,\n          modelService\n        }\n      }, React.createElement(Component, {\n        data: edgeData,\n        cell: x6Edge\n      }));\n    };\n\n    return React.createElement(WrappedComponent, null);\n  };\n}\n/** 获取节点选中状态 */\n\nexport const useIsNodeSelected = () => {\n  const [isSelected, setIsSelected] = React.useState(false);\n  const {\n    x6Graph,\n    cell\n  } = useAppContext();\n  React.useEffect(() => {\n    const handler = _ref => {\n      let {\n        added,\n        removed\n      } = _ref;\n      const isAdded = added.filter(selectedCell => selectedCell.isNode()).some(node => {\n        node.id === cell.id;\n      });\n\n      if (isAdded) {\n        cell.setData(Object.assign(Object.assign({}, cell.getData()), {\n          isNodeSelected: true\n        }));\n        setIsSelected(true);\n        return;\n      }\n\n      const isRemoved = removed.filter(selectedCell => selectedCell.isNode()).some(node => {\n        node.id === cell.id;\n      });\n\n      if (isRemoved) {\n        cell.setData(Object.assign(Object.assign({}, cell.getData()), {\n          isNodeSelected: false\n        }));\n        setIsSelected(false);\n        return;\n      }\n    };\n\n    x6Graph.on('selection:changed', handler);\n    return () => {\n      x6Graph.off('selection:changed', handler);\n    };\n    /* eslint-disable-next-line  */\n  }, [x6Graph]);\n  return [isSelected];\n};","map":{"version":3,"sources":["../../../src/command-contributions/components/context.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React from 'react';\nexport const AppContext = React.createContext({\n    cell: null,\n    x6Graph: null,\n    commands: null,\n    modelService: null,\n});\nexport const useAppContext = () => React.useContext(AppContext);\nexport function getNodeReactComponent(Component, commands, modelService) {\n    return function (x6Node) {\n        /* eslint-disable-next-line  */\n        const x6Graph = this;\n        const nodeData = x6Node === null || x6Node === void 0 ? void 0 : x6Node.getData();\n        const size = x6Node === null || x6Node === void 0 ? void 0 : x6Node.getSize();\n        const position = x6Node === null || x6Node === void 0 ? void 0 : x6Node.getPosition();\n        const WrappedComponent = () => {\n            return (React.createElement(AppContext.Provider, { value: {\n                    cell: x6Node,\n                    x6Graph,\n                    commands,\n                    modelService,\n                } }, React.createElement(Component, {\n                cell: x6Node,\n                data: nodeData,\n                size,\n                position,\n            })));\n        };\n        return React.createElement(WrappedComponent, null);\n    };\n}\nexport function getEdgeReactComponent(Component, commands, modelService) {\n    return function (x6Edge) {\n        /* eslint-disable-next-line  */\n        const x6Graph = this;\n        const edgeData = x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.getData();\n        const WrappedComponent = () => {\n            return (React.createElement(AppContext.Provider, { value: {\n                    cell: x6Edge,\n                    x6Graph,\n                    commands,\n                    modelService,\n                } }, React.createElement(Component, {\n                data: edgeData,\n                cell: x6Edge,\n            })));\n        };\n        return React.createElement(WrappedComponent, null);\n    };\n}\n/** 获取节点选中状态 */\nexport const useIsNodeSelected = () => {\n    const [isSelected, setIsSelected] = React.useState(false);\n    const { x6Graph, cell } = useAppContext();\n    React.useEffect(() => {\n        const handler = ({ added, removed }) => {\n            const isAdded = added\n                .filter(selectedCell => selectedCell.isNode())\n                .some(node => {\n                node.id === cell.id;\n            });\n            if (isAdded) {\n                cell.setData(Object.assign(Object.assign({}, cell.getData()), { isNodeSelected: true }));\n                setIsSelected(true);\n                return;\n            }\n            const isRemoved = removed\n                .filter(selectedCell => selectedCell.isNode())\n                .some(node => {\n                node.id === cell.id;\n            });\n            if (isRemoved) {\n                cell.setData(Object.assign(Object.assign({}, cell.getData()), { isNodeSelected: false }));\n                setIsSelected(false);\n                return;\n            }\n        };\n        x6Graph.on('selection:changed', handler);\n        return () => {\n            x6Graph.off('selection:changed', handler);\n        };\n        /* eslint-disable-next-line  */\n    }, [x6Graph]);\n    return [isSelected];\n};\n//# sourceMappingURL=context.js.map"]},"metadata":{},"sourceType":"module"}