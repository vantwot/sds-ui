{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { toLngLatBounds } from '@antv/geo-coord';\nimport ImageLayer from '../../image';\nvar r2d = 180 / Math.PI;\nvar tileURLRegex = /\\{([zxy])\\}/g;\n\nvar ImageTile = function () {\n  function ImageTile(key, url, container, sceneContainer) {\n    _classCallCheck(this, ImageTile);\n\n    _defineProperty(this, \"tile\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"imageLayer\", void 0);\n\n    this.name = key;\n    this.tile = key.split('_').map(function (v) {\n      return Number(v);\n    });\n    var urlParams = {\n      x: this.tile[0],\n      y: this.tile[1],\n      z: this.tile[2]\n    };\n    var imageSrc = this.getTileURL(urlParams, url);\n    var lnglatBounds = this.tileLnglatBounds(this.tile);\n    var west = lnglatBounds.getWest();\n    var south = lnglatBounds.getSouth();\n    var east = lnglatBounds.getEast();\n    var north = lnglatBounds.getNorth();\n    var imageLayer = new ImageLayer({\n      zIndex: -999\n    });\n    imageLayer.source(imageSrc, {\n      parser: {\n        type: 'image',\n        extent: [west, south, east, north]\n      }\n    });\n    imageLayer.setContainer(container, sceneContainer);\n    imageLayer.init();\n    this.imageLayer = imageLayer;\n  }\n\n  _createClass(ImageTile, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.imageLayer.clearModels();\n      this.imageLayer.destroy();\n    }\n  }, {\n    key: \"getTileURL\",\n    value: function getTileURL(urlParams, path) {\n      if (!urlParams.s) {\n        urlParams.s = String.fromCharCode(97 + Math.floor(Math.random() * 3));\n      }\n\n      tileURLRegex.lastIndex = 0;\n      return path.replace(tileURLRegex, function (value, key) {\n        return urlParams[key];\n      });\n    }\n  }, {\n    key: \"tileLnglatBounds\",\n    value: function tileLnglatBounds(tile) {\n      var e = this.tile2lng(tile[0] + 1, tile[2]);\n      var w = this.tile2lng(tile[0], tile[2]);\n      var s = this.tile2lat(tile[1] + 1, tile[2]);\n      var n = this.tile2lat(tile[1], tile[2]);\n      return toLngLatBounds([w, n], [e, s]);\n    }\n  }, {\n    key: \"tile2lng\",\n    value: function tile2lng(x, z) {\n      return x / Math.pow(2, z) * 360 - 180;\n    }\n  }, {\n    key: \"tile2lat\",\n    value: function tile2lat(y, z) {\n      var n = Math.PI - 2 * Math.PI * y / Math.pow(2, z);\n      return r2d * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));\n    }\n  }]);\n\n  return ImageTile;\n}();\n\nexport { ImageTile as default };","map":{"version":3,"sources":["../../../src/imagetile/utils/ImageTile.ts"],"names":["r2d","Math","tileURLRegex","ImageTile","Number","urlParams","x","y","z","imageSrc","lnglatBounds","west","south","east","north","imageLayer","zIndex","parser","type","extent","String","e","tile","w","s","n","toLngLatBounds"],"mappings":"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","sourcesContent":["import { LngLatBounds, toBounds, toLngLatBounds } from '@antv/geo-coord';\nimport { Container } from 'inversify';\nimport ImageLayer from '../../image';\n\ninterface IUrlParams {\n  x: number;\n  y: number;\n  z: number;\n  s?: string;\n}\n\nconst r2d = 180 / Math.PI;\nconst tileURLRegex = /\\{([zxy])\\}/g;\n\nexport default class ImageTile {\n  public tile: number[]; // 当前图片瓦片的索引\n  public name: string;\n  public imageLayer: any;\n  constructor(\n    key: string,\n    url: string,\n    container: Container,\n    sceneContainer: Container,\n  ) {\n    this.name = key;\n    this.tile = key.split('_').map((v) => Number(v));\n\n    const urlParams = {\n      x: this.tile[0],\n      y: this.tile[1],\n      z: this.tile[2],\n    };\n    const imageSrc = this.getTileURL(urlParams, url);\n\n    const lnglatBounds = this.tileLnglatBounds(this.tile);\n    const west = lnglatBounds.getWest();\n    const south = lnglatBounds.getSouth();\n    const east = lnglatBounds.getEast();\n    const north = lnglatBounds.getNorth();\n\n    const imageLayer = new ImageLayer({ zIndex: -999 });\n    imageLayer.source(\n      // 'https://gw.alipayobjects.com/zos/rmsportal/FnHFeFklTzKDdUESRNDv.jpg',\n      imageSrc,\n      {\n        parser: {\n          type: 'image',\n          // extent: [121.168, 30.2828, 121.384, 30.4219],\n          extent: [west, south, east, north],\n        },\n      },\n    );\n\n    imageLayer.setContainer(container, sceneContainer);\n    imageLayer.init();\n\n    this.imageLayer = imageLayer;\n  }\n\n  public destroy() {\n    this.imageLayer.clearModels();\n    this.imageLayer.destroy();\n  }\n\n  public getTileURL(urlParams: IUrlParams, path: string) {\n    if (!urlParams.s) {\n      // Default to a random choice of a, b or c\n      urlParams.s = String.fromCharCode(97 + Math.floor(Math.random() * 3));\n    }\n\n    tileURLRegex.lastIndex = 0;\n    return path.replace(tileURLRegex, (value, key: any) => {\n      // @ts-ignore\n      return urlParams[key];\n    });\n  }\n\n  // Get tile bounds in WGS84 coordinates\n  public tileLnglatBounds(tile: number[]) {\n    const e = this.tile2lng(tile[0] + 1, tile[2]);\n    const w = this.tile2lng(tile[0], tile[2]);\n    const s = this.tile2lat(tile[1] + 1, tile[2]);\n    const n = this.tile2lat(tile[1], tile[2]);\n    return toLngLatBounds([w, n], [e, s]);\n  }\n\n  public tile2lng(x: number, z: number) {\n    return (x / Math.pow(2, z)) * 360 - 180;\n  }\n\n  public tile2lat(y: number, z: number) {\n    const n = Math.PI - (2 * Math.PI * y) / Math.pow(2, z);\n    return r2d * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}