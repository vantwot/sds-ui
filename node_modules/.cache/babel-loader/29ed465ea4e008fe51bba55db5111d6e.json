{"ast":null,"code":"import { Dictionary } from '../common';\nimport { Dom } from '../util';\nexport class Cache {\n  constructor(view) {\n    this.view = view;\n    this.clean();\n  }\n\n  clean() {\n    if (this.elemCache) {\n      this.elemCache.dispose();\n    }\n\n    this.elemCache = new Dictionary();\n    this.pathCache = {};\n  }\n\n  get(elem) {\n    const cache = this.elemCache;\n\n    if (!cache.has(elem)) {\n      this.elemCache.set(elem, {});\n    }\n\n    return this.elemCache.get(elem);\n  }\n\n  getData(elem) {\n    const meta = this.get(elem);\n\n    if (!meta.data) {\n      meta.data = {};\n    }\n\n    return meta.data;\n  }\n\n  getMatrix(elem) {\n    const meta = this.get(elem);\n\n    if (meta.matrix == null) {\n      const target = this.view.rotatableNode || this.view.container;\n      meta.matrix = Dom.getTransformToElement(elem, target);\n    }\n\n    return Dom.createSVGMatrix(meta.matrix);\n  }\n\n  getShape(elem) {\n    const meta = this.get(elem);\n\n    if (meta.shape == null) {\n      meta.shape = Dom.toGeometryShape(elem);\n    }\n\n    return meta.shape.clone();\n  }\n\n  getBoundingRect(elem) {\n    const meta = this.get(elem);\n\n    if (meta.boundingRect == null) {\n      meta.boundingRect = Dom.getBBox(elem);\n    }\n\n    return meta.boundingRect.clone();\n  }\n\n}","map":{"version":3,"sources":["../../src/view/cache.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,WAA3B;AACA,SAAqB,GAArB,QAAgC,SAAhC;AAIA,OAAM,MAAO,KAAP,CAAY;AAShB,EAAA,WAAA,CAAsB,IAAtB,EAAoC;AAAd,SAAA,IAAA,GAAA,IAAA;AACpB,SAAK,KAAL;AACD;;AAED,EAAA,KAAK,GAAA;AACH,QAAI,KAAK,SAAT,EAAoB;AAClB,WAAK,SAAL,CAAe,OAAf;AACD;;AACD,SAAK,SAAL,GAAiB,IAAI,UAAJ,EAAjB;AACA,SAAK,SAAL,GAAiB,EAAjB;AACD;;AAED,EAAA,GAAG,CAAC,IAAD,EAAc;AACf,UAAM,KAAK,GAAG,KAAK,SAAnB;;AACA,QAAI,CAAC,KAAK,CAAC,GAAN,CAAU,IAAV,CAAL,EAAsB;AACpB,WAAK,SAAL,CAAe,GAAf,CAAmB,IAAnB,EAAyB,EAAzB;AACD;;AACD,WAAO,KAAK,SAAL,CAAe,GAAf,CAAmB,IAAnB,CAAP;AACD;;AAED,EAAA,OAAO,CAAC,IAAD,EAAc;AACnB,UAAM,IAAI,GAAG,KAAK,GAAL,CAAS,IAAT,CAAb;;AACA,QAAI,CAAC,IAAI,CAAC,IAAV,EAAgB;AACd,MAAA,IAAI,CAAC,IAAL,GAAY,EAAZ;AACD;;AACD,WAAO,IAAI,CAAC,IAAZ;AACD;;AAED,EAAA,SAAS,CAAC,IAAD,EAAc;AACrB,UAAM,IAAI,GAAG,KAAK,GAAL,CAAS,IAAT,CAAb;;AACA,QAAI,IAAI,CAAC,MAAL,IAAe,IAAnB,EAAyB;AACvB,YAAM,MAAM,GAAG,KAAK,IAAL,CAAU,aAAV,IAA2B,KAAK,IAAL,CAAU,SAApD;AACA,MAAA,IAAI,CAAC,MAAL,GAAc,GAAG,CAAC,qBAAJ,CAA0B,IAA1B,EAAuC,MAAvC,CAAd;AACD;;AAED,WAAO,GAAG,CAAC,eAAJ,CAAoB,IAAI,CAAC,MAAzB,CAAP;AACD;;AAED,EAAA,QAAQ,CAAC,IAAD,EAAc;AACpB,UAAM,IAAI,GAAG,KAAK,GAAL,CAAS,IAAT,CAAb;;AACA,QAAI,IAAI,CAAC,KAAL,IAAc,IAAlB,EAAwB;AACtB,MAAA,IAAI,CAAC,KAAL,GAAa,GAAG,CAAC,eAAJ,CAAoB,IAApB,CAAb;AACD;;AACD,WAAO,IAAI,CAAC,KAAL,CAAW,KAAX,EAAP;AACD;;AAED,EAAA,eAAe,CAAC,IAAD,EAAc;AAC3B,UAAM,IAAI,GAAG,KAAK,GAAL,CAAS,IAAT,CAAb;;AACA,QAAI,IAAI,CAAC,YAAL,IAAqB,IAAzB,EAA+B;AAC7B,MAAA,IAAI,CAAC,YAAL,GAAoB,GAAG,CAAC,OAAJ,CAAY,IAAZ,CAApB;AACD;;AACD,WAAO,IAAI,CAAC,YAAL,CAAkB,KAAlB,EAAP;AACD;;AA7De","sourceRoot":"","sourcesContent":["import { Dictionary } from '../common';\nimport { Dom } from '../util';\nexport class Cache {\n    constructor(view) {\n        this.view = view;\n        this.clean();\n    }\n    clean() {\n        if (this.elemCache) {\n            this.elemCache.dispose();\n        }\n        this.elemCache = new Dictionary();\n        this.pathCache = {};\n    }\n    get(elem) {\n        const cache = this.elemCache;\n        if (!cache.has(elem)) {\n            this.elemCache.set(elem, {});\n        }\n        return this.elemCache.get(elem);\n    }\n    getData(elem) {\n        const meta = this.get(elem);\n        if (!meta.data) {\n            meta.data = {};\n        }\n        return meta.data;\n    }\n    getMatrix(elem) {\n        const meta = this.get(elem);\n        if (meta.matrix == null) {\n            const target = this.view.rotatableNode || this.view.container;\n            meta.matrix = Dom.getTransformToElement(elem, target);\n        }\n        return Dom.createSVGMatrix(meta.matrix);\n    }\n    getShape(elem) {\n        const meta = this.get(elem);\n        if (meta.shape == null) {\n            meta.shape = Dom.toGeometryShape(elem);\n        }\n        return meta.shape.clone();\n    }\n    getBoundingRect(elem) {\n        const meta = this.get(elem);\n        if (meta.boundingRect == null) {\n            meta.boundingRect = Dom.getBBox(elem);\n        }\n        return meta.boundingRect.clone();\n    }\n}\n//# sourceMappingURL=cache.js.map"]},"metadata":{},"sourceType":"module"}