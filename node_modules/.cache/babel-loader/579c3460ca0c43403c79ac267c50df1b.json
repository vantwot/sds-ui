{"ast":null,"code":"/*\n * Copyright (C) 2008 Apple Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Ported from Webkit\n * http://svn.webkit.org/repository/webkit/trunk/Source/WebCore/platform/graphics/UnitBezier.h\n */\nmodule.exports = UnitBezier;\n\nfunction UnitBezier(p1x, p1y, p2x, p2y) {\n  // Calculate the polynomial coefficients, implicit first and last control points are (0,0) and (1,1).\n  this.cx = 3.0 * p1x;\n  this.bx = 3.0 * (p2x - p1x) - this.cx;\n  this.ax = 1.0 - this.cx - this.bx;\n  this.cy = 3.0 * p1y;\n  this.by = 3.0 * (p2y - p1y) - this.cy;\n  this.ay = 1.0 - this.cy - this.by;\n  this.p1x = p1x;\n  this.p1y = p2y;\n  this.p2x = p2x;\n  this.p2y = p2y;\n}\n\nUnitBezier.prototype.sampleCurveX = function (t) {\n  // `ax t^3 + bx t^2 + cx t' expanded using Horner's rule.\n  return ((this.ax * t + this.bx) * t + this.cx) * t;\n};\n\nUnitBezier.prototype.sampleCurveY = function (t) {\n  return ((this.ay * t + this.by) * t + this.cy) * t;\n};\n\nUnitBezier.prototype.sampleCurveDerivativeX = function (t) {\n  return (3.0 * this.ax * t + 2.0 * this.bx) * t + this.cx;\n};\n\nUnitBezier.prototype.solveCurveX = function (x, epsilon) {\n  if (typeof epsilon === 'undefined') epsilon = 1e-6;\n  var t0, t1, t2, x2, i; // First try a few iterations of Newton's method -- normally very fast.\n\n  for (t2 = x, i = 0; i < 8; i++) {\n    x2 = this.sampleCurveX(t2) - x;\n    if (Math.abs(x2) < epsilon) return t2;\n    var d2 = this.sampleCurveDerivativeX(t2);\n    if (Math.abs(d2) < 1e-6) break;\n    t2 = t2 - x2 / d2;\n  } // Fall back to the bisection method for reliability.\n\n\n  t0 = 0.0;\n  t1 = 1.0;\n  t2 = x;\n  if (t2 < t0) return t0;\n  if (t2 > t1) return t1;\n\n  while (t0 < t1) {\n    x2 = this.sampleCurveX(t2);\n    if (Math.abs(x2 - x) < epsilon) return t2;\n\n    if (x > x2) {\n      t0 = t2;\n    } else {\n      t1 = t2;\n    }\n\n    t2 = (t1 - t0) * 0.5 + t0;\n  } // Failure.\n\n\n  return t2;\n};\n\nUnitBezier.prototype.solve = function (x, epsilon) {\n  return this.sampleCurveY(this.solveCurveX(x, epsilon));\n};","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/@mapbox/unitbezier/index.js"],"names":["module","exports","UnitBezier","p1x","p1y","p2x","p2y","cx","bx","ax","cy","by","ay","prototype","sampleCurveX","t","sampleCurveY","sampleCurveDerivativeX","solveCurveX","x","epsilon","t0","t1","t2","x2","i","Math","abs","d2","solve"],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2008 Apple Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Ported from Webkit\n * http://svn.webkit.org/repository/webkit/trunk/Source/WebCore/platform/graphics/UnitBezier.h\n */\n\nmodule.exports = UnitBezier;\n\nfunction UnitBezier(p1x, p1y, p2x, p2y) {\n    // Calculate the polynomial coefficients, implicit first and last control points are (0,0) and (1,1).\n    this.cx = 3.0 * p1x;\n    this.bx = 3.0 * (p2x - p1x) - this.cx;\n    this.ax = 1.0 - this.cx - this.bx;\n\n    this.cy = 3.0 * p1y;\n    this.by = 3.0 * (p2y - p1y) - this.cy;\n    this.ay = 1.0 - this.cy - this.by;\n\n    this.p1x = p1x;\n    this.p1y = p2y;\n    this.p2x = p2x;\n    this.p2y = p2y;\n}\n\nUnitBezier.prototype.sampleCurveX = function(t) {\n    // `ax t^3 + bx t^2 + cx t' expanded using Horner's rule.\n    return ((this.ax * t + this.bx) * t + this.cx) * t;\n};\n\nUnitBezier.prototype.sampleCurveY = function(t) {\n    return ((this.ay * t + this.by) * t + this.cy) * t;\n};\n\nUnitBezier.prototype.sampleCurveDerivativeX = function(t) {\n    return (3.0 * this.ax * t + 2.0 * this.bx) * t + this.cx;\n};\n\nUnitBezier.prototype.solveCurveX = function(x, epsilon) {\n    if (typeof epsilon === 'undefined') epsilon = 1e-6;\n\n    var t0, t1, t2, x2, i;\n\n    // First try a few iterations of Newton's method -- normally very fast.\n    for (t2 = x, i = 0; i < 8; i++) {\n\n        x2 = this.sampleCurveX(t2) - x;\n        if (Math.abs(x2) < epsilon) return t2;\n\n        var d2 = this.sampleCurveDerivativeX(t2);\n        if (Math.abs(d2) < 1e-6) break;\n\n        t2 = t2 - x2 / d2;\n    }\n\n    // Fall back to the bisection method for reliability.\n    t0 = 0.0;\n    t1 = 1.0;\n    t2 = x;\n\n    if (t2 < t0) return t0;\n    if (t2 > t1) return t1;\n\n    while (t0 < t1) {\n\n        x2 = this.sampleCurveX(t2);\n        if (Math.abs(x2 - x) < epsilon) return t2;\n\n        if (x > x2) {\n            t0 = t2;\n        } else {\n            t1 = t2;\n        }\n\n        t2 = (t1 - t0) * 0.5 + t0;\n    }\n\n    // Failure.\n    return t2;\n};\n\nUnitBezier.prototype.solve = function(x, epsilon) {\n    return this.sampleCurveY(this.solveCurveX(x, epsilon));\n};\n"]},"metadata":{},"sourceType":"script"}