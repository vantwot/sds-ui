{"ast":null,"code":"var _jsxFileName = \"/home/manolo/sds-ui/src/components/charts/BogotaMapChart.jsx\";\nimport React from 'react';\n/* Components */\n\nimport DocumentModal from '../DocumentModal';\n/* Libraries */\n\nimport { AreaMap } from '@ant-design/charts';\n/* Utilities */\n\nimport { APIRequest } from '../../apis/api';\n/* UI Library Components */\n\nimport { Modal, Spin } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BogotaMapChart = _ref => {\n  let {\n    height = 600\n  } = _ref;\n  const [state] = APIRequest('/app/home');\n\n  const docInfo = e => {\n    if (e.feature.properties.article.title.length > 0) {\n      Modal.info({\n        width: '1200px',\n        title: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"map--modal-title\",\n          children: e.feature.properties.article.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this),\n        icon: null,\n        okText: 'Cerrar',\n        maskClosable: true,\n        content: /*#__PURE__*/_jsxDEV(DocumentModal, {\n          documentID: e.feature.properties.article.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 18\n        }, this),\n\n        onOk() {}\n\n      });\n    } else Modal.info({\n      width: '1200px',\n      title: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"map--modal-title\",\n        children: \"No hay art\\xEDculos disponibles para esta localidad\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this),\n      icon: null,\n      okText: 'Cerrar',\n      maskClosable: true,\n      content: '',\n\n      onOk() {}\n\n    });\n  };\n\n  if (state.isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spin--container\",\n      children: /*#__PURE__*/_jsxDEV(Spin, {\n        size: \"large\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (state.isError) {\n    return null;\n  }\n\n  const config = {\n    map: {\n      type: 'mapbox',\n      style: 'blank'\n    },\n    source: {\n      data: state.data.data,\n      parser: {\n        type: 'geojson'\n      }\n    },\n    autoFit: true,\n    color: '#90cedc',\n    style: {\n      opacity: 1,\n      stroke: '#f0f2f5',\n      lineWidth: 2\n    },\n    state: {\n      active: {\n        fill: '#4abfdc',\n        stroke: 'white',\n        lineWidth: 3\n      }\n    },\n    tooltip: {\n      anchor: 'top-right',\n      offsets: [60, -20],\n      items: [{\n        field: 'article.title',\n        alias: 'Artículo:'\n      }]\n    },\n    label: {\n      visible: true,\n      field: 'loc',\n      style: {\n        fill: '#000',\n        opacity: 0.9,\n        fontSize: 11,\n        stroke: '#fff',\n        strokeWidth: 1.5,\n        textAllowOverlap: true,\n        padding: [10, 10]\n      }\n    },\n    legend: {\n      type: 'category',\n      position: 'topright',\n      title: 'Haz click sobre una localidad para visualizar un artículo de forma aleatoria'\n    }\n  };\n\n  const plotEvents = plot => {\n    plot.on('areaLayer:click', e => docInfo(e));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map--chart\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: height,\n        margin: '5px'\n      },\n      children: /*#__PURE__*/_jsxDEV(AreaMap, { ...config,\n        onReady: plot => {\n          plotEvents(plot);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n\n_c = BogotaMapChart;\nexport default BogotaMapChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BogotaMapChart\");","map":{"version":3,"sources":["/home/manolo/sds-ui/src/components/charts/BogotaMapChart.jsx"],"names":["React","DocumentModal","AreaMap","APIRequest","Modal","Spin","BogotaMapChart","height","state","docInfo","e","feature","properties","article","title","length","info","width","icon","okText","maskClosable","content","id","onOk","isLoading","isError","config","map","type","style","source","data","parser","autoFit","color","opacity","stroke","lineWidth","active","fill","tooltip","anchor","offsets","items","field","alias","label","visible","fontSize","strokeWidth","textAllowOverlap","padding","legend","position","plotEvents","plot","on","margin"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AAEA;;AACA,SAASC,OAAT,QAAwB,oBAAxB;AAEA;;AACA,SAASC,UAAT,QAA2B,gBAA3B;AAEA;;AACA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,MAA5B;;;AAEA,MAAMC,cAAc,GAAG,QAAsB;AAAA,MAArB;AAAEC,IAAAA,MAAM,GAAG;AAAX,GAAqB;AAC3C,QAAM,CAACC,KAAD,IAAUL,UAAU,CAAC,WAAD,CAA1B;;AACA,QAAMM,OAAO,GAAIC,CAAD,IAAO;AACrB,QAAIA,CAAC,CAACC,OAAF,CAAUC,UAAV,CAAqBC,OAArB,CAA6BC,KAA7B,CAAmCC,MAAnC,GAA4C,CAAhD,EAAmD;AACjDX,MAAAA,KAAK,CAACY,IAAN,CAAW;AACTC,QAAAA,KAAK,EAAE,QADE;AAETH,QAAAA,KAAK,eACH;AAAG,UAAA,SAAS,EAAC,kBAAb;AAAA,oBACGJ,CAAC,CAACC,OAAF,CAAUC,UAAV,CAAqBC,OAArB,CAA6BC;AADhC;AAAA;AAAA;AAAA;AAAA,gBAHO;AAOTI,QAAAA,IAAI,EAAE,IAPG;AAQTC,QAAAA,MAAM,EAAE,QARC;AASTC,QAAAA,YAAY,EAAE,IATL;AAUTC,QAAAA,OAAO,eAAE,QAAC,aAAD;AAAe,UAAA,UAAU,EAAEX,CAAC,CAACC,OAAF,CAAUC,UAAV,CAAqBC,OAArB,CAA6BS;AAAxD;AAAA;AAAA;AAAA;AAAA,gBAVA;;AAWTC,QAAAA,IAAI,GAAG,CAAE;;AAXA,OAAX;AAaD,KAdD,MAeEnB,KAAK,CAACY,IAAN,CAAW;AACTC,MAAAA,KAAK,EAAE,QADE;AAETH,MAAAA,KAAK,eACH;AAAG,QAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHO;AAOTI,MAAAA,IAAI,EAAE,IAPG;AAQTC,MAAAA,MAAM,EAAE,QARC;AASTC,MAAAA,YAAY,EAAE,IATL;AAUTC,MAAAA,OAAO,EAAE,EAVA;;AAWTE,MAAAA,IAAI,GAAG,CAAE;;AAXA,KAAX;AAaH,GA7BD;;AA+BA,MAAIf,KAAK,CAACgB,SAAV,EAAqB;AACnB,wBACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,IAAI,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AACD,MAAIhB,KAAK,CAACiB,OAAV,EAAmB;AACjB,WAAO,IAAP;AACD;;AAED,QAAMC,MAAM,GAAG;AACbC,IAAAA,GAAG,EAAE;AACHC,MAAAA,IAAI,EAAE,QADH;AAEHC,MAAAA,KAAK,EAAE;AAFJ,KADQ;AAKbC,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAEvB,KAAK,CAACuB,IAAN,CAAWA,IADX;AAENC,MAAAA,MAAM,EAAE;AACNJ,QAAAA,IAAI,EAAE;AADA;AAFF,KALK;AAWbK,IAAAA,OAAO,EAAE,IAXI;AAYbC,IAAAA,KAAK,EAAE,SAZM;AAabL,IAAAA,KAAK,EAAE;AACLM,MAAAA,OAAO,EAAE,CADJ;AAELC,MAAAA,MAAM,EAAE,SAFH;AAGLC,MAAAA,SAAS,EAAE;AAHN,KAbM;AAkBb7B,IAAAA,KAAK,EAAE;AACL8B,MAAAA,MAAM,EAAE;AAAEC,QAAAA,IAAI,EAAE,SAAR;AAAmBH,QAAAA,MAAM,EAAE,OAA3B;AAAoCC,QAAAA,SAAS,EAAE;AAA/C;AADH,KAlBM;AAqBbG,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,WADD;AAEPC,MAAAA,OAAO,EAAE,CAAC,EAAD,EAAK,CAAC,EAAN,CAFF;AAGPC,MAAAA,KAAK,EAAE,CAAC;AAAEC,QAAAA,KAAK,EAAE,eAAT;AAA0BC,QAAAA,KAAK,EAAE;AAAjC,OAAD;AAHA,KArBI;AA0BbC,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAE,IADJ;AAELH,MAAAA,KAAK,EAAE,KAFF;AAGLf,MAAAA,KAAK,EAAE;AACLU,QAAAA,IAAI,EAAE,MADD;AAELJ,QAAAA,OAAO,EAAE,GAFJ;AAGLa,QAAAA,QAAQ,EAAE,EAHL;AAILZ,QAAAA,MAAM,EAAE,MAJH;AAKLa,QAAAA,WAAW,EAAE,GALR;AAMLC,QAAAA,gBAAgB,EAAE,IANb;AAOLC,QAAAA,OAAO,EAAE,CAAC,EAAD,EAAK,EAAL;AAPJ;AAHF,KA1BM;AAuCbC,IAAAA,MAAM,EAAE;AACNxB,MAAAA,IAAI,EAAE,UADA;AAENyB,MAAAA,QAAQ,EAAE,UAFJ;AAGNvC,MAAAA,KAAK,EACH;AAJI;AAvCK,GAAf;;AA+CA,QAAMwC,UAAU,GAAIC,IAAD,IAAU;AAC3BA,IAAAA,IAAI,CAACC,EAAL,CAAQ,iBAAR,EAA4B9C,CAAD,IAAOD,OAAO,CAACC,CAAD,CAAzC;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACE;AAAK,MAAA,KAAK,EAAE;AAAEH,QAAAA,MAAM,EAAEA,MAAV;AAAkBkD,QAAAA,MAAM,EAAE;AAA1B,OAAZ;AAAA,6BACE,QAAC,OAAD,OACM/B,MADN;AAEE,QAAA,OAAO,EAAG6B,IAAD,IAAU;AACjBD,UAAAA,UAAU,CAACC,IAAD,CAAV;AACD;AAJH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA3GD;;KAAMjD,c;AA6GN,eAAeA,cAAf","sourcesContent":["import React from 'react';\n\n/* Components */\nimport DocumentModal from '../DocumentModal';\n\n/* Libraries */\nimport { AreaMap } from '@ant-design/charts';\n\n/* Utilities */\nimport { APIRequest } from '../../apis/api';\n\n/* UI Library Components */\nimport { Modal, Spin } from 'antd';\n\nconst BogotaMapChart = ({ height = 600 }) => {\n  const [state] = APIRequest('/app/home');\n  const docInfo = (e) => {\n    if (e.feature.properties.article.title.length > 0) {\n      Modal.info({\n        width: '1200px',\n        title: (\n          <p className=\"map--modal-title\">\n            {e.feature.properties.article.title}\n          </p>\n        ),\n        icon: null,\n        okText: 'Cerrar',\n        maskClosable: true,\n        content: <DocumentModal documentID={e.feature.properties.article.id} />,\n        onOk() {},\n      });\n    } else\n      Modal.info({\n        width: '1200px',\n        title: (\n          <p className=\"map--modal-title\">\n            No hay artículos disponibles para esta localidad\n          </p>\n        ),\n        icon: null,\n        okText: 'Cerrar',\n        maskClosable: true,\n        content: '',\n        onOk() {},\n      });\n  };\n\n  if (state.isLoading) {\n    return (\n      <div className=\"spin--container\">\n        <Spin size=\"large\" />\n      </div>\n    );\n  }\n  if (state.isError) {\n    return null;\n  }\n\n  const config = {\n    map: {\n      type: 'mapbox',\n      style: 'blank',\n    },\n    source: {\n      data: state.data.data,\n      parser: {\n        type: 'geojson',\n      },\n    },\n    autoFit: true,\n    color: '#90cedc',\n    style: {\n      opacity: 1,\n      stroke: '#f0f2f5',\n      lineWidth: 2,\n    },\n    state: {\n      active: { fill: '#4abfdc', stroke: 'white', lineWidth: 3 },\n    },\n    tooltip: {\n      anchor: 'top-right',\n      offsets: [60, -20],\n      items: [{ field: 'article.title', alias: 'Artículo:' }],\n    },\n    label: {\n      visible: true,\n      field: 'loc',\n      style: {\n        fill: '#000',\n        opacity: 0.9,\n        fontSize: 11,\n        stroke: '#fff',\n        strokeWidth: 1.5,\n        textAllowOverlap: true,\n        padding: [10, 10],\n      },\n    },\n    legend: {\n      type: 'category',\n      position: 'topright',\n      title:\n        'Haz click sobre una localidad para visualizar un artículo de forma aleatoria',\n    },\n  };\n\n  const plotEvents = (plot) => {\n    plot.on('areaLayer:click', (e) => docInfo(e));\n  };\n\n  return (\n    <div className=\"map--chart\">\n      <div style={{ height: height, margin: '5px' }}>\n        <AreaMap\n          {...config}\n          onReady={(plot) => {\n            plotEvents(plot);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BogotaMapChart;\n"]},"metadata":{},"sourceType":"module"}