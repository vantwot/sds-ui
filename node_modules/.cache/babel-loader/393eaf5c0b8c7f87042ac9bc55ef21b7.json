{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _merge from \"lodash/merge\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { EventEmitter } from 'eventemitter3';\nimport LngLat from './geo/lng_lat';\nimport LngLatBounds from './geo/lng_lat_bounds';\nimport Point from './geo/point';\nimport Transform from './geo/transform';\nimport { Event } from './handler/events/event';\nimport { clamp, ease as defaultEasing, interpolate, now, pick, prefersReducedMotion, wrap } from './util';\n\nvar Camera = function (_EventEmitter) {\n  _inherits(Camera, _EventEmitter);\n\n  var _super = _createSuper(Camera);\n\n  function Camera(options) {\n    var _this;\n\n    _classCallCheck(this, Camera);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"transform\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"options\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"moving\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"zooming\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"rotating\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"pitching\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"padding\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"bearingSnap\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"easeEndTimeoutID\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"easeStart\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"easeOptions\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"easeId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onEaseFrame\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onEaseEnd\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"easeFrameId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"renderFrameCallback\", function () {\n      var t = Math.min((now() - _this.easeStart) / _this.easeOptions.duration, 1);\n\n      _this.onEaseFrame(_this.easeOptions.easing(t));\n\n      if (t < 1) {\n        _this.easeFrameId = _this.requestRenderFrame(_this.renderFrameCallback);\n      } else {\n        _this.stop();\n      }\n    });\n\n    _this.options = options;\n    var minZoom = options.minZoom,\n        maxZoom = options.maxZoom,\n        minPitch = options.minPitch,\n        maxPitch = options.maxPitch,\n        renderWorldCopies = options.renderWorldCopies;\n    _this.moving = false;\n    _this.zooming = false;\n    _this.bearingSnap = options.bearingSnap;\n    _this.transform = new Transform(minZoom, maxZoom, minPitch, maxPitch, renderWorldCopies);\n    return _this;\n  }\n\n  _createClass(Camera, [{\n    key: \"requestRenderFrame\",\n    value: function requestRenderFrame(cb) {\n      return 0;\n    }\n  }, {\n    key: \"cancelRenderFrame\",\n    value: function cancelRenderFrame(_) {\n      return;\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      var _this$transform$cente = this.transform.center,\n          lng = _this$transform$cente.lng,\n          lat = _this$transform$cente.lat;\n      return new LngLat(lng, lat);\n    }\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      return this.transform.zoom;\n    }\n  }, {\n    key: \"getPitch\",\n    value: function getPitch() {\n      return this.transform.pitch;\n    }\n  }, {\n    key: \"setCenter\",\n    value: function setCenter(center, eventData) {\n      return this.jumpTo({\n        center: center\n      }, eventData);\n    }\n  }, {\n    key: \"setPitch\",\n    value: function setPitch(pitch, eventData) {\n      this.jumpTo({\n        pitch: pitch\n      }, eventData);\n      return this;\n    }\n  }, {\n    key: \"getBearing\",\n    value: function getBearing() {\n      return this.transform.bearing;\n    }\n  }, {\n    key: \"panTo\",\n    value: function panTo(lnglat, options, eventData) {\n      return this.easeTo(_merge({\n        center: lnglat\n      }, options), eventData);\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut(options, eventData) {\n      this.zoomTo(this.getZoom() - 1, options, eventData);\n      return this;\n    }\n  }, {\n    key: \"setBearing\",\n    value: function setBearing(bearing, eventData) {\n      this.jumpTo({\n        bearing: bearing\n      }, eventData);\n      return this;\n    }\n  }, {\n    key: \"setZoom\",\n    value: function setZoom(zoom, eventData) {\n      this.jumpTo({\n        zoom: zoom\n      }, eventData);\n      return this;\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn(options, eventData) {\n      this.zoomTo(this.getZoom() + 1, options, eventData);\n      return this;\n    }\n  }, {\n    key: \"zoomTo\",\n    value: function zoomTo(zoom, options, eventData) {\n      return this.easeTo(_merge({\n        zoom: zoom\n      }, options), eventData);\n    }\n  }, {\n    key: \"getPadding\",\n    value: function getPadding() {\n      return this.transform.padding;\n    }\n  }, {\n    key: \"setPadding\",\n    value: function setPadding(padding, eventData) {\n      this.jumpTo({\n        padding: padding\n      }, eventData);\n      return this;\n    }\n  }, {\n    key: \"rotateTo\",\n    value: function rotateTo(bearing, options, eventData) {\n      return this.easeTo(_merge({\n        bearing: bearing\n      }, options), eventData);\n    }\n  }, {\n    key: \"resetNorth\",\n    value: function resetNorth(options, eventData) {\n      this.rotateTo(0, _merge({\n        duration: 1000\n      }, options), eventData);\n      return this;\n    }\n  }, {\n    key: \"resetNorthPitch\",\n    value: function resetNorthPitch(options, eventData) {\n      this.easeTo(_merge({\n        bearing: 0,\n        pitch: 0,\n        duration: 1000\n      }, options), eventData);\n      return this;\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(bounds, options, eventData) {\n      return this.fitInternal(this.cameraForBounds(bounds, options), options, eventData);\n    }\n  }, {\n    key: \"cameraForBounds\",\n    value: function cameraForBounds(bounds, options) {\n      bounds = LngLatBounds.convert(bounds);\n      return this.cameraForBoxAndBearing(bounds.getNorthWest(), bounds.getSouthEast(), 0, options);\n    }\n  }, {\n    key: \"snapToNorth\",\n    value: function snapToNorth(options, eventData) {\n      if (Math.abs(this.getBearing()) < this.bearingSnap) {\n        return this.resetNorth(options, eventData);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"jumpTo\",\n    value: function jumpTo() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var eventData = arguments.length > 1 ? arguments[1] : undefined;\n      this.stop();\n      var tr = this.transform;\n      var zoomChanged = false;\n      var bearingChanged = false;\n      var pitchChanged = false;\n\n      if (options.zoom && tr.zoom !== +options.zoom) {\n        zoomChanged = true;\n        tr.zoom = +options.zoom;\n      }\n\n      if (options.center !== undefined) {\n        tr.center = LngLat.convert(options.center);\n      }\n\n      if (options.bearing && tr.bearing !== +options.bearing) {\n        bearingChanged = true;\n        tr.bearing = +options.bearing;\n      }\n\n      if (options.pitch && tr.pitch !== +options.pitch) {\n        pitchChanged = true;\n        tr.pitch = +options.pitch;\n      }\n\n      if (options.padding != null && !tr.isPaddingEqual(options.padding)) {\n        tr.padding = options.padding;\n      }\n\n      this.emit('movestart', new Event('movestart', eventData));\n      this.emit('move', new Event('move', eventData));\n\n      if (zoomChanged) {\n        this.emit('zoomstart', new Event('zoomstart', eventData));\n        this.emit('zoom', new Event('zoom', eventData));\n        this.emit('zoomend', new Event('zoomend', eventData));\n      }\n\n      if (bearingChanged) {\n        this.emit('rotatestart', new Event('rotatestart', eventData));\n        this.emit('rotate', new Event('rotate', eventData));\n        this.emit('rotateend', new Event('rotateend', eventData));\n      }\n\n      if (pitchChanged) {\n        this.emit('pitchstart', new Event('pitchstart', eventData));\n        this.emit('pitch', new Event('pitch', eventData));\n        this.emit('pitchend', new Event('pitchend', eventData));\n      }\n\n      return this.emit('moveend', new Event('moveend', eventData));\n    }\n  }, {\n    key: \"easeTo\",\n    value: function easeTo() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var eventData = arguments.length > 1 ? arguments[1] : undefined;\n      options = _merge({\n        offset: [0, 0],\n        duration: 500,\n        easing: defaultEasing\n      }, options);\n\n      if (options.animate === false || !options.essential && prefersReducedMotion()) {\n        options.duration = 0;\n      }\n\n      var tr = this.transform;\n      var startZoom = this.getZoom();\n      var startBearing = this.getBearing();\n      var startPitch = this.getPitch();\n      var startPadding = this.getPadding();\n      var zoom = options.zoom ? +options.zoom : startZoom;\n      var bearing = options.bearing ? this.normalizeBearing(options.bearing, startBearing) : startBearing;\n      var pitch = options.pitch ? +options.pitch : startPitch;\n      var padding = options.padding ? options.padding : tr.padding;\n      var offsetAsPoint = Point.convert(options.offset);\n      var pointAtOffset = tr.centerPoint.add(offsetAsPoint);\n      var locationAtOffset = tr.pointLocation(pointAtOffset);\n      var center = LngLat.convert(options.center || locationAtOffset);\n      this.normalizeCenter(center);\n      var from = tr.project(locationAtOffset);\n      var delta = tr.project(center).sub(from);\n      var finalScale = tr.zoomScale(zoom - startZoom);\n      var around;\n      var aroundPoint;\n\n      if (options.around) {\n        around = LngLat.convert(options.around);\n        aroundPoint = tr.locationPoint(around);\n      }\n\n      var currently = {\n        moving: this.moving,\n        zooming: this.zooming,\n        rotating: this.rotating,\n        pitching: this.pitching\n      };\n      this.zooming = this.zooming || zoom !== startZoom;\n      this.rotating = this.rotating || startBearing !== bearing;\n      this.pitching = this.pitching || pitch !== startPitch;\n      this.padding = !tr.isPaddingEqual(padding);\n      this.easeId = options.easeId;\n      this.prepareEase(eventData, options.noMoveStart, currently);\n      clearTimeout(this.easeEndTimeoutID);\n      this.ease(function (k) {\n        if (_this2.zooming) {\n          tr.zoom = interpolate(startZoom, zoom, k);\n        }\n\n        if (_this2.rotating) {\n          tr.bearing = interpolate(startBearing, bearing, k);\n        }\n\n        if (_this2.pitching) {\n          tr.pitch = interpolate(startPitch, pitch, k);\n        }\n\n        if (_this2.padding) {\n          tr.interpolatePadding(startPadding, padding, k);\n          pointAtOffset = tr.centerPoint.add(offsetAsPoint);\n        }\n\n        if (around) {\n          tr.setLocationAtPoint(around, aroundPoint);\n        } else {\n          var scale = tr.zoomScale(tr.zoom - startZoom);\n          var base = zoom > startZoom ? Math.min(2, finalScale) : Math.max(0.5, finalScale);\n          var speedup = Math.pow(base, 1 - k);\n          var newCenter = tr.unproject(from.add(delta.mult(k * speedup)).mult(scale));\n          tr.setLocationAtPoint(tr.renderWorldCopies ? newCenter.wrap() : newCenter, pointAtOffset);\n        }\n\n        _this2.fireMoveEvents(eventData);\n      }, function (interruptingEaseId) {\n        _this2.afterEase(eventData, interruptingEaseId);\n      }, options);\n      return this;\n    }\n  }, {\n    key: \"flyTo\",\n    value: function flyTo() {\n      var _this3 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var eventData = arguments.length > 1 ? arguments[1] : undefined;\n\n      if (!options.essential && prefersReducedMotion()) {\n        var coercedOptions = pick(options, ['center', 'zoom', 'bearing', 'pitch', 'around']);\n        return this.jumpTo(coercedOptions, eventData);\n      }\n\n      this.stop();\n      options = _merge({\n        offset: [0, 0],\n        speed: 1.2,\n        curve: 1.42,\n        easing: defaultEasing\n      }, options);\n      var tr = this.transform;\n      var startZoom = this.getZoom();\n      var startBearing = this.getBearing();\n      var startPitch = this.getPitch();\n      var startPadding = this.getPadding();\n      var zoom = options.zoom ? clamp(+options.zoom, tr.minZoom, tr.maxZoom) : startZoom;\n      var bearing = options.bearing ? this.normalizeBearing(options.bearing, startBearing) : startBearing;\n      var pitch = options.pitch ? +options.pitch : startPitch;\n      var padding = 'padding' in options ? options.padding : tr.padding;\n      var scale = tr.zoomScale(zoom - startZoom);\n      var offsetAsPoint = Point.convert(options.offset);\n      var pointAtOffset = tr.centerPoint.add(offsetAsPoint);\n      var locationAtOffset = tr.pointLocation(pointAtOffset);\n      var center = LngLat.convert(options.center || locationAtOffset);\n      this.normalizeCenter(center);\n      var from = tr.project(locationAtOffset);\n      var delta = tr.project(center).sub(from);\n      var rho = options.curve;\n      var w0 = Math.max(tr.width, tr.height);\n      var w1 = w0 / scale;\n      var u1 = delta.mag();\n\n      if ('minZoom' in options) {\n        var minZoom = clamp(Math.min(options.minZoom, startZoom, zoom), tr.minZoom, tr.maxZoom);\n        var wMax = w0 / tr.zoomScale(minZoom - startZoom);\n        rho = Math.sqrt(wMax / u1 * 2);\n      }\n\n      var rho2 = rho * rho;\n\n      function r(i) {\n        var b = (w1 * w1 - w0 * w0 + (i ? -1 : 1) * rho2 * rho2 * u1 * u1) / (2 * (i ? w1 : w0) * rho2 * u1);\n        return Math.log(Math.sqrt(b * b + 1) - b);\n      }\n\n      function sinh(n) {\n        return (Math.exp(n) - Math.exp(-n)) / 2;\n      }\n\n      function cosh(n) {\n        return (Math.exp(n) + Math.exp(-n)) / 2;\n      }\n\n      function tanh(n) {\n        return sinh(n) / cosh(n);\n      }\n\n      var r0 = r(0);\n\n      var w = function w(s) {\n        return cosh(r0) / cosh(r0 + rho * s);\n      };\n\n      var u = function u(s) {\n        return w0 * ((cosh(r0) * tanh(r0 + rho * s) - sinh(r0)) / rho2) / u1;\n      };\n\n      var S = (r(1) - r0) / rho;\n\n      if (Math.abs(u1) < 0.000001 || !isFinite(S)) {\n        if (Math.abs(w0 - w1) < 0.000001) {\n          return this.easeTo(options, eventData);\n        }\n\n        var k = w1 < w0 ? -1 : 1;\n        S = Math.abs(Math.log(w1 / w0)) / rho;\n\n        u = function u() {\n          return 0;\n        };\n\n        w = function w(s) {\n          return Math.exp(k * rho * s);\n        };\n      }\n\n      if ('duration' in options) {\n        options.duration = +options.duration;\n      } else {\n        var V = 'screenSpeed' in options ? +options.screenSpeed / rho : +options.speed;\n        options.duration = 1000 * S / V;\n      }\n\n      if (options.maxDuration && options.duration > options.maxDuration) {\n        options.duration = 0;\n      }\n\n      this.zooming = true;\n      this.rotating = startBearing !== bearing;\n      this.pitching = pitch !== startPitch;\n      this.padding = !tr.isPaddingEqual(padding);\n      this.prepareEase(eventData, false);\n      this.ease(function (k) {\n        var s = k * S;\n        var easeScale = 1 / w(s);\n        tr.zoom = k === 1 ? zoom : startZoom + tr.scaleZoom(easeScale);\n\n        if (_this3.rotating) {\n          tr.bearing = interpolate(startBearing, bearing, k);\n        }\n\n        if (_this3.pitching) {\n          tr.pitch = interpolate(startPitch, pitch, k);\n        }\n\n        if (_this3.padding) {\n          tr.interpolatePadding(startPadding, padding, k);\n          pointAtOffset = tr.centerPoint.add(offsetAsPoint);\n        }\n\n        var newCenter = k === 1 ? center : tr.unproject(from.add(delta.mult(u(s))).mult(easeScale));\n        tr.setLocationAtPoint(tr.renderWorldCopies ? newCenter.wrap() : newCenter, pointAtOffset);\n\n        _this3.fireMoveEvents(eventData);\n      }, function () {\n        return _this3.afterEase(eventData);\n      }, options);\n      return this;\n    }\n  }, {\n    key: \"fitScreenCoordinates\",\n    value: function fitScreenCoordinates(p0, p1, bearing, options, eventData) {\n      return this.fitInternal(this.cameraForBoxAndBearing(this.transform.pointLocation(Point.convert(p0)), this.transform.pointLocation(Point.convert(p1)), bearing, options), options, eventData);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(allowGestures, easeId) {\n      if (this.easeFrameId) {\n        this.cancelRenderFrame(this.easeFrameId);\n        delete this.easeFrameId;\n        delete this.onEaseFrame;\n      }\n\n      if (this.onEaseEnd) {\n        var onEaseEnd = this.onEaseEnd;\n        delete this.onEaseEnd;\n        onEaseEnd.call(this, easeId);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"normalizeBearing\",\n    value: function normalizeBearing(bearing, currentBearing) {\n      bearing = wrap(bearing, -180, 180);\n      var diff = Math.abs(bearing - currentBearing);\n\n      if (Math.abs(bearing - 360 - currentBearing) < diff) {\n        bearing -= 360;\n      }\n\n      if (Math.abs(bearing + 360 - currentBearing) < diff) {\n        bearing += 360;\n      }\n\n      return bearing;\n    }\n  }, {\n    key: \"normalizeCenter\",\n    value: function normalizeCenter(center) {\n      var tr = this.transform;\n\n      if (!tr.renderWorldCopies || tr.lngRange) {\n        return;\n      }\n\n      var delta = center.lng - tr.center.lng;\n      center.lng += delta > 180 ? -360 : delta < -180 ? 360 : 0;\n    }\n  }, {\n    key: \"fireMoveEvents\",\n    value: function fireMoveEvents(eventData) {\n      this.emit('move', new Event('move', eventData));\n\n      if (this.zooming) {\n        this.emit('zoom', new Event('zoom', eventData));\n      }\n\n      if (this.rotating) {\n        this.emit('rotate', new Event('rotate', eventData));\n      }\n\n      if (this.pitching) {\n        this.emit('rotate', new Event('pitch', eventData));\n      }\n    }\n  }, {\n    key: \"prepareEase\",\n    value: function prepareEase(eventData) {\n      var noMoveStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var currently = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.moving = true;\n\n      if (!noMoveStart && !currently.moving) {\n        this.emit('movestart', new Event('movestart', eventData));\n      }\n\n      if (this.zooming && !currently.zooming) {\n        this.emit('zoomstart', new Event('zoomstart', eventData));\n      }\n\n      if (this.rotating && !currently.rotating) {\n        this.emit('rotatestart', new Event('rotatestart', eventData));\n      }\n\n      if (this.pitching && !currently.pitching) {\n        this.emit('pitchstart', new Event('pitchstart', eventData));\n      }\n    }\n  }, {\n    key: \"afterEase\",\n    value: function afterEase(eventData, easeId) {\n      if (this.easeId && easeId && this.easeId === easeId) {\n        return;\n      }\n\n      delete this.easeId;\n      var wasZooming = this.zooming;\n      var wasRotating = this.rotating;\n      var wasPitching = this.pitching;\n      this.moving = false;\n      this.zooming = false;\n      this.rotating = false;\n      this.pitching = false;\n      this.padding = false;\n\n      if (wasZooming) {\n        this.emit('zoomend', new Event('zoomend', eventData));\n      }\n\n      if (wasRotating) {\n        this.emit('rotateend', new Event('rotateend', eventData));\n      }\n\n      if (wasPitching) {\n        this.emit('pitchend', new Event('pitchend', eventData));\n      }\n\n      this.emit('moveend', new Event('moveend', eventData));\n    }\n  }, {\n    key: \"ease\",\n    value: function ease(frame, finish, options) {\n      if (options.animate === false || options.duration === 0) {\n        frame(1);\n        finish();\n      } else {\n        this.easeStart = now();\n        this.easeOptions = options;\n        this.onEaseFrame = frame;\n        this.onEaseEnd = finish;\n        this.easeFrameId = this.requestRenderFrame(this.renderFrameCallback);\n      }\n    }\n  }, {\n    key: \"cameraForBoxAndBearing\",\n    value: function cameraForBoxAndBearing(p0, p1, bearing, options) {\n      var defaultPadding = {\n        top: 0,\n        bottom: 0,\n        right: 0,\n        left: 0\n      };\n      options = _merge({\n        padding: defaultPadding,\n        offset: [0, 0],\n        maxZoom: this.transform.maxZoom\n      }, options);\n\n      if (typeof options.padding === 'number') {\n        var p = options.padding;\n        options.padding = {\n          top: p,\n          bottom: p,\n          right: p,\n          left: p\n        };\n      }\n\n      options.padding = _merge(defaultPadding, options.padding);\n      var tr = this.transform;\n      var edgePadding = tr.padding;\n      var p0world = tr.project(LngLat.convert(p0));\n      var p1world = tr.project(LngLat.convert(p1));\n      var p0rotated = p0world.rotate(-bearing * Math.PI / 180);\n      var p1rotated = p1world.rotate(-bearing * Math.PI / 180);\n      var upperRight = new Point(Math.max(p0rotated.x, p1rotated.x), Math.max(p0rotated.y, p1rotated.y));\n      var lowerLeft = new Point(Math.min(p0rotated.x, p1rotated.x), Math.min(p0rotated.y, p1rotated.y));\n      var size = upperRight.sub(lowerLeft);\n      var scaleX = (tr.width - (edgePadding.left + edgePadding.right + options.padding.left + options.padding.right)) / size.x;\n      var scaleY = (tr.height - (edgePadding.top + edgePadding.bottom + options.padding.top + options.padding.bottom)) / size.y;\n\n      if (scaleY < 0 || scaleX < 0) {\n        return;\n      }\n\n      var zoom = Math.min(tr.scaleZoom(tr.scale * Math.min(scaleX, scaleY)), options.maxZoom);\n      var offset = Point.convert(options.offset);\n      var paddingOffsetX = (options.padding.left - options.padding.right) / 2;\n      var paddingOffsetY = (options.padding.top - options.padding.bottom) / 2;\n      var offsetAtInitialZoom = new Point(offset.x + paddingOffsetX, offset.y + paddingOffsetY);\n      var offsetAtFinalZoom = offsetAtInitialZoom.mult(tr.scale / tr.zoomScale(zoom));\n      var center = tr.unproject(p0world.add(p1world).div(2).sub(offsetAtFinalZoom));\n      return {\n        center: center,\n        zoom: zoom,\n        bearing: bearing\n      };\n    }\n  }, {\n    key: \"fitInternal\",\n    value: function fitInternal(calculatedOptions, options, eventData) {\n      if (!calculatedOptions) {\n        return this;\n      }\n\n      options = _merge(calculatedOptions, options);\n      delete options.padding;\n      return options.linear ? this.easeTo(options, eventData) : this.flyTo(options, eventData);\n    }\n  }]);\n\n  return Camera;\n}(EventEmitter);\n\nexport { Camera as default };","map":{"version":3,"sources":["../src/camera.ts"],"names":["ease","Camera","EventEmitter","minZoom","maxZoom","minPitch","maxPitch","renderWorldCopies","options","lng","lat","center","pitch","lnglat","bearing","zoom","padding","duration","bounds","LngLatBounds","Math","eventData","tr","zoomChanged","bearingChanged","pitchChanged","LngLat","offset","easing","defaultEasing","prefersReducedMotion","startZoom","startBearing","startPitch","startPadding","offsetAsPoint","Point","pointAtOffset","locationAtOffset","from","delta","finalScale","around","aroundPoint","currently","moving","zooming","rotating","pitching","clearTimeout","interpolate","scale","base","speedup","newCenter","k","coercedOptions","pick","speed","curve","clamp","rho","w0","w1","u1","wMax","rho2","b","i","sinh","cosh","r0","r","w","u","tanh","S","isFinite","V","s","easeScale","onEaseEnd","t","now","wrap","diff","noMoveStart","wasZooming","wasRotating","wasPitching","frame","finish","defaultPadding","top","bottom","right","left","p","edgePadding","p0world","p1world","p0rotated","p1rotated","upperRight","lowerLeft","size","scaleX","scaleY","paddingOffsetX","paddingOffsetY","offsetAtInitialZoom","offsetAtFinalZoom"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport { EventEmitter } from 'eventemitter3';\nimport { merge } from 'lodash';\nimport { IPaddingOptions } from './geo/edge_insets';\nimport LngLat, { LngLatLike } from './geo/lng_lat';\nimport LngLatBounds, { LngLatBoundsLike } from './geo/lng_lat_bounds';\nimport Point, { PointLike } from './geo/point';\nimport Transform from './geo/transform';\nimport { Event } from './handler/events/event';\nimport { IMapOptions } from './interface';\ntype CallBack = (_: number) => void;\nimport {\n  cancel,\n  clamp,\n  ease as defaultEasing,\n  interpolate,\n  now,\n  pick,\n  prefersReducedMotion,\n  raf,\n  wrap,\n} from './util';\n\nexport interface ICameraOptions {\n  center?: LngLatLike;\n  zoom?: number;\n  bearing?: number;\n  pitch?: number;\n  around?: LngLatLike;\n  padding?: IPaddingOptions;\n}\n\nexport interface IAnimationOptions {\n  duration?: number;\n  easing?: (_: number) => number;\n  offset?: PointLike;\n  animate?: boolean;\n  essential?: boolean;\n  linear?: boolean;\n}\n\nexport default class Camera extends EventEmitter {\n  public transform: Transform;\n  // public requestRenderFrame: (_: any) => number;\n  // public cancelRenderFrame: (_: number) => void;\n  protected options: IMapOptions;\n  protected moving: boolean;\n  protected zooming: boolean;\n  protected rotating: boolean;\n  protected pitching: boolean;\n  protected padding: boolean;\n\n  private bearingSnap: number;\n  private easeEndTimeoutID: number;\n  private easeStart: number;\n  private easeOptions: {\n    duration: number;\n    easing: (_: number) => number;\n  };\n  private easeId: string | void;\n  private onEaseFrame: (_: number) => void;\n  private onEaseEnd: (easeId?: string) => void;\n  private easeFrameId: number;\n\n  constructor(options: IMapOptions) {\n    super();\n    this.options = options;\n    const { minZoom, maxZoom, minPitch, maxPitch, renderWorldCopies } = options;\n    this.moving = false;\n    this.zooming = false;\n    this.bearingSnap = options.bearingSnap;\n    this.transform = new Transform(\n      minZoom,\n      maxZoom,\n      minPitch,\n      maxPitch,\n      renderWorldCopies,\n    );\n  }\n  public requestRenderFrame(cb: CallBack): number {\n    return 0;\n  }\n  public cancelRenderFrame(_: number): void {\n    return;\n  }\n\n  public getCenter() {\n    const { lng, lat } = this.transform.center;\n    return new LngLat(lng, lat);\n  }\n\n  public getZoom(): number {\n    return this.transform.zoom;\n  }\n\n  public getPitch(): number {\n    return this.transform.pitch;\n  }\n\n  public setCenter(center: LngLatLike, eventData?: any) {\n    return this.jumpTo({ center }, eventData);\n  }\n\n  public setPitch(pitch: number, eventData?: any) {\n    this.jumpTo({ pitch }, eventData);\n    return this;\n  }\n\n  public getBearing(): number {\n    return this.transform.bearing;\n  }\n\n  public panTo(\n    lnglat: LngLatLike,\n    options?: IAnimationOptions,\n    eventData?: any,\n  ) {\n    return this.easeTo(\n      merge(\n        {\n          center: lnglat,\n        },\n        options,\n      ),\n      eventData,\n    );\n  }\n\n  public zoomOut(options?: IAnimationOptions, eventData?: any) {\n    this.zoomTo(this.getZoom() - 1, options, eventData);\n    return this;\n  }\n\n  public setBearing(bearing: number, eventData?: any) {\n    this.jumpTo({ bearing }, eventData);\n    return this;\n  }\n  public setZoom(zoom: number, eventData?: any) {\n    this.jumpTo({ zoom }, eventData);\n    return this;\n  }\n\n  public zoomIn(options?: IAnimationOptions, eventData?: any) {\n    this.zoomTo(this.getZoom() + 1, options, eventData);\n    return this;\n  }\n\n  public zoomTo(zoom: number, options?: IAnimationOptions, eventData?: any) {\n    return this.easeTo(\n      merge(\n        {\n          zoom,\n        },\n        options,\n      ),\n      eventData,\n    );\n  }\n\n  public getPadding(): IPaddingOptions {\n    return this.transform.padding;\n  }\n\n  public setPadding(padding: IPaddingOptions, eventData?: any) {\n    this.jumpTo({ padding }, eventData);\n    return this;\n  }\n\n  public rotateTo(\n    bearing: number,\n    options?: IAnimationOptions,\n    eventData?: any,\n  ) {\n    return this.easeTo(\n      merge(\n        {\n          bearing,\n        },\n        options,\n      ),\n      eventData,\n    );\n  }\n\n  public resetNorth(options?: IAnimationOptions, eventData?: any) {\n    this.rotateTo(0, merge({ duration: 1000 }, options), eventData);\n    return this;\n  }\n\n  public resetNorthPitch(options?: IAnimationOptions, eventData?: any) {\n    this.easeTo(\n      merge(\n        {\n          bearing: 0,\n          pitch: 0,\n          duration: 1000,\n        },\n        options,\n      ),\n      eventData,\n    );\n    return this;\n  }\n  public fitBounds(\n    bounds: LngLatBoundsLike,\n    options?: IAnimationOptions & ICameraOptions,\n    eventData?: any,\n  ) {\n    return this.fitInternal(\n      // @ts-ignore\n      this.cameraForBounds(bounds, options),\n      options,\n      eventData,\n    );\n  }\n  public cameraForBounds(\n    bounds: LngLatBoundsLike,\n    options?: ICameraOptions,\n  ): void | (ICameraOptions & IAnimationOptions) {\n    bounds = LngLatBounds.convert(bounds);\n    return this.cameraForBoxAndBearing(\n      bounds.getNorthWest(),\n      bounds.getSouthEast(),\n      0,\n      // @ts-ignore\n      options,\n    );\n  }\n\n  public snapToNorth(options?: IAnimationOptions, eventData?: any) {\n    if (Math.abs(this.getBearing()) < this.bearingSnap) {\n      return this.resetNorth(options, eventData);\n    }\n    return this;\n  }\n\n  public jumpTo(options: ICameraOptions = {}, eventData?: any) {\n    this.stop();\n\n    const tr = this.transform;\n    let zoomChanged = false;\n    let bearingChanged = false;\n    let pitchChanged = false;\n\n    if (options.zoom && tr.zoom !== +options.zoom) {\n      zoomChanged = true;\n      tr.zoom = +options.zoom;\n    }\n\n    if (options.center !== undefined) {\n      tr.center = LngLat.convert(options.center);\n    }\n\n    if (options.bearing && tr.bearing !== +options.bearing) {\n      bearingChanged = true;\n      tr.bearing = +options.bearing;\n    }\n\n    if (options.pitch && tr.pitch !== +options.pitch) {\n      pitchChanged = true;\n      tr.pitch = +options.pitch;\n    }\n\n    if (options.padding != null && !tr.isPaddingEqual(options.padding)) {\n      tr.padding = options.padding;\n    }\n\n    this.emit('movestart', new Event('movestart', eventData));\n    this.emit('move', new Event('move', eventData));\n\n    if (zoomChanged) {\n      this.emit('zoomstart', new Event('zoomstart', eventData));\n      this.emit('zoom', new Event('zoom', eventData));\n      this.emit('zoomend', new Event('zoomend', eventData));\n    }\n\n    if (bearingChanged) {\n      this.emit('rotatestart', new Event('rotatestart', eventData));\n      this.emit('rotate', new Event('rotate', eventData));\n      this.emit('rotateend', new Event('rotateend', eventData));\n    }\n\n    if (pitchChanged) {\n      this.emit('pitchstart', new Event('pitchstart', eventData));\n      this.emit('pitch', new Event('pitch', eventData));\n      this.emit('pitchend', new Event('pitchend', eventData));\n    }\n\n    return this.emit('moveend', new Event('moveend', eventData));\n  }\n\n  public easeTo(\n    options: ICameraOptions &\n      IAnimationOptions & { easeId?: string; noMoveStart?: boolean } = {},\n    eventData?: any,\n  ) {\n    options = merge(\n      {\n        offset: [0, 0],\n        duration: 500,\n        easing: defaultEasing,\n      },\n      options,\n    );\n\n    if (\n      options.animate === false ||\n      (!options.essential && prefersReducedMotion())\n    ) {\n      options.duration = 0;\n    }\n\n    const tr = this.transform;\n    const startZoom = this.getZoom();\n    const startBearing = this.getBearing();\n    const startPitch = this.getPitch();\n    const startPadding = this.getPadding();\n\n    const zoom = options.zoom ? +options.zoom : startZoom;\n    const bearing = options.bearing\n      ? this.normalizeBearing(options.bearing, startBearing)\n      : startBearing;\n    const pitch = options.pitch ? +options.pitch : startPitch;\n    const padding = options.padding ? options.padding : tr.padding;\n\n    const offsetAsPoint = Point.convert(options.offset);\n    let pointAtOffset = tr.centerPoint.add(offsetAsPoint);\n    const locationAtOffset = tr.pointLocation(pointAtOffset);\n    const center = LngLat.convert(options.center || locationAtOffset);\n    this.normalizeCenter(center);\n\n    const from = tr.project(locationAtOffset);\n    const delta = tr.project(center).sub(from);\n    const finalScale = tr.zoomScale(zoom - startZoom);\n\n    let around: LngLat;\n    let aroundPoint: Point;\n\n    if (options.around) {\n      around = LngLat.convert(options.around);\n      aroundPoint = tr.locationPoint(around);\n    }\n\n    const currently = {\n      moving: this.moving,\n      zooming: this.zooming,\n      rotating: this.rotating,\n      pitching: this.pitching,\n    };\n\n    this.zooming = this.zooming || zoom !== startZoom;\n    this.rotating = this.rotating || startBearing !== bearing;\n    this.pitching = this.pitching || pitch !== startPitch;\n    this.padding = !tr.isPaddingEqual(padding);\n\n    this.easeId = options.easeId;\n    this.prepareEase(eventData, options.noMoveStart, currently);\n\n    clearTimeout(this.easeEndTimeoutID);\n\n    this.ease(\n      (k) => {\n        if (this.zooming) {\n          tr.zoom = interpolate(startZoom, zoom, k);\n        }\n        if (this.rotating) {\n          tr.bearing = interpolate(startBearing, bearing, k);\n        }\n        if (this.pitching) {\n          tr.pitch = interpolate(startPitch, pitch, k);\n        }\n        if (this.padding) {\n          tr.interpolatePadding(startPadding, padding, k);\n          // When padding is being applied, Transform#centerPoint is changing continously,\n          // thus we need to recalculate offsetPoint every fra,e\n          pointAtOffset = tr.centerPoint.add(offsetAsPoint);\n        }\n\n        if (around) {\n          tr.setLocationAtPoint(around, aroundPoint);\n        } else {\n          const scale = tr.zoomScale(tr.zoom - startZoom);\n          const base =\n            zoom > startZoom\n              ? Math.min(2, finalScale)\n              : Math.max(0.5, finalScale);\n          const speedup = Math.pow(base, 1 - k);\n          const newCenter = tr.unproject(\n            from.add(delta.mult(k * speedup)).mult(scale),\n          );\n          tr.setLocationAtPoint(\n            tr.renderWorldCopies ? newCenter.wrap() : newCenter,\n            pointAtOffset,\n          );\n        }\n\n        this.fireMoveEvents(eventData);\n      },\n      (interruptingEaseId?: string) => {\n        this.afterEase(eventData, interruptingEaseId);\n      },\n      // @ts-ignore\n      options,\n    );\n\n    return this;\n  }\n  public flyTo(options: any = {}, eventData?: any) {\n    // Fall through to jumpTo if user has set prefers-reduced-motion\n    if (!options.essential && prefersReducedMotion()) {\n      const coercedOptions = pick(options, [\n        'center',\n        'zoom',\n        'bearing',\n        'pitch',\n        'around',\n      ]) as ICameraOptions;\n      return this.jumpTo(coercedOptions, eventData);\n    }\n\n    this.stop();\n\n    options = merge(\n      {\n        offset: [0, 0],\n        speed: 1.2,\n        curve: 1.42,\n        easing: defaultEasing,\n      },\n      options,\n    );\n    const tr = this.transform;\n    const startZoom = this.getZoom();\n    const startBearing = this.getBearing();\n    const startPitch = this.getPitch();\n    const startPadding = this.getPadding();\n\n    const zoom = options.zoom\n      ? clamp(+options.zoom, tr.minZoom, tr.maxZoom)\n      : startZoom;\n    const bearing = options.bearing\n      ? this.normalizeBearing(options.bearing, startBearing)\n      : startBearing;\n    const pitch = options.pitch ? +options.pitch : startPitch;\n    const padding = 'padding' in options ? options.padding : tr.padding;\n\n    const scale = tr.zoomScale(zoom - startZoom);\n    const offsetAsPoint = Point.convert(options.offset);\n    let pointAtOffset = tr.centerPoint.add(offsetAsPoint);\n    const locationAtOffset = tr.pointLocation(pointAtOffset);\n    const center = LngLat.convert(options.center || locationAtOffset);\n    this.normalizeCenter(center);\n\n    const from = tr.project(locationAtOffset);\n    const delta = tr.project(center).sub(from);\n\n    let rho = options.curve;\n\n    // w₀: Initial visible span, measured in pixels at the initial scale.\n    const w0 = Math.max(tr.width, tr.height);\n    // w₁: Final visible span, measured in pixels with respect to the initial scale.\n    const w1 = w0 / scale;\n    // Length of the flight path as projected onto the ground plane, measured in pixels from\n    // the world image origin at the initial scale.\n    const u1 = delta.mag();\n\n    if ('minZoom' in options) {\n      const minZoom = clamp(\n        Math.min(options.minZoom, startZoom, zoom),\n        tr.minZoom,\n        tr.maxZoom,\n      );\n      // w<sub>m</sub>: Maximum visible span, measured in pixels with respect to the initial\n      // scale.\n      const wMax = w0 / tr.zoomScale(minZoom - startZoom);\n      rho = Math.sqrt((wMax / u1) * 2);\n    }\n\n    // ρ²\n    const rho2 = rho * rho;\n\n    /**\n     * rᵢ: Returns the zoom-out factor at one end of the animation.\n     *\n     * @param i 0 for the ascent or 1 for the descent.\n     * @private\n     */\n    function r(i: number) {\n      const b =\n        (w1 * w1 - w0 * w0 + (i ? -1 : 1) * rho2 * rho2 * u1 * u1) /\n        (2 * (i ? w1 : w0) * rho2 * u1);\n      return Math.log(Math.sqrt(b * b + 1) - b);\n    }\n\n    function sinh(n: number) {\n      return (Math.exp(n) - Math.exp(-n)) / 2;\n    }\n    function cosh(n: number) {\n      return (Math.exp(n) + Math.exp(-n)) / 2;\n    }\n    function tanh(n: number) {\n      return sinh(n) / cosh(n);\n    }\n\n    // r₀: Zoom-out factor during ascent.\n    const r0 = r(0);\n\n    // w(s): Returns the visible span on the ground, measured in pixels with respect to the\n    // initial scale. Assumes an angular field of view of 2 arctan ½ ≈ 53°.\n    let w: (_: number) => number = (s) => {\n      return cosh(r0) / cosh(r0 + rho * s);\n    };\n\n    // u(s): Returns the distance along the flight path as projected onto the ground plane,\n    // measured in pixels from the world image origin at the initial scale.\n    let u: (_: number) => number = (s) => {\n      return (w0 * ((cosh(r0) * tanh(r0 + rho * s) - sinh(r0)) / rho2)) / u1;\n    };\n\n    // S: Total length of the flight path, measured in ρ-screenfuls.\n    let S = (r(1) - r0) / rho;\n\n    // When u₀ = u₁, the optimal path doesn’t require both ascent and descent.\n    if (Math.abs(u1) < 0.000001 || !isFinite(S)) {\n      // Perform a more or less instantaneous transition if the path is too short.\n      if (Math.abs(w0 - w1) < 0.000001) {\n        return this.easeTo(options, eventData);\n      }\n\n      const k = w1 < w0 ? -1 : 1;\n      S = Math.abs(Math.log(w1 / w0)) / rho;\n\n      u = () => {\n        return 0;\n      };\n      w = (s) => {\n        return Math.exp(k * rho * s);\n      };\n    }\n\n    if ('duration' in options) {\n      options.duration = +options.duration;\n    } else {\n      const V =\n        'screenSpeed' in options ? +options.screenSpeed / rho : +options.speed;\n      options.duration = (1000 * S) / V;\n    }\n\n    if (options.maxDuration && options.duration > options.maxDuration) {\n      options.duration = 0;\n    }\n\n    this.zooming = true;\n    this.rotating = startBearing !== bearing;\n    this.pitching = pitch !== startPitch;\n    this.padding = !tr.isPaddingEqual(padding);\n\n    this.prepareEase(eventData, false);\n\n    this.ease(\n      (k) => {\n        // s: The distance traveled along the flight path, measured in ρ-screenfuls.\n        const s = k * S;\n        // @ts-ignore\n        const easeScale = 1 / w(s);\n        tr.zoom = k === 1 ? zoom : startZoom + tr.scaleZoom(easeScale);\n\n        if (this.rotating) {\n          tr.bearing = interpolate(startBearing, bearing, k);\n        }\n        if (this.pitching) {\n          tr.pitch = interpolate(startPitch, pitch, k);\n        }\n        if (this.padding) {\n          tr.interpolatePadding(startPadding, padding, k);\n          // When padding is being applied, Transform#centerPoint is changing continously,\n          // thus we need to recalculate offsetPoint every frame\n          pointAtOffset = tr.centerPoint.add(offsetAsPoint);\n        }\n\n        const newCenter =\n          k === 1\n            ? center\n            : tr.unproject(from.add(delta.mult(u(s))).mult(easeScale));\n        tr.setLocationAtPoint(\n          tr.renderWorldCopies ? newCenter.wrap() : newCenter,\n          pointAtOffset,\n        );\n\n        this.fireMoveEvents(eventData);\n      },\n      () => this.afterEase(eventData),\n      options,\n    );\n\n    return this;\n  }\n  public fitScreenCoordinates(\n    p0: PointLike,\n    p1: PointLike,\n    bearing: number,\n    options?: IAnimationOptions & ICameraOptions,\n    eventData?: any,\n  ) {\n    return this.fitInternal(\n      // @ts-ignore\n      this.cameraForBoxAndBearing(\n        this.transform.pointLocation(Point.convert(p0)),\n        this.transform.pointLocation(Point.convert(p1)),\n        bearing,\n        // @ts-ignore\n        options,\n      ),\n      options,\n      eventData,\n    );\n  }\n  public stop(allowGestures?: boolean, easeId?: string) {\n    if (this.easeFrameId) {\n      this.cancelRenderFrame(this.easeFrameId);\n      // @ts-ignore\n      delete this.easeFrameId;\n      // @ts-ignore\n      delete this.onEaseFrame;\n    }\n\n    if (this.onEaseEnd) {\n      // The _onEaseEnd function might emit events which trigger new\n      // animation, which sets a new _onEaseEnd. Ensure we don't delete\n      // it unintentionally.\n      const onEaseEnd = this.onEaseEnd;\n      // @ts-ignore\n      delete this.onEaseEnd;\n      onEaseEnd.call(this, easeId);\n    }\n    // if (!allowGestures) {\n    //     const handlers = (this: any).handlers;\n    //     if (handlers) handlers.stop();\n    // }\n    return this;\n  }\n  public renderFrameCallback = () => {\n    const t = Math.min((now() - this.easeStart) / this.easeOptions.duration, 1);\n    this.onEaseFrame(this.easeOptions.easing(t));\n    if (t < 1) {\n      // this.easeFrameId = window.requestAnimationFrame(this.renderFrameCallback);\n      this.easeFrameId = this.requestRenderFrame(this.renderFrameCallback);\n    } else {\n      this.stop();\n    }\n  };\n  private normalizeBearing(bearing: number, currentBearing: number) {\n    bearing = wrap(bearing, -180, 180);\n    const diff = Math.abs(bearing - currentBearing);\n    if (Math.abs(bearing - 360 - currentBearing) < diff) {\n      bearing -= 360;\n    }\n    if (Math.abs(bearing + 360 - currentBearing) < diff) {\n      bearing += 360;\n    }\n    return bearing;\n  }\n\n  private normalizeCenter(center: LngLat) {\n    const tr = this.transform;\n    if (!tr.renderWorldCopies || tr.lngRange) {\n      return;\n    }\n\n    const delta = center.lng - tr.center.lng;\n    center.lng += delta > 180 ? -360 : delta < -180 ? 360 : 0;\n  }\n\n  private fireMoveEvents(eventData?: any) {\n    this.emit('move', new Event('move', eventData));\n    if (this.zooming) {\n      this.emit('zoom', new Event('zoom', eventData));\n    }\n    if (this.rotating) {\n      this.emit('rotate', new Event('rotate', eventData));\n    }\n    if (this.pitching) {\n      this.emit('rotate', new Event('pitch', eventData));\n    }\n  }\n  private prepareEase(\n    eventData: object | undefined,\n    noMoveStart: boolean = false,\n    currently: { [key: string]: boolean } = {},\n  ) {\n    this.moving = true;\n\n    if (!noMoveStart && !currently.moving) {\n      this.emit('movestart', new Event('movestart', eventData));\n    }\n    if (this.zooming && !currently.zooming) {\n      this.emit('zoomstart', new Event('zoomstart', eventData));\n    }\n    if (this.rotating && !currently.rotating) {\n      this.emit('rotatestart', new Event('rotatestart', eventData));\n    }\n    if (this.pitching && !currently.pitching) {\n      this.emit('pitchstart', new Event('pitchstart', eventData));\n    }\n  }\n\n  private afterEase(eventData: object | undefined, easeId?: string) {\n    // if this easing is being stopped to start another easing with\n    // the same id then don't fire any events to avoid extra start/stop events\n    if (this.easeId && easeId && this.easeId === easeId) {\n      return;\n    }\n    delete this.easeId;\n\n    const wasZooming = this.zooming;\n    const wasRotating = this.rotating;\n    const wasPitching = this.pitching;\n    this.moving = false;\n    this.zooming = false;\n    this.rotating = false;\n    this.pitching = false;\n    this.padding = false;\n\n    if (wasZooming) {\n      this.emit('zoomend', new Event('zoomend', eventData));\n    }\n    if (wasRotating) {\n      this.emit('rotateend', new Event('rotateend', eventData));\n    }\n    if (wasPitching) {\n      this.emit('pitchend', new Event('pitchend', eventData));\n    }\n    this.emit('moveend', new Event('moveend', eventData));\n  }\n\n  private ease(\n    frame: (_: number) => void,\n    finish: () => void,\n    options: {\n      animate: boolean;\n      duration: number;\n      easing: (_: number) => number;\n    },\n  ) {\n    if (options.animate === false || options.duration === 0) {\n      frame(1);\n      finish();\n    } else {\n      this.easeStart = now();\n      this.easeOptions = options;\n      this.onEaseFrame = frame;\n      this.onEaseEnd = finish;\n      this.easeFrameId = this.requestRenderFrame(this.renderFrameCallback);\n    }\n  }\n\n  private cameraForBoxAndBearing(\n    p0: LngLatLike,\n    p1: LngLatLike,\n    bearing: number,\n    options?: ICameraOptions & {\n      offset: [number, number];\n      maxZoom: number;\n      padding: IPaddingOptions;\n    },\n  ): void | (ICameraOptions & IAnimationOptions) {\n    const defaultPadding = {\n      top: 0,\n      bottom: 0,\n      right: 0,\n      left: 0,\n    };\n    options = merge(\n      {\n        padding: defaultPadding,\n        offset: [0, 0],\n        maxZoom: this.transform.maxZoom,\n      },\n      options,\n    );\n\n    if (typeof options.padding === 'number') {\n      const p = options.padding;\n      options.padding = {\n        top: p,\n        bottom: p,\n        right: p,\n        left: p,\n      };\n    }\n\n    options.padding = merge(defaultPadding, options.padding);\n    const tr = this.transform;\n    const edgePadding = tr.padding as IPaddingOptions;\n\n    // We want to calculate the upper right and lower left of the box defined by p0 and p1\n    // in a coordinate system rotate to match the destination bearing.\n    const p0world = tr.project(LngLat.convert(p0));\n    const p1world = tr.project(LngLat.convert(p1));\n    const p0rotated = p0world.rotate((-bearing * Math.PI) / 180);\n    const p1rotated = p1world.rotate((-bearing * Math.PI) / 180);\n\n    const upperRight = new Point(\n      Math.max(p0rotated.x, p1rotated.x),\n      Math.max(p0rotated.y, p1rotated.y),\n    );\n    const lowerLeft = new Point(\n      Math.min(p0rotated.x, p1rotated.x),\n      Math.min(p0rotated.y, p1rotated.y),\n    );\n\n    // Calculate zoom: consider the original bbox and padding.\n    const size = upperRight.sub(lowerLeft);\n    const scaleX =\n      (tr.width -\n        // @ts-ignore\n        (edgePadding.left +\n          // @ts-ignore\n          edgePadding.right +\n          // @ts-ignore\n          options.padding.left +\n          // @ts-ignore\n          options.padding.right)) /\n      size.x;\n    const scaleY =\n      (tr.height -\n        // @ts-ignore\n        (edgePadding.top +\n          // @ts-ignore\n          edgePadding.bottom +\n          // @ts-ignore\n          options.padding.top +\n          // @ts-ignore\n          options.padding.bottom)) /\n      size.y;\n\n    if (scaleY < 0 || scaleX < 0) {\n      return;\n    }\n\n    const zoom = Math.min(\n      tr.scaleZoom(tr.scale * Math.min(scaleX, scaleY)),\n      options.maxZoom,\n    );\n\n    // Calculate center: apply the zoom, the configured offset, as well as offset that exists as a result of padding.\n    const offset = Point.convert(options.offset);\n    // @ts-ignore\n    const paddingOffsetX = (options.padding.left - options.padding.right) / 2;\n    // @ts-ignore\n    const paddingOffsetY = (options.padding.top - options.padding.bottom) / 2;\n    const offsetAtInitialZoom = new Point(\n      offset.x + paddingOffsetX,\n      offset.y + paddingOffsetY,\n    );\n    const offsetAtFinalZoom = offsetAtInitialZoom.mult(\n      tr.scale / tr.zoomScale(zoom),\n    );\n\n    const center = tr.unproject(\n      p0world\n        .add(p1world)\n        .div(2)\n        .sub(offsetAtFinalZoom),\n    );\n\n    return {\n      center,\n      zoom,\n      bearing,\n    };\n  }\n\n  private fitInternal(\n    calculatedOptions?: ICameraOptions & IAnimationOptions,\n    options?: IAnimationOptions & ICameraOptions,\n    eventData?: any,\n  ) {\n    // cameraForBounds warns + returns undefined if unable to fit:\n    if (!calculatedOptions) {\n      return this;\n    }\n\n    options = merge(calculatedOptions, options);\n    // Explictly remove the padding field because, calculatedOptions already accounts for padding by setting zoom and center accordingly.\n    delete options.padding;\n    // @ts-ignore\n    return options.linear\n      ? this.easeTo(options, eventData)\n      : this.flyTo(options, eventData);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}