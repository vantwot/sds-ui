{"ast":null,"code":"import { Dom, ObjectExt, StringExt } from '../util';\nimport { NodeTool, EdgeTool } from '../registry/tool';\nimport { View } from './view';\nimport { CellView } from './cell';\nimport { Markup } from './markup';\nexport class ToolsView extends View {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.svgContainer = this.createContainer(true, options);\n    this.htmlContainer = this.createContainer(false, options);\n    this.config(options);\n  }\n\n  get name() {\n    return this.options.name;\n  }\n\n  get graph() {\n    return this.cellView.graph;\n  }\n\n  get cell() {\n    return this.cellView.cell;\n  }\n\n  get [Symbol.toStringTag]() {\n    return ToolsView.toStringTag;\n  }\n\n  createContainer(svg, options) {\n    const container = svg ? View.createElement('g', true) : View.createElement('div', false);\n    Dom.addClass(container, this.prefixClassName('cell-tools'));\n\n    if (options.className) {\n      Dom.addClass(container, options.className);\n    }\n\n    return container;\n  }\n\n  config(options) {\n    this.options = Object.assign(Object.assign({}, this.options), options);\n\n    if (!CellView.isCellView(options.view) || options.view === this.cellView) {\n      return this;\n    }\n\n    this.cellView = options.view;\n\n    if (this.cell.isEdge()) {\n      Dom.addClass(this.svgContainer, this.prefixClassName('edge-tools'));\n      Dom.addClass(this.htmlContainer, this.prefixClassName('edge-tools'));\n    } else if (this.cell.isNode()) {\n      Dom.addClass(this.svgContainer, this.prefixClassName('node-tools'));\n      Dom.addClass(this.htmlContainer, this.prefixClassName('node-tools'));\n    }\n\n    this.svgContainer.setAttribute('data-cell-id', this.cell.id);\n    this.htmlContainer.setAttribute('data-cell-id', this.cell.id);\n\n    if (this.name) {\n      this.svgContainer.setAttribute('data-tools-name', this.name);\n      this.htmlContainer.setAttribute('data-tools-name', this.name);\n    }\n\n    const tools = this.options.items;\n\n    if (!Array.isArray(tools)) {\n      return this;\n    }\n\n    this.tools = [];\n    const normalizedTools = [];\n    tools.forEach(meta => {\n      if (ToolsView.ToolItem.isToolItem(meta)) {\n        if (meta.name === 'vertices') {\n          normalizedTools.unshift(meta);\n        } else {\n          normalizedTools.push(meta);\n        }\n      } else {\n        const name = typeof meta === 'object' ? meta.name : meta;\n\n        if (name === 'vertices') {\n          normalizedTools.unshift(meta);\n        } else {\n          normalizedTools.push(meta);\n        }\n      }\n    });\n\n    for (let i = 0; i < normalizedTools.length; i += 1) {\n      const meta = normalizedTools[i];\n      let tool;\n\n      if (ToolsView.ToolItem.isToolItem(meta)) {\n        tool = meta;\n      } else {\n        const name = typeof meta === 'object' ? meta.name : meta;\n        const args = typeof meta === 'object' ? meta.args || {} : {};\n\n        if (name) {\n          if (this.cell.isNode()) {\n            const ctor = NodeTool.registry.get(name);\n\n            if (ctor) {\n              tool = new ctor(args); // eslint-disable-line\n            } else {\n              return NodeTool.registry.onNotFound(name);\n            }\n          } else if (this.cell.isEdge()) {\n            const ctor = EdgeTool.registry.get(name);\n\n            if (ctor) {\n              tool = new ctor(args); // eslint-disable-line\n            } else {\n              return EdgeTool.registry.onNotFound(name);\n            }\n          }\n        }\n      }\n\n      if (tool) {\n        tool.config(this.cellView, this);\n        tool.render();\n        const container = tool.options.isSVGElement !== false ? this.svgContainer : this.htmlContainer;\n        container.appendChild(tool.container);\n        this.tools.push(tool);\n      }\n    }\n\n    return this;\n  }\n\n  update() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const tools = this.tools;\n\n    if (tools) {\n      tools.forEach(tool => {\n        if (options.toolId !== tool.cid && tool.isVisible()) {\n          tool.update();\n        }\n      });\n    }\n\n    return this;\n  }\n\n  focus(focusedTool) {\n    const tools = this.tools;\n\n    if (tools) {\n      tools.forEach(tool => {\n        if (focusedTool === tool) {\n          tool.show();\n        } else {\n          tool.hide();\n        }\n      });\n    }\n\n    return this;\n  }\n\n  blur(blurredTool) {\n    const tools = this.tools;\n\n    if (tools) {\n      tools.forEach(tool => {\n        if (tool !== blurredTool && !tool.isVisible()) {\n          tool.show();\n          tool.update();\n        }\n      });\n    }\n\n    return this;\n  }\n\n  hide() {\n    return this.focus(null);\n  }\n\n  show() {\n    return this.blur(null);\n  }\n\n  remove() {\n    const tools = this.tools;\n\n    if (tools) {\n      tools.forEach(tool => tool.remove());\n      this.tools = null;\n    }\n\n    Dom.remove(this.svgContainer);\n    Dom.remove(this.htmlContainer);\n    return super.remove();\n  }\n\n  mount() {\n    const tools = this.tools;\n    const cellView = this.cellView;\n\n    if (cellView && tools) {\n      const hasSVG = tools.some(tool => tool.options.isSVGElement !== false);\n      const hasHTML = tools.some(tool => tool.options.isSVGElement === false);\n\n      if (hasSVG) {\n        const parent = this.options.local ? cellView.container : cellView.graph.view.decorator;\n        parent.appendChild(this.svgContainer);\n      }\n\n      if (hasHTML) {\n        this.graph.container.appendChild(this.htmlContainer);\n      }\n    }\n\n    return this;\n  }\n\n}\n\n(function (ToolsView) {\n  ToolsView.toStringTag = `X6.${ToolsView.name}`;\n\n  function isToolsView(instance) {\n    if (instance == null) {\n      return false;\n    }\n\n    if (instance instanceof ToolsView) {\n      return true;\n    }\n\n    const tag = instance[Symbol.toStringTag];\n    const view = instance;\n\n    if ((tag == null || tag === ToolsView.toStringTag) && view.graph != null && view.cell != null && typeof view.config === 'function' && typeof view.update === 'function' && typeof view.focus === 'function' && typeof view.blur === 'function' && typeof view.show === 'function' && typeof view.hide === 'function') {\n      return true;\n    }\n\n    return false;\n  }\n\n  ToolsView.isToolsView = isToolsView;\n})(ToolsView || (ToolsView = {}));\n\n(function (ToolsView) {\n  class ToolItem extends View {\n    constructor() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      super();\n      this.options = this.getOptions(options);\n      this.container = View.createElement(this.options.tagName || 'g', this.options.isSVGElement !== false);\n      Dom.addClass(this.container, this.prefixClassName('cell-tool'));\n\n      if (typeof this.options.className === 'string') {\n        Dom.addClass(this.container, this.options.className);\n      }\n\n      this.init();\n    }\n\n    static getDefaults() {\n      return this.defaults;\n    }\n\n    static config(options) {\n      this.defaults = this.getOptions(options);\n    }\n\n    static getOptions(options) {\n      return ObjectExt.merge(ObjectExt.cloneDeep(this.getDefaults()), options);\n    }\n\n    get graph() {\n      return this.cellView.graph;\n    }\n\n    get cell() {\n      return this.cellView.cell;\n    }\n\n    get name() {\n      return this.options.name;\n    }\n\n    get [Symbol.toStringTag]() {\n      return ToolItem.toStringTag;\n    }\n\n    init() {}\n\n    getOptions(options) {\n      const ctor = this.constructor;\n      return ctor.getOptions(options);\n    }\n\n    delegateEvents() {\n      if (this.options.events) {\n        super.delegateEvents(this.options.events);\n      }\n\n      return this;\n    }\n\n    config(view, toolsView) {\n      this.cellView = view;\n      this.parent = toolsView;\n      this.stamp(this.container);\n\n      if (this.cell.isEdge()) {\n        Dom.addClass(this.container, this.prefixClassName('edge-tool'));\n      } else if (this.cell.isNode()) {\n        Dom.addClass(this.container, this.prefixClassName('node-tool'));\n      }\n\n      if (this.name) {\n        this.container.setAttribute('data-tool-name', this.name);\n      }\n\n      this.delegateEvents();\n      return this;\n    }\n\n    render() {\n      this.empty();\n      const markup = this.options.markup;\n\n      if (markup) {\n        const meta = Markup.isStringMarkup(markup) ? Markup.parseStringMarkup(markup) : Markup.parseJSONMarkup(markup);\n        this.container.appendChild(meta.fragment);\n        this.childNodes = meta.selectors;\n      }\n\n      this.onRender();\n      return this;\n    }\n\n    onRender() {}\n\n    update() {\n      return this;\n    }\n\n    stamp() {\n      let elem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.container;\n\n      if (elem) {\n        elem.setAttribute('data-cell-id', this.cellView.cell.id);\n      }\n    }\n\n    show() {\n      this.container.style.display = '';\n      this.visible = true;\n      return this;\n    }\n\n    hide() {\n      this.container.style.display = 'none';\n      this.visible = false;\n      return this;\n    }\n\n    isVisible() {\n      return this.visible;\n    }\n\n    focus() {\n      const opacity = this.options.focusOpacity;\n\n      if (opacity != null && Number.isFinite(opacity)) {\n        this.container.style.opacity = `${opacity}`;\n      }\n\n      this.parent.focus(this);\n      return this;\n    }\n\n    blur() {\n      this.container.style.opacity = '';\n      this.parent.blur(this);\n      return this;\n    }\n\n    guard(evt) {\n      if (this.graph == null || this.cellView == null) {\n        return true;\n      }\n\n      return this.graph.view.guard(evt, this.cellView);\n    }\n\n  } // #region static\n\n\n  ToolItem.defaults = {\n    isSVGElement: true,\n    tagName: 'g'\n  };\n  ToolsView.ToolItem = ToolItem;\n\n  (function (ToolItem) {\n    let counter = 0;\n\n    function getClassName(name) {\n      if (name) {\n        return StringExt.pascalCase(name);\n      }\n\n      counter += 1;\n      return `CustomTool${counter}`;\n    }\n\n    function define(options) {\n      const tool = ObjectExt.createClass(getClassName(options.name), this);\n      tool.config(options);\n      return tool;\n    }\n\n    ToolItem.define = define;\n  })(ToolItem = ToolsView.ToolItem || (ToolsView.ToolItem = {}));\n\n  (function (ToolItem) {\n    ToolItem.toStringTag = `X6.${ToolItem.name}`;\n\n    function isToolItem(instance) {\n      if (instance == null) {\n        return false;\n      }\n\n      if (instance instanceof ToolItem) {\n        return true;\n      }\n\n      const tag = instance[Symbol.toStringTag];\n      const view = instance;\n\n      if ((tag == null || tag === ToolItem.toStringTag) && view.graph != null && view.cell != null && typeof view.config === 'function' && typeof view.update === 'function' && typeof view.focus === 'function' && typeof view.blur === 'function' && typeof view.show === 'function' && typeof view.hide === 'function' && typeof view.isVisible === 'function') {\n        return true;\n      }\n\n      return false;\n    }\n\n    ToolItem.isToolItem = isToolItem;\n  })(ToolItem = ToolsView.ToolItem || (ToolsView.ToolItem = {}));\n})(ToolsView || (ToolsView = {}));","map":{"version":3,"sources":["../../src/view/tool.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Dom, ObjectExt, StringExt } from '../util';\nimport { NodeTool, EdgeTool } from '../registry/tool';\nimport { View } from './view';\nimport { CellView } from './cell';\nimport { Markup } from './markup';\nexport class ToolsView extends View {\n    constructor(options = {}) {\n        super();\n        this.svgContainer = this.createContainer(true, options);\n        this.htmlContainer = this.createContainer(false, options);\n        this.config(options);\n    }\n    get name() {\n        return this.options.name;\n    }\n    get graph() {\n        return this.cellView.graph;\n    }\n    get cell() {\n        return this.cellView.cell;\n    }\n    get [Symbol.toStringTag]() {\n        return ToolsView.toStringTag;\n    }\n    createContainer(svg, options) {\n        const container = svg\n            ? View.createElement('g', true)\n            : View.createElement('div', false);\n        Dom.addClass(container, this.prefixClassName('cell-tools'));\n        if (options.className) {\n            Dom.addClass(container, options.className);\n        }\n        return container;\n    }\n    config(options) {\n        this.options = Object.assign(Object.assign({}, this.options), options);\n        if (!CellView.isCellView(options.view) || options.view === this.cellView) {\n            return this;\n        }\n        this.cellView = options.view;\n        if (this.cell.isEdge()) {\n            Dom.addClass(this.svgContainer, this.prefixClassName('edge-tools'));\n            Dom.addClass(this.htmlContainer, this.prefixClassName('edge-tools'));\n        }\n        else if (this.cell.isNode()) {\n            Dom.addClass(this.svgContainer, this.prefixClassName('node-tools'));\n            Dom.addClass(this.htmlContainer, this.prefixClassName('node-tools'));\n        }\n        this.svgContainer.setAttribute('data-cell-id', this.cell.id);\n        this.htmlContainer.setAttribute('data-cell-id', this.cell.id);\n        if (this.name) {\n            this.svgContainer.setAttribute('data-tools-name', this.name);\n            this.htmlContainer.setAttribute('data-tools-name', this.name);\n        }\n        const tools = this.options.items;\n        if (!Array.isArray(tools)) {\n            return this;\n        }\n        this.tools = [];\n        const normalizedTools = [];\n        tools.forEach((meta) => {\n            if (ToolsView.ToolItem.isToolItem(meta)) {\n                if (meta.name === 'vertices') {\n                    normalizedTools.unshift(meta);\n                }\n                else {\n                    normalizedTools.push(meta);\n                }\n            }\n            else {\n                const name = typeof meta === 'object' ? meta.name : meta;\n                if (name === 'vertices') {\n                    normalizedTools.unshift(meta);\n                }\n                else {\n                    normalizedTools.push(meta);\n                }\n            }\n        });\n        for (let i = 0; i < normalizedTools.length; i += 1) {\n            const meta = normalizedTools[i];\n            let tool;\n            if (ToolsView.ToolItem.isToolItem(meta)) {\n                tool = meta;\n            }\n            else {\n                const name = typeof meta === 'object' ? meta.name : meta;\n                const args = typeof meta === 'object' ? meta.args || {} : {};\n                if (name) {\n                    if (this.cell.isNode()) {\n                        const ctor = NodeTool.registry.get(name);\n                        if (ctor) {\n                            tool = new ctor(args); // eslint-disable-line\n                        }\n                        else {\n                            return NodeTool.registry.onNotFound(name);\n                        }\n                    }\n                    else if (this.cell.isEdge()) {\n                        const ctor = EdgeTool.registry.get(name);\n                        if (ctor) {\n                            tool = new ctor(args); // eslint-disable-line\n                        }\n                        else {\n                            return EdgeTool.registry.onNotFound(name);\n                        }\n                    }\n                }\n            }\n            if (tool) {\n                tool.config(this.cellView, this);\n                tool.render();\n                const container = tool.options.isSVGElement !== false\n                    ? this.svgContainer\n                    : this.htmlContainer;\n                container.appendChild(tool.container);\n                this.tools.push(tool);\n            }\n        }\n        return this;\n    }\n    update(options = {}) {\n        const tools = this.tools;\n        if (tools) {\n            tools.forEach((tool) => {\n                if (options.toolId !== tool.cid && tool.isVisible()) {\n                    tool.update();\n                }\n            });\n        }\n        return this;\n    }\n    focus(focusedTool) {\n        const tools = this.tools;\n        if (tools) {\n            tools.forEach((tool) => {\n                if (focusedTool === tool) {\n                    tool.show();\n                }\n                else {\n                    tool.hide();\n                }\n            });\n        }\n        return this;\n    }\n    blur(blurredTool) {\n        const tools = this.tools;\n        if (tools) {\n            tools.forEach((tool) => {\n                if (tool !== blurredTool && !tool.isVisible()) {\n                    tool.show();\n                    tool.update();\n                }\n            });\n        }\n        return this;\n    }\n    hide() {\n        return this.focus(null);\n    }\n    show() {\n        return this.blur(null);\n    }\n    remove() {\n        const tools = this.tools;\n        if (tools) {\n            tools.forEach((tool) => tool.remove());\n            this.tools = null;\n        }\n        Dom.remove(this.svgContainer);\n        Dom.remove(this.htmlContainer);\n        return super.remove();\n    }\n    mount() {\n        const tools = this.tools;\n        const cellView = this.cellView;\n        if (cellView && tools) {\n            const hasSVG = tools.some((tool) => tool.options.isSVGElement !== false);\n            const hasHTML = tools.some((tool) => tool.options.isSVGElement === false);\n            if (hasSVG) {\n                const parent = this.options.local\n                    ? cellView.container\n                    : cellView.graph.view.decorator;\n                parent.appendChild(this.svgContainer);\n            }\n            if (hasHTML) {\n                this.graph.container.appendChild(this.htmlContainer);\n            }\n        }\n        return this;\n    }\n}\n(function (ToolsView) {\n    ToolsView.toStringTag = `X6.${ToolsView.name}`;\n    function isToolsView(instance) {\n        if (instance == null) {\n            return false;\n        }\n        if (instance instanceof ToolsView) {\n            return true;\n        }\n        const tag = instance[Symbol.toStringTag];\n        const view = instance;\n        if ((tag == null || tag === ToolsView.toStringTag) &&\n            view.graph != null &&\n            view.cell != null &&\n            typeof view.config === 'function' &&\n            typeof view.update === 'function' &&\n            typeof view.focus === 'function' &&\n            typeof view.blur === 'function' &&\n            typeof view.show === 'function' &&\n            typeof view.hide === 'function') {\n            return true;\n        }\n        return false;\n    }\n    ToolsView.isToolsView = isToolsView;\n})(ToolsView || (ToolsView = {}));\n(function (ToolsView) {\n    class ToolItem extends View {\n        constructor(options = {}) {\n            super();\n            this.options = this.getOptions(options);\n            this.container = View.createElement(this.options.tagName || 'g', this.options.isSVGElement !== false);\n            Dom.addClass(this.container, this.prefixClassName('cell-tool'));\n            if (typeof this.options.className === 'string') {\n                Dom.addClass(this.container, this.options.className);\n            }\n            this.init();\n        }\n        static getDefaults() {\n            return this.defaults;\n        }\n        static config(options) {\n            this.defaults = this.getOptions(options);\n        }\n        static getOptions(options) {\n            return ObjectExt.merge(ObjectExt.cloneDeep(this.getDefaults()), options);\n        }\n        get graph() {\n            return this.cellView.graph;\n        }\n        get cell() {\n            return this.cellView.cell;\n        }\n        get name() {\n            return this.options.name;\n        }\n        get [Symbol.toStringTag]() {\n            return ToolItem.toStringTag;\n        }\n        init() { }\n        getOptions(options) {\n            const ctor = this.constructor;\n            return ctor.getOptions(options);\n        }\n        delegateEvents() {\n            if (this.options.events) {\n                super.delegateEvents(this.options.events);\n            }\n            return this;\n        }\n        config(view, toolsView) {\n            this.cellView = view;\n            this.parent = toolsView;\n            this.stamp(this.container);\n            if (this.cell.isEdge()) {\n                Dom.addClass(this.container, this.prefixClassName('edge-tool'));\n            }\n            else if (this.cell.isNode()) {\n                Dom.addClass(this.container, this.prefixClassName('node-tool'));\n            }\n            if (this.name) {\n                this.container.setAttribute('data-tool-name', this.name);\n            }\n            this.delegateEvents();\n            return this;\n        }\n        render() {\n            this.empty();\n            const markup = this.options.markup;\n            if (markup) {\n                const meta = Markup.isStringMarkup(markup)\n                    ? Markup.parseStringMarkup(markup)\n                    : Markup.parseJSONMarkup(markup);\n                this.container.appendChild(meta.fragment);\n                this.childNodes = meta.selectors;\n            }\n            this.onRender();\n            return this;\n        }\n        onRender() { }\n        update() {\n            return this;\n        }\n        stamp(elem = this.container) {\n            if (elem) {\n                elem.setAttribute('data-cell-id', this.cellView.cell.id);\n            }\n        }\n        show() {\n            this.container.style.display = '';\n            this.visible = true;\n            return this;\n        }\n        hide() {\n            this.container.style.display = 'none';\n            this.visible = false;\n            return this;\n        }\n        isVisible() {\n            return this.visible;\n        }\n        focus() {\n            const opacity = this.options.focusOpacity;\n            if (opacity != null && Number.isFinite(opacity)) {\n                this.container.style.opacity = `${opacity}`;\n            }\n            this.parent.focus(this);\n            return this;\n        }\n        blur() {\n            this.container.style.opacity = '';\n            this.parent.blur(this);\n            return this;\n        }\n        guard(evt) {\n            if (this.graph == null || this.cellView == null) {\n                return true;\n            }\n            return this.graph.view.guard(evt, this.cellView);\n        }\n    }\n    // #region static\n    ToolItem.defaults = {\n        isSVGElement: true,\n        tagName: 'g',\n    };\n    ToolsView.ToolItem = ToolItem;\n    (function (ToolItem) {\n        let counter = 0;\n        function getClassName(name) {\n            if (name) {\n                return StringExt.pascalCase(name);\n            }\n            counter += 1;\n            return `CustomTool${counter}`;\n        }\n        function define(options) {\n            const tool = ObjectExt.createClass(getClassName(options.name), this);\n            tool.config(options);\n            return tool;\n        }\n        ToolItem.define = define;\n    })(ToolItem = ToolsView.ToolItem || (ToolsView.ToolItem = {}));\n    (function (ToolItem) {\n        ToolItem.toStringTag = `X6.${ToolItem.name}`;\n        function isToolItem(instance) {\n            if (instance == null) {\n                return false;\n            }\n            if (instance instanceof ToolItem) {\n                return true;\n            }\n            const tag = instance[Symbol.toStringTag];\n            const view = instance;\n            if ((tag == null || tag === ToolItem.toStringTag) &&\n                view.graph != null &&\n                view.cell != null &&\n                typeof view.config === 'function' &&\n                typeof view.update === 'function' &&\n                typeof view.focus === 'function' &&\n                typeof view.blur === 'function' &&\n                typeof view.show === 'function' &&\n                typeof view.hide === 'function' &&\n                typeof view.isVisible === 'function') {\n                return true;\n            }\n            return false;\n        }\n        ToolItem.isToolItem = isToolItem;\n    })(ToolItem = ToolsView.ToolItem || (ToolsView.ToolItem = {}));\n})(ToolsView || (ToolsView = {}));\n//# sourceMappingURL=tool.js.map"]},"metadata":{},"sourceType":"module"}