{"ast":null,"code":"import React from 'react';\nimport { PlusSquareOutlined, MinusSquareOutlined } from '@ant-design/icons';\nimport { useXFlowApp, XFlowGroupCommands } from '@antv/xflow-core';\nimport './group.less';\nexport var GroupNode = function GroupNode(props) {\n  var cell = props.cell,\n      _props$data = props.data,\n      label = _props$data.label,\n      stroke = _props$data.stroke,\n      fill = _props$data.fill,\n      fontSize = _props$data.fontSize,\n      fontFill = _props$data.fontFill,\n      _props$data$width = _props$data.width,\n      width = _props$data$width === void 0 ? 200 : _props$data$width,\n      _props$data$isCollaps = _props$data.isCollapsed,\n      isCollapsed = _props$data$isCollaps === void 0 ? false : _props$data$isCollaps;\n  var app = useXFlowApp();\n\n  var onExpand = function onExpand() {\n    app.executeCommand(XFlowGroupCommands.COLLAPSE_GROUP.id, {\n      nodeId: cell.id,\n      isCollapsed: false,\n      collapsedSize: {\n        width: width,\n        height: 40\n      }\n    });\n  };\n\n  var onCollapse = function onCollapse() {\n    app.executeCommand(XFlowGroupCommands.COLLAPSE_GROUP.id, {\n      nodeId: cell.id,\n      isCollapsed: true,\n      collapsedSize: {\n        width: width,\n        height: 40\n      },\n      gap: 3\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"xflow-group-node\",\n    style: {\n      borderColor: stroke,\n      backgroundColor: fill,\n      fontSize: fontSize,\n      color: fontFill\n    }\n  }, React.createElement(\"div\", {\n    className: \"xflow-group-header\"\n  }, React.createElement(\"div\", {\n    className: \"header-left\"\n  }, label), React.createElement(\"div\", {\n    className: \"header-right\"\n  }, isCollapsed && React.createElement(PlusSquareOutlined, {\n    onClick: onExpand\n  }), !isCollapsed && React.createElement(MinusSquareOutlined, {\n    onClick: onCollapse\n  }))));\n};","map":{"version":3,"sources":["../../../src/flowchart-node-panel/group-panel/group.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,kBAAT,EAA6B,mBAA7B,QAAwD,mBAAxD;AAEA,SAAS,WAAT,EAAsB,kBAAtB,QAAgD,kBAAhD;AACA,OAAO,cAAP;AAEA,OAAO,IAAM,SAAS,GAAwB,SAAjC,SAAiC,CAAA,KAAK,EAAG;AACpD,MACE,IADF,GAGI,KAHJ,CACE,IADF;AAAA,oBAGI,KAHJ,CAEE,IAFF;AAAA,MAEU,KAFV,eAEU,KAFV;AAAA,MAEiB,MAFjB,eAEiB,MAFjB;AAAA,MAEyB,IAFzB,eAEyB,IAFzB;AAAA,MAE+B,QAF/B,eAE+B,QAF/B;AAAA,MAEyC,QAFzC,eAEyC,QAFzC;AAAA,sCAEmD,KAFnD;AAAA,MAEmD,KAFnD,kCAE2D,GAF3D;AAAA,0CAEgE,WAFhE;AAAA,MAEgE,WAFhE,sCAE8E,KAF9E;AAIA,MAAM,GAAG,GAAG,WAAW,EAAvB;;AACA,MAAM,QAAQ,GAAG,SAAX,QAAW,GAAK;AACpB,IAAA,GAAG,CAAC,cAAJ,CAAmB,kBAAkB,CAAC,cAAnB,CAAkC,EAArD,EAAyD;AACvD,MAAA,MAAM,EAAE,IAAI,CAAC,EAD0C;AAEvD,MAAA,WAAW,EAAE,KAF0C;AAGvD,MAAA,aAAa,EAAE;AAAE,QAAA,KAAK,EAAL,KAAF;AAAS,QAAA,MAAM,EAAE;AAAjB;AAHwC,KAAzD;AAKD,GAND;;AAOA,MAAM,UAAU,GAAG,SAAb,UAAa,GAAK;AACtB,IAAA,GAAG,CAAC,cAAJ,CAAmB,kBAAkB,CAAC,cAAnB,CAAkC,EAArD,EAAyD;AACvD,MAAA,MAAM,EAAE,IAAI,CAAC,EAD0C;AAEvD,MAAA,WAAW,EAAE,IAF0C;AAGvD,MAAA,aAAa,EAAE;AAAE,QAAA,KAAK,EAAL,KAAF;AAAS,QAAA,MAAM,EAAE;AAAjB,OAHwC;AAIvD,MAAA,GAAG,EAAE;AAJkD,KAAzD;AAMD,GAPD;;AASA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,IAAA,SAAS,EAAC,kBADZ;AAEE,IAAA,KAAK,EAAE;AACL,MAAA,WAAW,EAAE,MADR;AAEL,MAAA,eAAe,EAAE,IAFZ;AAGL,MAAA,QAAQ,EAAR,QAHK;AAIL,MAAA,KAAK,EAAE;AAJF;AAFT,GAAA,EASE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EAA8B,KAA9B,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EACG,WAAW,IAAI,KAAA,CAAA,aAAA,CAAC,kBAAD,EAAmB;AAAC,IAAA,OAAO,EAAE;AAAV,GAAnB,CADlB,EAEG,CAAC,WAAD,IAAgB,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAoB;AAAC,IAAA,OAAO,EAAE;AAAV,GAApB,CAFnB,CAFF,CATF,CADF;AAmBD,CAzCM","sourceRoot":"","sourcesContent":["import React from 'react';\nimport { PlusSquareOutlined, MinusSquareOutlined } from '@ant-design/icons';\nimport { useXFlowApp, XFlowGroupCommands } from '@antv/xflow-core';\nimport './group.less';\nexport const GroupNode = props => {\n    const { cell, data: { label, stroke, fill, fontSize, fontFill, width = 200, isCollapsed = false }, } = props;\n    const app = useXFlowApp();\n    const onExpand = () => {\n        app.executeCommand(XFlowGroupCommands.COLLAPSE_GROUP.id, {\n            nodeId: cell.id,\n            isCollapsed: false,\n            collapsedSize: { width, height: 40 },\n        });\n    };\n    const onCollapse = () => {\n        app.executeCommand(XFlowGroupCommands.COLLAPSE_GROUP.id, {\n            nodeId: cell.id,\n            isCollapsed: true,\n            collapsedSize: { width, height: 40 },\n            gap: 3,\n        });\n    };\n    return (React.createElement(\"div\", { className: \"xflow-group-node\", style: {\n            borderColor: stroke,\n            backgroundColor: fill,\n            fontSize,\n            color: fontFill,\n        } },\n        React.createElement(\"div\", { className: \"xflow-group-header\" },\n            React.createElement(\"div\", { className: \"header-left\" }, label),\n            React.createElement(\"div\", { className: \"header-right\" },\n                isCollapsed && React.createElement(PlusSquareOutlined, { onClick: onExpand }),\n                !isCollapsed && React.createElement(MinusSquareOutlined, { onClick: onCollapse })))));\n};\n//# sourceMappingURL=group.js.map"]},"metadata":{},"sourceType":"module"}