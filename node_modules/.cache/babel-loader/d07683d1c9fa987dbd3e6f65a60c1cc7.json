{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Base } from './base';\nexport class ClipboardManager extends Base {\n  get commonOptions() {\n    const _a = this.instanceOptions,\n          {\n      enabled\n    } = _a,\n          others = __rest(_a, [\"enabled\"]);\n\n    return others;\n  }\n\n  get instanceOptions() {\n    return this.options.clipboard;\n  }\n\n  get cells() {\n    return this.widget.cells;\n  }\n\n  get disabled() {\n    return this.instanceOptions.enabled !== true;\n  }\n\n  init() {\n    this.widget = this.graph.hook.createClipboard();\n    this.widget.deserialize(this.instanceOptions);\n  }\n\n  enable() {\n    if (this.disabled) {\n      this.instanceOptions.enabled = true;\n    }\n  }\n\n  disable() {\n    if (!this.disabled) {\n      this.instanceOptions.enabled = false;\n    }\n  }\n\n  copy(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!this.disabled) {\n      this.widget.copy(cells, this.graph, Object.assign(Object.assign({}, this.commonOptions), options));\n    }\n  }\n\n  cut(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!this.disabled) {\n      this.widget.cut(cells, this.graph, Object.assign(Object.assign({}, this.commonOptions), options));\n    }\n  }\n\n  paste() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let graph = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.graph;\n\n    if (!this.disabled) {\n      return this.widget.paste(graph, Object.assign(Object.assign({}, this.commonOptions), options));\n    }\n\n    return [];\n  }\n\n  clean(force) {\n    if (!this.disabled || force) {\n      this.widget.clean();\n    }\n  }\n\n  isEmpty() {\n    return this.widget.isEmpty();\n  }\n\n  dispose() {\n    this.clean(true);\n  }\n\n}\n\n__decorate([Base.dispose()], ClipboardManager.prototype, \"dispose\", null);","map":{"version":3,"sources":["../../src/graph/clipboard.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAIA,SAAS,IAAT,QAAqB,QAArB;AAEA,OAAM,MAAO,gBAAP,SAAgC,IAAhC,CAAoC;AAGb,MAAb,aAAa,GAAA;AACzB,UAAM,EAAA,GAAyB,KAAK,eAApC;AAAA,UAAM;AAAE,MAAA;AAAF,QAAS,EAAf;AAAA,UAAoB,MAAM,GAAA,MAAA,CAAA,EAAA,EAApB,CAAA,SAAA,CAAoB,CAA1B;;AACA,WAAO,MAAP;AACD;;AAE4B,MAAf,eAAe,GAAA;AAC3B,WAAO,KAAK,OAAL,CAAa,SAApB;AACD;;AAEQ,MAAL,KAAK,GAAA;AACP,WAAO,KAAK,MAAL,CAAY,KAAnB;AACD;;AAEW,MAAR,QAAQ,GAAA;AACV,WAAO,KAAK,eAAL,CAAqB,OAArB,KAAiC,IAAxC;AACD;;AAES,EAAA,IAAI,GAAA;AACZ,SAAK,MAAL,GAAc,KAAK,KAAL,CAAW,IAAX,CAAgB,eAAhB,EAAd;AACA,SAAK,MAAL,CAAY,WAAZ,CAAwB,KAAK,eAA7B;AACD;;AAED,EAAA,MAAM,GAAA;AACJ,QAAI,KAAK,QAAT,EAAmB;AACjB,WAAK,eAAL,CAAqB,OAArB,GAA+B,IAA/B;AACD;AACF;;AAED,EAAA,OAAO,GAAA;AACL,QAAI,CAAC,KAAK,QAAV,EAAoB;AAClB,WAAK,eAAL,CAAqB,OAArB,GAA+B,KAA/B;AACD;AACF;;AAED,EAAA,IAAI,CAAC,KAAD,EAAmD;AAAA,QAAnC,OAAmC,uEAAF,EAAE;;AACrD,QAAI,CAAC,KAAK,QAAV,EAAoB;AAClB,WAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB,EAAwB,KAAK,KAA7B,EAAkC,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAC7B,KAAK,aADwB,CAAA,EAE7B,OAF6B,CAAlC;AAID;AACF;;AAED,EAAA,GAAG,CAAC,KAAD,EAAmD;AAAA,QAAnC,OAAmC,uEAAF,EAAE;;AACpD,QAAI,CAAC,KAAK,QAAV,EAAoB;AAClB,WAAK,MAAL,CAAY,GAAZ,CAAgB,KAAhB,EAAuB,KAAK,KAA5B,EAAiC,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAC5B,KAAK,aADuB,CAAA,EAE5B,OAF4B,CAAjC;AAID;AACF;;AAED,EAAA,KAAK,GAAgE;AAAA,QAA/D,OAA+D,uEAA7B,EAA6B;AAAA,QAAzB,KAAyB,uEAAV,KAAK,KAAK;;AACnE,QAAI,CAAC,KAAK,QAAV,EAAoB;AAClB,aAAO,KAAK,MAAL,CAAY,KAAZ,CAAkB,KAAlB,EAAuB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACzB,KAAK,aADoB,CAAA,EAEzB,OAFyB,CAAvB,CAAP;AAID;;AACD,WAAO,EAAP;AACD;;AAED,EAAA,KAAK,CAAC,KAAD,EAAgB;AACnB,QAAI,CAAC,KAAK,QAAN,IAAkB,KAAtB,EAA6B;AAC3B,WAAK,MAAL,CAAY,KAAZ;AACD;AACF;;AAED,EAAA,OAAO,GAAA;AACL,WAAO,KAAK,MAAL,CAAY,OAAZ,EAAP;AACD;;AAGD,EAAA,OAAO,GAAA;AACL,SAAK,KAAL,CAAW,IAAX;AACD;;AA9EuC;;AA4ExC,UAAA,CAAA,CADC,IAAI,CAAC,OAAL,EACD,CAAA,E,0BAAA,E,SAAA,EAEC,IAFD,CAAA","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { Base } from './base';\nexport class ClipboardManager extends Base {\n    get commonOptions() {\n        const _a = this.instanceOptions, { enabled } = _a, others = __rest(_a, [\"enabled\"]);\n        return others;\n    }\n    get instanceOptions() {\n        return this.options.clipboard;\n    }\n    get cells() {\n        return this.widget.cells;\n    }\n    get disabled() {\n        return this.instanceOptions.enabled !== true;\n    }\n    init() {\n        this.widget = this.graph.hook.createClipboard();\n        this.widget.deserialize(this.instanceOptions);\n    }\n    enable() {\n        if (this.disabled) {\n            this.instanceOptions.enabled = true;\n        }\n    }\n    disable() {\n        if (!this.disabled) {\n            this.instanceOptions.enabled = false;\n        }\n    }\n    copy(cells, options = {}) {\n        if (!this.disabled) {\n            this.widget.copy(cells, this.graph, Object.assign(Object.assign({}, this.commonOptions), options));\n        }\n    }\n    cut(cells, options = {}) {\n        if (!this.disabled) {\n            this.widget.cut(cells, this.graph, Object.assign(Object.assign({}, this.commonOptions), options));\n        }\n    }\n    paste(options = {}, graph = this.graph) {\n        if (!this.disabled) {\n            return this.widget.paste(graph, Object.assign(Object.assign({}, this.commonOptions), options));\n        }\n        return [];\n    }\n    clean(force) {\n        if (!this.disabled || force) {\n            this.widget.clean();\n        }\n    }\n    isEmpty() {\n        return this.widget.isEmpty();\n    }\n    dispose() {\n        this.clean(true);\n    }\n}\n__decorate([\n    Base.dispose()\n], ClipboardManager.prototype, \"dispose\", null);\n//# sourceMappingURL=clipboard.js.map"]},"metadata":{},"sourceType":"module"}