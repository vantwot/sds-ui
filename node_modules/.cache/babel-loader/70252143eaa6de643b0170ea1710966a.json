{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport BaseLayer from '../core/BaseLayer';\nimport PointModels from './models/index';\n\nvar PointLayer = function (_BaseLayer) {\n  _inherits(PointLayer, _BaseLayer);\n\n  var _super = _createSuper(PointLayer);\n\n  function PointLayer() {\n    var _this;\n\n    _classCallCheck(this, PointLayer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", 'PointLayer');\n\n    return _this;\n  }\n\n  _createClass(PointLayer, [{\n    key: \"buildModels\",\n    value: function buildModels() {\n      var modelType = this.getModelType();\n      this.layerModel = new PointModels[modelType](this);\n      this.models = this.layerModel.initModels();\n    }\n  }, {\n    key: \"rebuildModels\",\n    value: function rebuildModels() {\n      this.models = this.layerModel.buildModels();\n    }\n  }, {\n    key: \"getConfigSchema\",\n    value: function getConfigSchema() {\n      return {\n        properties: {\n          opacity: {\n            type: 'number',\n            minimum: 0,\n            maximum: 1\n          }\n        }\n      };\n    }\n  }, {\n    key: \"getDefaultConfig\",\n    value: function getDefaultConfig() {\n      var type = this.getModelType();\n      var defaultConfig = {\n        normal: {\n          blend: 'additive'\n        },\n        fill: {\n          blend: 'normal'\n        },\n        extrude: {},\n        image: {},\n        icon: {},\n        text: {\n          blend: 'normal'\n        }\n      };\n      return defaultConfig[type];\n    }\n  }, {\n    key: \"getModelType\",\n    value: function getModelType() {\n      var layerData = this.getEncodedData();\n\n      var _this$getLayerConfig = this.getLayerConfig(),\n          shape2d = _this$getLayerConfig.shape2d,\n          shape3d = _this$getLayerConfig.shape3d;\n\n      var iconMap = this.iconService.getIconMap();\n      var item = layerData.find(function (fe) {\n        return fe.hasOwnProperty('shape');\n      });\n\n      if (!item) {\n        return 'normal';\n      } else {\n        var shape = item.shape;\n\n        if (shape === 'dot') {\n          return 'normal';\n        }\n\n        if ((shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(shape)) !== -1) {\n          return 'fill';\n        }\n\n        if ((shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) !== -1) {\n          return 'extrude';\n        }\n\n        if (iconMap.hasOwnProperty(shape)) {\n          return 'image';\n        }\n\n        if (this.fontService.getGlyph(shape) !== '') {\n          return 'icon';\n        }\n\n        return 'text';\n      }\n    }\n  }]);\n\n  return PointLayer;\n}(BaseLayer);\n\nexport { PointLayer as default };","map":{"version":3,"sources":["../../src/point/index.ts"],"names":["PointLayer","BaseLayer","modelType","PointModels","properties","opacity","type","minimum","maximum","defaultConfig","normal","blend","fill","extrude","image","icon","text","layerData","shape2d","shape3d","iconMap","item","fe","shape"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAA,SAAA,MAAA,mBAAA;AACA,OAAA,WAAA,MAAA,gBAAA;;IAMqBA,U;;;;;;;;;;;;;;;;2DACG,Y;;;;;;;WACtB,SAAA,WAAA,GAAqB;AACnB,UAAME,SAAS,GAAG,KAAlB,YAAkB,EAAlB;AACA,WAAA,UAAA,GAAkB,IAAIC,WAAW,CAAf,SAAe,CAAf,CAAlB,IAAkB,CAAlB;AACA,WAAA,MAAA,GAAc,KAAA,UAAA,CAAd,UAAc,EAAd;AACD;;;WACD,SAAA,aAAA,GAAuB;AACrB,WAAA,MAAA,GAAc,KAAA,UAAA,CAAd,WAAc,EAAd;AACD;;;WACD,SAAA,eAAA,GAA4B;AAC1B,aAAO;AACLC,QAAAA,UAAU,EAAE;AACVC,UAAAA,OAAO,EAAE;AACPC,YAAAA,IAAI,EADG,QAAA;AAEPC,YAAAA,OAAO,EAFA,CAAA;AAGPC,YAAAA,OAAO,EAAE;AAHF;AADC;AADP,OAAP;AASD;;;WACD,SAAA,gBAAA,GAA6B;AAC3B,UAAMF,IAAI,GAAG,KAAb,YAAa,EAAb;AACA,UAAMG,aAAa,GAAG;AACpBC,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE;AADD,SADY;AAIpBC,QAAAA,IAAI,EAAE;AAAED,UAAAA,KAAK,EAAE;AAAT,SAJc;AAKpBE,QAAAA,OAAO,EALa,EAAA;AAMpBC,QAAAA,KAAK,EANe,EAAA;AAOpBC,QAAAA,IAAI,EAPgB,EAAA;AAQpBC,QAAAA,IAAI,EAAE;AACJL,UAAAA,KAAK,EAAE;AADH;AARc,OAAtB;AAYA,aAAOF,aAAa,CAApB,IAAoB,CAApB;AACD;;;WAED,SAAA,YAAA,GAAoC;AAGlC,UAAMQ,SAAS,GAAG,KAAlB,cAAkB,EAAlB;;AACA,UAAA,oBAAA,GAA6B,KAA7B,cAA6B,EAA7B;AAAA,UAAQC,OAAR,GAAA,oBAAA,CAAA,OAAA;AAAA,UAAiBC,OAAjB,GAAA,oBAAA,CAAA,OAAA;;AACA,UAAMC,OAAO,GAAG,KAAA,WAAA,CAAhB,UAAgB,EAAhB;AACA,UAAMC,IAAI,GAAG,SAAS,CAAT,IAAA,CAAe,UAAA,EAAA,EAAwB;AAClD,eAAOC,EAAE,CAAFA,cAAAA,CAAP,OAAOA,CAAP;AADF,OAAa,CAAb;;AAGA,UAAI,CAAJ,IAAA,EAAW;AACT,eAAA,QAAA;AADF,OAAA,MAEO;AACL,YAAMC,KAAK,GAAGF,IAAI,CAAlB,KAAA;;AACA,YAAIE,KAAK,KAAT,KAAA,EAAqB;AACnB,iBAAA,QAAA;AACD;;AACD,YAAI,CAAA,OAAO,KAAP,IAAA,IAAA,OAAO,KAAA,KAAP,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAP,OAAA,CAAA,KAAA,CAAA,MAAsC,CAA1C,CAAA,EAA8C;AAC5C,iBAAA,MAAA;AACD;;AACD,YAAI,CAAA,OAAO,KAAP,IAAA,IAAA,OAAO,KAAA,KAAP,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAP,OAAA,CAAA,KAAA,CAAA,MAAsC,CAA1C,CAAA,EAA8C;AAC5C,iBAAA,SAAA;AACD;;AACD,YAAIH,OAAO,CAAPA,cAAAA,CAAJ,KAAIA,CAAJ,EAA6C;AAC3C,iBAAA,OAAA;AACD;;AACD,YAAI,KAAA,WAAA,CAAA,QAAA,CAAA,KAAA,MAAJ,EAAA,EAAuD;AACrD,iBAAA,MAAA;AACD;;AACD,eAAA,MAAA;AACD;AACF;;;;EApEqCnB,S;;SAAnBD,U","sourcesContent":["import { IEncodeFeature } from '@antv/l7-core';\nimport BaseLayer from '../core/BaseLayer';\nimport PointModels, { PointType } from './models/index';\ninterface IPointLayerStyleOptions {\n  opacity: number;\n  strokeWidth: number;\n  stroke: string;\n}\nexport default class PointLayer extends BaseLayer<IPointLayerStyleOptions> {\n  public type: string = 'PointLayer';\n  public buildModels() {\n    const modelType = this.getModelType();\n    this.layerModel = new PointModels[modelType](this);\n    this.models = this.layerModel.initModels();\n  }\n  public rebuildModels() {\n    this.models = this.layerModel.buildModels();\n  }\n  protected getConfigSchema() {\n    return {\n      properties: {\n        opacity: {\n          type: 'number',\n          minimum: 0,\n          maximum: 1,\n        },\n      },\n    };\n  }\n  protected getDefaultConfig() {\n    const type = this.getModelType();\n    const defaultConfig = {\n      normal: {\n        blend: 'additive',\n      },\n      fill: { blend: 'normal' },\n      extrude: {},\n      image: {},\n      icon: {},\n      text: {\n        blend: 'normal',\n      },\n    };\n    return defaultConfig[type];\n  }\n\n  protected getModelType(): PointType {\n    // pointlayer\n    //  2D、 3d、 shape、image、text、normal、\n    const layerData = this.getEncodedData();\n    const { shape2d, shape3d } = this.getLayerConfig();\n    const iconMap = this.iconService.getIconMap();\n    const item = layerData.find((fe: IEncodeFeature) => {\n      return fe.hasOwnProperty('shape');\n    });\n    if (!item) {\n      return 'normal';\n    } else {\n      const shape = item.shape;\n      if (shape === 'dot') {\n        return 'normal';\n      }\n      if (shape2d?.indexOf(shape as string) !== -1) {\n        return 'fill';\n      }\n      if (shape3d?.indexOf(shape as string) !== -1) {\n        return 'extrude';\n      }\n      if (iconMap.hasOwnProperty(shape as string)) {\n        return 'image';\n      }\n      if (this.fontService.getGlyph(shape as string) !== '') {\n        return 'icon';\n      }\n      return 'text';\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}