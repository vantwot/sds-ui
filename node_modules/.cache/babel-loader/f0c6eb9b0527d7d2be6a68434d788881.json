{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { isMini } from '@antv/l7-utils';\nimport { mat2, mat4, vec4 } from 'gl-matrix';\nimport Point from '../geo/point';\nimport { clamp, interpolate, wrap } from '../util';\nimport EdgeInsets from './edge_insets';\nimport LngLat from './lng_lat';\nimport LngLatBounds from './lng_lat_bounds';\nimport MercatorCoordinate, { mercatorXfromLng, mercatorYfromLat, mercatorZfromAltitude } from './mercator';\nexport var EXTENT = 8192;\n\nvar Transform = function () {\n  function Transform(minZoom, maxZoom, minPitch, maxPitch, renderWorldCopies) {\n    _classCallCheck(this, Transform);\n\n    _defineProperty(this, \"tileSize\", void 0);\n\n    _defineProperty(this, \"tileZoom\", void 0);\n\n    _defineProperty(this, \"lngRange\", void 0);\n\n    _defineProperty(this, \"latRange\", void 0);\n\n    _defineProperty(this, \"maxValidLatitude\", void 0);\n\n    _defineProperty(this, \"scale\", void 0);\n\n    _defineProperty(this, \"width\", void 0);\n\n    _defineProperty(this, \"height\", void 0);\n\n    _defineProperty(this, \"angle\", void 0);\n\n    _defineProperty(this, \"rotationMatrix\", void 0);\n\n    _defineProperty(this, \"pixelsToGLUnits\", void 0);\n\n    _defineProperty(this, \"cameraToCenterDistance\", void 0);\n\n    _defineProperty(this, \"mercatorMatrix\", void 0);\n\n    _defineProperty(this, \"projMatrix\", void 0);\n\n    _defineProperty(this, \"invProjMatrix\", void 0);\n\n    _defineProperty(this, \"alignedProjMatrix\", void 0);\n\n    _defineProperty(this, \"pixelMatrix\", void 0);\n\n    _defineProperty(this, \"pixelMatrixInverse\", void 0);\n\n    _defineProperty(this, \"glCoordMatrix\", void 0);\n\n    _defineProperty(this, \"labelPlaneMatrix\", void 0);\n\n    _defineProperty(this, \"_fov\", void 0);\n\n    _defineProperty(this, \"_pitch\", void 0);\n\n    _defineProperty(this, \"_zoom\", void 0);\n\n    _defineProperty(this, \"_renderWorldCopies\", void 0);\n\n    _defineProperty(this, \"_minZoom\", void 0);\n\n    _defineProperty(this, \"_maxZoom\", void 0);\n\n    _defineProperty(this, \"_minPitch\", void 0);\n\n    _defineProperty(this, \"_maxPitch\", void 0);\n\n    _defineProperty(this, \"_center\", void 0);\n\n    _defineProperty(this, \"zoomFraction\", void 0);\n\n    _defineProperty(this, \"unmodified\", void 0);\n\n    _defineProperty(this, \"edgeInsets\", void 0);\n\n    _defineProperty(this, \"constraining\", void 0);\n\n    _defineProperty(this, \"posMatrixCache\", void 0);\n\n    _defineProperty(this, \"alignedPosMatrixCache\", void 0);\n\n    this.tileSize = 512;\n    this.maxValidLatitude = 85.051129;\n    this._renderWorldCopies = renderWorldCopies === undefined ? true : renderWorldCopies;\n    this._minZoom = minZoom || 0;\n    this._maxZoom = maxZoom || 22;\n    this._minPitch = minPitch === undefined || minPitch === null ? 0 : minPitch;\n    this._maxPitch = maxPitch === undefined || maxPitch === null ? 60 : maxPitch;\n    this.setMaxBounds();\n    this.width = 0;\n    this.height = 0;\n    this._center = new LngLat(0, 0);\n    this.zoom = 0;\n    this.angle = 0;\n    this._fov = 0.6435011087932844;\n    this._pitch = 0;\n    this.unmodified = true;\n    this.edgeInsets = new EdgeInsets();\n    this.posMatrixCache = {};\n    this.alignedPosMatrixCache = {};\n  }\n\n  _createClass(Transform, [{\n    key: \"minZoom\",\n    get: function get() {\n      return this._minZoom;\n    },\n    set: function set(zoom) {\n      if (this._minZoom === zoom) {\n        return;\n      }\n\n      this._minZoom = zoom;\n      this.zoom = Math.max(this.zoom, zoom);\n    }\n  }, {\n    key: \"maxZoom\",\n    get: function get() {\n      return this._maxZoom;\n    },\n    set: function set(zoom) {\n      if (this._maxZoom === zoom) {\n        return;\n      }\n\n      this._maxZoom = zoom;\n      this.zoom = Math.min(this.zoom, zoom);\n    }\n  }, {\n    key: \"minPitch\",\n    get: function get() {\n      return this._minPitch;\n    },\n    set: function set(pitch) {\n      if (this._minPitch === pitch) {\n        return;\n      }\n\n      this._minPitch = pitch;\n      this._pitch = Math.max(this._pitch, pitch);\n    }\n  }, {\n    key: \"maxPitch\",\n    get: function get() {\n      return this._maxPitch;\n    },\n    set: function set(pitch) {\n      if (this._maxPitch === pitch) {\n        return;\n      }\n\n      this._maxPitch = pitch;\n      this._pitch = Math.min(this._pitch, pitch);\n    }\n  }, {\n    key: \"renderWorldCopies\",\n    get: function get() {\n      return this._renderWorldCopies;\n    },\n    set: function set(renderWorldCopies) {\n      if (renderWorldCopies === undefined) {\n        renderWorldCopies = true;\n      } else if (renderWorldCopies === null) {\n        renderWorldCopies = false;\n      }\n\n      this._renderWorldCopies = renderWorldCopies;\n    }\n  }, {\n    key: \"worldSize\",\n    get: function get() {\n      return this.tileSize * this.scale;\n    }\n  }, {\n    key: \"centerOffset\",\n    get: function get() {\n      return this.centerPoint._sub(this.size._div(2));\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return new Point(this.width, this.height);\n    }\n  }, {\n    key: \"bearing\",\n    get: function get() {\n      return -this.angle / Math.PI * 180;\n    },\n    set: function set(bearing) {\n      var b = -wrap(bearing, -180, 180) * Math.PI / 180;\n\n      if (this.angle === b) {\n        return;\n      }\n\n      this.unmodified = false;\n      this.angle = b;\n      this.calcMatrices();\n      this.rotationMatrix = mat2.create();\n      mat2.rotate(this.rotationMatrix, this.rotationMatrix, this.angle);\n    }\n  }, {\n    key: \"pitch\",\n    get: function get() {\n      return this._pitch / Math.PI * 180;\n    },\n    set: function set(pitch) {\n      var p = clamp(pitch, this._minPitch, this._maxPitch) / 180 * Math.PI;\n\n      if (this._pitch === p) {\n        return;\n      }\n\n      this.unmodified = false;\n      this._pitch = p;\n      this.calcMatrices();\n    }\n  }, {\n    key: \"fov\",\n    get: function get() {\n      return this._fov / Math.PI * 180;\n    },\n    set: function set(fov) {\n      fov = Math.max(0.01, Math.min(60, fov));\n\n      if (this._fov === fov) {\n        return;\n      }\n\n      this.unmodified = false;\n      this._fov = fov / 180 * Math.PI;\n      this.calcMatrices();\n    }\n  }, {\n    key: \"zoom\",\n    get: function get() {\n      return this._zoom;\n    },\n    set: function set(zoom) {\n      var z = Math.min(Math.max(zoom, this._minZoom), this._maxZoom);\n\n      if (this._zoom === z) {\n        return;\n      }\n\n      this.unmodified = false;\n      this._zoom = z;\n      this.scale = this.zoomScale(z);\n      this.tileZoom = Math.floor(z);\n      this.zoomFraction = z - this.tileZoom;\n      this.constrain();\n      this.calcMatrices();\n    }\n  }, {\n    key: \"center\",\n    get: function get() {\n      return this._center;\n    },\n    set: function set(center) {\n      if (center.lat === this._center.lat && center.lng === this._center.lng) {\n        return;\n      }\n\n      this.unmodified = false;\n      this._center = center;\n      this.constrain();\n      this.calcMatrices();\n    }\n  }, {\n    key: \"padding\",\n    get: function get() {\n      return this.edgeInsets.toJSON();\n    },\n    set: function set(padding) {\n      if (this.edgeInsets.equals(padding)) {\n        return;\n      }\n\n      this.unmodified = false;\n      this.edgeInsets.interpolate(this.edgeInsets, padding, 1);\n      this.calcMatrices();\n    }\n  }, {\n    key: \"centerPoint\",\n    get: function get() {\n      return this.edgeInsets.getCenter(this.width, this.height);\n    }\n  }, {\n    key: \"point\",\n    get: function get() {\n      return this.project(this.center);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = new Transform(this._minZoom, this._maxZoom, this._minPitch, this._maxPitch, this._renderWorldCopies);\n      clone.tileSize = this.tileSize;\n      clone.latRange = this.latRange;\n      clone.width = this.width;\n      clone.height = this.height;\n      clone.center = this._center;\n      clone.zoom = this.zoom;\n      clone.angle = this.angle;\n      clone.fov = this._fov;\n      clone.pitch = this._pitch;\n      clone.unmodified = this.unmodified;\n      clone.edgeInsets = this.edgeInsets.clone();\n      clone.calcMatrices();\n      return clone;\n    }\n  }, {\n    key: \"isPaddingEqual\",\n    value: function isPaddingEqual(padding) {\n      return this.edgeInsets.equals(padding);\n    }\n  }, {\n    key: \"interpolatePadding\",\n    value: function interpolatePadding(start, target, t) {\n      this.unmodified = false;\n      this.edgeInsets.interpolate(start, target, t);\n      this.constrain();\n      this.calcMatrices();\n    }\n  }, {\n    key: \"coveringZoomLevel\",\n    value: function coveringZoomLevel(options) {\n      var z = (options.roundZoom ? Math.round : Math.floor)(this.zoom + this.scaleZoom(this.tileSize / options.tileSize));\n      return Math.max(0, z);\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      this.width = width;\n      this.height = height;\n      this.pixelsToGLUnits = [2 / width, -2 / height];\n      this.constrain();\n      this.calcMatrices();\n    }\n  }, {\n    key: \"zoomScale\",\n    value: function zoomScale(zoom) {\n      return Math.pow(2, zoom);\n    }\n  }, {\n    key: \"scaleZoom\",\n    value: function scaleZoom(scale) {\n      return Math.log(scale) / Math.LN2;\n    }\n  }, {\n    key: \"project\",\n    value: function project(lnglat) {\n      var lat = clamp(lnglat.lat, -this.maxValidLatitude, this.maxValidLatitude);\n      return new Point(mercatorXfromLng(lnglat.lng) * this.worldSize, mercatorYfromLat(lat) * this.worldSize);\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(point) {\n      return new MercatorCoordinate(point.x / this.worldSize, point.y / this.worldSize).toLngLat();\n    }\n  }, {\n    key: \"setLocationAtPoint\",\n    value: function setLocationAtPoint(lnglat, point) {\n      var a = this.pointCoordinate(point);\n      var b = this.pointCoordinate(this.centerPoint);\n      var loc = this.locationCoordinate(lnglat);\n      var newCenter = new MercatorCoordinate(loc.x - (a.x - b.x), loc.y - (a.y - b.y));\n      this.center = this.coordinateLocation(newCenter);\n\n      if (this._renderWorldCopies) {\n        this.center = this.center.wrap();\n      }\n    }\n  }, {\n    key: \"pointCoordinate\",\n    value: function pointCoordinate(p) {\n      var targetZ = 0;\n      var coord0 = new Float32Array([p.x, p.y, 0, 1]);\n      var coord1 = new Float32Array([p.x, p.y, 1, 1]);\n      vec4.transformMat4(coord0, coord0, this.pixelMatrixInverse);\n      vec4.transformMat4(coord1, coord1, this.pixelMatrixInverse);\n      var w0 = coord0[3];\n      var w1 = coord1[3];\n      var x0 = coord0[0] / w0;\n      var x1 = coord1[0] / w1;\n      var y0 = coord0[1] / w0;\n      var y1 = coord1[1] / w1;\n      var z0 = coord0[2] / w0;\n      var z1 = coord1[2] / w1;\n      var t = z0 === z1 ? 0 : (targetZ - z0) / (z1 - z0);\n      return new MercatorCoordinate(interpolate(x0, x1, t) / this.worldSize, interpolate(y0, y1, t) / this.worldSize);\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      return new LngLatBounds().extend(this.pointLocation(new Point(0, 0))).extend(this.pointLocation(new Point(this.width, 0))).extend(this.pointLocation(new Point(this.width, this.height))).extend(this.pointLocation(new Point(0, this.height)));\n    }\n  }, {\n    key: \"getMaxBounds\",\n    value: function getMaxBounds() {\n      if (!this.latRange || this.latRange.length !== 2 || !this.lngRange || this.lngRange.length !== 2) {\n        return null;\n      }\n\n      return new LngLatBounds([this.lngRange[0], this.latRange[0]], [this.lngRange[1], this.latRange[1]]);\n    }\n  }, {\n    key: \"setMaxBounds\",\n    value: function setMaxBounds(bounds) {\n      if (bounds) {\n        this.lngRange = [bounds.getWest(), bounds.getEast()];\n        this.latRange = [bounds.getSouth(), bounds.getNorth()];\n        this.constrain();\n      } else {\n        this.lngRange = undefined;\n        this.latRange = [-this.maxValidLatitude, this.maxValidLatitude];\n      }\n    }\n  }, {\n    key: \"customLayerMatrix\",\n    value: function customLayerMatrix() {\n      return this.mercatorMatrix.slice();\n    }\n  }, {\n    key: \"maxPitchScaleFactor\",\n    value: function maxPitchScaleFactor() {\n      if (!this.pixelMatrixInverse) {\n        return 1;\n      }\n\n      var coord = this.pointCoordinate(new Point(0, 0));\n      var p = new Float32Array([coord.x * this.worldSize, coord.y * this.worldSize, 0, 1]);\n      var topPoint = vec4.transformMat4(p, p, this.pixelMatrix);\n      return topPoint[3] / this.cameraToCenterDistance;\n    }\n  }, {\n    key: \"getCameraPoint\",\n    value: function getCameraPoint() {\n      var pitch = this._pitch;\n      var yOffset = Math.tan(pitch) * (this.cameraToCenterDistance || 1);\n      return this.centerPoint.add(new Point(0, yOffset));\n    }\n  }, {\n    key: \"getCameraQueryGeometry\",\n    value: function getCameraQueryGeometry(queryGeometry) {\n      var c = this.getCameraPoint();\n\n      if (queryGeometry.length === 1) {\n        return [queryGeometry[0], c];\n      } else {\n        var minX = c.x;\n        var minY = c.y;\n        var maxX = c.x;\n        var maxY = c.y;\n\n        var _iterator = _createForOfIteratorHelper(queryGeometry),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var p = _step.value;\n            minX = Math.min(minX, p.x);\n            minY = Math.min(minY, p.y);\n            maxX = Math.max(maxX, p.x);\n            maxY = Math.max(maxY, p.y);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return [new Point(minX, minY), new Point(maxX, minY), new Point(maxX, maxY), new Point(minX, maxY), new Point(minX, minY)];\n      }\n    }\n  }, {\n    key: \"coordinatePoint\",\n    value: function coordinatePoint(coord) {\n      var p = vec4.fromValues(coord.x * this.worldSize, coord.y * this.worldSize, 0, 1);\n      vec4.transformMat4(p, p, this.pixelMatrix);\n      return new Point(p[0] / p[3], p[1] / p[3]);\n    }\n  }, {\n    key: \"locationPoint\",\n    value: function locationPoint(lnglat) {\n      return this.coordinatePoint(this.locationCoordinate(lnglat));\n    }\n  }, {\n    key: \"pointLocation\",\n    value: function pointLocation(p) {\n      return this.coordinateLocation(this.pointCoordinate(p));\n    }\n  }, {\n    key: \"locationCoordinate\",\n    value: function locationCoordinate(lnglat) {\n      return MercatorCoordinate.fromLngLat(lnglat);\n    }\n  }, {\n    key: \"coordinateLocation\",\n    value: function coordinateLocation(coord) {\n      return coord.toLngLat();\n    }\n  }, {\n    key: \"getProjectionMatrix\",\n    value: function getProjectionMatrix() {\n      return this.projMatrix;\n    }\n  }, {\n    key: \"constrain\",\n    value: function constrain() {\n      if (!this.center || !this.width || !this.height || this.constraining) {\n        return;\n      }\n\n      this.constraining = true;\n      var minY = -90;\n      var maxY = 90;\n      var minX = -180;\n      var maxX = 180;\n      var sy;\n      var sx;\n      var x2;\n      var y2;\n      var size = this.size;\n      var unmodified = this.unmodified;\n\n      if (this.latRange) {\n        var latRange = this.latRange;\n        minY = mercatorYfromLat(latRange[1]) * this.worldSize;\n        maxY = mercatorYfromLat(latRange[0]) * this.worldSize;\n        sy = maxY - minY < size.y ? size.y / (maxY - minY) : 0;\n      }\n\n      if (this.lngRange) {\n        var lngRange = this.lngRange;\n        minX = mercatorXfromLng(lngRange[0]) * this.worldSize;\n        maxX = mercatorXfromLng(lngRange[1]) * this.worldSize;\n        sx = maxX - minX < size.x ? size.x / (maxX - minX) : 0;\n      }\n\n      var point = this.point;\n      var s = Math.max(sx || 0, sy || 0);\n\n      if (s) {\n        this.center = this.unproject(new Point(sx ? (maxX + minX) / 2 : point.x, sy ? (maxY + minY) / 2 : point.y));\n\n        if (isMini) {\n          this.zoom = Math.max(this.zoom, Math.max(-1, this.minZoom));\n        } else {\n          this.zoom += this.scaleZoom(s);\n        }\n\n        this.unmodified = unmodified;\n        this.constraining = false;\n        return;\n      }\n\n      if (this.latRange) {\n        var y = point.y;\n        var h2 = size.y / 2;\n\n        if (y - h2 < minY) {\n          y2 = minY + h2;\n        }\n\n        if (y + h2 > maxY) {\n          y2 = maxY - h2;\n        }\n      }\n\n      if (this.lngRange) {\n        var x = point.x;\n        var w2 = size.x / 2;\n\n        if (x - w2 < minX) {\n          x2 = minX + w2;\n        }\n\n        if (x + w2 > maxX) {\n          x2 = maxX - w2;\n        }\n      }\n\n      if (x2 !== undefined || y2 !== undefined) {\n        this.center = this.unproject(new Point(x2 !== undefined ? x2 : point.x, y2 !== undefined ? y2 : point.y));\n      }\n\n      this.unmodified = unmodified;\n      this.constraining = false;\n    }\n  }, {\n    key: \"calcMatrices\",\n    value: function calcMatrices() {\n      if (!this.height) {\n        return;\n      }\n\n      var halfFov = this._fov / 2;\n      var offset = this.centerOffset;\n      this.cameraToCenterDistance = 0.5 / Math.tan(halfFov) * this.height;\n      var groundAngle = Math.PI / 2 + this._pitch;\n      var fovAboveCenter = this._fov * (0.5 + offset.y / this.height);\n      var topHalfSurfaceDistance = Math.sin(fovAboveCenter) * this.cameraToCenterDistance / Math.sin(clamp(Math.PI - groundAngle - fovAboveCenter, 0.01, Math.PI - 0.01));\n      var point = this.point;\n      var x = point.x;\n      var y = point.y;\n      var furthestDistance = Math.cos(Math.PI / 2 - this._pitch) * topHalfSurfaceDistance + this.cameraToCenterDistance;\n      var farZ = furthestDistance * 1.01;\n      var nearZ = this.height / 50;\n      var m = new Float64Array(16);\n      mat4.perspective(m, this._fov, this.width / this.height, nearZ, farZ);\n      m[8] = -offset.x * 2 / this.width;\n      m[9] = offset.y * 2 / this.height;\n      mat4.scale(m, m, [1, -1, 1]);\n      mat4.translate(m, m, [0, 0, -this.cameraToCenterDistance]);\n      mat4.rotateX(m, m, this._pitch);\n      mat4.rotateZ(m, m, this.angle);\n      mat4.translate(m, m, [-x, -y, 0]);\n      this.mercatorMatrix = mat4.scale([], m, [this.worldSize, this.worldSize, this.worldSize]);\n      mat4.scale(m, m, [1, 1, mercatorZfromAltitude(1, this.center.lat) * this.worldSize, 1]);\n      this.projMatrix = m;\n      this.invProjMatrix = mat4.invert([], this.projMatrix);\n      var xShift = this.width % 2 / 2;\n      var yShift = this.height % 2 / 2;\n      var angleCos = Math.cos(this.angle);\n      var angleSin = Math.sin(this.angle);\n      var dx = x - Math.round(x) + angleCos * xShift + angleSin * yShift;\n      var dy = y - Math.round(y) + angleCos * yShift + angleSin * xShift;\n      var alignedM = new Float64Array(m);\n      mat4.translate(alignedM, alignedM, [dx > 0.5 ? dx - 1 : dx, dy > 0.5 ? dy - 1 : dy, 0]);\n      this.alignedProjMatrix = alignedM;\n      m = mat4.create();\n      mat4.scale(m, m, [this.width / 2, -this.height / 2, 1]);\n      mat4.translate(m, m, [1, -1, 0]);\n      this.labelPlaneMatrix = m;\n      m = mat4.create();\n      mat4.scale(m, m, [1, -1, 1]);\n      mat4.translate(m, m, [-1, -1, 0]);\n      mat4.scale(m, m, [2 / this.width, 2 / this.height, 1]);\n      this.glCoordMatrix = m;\n      this.pixelMatrix = mat4.multiply(new Float64Array(16), this.labelPlaneMatrix, this.projMatrix);\n      m = mat4.invert(new Float64Array(16), this.pixelMatrix);\n\n      if (!m) {\n        throw new Error('failed to invert matrix');\n      }\n\n      this.pixelMatrixInverse = m;\n      this.posMatrixCache = {};\n      this.alignedPosMatrixCache = {};\n    }\n  }]);\n\n  return Transform;\n}();\n\nexport { Transform as default };","map":{"version":3,"sources":["../../src/geo/transform.ts"],"names":["EXTENT","Transform","Math","renderWorldCopies","b","wrap","mat2","p","clamp","fov","z","center","minZoom","maxZoom","minPitch","maxPitch","clone","options","lat","lnglat","mercatorXfromLng","mercatorYfromLat","point","a","loc","newCenter","targetZ","coord0","coord1","vec4","w0","w1","x0","x1","y0","y1","z0","z1","t","interpolate","bounds","coord","topPoint","pitch","yOffset","c","queryGeometry","minX","minY","maxX","maxY","MercatorCoordinate","size","unmodified","latRange","sy","lngRange","sx","s","y","h2","y2","x","w2","x2","halfFov","offset","groundAngle","fovAboveCenter","topHalfSurfaceDistance","furthestDistance","farZ","nearZ","m","mat4","mercatorZfromAltitude","xShift","yShift","angleCos","angleSin","dx","dy","alignedM"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport { isMini } from '@antv/l7-utils';\nimport { mat2, mat4, vec3, vec4 } from 'gl-matrix';\nimport Point, { PointLike } from '../geo/point';\nimport { clamp, interpolate, wrap } from '../util';\nimport Aabb from '../utils/Aabb';\nimport Frustum from '../utils/primitives';\nimport EdgeInsets, { IPaddingOptions } from './edge_insets';\nimport LngLat from './lng_lat';\nimport LngLatBounds from './lng_lat_bounds';\nimport MercatorCoordinate, {\n  mercatorXfromLng,\n  mercatorYfromLat,\n  mercatorZfromAltitude,\n} from './mercator';\nexport const EXTENT = 8192;\nexport default class Transform {\n  get minZoom(): number {\n    return this._minZoom;\n  }\n  set minZoom(zoom: number) {\n    if (this._minZoom === zoom) {\n      return;\n    }\n    this._minZoom = zoom;\n    this.zoom = Math.max(this.zoom, zoom);\n  }\n\n  get maxZoom(): number {\n    return this._maxZoom;\n  }\n  set maxZoom(zoom: number) {\n    if (this._maxZoom === zoom) {\n      return;\n    }\n    this._maxZoom = zoom;\n    this.zoom = Math.min(this.zoom, zoom);\n  }\n\n  get minPitch(): number {\n    return this._minPitch;\n  }\n  set minPitch(pitch: number) {\n    if (this._minPitch === pitch) {\n      return;\n    }\n    this._minPitch = pitch;\n    this._pitch = Math.max(this._pitch, pitch);\n  }\n\n  get maxPitch(): number {\n    return this._maxPitch;\n  }\n  set maxPitch(pitch: number) {\n    if (this._maxPitch === pitch) {\n      return;\n    }\n    this._maxPitch = pitch;\n    this._pitch = Math.min(this._pitch, pitch);\n  }\n\n  get renderWorldCopies(): boolean {\n    return this._renderWorldCopies;\n  }\n  set renderWorldCopies(renderWorldCopies: boolean) {\n    if (renderWorldCopies === undefined) {\n      renderWorldCopies = true;\n    } else if (renderWorldCopies === null) {\n      renderWorldCopies = false;\n    }\n\n    this._renderWorldCopies = renderWorldCopies;\n  }\n\n  get worldSize(): number {\n    return this.tileSize * this.scale;\n  }\n\n  get centerOffset(): Point {\n    return this.centerPoint._sub(this.size._div(2));\n  }\n\n  get size(): Point {\n    return new Point(this.width, this.height);\n  }\n\n  get bearing(): number {\n    return (-this.angle / Math.PI) * 180;\n  }\n  set bearing(bearing: number) {\n    const b = (-wrap(bearing, -180, 180) * Math.PI) / 180;\n    if (this.angle === b) {\n      return;\n    }\n    this.unmodified = false;\n    this.angle = b;\n    this.calcMatrices();\n\n    // 2x2 matrix for rotating points\n    this.rotationMatrix = mat2.create();\n    mat2.rotate(this.rotationMatrix, this.rotationMatrix, this.angle);\n  }\n\n  get pitch(): number {\n    return (this._pitch / Math.PI) * 180;\n  }\n  set pitch(pitch: number) {\n    const p = (clamp(pitch, this._minPitch, this._maxPitch) / 180) * Math.PI;\n    if (this._pitch === p) {\n      return;\n    }\n    this.unmodified = false;\n    this._pitch = p;\n    this.calcMatrices();\n  }\n\n  get fov(): number {\n    return (this._fov / Math.PI) * 180;\n  }\n\n  set fov(fov: number) {\n    fov = Math.max(0.01, Math.min(60, fov));\n    if (this._fov === fov) {\n      return;\n    }\n    this.unmodified = false;\n    this._fov = (fov / 180) * Math.PI;\n    this.calcMatrices();\n  }\n\n  get zoom(): number {\n    return this._zoom;\n  }\n\n  set zoom(zoom: number) {\n    const z = Math.min(Math.max(zoom, this._minZoom), this._maxZoom);\n    if (this._zoom === z) {\n      return;\n    }\n    this.unmodified = false;\n    this._zoom = z;\n    this.scale = this.zoomScale(z);\n    this.tileZoom = Math.floor(z);\n    this.zoomFraction = z - this.tileZoom;\n    this.constrain();\n    this.calcMatrices();\n  }\n\n  get center(): LngLat {\n    return this._center;\n  }\n\n  set center(center: LngLat) {\n    if (center.lat === this._center.lat && center.lng === this._center.lng) {\n      return;\n    }\n    this.unmodified = false;\n    this._center = center;\n    this.constrain();\n    this.calcMatrices();\n  }\n\n  get padding(): IPaddingOptions {\n    return this.edgeInsets.toJSON();\n  }\n\n  set padding(padding: IPaddingOptions) {\n    if (this.edgeInsets.equals(padding)) {\n      return;\n    }\n    this.unmodified = false;\n    // Update edge-insets inplace\n    this.edgeInsets.interpolate(this.edgeInsets, padding, 1);\n    this.calcMatrices();\n  }\n\n  /**\n   * The center of the screen in pixels with the top-left corner being (0,0)\n   * and +y axis pointing downwards. This accounts for padding.\n   *\n   * @readonly\n   * @type {Point}\n   * @memberof Transform\n   */\n  get centerPoint(): Point {\n    return this.edgeInsets.getCenter(this.width, this.height);\n  }\n\n  get point(): Point {\n    return this.project(this.center);\n  }\n  public tileSize: number;\n  public tileZoom: number;\n  public lngRange?: [number, number];\n  public latRange?: [number, number];\n  public maxValidLatitude: number;\n  public scale: number;\n  public width: number;\n  public height: number;\n  public angle: number;\n  public rotationMatrix: mat2;\n  public pixelsToGLUnits: [number, number];\n  public cameraToCenterDistance: number;\n  public mercatorMatrix: mat4;\n  public projMatrix: mat4;\n  public invProjMatrix: mat4;\n  public alignedProjMatrix: mat4;\n  public pixelMatrix: mat4;\n  public pixelMatrixInverse: mat4;\n  public glCoordMatrix: mat4;\n  public labelPlaneMatrix: mat4;\n  // tslint:disable:variable-name\n  private _fov: number;\n  private _pitch: number;\n  private _zoom: number;\n  private _renderWorldCopies: boolean;\n  private _minZoom: number;\n  private _maxZoom: number;\n  private _minPitch: number;\n  private _maxPitch: number;\n  private _center: LngLat;\n  // tslint:enable\n  private zoomFraction: number;\n  private unmodified: boolean;\n  private edgeInsets: EdgeInsets;\n  private constraining: boolean;\n  private posMatrixCache: { [_: string]: Float32Array };\n  private alignedPosMatrixCache: { [_: string]: Float32Array };\n  constructor(\n    minZoom: number,\n    maxZoom: number,\n    minPitch: number,\n    maxPitch: number,\n    renderWorldCopies: boolean | void,\n  ) {\n    this.tileSize = 512; // constant\n    this.maxValidLatitude = 85.051129; // constant\n\n    this._renderWorldCopies = (renderWorldCopies === undefined\n      ? true\n      : renderWorldCopies) as boolean;\n    this._minZoom = minZoom || 0;\n    this._maxZoom = maxZoom || 22;\n\n    this._minPitch = minPitch === undefined || minPitch === null ? 0 : minPitch;\n    this._maxPitch =\n      maxPitch === undefined || maxPitch === null ? 60 : maxPitch;\n\n    this.setMaxBounds();\n\n    this.width = 0;\n    this.height = 0;\n    this._center = new LngLat(0, 0);\n    this.zoom = 0;\n    this.angle = 0;\n    this._fov = 0.6435011087932844;\n    this._pitch = 0;\n    this.unmodified = true;\n    this.edgeInsets = new EdgeInsets();\n    this.posMatrixCache = {};\n    this.alignedPosMatrixCache = {};\n  }\n\n  public clone(): Transform {\n    const clone = new Transform(\n      this._minZoom,\n      this._maxZoom,\n      this._minPitch,\n      this._maxPitch,\n      this._renderWorldCopies,\n    );\n    clone.tileSize = this.tileSize;\n    clone.latRange = this.latRange;\n    clone.width = this.width;\n    clone.height = this.height;\n    clone.center = this._center;\n    clone.zoom = this.zoom;\n    clone.angle = this.angle;\n    clone.fov = this._fov;\n    clone.pitch = this._pitch;\n    clone.unmodified = this.unmodified;\n    clone.edgeInsets = this.edgeInsets.clone();\n    clone.calcMatrices();\n    return clone;\n  }\n\n  /**\n   * Returns if the padding params match\n   *\n   * @param {IPaddingOptions} padding\n   * @returns {boolean}\n   * @memberof Transform\n   */\n  public isPaddingEqual(padding: IPaddingOptions): boolean {\n    return this.edgeInsets.equals(padding);\n  }\n\n  /**\n   * Helper method to upadte edge-insets inplace\n   *\n   * @param {IPaddingOptions} target\n   * @param {number} t\n   * @memberof Transform\n   */\n  public interpolatePadding(\n    start: IPaddingOptions,\n    target: IPaddingOptions,\n    t: number,\n  ) {\n    this.unmodified = false;\n    this.edgeInsets.interpolate(start, target, t);\n    this.constrain();\n    this.calcMatrices();\n  }\n\n  /**\n   * Return a zoom level that will cover all tiles the transform\n   * @param {Object} options options\n   * @param {number} options.tileSize Tile size, expressed in screen pixels.\n   * @param {boolean} options.roundZoom Target zoom level. If true, the value will be rounded to the closest integer. Otherwise the value will be floored.\n   * @returns {number} zoom level An integer zoom level at which all tiles will be visible.\n   */\n  public coveringZoomLevel(options: { roundZoom?: boolean; tileSize: number }) {\n    const z = (options.roundZoom ? Math.round : Math.floor)(\n      this.zoom + this.scaleZoom(this.tileSize / options.tileSize),\n    );\n    // At negative zoom levels load tiles from z0 because negative tile zoom levels don't exist.\n    return Math.max(0, z);\n  }\n\n  /**\n   * Return any \"wrapped\" copies of a given tile coordinate that are visible\n   * in the current view.\n   *\n   * @private\n   */\n  // public getVisibleUnwrappedCoordinates(tileID: CanonicalTileID) {\n  //   const result = [new UnwrappedTileID(0, tileID)];\n  //   if (this._renderWorldCopies) {\n  //     const utl = this.pointCoordinate(new Point(0, 0));\n  //     const utr = this.pointCoordinate(new Point(this.width, 0));\n  //     const ubl = this.pointCoordinate(new Point(this.width, this.height));\n  //     const ubr = this.pointCoordinate(new Point(0, this.height));\n  //     const w0 = Math.floor(Math.min(utl.x, utr.x, ubl.x, ubr.x));\n  //     const w1 = Math.floor(Math.max(utl.x, utr.x, ubl.x, ubr.x));\n\n  //     // Add an extra copy of the world on each side to properly render ImageSources and CanvasSources.\n  //     // Both sources draw outside the tile boundaries of the tile that \"contains them\" so we need\n  //     // to add extra copies on both sides in case offscreen tiles need to draw into on-screen ones.\n  //     const extraWorldCopy = 1;\n\n  //     for (let w = w0 - extraWorldCopy; w <= w1 + extraWorldCopy; w++) {\n  //       if (w === 0) {\n  //         continue;\n  //       }\n  //       result.push(new UnwrappedTileID(w, tileID));\n  //     }\n  //   }\n  //   return result;\n  // }\n\n  /**\n   * Return all coordinates that could cover this transform for a covering\n   * zoom level.\n   * @param {Object} options\n   * @param {number} options.tileSize\n   * @param {number} options.minzoom\n   * @param {number} options.maxzoom\n   * @param {boolean} options.roundZoom\n   * @param {boolean} options.reparseOverscaled\n   * @param {boolean} options.renderWorldCopies\n   * @returns {Array<OverscaledTileID>} OverscaledTileIDs\n   * @private\n   */\n  // public coveringTiles(options: {\n  //   tileSize: number;\n  //   minzoom?: number;\n  //   maxzoom?: number;\n  //   roundZoom?: boolean;\n  //   reparseOverscaled?: boolean;\n  //   renderWorldCopies?: boolean;\n  // }): OverscaledTileID[] {\n  //   let z = this.coveringZoomLevel(options);\n  //   const actualZ = z;\n\n  //   if (options.minzoom !== undefined && z < options.minzoom) {\n  //     return [];\n  //   }\n  //   if (options.maxzoom !== undefined && z > options.maxzoom) {\n  //     z = options.maxzoom;\n  //   }\n\n  //   const centerCoord = MercatorCoordinate.fromLngLat(this.center);\n  //   const numTiles = Math.pow(2, z);\n  //   const centerPoint = [numTiles * centerCoord.x, numTiles * centerCoord.y, 0];\n  //   const cameraFrustum = Frustum.fromInvProjectionMatrix(\n  //     this.invProjMatrix,\n  //     this.worldSize,\n  //     z,\n  //   );\n\n  //   // No change of LOD behavior for pitch lower than 60 and when there is no top padding: return only tile ids from the requested zoom level\n  //   let minZoom = options.minzoom || 0;\n  //   // Use 0.1 as an epsilon to avoid for explicit == 0.0 floating point checks\n  //   if (this._pitch <= 60.0 && this.edgeInsets.top < 0.1) {\n  //     minZoom = z;\n  //   }\n\n  //   // There should always be a certain number of maximum zoom level tiles surrounding the center location\n  //   const radiusOfMaxLvlLodInTiles = 3;\n\n  //   const newRootTile = (wrap: number): any => {\n  //     return {\n  //       // All tiles are on zero elevation plane => z difference is zero\n  //       aabb: new Aabb(\n  //         [wrap * numTiles, 0, 0],\n  //         [(wrap + 1) * numTiles, numTiles, 0],\n  //       ),\n  //       zoom: 0,\n  //       x: 0,\n  //       y: 0,\n  //       wrap,\n  //       fullyVisible: false,\n  //     };\n  //   };\n\n  //   // Do a depth-first traversal to find visible tiles and proper levels of detail\n  //   const stack = [];\n  //   const result = [];\n  //   const maxZoom = z;\n  //   const overscaledZ = options.reparseOverscaled ? actualZ : z;\n\n  //   if (this._renderWorldCopies) {\n  //     // Render copy of the globe thrice on both sides\n  //     for (let i = 1; i <= 3; i++) {\n  //       stack.push(newRootTile(-i));\n  //       stack.push(newRootTile(i));\n  //     }\n  //   }\n\n  //   stack.push(newRootTile(0));\n\n  //   while (stack.length > 0) {\n  //     const it = stack.pop();\n  //     const x = it.x;\n  //     const y = it.y;\n  //     let fullyVisible = it.fullyVisible;\n\n  //     // Visibility of a tile is not required if any of its ancestor if fully inside the frustum\n  //     if (!fullyVisible) {\n  //       const intersectResult = it.aabb.intersects(cameraFrustum);\n\n  //       if (intersectResult === 0) {\n  //         continue;\n  //       }\n\n  //       fullyVisible = intersectResult === 2;\n  //     }\n\n  //     const distanceX = it.aabb.distanceX(centerPoint);\n  //     const distanceY = it.aabb.distanceY(centerPoint);\n  //     const longestDim = Math.max(Math.abs(distanceX), Math.abs(distanceY));\n\n  //     // We're using distance based heuristics to determine if a tile should be split into quadrants or not.\n  //     // radiusOfMaxLvlLodInTiles defines that there's always a certain number of maxLevel tiles next to the map center.\n  //     // Using the fact that a parent node in quadtree is twice the size of its children (per dimension)\n  //     // we can define distance thresholds for each relative level:\n  //     // f(k) = offset + 2 + 4 + 8 + 16 + ... + 2^k. This is the same as \"offset+2^(k+1)-2\"\n  //     const distToSplit =\n  //       radiusOfMaxLvlLodInTiles + (1 << (maxZoom - it.zoom)) - 2;\n\n  //     // Have we reached the target depth or is the tile too far away to be any split further?\n  //     if (\n  //       it.zoom === maxZoom ||\n  //       (longestDim > distToSplit && it.zoom >= minZoom)\n  //     ) {\n  //       result.push({\n  //         tileID: new OverscaledTileID(\n  //           it.zoom === maxZoom ? overscaledZ : it.zoom,\n  //           it.wrap,\n  //           it.zoom,\n  //           x,\n  //           y,\n  //         ),\n  //         distanceSq: vec2.sqrLen([\n  //           centerPoint[0] - 0.5 - x,\n  //           centerPoint[1] - 0.5 - y,\n  //         ]),\n  //       });\n  //       continue;\n  //     }\n\n  //     for (let i = 0; i < 4; i++) {\n  //       const childX = (x << 1) + (i % 2);\n  //       const childY = (y << 1) + (i >> 1);\n\n  //       stack.push({\n  //         aabb: it.aabb.quadrant(i),\n  //         zoom: it.zoom + 1,\n  //         x: childX,\n  //         y: childY,\n  //         wrap: it.wrap,\n  //         fullyVisible,\n  //       });\n  //     }\n  //   }\n\n  //   return result\n  //     .sort((a, b) => a.distanceSq - b.distanceSq)\n  //     .map((a) => a.tileID);\n  // }\n\n  public resize(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n\n    this.pixelsToGLUnits = [2 / width, -2 / height];\n    this.constrain();\n    this.calcMatrices();\n  }\n\n  public zoomScale(zoom: number) {\n    return Math.pow(2, zoom);\n  }\n  public scaleZoom(scale: number) {\n    return Math.log(scale) / Math.LN2;\n  }\n\n  public project(lnglat: LngLat) {\n    const lat = clamp(\n      lnglat.lat,\n      -this.maxValidLatitude,\n      this.maxValidLatitude,\n    );\n    return new Point(\n      mercatorXfromLng(lnglat.lng) * this.worldSize,\n      mercatorYfromLat(lat) * this.worldSize,\n    );\n  }\n\n  public unproject(point: Point): LngLat {\n    return new MercatorCoordinate(\n      point.x / this.worldSize,\n      point.y / this.worldSize,\n    ).toLngLat();\n  }\n\n  public setLocationAtPoint(lnglat: LngLat, point: Point) {\n    const a = this.pointCoordinate(point);\n    const b = this.pointCoordinate(this.centerPoint);\n    const loc = this.locationCoordinate(lnglat);\n    const newCenter = new MercatorCoordinate(\n      loc.x - (a.x - b.x),\n      loc.y - (a.y - b.y),\n    );\n    this.center = this.coordinateLocation(newCenter);\n    if (this._renderWorldCopies) {\n      this.center = this.center.wrap();\n    }\n  }\n\n  public pointCoordinate(p: Point) {\n    const targetZ = 0;\n    // since we don't know the correct projected z value for the point,\n    // unproject two points to get a line and then find the point on that\n    // line with z=0\n\n    const coord0 = new Float32Array([p.x, p.y, 0, 1]);\n    const coord1 = new Float32Array([p.x, p.y, 1, 1]);\n\n    vec4.transformMat4(coord0, coord0, this.pixelMatrixInverse);\n    vec4.transformMat4(coord1, coord1, this.pixelMatrixInverse);\n\n    const w0 = coord0[3];\n    const w1 = coord1[3];\n    const x0 = coord0[0] / w0;\n    const x1 = coord1[0] / w1;\n    const y0 = coord0[1] / w0;\n    const y1 = coord1[1] / w1;\n    const z0 = coord0[2] / w0;\n    const z1 = coord1[2] / w1;\n\n    const t = z0 === z1 ? 0 : (targetZ - z0) / (z1 - z0);\n\n    return new MercatorCoordinate(\n      interpolate(x0, x1, t) / this.worldSize,\n      interpolate(y0, y1, t) / this.worldSize,\n    );\n  }\n\n  /**\n   * Returns the map's geographical bounds. When the bearing or pitch is non-zero, the visible region is not\n   * an axis-aligned rectangle, and the result is the smallest bounds that encompasses the visible region.\n   * @returns {LngLatBounds} Returns a {@link LngLatBounds} object describing the map's geographical bounds.\n   */\n  public getBounds(): LngLatBounds {\n    return new LngLatBounds()\n      .extend(this.pointLocation(new Point(0, 0)))\n      .extend(this.pointLocation(new Point(this.width, 0)))\n      .extend(this.pointLocation(new Point(this.width, this.height)))\n      .extend(this.pointLocation(new Point(0, this.height)));\n  }\n\n  /**\n   * Returns the maximum geographical bounds the map is constrained to, or `null` if none set.\n   * @returns {LngLatBounds} {@link LngLatBounds}\n   */\n  public getMaxBounds(): LngLatBounds | null {\n    if (\n      !this.latRange ||\n      this.latRange.length !== 2 ||\n      !this.lngRange ||\n      this.lngRange.length !== 2\n    ) {\n      return null;\n    }\n\n    return new LngLatBounds(\n      [this.lngRange[0], this.latRange[0]],\n      [this.lngRange[1], this.latRange[1]],\n    );\n  }\n\n  /**\n   * Sets or clears the map's geographical constraints.\n   * @param {LngLatBounds} bounds A {@link LngLatBounds} object describing the new geographic boundaries of the map.\n   */\n  public setMaxBounds(bounds?: LngLatBounds) {\n    if (bounds) {\n      this.lngRange = [bounds.getWest(), bounds.getEast()];\n      this.latRange = [bounds.getSouth(), bounds.getNorth()];\n      this.constrain();\n    } else {\n      this.lngRange = undefined;\n      this.latRange = [-this.maxValidLatitude, this.maxValidLatitude];\n    }\n  }\n\n  public customLayerMatrix(): number[] {\n    return (this.mercatorMatrix as number[]).slice();\n  }\n\n  public maxPitchScaleFactor() {\n    // calcMatrices hasn't run yet\n    if (!this.pixelMatrixInverse) {\n      return 1;\n    }\n\n    const coord = this.pointCoordinate(new Point(0, 0));\n    const p = new Float32Array([\n      coord.x * this.worldSize,\n      coord.y * this.worldSize,\n      0,\n      1,\n    ]);\n    const topPoint = vec4.transformMat4(p, p, this.pixelMatrix);\n    return topPoint[3] / this.cameraToCenterDistance;\n  }\n\n  /*\n   * The camera looks at the map from a 3D (lng, lat, altitude) location. Let's use `cameraLocation`\n   * as the name for the location under the camera and on the surface of the earth (lng, lat, 0).\n   * `cameraPoint` is the projected position of the `cameraLocation`.\n   *\n   * This point is useful to us because only fill-extrusions that are between `cameraPoint` and\n   * the query point on the surface of the earth can extend and intersect the query.\n   *\n   * When the map is not pitched the `cameraPoint` is equivalent to the center of the map because\n   * the camera is right above the center of the map.\n   */\n  public getCameraPoint() {\n    const pitch = this._pitch;\n    const yOffset = Math.tan(pitch) * (this.cameraToCenterDistance || 1);\n    return this.centerPoint.add(new Point(0, yOffset));\n  }\n\n  /*\n   * When the map is pitched, some of the 3D features that intersect a query will not intersect\n   * the query at the surface of the earth. Instead the feature may be closer and only intersect\n   * the query because it extrudes into the air.\n   *\n   * This returns a geometry that includes all of the original query as well as all possible ares of the\n   * screen where the *base* of a visible extrusion could be.\n   *  - For point queries, the line from the query point to the \"camera point\"\n   *  - For other geometries, the envelope of the query geometry and the \"camera point\"\n   */\n  public getCameraQueryGeometry(queryGeometry: Point[]): Point[] {\n    const c = this.getCameraPoint();\n\n    if (queryGeometry.length === 1) {\n      return [queryGeometry[0], c];\n    } else {\n      let minX = c.x;\n      let minY = c.y;\n      let maxX = c.x;\n      let maxY = c.y;\n      for (const p of queryGeometry) {\n        minX = Math.min(minX, p.x);\n        minY = Math.min(minY, p.y);\n        maxX = Math.max(maxX, p.x);\n        maxY = Math.max(maxY, p.y);\n      }\n      return [\n        new Point(minX, minY),\n        new Point(maxX, minY),\n        new Point(maxX, maxY),\n        new Point(minX, maxY),\n        new Point(minX, minY),\n      ];\n    }\n  }\n\n  /**\n   * Given a coordinate, return the screen point that corresponds to it\n   * @param {Coordinate} coord\n   * @returns {Point} screen point\n   * @private\n   */\n  public coordinatePoint(coord: MercatorCoordinate) {\n    const p = vec4.fromValues(\n      coord.x * this.worldSize,\n      coord.y * this.worldSize,\n      0,\n      1,\n    );\n    vec4.transformMat4(p, p, this.pixelMatrix);\n    return new Point(p[0] / p[3], p[1] / p[3]);\n  }\n  /**\n   * Given a location, return the screen point that corresponds to it\n   * @param {LngLat} lnglat location\n   * @returns {Point} screen point\n   * @private\n   */\n  public locationPoint(lnglat: LngLat) {\n    return this.coordinatePoint(this.locationCoordinate(lnglat));\n  }\n\n  /**\n   * Given a point on screen, return its lnglat\n   * @param {Point} p screen point\n   * @returns {LngLat} lnglat location\n   * @private\n   */\n  public pointLocation(p: Point) {\n    // if(p.x !== 0 && p.x !== 1001) {\n    //   console.log(p.x)\n    // }\n\n    return this.coordinateLocation(this.pointCoordinate(p));\n  }\n\n  /**\n   * Given a geographical lnglat, return an unrounded\n   * coordinate that represents it at this transform's zoom level.\n   * @param {LngLat} lnglat\n   * @returns {Coordinate}\n   * @private\n   */\n  public locationCoordinate(lnglat: LngLat) {\n    return MercatorCoordinate.fromLngLat(lnglat);\n  }\n\n  /**\n   * Given a Coordinate, return its geographical position.\n   * @param {Coordinate} coord\n   * @returns {LngLat} lnglat\n   * @private\n   */\n  public coordinateLocation(coord: MercatorCoordinate) {\n    return coord.toLngLat();\n  }\n\n  public getProjectionMatrix(): mat4 {\n    return this.projMatrix;\n  }\n  /**\n   * Calculate the posMatrix that, given a tile coordinate, would be used to display the tile on a map.\n   * @param {UnwrappedTileID} unwrappedTileID;\n   * @private\n   */\n  // private calculatePosMatrix(\n  //   unwrappedTileID: UnwrappedTileID,\n  //   aligned: boolean = false,\n  // ): Float32Array {\n  //   const posMatrixKey = unwrappedTileID.key;\n  //   const cache = aligned ? this.alignedPosMatrixCache : this.posMatrixCache;\n  //   if (cache[posMatrixKey]) {\n  //     return cache[posMatrixKey];\n  //   }\n\n  //   const canonical = unwrappedTileID.canonical;\n  //   const scale = this.worldSize / this.zoomScale(canonical.z);\n  //   const unwrappedX =\n  //     canonical.x + Math.pow(2, canonical.z) * unwrappedTileID.wrap;\n\n  //   const posMatrix = mat4.identity(new Float64Array(16));\n  //   mat4.translate(posMatrix, posMatrix, [\n  //     unwrappedX * scale,\n  //     canonical.y * scale,\n  //     0,\n  //   ]);\n  //   mat4.scale(posMatrix, posMatrix, [scale / EXTENT, scale / EXTENT, 1]);\n  //   mat4.multiply(\n  //     posMatrix,\n  //     aligned ? this.alignedProjMatrix : this.projMatrix,\n  //     posMatrix,\n  //   );\n\n  //   cache[posMatrixKey] = new Float32Array(posMatrix);\n  //   return cache[posMatrixKey];\n  // }\n\n  private constrain() {\n    if (!this.center || !this.width || !this.height || this.constraining) {\n      return;\n    }\n\n    this.constraining = true;\n\n    let minY = -90;\n    let maxY = 90;\n    let minX = -180;\n    let maxX = 180;\n    let sy;\n    let sx;\n    let x2;\n    let y2;\n    const size = this.size;\n    const unmodified = this.unmodified;\n    if (this.latRange) {\n      const latRange = this.latRange;\n      minY = mercatorYfromLat(latRange[1]) * this.worldSize;\n      maxY = mercatorYfromLat(latRange[0]) * this.worldSize;\n      sy = maxY - minY < size.y ? size.y / (maxY - minY) : 0;\n    }\n\n    if (this.lngRange) {\n      const lngRange = this.lngRange;\n      minX = mercatorXfromLng(lngRange[0]) * this.worldSize;\n      maxX = mercatorXfromLng(lngRange[1]) * this.worldSize;\n      sx = maxX - minX < size.x ? size.x / (maxX - minX) : 0;\n    }\n\n    const point = this.point;\n\n    // how much the map should scale to fit the screen into given latitude/longitude ranges\n    const s = Math.max(sx || 0, sy || 0);\n\n    if (s) {\n      this.center = this.unproject(\n        new Point(\n          sx ? (maxX + minX) / 2 : point.x,\n          sy ? (maxY + minY) / 2 : point.y,\n        ),\n      );\n      if (isMini) {\n        this.zoom = Math.max(this.zoom, Math.max(-1, this.minZoom));\n      } else {\n        this.zoom += this.scaleZoom(s);\n      }\n\n      this.unmodified = unmodified;\n      this.constraining = false;\n      return;\n    }\n\n    if (this.latRange) {\n      const y = point.y;\n      const h2 = size.y / 2;\n\n      if (y - h2 < minY) {\n        y2 = minY + h2;\n      }\n      if (y + h2 > maxY) {\n        y2 = maxY - h2;\n      }\n    }\n\n    if (this.lngRange) {\n      const x = point.x;\n      const w2 = size.x / 2;\n\n      if (x - w2 < minX) {\n        x2 = minX + w2;\n      }\n      if (x + w2 > maxX) {\n        x2 = maxX - w2;\n      }\n    }\n\n    // pan the map if the screen goes off the range\n    if (x2 !== undefined || y2 !== undefined) {\n      this.center = this.unproject(\n        new Point(\n          x2 !== undefined ? x2 : point.x,\n          y2 !== undefined ? y2 : point.y,\n        ),\n      );\n    }\n\n    this.unmodified = unmodified;\n    this.constraining = false;\n  }\n\n  private calcMatrices() {\n    if (!this.height) {\n      return;\n    }\n\n    const halfFov = this._fov / 2;\n    const offset = this.centerOffset;\n    this.cameraToCenterDistance = (0.5 / Math.tan(halfFov)) * this.height;\n\n    // Find the distance from the center point [width/2 + offset.x, height/2 + offset.y] to the\n    // center top point [width/2 + offset.x, 0] in Z units, using the law of sines.\n    // 1 Z unit is equivalent to 1 horizontal px at the center of the map\n    // (the distance between[width/2, height/2] and [width/2 + 1, height/2])\n    const groundAngle = Math.PI / 2 + this._pitch;\n    const fovAboveCenter = this._fov * (0.5 + offset.y / this.height);\n    const topHalfSurfaceDistance =\n      (Math.sin(fovAboveCenter) * this.cameraToCenterDistance) /\n      Math.sin(\n        clamp(Math.PI - groundAngle - fovAboveCenter, 0.01, Math.PI - 0.01),\n      );\n    const point = this.point;\n    const x = point.x;\n    const y = point.y;\n\n    // Calculate z distance of the farthest fragment that should be rendered.\n    const furthestDistance =\n      Math.cos(Math.PI / 2 - this._pitch) * topHalfSurfaceDistance +\n      this.cameraToCenterDistance;\n    // Add a bit extra to avoid precision problems when a fragment's distance is exactly `furthestDistance`\n    const farZ = furthestDistance * 1.01;\n\n    // The larger the value of nearZ is\n    // - the more depth precision is available for features (good)\n    // - clipping starts appearing sooner when the camera is close to 3d features (bad)\n    //\n    // Smaller values worked well for mapbox-gl-js but deckgl was encountering precision issues\n    // when rendering it's layers using custom layers. This value was experimentally chosen and\n    // seems to solve z-fighting issues in deckgl while not clipping buildings too close to the camera.\n    const nearZ = this.height / 50;\n\n    // matrix for conversion from location to GL coordinates (-1 .. 1)\n    // TODO: 使用 Float64Array 的原因是为了避免计算精度问题、 mat4.create() 默认使用 Float32Array\n    let m = new Float64Array(16);\n    // @ts-ignore\n    mat4.perspective(m, this._fov, this.width / this.height, nearZ, farZ);\n\n    // Apply center of perspective offset\n    m[8] = (-offset.x * 2) / this.width;\n    m[9] = (offset.y * 2) / this.height;\n\n    // @ts-ignore\n    mat4.scale(m, m, [1, -1, 1]);\n    // @ts-ignore\n    mat4.translate(m, m, [0, 0, -this.cameraToCenterDistance]);\n    // @ts-ignore\n    mat4.rotateX(m, m, this._pitch);\n    // @ts-ignore\n    mat4.rotateZ(m, m, this.angle);\n    // @ts-ignore\n    mat4.translate(m, m, [-x, -y, 0]);\n\n    // The mercatorMatrix can be used to transform points from mercator coordinates\n    // ([0, 0] nw, [1, 1] se) to GL coordinates.\n    // @ts-ignore\n    this.mercatorMatrix = mat4.scale([], m, [\n      this.worldSize,\n      this.worldSize,\n      this.worldSize,\n    ]);\n    // scale vertically to meters per pixel (inverse of ground resolution):\n\n    // @ts-ignore\n    mat4.scale(m, m, [\n      1,\n      1,\n      mercatorZfromAltitude(1, this.center.lat) * this.worldSize,\n      1,\n    ]);\n    // @ts-ignore\n    this.projMatrix = m;\n    // @ts-ignore\n    this.invProjMatrix = mat4.invert([], this.projMatrix);\n\n    // Make a second projection matrix that is aligned to a pixel grid for rendering raster tiles.\n    // We're rounding the (floating point) x/y values to achieve to avoid rendering raster images to fractional\n    // coordinates. Additionally, we adjust by half a pixel in either direction in case that viewport dimension\n    // is an odd integer to preserve rendering to the pixel grid. We're rotating this shift based on the angle\n    // of the transformation so that 0°, 90°, 180°, and 270° rasters are crisp, and adjust the shift so that\n    // it is always <= 0.5 pixels.\n    const xShift = (this.width % 2) / 2;\n    const yShift = (this.height % 2) / 2;\n    const angleCos = Math.cos(this.angle);\n    const angleSin = Math.sin(this.angle);\n    const dx = x - Math.round(x) + angleCos * xShift + angleSin * yShift;\n    const dy = y - Math.round(y) + angleCos * yShift + angleSin * xShift;\n    // const alignedM = mat4.clone(m);\n    const alignedM = new Float64Array(m);\n    // @ts-ignore\n    mat4.translate(alignedM, alignedM, [\n      dx > 0.5 ? dx - 1 : dx,\n      dy > 0.5 ? dy - 1 : dy,\n      0,\n    ]);\n    // @ts-ignore\n    this.alignedProjMatrix = alignedM;\n\n    // @ts-ignore\n    m = mat4.create();\n    // @ts-ignore\n    mat4.scale(m, m, [this.width / 2, -this.height / 2, 1]);\n    // @ts-ignore\n    mat4.translate(m, m, [1, -1, 0]);\n    // @ts-ignore\n    this.labelPlaneMatrix = m;\n\n    // @ts-ignore\n    m = mat4.create();\n    // @ts-ignore\n    mat4.scale(m, m, [1, -1, 1]);\n    // @ts-ignore\n    mat4.translate(m, m, [-1, -1, 0]);\n    // @ts-ignore\n    mat4.scale(m, m, [2 / this.width, 2 / this.height, 1]);\n    // @ts-ignore\n    this.glCoordMatrix = m;\n\n    // matrix for conversion from location to screen coordinates\n    this.pixelMatrix = mat4.multiply(\n      // @ts-ignore\n      new Float64Array(16),\n      this.labelPlaneMatrix,\n      this.projMatrix,\n    );\n\n    // inverse matrix for conversion from screen coordinaes to location\n    // @ts-ignore\n    m = mat4.invert(new Float64Array(16), this.pixelMatrix);\n    if (!m) {\n      throw new Error('failed to invert matrix');\n    }\n    // @ts-ignore\n    this.pixelMatrixInverse = m;\n\n    this.posMatrixCache = {};\n    this.alignedPosMatrixCache = {};\n  }\n}\n"]},"metadata":{},"sourceType":"module"}