{"ast":null,"code":"import { Util } from '../../global/util';\nimport { Point } from '../../geometry';\nimport { View } from '../../view/view';\nimport { ToolsView } from '../../view/tool';\nexport class Vertices extends ToolsView.ToolItem {\n  constructor() {\n    super(...arguments);\n    this.handles = [];\n  }\n\n  get vertices() {\n    return this.cellView.cell.getVertices();\n  }\n\n  onRender() {\n    this.addClass(this.prefixClassName('edge-tool-vertices'));\n\n    if (this.options.addable) {\n      this.updatePath();\n    }\n\n    this.resetHandles();\n    this.renderHandles();\n    return this;\n  }\n\n  update() {\n    const vertices = this.vertices;\n\n    if (vertices.length === this.handles.length) {\n      this.updateHandles();\n    } else {\n      this.resetHandles();\n      this.renderHandles();\n    }\n\n    if (this.options.addable) {\n      this.updatePath();\n    }\n\n    return this;\n  }\n\n  resetHandles() {\n    const handles = this.handles;\n    this.handles = [];\n\n    if (handles) {\n      handles.forEach(handle => {\n        this.stopHandleListening(handle);\n        handle.remove();\n      });\n    }\n  }\n\n  renderHandles() {\n    const vertices = this.vertices;\n\n    for (let i = 0, l = vertices.length; i < l; i += 1) {\n      const vertex = vertices[i];\n      const createHandle = this.options.createHandle;\n      const processHandle = this.options.processHandle;\n      const handle = createHandle({\n        index: i,\n        graph: this.graph,\n        guard: evt => this.guard(evt),\n        attrs: this.options.attrs || {}\n      });\n\n      if (processHandle) {\n        processHandle(handle);\n      }\n\n      this.graph.hook.onToolItemCreated({\n        name: 'vertices',\n        cell: this.cell,\n        view: this.cellView,\n        tool: handle\n      });\n      handle.updatePosition(vertex.x, vertex.y);\n      this.stamp(handle.container);\n      this.container.appendChild(handle.container);\n      this.handles.push(handle);\n      this.startHandleListening(handle);\n    }\n  }\n\n  updateHandles() {\n    const vertices = this.vertices;\n\n    for (let i = 0, l = vertices.length; i < l; i += 1) {\n      const vertex = vertices[i];\n      const handle = this.handles[i];\n\n      if (handle) {\n        handle.updatePosition(vertex.x, vertex.y);\n      }\n    }\n  }\n\n  updatePath() {\n    const connection = this.childNodes.connection;\n\n    if (connection) {\n      connection.setAttribute('d', this.cellView.getConnectionPathData());\n    }\n  }\n\n  startHandleListening(handle) {\n    const edgeView = this.cellView;\n\n    if (edgeView.can('vertexMovable')) {\n      handle.on('change', this.onHandleChange, this);\n      handle.on('changing', this.onHandleChanging, this);\n      handle.on('changed', this.onHandleChanged, this);\n    }\n\n    if (edgeView.can('vertexDeletable')) {\n      handle.on('remove', this.onHandleRemove, this);\n    }\n  }\n\n  stopHandleListening(handle) {\n    const edgeView = this.cellView;\n\n    if (edgeView.can('vertexMovable')) {\n      handle.off('change', this.onHandleChange, this);\n      handle.off('changing', this.onHandleChanging, this);\n      handle.off('changed', this.onHandleChanged, this);\n    }\n\n    if (edgeView.can('vertexDeletable')) {\n      handle.off('remove', this.onHandleRemove, this);\n    }\n  }\n\n  getNeighborPoints(index) {\n    const edgeView = this.cellView;\n    const vertices = this.vertices;\n    const prev = index > 0 ? vertices[index - 1] : edgeView.sourceAnchor;\n    const next = index < vertices.length - 1 ? vertices[index + 1] : edgeView.targetAnchor;\n    return {\n      prev: Point.create(prev),\n      next: Point.create(next)\n    };\n  }\n\n  getMouseEventArgs(evt) {\n    const e = this.normalizeEvent(evt);\n    const {\n      x,\n      y\n    } = this.graph.snapToGrid(e.clientX, e.clientY);\n    return {\n      e,\n      x,\n      y\n    };\n  }\n\n  onHandleChange(_ref) {\n    let {\n      e\n    } = _ref;\n    this.focus();\n    const edgeView = this.cellView;\n    edgeView.cell.startBatch('move-vertex', {\n      ui: true,\n      toolId: this.cid\n    });\n\n    if (!this.options.stopPropagation) {\n      const {\n        e: evt,\n        x,\n        y\n      } = this.getMouseEventArgs(e);\n      edgeView.notifyMouseDown(evt, x, y);\n    }\n  }\n\n  onHandleChanging(_ref2) {\n    let {\n      handle,\n      e\n    } = _ref2;\n    const edgeView = this.cellView;\n    const index = handle.options.index;\n    const {\n      e: evt,\n      x,\n      y\n    } = this.getMouseEventArgs(e);\n    const vertex = {\n      x,\n      y\n    };\n    this.snapVertex(vertex, index);\n    edgeView.cell.setVertexAt(index, vertex, {\n      ui: true,\n      toolId: this.cid\n    });\n    handle.updatePosition(vertex.x, vertex.y);\n\n    if (!this.options.stopPropagation) {\n      edgeView.notifyMouseMove(evt, x, y);\n    }\n  }\n\n  onHandleChanged(_ref3) {\n    let {\n      e\n    } = _ref3;\n    const options = this.options;\n    const edgeView = this.cellView;\n\n    if (options.addable) {\n      this.updatePath();\n    }\n\n    if (!options.removeRedundancies) {\n      return;\n    }\n\n    const verticesRemoved = edgeView.removeRedundantLinearVertices({\n      ui: true,\n      toolId: this.cid\n    });\n\n    if (verticesRemoved) {\n      this.render();\n    }\n\n    this.blur();\n    edgeView.cell.stopBatch('move-vertex', {\n      ui: true,\n      toolId: this.cid\n    });\n\n    if (this.eventData(e).vertexAdded) {\n      edgeView.cell.stopBatch('add-vertex', {\n        ui: true,\n        toolId: this.cid\n      });\n    }\n\n    const {\n      e: evt,\n      x,\n      y\n    } = this.getMouseEventArgs(e);\n\n    if (!this.options.stopPropagation) {\n      edgeView.notifyMouseUp(evt, x, y);\n    }\n\n    edgeView.checkMouseleave(evt);\n    options.onChanged && options.onChanged({\n      edge: edgeView.cell,\n      edgeView\n    });\n  }\n\n  snapVertex(vertex, index) {\n    const snapRadius = this.options.snapRadius || 0;\n\n    if (snapRadius > 0) {\n      const neighbors = this.getNeighborPoints(index);\n      const prev = neighbors.prev;\n      const next = neighbors.next;\n\n      if (Math.abs(vertex.x - prev.x) < snapRadius) {\n        vertex.x = prev.x;\n      } else if (Math.abs(vertex.x - next.x) < snapRadius) {\n        vertex.x = next.x;\n      }\n\n      if (Math.abs(vertex.y - prev.y) < snapRadius) {\n        vertex.y = neighbors.prev.y;\n      } else if (Math.abs(vertex.y - next.y) < snapRadius) {\n        vertex.y = next.y;\n      }\n    }\n  }\n\n  onHandleRemove(_ref4) {\n    let {\n      handle,\n      e\n    } = _ref4;\n\n    if (this.options.removable) {\n      const index = handle.options.index;\n      const edgeView = this.cellView;\n      edgeView.cell.removeVertexAt(index, {\n        ui: true\n      });\n\n      if (this.options.addable) {\n        this.updatePath();\n      }\n\n      edgeView.checkMouseleave(this.normalizeEvent(e));\n    }\n  }\n\n  onPathMouseDown(evt) {\n    const edgeView = this.cellView;\n\n    if (this.guard(evt) || !this.options.addable || !edgeView.can('vertexAddable')) {\n      return;\n    }\n\n    evt.stopPropagation();\n    evt.preventDefault();\n    const e = this.normalizeEvent(evt);\n    const vertex = this.graph.snapToGrid(e.clientX, e.clientY).toJSON();\n    edgeView.cell.startBatch('add-vertex', {\n      ui: true,\n      toolId: this.cid\n    });\n    const index = edgeView.getVertexIndex(vertex.x, vertex.y);\n    this.snapVertex(vertex, index);\n    edgeView.cell.setVertexAt(index, vertex, {\n      ui: true,\n      toolId: this.cid\n    });\n    this.render();\n    const handle = this.handles[index];\n    this.eventData(e, {\n      vertexAdded: true\n    });\n    handle.onMouseDown(e);\n  }\n\n  onRemove() {\n    this.resetHandles();\n  }\n\n}\n\n(function (Vertices) {\n  class Handle extends View {\n    constructor(options) {\n      super();\n      this.options = options;\n      this.render();\n      this.delegateEvents({\n        mousedown: 'onMouseDown',\n        touchstart: 'onMouseDown',\n        dblclick: 'onDoubleClick'\n      });\n    }\n\n    get graph() {\n      return this.options.graph;\n    }\n\n    render() {\n      this.container = View.createElement('circle', true);\n      const attrs = this.options.attrs;\n\n      if (typeof attrs === 'function') {\n        const defaults = Vertices.getDefaults();\n        this.setAttrs(Object.assign(Object.assign({}, defaults.attrs), attrs(this)));\n      } else {\n        this.setAttrs(attrs);\n      }\n\n      this.addClass(this.prefixClassName('edge-tool-vertex'));\n    }\n\n    updatePosition(x, y) {\n      this.setAttrs({\n        cx: x,\n        cy: y\n      });\n    }\n\n    onMouseDown(evt) {\n      if (this.options.guard(evt)) {\n        return;\n      }\n\n      evt.stopPropagation();\n      evt.preventDefault();\n      this.graph.view.undelegateEvents();\n      this.delegateDocumentEvents({\n        mousemove: 'onMouseMove',\n        touchmove: 'onMouseMove',\n        mouseup: 'onMouseUp',\n        touchend: 'onMouseUp',\n        touchcancel: 'onMouseUp'\n      }, evt.data);\n      this.emit('change', {\n        e: evt,\n        handle: this\n      });\n    }\n\n    onMouseMove(evt) {\n      this.emit('changing', {\n        e: evt,\n        handle: this\n      });\n    }\n\n    onMouseUp(evt) {\n      this.emit('changed', {\n        e: evt,\n        handle: this\n      });\n      this.undelegateDocumentEvents();\n      this.graph.view.delegateEvents();\n    }\n\n    onDoubleClick(evt) {\n      this.emit('remove', {\n        e: evt,\n        handle: this\n      });\n    }\n\n  }\n\n  Vertices.Handle = Handle;\n})(Vertices || (Vertices = {}));\n\n(function (Vertices) {\n  const pathClassName = Util.prefix('edge-tool-vertex-path');\n  Vertices.config({\n    name: 'vertices',\n    snapRadius: 20,\n    addable: true,\n    removable: true,\n    removeRedundancies: true,\n    stopPropagation: true,\n    attrs: {\n      r: 6,\n      fill: '#333',\n      stroke: '#fff',\n      cursor: 'move',\n      'stroke-width': 2\n    },\n    createHandle: options => new Vertices.Handle(options),\n    markup: [{\n      tagName: 'path',\n      selector: 'connection',\n      className: pathClassName,\n      attrs: {\n        fill: 'none',\n        stroke: 'transparent',\n        'stroke-width': 10,\n        cursor: 'pointer'\n      }\n    }],\n    events: {\n      [`mousedown .${pathClassName}`]: 'onPathMouseDown',\n      [`touchstart .${pathClassName}`]: 'onPathMouseDown'\n    }\n  });\n})(Vertices || (Vertices = {}));","map":{"version":3,"sources":["../../../src/registry/tool/vertices.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Util } from '../../global/util';\nimport { Point } from '../../geometry';\nimport { View } from '../../view/view';\nimport { ToolsView } from '../../view/tool';\nexport class Vertices extends ToolsView.ToolItem {\n    constructor() {\n        super(...arguments);\n        this.handles = [];\n    }\n    get vertices() {\n        return this.cellView.cell.getVertices();\n    }\n    onRender() {\n        this.addClass(this.prefixClassName('edge-tool-vertices'));\n        if (this.options.addable) {\n            this.updatePath();\n        }\n        this.resetHandles();\n        this.renderHandles();\n        return this;\n    }\n    update() {\n        const vertices = this.vertices;\n        if (vertices.length === this.handles.length) {\n            this.updateHandles();\n        }\n        else {\n            this.resetHandles();\n            this.renderHandles();\n        }\n        if (this.options.addable) {\n            this.updatePath();\n        }\n        return this;\n    }\n    resetHandles() {\n        const handles = this.handles;\n        this.handles = [];\n        if (handles) {\n            handles.forEach((handle) => {\n                this.stopHandleListening(handle);\n                handle.remove();\n            });\n        }\n    }\n    renderHandles() {\n        const vertices = this.vertices;\n        for (let i = 0, l = vertices.length; i < l; i += 1) {\n            const vertex = vertices[i];\n            const createHandle = this.options.createHandle;\n            const processHandle = this.options.processHandle;\n            const handle = createHandle({\n                index: i,\n                graph: this.graph,\n                guard: (evt) => this.guard(evt),\n                attrs: this.options.attrs || {},\n            });\n            if (processHandle) {\n                processHandle(handle);\n            }\n            this.graph.hook.onToolItemCreated({\n                name: 'vertices',\n                cell: this.cell,\n                view: this.cellView,\n                tool: handle,\n            });\n            handle.updatePosition(vertex.x, vertex.y);\n            this.stamp(handle.container);\n            this.container.appendChild(handle.container);\n            this.handles.push(handle);\n            this.startHandleListening(handle);\n        }\n    }\n    updateHandles() {\n        const vertices = this.vertices;\n        for (let i = 0, l = vertices.length; i < l; i += 1) {\n            const vertex = vertices[i];\n            const handle = this.handles[i];\n            if (handle) {\n                handle.updatePosition(vertex.x, vertex.y);\n            }\n        }\n    }\n    updatePath() {\n        const connection = this.childNodes.connection;\n        if (connection) {\n            connection.setAttribute('d', this.cellView.getConnectionPathData());\n        }\n    }\n    startHandleListening(handle) {\n        const edgeView = this.cellView;\n        if (edgeView.can('vertexMovable')) {\n            handle.on('change', this.onHandleChange, this);\n            handle.on('changing', this.onHandleChanging, this);\n            handle.on('changed', this.onHandleChanged, this);\n        }\n        if (edgeView.can('vertexDeletable')) {\n            handle.on('remove', this.onHandleRemove, this);\n        }\n    }\n    stopHandleListening(handle) {\n        const edgeView = this.cellView;\n        if (edgeView.can('vertexMovable')) {\n            handle.off('change', this.onHandleChange, this);\n            handle.off('changing', this.onHandleChanging, this);\n            handle.off('changed', this.onHandleChanged, this);\n        }\n        if (edgeView.can('vertexDeletable')) {\n            handle.off('remove', this.onHandleRemove, this);\n        }\n    }\n    getNeighborPoints(index) {\n        const edgeView = this.cellView;\n        const vertices = this.vertices;\n        const prev = index > 0 ? vertices[index - 1] : edgeView.sourceAnchor;\n        const next = index < vertices.length - 1 ? vertices[index + 1] : edgeView.targetAnchor;\n        return {\n            prev: Point.create(prev),\n            next: Point.create(next),\n        };\n    }\n    getMouseEventArgs(evt) {\n        const e = this.normalizeEvent(evt);\n        const { x, y } = this.graph.snapToGrid(e.clientX, e.clientY);\n        return { e, x, y };\n    }\n    onHandleChange({ e }) {\n        this.focus();\n        const edgeView = this.cellView;\n        edgeView.cell.startBatch('move-vertex', { ui: true, toolId: this.cid });\n        if (!this.options.stopPropagation) {\n            const { e: evt, x, y } = this.getMouseEventArgs(e);\n            edgeView.notifyMouseDown(evt, x, y);\n        }\n    }\n    onHandleChanging({ handle, e, }) {\n        const edgeView = this.cellView;\n        const index = handle.options.index;\n        const { e: evt, x, y } = this.getMouseEventArgs(e);\n        const vertex = { x, y };\n        this.snapVertex(vertex, index);\n        edgeView.cell.setVertexAt(index, vertex, { ui: true, toolId: this.cid });\n        handle.updatePosition(vertex.x, vertex.y);\n        if (!this.options.stopPropagation) {\n            edgeView.notifyMouseMove(evt, x, y);\n        }\n    }\n    onHandleChanged({ e }) {\n        const options = this.options;\n        const edgeView = this.cellView;\n        if (options.addable) {\n            this.updatePath();\n        }\n        if (!options.removeRedundancies) {\n            return;\n        }\n        const verticesRemoved = edgeView.removeRedundantLinearVertices({\n            ui: true,\n            toolId: this.cid,\n        });\n        if (verticesRemoved) {\n            this.render();\n        }\n        this.blur();\n        edgeView.cell.stopBatch('move-vertex', { ui: true, toolId: this.cid });\n        if (this.eventData(e).vertexAdded) {\n            edgeView.cell.stopBatch('add-vertex', { ui: true, toolId: this.cid });\n        }\n        const { e: evt, x, y } = this.getMouseEventArgs(e);\n        if (!this.options.stopPropagation) {\n            edgeView.notifyMouseUp(evt, x, y);\n        }\n        edgeView.checkMouseleave(evt);\n        options.onChanged && options.onChanged({ edge: edgeView.cell, edgeView });\n    }\n    snapVertex(vertex, index) {\n        const snapRadius = this.options.snapRadius || 0;\n        if (snapRadius > 0) {\n            const neighbors = this.getNeighborPoints(index);\n            const prev = neighbors.prev;\n            const next = neighbors.next;\n            if (Math.abs(vertex.x - prev.x) < snapRadius) {\n                vertex.x = prev.x;\n            }\n            else if (Math.abs(vertex.x - next.x) < snapRadius) {\n                vertex.x = next.x;\n            }\n            if (Math.abs(vertex.y - prev.y) < snapRadius) {\n                vertex.y = neighbors.prev.y;\n            }\n            else if (Math.abs(vertex.y - next.y) < snapRadius) {\n                vertex.y = next.y;\n            }\n        }\n    }\n    onHandleRemove({ handle, e }) {\n        if (this.options.removable) {\n            const index = handle.options.index;\n            const edgeView = this.cellView;\n            edgeView.cell.removeVertexAt(index, { ui: true });\n            if (this.options.addable) {\n                this.updatePath();\n            }\n            edgeView.checkMouseleave(this.normalizeEvent(e));\n        }\n    }\n    onPathMouseDown(evt) {\n        const edgeView = this.cellView;\n        if (this.guard(evt) ||\n            !this.options.addable ||\n            !edgeView.can('vertexAddable')) {\n            return;\n        }\n        evt.stopPropagation();\n        evt.preventDefault();\n        const e = this.normalizeEvent(evt);\n        const vertex = this.graph.snapToGrid(e.clientX, e.clientY).toJSON();\n        edgeView.cell.startBatch('add-vertex', { ui: true, toolId: this.cid });\n        const index = edgeView.getVertexIndex(vertex.x, vertex.y);\n        this.snapVertex(vertex, index);\n        edgeView.cell.setVertexAt(index, vertex, {\n            ui: true,\n            toolId: this.cid,\n        });\n        this.render();\n        const handle = this.handles[index];\n        this.eventData(e, { vertexAdded: true });\n        handle.onMouseDown(e);\n    }\n    onRemove() {\n        this.resetHandles();\n    }\n}\n(function (Vertices) {\n    class Handle extends View {\n        constructor(options) {\n            super();\n            this.options = options;\n            this.render();\n            this.delegateEvents({\n                mousedown: 'onMouseDown',\n                touchstart: 'onMouseDown',\n                dblclick: 'onDoubleClick',\n            });\n        }\n        get graph() {\n            return this.options.graph;\n        }\n        render() {\n            this.container = View.createElement('circle', true);\n            const attrs = this.options.attrs;\n            if (typeof attrs === 'function') {\n                const defaults = Vertices.getDefaults();\n                this.setAttrs(Object.assign(Object.assign({}, defaults.attrs), attrs(this)));\n            }\n            else {\n                this.setAttrs(attrs);\n            }\n            this.addClass(this.prefixClassName('edge-tool-vertex'));\n        }\n        updatePosition(x, y) {\n            this.setAttrs({ cx: x, cy: y });\n        }\n        onMouseDown(evt) {\n            if (this.options.guard(evt)) {\n                return;\n            }\n            evt.stopPropagation();\n            evt.preventDefault();\n            this.graph.view.undelegateEvents();\n            this.delegateDocumentEvents({\n                mousemove: 'onMouseMove',\n                touchmove: 'onMouseMove',\n                mouseup: 'onMouseUp',\n                touchend: 'onMouseUp',\n                touchcancel: 'onMouseUp',\n            }, evt.data);\n            this.emit('change', { e: evt, handle: this });\n        }\n        onMouseMove(evt) {\n            this.emit('changing', { e: evt, handle: this });\n        }\n        onMouseUp(evt) {\n            this.emit('changed', { e: evt, handle: this });\n            this.undelegateDocumentEvents();\n            this.graph.view.delegateEvents();\n        }\n        onDoubleClick(evt) {\n            this.emit('remove', { e: evt, handle: this });\n        }\n    }\n    Vertices.Handle = Handle;\n})(Vertices || (Vertices = {}));\n(function (Vertices) {\n    const pathClassName = Util.prefix('edge-tool-vertex-path');\n    Vertices.config({\n        name: 'vertices',\n        snapRadius: 20,\n        addable: true,\n        removable: true,\n        removeRedundancies: true,\n        stopPropagation: true,\n        attrs: {\n            r: 6,\n            fill: '#333',\n            stroke: '#fff',\n            cursor: 'move',\n            'stroke-width': 2,\n        },\n        createHandle: (options) => new Vertices.Handle(options),\n        markup: [\n            {\n                tagName: 'path',\n                selector: 'connection',\n                className: pathClassName,\n                attrs: {\n                    fill: 'none',\n                    stroke: 'transparent',\n                    'stroke-width': 10,\n                    cursor: 'pointer',\n                },\n            },\n        ],\n        events: {\n            [`mousedown .${pathClassName}`]: 'onPathMouseDown',\n            [`touchstart .${pathClassName}`]: 'onPathMouseDown',\n        },\n    });\n})(Vertices || (Vertices = {}));\n//# sourceMappingURL=vertices.js.map"]},"metadata":{},"sourceType":"module"}