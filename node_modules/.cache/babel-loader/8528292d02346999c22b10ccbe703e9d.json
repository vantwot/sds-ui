{"ast":null,"code":"import _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { ArrayExt } from '../../util';\nimport { Config } from '../../global/config';\nimport { Graph } from '../../graph/graph';\nimport { Model } from '../../model/model';\nexport var Clipboard = /*#__PURE__*/function () {\n  function Clipboard() {\n    _classCallCheck(this, Clipboard);\n\n    this.cells = [];\n  }\n\n  _createClass(Clipboard, [{\n    key: \"copy\",\n    value: function copy(cells, graph) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.options = Object.assign({}, options);\n      var model = Model.isModel(graph) ? graph : graph.model;\n      var cloned = model.cloneSubGraph(cells, options); // sort asc by cell type\n\n      this.cells = ArrayExt.sortBy(Object.keys(cloned).map(function (key) {\n        return cloned[key];\n      }), function (cell) {\n        return cell.isEdge() ? 2 : 1;\n      });\n      this.serialize(options);\n    }\n  }, {\n    key: \"cut\",\n    value: function cut(cells, graph) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.copy(cells, graph, options);\n      var model = Graph.isGraph(graph) ? graph.model : graph;\n      model.batchUpdate('cut', function () {\n        cells.forEach(function (cell) {\n          return cell.remove();\n        });\n      });\n    }\n  }, {\n    key: \"paste\",\n    value: function paste(graph) {\n      var _this = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var localOptions = Object.assign(Object.assign({}, this.options), options);\n      var offset = localOptions.offset,\n          edgeProps = localOptions.edgeProps,\n          nodeProps = localOptions.nodeProps;\n      var dx = 20;\n      var dy = 20;\n\n      if (offset) {\n        dx = typeof offset === 'number' ? offset : offset.dx;\n        dy = typeof offset === 'number' ? offset : offset.dy;\n      }\n\n      this.deserialize(localOptions);\n      var cells = this.cells;\n      cells.forEach(function (cell) {\n        cell.model = null;\n        cell.removeProp('zIndex');\n\n        if (dx || dy) {\n          cell.translate(dx, dy);\n        }\n\n        if (nodeProps && cell.isNode()) {\n          cell.prop(nodeProps);\n        }\n\n        if (edgeProps && cell.isEdge()) {\n          cell.prop(edgeProps);\n        }\n      });\n      var model = Graph.isGraph(graph) ? graph.model : graph;\n      model.batchUpdate('paste', function () {\n        model.addCells(_this.cells);\n      });\n      this.copy(cells, graph, options);\n      return cells;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(options) {\n      if (options.useLocalStorage !== false) {\n        Storage.save(this.cells);\n      }\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(options) {\n      if (options.useLocalStorage) {\n        var cells = Storage.fetch();\n\n        if (cells) {\n          this.cells = cells;\n        }\n      }\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.cells.length <= 0;\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.options = {};\n      this.cells = [];\n      Storage.clean();\n    }\n  }]);\n\n  return Clipboard;\n}();\nvar Storage;\n\n(function (Storage) {\n  var LOCAL_STORAGE_KEY = \"\".concat(Config.prefixCls, \".clipboard.cells\");\n\n  function save(cells) {\n    if (window.localStorage) {\n      var data = cells.map(function (cell) {\n        return cell.toJSON();\n      });\n      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(data));\n    }\n  }\n\n  Storage.save = save;\n\n  function fetch() {\n    if (window.localStorage) {\n      var raw = localStorage.getItem(LOCAL_STORAGE_KEY);\n      var cells = raw ? JSON.parse(raw) : [];\n\n      if (cells) {\n        return Model.fromJSON(cells);\n      }\n    }\n  }\n\n  Storage.fetch = fetch;\n\n  function clean() {\n    if (window.localStorage) {\n      localStorage.removeItem(LOCAL_STORAGE_KEY);\n    }\n  }\n\n  Storage.clean = clean;\n})(Storage || (Storage = {}));","map":{"version":3,"sources":["../../../src/addon/clipboard/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { ArrayExt } from '../../util';\nimport { Config } from '../../global/config';\nimport { Graph } from '../../graph/graph';\nimport { Model } from '../../model/model';\nexport class Clipboard {\n    constructor() {\n        this.cells = [];\n    }\n    copy(cells, graph, options = {}) {\n        this.options = Object.assign({}, options);\n        const model = Model.isModel(graph) ? graph : graph.model;\n        const cloned = model.cloneSubGraph(cells, options);\n        // sort asc by cell type\n        this.cells = ArrayExt.sortBy(Object.keys(cloned).map((key) => cloned[key]), (cell) => (cell.isEdge() ? 2 : 1));\n        this.serialize(options);\n    }\n    cut(cells, graph, options = {}) {\n        this.copy(cells, graph, options);\n        const model = Graph.isGraph(graph) ? graph.model : graph;\n        model.batchUpdate('cut', () => {\n            cells.forEach((cell) => cell.remove());\n        });\n    }\n    paste(graph, options = {}) {\n        const localOptions = Object.assign(Object.assign({}, this.options), options);\n        const { offset, edgeProps, nodeProps } = localOptions;\n        let dx = 20;\n        let dy = 20;\n        if (offset) {\n            dx = typeof offset === 'number' ? offset : offset.dx;\n            dy = typeof offset === 'number' ? offset : offset.dy;\n        }\n        this.deserialize(localOptions);\n        const cells = this.cells;\n        cells.forEach((cell) => {\n            cell.model = null;\n            cell.removeProp('zIndex');\n            if (dx || dy) {\n                cell.translate(dx, dy);\n            }\n            if (nodeProps && cell.isNode()) {\n                cell.prop(nodeProps);\n            }\n            if (edgeProps && cell.isEdge()) {\n                cell.prop(edgeProps);\n            }\n        });\n        const model = Graph.isGraph(graph) ? graph.model : graph;\n        model.batchUpdate('paste', () => {\n            model.addCells(this.cells);\n        });\n        this.copy(cells, graph, options);\n        return cells;\n    }\n    serialize(options) {\n        if (options.useLocalStorage !== false) {\n            Storage.save(this.cells);\n        }\n    }\n    deserialize(options) {\n        if (options.useLocalStorage) {\n            const cells = Storage.fetch();\n            if (cells) {\n                this.cells = cells;\n            }\n        }\n    }\n    isEmpty() {\n        return this.cells.length <= 0;\n    }\n    clean() {\n        this.options = {};\n        this.cells = [];\n        Storage.clean();\n    }\n}\nvar Storage;\n(function (Storage) {\n    const LOCAL_STORAGE_KEY = `${Config.prefixCls}.clipboard.cells`;\n    function save(cells) {\n        if (window.localStorage) {\n            const data = cells.map((cell) => cell.toJSON());\n            localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(data));\n        }\n    }\n    Storage.save = save;\n    function fetch() {\n        if (window.localStorage) {\n            const raw = localStorage.getItem(LOCAL_STORAGE_KEY);\n            const cells = raw ? JSON.parse(raw) : [];\n            if (cells) {\n                return Model.fromJSON(cells);\n            }\n        }\n    }\n    Storage.fetch = fetch;\n    function clean() {\n        if (window.localStorage) {\n            localStorage.removeItem(LOCAL_STORAGE_KEY);\n        }\n    }\n    Storage.clean = clean;\n})(Storage || (Storage = {}));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}