{"ast":null,"code":"import get from 'lodash/get'; // 根据依赖字段生成 FormItem 的 updater\n\nexport function makeUpdaterByDependencies(dependencies, setReasonField) {\n  return (prevValues, currentValues) => {\n    const hasFunctionDep = dependencies.some(dep => typeof (dep === null || dep === void 0 ? void 0 : dep.condition) === 'function');\n\n    if (hasFunctionDep) {\n      if (typeof setReasonField === 'function') {\n        setReasonField(undefined); // 在更新规则是一个函数时，不依赖特定字段进行更新(即只要有字段的值更新了就更新，因为不知道函数内部依赖什么字段)\n      }\n\n      return true;\n    }\n\n    return dependencies.some(dep => {\n      const {\n        name\n      } = dep;\n\n      if (!name) {\n        // eslint-disable-next-line no-console\n        console.error(`[Schema form]: A dependent name must be provided in the updater when the dependency condition is not a function.`);\n        return false;\n      }\n\n      const changed = get(prevValues, name) !== get(currentValues, name);\n\n      if (changed) {\n        if (typeof setReasonField === 'function') {\n          setReasonField(name);\n        }\n\n        return true;\n      }\n\n      return false;\n    });\n  };\n}\nexport function isEmptyParamValue(val) {\n  return val === '' || val === undefined;\n} // 根据依赖字段的值生成当前的 FormItem 的值\n\nexport function makeFormItemControlledProps(form, schema, reasonField) {\n  const {\n    getFieldValue,\n    getFieldsValue\n  } = form;\n  const {\n    dependencies,\n    hidden,\n    disabled\n  } = schema;\n  let isHidden = hidden;\n  let isDisabled = disabled; // 当依赖满足并且依赖被操作过时，最终状态会变成依赖指定的状态\n\n  dependencies === null || dependencies === void 0 ? void 0 : dependencies.forEach(dependency => {\n    const {\n      name: depName,\n      condition,\n      hidden: targetHiden,\n      disabled: targetDisabled\n    } = dependency; // 在 condition 不是函数时，只检验造成更新的字段的变化\n\n    if (typeof condition !== 'function' && reasonField && depName !== reasonField) {\n      return;\n    }\n\n    let match = false;\n\n    if (typeof condition === 'function') {\n      const values = getFieldsValue();\n      match = !!condition(values);\n    } else {\n      if (!depName) {\n        // eslint-disable-next-line no-console\n        console.error(`[Schema form]: A dependent name must be provided in the props genarator when the dependency condition is not a function.`);\n        return;\n      }\n\n      match = getFieldValue(depName) === condition;\n    }\n\n    if (match) {\n      if (targetHiden !== undefined) {\n        isHidden = targetHiden;\n      }\n\n      if (targetDisabled !== undefined) {\n        isDisabled = targetDisabled;\n      }\n    }\n  });\n  return {\n    hidden: isHidden,\n    disabled: isDisabled\n  };\n}","map":{"version":3,"sources":["../../../../../src/canvas-json-schema-form/schema-form/common/form-item-wrapper/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import get from 'lodash/get';\n// 根据依赖字段生成 FormItem 的 updater\nexport function makeUpdaterByDependencies(dependencies, setReasonField) {\n    return (prevValues, currentValues) => {\n        const hasFunctionDep = dependencies.some(dep => typeof (dep === null || dep === void 0 ? void 0 : dep.condition) === 'function');\n        if (hasFunctionDep) {\n            if (typeof setReasonField === 'function') {\n                setReasonField(undefined); // 在更新规则是一个函数时，不依赖特定字段进行更新(即只要有字段的值更新了就更新，因为不知道函数内部依赖什么字段)\n            }\n            return true;\n        }\n        return dependencies.some(dep => {\n            const { name } = dep;\n            if (!name) {\n                // eslint-disable-next-line no-console\n                console.error(`[Schema form]: A dependent name must be provided in the updater when the dependency condition is not a function.`);\n                return false;\n            }\n            const changed = get(prevValues, name) !== get(currentValues, name);\n            if (changed) {\n                if (typeof setReasonField === 'function') {\n                    setReasonField(name);\n                }\n                return true;\n            }\n            return false;\n        });\n    };\n}\nexport function isEmptyParamValue(val) {\n    return val === '' || val === undefined;\n}\n// 根据依赖字段的值生成当前的 FormItem 的值\nexport function makeFormItemControlledProps(form, schema, reasonField) {\n    const { getFieldValue, getFieldsValue } = form;\n    const { dependencies, hidden, disabled } = schema;\n    let isHidden = hidden;\n    let isDisabled = disabled;\n    // 当依赖满足并且依赖被操作过时，最终状态会变成依赖指定的状态\n    dependencies === null || dependencies === void 0 ? void 0 : dependencies.forEach(dependency => {\n        const { name: depName, condition, hidden: targetHiden, disabled: targetDisabled } = dependency;\n        // 在 condition 不是函数时，只检验造成更新的字段的变化\n        if (typeof condition !== 'function' && reasonField && depName !== reasonField) {\n            return;\n        }\n        let match = false;\n        if (typeof condition === 'function') {\n            const values = getFieldsValue();\n            match = !!condition(values);\n        }\n        else {\n            if (!depName) {\n                // eslint-disable-next-line no-console\n                console.error(`[Schema form]: A dependent name must be provided in the props genarator when the dependency condition is not a function.`);\n                return;\n            }\n            match = getFieldValue(depName) === condition;\n        }\n        if (match) {\n            if (targetHiden !== undefined) {\n                isHidden = targetHiden;\n            }\n            if (targetDisabled !== undefined) {\n                isDisabled = targetDisabled;\n            }\n        }\n    });\n    return {\n        hidden: isHidden,\n        disabled: isDisabled,\n    };\n}\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}