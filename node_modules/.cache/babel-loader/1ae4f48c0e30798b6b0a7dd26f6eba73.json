{"ast":null,"code":"import { Line } from '../line';\nimport { LineTo } from './lineto';\nimport { Segment } from './segment';\nexport class Close extends Segment {\n  get end() {\n    if (!this.subpathStartSegment) {\n      throw new Error('Missing subpath start segment. (This segment needs a subpath ' + 'start segment (e.g. MoveTo), or segment has not yet been added' + ' to a path.)');\n    }\n\n    return this.subpathStartSegment.end;\n  }\n\n  get type() {\n    return 'Z';\n  }\n\n  get line() {\n    return new Line(this.start, this.end);\n  }\n\n  bbox() {\n    return this.line.bbox();\n  }\n\n  closestPoint(p) {\n    return this.line.closestPoint(p);\n  }\n\n  closestPointLength(p) {\n    return this.line.closestPointLength(p);\n  }\n\n  closestPointNormalizedLength(p) {\n    return this.line.closestPointNormalizedLength(p);\n  }\n\n  closestPointTangent(p) {\n    return this.line.closestPointTangent(p);\n  }\n\n  length() {\n    return this.line.length();\n  }\n\n  divideAt(ratio) {\n    const divided = this.line.divideAt(ratio);\n    return [// do not actually cut into the segment, first divided part can stay as Z\n    divided[1].isDifferentiable() ? new LineTo(divided[0]) : this.clone(), new LineTo(divided[1])];\n  }\n\n  divideAtLength(length) {\n    const divided = this.line.divideAtLength(length);\n    return [divided[1].isDifferentiable() ? new LineTo(divided[0]) : this.clone(), new LineTo(divided[1])];\n  }\n\n  getSubdivisions() {\n    return [];\n  }\n\n  pointAt(ratio) {\n    return this.line.pointAt(ratio);\n  }\n\n  pointAtLength(length) {\n    return this.line.pointAtLength(length);\n  }\n\n  tangentAt(ratio) {\n    return this.line.tangentAt(ratio);\n  }\n\n  tangentAtLength(length) {\n    return this.line.tangentAtLength(length);\n  }\n\n  isDifferentiable() {\n    if (!this.previousSegment || !this.subpathStartSegment) {\n      return false;\n    }\n\n    return !this.start.equals(this.end);\n  }\n\n  scale() {\n    return this;\n  }\n\n  rotate() {\n    return this;\n  }\n\n  translate() {\n    return this;\n  }\n\n  equals(s) {\n    return this.type === s.type && this.start.equals(s.start) && this.end.equals(s.end);\n  }\n\n  clone() {\n    return new Close();\n  }\n\n  toJSON() {\n    return {\n      type: this.type,\n      start: this.start.toJSON(),\n      end: this.end.toJSON()\n    };\n  }\n\n  serialize() {\n    return this.type;\n  }\n\n}\n\n(function (Close) {\n  function create() {\n    return new Close();\n  }\n\n  Close.create = create;\n})(Close || (Close = {}));","map":{"version":3,"sources":["../../../src/geometry/path/close.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Line } from '../line';\nimport { LineTo } from './lineto';\nimport { Segment } from './segment';\nexport class Close extends Segment {\n    get end() {\n        if (!this.subpathStartSegment) {\n            throw new Error('Missing subpath start segment. (This segment needs a subpath ' +\n                'start segment (e.g. MoveTo), or segment has not yet been added' +\n                ' to a path.)');\n        }\n        return this.subpathStartSegment.end;\n    }\n    get type() {\n        return 'Z';\n    }\n    get line() {\n        return new Line(this.start, this.end);\n    }\n    bbox() {\n        return this.line.bbox();\n    }\n    closestPoint(p) {\n        return this.line.closestPoint(p);\n    }\n    closestPointLength(p) {\n        return this.line.closestPointLength(p);\n    }\n    closestPointNormalizedLength(p) {\n        return this.line.closestPointNormalizedLength(p);\n    }\n    closestPointTangent(p) {\n        return this.line.closestPointTangent(p);\n    }\n    length() {\n        return this.line.length();\n    }\n    divideAt(ratio) {\n        const divided = this.line.divideAt(ratio);\n        return [\n            // do not actually cut into the segment, first divided part can stay as Z\n            divided[1].isDifferentiable() ? new LineTo(divided[0]) : this.clone(),\n            new LineTo(divided[1]),\n        ];\n    }\n    divideAtLength(length) {\n        const divided = this.line.divideAtLength(length);\n        return [\n            divided[1].isDifferentiable() ? new LineTo(divided[0]) : this.clone(),\n            new LineTo(divided[1]),\n        ];\n    }\n    getSubdivisions() {\n        return [];\n    }\n    pointAt(ratio) {\n        return this.line.pointAt(ratio);\n    }\n    pointAtLength(length) {\n        return this.line.pointAtLength(length);\n    }\n    tangentAt(ratio) {\n        return this.line.tangentAt(ratio);\n    }\n    tangentAtLength(length) {\n        return this.line.tangentAtLength(length);\n    }\n    isDifferentiable() {\n        if (!this.previousSegment || !this.subpathStartSegment) {\n            return false;\n        }\n        return !this.start.equals(this.end);\n    }\n    scale() {\n        return this;\n    }\n    rotate() {\n        return this;\n    }\n    translate() {\n        return this;\n    }\n    equals(s) {\n        return (this.type === s.type &&\n            this.start.equals(s.start) &&\n            this.end.equals(s.end));\n    }\n    clone() {\n        return new Close();\n    }\n    toJSON() {\n        return {\n            type: this.type,\n            start: this.start.toJSON(),\n            end: this.end.toJSON(),\n        };\n    }\n    serialize() {\n        return this.type;\n    }\n}\n(function (Close) {\n    function create() {\n        return new Close();\n    }\n    Close.create = create;\n})(Close || (Close = {}));\n//# sourceMappingURL=close.js.map"]},"metadata":{},"sourceType":"module"}