{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _degree = _interopRequireDefault(require(\"./degree\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * PageRank https://en.wikipedia.org/wiki/PageRank\n * refer: https://github.com/anvaka/ngraph.pagerank\n * @param graph\n * @param epsilon 判断是否收敛的精度值，默认 0.000001\n * @param linkProb 阻尼系数（dumping factor），指任意时刻，用户访问到某节点后继续访问该节点链接的下一个节点的概率，经验值 0.85\n */\n\n\nvar pageRank = function pageRank(graphData, epsilon, linkProb) {\n  if (typeof epsilon !== 'number') epsilon = 0.000001;\n  if (typeof linkProb !== 'number') linkProb = 0.85;\n  var distance = 1;\n  var leakedRank = 0;\n  var maxIterations = 1000;\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a,\n      _b = graphData.edges,\n      edges = _b === void 0 ? [] : _b;\n  var nodesCount = nodes.length;\n  var currentRank;\n  var curRanks = {};\n  var prevRanks = {}; // Initialize pageranks 初始化\n\n  for (var j = 0; j < nodesCount; ++j) {\n    var node = nodes[j];\n    var nodeId = node.id;\n    curRanks[nodeId] = 1 / nodesCount;\n    prevRanks[nodeId] = 1 / nodesCount;\n  }\n\n  var nodeDegree = (0, _degree.default)(graphData);\n\n  while (maxIterations > 0 && distance > epsilon) {\n    leakedRank = 0;\n\n    for (var j = 0; j < nodesCount; ++j) {\n      var node = nodes[j];\n      var nodeId = node.id;\n      currentRank = 0;\n\n      if (nodeDegree[node.id].inDegree === 0) {\n        curRanks[nodeId] = 0;\n      } else {\n        var neighbors = (0, _util.getNeighbors)(nodeId, edges, 'source');\n\n        for (var i = 0; i < neighbors.length; ++i) {\n          var neighbor = neighbors[i];\n          var outDegree = nodeDegree[neighbor].outDegree;\n          if (outDegree > 0) currentRank += prevRanks[neighbor] / outDegree;\n        }\n\n        curRanks[nodeId] = linkProb * currentRank;\n        leakedRank += curRanks[nodeId];\n      }\n    }\n\n    leakedRank = (1 - leakedRank) / nodesCount;\n    distance = 0;\n\n    for (var j = 0; j < nodesCount; ++j) {\n      var node = nodes[j];\n      var nodeId = node.id;\n      currentRank = curRanks[nodeId] + leakedRank;\n      distance += Math.abs(currentRank - prevRanks[nodeId]);\n      prevRanks[nodeId] = currentRank;\n    }\n\n    maxIterations -= 1;\n  }\n\n  return prevRanks;\n};\n\nvar _default = pageRank;\nexports.default = _default;","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/@antv/algorithm/lib/pageRank.js"],"names":["Object","defineProperty","exports","value","default","_degree","_interopRequireDefault","require","_util","obj","__esModule","pageRank","graphData","epsilon","linkProb","distance","leakedRank","maxIterations","_a","nodes","_b","edges","nodesCount","length","currentRank","curRanks","prevRanks","j","node","nodeId","id","nodeDegree","inDegree","neighbors","getNeighbors","i","neighbor","outDegree","Math","abs","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _degree = _interopRequireDefault(require(\"./degree\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * PageRank https://en.wikipedia.org/wiki/PageRank\n * refer: https://github.com/anvaka/ngraph.pagerank\n * @param graph\n * @param epsilon 判断是否收敛的精度值，默认 0.000001\n * @param linkProb 阻尼系数（dumping factor），指任意时刻，用户访问到某节点后继续访问该节点链接的下一个节点的概率，经验值 0.85\n */\nvar pageRank = function pageRank(graphData, epsilon, linkProb) {\n  if (typeof epsilon !== 'number') epsilon = 0.000001;\n  if (typeof linkProb !== 'number') linkProb = 0.85;\n  var distance = 1;\n  var leakedRank = 0;\n  var maxIterations = 1000;\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a,\n      _b = graphData.edges,\n      edges = _b === void 0 ? [] : _b;\n  var nodesCount = nodes.length;\n  var currentRank;\n  var curRanks = {};\n  var prevRanks = {}; // Initialize pageranks 初始化\n\n  for (var j = 0; j < nodesCount; ++j) {\n    var node = nodes[j];\n    var nodeId = node.id;\n    curRanks[nodeId] = 1 / nodesCount;\n    prevRanks[nodeId] = 1 / nodesCount;\n  }\n\n  var nodeDegree = (0, _degree.default)(graphData);\n\n  while (maxIterations > 0 && distance > epsilon) {\n    leakedRank = 0;\n\n    for (var j = 0; j < nodesCount; ++j) {\n      var node = nodes[j];\n      var nodeId = node.id;\n      currentRank = 0;\n\n      if (nodeDegree[node.id].inDegree === 0) {\n        curRanks[nodeId] = 0;\n      } else {\n        var neighbors = (0, _util.getNeighbors)(nodeId, edges, 'source');\n\n        for (var i = 0; i < neighbors.length; ++i) {\n          var neighbor = neighbors[i];\n          var outDegree = nodeDegree[neighbor].outDegree;\n          if (outDegree > 0) currentRank += prevRanks[neighbor] / outDegree;\n        }\n\n        curRanks[nodeId] = linkProb * currentRank;\n        leakedRank += curRanks[nodeId];\n      }\n    }\n\n    leakedRank = (1 - leakedRank) / nodesCount;\n    distance = 0;\n\n    for (var j = 0; j < nodesCount; ++j) {\n      var node = nodes[j];\n      var nodeId = node.id;\n      currentRank = curRanks[nodeId] + leakedRank;\n      distance += Math.abs(currentRank - prevRanks[nodeId]);\n      prevRanks[nodeId] = currentRank;\n    }\n\n    maxIterations -= 1;\n  }\n\n  return prevRanks;\n};\n\nvar _default = pageRank;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}