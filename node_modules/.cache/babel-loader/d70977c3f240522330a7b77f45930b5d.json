{"ast":null,"code":"import { FunctionExt } from '../util';\nimport { Basecoat, Dijkstra } from '../common';\nimport { Rectangle } from '../geometry';\nimport { Cell } from './cell';\nimport { Edge } from './edge';\nimport { Node } from './node';\nimport { Collection } from './collection';\nexport class Model extends Basecoat {\n  constructor() {\n    let cells = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    super();\n    this.batches = {};\n    this.addings = new WeakMap();\n    this.nodes = {};\n    this.edges = {};\n    this.outgoings = {};\n    this.incomings = {};\n    this.collection = new Collection(cells);\n    this.setup();\n  }\n\n  get [Symbol.toStringTag]() {\n    return Model.toStringTag;\n  }\n\n  notify(name, args) {\n    this.trigger(name, args);\n    const graph = this.graph;\n\n    if (graph) {\n      if (name === 'sorted' || name === 'reseted' || name === 'updated') {\n        graph.trigger(`model:${name}`, args);\n      } else {\n        graph.trigger(name, args);\n      }\n    }\n\n    return this;\n  }\n\n  setup() {\n    const collection = this.collection;\n    collection.on('sorted', () => this.notify('sorted', null));\n    collection.on('updated', args => this.notify('updated', args));\n    collection.on('cell:change:zIndex', () => this.sortOnChangeZ());\n    collection.on('added', _ref => {\n      let {\n        cell\n      } = _ref;\n      this.onCellAdded(cell);\n    });\n    collection.on('removed', args => {\n      const cell = args.cell;\n      this.onCellRemoved(cell, args.options); // Should trigger remove-event manually after cell was removed.\n\n      this.notify('cell:removed', args);\n\n      if (cell.isNode()) {\n        this.notify('node:removed', Object.assign(Object.assign({}, args), {\n          node: cell\n        }));\n      } else if (cell.isEdge()) {\n        this.notify('edge:removed', Object.assign(Object.assign({}, args), {\n          edge: cell\n        }));\n      }\n    });\n    collection.on('reseted', args => {\n      this.onReset(args.current);\n      this.notify('reseted', args);\n    });\n    collection.on('edge:change:source', _ref2 => {\n      let {\n        edge\n      } = _ref2;\n      return this.onEdgeTerminalChanged(edge, 'source');\n    });\n    collection.on('edge:change:target', _ref3 => {\n      let {\n        edge\n      } = _ref3;\n      this.onEdgeTerminalChanged(edge, 'target');\n    });\n  }\n\n  sortOnChangeZ() {\n    this.collection.sort();\n  }\n\n  onCellAdded(cell) {\n    const cellId = cell.id;\n\n    if (cell.isEdge()) {\n      // Auto update edge's parent\n      cell.updateParent();\n      this.edges[cellId] = true;\n      this.onEdgeTerminalChanged(cell, 'source');\n      this.onEdgeTerminalChanged(cell, 'target');\n    } else {\n      this.nodes[cellId] = true;\n    }\n  }\n\n  onCellRemoved(cell, options) {\n    const cellId = cell.id;\n\n    if (cell.isEdge()) {\n      delete this.edges[cellId];\n      const source = cell.getSource();\n      const target = cell.getTarget();\n\n      if (source && source.cell) {\n        const cache = this.outgoings[source.cell];\n        const index = cache ? cache.indexOf(cellId) : -1;\n\n        if (index >= 0) {\n          cache.splice(index, 1);\n\n          if (cache.length === 0) {\n            delete this.outgoings[source.cell];\n          }\n        }\n      }\n\n      if (target && target.cell) {\n        const cache = this.incomings[target.cell];\n        const index = cache ? cache.indexOf(cellId) : -1;\n\n        if (index >= 0) {\n          cache.splice(index, 1);\n\n          if (cache.length === 0) {\n            delete this.incomings[target.cell];\n          }\n        }\n      }\n    } else {\n      delete this.nodes[cellId];\n    }\n\n    if (!options.clear) {\n      if (options.disconnectEdges) {\n        this.disconnectConnectedEdges(cell, options);\n      } else {\n        this.removeConnectedEdges(cell, options);\n      }\n    }\n\n    if (cell.model === this) {\n      cell.model = null;\n    }\n  }\n\n  onReset(cells) {\n    this.nodes = {};\n    this.edges = {};\n    this.outgoings = {};\n    this.incomings = {};\n    cells.forEach(cell => this.onCellAdded(cell));\n  }\n\n  onEdgeTerminalChanged(edge, type) {\n    const ref = type === 'source' ? this.outgoings : this.incomings;\n    const prev = edge.previous(type);\n\n    if (prev && prev.cell) {\n      const cache = ref[prev.cell];\n      const index = cache ? cache.indexOf(edge.id) : -1;\n\n      if (index >= 0) {\n        cache.splice(index, 1);\n\n        if (cache.length === 0) {\n          delete ref[prev.cell];\n        }\n      }\n    }\n\n    const terminal = edge.getTerminal(type);\n\n    if (terminal && terminal.cell) {\n      const cache = ref[terminal.cell] || [];\n      const index = cache.indexOf(edge.id);\n\n      if (index === -1) {\n        cache.push(edge.id);\n      }\n\n      ref[terminal.cell] = cache;\n    }\n  }\n\n  prepareCell(cell, options) {\n    if (!cell.model && (!options || !options.dryrun)) {\n      cell.model = this;\n    }\n\n    if (cell.zIndex == null) {\n      cell.setZIndex(this.getMaxZIndex() + 1, {\n        silent: true\n      });\n    }\n\n    return cell;\n  }\n\n  resetCells(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Do not update model at this time. Because if we just update the graph\n    // with the same json-data, the edge will reference to the old nodes.\n    cells.map(cell => this.prepareCell(cell, Object.assign(Object.assign({}, options), {\n      dryrun: true\n    })));\n    this.collection.reset(cells, options); // Update model and trigger edge update it's references\n\n    cells.map(cell => this.prepareCell(cell, {\n      options\n    }));\n    return this;\n  }\n\n  clear() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const raw = this.getCells();\n\n    if (raw.length === 0) {\n      return this;\n    }\n\n    const localOptions = Object.assign(Object.assign({}, options), {\n      clear: true\n    });\n    this.batchUpdate('clear', () => {\n      // The nodes come after the edges.\n      const cells = raw.sort((a, b) => {\n        const v1 = a.isEdge() ? 1 : 2;\n        const v2 = b.isEdge() ? 1 : 2;\n        return v1 - v2;\n      });\n\n      while (cells.length > 0) {\n        // Note that all the edges are removed first, so it's safe to\n        // remove the nodes without removing the connected edges first.\n        const cell = cells.shift();\n\n        if (cell) {\n          cell.remove(localOptions);\n        }\n      }\n    }, localOptions);\n    return this;\n  }\n\n  addNode(metadata) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const node = Node.isNode(metadata) ? metadata : this.createNode(metadata);\n    this.addCell(node, options);\n    return node;\n  }\n\n  createNode(metadata) {\n    return Node.create(metadata);\n  }\n\n  addEdge(metadata) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const edge = Edge.isEdge(metadata) ? metadata : this.createEdge(metadata);\n    this.addCell(edge, options);\n    return edge;\n  }\n\n  createEdge(metadata) {\n    return Edge.create(metadata);\n  }\n\n  addCell(cell) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (Array.isArray(cell)) {\n      return this.addCells(cell, options);\n    }\n\n    if (!this.collection.has(cell) && !this.addings.has(cell)) {\n      this.addings.set(cell, true);\n      this.collection.add(this.prepareCell(cell, options), options);\n      cell.eachChild(child => this.addCell(child, options));\n      this.addings.delete(cell);\n    }\n\n    return this;\n  }\n\n  addCells(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const count = cells.length;\n\n    if (count === 0) {\n      return this;\n    }\n\n    const localOptions = Object.assign(Object.assign({}, options), {\n      position: count - 1,\n      maxPosition: count - 1\n    });\n    this.startBatch('add', Object.assign(Object.assign({}, localOptions), {\n      cells\n    }));\n    cells.forEach(cell => {\n      this.addCell(cell, localOptions);\n      localOptions.position -= 1;\n    });\n    this.stopBatch('add', Object.assign(Object.assign({}, localOptions), {\n      cells\n    }));\n    return this;\n  }\n\n  removeCell(obj) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const cell = typeof obj === 'string' ? this.getCell(obj) : obj;\n\n    if (cell && this.has(cell)) {\n      return this.collection.remove(cell, options);\n    }\n\n    return null;\n  }\n\n  removeCells(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (cells.length) {\n      return this.batchUpdate('remove', () => {\n        return cells.map(cell => this.removeCell(cell, options));\n      });\n    }\n\n    return [];\n  }\n\n  removeConnectedEdges(cell) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const edges = this.getConnectedEdges(cell);\n    edges.forEach(edge => {\n      edge.remove(options);\n    });\n    return edges;\n  }\n\n  disconnectConnectedEdges(cell) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const cellId = typeof cell === 'string' ? cell : cell.id;\n    this.getConnectedEdges(cell).forEach(edge => {\n      const sourceCell = edge.getSourceCell();\n      const targetCell = edge.getTargetCell();\n\n      if (sourceCell && sourceCell.id === cellId) {\n        edge.setSource({\n          x: 0,\n          y: 0\n        }, options);\n      }\n\n      if (targetCell && targetCell.id === cellId) {\n        edge.setTarget({\n          x: 0,\n          y: 0\n        }, options);\n      }\n    });\n  }\n\n  has(obj) {\n    return this.collection.has(obj);\n  }\n\n  total() {\n    return this.collection.length;\n  }\n\n  indexOf(cell) {\n    return this.collection.indexOf(cell);\n  }\n  /**\n   * Returns a cell from the graph by its id.\n   */\n\n\n  getCell(id) {\n    return this.collection.get(id);\n  }\n  /**\n   * Returns all the nodes and edges in the graph.\n   */\n\n\n  getCells() {\n    return this.collection.toArray();\n  }\n  /**\n   * Returns the first cell (node or edge) in the graph. The first cell is\n   * defined as the cell with the lowest `zIndex`.\n   */\n\n\n  getFirstCell() {\n    return this.collection.first();\n  }\n  /**\n   * Returns the last cell (node or edge) in the graph. The last cell is\n   * defined as the cell with the highest `zIndex`.\n   */\n\n\n  getLastCell() {\n    return this.collection.last();\n  }\n  /**\n   * Returns the lowest `zIndex` value in the graph.\n   */\n\n\n  getMinZIndex() {\n    const first = this.collection.first();\n    return first ? first.getZIndex() || 0 : 0;\n  }\n  /**\n   * Returns the highest `zIndex` value in the graph.\n   */\n\n\n  getMaxZIndex() {\n    const last = this.collection.last();\n    return last ? last.getZIndex() || 0 : 0;\n  }\n\n  getCellsFromCache(cache) {\n    return cache ? Object.keys(cache).map(id => this.getCell(id)).filter(cell => cell != null) : [];\n  }\n  /**\n   * Returns all the nodes in the graph.\n   */\n\n\n  getNodes() {\n    return this.getCellsFromCache(this.nodes);\n  }\n  /**\n   * Returns all the edges in the graph.\n   */\n\n\n  getEdges() {\n    return this.getCellsFromCache(this.edges);\n  }\n  /**\n   * Returns all outgoing edges for the node.\n   */\n\n\n  getOutgoingEdges(cell) {\n    const cellId = typeof cell === 'string' ? cell : cell.id;\n    const cellIds = this.outgoings[cellId];\n    return cellIds ? cellIds.map(id => this.getCell(id)).filter(cell => cell && cell.isEdge()) : null;\n  }\n  /**\n   * Returns all incoming edges for the node.\n   */\n\n\n  getIncomingEdges(cell) {\n    const cellId = typeof cell === 'string' ? cell : cell.id;\n    const cellIds = this.incomings[cellId];\n    return cellIds ? cellIds.map(id => this.getCell(id)).filter(cell => cell && cell.isEdge()) : null;\n  }\n  /**\n   * Returns edges connected with cell.\n   */\n\n\n  getConnectedEdges(cell) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const result = [];\n    const node = typeof cell === 'string' ? this.getCell(cell) : cell;\n\n    if (node == null) {\n      return result;\n    }\n\n    const cache = {};\n    const indirect = options.indirect;\n    let incoming = options.incoming;\n    let outgoing = options.outgoing;\n\n    if (incoming == null && outgoing == null) {\n      incoming = outgoing = true;\n    }\n\n    const collect = (cell, isOutgoing) => {\n      const edges = isOutgoing ? this.getOutgoingEdges(cell) : this.getIncomingEdges(cell);\n\n      if (edges != null) {\n        edges.forEach(edge => {\n          if (cache[edge.id]) {\n            return;\n          }\n\n          result.push(edge);\n          cache[edge.id] = true;\n\n          if (indirect) {\n            if (incoming) {\n              collect(edge, false);\n            }\n\n            if (outgoing) {\n              collect(edge, true);\n            }\n          }\n        });\n      }\n\n      if (indirect && cell.isEdge()) {\n        const terminal = isOutgoing ? cell.getTargetCell() : cell.getSourceCell();\n\n        if (terminal && terminal.isEdge()) {\n          if (!cache[terminal.id]) {\n            result.push(terminal);\n            collect(terminal, isOutgoing);\n          }\n        }\n      }\n    };\n\n    if (outgoing) {\n      collect(node, true);\n    }\n\n    if (incoming) {\n      collect(node, false);\n    }\n\n    if (options.deep) {\n      const descendants = node.getDescendants({\n        deep: true\n      });\n      const embedsCache = {};\n      descendants.forEach(cell => {\n        if (cell.isNode()) {\n          embedsCache[cell.id] = true;\n        }\n      });\n\n      const collectSub = (cell, isOutgoing) => {\n        const edges = isOutgoing ? this.getOutgoingEdges(cell.id) : this.getIncomingEdges(cell.id);\n\n        if (edges != null) {\n          edges.forEach(edge => {\n            if (!cache[edge.id]) {\n              const sourceCell = edge.getSourceCell();\n              const targetCell = edge.getTargetCell();\n\n              if (!options.enclosed && sourceCell && embedsCache[sourceCell.id] && targetCell && embedsCache[targetCell.id]) {\n                return;\n              }\n\n              result.push(edge);\n              cache[edge.id] = true;\n            }\n          });\n        }\n      };\n\n      descendants.forEach(cell => {\n        if (cell.isEdge()) {\n          return;\n        }\n\n        if (outgoing) {\n          collectSub(cell, true);\n        }\n\n        if (incoming) {\n          collectSub(cell, false);\n        }\n      });\n    }\n\n    return result;\n  }\n\n  isBoundary(cell, isOrigin) {\n    const node = typeof cell === 'string' ? this.getCell(cell) : cell;\n    const arr = isOrigin ? this.getIncomingEdges(node) : this.getOutgoingEdges(node);\n    return arr == null || arr.length === 0;\n  }\n\n  getBoundaryNodes(isOrigin) {\n    const result = [];\n    Object.keys(this.nodes).forEach(nodeId => {\n      if (this.isBoundary(nodeId, isOrigin)) {\n        const node = this.getCell(nodeId);\n\n        if (node) {\n          result.push(node);\n        }\n      }\n    });\n    return result;\n  }\n  /**\n   * Returns an array of all the roots of the graph.\n   */\n\n\n  getRoots() {\n    return this.getBoundaryNodes(true);\n  }\n  /**\n   * Returns an array of all the leafs of the graph.\n   */\n\n\n  getLeafs() {\n    return this.getBoundaryNodes(false);\n  }\n  /**\n   * Returns `true` if the node is a root node, i.e. there is no edges\n   * coming to the node.\n   */\n\n\n  isRoot(cell) {\n    return this.isBoundary(cell, true);\n  }\n  /**\n   * Returns `true` if the node is a leaf node, i.e. there is no edges\n   * going out from the node.\n   */\n\n\n  isLeaf(cell) {\n    return this.isBoundary(cell, false);\n  }\n  /**\n   * Returns all the neighbors of node in the graph. Neighbors are all\n   * the nodes connected to node via either incoming or outgoing edge.\n   */\n\n\n  getNeighbors(cell) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let incoming = options.incoming;\n    let outgoing = options.outgoing;\n\n    if (incoming == null && outgoing == null) {\n      incoming = outgoing = true;\n    }\n\n    const edges = this.getConnectedEdges(cell, options);\n    const map = edges.reduce((memo, edge) => {\n      const hasLoop = edge.hasLoop(options);\n      const sourceCell = edge.getSourceCell();\n      const targetCell = edge.getTargetCell();\n\n      if (incoming && sourceCell && sourceCell.isNode() && !memo[sourceCell.id]) {\n        if (hasLoop || sourceCell !== cell && (!options.deep || !sourceCell.isDescendantOf(cell))) {\n          memo[sourceCell.id] = sourceCell;\n        }\n      }\n\n      if (outgoing && targetCell && targetCell.isNode() && !memo[targetCell.id]) {\n        if (hasLoop || targetCell !== cell && (!options.deep || !targetCell.isDescendantOf(cell))) {\n          memo[targetCell.id] = targetCell;\n        }\n      }\n\n      return memo;\n    }, {});\n\n    if (cell.isEdge()) {\n      if (incoming) {\n        const sourceCell = cell.getSourceCell();\n\n        if (sourceCell && sourceCell.isNode() && !map[sourceCell.id]) {\n          map[sourceCell.id] = sourceCell;\n        }\n      }\n\n      if (outgoing) {\n        const targetCell = cell.getTargetCell();\n\n        if (targetCell && targetCell.isNode() && !map[targetCell.id]) {\n          map[targetCell.id] = targetCell;\n        }\n      }\n    }\n\n    return Object.keys(map).map(id => map[id]);\n  }\n  /**\n   * Returns `true` if `cell2` is a neighbor of `cell1`.\n   */\n\n\n  isNeighbor(cell1, cell2) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let incoming = options.incoming;\n    let outgoing = options.outgoing;\n\n    if (incoming == null && outgoing == null) {\n      incoming = outgoing = true;\n    }\n\n    return this.getConnectedEdges(cell1, options).some(edge => {\n      const sourceCell = edge.getSourceCell();\n      const targetCell = edge.getTargetCell();\n\n      if (incoming && sourceCell && sourceCell.id === cell2.id) {\n        return true;\n      }\n\n      if (outgoing && targetCell && targetCell.id === cell2.id) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  getSuccessors(cell) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const successors = [];\n    this.search(cell, (curr, distance) => {\n      if (curr !== cell && this.matchDistance(distance, options.distance)) {\n        successors.push(curr);\n      }\n    }, Object.assign(Object.assign({}, options), {\n      outgoing: true\n    }));\n    return successors;\n  }\n  /**\n   * Returns `true` if `cell2` is a successor of `cell1`.\n   */\n\n\n  isSuccessor(cell1, cell2) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let result = false;\n    this.search(cell1, (curr, distance) => {\n      if (curr === cell2 && curr !== cell1 && this.matchDistance(distance, options.distance)) {\n        result = true;\n        return false;\n      }\n    }, Object.assign(Object.assign({}, options), {\n      outgoing: true\n    }));\n    return result;\n  }\n\n  getPredecessors(cell) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const predecessors = [];\n    this.search(cell, (curr, distance) => {\n      if (curr !== cell && this.matchDistance(distance, options.distance)) {\n        predecessors.push(curr);\n      }\n    }, Object.assign(Object.assign({}, options), {\n      incoming: true\n    }));\n    return predecessors;\n  }\n  /**\n   * Returns `true` if `cell2` is a predecessor of `cell1`.\n   */\n\n\n  isPredecessor(cell1, cell2) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let result = false;\n    this.search(cell1, (curr, distance) => {\n      if (curr === cell2 && curr !== cell1 && this.matchDistance(distance, options.distance)) {\n        result = true;\n        return false;\n      }\n    }, Object.assign(Object.assign({}, options), {\n      incoming: true\n    }));\n    return result;\n  }\n\n  matchDistance(distance, preset) {\n    if (preset == null) {\n      return true;\n    }\n\n    if (typeof preset === 'function') {\n      return preset(distance);\n    }\n\n    if (Array.isArray(preset) && preset.includes(distance)) {\n      return true;\n    }\n\n    return distance === preset;\n  }\n  /**\n   * Returns the common ancestor of the passed cells.\n   */\n\n\n  getCommonAncestor() {\n    const arr = [];\n\n    for (var _len = arguments.length, cells = new Array(_len), _key = 0; _key < _len; _key++) {\n      cells[_key] = arguments[_key];\n    }\n\n    cells.forEach(item => {\n      if (item) {\n        if (Array.isArray(item)) {\n          arr.push(...item);\n        } else {\n          arr.push(item);\n        }\n      }\n    });\n    return Cell.getCommonAncestor(...arr);\n  }\n  /**\n   * Returns an array of cells that result from finding nodes/edges that\n   * are connected to any of the cells in the cells array. This function\n   * loops over cells and if the current cell is a edge, it collects its\n   * source/target nodes; if it is an node, it collects its incoming and\n   * outgoing edges if both the edge terminal (source/target) are in the\n   * cells array.\n   */\n\n\n  getSubGraph(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const subgraph = [];\n    const cache = {};\n    const nodes = [];\n    const edges = [];\n\n    const collect = cell => {\n      if (!cache[cell.id]) {\n        subgraph.push(cell);\n        cache[cell.id] = cell;\n\n        if (cell.isEdge()) {\n          edges.push(cell);\n        }\n\n        if (cell.isNode()) {\n          nodes.push(cell);\n        }\n      }\n    };\n\n    cells.forEach(cell => {\n      collect(cell);\n\n      if (options.deep) {\n        const descendants = cell.getDescendants({\n          deep: true\n        });\n        descendants.forEach(descendant => collect(descendant));\n      }\n    });\n    edges.forEach(edge => {\n      // For edges, include their source & target\n      const sourceCell = edge.getSourceCell();\n      const targetCell = edge.getTargetCell();\n\n      if (sourceCell && !cache[sourceCell.id]) {\n        subgraph.push(sourceCell);\n        cache[sourceCell.id] = sourceCell;\n\n        if (sourceCell.isNode()) {\n          nodes.push(sourceCell);\n        }\n      }\n\n      if (targetCell && !cache[targetCell.id]) {\n        subgraph.push(targetCell);\n        cache[targetCell.id] = targetCell;\n\n        if (targetCell.isNode()) {\n          nodes.push(targetCell);\n        }\n      }\n    });\n    nodes.forEach(node => {\n      // For nodes, include their connected edges if their source/target\n      // is in the subgraph.\n      const edges = this.getConnectedEdges(node, options);\n      edges.forEach(edge => {\n        const sourceCell = edge.getSourceCell();\n        const targetCell = edge.getTargetCell();\n\n        if (!cache[edge.id] && sourceCell && cache[sourceCell.id] && targetCell && cache[targetCell.id]) {\n          subgraph.push(edge);\n          cache[edge.id] = edge;\n        }\n      });\n    });\n    return subgraph;\n  }\n  /**\n   * Clones the whole subgraph (including all the connected links whose\n   * source/target is in the subgraph). If `options.deep` is `true`, also\n   * take into account all the embedded cells of all the subgraph cells.\n   *\n   * Returns a map of the form: { [original cell ID]: [clone] }.\n   */\n\n\n  cloneSubGraph(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const subgraph = this.getSubGraph(cells, options);\n    return this.cloneCells(subgraph);\n  }\n\n  cloneCells(cells) {\n    return Cell.cloneCells(cells);\n  }\n\n  getNodesFromPoint(x, y) {\n    const p = typeof x === 'number' ? {\n      x,\n      y: y || 0\n    } : x;\n    return this.getNodes().filter(node => {\n      return node.getBBox().containsPoint(p);\n    });\n  }\n\n  getNodesInArea(x, y, w, h, options) {\n    const rect = typeof x === 'number' ? new Rectangle(x, y, w, h) : Rectangle.create(x);\n    const opts = typeof x === 'number' ? options : y;\n    const strict = opts && opts.strict;\n    return this.getNodes().filter(node => {\n      const bbox = node.getBBox();\n      return strict ? rect.containsRect(bbox) : rect.isIntersectWithRect(bbox);\n    });\n  }\n\n  getEdgesInArea(x, y, w, h, options) {\n    const rect = typeof x === 'number' ? new Rectangle(x, y, w, h) : Rectangle.create(x);\n    const opts = typeof x === 'number' ? options : y;\n    const strict = opts && opts.strict;\n    return this.getEdges().filter(edge => {\n      const bbox = edge.getBBox();\n\n      if (bbox.width === 0) {\n        bbox.inflate(1, 0);\n      } else if (bbox.height === 0) {\n        bbox.inflate(0, 1);\n      }\n\n      return strict ? rect.containsRect(bbox) : rect.isIntersectWithRect(bbox);\n    });\n  }\n\n  getNodesUnderNode(node) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const bbox = node.getBBox();\n    const nodes = options.by == null || options.by === 'bbox' ? this.getNodesInArea(bbox) : this.getNodesFromPoint(bbox[options.by]);\n    return nodes.filter(curr => node.id !== curr.id && !curr.isDescendantOf(node));\n  }\n  /**\n   * Returns the bounding box that surrounds all cells in the graph.\n   */\n\n\n  getAllCellsBBox() {\n    return this.getCellsBBox(this.getCells());\n  }\n  /**\n   * Returns the bounding box that surrounds all the given cells.\n   */\n\n\n  getCellsBBox(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return Cell.getCellsBBox(cells, options);\n  } // #region search\n\n\n  search(cell, iterator) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (options.breadthFirst) {\n      this.breadthFirstSearch(cell, iterator, options);\n    } else {\n      this.depthFirstSearch(cell, iterator, options);\n    }\n  }\n\n  breadthFirstSearch(cell, iterator) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const queue = [];\n    const visited = {};\n    const distance = {};\n    queue.push(cell);\n    distance[cell.id] = 0;\n\n    while (queue.length > 0) {\n      const next = queue.shift();\n\n      if (next == null || visited[next.id]) {\n        continue;\n      }\n\n      visited[next.id] = true;\n\n      if (FunctionExt.call(iterator, this, next, distance[next.id]) === false) {\n        continue;\n      }\n\n      const neighbors = this.getNeighbors(next, options);\n      neighbors.forEach(neighbor => {\n        distance[neighbor.id] = distance[next.id] + 1;\n        queue.push(neighbor);\n      });\n    }\n  }\n\n  depthFirstSearch(cell, iterator) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const queue = [];\n    const visited = {};\n    const distance = {};\n    queue.push(cell);\n    distance[cell.id] = 0;\n\n    while (queue.length > 0) {\n      const next = queue.pop();\n\n      if (next == null || visited[next.id]) {\n        continue;\n      }\n\n      visited[next.id] = true;\n\n      if (FunctionExt.call(iterator, this, next, distance[next.id]) === false) {\n        continue;\n      }\n\n      const neighbors = this.getNeighbors(next, options);\n      const lastIndex = queue.length;\n      neighbors.forEach(neighbor => {\n        distance[neighbor.id] = distance[next.id] + 1;\n        queue.splice(lastIndex, 0, neighbor);\n      });\n    }\n  } // #endregion\n  // #region shortest path\n\n  /** *\n   * Returns an array of IDs of nodes on the shortest\n   * path between source and target.\n   */\n\n\n  getShortestPath(source, target) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const adjacencyList = {};\n    this.getEdges().forEach(edge => {\n      const sourceId = edge.getSourceCellId();\n      const targetId = edge.getTargetCellId();\n\n      if (sourceId && targetId) {\n        if (!adjacencyList[sourceId]) {\n          adjacencyList[sourceId] = [];\n        }\n\n        if (!adjacencyList[targetId]) {\n          adjacencyList[targetId] = [];\n        }\n\n        adjacencyList[sourceId].push(targetId);\n\n        if (!options.directed) {\n          adjacencyList[targetId].push(sourceId);\n        }\n      }\n    });\n    const sourceId = typeof source === 'string' ? source : source.id;\n    const previous = Dijkstra.run(adjacencyList, sourceId, options.weight);\n    const path = [];\n    let targetId = typeof target === 'string' ? target : target.id;\n\n    if (previous[targetId]) {\n      path.push(targetId);\n    }\n\n    while (targetId = previous[targetId]) {\n      path.unshift(targetId);\n    }\n\n    return path;\n  } // #endregion\n  // #region transform\n\n  /**\n   * Translate all cells in the graph by `tx` and `ty` pixels.\n   */\n\n\n  translate(tx, ty, options) {\n    this.getCells().filter(cell => !cell.hasParent()).forEach(cell => cell.translate(tx, ty, options));\n    return this;\n  }\n\n  resize(width, height, options) {\n    return this.resizeCells(width, height, this.getCells(), options);\n  }\n\n  resizeCells(width, height, cells) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const bbox = this.getCellsBBox(cells);\n\n    if (bbox) {\n      const sx = Math.max(width / bbox.width, 0);\n      const sy = Math.max(height / bbox.height, 0);\n      const origin = bbox.getOrigin();\n      cells.forEach(cell => cell.scale(sx, sy, origin, options));\n    }\n\n    return this;\n  } // #endregion\n  // #region serialize/deserialize\n\n\n  toJSON() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return Model.toJSON(this.getCells(), options);\n  }\n\n  parseJSON(data) {\n    return Model.fromJSON(data);\n  }\n\n  fromJSON(data) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const cells = this.parseJSON(data);\n    this.resetCells(cells, options);\n    return this;\n  } // #endregion\n  // #region batch\n\n\n  startBatch(name) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.batches[name] = (this.batches[name] || 0) + 1;\n    this.notify('batch:start', {\n      name,\n      data\n    });\n    return this;\n  }\n\n  stopBatch(name) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.batches[name] = (this.batches[name] || 0) - 1;\n    this.notify('batch:stop', {\n      name,\n      data\n    });\n    return this;\n  }\n\n  batchUpdate(name, execute) {\n    let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.startBatch(name, data);\n    const result = execute();\n    this.stopBatch(name, data);\n    return result;\n  }\n\n  hasActiveBatch() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.keys(this.batches);\n    const names = Array.isArray(name) ? name : [name];\n    return names.some(batch => this.batches[batch] > 0);\n  }\n\n}\n\n(function (Model) {\n  Model.toStringTag = `X6.${Model.name}`;\n\n  function isModel(instance) {\n    if (instance == null) {\n      return false;\n    }\n\n    if (instance instanceof Model) {\n      return true;\n    }\n\n    const tag = instance[Symbol.toStringTag];\n    const model = instance;\n\n    if ((tag == null || tag === Model.toStringTag) && typeof model.addNode === 'function' && typeof model.addEdge === 'function' && model.collection != null) {\n      return true;\n    }\n\n    return false;\n  }\n\n  Model.isModel = isModel;\n})(Model || (Model = {}));\n\n(function (Model) {\n  function toJSON(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return {\n      cells: cells.map(cell => cell.toJSON(options))\n    };\n  }\n\n  Model.toJSON = toJSON;\n\n  function fromJSON(data) {\n    const cells = [];\n\n    if (Array.isArray(data)) {\n      cells.push(...data);\n    } else {\n      if (data.cells) {\n        cells.push(...data.cells);\n      }\n\n      if (data.nodes) {\n        data.nodes.forEach(node => {\n          if (node.shape == null) {\n            node.shape = 'rect';\n          }\n\n          cells.push(node);\n        });\n      }\n\n      if (data.edges) {\n        data.edges.forEach(edge => {\n          if (edge.shape == null) {\n            edge.shape = 'edge';\n          }\n\n          cells.push(edge);\n        });\n      }\n    }\n\n    return cells.map(cell => {\n      const type = cell.shape;\n\n      if (type) {\n        if (Node.registry.exist(type)) {\n          return Node.create(cell);\n        }\n\n        if (Edge.registry.exist(type)) {\n          return Edge.create(cell);\n        }\n      }\n\n      throw new Error('The `shape` should be specipied when creating a node/edge instance');\n    });\n  }\n\n  Model.fromJSON = fromJSON;\n})(Model || (Model = {}));","map":{"version":3,"sources":["../../src/model/model.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { FunctionExt } from '../util';\nimport { Basecoat, Dijkstra } from '../common';\nimport { Rectangle } from '../geometry';\nimport { Cell } from './cell';\nimport { Edge } from './edge';\nimport { Node } from './node';\nimport { Collection } from './collection';\nexport class Model extends Basecoat {\n    constructor(cells = []) {\n        super();\n        this.batches = {};\n        this.addings = new WeakMap();\n        this.nodes = {};\n        this.edges = {};\n        this.outgoings = {};\n        this.incomings = {};\n        this.collection = new Collection(cells);\n        this.setup();\n    }\n    get [Symbol.toStringTag]() {\n        return Model.toStringTag;\n    }\n    notify(name, args) {\n        this.trigger(name, args);\n        const graph = this.graph;\n        if (graph) {\n            if (name === 'sorted' || name === 'reseted' || name === 'updated') {\n                graph.trigger(`model:${name}`, args);\n            }\n            else {\n                graph.trigger(name, args);\n            }\n        }\n        return this;\n    }\n    setup() {\n        const collection = this.collection;\n        collection.on('sorted', () => this.notify('sorted', null));\n        collection.on('updated', (args) => this.notify('updated', args));\n        collection.on('cell:change:zIndex', () => this.sortOnChangeZ());\n        collection.on('added', ({ cell }) => {\n            this.onCellAdded(cell);\n        });\n        collection.on('removed', (args) => {\n            const cell = args.cell;\n            this.onCellRemoved(cell, args.options);\n            // Should trigger remove-event manually after cell was removed.\n            this.notify('cell:removed', args);\n            if (cell.isNode()) {\n                this.notify('node:removed', Object.assign(Object.assign({}, args), { node: cell }));\n            }\n            else if (cell.isEdge()) {\n                this.notify('edge:removed', Object.assign(Object.assign({}, args), { edge: cell }));\n            }\n        });\n        collection.on('reseted', (args) => {\n            this.onReset(args.current);\n            this.notify('reseted', args);\n        });\n        collection.on('edge:change:source', ({ edge }) => this.onEdgeTerminalChanged(edge, 'source'));\n        collection.on('edge:change:target', ({ edge }) => {\n            this.onEdgeTerminalChanged(edge, 'target');\n        });\n    }\n    sortOnChangeZ() {\n        this.collection.sort();\n    }\n    onCellAdded(cell) {\n        const cellId = cell.id;\n        if (cell.isEdge()) {\n            // Auto update edge's parent\n            cell.updateParent();\n            this.edges[cellId] = true;\n            this.onEdgeTerminalChanged(cell, 'source');\n            this.onEdgeTerminalChanged(cell, 'target');\n        }\n        else {\n            this.nodes[cellId] = true;\n        }\n    }\n    onCellRemoved(cell, options) {\n        const cellId = cell.id;\n        if (cell.isEdge()) {\n            delete this.edges[cellId];\n            const source = cell.getSource();\n            const target = cell.getTarget();\n            if (source && source.cell) {\n                const cache = this.outgoings[source.cell];\n                const index = cache ? cache.indexOf(cellId) : -1;\n                if (index >= 0) {\n                    cache.splice(index, 1);\n                    if (cache.length === 0) {\n                        delete this.outgoings[source.cell];\n                    }\n                }\n            }\n            if (target && target.cell) {\n                const cache = this.incomings[target.cell];\n                const index = cache ? cache.indexOf(cellId) : -1;\n                if (index >= 0) {\n                    cache.splice(index, 1);\n                    if (cache.length === 0) {\n                        delete this.incomings[target.cell];\n                    }\n                }\n            }\n        }\n        else {\n            delete this.nodes[cellId];\n        }\n        if (!options.clear) {\n            if (options.disconnectEdges) {\n                this.disconnectConnectedEdges(cell, options);\n            }\n            else {\n                this.removeConnectedEdges(cell, options);\n            }\n        }\n        if (cell.model === this) {\n            cell.model = null;\n        }\n    }\n    onReset(cells) {\n        this.nodes = {};\n        this.edges = {};\n        this.outgoings = {};\n        this.incomings = {};\n        cells.forEach((cell) => this.onCellAdded(cell));\n    }\n    onEdgeTerminalChanged(edge, type) {\n        const ref = type === 'source' ? this.outgoings : this.incomings;\n        const prev = edge.previous(type);\n        if (prev && prev.cell) {\n            const cache = ref[prev.cell];\n            const index = cache ? cache.indexOf(edge.id) : -1;\n            if (index >= 0) {\n                cache.splice(index, 1);\n                if (cache.length === 0) {\n                    delete ref[prev.cell];\n                }\n            }\n        }\n        const terminal = edge.getTerminal(type);\n        if (terminal && terminal.cell) {\n            const cache = ref[terminal.cell] || [];\n            const index = cache.indexOf(edge.id);\n            if (index === -1) {\n                cache.push(edge.id);\n            }\n            ref[terminal.cell] = cache;\n        }\n    }\n    prepareCell(cell, options) {\n        if (!cell.model && (!options || !options.dryrun)) {\n            cell.model = this;\n        }\n        if (cell.zIndex == null) {\n            cell.setZIndex(this.getMaxZIndex() + 1, { silent: true });\n        }\n        return cell;\n    }\n    resetCells(cells, options = {}) {\n        // Do not update model at this time. Because if we just update the graph\n        // with the same json-data, the edge will reference to the old nodes.\n        cells.map((cell) => this.prepareCell(cell, Object.assign(Object.assign({}, options), { dryrun: true })));\n        this.collection.reset(cells, options);\n        // Update model and trigger edge update it's references\n        cells.map((cell) => this.prepareCell(cell, { options }));\n        return this;\n    }\n    clear(options = {}) {\n        const raw = this.getCells();\n        if (raw.length === 0) {\n            return this;\n        }\n        const localOptions = Object.assign(Object.assign({}, options), { clear: true });\n        this.batchUpdate('clear', () => {\n            // The nodes come after the edges.\n            const cells = raw.sort((a, b) => {\n                const v1 = a.isEdge() ? 1 : 2;\n                const v2 = b.isEdge() ? 1 : 2;\n                return v1 - v2;\n            });\n            while (cells.length > 0) {\n                // Note that all the edges are removed first, so it's safe to\n                // remove the nodes without removing the connected edges first.\n                const cell = cells.shift();\n                if (cell) {\n                    cell.remove(localOptions);\n                }\n            }\n        }, localOptions);\n        return this;\n    }\n    addNode(metadata, options = {}) {\n        const node = Node.isNode(metadata) ? metadata : this.createNode(metadata);\n        this.addCell(node, options);\n        return node;\n    }\n    createNode(metadata) {\n        return Node.create(metadata);\n    }\n    addEdge(metadata, options = {}) {\n        const edge = Edge.isEdge(metadata) ? metadata : this.createEdge(metadata);\n        this.addCell(edge, options);\n        return edge;\n    }\n    createEdge(metadata) {\n        return Edge.create(metadata);\n    }\n    addCell(cell, options = {}) {\n        if (Array.isArray(cell)) {\n            return this.addCells(cell, options);\n        }\n        if (!this.collection.has(cell) && !this.addings.has(cell)) {\n            this.addings.set(cell, true);\n            this.collection.add(this.prepareCell(cell, options), options);\n            cell.eachChild((child) => this.addCell(child, options));\n            this.addings.delete(cell);\n        }\n        return this;\n    }\n    addCells(cells, options = {}) {\n        const count = cells.length;\n        if (count === 0) {\n            return this;\n        }\n        const localOptions = Object.assign(Object.assign({}, options), { position: count - 1, maxPosition: count - 1 });\n        this.startBatch('add', Object.assign(Object.assign({}, localOptions), { cells }));\n        cells.forEach((cell) => {\n            this.addCell(cell, localOptions);\n            localOptions.position -= 1;\n        });\n        this.stopBatch('add', Object.assign(Object.assign({}, localOptions), { cells }));\n        return this;\n    }\n    removeCell(obj, options = {}) {\n        const cell = typeof obj === 'string' ? this.getCell(obj) : obj;\n        if (cell && this.has(cell)) {\n            return this.collection.remove(cell, options);\n        }\n        return null;\n    }\n    removeCells(cells, options = {}) {\n        if (cells.length) {\n            return this.batchUpdate('remove', () => {\n                return cells.map((cell) => this.removeCell(cell, options));\n            });\n        }\n        return [];\n    }\n    removeConnectedEdges(cell, options = {}) {\n        const edges = this.getConnectedEdges(cell);\n        edges.forEach((edge) => {\n            edge.remove(options);\n        });\n        return edges;\n    }\n    disconnectConnectedEdges(cell, options = {}) {\n        const cellId = typeof cell === 'string' ? cell : cell.id;\n        this.getConnectedEdges(cell).forEach((edge) => {\n            const sourceCell = edge.getSourceCell();\n            const targetCell = edge.getTargetCell();\n            if (sourceCell && sourceCell.id === cellId) {\n                edge.setSource({ x: 0, y: 0 }, options);\n            }\n            if (targetCell && targetCell.id === cellId) {\n                edge.setTarget({ x: 0, y: 0 }, options);\n            }\n        });\n    }\n    has(obj) {\n        return this.collection.has(obj);\n    }\n    total() {\n        return this.collection.length;\n    }\n    indexOf(cell) {\n        return this.collection.indexOf(cell);\n    }\n    /**\n     * Returns a cell from the graph by its id.\n     */\n    getCell(id) {\n        return this.collection.get(id);\n    }\n    /**\n     * Returns all the nodes and edges in the graph.\n     */\n    getCells() {\n        return this.collection.toArray();\n    }\n    /**\n     * Returns the first cell (node or edge) in the graph. The first cell is\n     * defined as the cell with the lowest `zIndex`.\n     */\n    getFirstCell() {\n        return this.collection.first();\n    }\n    /**\n     * Returns the last cell (node or edge) in the graph. The last cell is\n     * defined as the cell with the highest `zIndex`.\n     */\n    getLastCell() {\n        return this.collection.last();\n    }\n    /**\n     * Returns the lowest `zIndex` value in the graph.\n     */\n    getMinZIndex() {\n        const first = this.collection.first();\n        return first ? first.getZIndex() || 0 : 0;\n    }\n    /**\n     * Returns the highest `zIndex` value in the graph.\n     */\n    getMaxZIndex() {\n        const last = this.collection.last();\n        return last ? last.getZIndex() || 0 : 0;\n    }\n    getCellsFromCache(cache) {\n        return cache\n            ? Object.keys(cache)\n                .map((id) => this.getCell(id))\n                .filter((cell) => cell != null)\n            : [];\n    }\n    /**\n     * Returns all the nodes in the graph.\n     */\n    getNodes() {\n        return this.getCellsFromCache(this.nodes);\n    }\n    /**\n     * Returns all the edges in the graph.\n     */\n    getEdges() {\n        return this.getCellsFromCache(this.edges);\n    }\n    /**\n     * Returns all outgoing edges for the node.\n     */\n    getOutgoingEdges(cell) {\n        const cellId = typeof cell === 'string' ? cell : cell.id;\n        const cellIds = this.outgoings[cellId];\n        return cellIds\n            ? cellIds\n                .map((id) => this.getCell(id))\n                .filter((cell) => cell && cell.isEdge())\n            : null;\n    }\n    /**\n     * Returns all incoming edges for the node.\n     */\n    getIncomingEdges(cell) {\n        const cellId = typeof cell === 'string' ? cell : cell.id;\n        const cellIds = this.incomings[cellId];\n        return cellIds\n            ? cellIds\n                .map((id) => this.getCell(id))\n                .filter((cell) => cell && cell.isEdge())\n            : null;\n    }\n    /**\n     * Returns edges connected with cell.\n     */\n    getConnectedEdges(cell, options = {}) {\n        const result = [];\n        const node = typeof cell === 'string' ? this.getCell(cell) : cell;\n        if (node == null) {\n            return result;\n        }\n        const cache = {};\n        const indirect = options.indirect;\n        let incoming = options.incoming;\n        let outgoing = options.outgoing;\n        if (incoming == null && outgoing == null) {\n            incoming = outgoing = true;\n        }\n        const collect = (cell, isOutgoing) => {\n            const edges = isOutgoing\n                ? this.getOutgoingEdges(cell)\n                : this.getIncomingEdges(cell);\n            if (edges != null) {\n                edges.forEach((edge) => {\n                    if (cache[edge.id]) {\n                        return;\n                    }\n                    result.push(edge);\n                    cache[edge.id] = true;\n                    if (indirect) {\n                        if (incoming) {\n                            collect(edge, false);\n                        }\n                        if (outgoing) {\n                            collect(edge, true);\n                        }\n                    }\n                });\n            }\n            if (indirect && cell.isEdge()) {\n                const terminal = isOutgoing\n                    ? cell.getTargetCell()\n                    : cell.getSourceCell();\n                if (terminal && terminal.isEdge()) {\n                    if (!cache[terminal.id]) {\n                        result.push(terminal);\n                        collect(terminal, isOutgoing);\n                    }\n                }\n            }\n        };\n        if (outgoing) {\n            collect(node, true);\n        }\n        if (incoming) {\n            collect(node, false);\n        }\n        if (options.deep) {\n            const descendants = node.getDescendants({ deep: true });\n            const embedsCache = {};\n            descendants.forEach((cell) => {\n                if (cell.isNode()) {\n                    embedsCache[cell.id] = true;\n                }\n            });\n            const collectSub = (cell, isOutgoing) => {\n                const edges = isOutgoing\n                    ? this.getOutgoingEdges(cell.id)\n                    : this.getIncomingEdges(cell.id);\n                if (edges != null) {\n                    edges.forEach((edge) => {\n                        if (!cache[edge.id]) {\n                            const sourceCell = edge.getSourceCell();\n                            const targetCell = edge.getTargetCell();\n                            if (!options.enclosed &&\n                                sourceCell &&\n                                embedsCache[sourceCell.id] &&\n                                targetCell &&\n                                embedsCache[targetCell.id]) {\n                                return;\n                            }\n                            result.push(edge);\n                            cache[edge.id] = true;\n                        }\n                    });\n                }\n            };\n            descendants.forEach((cell) => {\n                if (cell.isEdge()) {\n                    return;\n                }\n                if (outgoing) {\n                    collectSub(cell, true);\n                }\n                if (incoming) {\n                    collectSub(cell, false);\n                }\n            });\n        }\n        return result;\n    }\n    isBoundary(cell, isOrigin) {\n        const node = typeof cell === 'string' ? this.getCell(cell) : cell;\n        const arr = isOrigin\n            ? this.getIncomingEdges(node)\n            : this.getOutgoingEdges(node);\n        return arr == null || arr.length === 0;\n    }\n    getBoundaryNodes(isOrigin) {\n        const result = [];\n        Object.keys(this.nodes).forEach((nodeId) => {\n            if (this.isBoundary(nodeId, isOrigin)) {\n                const node = this.getCell(nodeId);\n                if (node) {\n                    result.push(node);\n                }\n            }\n        });\n        return result;\n    }\n    /**\n     * Returns an array of all the roots of the graph.\n     */\n    getRoots() {\n        return this.getBoundaryNodes(true);\n    }\n    /**\n     * Returns an array of all the leafs of the graph.\n     */\n    getLeafs() {\n        return this.getBoundaryNodes(false);\n    }\n    /**\n     * Returns `true` if the node is a root node, i.e. there is no edges\n     * coming to the node.\n     */\n    isRoot(cell) {\n        return this.isBoundary(cell, true);\n    }\n    /**\n     * Returns `true` if the node is a leaf node, i.e. there is no edges\n     * going out from the node.\n     */\n    isLeaf(cell) {\n        return this.isBoundary(cell, false);\n    }\n    /**\n     * Returns all the neighbors of node in the graph. Neighbors are all\n     * the nodes connected to node via either incoming or outgoing edge.\n     */\n    getNeighbors(cell, options = {}) {\n        let incoming = options.incoming;\n        let outgoing = options.outgoing;\n        if (incoming == null && outgoing == null) {\n            incoming = outgoing = true;\n        }\n        const edges = this.getConnectedEdges(cell, options);\n        const map = edges.reduce((memo, edge) => {\n            const hasLoop = edge.hasLoop(options);\n            const sourceCell = edge.getSourceCell();\n            const targetCell = edge.getTargetCell();\n            if (incoming &&\n                sourceCell &&\n                sourceCell.isNode() &&\n                !memo[sourceCell.id]) {\n                if (hasLoop ||\n                    (sourceCell !== cell &&\n                        (!options.deep || !sourceCell.isDescendantOf(cell)))) {\n                    memo[sourceCell.id] = sourceCell;\n                }\n            }\n            if (outgoing &&\n                targetCell &&\n                targetCell.isNode() &&\n                !memo[targetCell.id]) {\n                if (hasLoop ||\n                    (targetCell !== cell &&\n                        (!options.deep || !targetCell.isDescendantOf(cell)))) {\n                    memo[targetCell.id] = targetCell;\n                }\n            }\n            return memo;\n        }, {});\n        if (cell.isEdge()) {\n            if (incoming) {\n                const sourceCell = cell.getSourceCell();\n                if (sourceCell && sourceCell.isNode() && !map[sourceCell.id]) {\n                    map[sourceCell.id] = sourceCell;\n                }\n            }\n            if (outgoing) {\n                const targetCell = cell.getTargetCell();\n                if (targetCell && targetCell.isNode() && !map[targetCell.id]) {\n                    map[targetCell.id] = targetCell;\n                }\n            }\n        }\n        return Object.keys(map).map((id) => map[id]);\n    }\n    /**\n     * Returns `true` if `cell2` is a neighbor of `cell1`.\n     */\n    isNeighbor(cell1, cell2, options = {}) {\n        let incoming = options.incoming;\n        let outgoing = options.outgoing;\n        if (incoming == null && outgoing == null) {\n            incoming = outgoing = true;\n        }\n        return this.getConnectedEdges(cell1, options).some((edge) => {\n            const sourceCell = edge.getSourceCell();\n            const targetCell = edge.getTargetCell();\n            if (incoming && sourceCell && sourceCell.id === cell2.id) {\n                return true;\n            }\n            if (outgoing && targetCell && targetCell.id === cell2.id) {\n                return true;\n            }\n            return false;\n        });\n    }\n    getSuccessors(cell, options = {}) {\n        const successors = [];\n        this.search(cell, (curr, distance) => {\n            if (curr !== cell && this.matchDistance(distance, options.distance)) {\n                successors.push(curr);\n            }\n        }, Object.assign(Object.assign({}, options), { outgoing: true }));\n        return successors;\n    }\n    /**\n     * Returns `true` if `cell2` is a successor of `cell1`.\n     */\n    isSuccessor(cell1, cell2, options = {}) {\n        let result = false;\n        this.search(cell1, (curr, distance) => {\n            if (curr === cell2 &&\n                curr !== cell1 &&\n                this.matchDistance(distance, options.distance)) {\n                result = true;\n                return false;\n            }\n        }, Object.assign(Object.assign({}, options), { outgoing: true }));\n        return result;\n    }\n    getPredecessors(cell, options = {}) {\n        const predecessors = [];\n        this.search(cell, (curr, distance) => {\n            if (curr !== cell && this.matchDistance(distance, options.distance)) {\n                predecessors.push(curr);\n            }\n        }, Object.assign(Object.assign({}, options), { incoming: true }));\n        return predecessors;\n    }\n    /**\n     * Returns `true` if `cell2` is a predecessor of `cell1`.\n     */\n    isPredecessor(cell1, cell2, options = {}) {\n        let result = false;\n        this.search(cell1, (curr, distance) => {\n            if (curr === cell2 &&\n                curr !== cell1 &&\n                this.matchDistance(distance, options.distance)) {\n                result = true;\n                return false;\n            }\n        }, Object.assign(Object.assign({}, options), { incoming: true }));\n        return result;\n    }\n    matchDistance(distance, preset) {\n        if (preset == null) {\n            return true;\n        }\n        if (typeof preset === 'function') {\n            return preset(distance);\n        }\n        if (Array.isArray(preset) && preset.includes(distance)) {\n            return true;\n        }\n        return distance === preset;\n    }\n    /**\n     * Returns the common ancestor of the passed cells.\n     */\n    getCommonAncestor(...cells) {\n        const arr = [];\n        cells.forEach((item) => {\n            if (item) {\n                if (Array.isArray(item)) {\n                    arr.push(...item);\n                }\n                else {\n                    arr.push(item);\n                }\n            }\n        });\n        return Cell.getCommonAncestor(...arr);\n    }\n    /**\n     * Returns an array of cells that result from finding nodes/edges that\n     * are connected to any of the cells in the cells array. This function\n     * loops over cells and if the current cell is a edge, it collects its\n     * source/target nodes; if it is an node, it collects its incoming and\n     * outgoing edges if both the edge terminal (source/target) are in the\n     * cells array.\n     */\n    getSubGraph(cells, options = {}) {\n        const subgraph = [];\n        const cache = {};\n        const nodes = [];\n        const edges = [];\n        const collect = (cell) => {\n            if (!cache[cell.id]) {\n                subgraph.push(cell);\n                cache[cell.id] = cell;\n                if (cell.isEdge()) {\n                    edges.push(cell);\n                }\n                if (cell.isNode()) {\n                    nodes.push(cell);\n                }\n            }\n        };\n        cells.forEach((cell) => {\n            collect(cell);\n            if (options.deep) {\n                const descendants = cell.getDescendants({ deep: true });\n                descendants.forEach((descendant) => collect(descendant));\n            }\n        });\n        edges.forEach((edge) => {\n            // For edges, include their source & target\n            const sourceCell = edge.getSourceCell();\n            const targetCell = edge.getTargetCell();\n            if (sourceCell && !cache[sourceCell.id]) {\n                subgraph.push(sourceCell);\n                cache[sourceCell.id] = sourceCell;\n                if (sourceCell.isNode()) {\n                    nodes.push(sourceCell);\n                }\n            }\n            if (targetCell && !cache[targetCell.id]) {\n                subgraph.push(targetCell);\n                cache[targetCell.id] = targetCell;\n                if (targetCell.isNode()) {\n                    nodes.push(targetCell);\n                }\n            }\n        });\n        nodes.forEach((node) => {\n            // For nodes, include their connected edges if their source/target\n            // is in the subgraph.\n            const edges = this.getConnectedEdges(node, options);\n            edges.forEach((edge) => {\n                const sourceCell = edge.getSourceCell();\n                const targetCell = edge.getTargetCell();\n                if (!cache[edge.id] &&\n                    sourceCell &&\n                    cache[sourceCell.id] &&\n                    targetCell &&\n                    cache[targetCell.id]) {\n                    subgraph.push(edge);\n                    cache[edge.id] = edge;\n                }\n            });\n        });\n        return subgraph;\n    }\n    /**\n     * Clones the whole subgraph (including all the connected links whose\n     * source/target is in the subgraph). If `options.deep` is `true`, also\n     * take into account all the embedded cells of all the subgraph cells.\n     *\n     * Returns a map of the form: { [original cell ID]: [clone] }.\n     */\n    cloneSubGraph(cells, options = {}) {\n        const subgraph = this.getSubGraph(cells, options);\n        return this.cloneCells(subgraph);\n    }\n    cloneCells(cells) {\n        return Cell.cloneCells(cells);\n    }\n    getNodesFromPoint(x, y) {\n        const p = typeof x === 'number' ? { x, y: y || 0 } : x;\n        return this.getNodes().filter((node) => {\n            return node.getBBox().containsPoint(p);\n        });\n    }\n    getNodesInArea(x, y, w, h, options) {\n        const rect = typeof x === 'number'\n            ? new Rectangle(x, y, w, h)\n            : Rectangle.create(x);\n        const opts = typeof x === 'number' ? options : y;\n        const strict = opts && opts.strict;\n        return this.getNodes().filter((node) => {\n            const bbox = node.getBBox();\n            return strict ? rect.containsRect(bbox) : rect.isIntersectWithRect(bbox);\n        });\n    }\n    getEdgesInArea(x, y, w, h, options) {\n        const rect = typeof x === 'number'\n            ? new Rectangle(x, y, w, h)\n            : Rectangle.create(x);\n        const opts = typeof x === 'number' ? options : y;\n        const strict = opts && opts.strict;\n        return this.getEdges().filter((edge) => {\n            const bbox = edge.getBBox();\n            if (bbox.width === 0) {\n                bbox.inflate(1, 0);\n            }\n            else if (bbox.height === 0) {\n                bbox.inflate(0, 1);\n            }\n            return strict ? rect.containsRect(bbox) : rect.isIntersectWithRect(bbox);\n        });\n    }\n    getNodesUnderNode(node, options = {}) {\n        const bbox = node.getBBox();\n        const nodes = options.by == null || options.by === 'bbox'\n            ? this.getNodesInArea(bbox)\n            : this.getNodesFromPoint(bbox[options.by]);\n        return nodes.filter((curr) => node.id !== curr.id && !curr.isDescendantOf(node));\n    }\n    /**\n     * Returns the bounding box that surrounds all cells in the graph.\n     */\n    getAllCellsBBox() {\n        return this.getCellsBBox(this.getCells());\n    }\n    /**\n     * Returns the bounding box that surrounds all the given cells.\n     */\n    getCellsBBox(cells, options = {}) {\n        return Cell.getCellsBBox(cells, options);\n    }\n    // #region search\n    search(cell, iterator, options = {}) {\n        if (options.breadthFirst) {\n            this.breadthFirstSearch(cell, iterator, options);\n        }\n        else {\n            this.depthFirstSearch(cell, iterator, options);\n        }\n    }\n    breadthFirstSearch(cell, iterator, options = {}) {\n        const queue = [];\n        const visited = {};\n        const distance = {};\n        queue.push(cell);\n        distance[cell.id] = 0;\n        while (queue.length > 0) {\n            const next = queue.shift();\n            if (next == null || visited[next.id]) {\n                continue;\n            }\n            visited[next.id] = true;\n            if (FunctionExt.call(iterator, this, next, distance[next.id]) === false) {\n                continue;\n            }\n            const neighbors = this.getNeighbors(next, options);\n            neighbors.forEach((neighbor) => {\n                distance[neighbor.id] = distance[next.id] + 1;\n                queue.push(neighbor);\n            });\n        }\n    }\n    depthFirstSearch(cell, iterator, options = {}) {\n        const queue = [];\n        const visited = {};\n        const distance = {};\n        queue.push(cell);\n        distance[cell.id] = 0;\n        while (queue.length > 0) {\n            const next = queue.pop();\n            if (next == null || visited[next.id]) {\n                continue;\n            }\n            visited[next.id] = true;\n            if (FunctionExt.call(iterator, this, next, distance[next.id]) === false) {\n                continue;\n            }\n            const neighbors = this.getNeighbors(next, options);\n            const lastIndex = queue.length;\n            neighbors.forEach((neighbor) => {\n                distance[neighbor.id] = distance[next.id] + 1;\n                queue.splice(lastIndex, 0, neighbor);\n            });\n        }\n    }\n    // #endregion\n    // #region shortest path\n    /** *\n     * Returns an array of IDs of nodes on the shortest\n     * path between source and target.\n     */\n    getShortestPath(source, target, options = {}) {\n        const adjacencyList = {};\n        this.getEdges().forEach((edge) => {\n            const sourceId = edge.getSourceCellId();\n            const targetId = edge.getTargetCellId();\n            if (sourceId && targetId) {\n                if (!adjacencyList[sourceId]) {\n                    adjacencyList[sourceId] = [];\n                }\n                if (!adjacencyList[targetId]) {\n                    adjacencyList[targetId] = [];\n                }\n                adjacencyList[sourceId].push(targetId);\n                if (!options.directed) {\n                    adjacencyList[targetId].push(sourceId);\n                }\n            }\n        });\n        const sourceId = typeof source === 'string' ? source : source.id;\n        const previous = Dijkstra.run(adjacencyList, sourceId, options.weight);\n        const path = [];\n        let targetId = typeof target === 'string' ? target : target.id;\n        if (previous[targetId]) {\n            path.push(targetId);\n        }\n        while ((targetId = previous[targetId])) {\n            path.unshift(targetId);\n        }\n        return path;\n    }\n    // #endregion\n    // #region transform\n    /**\n     * Translate all cells in the graph by `tx` and `ty` pixels.\n     */\n    translate(tx, ty, options) {\n        this.getCells()\n            .filter((cell) => !cell.hasParent())\n            .forEach((cell) => cell.translate(tx, ty, options));\n        return this;\n    }\n    resize(width, height, options) {\n        return this.resizeCells(width, height, this.getCells(), options);\n    }\n    resizeCells(width, height, cells, options = {}) {\n        const bbox = this.getCellsBBox(cells);\n        if (bbox) {\n            const sx = Math.max(width / bbox.width, 0);\n            const sy = Math.max(height / bbox.height, 0);\n            const origin = bbox.getOrigin();\n            cells.forEach((cell) => cell.scale(sx, sy, origin, options));\n        }\n        return this;\n    }\n    // #endregion\n    // #region serialize/deserialize\n    toJSON(options = {}) {\n        return Model.toJSON(this.getCells(), options);\n    }\n    parseJSON(data) {\n        return Model.fromJSON(data);\n    }\n    fromJSON(data, options = {}) {\n        const cells = this.parseJSON(data);\n        this.resetCells(cells, options);\n        return this;\n    }\n    // #endregion\n    // #region batch\n    startBatch(name, data = {}) {\n        this.batches[name] = (this.batches[name] || 0) + 1;\n        this.notify('batch:start', { name, data });\n        return this;\n    }\n    stopBatch(name, data = {}) {\n        this.batches[name] = (this.batches[name] || 0) - 1;\n        this.notify('batch:stop', { name, data });\n        return this;\n    }\n    batchUpdate(name, execute, data = {}) {\n        this.startBatch(name, data);\n        const result = execute();\n        this.stopBatch(name, data);\n        return result;\n    }\n    hasActiveBatch(name = Object.keys(this.batches)) {\n        const names = Array.isArray(name) ? name : [name];\n        return names.some((batch) => this.batches[batch] > 0);\n    }\n}\n(function (Model) {\n    Model.toStringTag = `X6.${Model.name}`;\n    function isModel(instance) {\n        if (instance == null) {\n            return false;\n        }\n        if (instance instanceof Model) {\n            return true;\n        }\n        const tag = instance[Symbol.toStringTag];\n        const model = instance;\n        if ((tag == null || tag === Model.toStringTag) &&\n            typeof model.addNode === 'function' &&\n            typeof model.addEdge === 'function' &&\n            model.collection != null) {\n            return true;\n        }\n        return false;\n    }\n    Model.isModel = isModel;\n})(Model || (Model = {}));\n(function (Model) {\n    function toJSON(cells, options = {}) {\n        return {\n            cells: cells.map((cell) => cell.toJSON(options)),\n        };\n    }\n    Model.toJSON = toJSON;\n    function fromJSON(data) {\n        const cells = [];\n        if (Array.isArray(data)) {\n            cells.push(...data);\n        }\n        else {\n            if (data.cells) {\n                cells.push(...data.cells);\n            }\n            if (data.nodes) {\n                data.nodes.forEach((node) => {\n                    if (node.shape == null) {\n                        node.shape = 'rect';\n                    }\n                    cells.push(node);\n                });\n            }\n            if (data.edges) {\n                data.edges.forEach((edge) => {\n                    if (edge.shape == null) {\n                        edge.shape = 'edge';\n                    }\n                    cells.push(edge);\n                });\n            }\n        }\n        return cells.map((cell) => {\n            const type = cell.shape;\n            if (type) {\n                if (Node.registry.exist(type)) {\n                    return Node.create(cell);\n                }\n                if (Edge.registry.exist(type)) {\n                    return Edge.create(cell);\n                }\n            }\n            throw new Error('The `shape` should be specipied when creating a node/edge instance');\n        });\n    }\n    Model.fromJSON = fromJSON;\n})(Model || (Model = {}));\n//# sourceMappingURL=model.js.map"]},"metadata":{},"sourceType":"module"}