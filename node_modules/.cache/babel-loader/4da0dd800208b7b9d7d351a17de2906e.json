{"ast":null,"code":"import { ObjectExt } from '../../util';\nexport const stroke = {\n  qualify: ObjectExt.isPlainObject,\n\n  set(stroke, _ref) {\n    let {\n      view\n    } = _ref;\n    const cell = view.cell;\n    const options = Object.assign({}, stroke);\n\n    if (cell.isEdge() && options.type === 'linearGradient') {\n      const edgeView = view;\n      const source = edgeView.sourcePoint;\n      const target = edgeView.targetPoint;\n      options.id = `gradient-${options.type}-${cell.id}`;\n      options.attrs = Object.assign(Object.assign({}, options.attrs), {\n        x1: source.x,\n        y1: source.y,\n        x2: target.x,\n        y2: target.y,\n        gradientUnits: 'userSpaceOnUse'\n      });\n      view.graph.defs.remove(options.id);\n    }\n\n    return `url(#${view.graph.defineGradient(options)})`;\n  }\n\n};","map":{"version":3,"sources":["../../../src/registry/attr/stroke.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,YAA1B;AAKA,OAAO,MAAM,MAAM,GAAoB;AACrC,EAAA,OAAO,EAAE,SAAS,CAAC,aADkB;;AAErC,EAAA,GAAG,CAAC,MAAD,QAAsB;AAAA,QAAR;AAAE,MAAA;AAAF,KAAQ;AACvB,UAAM,IAAI,GAAG,IAAI,CAAC,IAAlB;AACA,UAAM,OAAO,GAAG,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,MAAL,CAAhB;;AAEA,QAAI,IAAI,CAAC,MAAL,MAAiB,OAAO,CAAC,IAAR,KAAiB,gBAAtC,EAAwD;AACtD,YAAM,QAAQ,GAAG,IAAjB;AACA,YAAM,MAAM,GAAG,QAAQ,CAAC,WAAxB;AACA,YAAM,MAAM,GAAG,QAAQ,CAAC,WAAxB;AAEA,MAAA,OAAO,CAAC,EAAR,GAAa,YAAY,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE,EAAhD;AACA,MAAA,OAAO,CAAC,KAAR,GAAa,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACR,OAAO,CAAC,KADA,CAAA,EACK;AAChB,QAAA,EAAE,EAAE,MAAM,CAAC,CADK;AAEhB,QAAA,EAAE,EAAE,MAAM,CAAC,CAFK;AAGhB,QAAA,EAAE,EAAE,MAAM,CAAC,CAHK;AAIhB,QAAA,EAAE,EAAE,MAAM,CAAC,CAJK;AAKhB,QAAA,aAAa,EAAE;AALC,OADL,CAAb;AASA,MAAA,IAAI,CAAC,KAAL,CAAW,IAAX,CAAgB,MAAhB,CAAuB,OAAO,CAAC,EAA/B;AACD;;AAED,WAAO,QAAQ,IAAI,CAAC,KAAL,CAAW,cAAX,CAA0B,OAA1B,CAAkC,GAAjD;AACD;;AAzBoC,CAAhC","sourceRoot":"","sourcesContent":["import { ObjectExt } from '../../util';\nexport const stroke = {\n    qualify: ObjectExt.isPlainObject,\n    set(stroke, { view }) {\n        const cell = view.cell;\n        const options = Object.assign({}, stroke);\n        if (cell.isEdge() && options.type === 'linearGradient') {\n            const edgeView = view;\n            const source = edgeView.sourcePoint;\n            const target = edgeView.targetPoint;\n            options.id = `gradient-${options.type}-${cell.id}`;\n            options.attrs = Object.assign(Object.assign({}, options.attrs), { x1: source.x, y1: source.y, x2: target.x, y2: target.y, gradientUnits: 'userSpaceOnUse' });\n            view.graph.defs.remove(options.id);\n        }\n        return `url(#${view.graph.defineGradient(options)})`;\n    },\n};\n//# sourceMappingURL=stroke.js.map"]},"metadata":{},"sourceType":"module"}