{"ast":null,"code":"import { StringExt, FunctionExt, Platform } from '../util';\nexport class Registry {\n  constructor(options) {\n    this.options = Object.assign({}, options);\n    this.data = this.options.data || {};\n    this.register = this.register.bind(this);\n    this.unregister = this.unregister.bind(this);\n  }\n\n  get names() {\n    return Object.keys(this.data);\n  }\n\n  register(name, options) {\n    let force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (typeof name === 'object') {\n      Object.keys(name).forEach(key => {\n        this.register(key, name[key], options);\n      });\n      return;\n    }\n\n    if (this.exist(name) && !force && !Platform.isApplyingHMR()) {\n      this.onDuplicated(name);\n    }\n\n    const process = this.options.process;\n    const entity = process ? FunctionExt.call(process, this, name, options) : options;\n    this.data[name] = entity;\n    return entity;\n  }\n\n  unregister(name) {\n    const entity = name ? this.data[name] : null;\n    delete this.data[name];\n    return entity;\n  }\n\n  get(name) {\n    return name ? this.data[name] : null;\n  }\n\n  exist(name) {\n    return name ? this.data[name] != null : false;\n  }\n\n  onDuplicated(name) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      // race\n      if (this.options.onConflict) {\n        FunctionExt.call(this.options.onConflict, this, name);\n      }\n\n      throw new Error(`${StringExt.upperFirst(this.options.type)} with name '${name}' already registered.`);\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  onNotFound(name, prefix) {\n    throw new Error(this.getSpellingSuggestion(name, prefix));\n  }\n\n  getSpellingSuggestion(name, prefix) {\n    const suggestion = this.getSpellingSuggestionForName(name);\n    const prefixed = prefix ? `${prefix} ${StringExt.lowerFirst(this.options.type)}` : this.options.type;\n    return (// eslint-disable-next-line\n      `${StringExt.upperFirst(prefixed)} with name '${name}' does not exist.${suggestion ? ` Did you mean '${suggestion}'?` : ''}`\n    );\n  }\n\n  getSpellingSuggestionForName(name) {\n    return StringExt.getSpellingSuggestion(name, Object.keys(this.data), candidate => candidate);\n  }\n\n}\n\n(function (Registry) {\n  function create(options) {\n    return new Registry(options);\n  }\n\n  Registry.create = create;\n})(Registry || (Registry = {}));","map":{"version":3,"sources":["../../src/registry/registry.ts"],"names":[],"mappings":"AACA,SAAS,SAAT,EAAoB,WAApB,EAAiC,QAAjC,QAAiD,SAAjD;AAEA,OAAM,MAAO,QAAP,CAAe;AAQnB,EAAA,WAAA,CAAY,OAAZ,EAA4D;AAC1D,SAAK,OAAL,GAAY,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,OAAR,CAAZ;AACA,SAAK,IAAL,GAAa,KAAK,OAAL,CAAa,IAAb,IAA0C,EAAvD;AACA,SAAK,QAAL,GAAgB,KAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAK,UAAL,GAAkB,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAAlB;AACD;;AAEQ,MAAL,KAAK,GAAA;AACP,WAAO,MAAM,CAAC,IAAP,CAAY,KAAK,IAAjB,CAAP;AACD;;AAYD,EAAA,QAAQ,CACN,IADM,EAEN,OAFM,EAGO;AAAA,QAAb,KAAa,uEAAL,KAAK;;AAEb,QAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC5B,MAAA,MAAM,CAAC,IAAP,CAAY,IAAZ,EAAkB,OAAlB,CAA2B,GAAD,IAAQ;AAChC,aAAK,QAAL,CAAc,GAAd,EAAmB,IAAI,CAAC,GAAD,CAAvB,EAA8B,OAA9B;AACD,OAFD;AAGA;AACD;;AAED,QAAI,KAAK,KAAL,CAAW,IAAX,KAAoB,CAAC,KAArB,IAA8B,CAAC,QAAQ,CAAC,aAAT,EAAnC,EAA6D;AAC3D,WAAK,YAAL,CAAkB,IAAlB;AACD;;AAED,UAAM,OAAO,GAAG,KAAK,OAAL,CAAa,OAA7B;AACA,UAAM,MAAM,GAAG,OAAO,GAClB,WAAW,CAAC,IAAZ,CAAiB,OAAjB,EAA0B,IAA1B,EAAuC,IAAvC,EAA6C,OAA7C,CADkB,GAElB,OAFJ;AAIA,SAAK,IAAL,CAAU,IAAV,IAAkB,MAAlB;AAEA,WAAO,MAAP;AACD;;AAID,EAAA,UAAU,CAAC,IAAD,EAAa;AACrB,UAAM,MAAM,GAAG,IAAI,GAAG,KAAK,IAAL,CAAU,IAAV,CAAH,GAAqB,IAAxC;AACA,WAAO,KAAK,IAAL,CAAU,IAAV,CAAP;AACA,WAAO,MAAP;AACD;;AAID,EAAA,GAAG,CAAC,IAAD,EAAa;AACd,WAAO,IAAI,GAAG,KAAK,IAAL,CAAU,IAAV,CAAH,GAAqB,IAAhC;AACD;;AAID,EAAA,KAAK,CAAC,IAAD,EAAa;AAChB,WAAO,IAAI,GAAG,KAAK,IAAL,CAAU,IAAV,KAAmB,IAAtB,GAA6B,KAAxC;AACD;;AAED,EAAA,YAAY,CAAC,IAAD,EAAa;AACvB;AACA,QAAI;AACF;AACA,UAAI,KAAK,OAAL,CAAa,UAAjB,EAA6B;AAC3B,QAAA,WAAW,CAAC,IAAZ,CAAiB,KAAK,OAAL,CAAa,UAA9B,EAA0C,IAA1C,EAAuD,IAAvD;AACD;;AACD,YAAM,IAAI,KAAJ,CACJ,GAAG,SAAS,CAAC,UAAV,CACD,KAAK,OAAL,CAAa,IADZ,CAEF,eAAe,IAAI,uBAHhB,CAAN;AAKD,KAVD,CAUE,OAAO,GAAP,EAAY;AACZ,YAAM,GAAN;AACD;AACF;;AAED,EAAA,UAAU,CAAC,IAAD,EAAe,MAAf,EAA8B;AACtC,UAAM,IAAI,KAAJ,CAAU,KAAK,qBAAL,CAA2B,IAA3B,EAAiC,MAAjC,CAAV,CAAN;AACD;;AAED,EAAA,qBAAqB,CAAC,IAAD,EAAe,MAAf,EAA8B;AACjD,UAAM,UAAU,GAAG,KAAK,4BAAL,CAAkC,IAAlC,CAAnB;AACA,UAAM,QAAQ,GAAG,MAAM,GACnB,GAAG,MAAM,IAAI,SAAS,CAAC,UAAV,CAAqB,KAAK,OAAL,CAAa,IAAlC,CAAuC,EADjC,GAEnB,KAAK,OAAL,CAAa,IAFjB;AAIA,WACE;AACA,SAAG,SAAS,CAAC,UAAV,CAAqB,QAArB,CAA8B,eAAe,IAAI,oBAClD,UAAU,GAAG,kBAAkB,UAAU,IAA/B,GAAsC,EAClD;AAJF;AAMD;;AAES,EAAA,4BAA4B,CAAC,IAAD,EAAa;AACjD,WAAO,SAAS,CAAC,qBAAV,CACL,IADK,EAEL,MAAM,CAAC,IAAP,CAAY,KAAK,IAAjB,CAFK,EAGJ,SAAD,IAAe,SAHV,CAAP;AAKD;;AApHkB;;AAuIrB,CAAA,UAAiB,QAAjB,EAAyB;AACvB,WAAgB,MAAhB,CAIE,OAJF,EAIyC;AACvC,WAAO,IAAI,QAAJ,CAA4C,OAA5C,CAAP;AACD;;AANe,EAAA,QAAA,CAAA,MAAA,GAAM,MAAN;AAOjB,CARD,EAAiB,QAAQ,KAAR,QAAQ,GAAA,EAAA,CAAzB","sourceRoot":"","sourcesContent":["import { StringExt, FunctionExt, Platform } from '../util';\nexport class Registry {\n    constructor(options) {\n        this.options = Object.assign({}, options);\n        this.data = this.options.data || {};\n        this.register = this.register.bind(this);\n        this.unregister = this.unregister.bind(this);\n    }\n    get names() {\n        return Object.keys(this.data);\n    }\n    register(name, options, force = false) {\n        if (typeof name === 'object') {\n            Object.keys(name).forEach((key) => {\n                this.register(key, name[key], options);\n            });\n            return;\n        }\n        if (this.exist(name) && !force && !Platform.isApplyingHMR()) {\n            this.onDuplicated(name);\n        }\n        const process = this.options.process;\n        const entity = process\n            ? FunctionExt.call(process, this, name, options)\n            : options;\n        this.data[name] = entity;\n        return entity;\n    }\n    unregister(name) {\n        const entity = name ? this.data[name] : null;\n        delete this.data[name];\n        return entity;\n    }\n    get(name) {\n        return name ? this.data[name] : null;\n    }\n    exist(name) {\n        return name ? this.data[name] != null : false;\n    }\n    onDuplicated(name) {\n        // eslint-disable-next-line no-useless-catch\n        try {\n            // race\n            if (this.options.onConflict) {\n                FunctionExt.call(this.options.onConflict, this, name);\n            }\n            throw new Error(`${StringExt.upperFirst(this.options.type)} with name '${name}' already registered.`);\n        }\n        catch (err) {\n            throw err;\n        }\n    }\n    onNotFound(name, prefix) {\n        throw new Error(this.getSpellingSuggestion(name, prefix));\n    }\n    getSpellingSuggestion(name, prefix) {\n        const suggestion = this.getSpellingSuggestionForName(name);\n        const prefixed = prefix\n            ? `${prefix} ${StringExt.lowerFirst(this.options.type)}`\n            : this.options.type;\n        return (\n        // eslint-disable-next-line\n        `${StringExt.upperFirst(prefixed)} with name '${name}' does not exist.${suggestion ? ` Did you mean '${suggestion}'?` : ''}`);\n    }\n    getSpellingSuggestionForName(name) {\n        return StringExt.getSpellingSuggestion(name, Object.keys(this.data), (candidate) => candidate);\n    }\n}\n(function (Registry) {\n    function create(options) {\n        return new Registry(options);\n    }\n    Registry.create = create;\n})(Registry || (Registry = {}));\n//# sourceMappingURL=registry.js.map"]},"metadata":{},"sourceType":"module"}