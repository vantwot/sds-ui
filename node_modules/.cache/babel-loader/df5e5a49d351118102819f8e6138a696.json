{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { isEqual } from 'lodash';\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { XFlowGraphCommands, XFlowNodeCommands, XFlowEdgeCommands, XFlowGroupCommands } from '../constant';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nexport var NsGraphUtils;\n\n(function (NsGraphUtils) {\n  function isNodeEqual(curNodeConfig, nextNodeConfig) {\n    /** XFlow默认的判断节点是否相等的逻辑 */\n    return isEqual(curNodeConfig, nextNodeConfig);\n  }\n\n  NsGraphUtils.isNodeEqual = isNodeEqual;\n\n  function isEdgeEqual(curEdgeConfig, nextEdgeConfig) {\n    /** XFlow默认的判断边是否相等的逻辑 */\n    return isEqual(curEdgeConfig, nextEdgeConfig);\n  }\n\n  NsGraphUtils.isEdgeEqual = isEdgeEqual;\n})(NsGraphUtils || (NsGraphUtils = {}));\n\nexport var NsGraphRender;\n\n(function (NsGraphRender) {\n  /** Command: 用于注册named factory */\n  NsGraphRender.command = XFlowGraphCommands.GRAPH_RENDER;\n  /** hookName */\n\n  NsGraphRender.hookKey = 'graphRender';\n})(NsGraphRender || (NsGraphRender = {}));\n\nlet GraphRenderCommand =\n/** 画布渲染命令 */\nclass GraphRenderCommand {\n  constructor() {\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.graphRender.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const x6Graph = yield this.ctx.getX6Graph();\n        const {\n          graphMeta,\n          beforeRender,\n          graphData,\n          isNodeEqual,\n          isEdgeEqual,\n          afterRender\n        } = handlerArgs;\n        /** 如果用户自定义beforeRender方法 */\n\n        beforeRender && beforeRender(graphMeta);\n        yield this.doLoadGraph(x6Graph, graphData, isNodeEqual, isEdgeEqual);\n        /** 如果用户自定义afterRender方法 */\n\n        afterRender && afterRender(graphData, graphMeta);\n        return {};\n      }), runtimeHook);\n      /** 设置结果 */\n\n      this.ctx.setResult(result);\n      return this;\n    });\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.ctx.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n\n    this.doLoadGraph = (x6Graph, graphData, isNodeEqual, isEdgeEqual) => __awaiter(this, void 0, void 0, function* () {\n      if (!(x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.isFrozen())) {\n        x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.freeze();\n      }\n\n      const commandService = this.ctx.getCommands();\n      const {\n        addNodeConfigs,\n        addEdgeConfigs,\n        // retainNodes,\n        // retainEdges,\n        removeNodes,\n        removeEdges,\n        updateNodes,\n        updateEdges\n      } = this.graphDataDiff(x6Graph, graphData, isNodeEqual, isEdgeEqual);\n      /** 新增节点/边 */\n\n      for (const nodeConfig of addNodeConfigs) {\n        yield commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n          nodeConfig\n        }, {\n          name: 'remove servcie ',\n          handler: args => __awaiter(this, void 0, void 0, function* () {\n            delete args.createNodeService;\n          })\n        });\n      }\n\n      yield commandService.executeCommand(XFlowGroupCommands.INIT_GROUP.id, {\n        graphData: {\n          nodes: addNodeConfigs,\n          edges: []\n        }\n      });\n\n      for (const edgeConfig of addEdgeConfigs) {\n        yield commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n          edgeConfig\n        }, {\n          name: 'remove servcie ',\n          handler: args => __awaiter(this, void 0, void 0, function* () {\n            delete args.createEdgeService;\n          })\n        });\n      }\n      /** 删除节点/边/群组 */\n\n\n      for (const removeNode of removeNodes) {\n        const nodeData = removeNode === null || removeNode === void 0 ? void 0 : removeNode.getData();\n\n        if (nodeData.isGroup) {\n          yield commandService.executeCommand(XFlowGroupCommands.DEL_GROUP.id, {\n            nodeConfig: nodeData\n          });\n        } else {\n          yield commandService.executeCommand(XFlowNodeCommands.DEL_NODE.id, {\n            nodeConfig: nodeData\n          });\n        }\n      }\n\n      for (const removeEdge of removeEdges) {\n        const edgeData = removeEdge === null || removeEdge === void 0 ? void 0 : removeEdge.getData();\n        yield commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, {\n          edgeConfig: edgeData\n        });\n      }\n      /** 更新节点/边 */\n\n\n      for (const updateNode of updateNodes) {\n        const nodeData = updateNode === null || updateNode === void 0 ? void 0 : updateNode.getData();\n        yield commandService.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n          nodeConfig: nodeData\n        });\n      }\n\n      for (const updateEdge of updateEdges) {\n        const edgeData = updateEdge === null || updateEdge === void 0 ? void 0 : updateEdge.getData();\n        yield commandService.executeCommand(XFlowEdgeCommands.UPDATE_EDGE.id, {\n          edgeConfig: edgeData\n        });\n      }\n\n      if (x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.isFrozen()) {\n        x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.unfreeze();\n      }\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n  /**\n   * 画布内容Diff\n   * @param x6Graph x6画布实例\n   * @param graphData 画布数据\n   * @param isNodeEqual 允许用户自定义判断节点是否相等\n   * @param isEdgeEqual 允许用户自定义判断边是否相等\n   */\n\n\n  graphDataDiff(x6Graph, graphData, isNodeEqual, isEdgeEqual) {\n    const {\n      nodes: nodeConfigs,\n      edges: edgeConfigs\n    } = graphData;\n    /** 新增节点数据 */\n\n    const addNodeConfigs = [];\n    nodeConfigs.forEach(nodeConfig => {\n      const findNode = x6Graph.getCellById(nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.id);\n\n      if (!findNode) {\n        addNodeConfigs.push(nodeConfig);\n      }\n    });\n    /** 保持、更新、移除节点 */\n\n    const retainNodes = [];\n    const updateNodes = [];\n    const removeNodes = [];\n    const allNodes = x6Graph.getNodes();\n    allNodes.forEach(x6Node => {\n      const findNodeConfig = nodeConfigs.find(nodeConfig => (nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.id) === (x6Node === null || x6Node === void 0 ? void 0 : x6Node.id));\n\n      if (!findNodeConfig) {\n        removeNodes.push(x6Node);\n      } else {\n        let judgeResult = true;\n\n        if (isNodeEqual) {\n          /** 如果用户自定义节点是否相等的方法 */\n          judgeResult = isNodeEqual(x6Node === null || x6Node === void 0 ? void 0 : x6Node.data, findNodeConfig);\n        } else {\n          /** XFlow默认的判断节点是否相等的逻辑 */\n          if ((x6Node === null || x6Node === void 0 ? void 0 : x6Node.data) && findNodeConfig) {\n            judgeResult = NsGraphUtils.isNodeEqual(x6Node === null || x6Node === void 0 ? void 0 : x6Node.data, findNodeConfig);\n          }\n        }\n\n        if (!judgeResult) {\n          x6Node.setData(findNodeConfig);\n        }\n\n        judgeResult === true ? retainNodes.push(x6Node) : updateNodes.push(x6Node);\n      }\n    });\n    /** 新增边数据 */\n\n    const addEdgeConfigs = [];\n    edgeConfigs.forEach(edgeConfig => {\n      const findEdge = x6Graph.getCellById(edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.id);\n\n      if (!findEdge) {\n        addEdgeConfigs.push(edgeConfig);\n      }\n    });\n    /** 保持、更新、移除节点 */\n\n    const retainEdges = [];\n    const updateEdges = [];\n    const removeEdges = [];\n    const allEdges = x6Graph.getEdges();\n    allEdges.forEach(x6Edge => {\n      const findEdgeConfig = edgeConfigs.find(edgeConfig => (edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.id) === (x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.id));\n\n      if (!findEdgeConfig) {\n        removeEdges.push(x6Edge);\n      } else {\n        let judgeResult = true;\n\n        if (isEdgeEqual) {\n          /** 如果用户自定义边是否相等的方法 */\n          judgeResult = isEdgeEqual(x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data, findEdgeConfig);\n        } else {\n          /** XFlow默认的判断边是否相等的逻辑 */\n          if ((x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data) && findEdgeConfig) {\n            judgeResult = NsGraphUtils.isEdgeEqual(x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data, findEdgeConfig);\n          }\n        }\n\n        if (!judgeResult) {\n          x6Edge.setData(findEdgeConfig);\n        }\n\n        judgeResult === true ? retainEdges.push(x6Edge) : updateEdges.push(x6Edge);\n      }\n    });\n    return {\n      addNodeConfigs,\n      addEdgeConfigs,\n      retainNodes,\n      retainEdges,\n      removeNodes,\n      removeEdges,\n      updateNodes,\n      updateEdges\n    };\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], GraphRenderCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], GraphRenderCommand.prototype, \"init\", null);\n\nGraphRenderCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphRender.command.id\n  }\n})\n/** 画布渲染命令 */\n], GraphRenderCommand);\nexport { GraphRenderCommand };","map":{"version":3,"sources":["../../../src/command-contributions/graph/graph-render.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,SAAS,OAAT,QAAwB,QAAxB;AACA,SAAS,MAAT,EAAiB,UAAjB,EAA6B,aAA7B,QAAkD,cAAlD;AACA,SACE,kBADF,EAEE,iBAFF,EAGE,iBAHF,EAIE,kBAJF,QAKO,aALP;AAMA,SAAS,eAAT,EAA0B,uBAA1B,QAAyD,yBAAzD;AAIA,OAAM,IAAW,YAAX;;AAAN,CAAA,UAAiB,YAAjB,EAA6B;AAC3B,WAAgB,WAAhB,CACE,aADF,EAEE,cAFF,EAEqC;AAEnC;AACA,WAAO,OAAO,CAAC,aAAD,EAAgB,cAAhB,CAAd;AACD;;AANe,EAAA,YAAA,CAAA,WAAA,GAAW,WAAX;;AAQhB,WAAgB,WAAhB,CACE,aADF,EAEE,cAFF,EAEqC;AAEnC;AACA,WAAO,OAAO,CAAC,aAAD,EAAgB,cAAhB,CAAd;AACD;;AANe,EAAA,YAAA,CAAA,WAAA,GAAW,WAAX;AAOjB,CAhBD,EAAiB,YAAY,KAAZ,YAAY,GAAA,EAAA,CAA7B;;AAkBA,OAAM,IAAW,aAAX;;AAAN,CAAA,UAAiB,aAAjB,EAA8B;AAC5B;AACa,EAAA,aAAA,CAAA,OAAA,GAAU,kBAAkB,CAAC,YAA7B;AACb;;AACa,EAAA,aAAA,CAAA,OAAA,GAAU,aAAV;AAgCd,CApCD,EAAiB,aAAa,KAAb,aAAa,GAAA,EAAA,CAA9B;;AA0CA,IAAa,kBAAkB;AAD/B;AACA,MAAa,kBAAb,CAA+B;AAA/B,EAAA,WAAA,GAAA;AAUE,SAAA,OAAA,GAAU,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACnB,YAAM;AAAE,QAAA,IAAF;AAAQ,QAAA,KAAK,EAAE;AAAf,UAA+B,KAAK,GAAL,CAAS,OAAT,EAArC;AACA,YAAM,KAAK,GAAG,KAAK,GAAL,CAAS,QAAT,EAAd;AAEA,YAAM,MAAM,GAAG,MAAM,KAAK,CAAC,WAAN,CAAkB,IAAlB,CACnB,IADmB,EAEb,WAAN,IAAoB,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAClB,cAAM,OAAO,GAAG,MAAM,KAAK,GAAL,CAAS,UAAT,EAAtB;AAEA,cAAM;AAAE,UAAA,SAAF;AAAa,UAAA,YAAb;AAA2B,UAAA,SAA3B;AAAsC,UAAA,WAAtC;AAAmD,UAAA,WAAnD;AAAgE,UAAA;AAAhE,YACJ,WADF;AAGA;;AACA,QAAA,YAAY,IAAI,YAAY,CAAC,SAAD,CAA5B;AAEA,cAAM,KAAK,WAAL,CAAiB,OAAjB,EAA0B,SAA1B,EAAqC,WAArC,EAAkD,WAAlD,CAAN;AAEA;;AACA,QAAA,WAAW,IAAI,WAAW,CAAC,SAAD,EAAY,SAAZ,CAA1B;AAEA,eAAO,EAAP;AACD,OAfmB,CAFD,EAkBnB,WAlBmB,CAArB;AAqBA;;AACA,WAAK,GAAL,CAAS,SAAT,CAAmB,MAAnB;AAEA,aAAO,IAAP;AACD,KA7BoB,CAArB;;AA+BA,SAAA,IAAA,GAAO,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAChB,WAAK,GAAL,CAAS,IAAT;AACA,aAAO,IAAP;AACD,KAHiB,CAAlB;;AAKA,SAAA,IAAA,GAAO,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAChB,UAAI,CAAC,KAAK,GAAL,CAAS,UAAd,EAA0B;AACxB,cAAM,KAAK,OAAL,EAAN;AACD;;AACD,aAAO,IAAP;AACD,KALiB,CAAlB;;AAWQ,SAAA,WAAA,GAAc,CACpB,OADoB,EAEpB,SAFoB,EAGpB,WAHoB,EAIpB,WAJoB,KAKlB,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACF,UAAI,EAAC,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,QAAT,EAAD,CAAJ,EAA0B;AACxB,QAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,MAAT,EAAA;AACD;;AAED,YAAM,cAAc,GAAG,KAAK,GAAL,CAAS,WAAT,EAAvB;AAEA,YAAM;AACJ,QAAA,cADI;AAEJ,QAAA,cAFI;AAGJ;AACA;AACA,QAAA,WALI;AAMJ,QAAA,WANI;AAOJ,QAAA,WAPI;AAQJ,QAAA;AARI,UASF,KAAK,aAAL,CAAmB,OAAnB,EAA4B,SAA5B,EAAuC,WAAvC,EAAoD,WAApD,CATJ;AAWA;;AACA,WAAK,MAAM,UAAX,IAAyB,cAAzB,EAAyC;AACvC,cAAM,cAAc,CAAC,cAAf,CACJ,iBAAiB,CAAC,QAAlB,CAA2B,EADvB,EAEJ;AACE,UAAA;AADF,SAFI,EAKJ;AACE,UAAA,IAAI,EAAE,iBADR;AAEE,UAAA,OAAO,EAAQ,IAAN,IAAa,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACpB,mBAAO,IAAI,CAAC,iBAAZ;AACD,WAFqB;AAFxB,SALI,CAAN;AAYD;;AAED,YAAM,cAAc,CAAC,cAAf,CACJ,kBAAkB,CAAC,UAAnB,CAA8B,EAD1B,EAEJ;AACE,QAAA,SAAS,EAAE;AAAE,UAAA,KAAK,EAAE,cAAT;AAAyB,UAAA,KAAK,EAAE;AAAhC;AADb,OAFI,CAAN;;AAOA,WAAK,MAAM,UAAX,IAAyB,cAAzB,EAAyC;AACvC,cAAM,cAAc,CAAC,cAAf,CACJ,iBAAiB,CAAC,QAAlB,CAA2B,EADvB,EAEJ;AACE,UAAA;AADF,SAFI,EAKJ;AACE,UAAA,IAAI,EAAE,iBADR;AAEE,UAAA,OAAO,EAAQ,IAAN,IAAa,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACpB,mBAAO,IAAI,CAAC,iBAAZ;AACD,WAFqB;AAFxB,SALI,CAAN;AAYD;AAED;;;AACA,WAAK,MAAM,UAAX,IAAyB,WAAzB,EAAsC;AACpC,cAAM,QAAQ,GAAG,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAA,UAAU,CAAE,OAAZ,EAAjB;;AAEA,YAAI,QAAQ,CAAC,OAAb,EAAsB;AACpB,gBAAM,cAAc,CAAC,cAAf,CAA8B,kBAAkB,CAAC,SAAnB,CAA6B,EAA3D,EAA+D;AACnE,YAAA,UAAU,EAAE;AADuD,WAA/D,CAAN;AAGD,SAJD,MAIO;AACL,gBAAM,cAAc,CAAC,cAAf,CAA8B,iBAAiB,CAAC,QAAlB,CAA2B,EAAzD,EAA6D;AAAE,YAAA,UAAU,EAAE;AAAd,WAA7D,CAAN;AACD;AACF;;AACD,WAAK,MAAM,UAAX,IAAyB,WAAzB,EAAsC;AACpC,cAAM,QAAQ,GAAG,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAA,UAAU,CAAE,OAAZ,EAAjB;AACA,cAAM,cAAc,CAAC,cAAf,CAA8B,iBAAiB,CAAC,QAAlB,CAA2B,EAAzD,EAA6D;AAAE,UAAA,UAAU,EAAE;AAAd,SAA7D,CAAN;AACD;AAED;;;AACA,WAAK,MAAM,UAAX,IAAyB,WAAzB,EAAsC;AACpC,cAAM,QAAQ,GAAG,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAA,UAAU,CAAE,OAAZ,EAAjB;AACA,cAAM,cAAc,CAAC,cAAf,CAA8B,iBAAiB,CAAC,WAAlB,CAA8B,EAA5D,EAAgE;AACpE,UAAA,UAAU,EAAE;AADwD,SAAhE,CAAN;AAGD;;AACD,WAAK,MAAM,UAAX,IAAyB,WAAzB,EAAsC;AACpC,cAAM,QAAQ,GAAG,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAA,UAAU,CAAE,OAAZ,EAAjB;AACA,cAAM,cAAc,CAAC,cAAf,CAA8B,iBAAiB,CAAC,WAAlB,CAA8B,EAA5D,EAAgE;AACpE,UAAA,UAAU,EAAE;AADwD,SAAhE,CAAN;AAGD;;AAED,UAAI,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,QAAT,EAAJ,EAAyB;AACvB,QAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,QAAT,EAAA;AACD;AACF,KA1FG,CALI;AAiMT;;AApPC,EAAA,IAAI,GAAA;AACF,SAAK,GAAL,GAAW,KAAK,eAAL,EAAX;AACD;;AA6CD,EAAA,UAAU,GAAA;AACR,WAAO,KAAK,GAAL,CAAS,UAAT,EAAP;AACD;AAmGD;;;;;;AAMG;;;AACK,EAAA,aAAa,CACnB,OADmB,EAEnB,SAFmB,EAGnB,WAHmB,EAInB,WAJmB,EAImE;AAEtF,UAAM;AAAE,MAAA,KAAK,EAAE,WAAT;AAAsB,MAAA,KAAK,EAAE;AAA7B,QAA6C,SAAnD;AAEA;;AACA,UAAM,cAAc,GAA0B,EAA9C;AACA,IAAA,WAAW,CAAC,OAAZ,CAAoB,UAAU,IAAG;AAC/B,YAAM,QAAQ,GAAG,OAAO,CAAC,WAAR,CAAoB,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAA,UAAU,CAAE,EAAhC,CAAjB;;AACA,UAAI,CAAC,QAAL,EAAe;AACb,QAAA,cAAc,CAAC,IAAf,CAAoB,UAApB;AACD;AACF,KALD;AAMA;;AACA,UAAM,WAAW,GAAa,EAA9B;AACA,UAAM,WAAW,GAAa,EAA9B;AACA,UAAM,WAAW,GAAa,EAA9B;AACA,UAAM,QAAQ,GAAG,OAAO,CAAC,QAAR,EAAjB;AACA,IAAA,QAAQ,CAAC,OAAT,CAAiB,MAAM,IAAG;AACxB,YAAM,cAAc,GAAG,WAAW,CAAC,IAAZ,CAAiB,UAAU,IAAI,CAAA,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAA,UAAU,CAAE,EAAZ,OAAmB,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,EAA3B,CAA/B,CAAvB;;AACA,UAAI,CAAC,cAAL,EAAqB;AACnB,QAAA,WAAW,CAAC,IAAZ,CAAiB,MAAjB;AACD,OAFD,MAEO;AACL,YAAI,WAAW,GAAG,IAAlB;;AACA,YAAI,WAAJ,EAAiB;AACf;AACA,UAAA,WAAW,GAAG,WAAW,CAAC,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,IAAT,EAAe,cAAf,CAAzB;AACD,SAHD,MAGO;AACL;AACA,cAAI,CAAA,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,IAAR,KAAgB,cAApB,EAAoC;AAClC,YAAA,WAAW,GAAG,YAAY,CAAC,WAAb,CAAyB,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,IAAjC,EAAuC,cAAvC,CAAd;AACD;AACF;;AACD,YAAI,CAAC,WAAL,EAAkB;AAChB,UAAA,MAAM,CAAC,OAAP,CAAe,cAAf;AACD;;AACD,QAAA,WAAW,KAAK,IAAhB,GAAuB,WAAW,CAAC,IAAZ,CAAiB,MAAjB,CAAvB,GAAkD,WAAW,CAAC,IAAZ,CAAiB,MAAjB,CAAlD;AACD;AACF,KApBD;AAsBA;;AACA,UAAM,cAAc,GAA0B,EAA9C;AACA,IAAA,WAAW,CAAC,OAAZ,CAAoB,UAAU,IAAG;AAC/B,YAAM,QAAQ,GAAG,OAAO,CAAC,WAAR,CAAoB,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAA,UAAU,CAAE,EAAhC,CAAjB;;AACA,UAAI,CAAC,QAAL,EAAe;AACb,QAAA,cAAc,CAAC,IAAf,CAAoB,UAApB;AACD;AACF,KALD;AAMA;;AACA,UAAM,WAAW,GAAa,EAA9B;AACA,UAAM,WAAW,GAAa,EAA9B;AACA,UAAM,WAAW,GAAa,EAA9B;AACA,UAAM,QAAQ,GAAG,OAAO,CAAC,QAAR,EAAjB;AACA,IAAA,QAAQ,CAAC,OAAT,CAAiB,MAAM,IAAG;AACxB,YAAM,cAAc,GAAG,WAAW,CAAC,IAAZ,CAAiB,UAAU,IAAI,CAAA,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAA,UAAU,CAAE,EAAZ,OAAmB,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,EAA3B,CAA/B,CAAvB;;AACA,UAAI,CAAC,cAAL,EAAqB;AACnB,QAAA,WAAW,CAAC,IAAZ,CAAiB,MAAjB;AACD,OAFD,MAEO;AACL,YAAI,WAAW,GAAG,IAAlB;;AACA,YAAI,WAAJ,EAAiB;AACf;AACA,UAAA,WAAW,GAAG,WAAW,CAAC,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,IAAT,EAAe,cAAf,CAAzB;AACD,SAHD,MAGO;AACL;AACA,cAAI,CAAA,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,IAAR,KAAgB,cAApB,EAAoC;AAClC,YAAA,WAAW,GAAG,YAAY,CAAC,WAAb,CAAyB,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,IAAjC,EAAuC,cAAvC,CAAd;AACD;AACF;;AACD,YAAI,CAAC,WAAL,EAAkB;AAChB,UAAA,MAAM,CAAC,OAAP,CAAe,cAAf;AACD;;AACD,QAAA,WAAW,KAAK,IAAhB,GAAuB,WAAW,CAAC,IAAZ,CAAiB,MAAjB,CAAvB,GAAkD,WAAW,CAAC,IAAZ,CAAiB,MAAjB,CAAlD;AACD;AACF,KApBD;AAsBA,WAAO;AACL,MAAA,cADK;AAEL,MAAA,cAFK;AAGL,MAAA,WAHK;AAIL,MAAA,WAJK;AAKL,MAAA,WALK;AAML,MAAA,WANK;AAOL,MAAA,WAPK;AAQL,MAAA;AARK,KAAP;AAUD;;AAzP4B,CAA/B;;AACmC,UAAA,CAAA,CAAhC,MAAM,CAAC,uBAAD,CAA0B,E,iCAAA,CAAA,E,4BAAA,E,iBAAA,E,KAA4C,CAA5C,CAAA;;AAKjC,UAAA,CAAA,CADC,aAAa,EACd,E,mCAAA,E,mCAAA,E,uCAAA,CAAA,E,4BAAA,E,MAAA,EAEC,IAFD,CAAA;;AANW,kBAAkB,GAAA,UAAA,CAAA,CAJ9B,UAAU,CAAC;AACV,EAAA,KAAK,EAAE;AAAE,IAAA,KAAK,EAAE,eAAT;AAA0B,IAAA,KAAK,EAAE,aAAa,CAAC,OAAd,CAAsB;AAAvD;AADG,CAAD;AAGX;AAC+B,CAAA,EAAlB,kBAAkB,CAAlB;SAAA,kB","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isEqual } from 'lodash';\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { XFlowGraphCommands, XFlowNodeCommands, XFlowEdgeCommands, XFlowGroupCommands, } from '../constant';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nexport var NsGraphUtils;\n(function (NsGraphUtils) {\n    function isNodeEqual(curNodeConfig, nextNodeConfig) {\n        /** XFlow默认的判断节点是否相等的逻辑 */\n        return isEqual(curNodeConfig, nextNodeConfig);\n    }\n    NsGraphUtils.isNodeEqual = isNodeEqual;\n    function isEdgeEqual(curEdgeConfig, nextEdgeConfig) {\n        /** XFlow默认的判断边是否相等的逻辑 */\n        return isEqual(curEdgeConfig, nextEdgeConfig);\n    }\n    NsGraphUtils.isEdgeEqual = isEdgeEqual;\n})(NsGraphUtils || (NsGraphUtils = {}));\nexport var NsGraphRender;\n(function (NsGraphRender) {\n    /** Command: 用于注册named factory */\n    NsGraphRender.command = XFlowGraphCommands.GRAPH_RENDER;\n    /** hookName */\n    NsGraphRender.hookKey = 'graphRender';\n})(NsGraphRender || (NsGraphRender = {}));\nlet GraphRenderCommand = \n/** 画布渲染命令 */\nclass GraphRenderCommand {\n    constructor() {\n        this.execute = () => __awaiter(this, void 0, void 0, function* () {\n            const { args, hooks: runtimeHook } = this.ctx.getArgs();\n            const hooks = this.ctx.getHooks();\n            const result = yield hooks.graphRender.call(args, (handlerArgs) => __awaiter(this, void 0, void 0, function* () {\n                const x6Graph = yield this.ctx.getX6Graph();\n                const { graphMeta, beforeRender, graphData, isNodeEqual, isEdgeEqual, afterRender } = handlerArgs;\n                /** 如果用户自定义beforeRender方法 */\n                beforeRender && beforeRender(graphMeta);\n                yield this.doLoadGraph(x6Graph, graphData, isNodeEqual, isEdgeEqual);\n                /** 如果用户自定义afterRender方法 */\n                afterRender && afterRender(graphData, graphMeta);\n                return {};\n            }), runtimeHook);\n            /** 设置结果 */\n            this.ctx.setResult(result);\n            return this;\n        });\n        this.undo = () => __awaiter(this, void 0, void 0, function* () {\n            this.ctx.undo();\n            return this;\n        });\n        this.redo = () => __awaiter(this, void 0, void 0, function* () {\n            if (!this.ctx.isUndoable) {\n                yield this.execute();\n            }\n            return this;\n        });\n        this.doLoadGraph = (x6Graph, graphData, isNodeEqual, isEdgeEqual) => __awaiter(this, void 0, void 0, function* () {\n            if (!(x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.isFrozen())) {\n                x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.freeze();\n            }\n            const commandService = this.ctx.getCommands();\n            const { addNodeConfigs, addEdgeConfigs, \n            // retainNodes,\n            // retainEdges,\n            removeNodes, removeEdges, updateNodes, updateEdges, } = this.graphDataDiff(x6Graph, graphData, isNodeEqual, isEdgeEqual);\n            /** 新增节点/边 */\n            for (const nodeConfig of addNodeConfigs) {\n                yield commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n                    nodeConfig,\n                }, {\n                    name: 'remove servcie ',\n                    handler: (args) => __awaiter(this, void 0, void 0, function* () {\n                        delete args.createNodeService;\n                    }),\n                });\n            }\n            yield commandService.executeCommand(XFlowGroupCommands.INIT_GROUP.id, {\n                graphData: { nodes: addNodeConfigs, edges: [] },\n            });\n            for (const edgeConfig of addEdgeConfigs) {\n                yield commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n                    edgeConfig,\n                }, {\n                    name: 'remove servcie ',\n                    handler: (args) => __awaiter(this, void 0, void 0, function* () {\n                        delete args.createEdgeService;\n                    }),\n                });\n            }\n            /** 删除节点/边/群组 */\n            for (const removeNode of removeNodes) {\n                const nodeData = removeNode === null || removeNode === void 0 ? void 0 : removeNode.getData();\n                if (nodeData.isGroup) {\n                    yield commandService.executeCommand(XFlowGroupCommands.DEL_GROUP.id, {\n                        nodeConfig: nodeData,\n                    });\n                }\n                else {\n                    yield commandService.executeCommand(XFlowNodeCommands.DEL_NODE.id, { nodeConfig: nodeData });\n                }\n            }\n            for (const removeEdge of removeEdges) {\n                const edgeData = removeEdge === null || removeEdge === void 0 ? void 0 : removeEdge.getData();\n                yield commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, { edgeConfig: edgeData });\n            }\n            /** 更新节点/边 */\n            for (const updateNode of updateNodes) {\n                const nodeData = updateNode === null || updateNode === void 0 ? void 0 : updateNode.getData();\n                yield commandService.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n                    nodeConfig: nodeData,\n                });\n            }\n            for (const updateEdge of updateEdges) {\n                const edgeData = updateEdge === null || updateEdge === void 0 ? void 0 : updateEdge.getData();\n                yield commandService.executeCommand(XFlowEdgeCommands.UPDATE_EDGE.id, {\n                    edgeConfig: edgeData,\n                });\n            }\n            if (x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.isFrozen()) {\n                x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.unfreeze();\n            }\n        });\n    }\n    init() {\n        this.ctx = this.contextProvider();\n    }\n    isUndoable() {\n        return this.ctx.isUndoable();\n    }\n    /**\n     * 画布内容Diff\n     * @param x6Graph x6画布实例\n     * @param graphData 画布数据\n     * @param isNodeEqual 允许用户自定义判断节点是否相等\n     * @param isEdgeEqual 允许用户自定义判断边是否相等\n     */\n    graphDataDiff(x6Graph, graphData, isNodeEqual, isEdgeEqual) {\n        const { nodes: nodeConfigs, edges: edgeConfigs } = graphData;\n        /** 新增节点数据 */\n        const addNodeConfigs = [];\n        nodeConfigs.forEach(nodeConfig => {\n            const findNode = x6Graph.getCellById(nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.id);\n            if (!findNode) {\n                addNodeConfigs.push(nodeConfig);\n            }\n        });\n        /** 保持、更新、移除节点 */\n        const retainNodes = [];\n        const updateNodes = [];\n        const removeNodes = [];\n        const allNodes = x6Graph.getNodes();\n        allNodes.forEach(x6Node => {\n            const findNodeConfig = nodeConfigs.find(nodeConfig => (nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.id) === (x6Node === null || x6Node === void 0 ? void 0 : x6Node.id));\n            if (!findNodeConfig) {\n                removeNodes.push(x6Node);\n            }\n            else {\n                let judgeResult = true;\n                if (isNodeEqual) {\n                    /** 如果用户自定义节点是否相等的方法 */\n                    judgeResult = isNodeEqual(x6Node === null || x6Node === void 0 ? void 0 : x6Node.data, findNodeConfig);\n                }\n                else {\n                    /** XFlow默认的判断节点是否相等的逻辑 */\n                    if ((x6Node === null || x6Node === void 0 ? void 0 : x6Node.data) && findNodeConfig) {\n                        judgeResult = NsGraphUtils.isNodeEqual(x6Node === null || x6Node === void 0 ? void 0 : x6Node.data, findNodeConfig);\n                    }\n                }\n                if (!judgeResult) {\n                    x6Node.setData(findNodeConfig);\n                }\n                judgeResult === true ? retainNodes.push(x6Node) : updateNodes.push(x6Node);\n            }\n        });\n        /** 新增边数据 */\n        const addEdgeConfigs = [];\n        edgeConfigs.forEach(edgeConfig => {\n            const findEdge = x6Graph.getCellById(edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.id);\n            if (!findEdge) {\n                addEdgeConfigs.push(edgeConfig);\n            }\n        });\n        /** 保持、更新、移除节点 */\n        const retainEdges = [];\n        const updateEdges = [];\n        const removeEdges = [];\n        const allEdges = x6Graph.getEdges();\n        allEdges.forEach(x6Edge => {\n            const findEdgeConfig = edgeConfigs.find(edgeConfig => (edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.id) === (x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.id));\n            if (!findEdgeConfig) {\n                removeEdges.push(x6Edge);\n            }\n            else {\n                let judgeResult = true;\n                if (isEdgeEqual) {\n                    /** 如果用户自定义边是否相等的方法 */\n                    judgeResult = isEdgeEqual(x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data, findEdgeConfig);\n                }\n                else {\n                    /** XFlow默认的判断边是否相等的逻辑 */\n                    if ((x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data) && findEdgeConfig) {\n                        judgeResult = NsGraphUtils.isEdgeEqual(x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data, findEdgeConfig);\n                    }\n                }\n                if (!judgeResult) {\n                    x6Edge.setData(findEdgeConfig);\n                }\n                judgeResult === true ? retainEdges.push(x6Edge) : updateEdges.push(x6Edge);\n            }\n        });\n        return {\n            addNodeConfigs,\n            addEdgeConfigs,\n            retainNodes,\n            retainEdges,\n            removeNodes,\n            removeEdges,\n            updateNodes,\n            updateEdges,\n        };\n    }\n};\n__decorate([\n    inject(ICommandContextProvider),\n    __metadata(\"design:type\", Object)\n], GraphRenderCommand.prototype, \"contextProvider\", void 0);\n__decorate([\n    postConstruct(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], GraphRenderCommand.prototype, \"init\", null);\nGraphRenderCommand = __decorate([\n    injectable({\n        token: { token: ICommandHandler, named: NsGraphRender.command.id },\n    })\n    /** 画布渲染命令 */\n], GraphRenderCommand);\nexport { GraphRenderCommand };\n//# sourceMappingURL=graph-render.js.map"]},"metadata":{},"sourceType":"module"}