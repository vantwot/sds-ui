{"ast":null,"code":"import { Registry } from '../../registry';\nimport { Markup } from '../../view';\nimport { Node } from '../../model/node';\nimport { NodeView } from '../../view/node';\nimport { Base } from '../base';\nexport class HTML extends Base {\n  get html() {\n    return this.getHTML();\n  }\n\n  set html(val) {\n    this.setHTML(val);\n  }\n\n  getHTML() {\n    return this.store.get('html');\n  }\n\n  setHTML(html) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (html == null) {\n      this.removeHTML(options);\n    } else {\n      this.store.set('html', html, options);\n    }\n\n    return this;\n  }\n\n  removeHTML() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.store.remove('html', options);\n  }\n\n}\n\n(function (HTML) {\n  class View extends NodeView {\n    init() {\n      super.init();\n      this.cell.on('change:*', () => {\n        const shouldUpdate = this.graph.hook.shouldUpdateHTMLComponent(this.cell);\n\n        if (shouldUpdate) {\n          this.renderHTMLComponent();\n        }\n      });\n    }\n\n    confirmUpdate(flag) {\n      const ret = super.confirmUpdate(flag);\n      return this.handleAction(ret, View.action, () => this.renderHTMLComponent());\n    }\n\n    renderHTMLComponent() {\n      const container = this.selectors.foContent;\n\n      if (container) {\n        const $wrap = this.$(container).empty();\n        const component = this.graph.hook.getHTMLComponent(this.cell);\n\n        if (component) {\n          if (typeof component === 'string') {\n            $wrap.html(component);\n          } else {\n            $wrap.append(component);\n          }\n        }\n      }\n    }\n\n  }\n\n  HTML.View = View;\n\n  (function (View) {\n    View.action = 'html';\n    View.config({\n      bootstrap: [View.action],\n      actions: {\n        html: View.action\n      }\n    });\n    NodeView.registry.register('html-view', View);\n  })(View = HTML.View || (HTML.View = {}));\n})(HTML || (HTML = {}));\n\n(function (HTML) {\n  HTML.config({\n    view: 'html-view',\n    markup: [{\n      tagName: 'rect',\n      selector: 'body'\n    }, Object.assign({}, Markup.getForeignObjectMarkup()), {\n      tagName: 'text',\n      selector: 'label'\n    }],\n    attrs: {\n      body: {\n        fill: 'none',\n        stroke: 'none',\n        refWidth: '100%',\n        refHeight: '100%'\n      },\n      fo: {\n        refWidth: '100%',\n        refHeight: '100%'\n      }\n    }\n  });\n  Node.registry.register('html', HTML);\n})(HTML || (HTML = {}));\n\n(function (HTML) {\n  HTML.componentRegistry = Registry.create({\n    type: 'html componnet'\n  });\n})(HTML || (HTML = {}));","map":{"version":3,"sources":["../../../src/shape/standard/html.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Registry } from '../../registry';\nimport { Markup } from '../../view';\nimport { Node } from '../../model/node';\nimport { NodeView } from '../../view/node';\nimport { Base } from '../base';\nexport class HTML extends Base {\n    get html() {\n        return this.getHTML();\n    }\n    set html(val) {\n        this.setHTML(val);\n    }\n    getHTML() {\n        return this.store.get('html');\n    }\n    setHTML(html, options = {}) {\n        if (html == null) {\n            this.removeHTML(options);\n        }\n        else {\n            this.store.set('html', html, options);\n        }\n        return this;\n    }\n    removeHTML(options = {}) {\n        return this.store.remove('html', options);\n    }\n}\n(function (HTML) {\n    class View extends NodeView {\n        init() {\n            super.init();\n            this.cell.on('change:*', () => {\n                const shouldUpdate = this.graph.hook.shouldUpdateHTMLComponent(this.cell);\n                if (shouldUpdate) {\n                    this.renderHTMLComponent();\n                }\n            });\n        }\n        confirmUpdate(flag) {\n            const ret = super.confirmUpdate(flag);\n            return this.handleAction(ret, View.action, () => this.renderHTMLComponent());\n        }\n        renderHTMLComponent() {\n            const container = this.selectors.foContent;\n            if (container) {\n                const $wrap = this.$(container).empty();\n                const component = this.graph.hook.getHTMLComponent(this.cell);\n                if (component) {\n                    if (typeof component === 'string') {\n                        $wrap.html(component);\n                    }\n                    else {\n                        $wrap.append(component);\n                    }\n                }\n            }\n        }\n    }\n    HTML.View = View;\n    (function (View) {\n        View.action = 'html';\n        View.config({\n            bootstrap: [View.action],\n            actions: {\n                html: View.action,\n            },\n        });\n        NodeView.registry.register('html-view', View);\n    })(View = HTML.View || (HTML.View = {}));\n})(HTML || (HTML = {}));\n(function (HTML) {\n    HTML.config({\n        view: 'html-view',\n        markup: [\n            {\n                tagName: 'rect',\n                selector: 'body',\n            },\n            Object.assign({}, Markup.getForeignObjectMarkup()),\n            {\n                tagName: 'text',\n                selector: 'label',\n            },\n        ],\n        attrs: {\n            body: {\n                fill: 'none',\n                stroke: 'none',\n                refWidth: '100%',\n                refHeight: '100%',\n            },\n            fo: {\n                refWidth: '100%',\n                refHeight: '100%',\n            },\n        },\n    });\n    Node.registry.register('html', HTML);\n})(HTML || (HTML = {}));\n(function (HTML) {\n    HTML.componentRegistry = Registry.create({\n        type: 'html componnet',\n    });\n})(HTML || (HTML = {}));\n//# sourceMappingURL=html.js.map"]},"metadata":{},"sourceType":"module"}