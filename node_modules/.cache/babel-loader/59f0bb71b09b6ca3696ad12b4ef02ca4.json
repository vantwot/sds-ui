{"ast":null,"code":"import _regeneratorRuntime from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar GraphPasteSelectionCommand_1;\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGraphCommands, XFlowEdgeCommands, XFlowGroupCommands, XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { LOCAL_STORAGE_KEY } from '../../constants';\nimport { safeJson } from '../../common/safe-json';\nimport { GraphMappingHelper } from '../mapping-service';\nexport var NsGraphPasteSelection;\n\n(function (NsGraphPasteSelection) {\n  /** Command: 用于注册named factory */\n  NsGraphPasteSelection.command = XFlowGraphCommands.GRAPH_PASTE;\n  /** hookName */\n\n  NsGraphPasteSelection.hookKey = 'graphPasteSelection';\n})(NsGraphPasteSelection || (NsGraphPasteSelection = {}));\n\nfunction randomNumber(max) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nvar GraphPasteSelectionCommand = GraphPasteSelectionCommand_1 =\n/*#__PURE__*/\n\n/** 创建节点命令 */\nfunction () {\n  function GraphPasteSelectionCommand() {\n    var _this = this;\n\n    _classCallCheck(this, GraphPasteSelectionCommand);\n\n    this.updateNodeCopiedProps = function (position, nodeConfig) {\n      var dx = randomNumber(100);\n      var dy = randomNumber(100);\n\n      if (position) {\n        dx = nodeConfig.x - position.x + randomNumber(30);\n        dy = nodeConfig.y - position.y + randomNumber(30);\n      } // 修改坐标\n\n\n      nodeConfig.x += dx;\n      nodeConfig.y += dy; // 删除 id\n\n      nodeConfig.originId = nodeConfig.id;\n      delete nodeConfig.id; // 修改label\n\n      nodeConfig.label = \"\".concat(nodeConfig.label, \"_copied\");\n      nodeConfig.isCollapsed = false;\n      return nodeConfig;\n    };\n    /** 执行Cmd */\n\n\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this2 = this;\n\n        var ctx, _ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                ctx = this.contextProvider();\n                _ctx$getArgs = ctx.getArgs(), args = _ctx$getArgs.args, runtimeHook = _ctx$getArgs.hooks;\n                hooks = ctx.getHooks();\n\n                if (!GraphPasteSelectionCommand_1.doing) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", this);\n\n              case 5:\n                GraphPasteSelectionCommand_1.doing = true;\n                _context5.next = 8;\n                return hooks.graphPasteSelection.call(args, function (handlerArgs) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                    var _this3 = this;\n\n                    var commandService, position, jsonString, plainObject, _plainObject$nodes, nodes, _plainObject$edges, edges, _this$mappingHelper$g, normalNodes, groupNodes;\n\n                    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            commandService = handlerArgs.commandService, position = handlerArgs.position;\n                            jsonString = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n                            plainObject = safeJson(jsonString, {\n                              nodes: [],\n                              edges: []\n                            });\n                            _plainObject$nodes = plainObject.nodes, nodes = _plainObject$nodes === void 0 ? [] : _plainObject$nodes, _plainObject$edges = plainObject.edges, edges = _plainObject$edges === void 0 ? [] : _plainObject$edges;\n                            _this$mappingHelper$g = this.mappingHelper.getNodesByType(nodes), normalNodes = _this$mappingHelper$g.normalNodes, groupNodes = _this$mappingHelper$g.groupNodes;\n                            this.mappingHelper.addNodes(nodes); // 添加普通节点\n\n                            _context4.next = 8;\n                            return Promise.all(normalNodes.map(function (nodeConfig) {\n                              return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                                var res, context, cmdResult;\n                                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                  while (1) {\n                                    switch (_context.prev = _context.next) {\n                                      case 0:\n                                        _context.next = 2;\n                                        return commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n                                          nodeConfig: this.updateNodeCopiedProps(position, nodeConfig)\n                                        });\n\n                                      case 2:\n                                        res = _context.sent;\n                                        context = res.contextProvider();\n                                        cmdResult = context.getResult();\n                                        this.mappingHelper.buildNodeMapping(nodeConfig, cmdResult.nodeConfig);\n\n                                      case 6:\n                                      case \"end\":\n                                        return _context.stop();\n                                    }\n                                  }\n                                }, _callee, this);\n                              }));\n                            }));\n\n                          case 8:\n                            _context4.next = 10;\n                            return Promise.all(groupNodes.map(function (group) {\n                              return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                                var groupNodeConfig;\n                                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                                  while (1) {\n                                    switch (_context2.prev = _context2.next) {\n                                      case 0:\n                                        groupNodeConfig = this.mappingHelper.buildGroupRelations(group);\n                                        _context2.next = 3;\n                                        return commandService.executeCommand(XFlowGroupCommands.ADD_GROUP.id, {\n                                          nodeConfig: this.updateNodeCopiedProps(position, groupNodeConfig)\n                                        });\n\n                                      case 3:\n                                      case \"end\":\n                                        return _context2.stop();\n                                    }\n                                  }\n                                }, _callee2, this);\n                              }));\n                            }));\n\n                          case 10:\n                            _context4.next = 12;\n                            return Promise.all(edges.map(function (edgeConfig) {\n                              var newEdge = _this3.mappingHelper.createEdgeBetweenNodes(edgeConfig);\n\n                              return commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n                                edgeConfig: newEdge\n                              });\n                            }));\n\n                          case 12:\n                            ctx.addUndo(Disposable.create(function () {\n                              return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                                  while (1) {\n                                    switch (_context3.prev = _context3.next) {\n                                      case 0:\n                                        window.localStorage.setItem(LOCAL_STORAGE_KEY, null);\n\n                                      case 1:\n                                      case \"end\":\n                                        return _context3.stop();\n                                    }\n                                  }\n                                }, _callee3);\n                              }));\n                            }));\n                            return _context4.abrupt(\"return\", {\n                              err: null\n                            });\n\n                          case 14:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4, this);\n                  }));\n                }, runtimeHook);\n\n              case 8:\n                result = _context5.sent;\n                ctx.setResult(result);\n                GraphPasteSelectionCommand_1.doing = false;\n                return _context5.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    };\n    /** undo cmd */\n\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var ctx;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                ctx = this.contextProvider();\n\n                if (this.isUndoable()) {\n                  ctx.undo();\n                }\n\n                return _context6.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    };\n    /** redo cmd */\n\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (this.isUndoable()) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                _context7.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context7.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    };\n  }\n\n  _createClass(GraphPasteSelectionCommand, [{\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      var ctx = this.contextProvider();\n      return ctx.isUndoable();\n    }\n  }]);\n\n  return GraphPasteSelectionCommand;\n}();\n/** 防止多次执行 */\n\n\nGraphPasteSelectionCommand.doing = false;\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], GraphPasteSelectionCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([inject(GraphMappingHelper), __metadata(\"design:type\", GraphMappingHelper)], GraphPasteSelectionCommand.prototype, \"mappingHelper\", void 0);\n\nGraphPasteSelectionCommand = GraphPasteSelectionCommand_1 = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphPasteSelection.command.id\n  }\n})\n/** 创建节点命令 */\n], GraphPasteSelectionCommand);\nexport { GraphPasteSelectionCommand };","map":{"version":3,"sources":["../../../src/command-contributions/graph/graph-paste.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar GraphPasteSelectionCommand_1;\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGraphCommands, XFlowEdgeCommands, XFlowGroupCommands, XFlowNodeCommands, } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { LOCAL_STORAGE_KEY } from '../../constants';\nimport { safeJson } from '../../common/safe-json';\nimport { GraphMappingHelper } from '../mapping-service';\nexport var NsGraphPasteSelection;\n(function (NsGraphPasteSelection) {\n    /** Command: 用于注册named factory */\n    NsGraphPasteSelection.command = XFlowGraphCommands.GRAPH_PASTE;\n    /** hookName */\n    NsGraphPasteSelection.hookKey = 'graphPasteSelection';\n})(NsGraphPasteSelection || (NsGraphPasteSelection = {}));\nfunction randomNumber(max, min = 0) {\n    return Math.floor(Math.random() * (max - min) + min);\n}\nlet GraphPasteSelectionCommand = GraphPasteSelectionCommand_1 = \n/** 创建节点命令 */\nclass GraphPasteSelectionCommand {\n    constructor() {\n        this.updateNodeCopiedProps = (position, nodeConfig) => {\n            let dx = randomNumber(100);\n            let dy = randomNumber(100);\n            if (position) {\n                dx = nodeConfig.x - position.x + randomNumber(30);\n                dy = nodeConfig.y - position.y + randomNumber(30);\n            }\n            // 修改坐标\n            nodeConfig.x += dx;\n            nodeConfig.y += dy;\n            // 删除 id\n            nodeConfig.originId = nodeConfig.id;\n            delete nodeConfig.id;\n            // 修改label\n            nodeConfig.label = `${nodeConfig.label}_copied`;\n            nodeConfig.isCollapsed = false;\n            return nodeConfig;\n        };\n        /** 执行Cmd */\n        this.execute = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            const { args, hooks: runtimeHook } = ctx.getArgs();\n            const hooks = ctx.getHooks();\n            if (GraphPasteSelectionCommand_1.doing) {\n                return this;\n            }\n            GraphPasteSelectionCommand_1.doing = true;\n            const result = yield hooks.graphPasteSelection.call(args, (handlerArgs) => __awaiter(this, void 0, void 0, function* () {\n                const { commandService, position } = handlerArgs;\n                const jsonString = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n                const plainObject = safeJson(jsonString, {\n                    nodes: [],\n                    edges: [],\n                });\n                const { nodes = [], edges = [] } = plainObject;\n                const { normalNodes, groupNodes } = this.mappingHelper.getNodesByType(nodes);\n                this.mappingHelper.addNodes(nodes);\n                // 添加普通节点\n                yield Promise.all(normalNodes.map((nodeConfig) => __awaiter(this, void 0, void 0, function* () {\n                    const res = yield commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n                        nodeConfig: this.updateNodeCopiedProps(position, nodeConfig),\n                    });\n                    const context = res.contextProvider();\n                    const cmdResult = context.getResult();\n                    this.mappingHelper.buildNodeMapping(nodeConfig, cmdResult.nodeConfig);\n                })));\n                // 处理group\n                yield Promise.all(groupNodes.map((group) => __awaiter(this, void 0, void 0, function* () {\n                    const groupNodeConfig = this.mappingHelper.buildGroupRelations(group);\n                    yield commandService.executeCommand(XFlowGroupCommands.ADD_GROUP.id, {\n                        nodeConfig: this.updateNodeCopiedProps(position, groupNodeConfig),\n                    });\n                })));\n                // 处理连线\n                yield Promise.all(edges.map(edgeConfig => {\n                    const newEdge = this.mappingHelper.createEdgeBetweenNodes(edgeConfig);\n                    return commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n                        edgeConfig: newEdge,\n                    });\n                }));\n                ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n                    window.localStorage.setItem(LOCAL_STORAGE_KEY, null);\n                })));\n                return { err: null };\n            }), runtimeHook);\n            ctx.setResult(result);\n            GraphPasteSelectionCommand_1.doing = false;\n            return this;\n        });\n        /** undo cmd */\n        this.undo = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            if (this.isUndoable()) {\n                ctx.undo();\n            }\n            return this;\n        });\n        /** redo cmd */\n        this.redo = () => __awaiter(this, void 0, void 0, function* () {\n            if (!this.isUndoable()) {\n                yield this.execute();\n            }\n            return this;\n        });\n    }\n    isUndoable() {\n        const ctx = this.contextProvider();\n        return ctx.isUndoable();\n    }\n};\n/** 防止多次执行 */\nGraphPasteSelectionCommand.doing = false;\n__decorate([\n    inject(ICommandContextProvider),\n    __metadata(\"design:type\", Object)\n], GraphPasteSelectionCommand.prototype, \"contextProvider\", void 0);\n__decorate([\n    inject(GraphMappingHelper),\n    __metadata(\"design:type\", GraphMappingHelper)\n], GraphPasteSelectionCommand.prototype, \"mappingHelper\", void 0);\nGraphPasteSelectionCommand = GraphPasteSelectionCommand_1 = __decorate([\n    injectable({\n        token: { token: ICommandHandler, named: NsGraphPasteSelection.command.id },\n    })\n    /** 创建节点命令 */\n], GraphPasteSelectionCommand);\nexport { GraphPasteSelectionCommand };\n//# sourceMappingURL=graph-paste.js.map"]},"metadata":{},"sourceType":"module"}