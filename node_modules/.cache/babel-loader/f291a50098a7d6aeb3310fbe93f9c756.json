{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsDelEdge;\n\n(function (NsDelEdge) {\n  /** Command: 用于注册named factory */\n  NsDelEdge.command = XFlowEdgeCommands.DEL_EDGE;\n  /** hookName */\n\n  NsDelEdge.hookKey = 'delEdge';\n  let ErrEnum;\n\n  (function (ErrEnum) {\n    ErrEnum[\"EDGE_NOT_EXIST\"] = \"edge is not exist\";\n    ErrEnum[\"EDGE_INVALID_CELL\"] = \"this is not a valid cell\";\n    ErrEnum[\"X6_DELETE_FAILED\"] = \"x6 throw err when call delete edge\";\n    ErrEnum[\"SERVICE_REJECT\"] = \"service reject to delete\";\n  })(ErrEnum = NsDelEdge.ErrEnum || (NsDelEdge.ErrEnum = {}));\n})(NsDelEdge || (NsDelEdge = {}));\n\nlet DelEdgeCommand =\n/** 创建节点命令 */\nclass DelEdgeCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.delEdge.call(\n      /** 执行 hooks pipeline处理args */\n      args,\n      /** 执行 callback */\n      handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          edgeConfig,\n          x6Edge,\n          deleteEdgeService,\n          commandService\n        } = handlerArgs;\n        let edgeCell = x6Edge;\n        /** 没有edgeCell时查找cell */\n\n        if (!edgeCell) {\n          edgeCell = yield this.findEdgeById(edgeConfig);\n\n          if (!edgeCell) {\n            console.error(NsDelEdge.ErrEnum.EDGE_NOT_EXIST, edgeConfig);\n            return {\n              err: NsDelEdge.ErrEnum.EDGE_NOT_EXIST\n            };\n          }\n        }\n\n        const isEdge = edgeCell && edgeCell.isEdge();\n\n        if (!isEdge) {\n          console.error(NsDelEdge.ErrEnum.EDGE_NOT_EXIST, edgeCell);\n          return {\n            err: NsDelEdge.ErrEnum.EDGE_NOT_EXIST\n          };\n        }\n\n        if (deleteEdgeService) {\n          /** 需要请求接口 */\n          const canDelete = yield deleteEdgeService(handlerArgs);\n\n          if (!canDelete) {\n            return {\n              err: NsDelEdge.ErrEnum.SERVICE_REJECT\n            };\n          }\n        }\n\n        try {\n          const targetCell = edgeCell.getTargetCell();\n          const sourceCell = edgeCell.getSourceCell();\n          const sourcePortId = edgeCell.getSourcePortId();\n          const targetPortId = edgeCell.getTargetPortId();\n          const source = sourceCell.id;\n          const target = targetCell.id;\n          /** 执行remove */\n\n          edgeCell.remove();\n          /** 创建 undo */\n\n          const undo = Disposable.create(() => {\n            commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n              edgeConfig: {\n                source,\n                target,\n                sourcePortId,\n                targetPortId\n              }\n            });\n          });\n          /** add undo */\n\n          this.ctx.addUndo(undo);\n          return {\n            err: null,\n            edgeConfig: {\n              source,\n              target,\n              sourcePortId,\n              targetPortId\n            },\n            targetCell,\n            sourceCell,\n            sourcePortId,\n            targetPortId\n          };\n        } catch (error) {\n          console.error(NsDelEdge.ErrEnum.X6_DELETE_FAILED, error);\n          return {\n            err: NsDelEdge.ErrEnum.X6_DELETE_FAILED\n          };\n        }\n      }), runtimeHook);\n      this.ctx.setResult(result);\n      return this;\n    });\n\n    this.findEdgeById = edge => __awaiter(this, void 0, void 0, function* () {\n      const graph = yield this.ctx.getX6Graph();\n      const cell = graph.getCellById(edge.id);\n      return cell;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], DelEdgeCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], DelEdgeCommand.prototype, \"init\", null);\n\nDelEdgeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsDelEdge.command.id\n  }\n})\n/** 创建节点命令 */\n], DelEdgeCommand);\nexport { DelEdgeCommand };","map":{"version":3,"sources":["../../../src/command-contributions/edge/edge-del.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsDelEdge;\n(function (NsDelEdge) {\n    /** Command: 用于注册named factory */\n    NsDelEdge.command = XFlowEdgeCommands.DEL_EDGE;\n    /** hookName */\n    NsDelEdge.hookKey = 'delEdge';\n    let ErrEnum;\n    (function (ErrEnum) {\n        ErrEnum[\"EDGE_NOT_EXIST\"] = \"edge is not exist\";\n        ErrEnum[\"EDGE_INVALID_CELL\"] = \"this is not a valid cell\";\n        ErrEnum[\"X6_DELETE_FAILED\"] = \"x6 throw err when call delete edge\";\n        ErrEnum[\"SERVICE_REJECT\"] = \"service reject to delete\";\n    })(ErrEnum = NsDelEdge.ErrEnum || (NsDelEdge.ErrEnum = {}));\n})(NsDelEdge || (NsDelEdge = {}));\nlet DelEdgeCommand = \n/** 创建节点命令 */\nclass DelEdgeCommand {\n    constructor() {\n        /** 执行Cmd */\n        this.execute = () => __awaiter(this, void 0, void 0, function* () {\n            const { args, hooks: runtimeHook } = this.ctx.getArgs();\n            const hooks = this.ctx.getHooks();\n            const result = yield hooks.delEdge.call(\n            /** 执行 hooks pipeline处理args */\n            args, \n            /** 执行 callback */\n            (handlerArgs) => __awaiter(this, void 0, void 0, function* () {\n                const { edgeConfig, x6Edge, deleteEdgeService, commandService } = handlerArgs;\n                let edgeCell = x6Edge;\n                /** 没有edgeCell时查找cell */\n                if (!edgeCell) {\n                    edgeCell = yield this.findEdgeById(edgeConfig);\n                    if (!edgeCell) {\n                        console.error(NsDelEdge.ErrEnum.EDGE_NOT_EXIST, edgeConfig);\n                        return { err: NsDelEdge.ErrEnum.EDGE_NOT_EXIST };\n                    }\n                }\n                const isEdge = edgeCell && edgeCell.isEdge();\n                if (!isEdge) {\n                    console.error(NsDelEdge.ErrEnum.EDGE_NOT_EXIST, edgeCell);\n                    return { err: NsDelEdge.ErrEnum.EDGE_NOT_EXIST };\n                }\n                if (deleteEdgeService) {\n                    /** 需要请求接口 */\n                    const canDelete = yield deleteEdgeService(handlerArgs);\n                    if (!canDelete) {\n                        return { err: NsDelEdge.ErrEnum.SERVICE_REJECT };\n                    }\n                }\n                try {\n                    const targetCell = edgeCell.getTargetCell();\n                    const sourceCell = edgeCell.getSourceCell();\n                    const sourcePortId = edgeCell.getSourcePortId();\n                    const targetPortId = edgeCell.getTargetPortId();\n                    const source = sourceCell.id;\n                    const target = targetCell.id;\n                    /** 执行remove */\n                    edgeCell.remove();\n                    /** 创建 undo */\n                    const undo = Disposable.create(() => {\n                        commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n                            edgeConfig: { source, target, sourcePortId, targetPortId },\n                        });\n                    });\n                    /** add undo */\n                    this.ctx.addUndo(undo);\n                    return {\n                        err: null,\n                        edgeConfig: { source, target, sourcePortId, targetPortId },\n                        targetCell,\n                        sourceCell,\n                        sourcePortId,\n                        targetPortId,\n                    };\n                }\n                catch (error) {\n                    console.error(NsDelEdge.ErrEnum.X6_DELETE_FAILED, error);\n                    return { err: NsDelEdge.ErrEnum.X6_DELETE_FAILED };\n                }\n            }), runtimeHook);\n            this.ctx.setResult(result);\n            return this;\n        });\n        this.findEdgeById = (edge) => __awaiter(this, void 0, void 0, function* () {\n            const graph = yield this.ctx.getX6Graph();\n            const cell = graph.getCellById(edge.id);\n            return cell;\n        });\n        /** undo cmd */\n        this.undo = () => __awaiter(this, void 0, void 0, function* () {\n            this.ctx.undo();\n            return this;\n        });\n        /** redo cmd */\n        this.redo = () => __awaiter(this, void 0, void 0, function* () {\n            if (!this.isUndoable) {\n                yield this.execute();\n            }\n            return this;\n        });\n    }\n    init() {\n        this.ctx = this.contextProvider();\n    }\n    isUndoable() {\n        return this.ctx.isUndoable();\n    }\n};\n__decorate([\n    inject(ICommandContextProvider),\n    __metadata(\"design:type\", Object)\n], DelEdgeCommand.prototype, \"contextProvider\", void 0);\n__decorate([\n    postConstruct(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], DelEdgeCommand.prototype, \"init\", null);\nDelEdgeCommand = __decorate([\n    injectable({\n        token: { token: ICommandHandler, named: NsDelEdge.command.id },\n    })\n    /** 创建节点命令 */\n], DelEdgeCommand);\nexport { DelEdgeCommand };\n//# sourceMappingURL=edge-del.js.map"]},"metadata":{},"sourceType":"module"}