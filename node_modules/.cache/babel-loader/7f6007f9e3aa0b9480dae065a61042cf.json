{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"../lodash\");\n\nmodule.exports = {\n  longestPath: longestPath,\n  longestPathWithLayer: longestPathWithLayer,\n  slack: slack\n};\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\n\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n\n    visited[v] = true;\n\n    var rank = _.min(_.map(g.outEdges(v), function (e) {\n      return dfs(e.w) - g.edge(e).minlen;\n    }));\n\n    if (rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n    rank === undefined || // return value of _.map([]) for Lodash 4\n    rank === null) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    return label.rank = rank;\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\nfunction longestPathWithLayer(g) {\n  // 用longest path，找出最深的点\n  var visited = {};\n  var minRank = 0;\n\n  function dfs(v) {\n    var label = g.node(v);\n\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n\n    visited[v] = true;\n\n    var rank = _.min(_.map(g.outEdges(v), function (e) {\n      return dfs(e.w) - g.edge(e).minlen;\n    }));\n\n    if (rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n    rank === undefined || // return value of _.map([]) for Lodash 4\n    rank === null) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    label.rank = rank;\n    minRank = Math.min(label.rank, minRank);\n    return label.rank;\n  }\n\n  _.forEach(g.sources(), dfs);\n\n  minRank += 1; // NOTE: 最小的层级是dummy root，+1\n  // forward一遍，赋值层级\n\n  function dfsForward(v, nextRank) {\n    var label = g.node(v);\n    var currRank = !isNaN(label.layer) ? label.layer : nextRank; // 没有指定，取最大值\n\n    if (label.rank === undefined || label.rank < currRank) {\n      label.rank = currRank;\n    } // DFS遍历子节点\n\n\n    _.map(g.outEdges(v), function (e) {\n      dfsForward(e.w, currRank + g.edge(e).minlen);\n    });\n  } // 指定层级的，更新下游\n\n\n  g.nodes().forEach(function (n) {\n    var label = g.node(n);\n\n    if (!isNaN(label.layer)) {\n      dfsForward(n, label.layer); // 默认的dummy root所在层的rank是-1\n    } else {\n      label.rank -= minRank;\n    }\n  }); // g.sources().forEach(function (root) {\n  //   dfsForward(root, -1); // 默认的dummy root所在层的rank是-1\n  // });\n  // 不这样做了，赋值的层级只影响下游\n\n  /*\n  // backward一遍，把父节点收紧\n  function dfsBackward(v) {\n    var label = g.node(v);\n     // 有指定layer，不改动\n    if (!isNaN(label.layer)) {\n      label.rank = label.layer;\n      return label.rank;\n    }\n     // 其它\n    var rank = _.min(_.map(g.outEdges(v), function(e) {\n      return dfsBackward(e.w) - g.edge(e).minlen;\n    }));\n     if (!isNaN(rank)) {\n      label.rank = rank;\n    }\n     return label.rank;\n  }\n   _.forEach(g.sources(), dfsBackward);\n  */\n}\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\n\n\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/dagrejs/lib/rank/util.js"],"names":["_","require","module","exports","longestPath","longestPathWithLayer","slack","g","visited","dfs","v","label","node","has","rank","min","map","outEdges","e","w","edge","minlen","Number","POSITIVE_INFINITY","undefined","forEach","sources","minRank","Math","dfsForward","nextRank","currRank","isNaN","layer","nodes","n"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _ = require(\"../lodash\");\n\nmodule.exports = {\n  longestPath: longestPath,\n  longestPathWithLayer: longestPathWithLayer,\n  slack: slack,\n};\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(_.map(g.outEdges(v), function(e) {\n      return dfs(e.w) - g.edge(e).minlen;\n    }));\n\n    if (rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n        rank === undefined || // return value of _.map([]) for Lodash 4\n        rank === null) { // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\nfunction longestPathWithLayer(g) {\n  // 用longest path，找出最深的点\n  var visited = {};\n  var minRank = 0;\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(_.map(g.outEdges(v), function(e) {\n      return dfs(e.w) - g.edge(e).minlen;\n    }));\n\n    if (rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n        rank === undefined || // return value of _.map([]) for Lodash 4\n        rank === null) { // return value of _.map([null])\n      rank = 0;\n    }\n\n    label.rank = rank;\n    minRank = Math.min(label.rank, minRank);\n    return label.rank;\n  }\n\n  _.forEach(g.sources(), dfs);\n\n  minRank += 1; // NOTE: 最小的层级是dummy root，+1\n\n  // forward一遍，赋值层级\n  function dfsForward(v, nextRank) {\n    var label = g.node(v);\n\n    var currRank = !isNaN(label.layer) ? label.layer : nextRank;\n\n    // 没有指定，取最大值\n    if (label.rank === undefined || label.rank < currRank) {\n      label.rank = currRank;\n    }\n\n    // DFS遍历子节点\n    _.map(g.outEdges(v), function (e) {\n      dfsForward(e.w, currRank + g.edge(e).minlen);\n    });\n  }\n\n  // 指定层级的，更新下游\n  g.nodes().forEach(function (n) {\n    var label = g.node(n);\n    if (!isNaN(label.layer)) {\n      dfsForward(n, label.layer); // 默认的dummy root所在层的rank是-1\n    } else {\n      label.rank -= minRank;\n    }\n  });\n\n  // g.sources().forEach(function (root) {\n  //   dfsForward(root, -1); // 默认的dummy root所在层的rank是-1\n  // });\n  \n  // 不这样做了，赋值的层级只影响下游\n  /*\n  // backward一遍，把父节点收紧\n  function dfsBackward(v) {\n    var label = g.node(v);\n\n    // 有指定layer，不改动\n    if (!isNaN(label.layer)) {\n      label.rank = label.layer;\n      return label.rank;\n    }\n\n    // 其它\n    var rank = _.min(_.map(g.outEdges(v), function(e) {\n      return dfsBackward(e.w) - g.edge(e).minlen;\n    }));\n\n    if (!isNaN(rank)) {\n      label.rank = rank;\n    }\n\n    return label.rank;\n  }\n\n  _.forEach(g.sources(), dfsBackward);\n  */\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n"]},"metadata":{},"sourceType":"script"}