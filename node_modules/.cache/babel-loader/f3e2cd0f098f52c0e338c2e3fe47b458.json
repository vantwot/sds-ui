{"ast":null,"code":"import { deepMix, each, isString } from '@antv/util';\nimport { createDom, modifyCSS } from '@antv/dom-util';\nimport { hasClass } from '../utils/dom';\n\nvar Component =\n/** @class */\nfunction () {\n  function Component(options) {\n    this.destroyed = false;\n    this.options = deepMix({}, this.getDefaultOptions(), options);\n    this.container = this.initContainer();\n    this.initDom();\n    this.applyStyles();\n    this.initEvent();\n    this.initCapture();\n    this.initVisible();\n    this.render();\n  }\n  /**\n   * 获取默认配置\n   */\n\n\n  Component.prototype.getDefaultOptions = function () {\n    return {\n      name: '',\n      containerTpl: '<div></div>',\n      visible: true,\n      capture: true,\n      domStyles: {}\n    };\n  };\n  /**\n   * 获取 container\n   */\n\n\n  Component.prototype.getContainer = function () {\n    return this.container;\n  };\n  /**\n   * 获取组件的父容器\n   */\n\n\n  Component.prototype.getParentContainer = function () {\n    var parent = this.options.parent;\n    var parentContainer;\n\n    if (!parent) {\n      return parentContainer;\n    }\n\n    if (isString(parent)) {\n      var parentElement = document.getElementById(parent);\n\n      if (parentElement) {\n        parentContainer = parentElement;\n      } else {\n        throw new Error(\"No parent id \".concat(parent));\n      }\n    } else {\n      parentContainer = parent;\n    }\n\n    return parentContainer;\n  };\n  /**\n   * 初始化 container\n   */\n\n\n  Component.prototype.initContainer = function () {\n    var container = this.createDom(this.options.containerTpl);\n    var parentContainer = this.getParentContainer();\n\n    if (parentContainer) {\n      parentContainer.appendChild(container);\n    }\n\n    return container;\n  };\n  /**\n   * 初始化 visible\n   */\n\n\n  Component.prototype.initVisible = function () {\n    if (this.options.visible) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n  /**\n   * 初始 capture\n   */\n\n\n  Component.prototype.initCapture = function () {\n    this.setCapture(this.options.capture);\n  };\n  /**\n   * 更新组件\n   */\n\n\n  Component.prototype.update = function (options) {\n    this.options = deepMix({}, this.options, options);\n    this.updateInner(options);\n    this.afterUpdate(options);\n  }; // 更新组件样式\n\n\n  Component.prototype.updateInner = function (options) {\n    if (options.domStyles) {\n      this.applyStyles();\n    }\n  };\n  /**\n   * 更新组件后\n   */\n\n\n  Component.prototype.afterUpdate = function (options) {\n    // 更新时考虑capture\n    if (options.capture) {\n      this.setCapture(options.capture);\n    }\n  };\n  /**\n   * 是否允许捕捉事件\n   */\n\n\n  Component.prototype.setCapture = function (capture) {\n    var container = this.container;\n    var value = capture ? 'auto' : 'none';\n    container.style.pointerEvents = value;\n  };\n  /**\n   * 应用所有的样式\n   */\n\n\n  Component.prototype.applyStyles = function () {\n    var domStyles = this.options.domStyles;\n\n    if (!domStyles) {\n      return;\n    }\n\n    var container = this.container;\n    this.applyChildrenStyles(container, domStyles);\n    var className = this.options.className;\n\n    if (className && hasClass(container, className)) {\n      var containerCss = domStyles[className];\n      modifyCSS(container, containerCss);\n    }\n  };\n  /**\n   * 应用样式到 DOM\n   */\n\n\n  Component.prototype.applyChildrenStyles = function (element, styles) {\n    each(styles, function (style, name) {\n      var elements = element.getElementsByClassName(name);\n      each(elements, function (el) {\n        modifyCSS(el, style);\n      });\n    });\n  };\n  /**\n   * 应用到单个 DOM\n   */\n\n\n  Component.prototype.applyStyle = function (cssName, dom) {\n    var domStyles = this.options.domStyles;\n    domStyles && modifyCSS(dom, domStyles[cssName]);\n  };\n  /**\n   * 创建 DOM\n   */\n\n\n  Component.prototype.createDom = function (str) {\n    if (str === void 0) {\n      str = '<div></div>';\n    }\n\n    return createDom(str);\n  };\n  /**\n   * 清理 DOM\n   */\n\n\n  Component.prototype.removeDom = function () {\n    var container = this.container; // 节点不一定有 parentNode\n\n    container && container.parentNode && container.parentNode.removeChild(container);\n  };\n\n  Component.prototype.destroy = function () {\n    this.removeEvent();\n    this.removeDom();\n    this.destroyed = true;\n  };\n\n  return Component;\n}();\n\nexport { Component };","map":{"version":3,"sources":["../../../src/core/component.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { deepMix, each, isString } from '@antv/util';\nimport { createDom, modifyCSS } from '@antv/dom-util';\nimport { hasClass } from '../utils/dom';\nvar Component = /** @class */ (function () {\n    function Component(options) {\n        this.destroyed = false;\n        this.options = deepMix({}, this.getDefaultOptions(), options);\n        this.container = this.initContainer();\n        this.initDom();\n        this.applyStyles();\n        this.initEvent();\n        this.initCapture();\n        this.initVisible();\n        this.render();\n    }\n    /**\n     * 获取默认配置\n     */\n    Component.prototype.getDefaultOptions = function () {\n        return {\n            name: '',\n            containerTpl: '<div></div>',\n            visible: true,\n            capture: true,\n            domStyles: {},\n        };\n    };\n    /**\n     * 获取 container\n     */\n    Component.prototype.getContainer = function () {\n        return this.container;\n    };\n    /**\n     * 获取组件的父容器\n     */\n    Component.prototype.getParentContainer = function () {\n        var parent = this.options.parent;\n        var parentContainer;\n        if (!parent) {\n            return parentContainer;\n        }\n        if (isString(parent)) {\n            var parentElement = document.getElementById(parent);\n            if (parentElement) {\n                parentContainer = parentElement;\n            }\n            else {\n                throw new Error(\"No parent id \".concat(parent));\n            }\n        }\n        else {\n            parentContainer = parent;\n        }\n        return parentContainer;\n    };\n    /**\n     * 初始化 container\n     */\n    Component.prototype.initContainer = function () {\n        var container = this.createDom(this.options.containerTpl);\n        var parentContainer = this.getParentContainer();\n        if (parentContainer) {\n            parentContainer.appendChild(container);\n        }\n        return container;\n    };\n    /**\n     * 初始化 visible\n     */\n    Component.prototype.initVisible = function () {\n        if (this.options.visible) {\n            this.show();\n        }\n        else {\n            this.hide();\n        }\n    };\n    /**\n     * 初始 capture\n     */\n    Component.prototype.initCapture = function () {\n        this.setCapture(this.options.capture);\n    };\n    /**\n     * 更新组件\n     */\n    Component.prototype.update = function (options) {\n        this.options = deepMix({}, this.options, options);\n        this.updateInner(options);\n        this.afterUpdate(options);\n    };\n    // 更新组件样式\n    Component.prototype.updateInner = function (options) {\n        if (options.domStyles) {\n            this.applyStyles();\n        }\n    };\n    /**\n     * 更新组件后\n     */\n    Component.prototype.afterUpdate = function (options) {\n        // 更新时考虑capture\n        if (options.capture) {\n            this.setCapture(options.capture);\n        }\n    };\n    /**\n     * 是否允许捕捉事件\n     */\n    Component.prototype.setCapture = function (capture) {\n        var container = this.container;\n        var value = capture ? 'auto' : 'none';\n        container.style.pointerEvents = value;\n    };\n    /**\n     * 应用所有的样式\n     */\n    Component.prototype.applyStyles = function () {\n        var domStyles = this.options.domStyles;\n        if (!domStyles) {\n            return;\n        }\n        var container = this.container;\n        this.applyChildrenStyles(container, domStyles);\n        var className = this.options.className;\n        if (className && hasClass(container, className)) {\n            var containerCss = domStyles[className];\n            modifyCSS(container, containerCss);\n        }\n    };\n    /**\n     * 应用样式到 DOM\n     */\n    Component.prototype.applyChildrenStyles = function (element, styles) {\n        each(styles, function (style, name) {\n            var elements = element.getElementsByClassName(name);\n            each(elements, function (el) {\n                modifyCSS(el, style);\n            });\n        });\n    };\n    /**\n     * 应用到单个 DOM\n     */\n    Component.prototype.applyStyle = function (cssName, dom) {\n        var domStyles = this.options.domStyles;\n        domStyles && modifyCSS(dom, domStyles[cssName]);\n    };\n    /**\n     * 创建 DOM\n     */\n    Component.prototype.createDom = function (str) {\n        if (str === void 0) { str = '<div></div>'; }\n        return createDom(str);\n    };\n    /**\n     * 清理 DOM\n     */\n    Component.prototype.removeDom = function () {\n        var container = this.container;\n        // 节点不一定有 parentNode\n        container && container.parentNode && container.parentNode.removeChild(container);\n    };\n    Component.prototype.destroy = function () {\n        this.removeEvent();\n        this.removeDom();\n        this.destroyed = true;\n    };\n    return Component;\n}());\nexport { Component };\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}