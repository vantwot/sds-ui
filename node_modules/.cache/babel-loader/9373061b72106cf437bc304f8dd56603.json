{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { useXFlowApp, createComponentModel, DisposableCollection } from '@antv/xflow-core';\nimport React from 'react';\nexport const useToolbarModel = props => {\n  const {\n    config\n  } = props;\n  const modelId = config.moduleId;\n  const app = useXFlowApp();\n  const [state, setState, toolbarModel, isModelReady] = createComponentModel({\n    name: modelId,\n    layout: props.layout,\n    mainGroups: [],\n    extraGroups: [],\n    customRender: null\n  });\n  /** 注册全局的model */\n\n  React.useEffect(() => {\n    const toDispose = new DisposableCollection();\n    const deferredModel = app.modelService.findDeferredModel(modelId);\n\n    if (!deferredModel) {\n      const {\n        toolbarCustomRender,\n        toolbarModelService\n      } = config.getConfig();\n      const d = app.modelService.registerModel({\n        id: modelId,\n        modelFactory: () => toolbarModel,\n        watchChange: self => __awaiter(void 0, void 0, void 0, function* () {\n          if (toolbarModelService) {\n            yield toolbarModelService(self, app.modelService, toDispose);\n          }\n\n          if (toolbarCustomRender) {\n            const updateCustomRender = customRender => {\n              self.setValue(m => m.customRender = customRender);\n            };\n\n            yield toolbarCustomRender(app.modelService, updateCustomRender);\n          }\n\n          return toDispose;\n        })\n      });\n      toDispose.push(d);\n    }\n\n    return () => {\n      toDispose.dispose();\n    };\n    /* eslint-disable-next-line  */\n  }, []);\n  return {\n    isModelReady,\n    state,\n    setState,\n    toolbarModel\n  };\n};","map":{"version":3,"sources":["../../src/canvas-toolbar/service.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAS,WAAT,EAAsB,oBAAtB,EAA4C,oBAA5C,QAAwE,kBAAxE;AACA,OAAO,KAAP,MAAkB,OAAlB;AASA,OAAO,MAAM,eAAe,GAAI,KAAD,IAAyB;AACtD,QAAM;AAAE,IAAA;AAAF,MAAa,KAAnB;AACA,QAAM,OAAO,GAAG,MAAM,CAAC,QAAvB;AACA,QAAM,GAAG,GAAG,WAAW,EAAvB;AAEA,QAAM,CAAC,KAAD,EAAQ,QAAR,EAAkB,YAAlB,EAAgC,YAAhC,IAAgD,oBAAoB,CACxE;AACE,IAAA,IAAI,EAAE,OADR;AAEE,IAAA,MAAM,EAAE,KAAK,CAAC,MAFhB;AAGE,IAAA,UAAU,EAAE,EAHd;AAIE,IAAA,WAAW,EAAE,EAJf;AAKE,IAAA,YAAY,EAAE;AALhB,GADwE,CAA1E;AASA;;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,MAAK;AACnB,UAAM,SAAS,GAAG,IAAI,oBAAJ,EAAlB;AACA,UAAM,aAAa,GAAG,GAAG,CAAC,YAAJ,CAAiB,iBAAjB,CAAmC,OAAnC,CAAtB;;AACA,QAAI,CAAC,aAAL,EAAoB;AAClB,YAAM;AAAE,QAAA,mBAAF;AAAuB,QAAA;AAAvB,UAA+C,MAAM,CAAC,SAAP,EAArD;AACA,YAAM,CAAC,GAAG,GAAG,CAAC,YAAJ,CAAiB,aAAjB,CAAsD;AAC9D,QAAA,EAAE,EAAE,OAD0D;AAE9D,QAAA,YAAY,EAAE,MAAM,YAF0C;AAG9D,QAAA,WAAW,EAAQ,IAAN,IAAa,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACxB,cAAI,mBAAJ,EAAyB;AACvB,kBAAM,mBAAmB,CAAC,IAAD,EAAO,GAAG,CAAC,YAAX,EAAyB,SAAzB,CAAzB;AACD;;AACD,cAAI,mBAAJ,EAAyB;AACvB,kBAAM,kBAAkB,GAAG,YAAY,IAAG;AACxC,cAAA,IAAI,CAAC,QAAL,CAAc,CAAC,IAAK,CAAC,CAAC,YAAF,GAAiB,YAArC;AACD,aAFD;;AAGA,kBAAM,mBAAmB,CAAC,GAAG,CAAC,YAAL,EAAmB,kBAAnB,CAAzB;AACD;;AACD,iBAAO,SAAP;AACD,SAXyB;AAHoC,OAAtD,CAAV;AAgBA,MAAA,SAAS,CAAC,IAAV,CAAe,CAAf;AACD;;AACD,WAAO,MAAK;AACV,MAAA,SAAS,CAAC,OAAV;AACD,KAFD;AAGA;AACD,GA3BD,EA2BG,EA3BH;AA6BA,SAAO;AAAE,IAAA,YAAF;AAAgB,IAAA,KAAhB;AAAuB,IAAA,QAAvB;AAAiC,IAAA;AAAjC,GAAP;AACD,CA7CM","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { useXFlowApp, createComponentModel, DisposableCollection } from '@antv/xflow-core';\nimport React from 'react';\nexport const useToolbarModel = (props) => {\n    const { config } = props;\n    const modelId = config.moduleId;\n    const app = useXFlowApp();\n    const [state, setState, toolbarModel, isModelReady] = createComponentModel({\n        name: modelId,\n        layout: props.layout,\n        mainGroups: [],\n        extraGroups: [],\n        customRender: null,\n    });\n    /** 注册全局的model */\n    React.useEffect(() => {\n        const toDispose = new DisposableCollection();\n        const deferredModel = app.modelService.findDeferredModel(modelId);\n        if (!deferredModel) {\n            const { toolbarCustomRender, toolbarModelService } = config.getConfig();\n            const d = app.modelService.registerModel({\n                id: modelId,\n                modelFactory: () => toolbarModel,\n                watchChange: (self) => __awaiter(void 0, void 0, void 0, function* () {\n                    if (toolbarModelService) {\n                        yield toolbarModelService(self, app.modelService, toDispose);\n                    }\n                    if (toolbarCustomRender) {\n                        const updateCustomRender = customRender => {\n                            self.setValue(m => (m.customRender = customRender));\n                        };\n                        yield toolbarCustomRender(app.modelService, updateCustomRender);\n                    }\n                    return toDispose;\n                }),\n            });\n            toDispose.push(d);\n        }\n        return () => {\n            toDispose.dispose();\n        };\n        /* eslint-disable-next-line  */\n    }, []);\n    return { isModelReady, state, setState, toolbarModel };\n};\n//# sourceMappingURL=service.js.map"]},"metadata":{},"sourceType":"module"}