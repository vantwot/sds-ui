{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findAllPath = exports.findShortestPath = void 0;\n\nvar _dijkstra = _interopRequireDefault(require(\"./dijkstra\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar findShortestPath = function findShortestPath(graphData, start, end, directed, weightPropertyName) {\n  var _a = (0, _dijkstra.default)(graphData, start, directed, weightPropertyName),\n      length = _a.length,\n      path = _a.path,\n      allPath = _a.allPath;\n\n  return {\n    length: length[end],\n    path: path[end],\n    allPath: allPath[end]\n  };\n};\n\nexports.findShortestPath = findShortestPath;\n\nvar findAllPath = function findAllPath(graphData, start, end, directed) {\n  var _a;\n\n  if (start === end) return [[start]];\n  var _b = graphData.edges,\n      edges = _b === void 0 ? [] : _b;\n  var visited = [start];\n  var isVisited = (_a = {}, _a[start] = true, _a);\n  var stack = []; // 辅助栈，用于存储访问过的节点的邻居节点\n\n  var allPath = [];\n  var neighbors = directed ? (0, _util.getNeighbors)(start, edges, 'target') : (0, _util.getNeighbors)(start, edges);\n  stack.push(neighbors);\n\n  while (visited.length > 0 && stack.length > 0) {\n    var children = stack[stack.length - 1];\n\n    if (children.length) {\n      var child = children.shift();\n\n      if (child) {\n        visited.push(child);\n        isVisited[child] = true;\n        neighbors = directed ? (0, _util.getNeighbors)(child, edges, 'target') : (0, _util.getNeighbors)(child, edges);\n        stack.push(neighbors.filter(function (neighbor) {\n          return !isVisited[neighbor];\n        }));\n      }\n    } else {\n      var node = visited.pop();\n      isVisited[node] = false;\n      stack.pop();\n      continue;\n    }\n\n    if (visited[visited.length - 1] === end) {\n      var path = visited.map(function (node) {\n        return node;\n      });\n      allPath.push(path);\n      var node = visited.pop();\n      isVisited[node] = false;\n      stack.pop();\n    }\n  }\n\n  return allPath;\n};\n\nexports.findAllPath = findAllPath;","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/@antv/algorithm/lib/find-path.js"],"names":["Object","defineProperty","exports","value","findAllPath","findShortestPath","_dijkstra","_interopRequireDefault","require","_util","obj","__esModule","default","graphData","start","end","directed","weightPropertyName","_a","length","path","allPath","_b","edges","visited","isVisited","stack","neighbors","getNeighbors","push","children","child","shift","filter","neighbor","node","pop","map"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findAllPath = exports.findShortestPath = void 0;\n\nvar _dijkstra = _interopRequireDefault(require(\"./dijkstra\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar findShortestPath = function findShortestPath(graphData, start, end, directed, weightPropertyName) {\n  var _a = (0, _dijkstra.default)(graphData, start, directed, weightPropertyName),\n      length = _a.length,\n      path = _a.path,\n      allPath = _a.allPath;\n\n  return {\n    length: length[end],\n    path: path[end],\n    allPath: allPath[end]\n  };\n};\n\nexports.findShortestPath = findShortestPath;\n\nvar findAllPath = function findAllPath(graphData, start, end, directed) {\n  var _a;\n\n  if (start === end) return [[start]];\n  var _b = graphData.edges,\n      edges = _b === void 0 ? [] : _b;\n  var visited = [start];\n  var isVisited = (_a = {}, _a[start] = true, _a);\n  var stack = []; // 辅助栈，用于存储访问过的节点的邻居节点\n\n  var allPath = [];\n  var neighbors = directed ? (0, _util.getNeighbors)(start, edges, 'target') : (0, _util.getNeighbors)(start, edges);\n  stack.push(neighbors);\n\n  while (visited.length > 0 && stack.length > 0) {\n    var children = stack[stack.length - 1];\n\n    if (children.length) {\n      var child = children.shift();\n\n      if (child) {\n        visited.push(child);\n        isVisited[child] = true;\n        neighbors = directed ? (0, _util.getNeighbors)(child, edges, 'target') : (0, _util.getNeighbors)(child, edges);\n        stack.push(neighbors.filter(function (neighbor) {\n          return !isVisited[neighbor];\n        }));\n      }\n    } else {\n      var node = visited.pop();\n      isVisited[node] = false;\n      stack.pop();\n      continue;\n    }\n\n    if (visited[visited.length - 1] === end) {\n      var path = visited.map(function (node) {\n        return node;\n      });\n      allPath.push(path);\n      var node = visited.pop();\n      isVisited[node] = false;\n      stack.pop();\n    }\n  }\n\n  return allPath;\n};\n\nexports.findAllPath = findAllPath;"]},"metadata":{},"sourceType":"script"}