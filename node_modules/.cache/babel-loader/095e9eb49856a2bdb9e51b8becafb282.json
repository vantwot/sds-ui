{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { bindAll, DOM, lnglatDistance } from '@antv/l7-utils';\nimport Control, { PositionType } from './BaseControl';\n\nvar Scale = function (_Control) {\n  _inherits(Scale, _Control);\n\n  var _super = _createSuper(Scale);\n\n  function Scale(cfg) {\n    var _this;\n\n    _classCallCheck(this, Scale);\n\n    _this = _super.call(this, cfg);\n\n    _defineProperty(_assertThisInitialized(_this), \"mScale\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"iScale\", void 0);\n\n    bindAll(['update'], _assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Scale, [{\n    key: \"getDefault\",\n    value: function getDefault() {\n      return {\n        position: PositionType.BOTTOMLEFT,\n        maxWidth: 100,\n        metric: true,\n        updateWhenIdle: false,\n        imperial: false,\n        name: 'scale'\n      };\n    }\n  }, {\n    key: \"onAdd\",\n    value: function onAdd() {\n      var className = 'l7-control-scale';\n      var container = DOM.create('div', className);\n      this.addScales(className + '-line', container);\n      var updateWhenIdle = this.controlOption.updateWhenIdle;\n      this.mapsService.on(updateWhenIdle ? 'moveend' : 'mapmove', this.update);\n      this.mapsService.on(updateWhenIdle ? 'zoomend' : 'zoomchange', this.update);\n      this.update();\n      return container;\n    }\n  }, {\n    key: \"onRemove\",\n    value: function onRemove() {\n      var updateWhenIdle = this.controlOption.updateWhenIdle;\n      this.mapsService.off(updateWhenIdle ? 'zoomend' : 'zoomchange', this.update);\n      this.mapsService.off(updateWhenIdle ? 'moveend' : 'mapmove', this.update);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var mapsService = this.mapsService;\n      var maxWidth = this.controlOption.maxWidth;\n      var y = mapsService.getSize()[1] / 2;\n      var p1 = mapsService.containerToLngLat([0, y]);\n      var p2 = mapsService.containerToLngLat([maxWidth, y]);\n      var maxMeters = lnglatDistance([p1.lng, p1.lat], [p2.lng, p2.lat]);\n      this.updateScales(maxMeters);\n    }\n  }, {\n    key: \"updateScales\",\n    value: function updateScales(maxMeters) {\n      var _this$controlOption = this.controlOption,\n          metric = _this$controlOption.metric,\n          imperial = _this$controlOption.imperial;\n\n      if (metric && maxMeters) {\n        this.updateMetric(maxMeters);\n      }\n\n      if (imperial && maxMeters) {\n        this.updateImperial(maxMeters);\n      }\n    }\n  }, {\n    key: \"updateMetric\",\n    value: function updateMetric(maxMeters) {\n      var meters = this.getRoundNum(maxMeters);\n      var label = meters < 1000 ? meters + ' m' : meters / 1000 + ' km';\n      this.updateScale(this.mScale, label, meters / maxMeters);\n    }\n  }, {\n    key: \"updateImperial\",\n    value: function updateImperial(maxMeters) {\n      var maxFeet = maxMeters * 3.2808399;\n      var maxMiles;\n      var miles;\n      var feet;\n\n      if (maxFeet > 5280) {\n        maxMiles = maxFeet / 5280;\n        miles = this.getRoundNum(maxMiles);\n        this.updateScale(this.iScale, miles + ' mi', miles / maxMiles);\n      } else {\n        feet = this.getRoundNum(maxFeet);\n        this.updateScale(this.iScale, feet + ' ft', feet / maxFeet);\n      }\n    }\n  }, {\n    key: \"updateScale\",\n    value: function updateScale(scale, text, ratio) {\n      var maxWidth = this.controlOption.maxWidth;\n      scale.style.width = Math.round(maxWidth * ratio) + 'px';\n      scale.innerHTML = text;\n    }\n  }, {\n    key: \"getRoundNum\",\n    value: function getRoundNum(num) {\n      var pow10 = Math.pow(10, (Math.floor(num) + '').length - 1);\n      var d = num / pow10;\n      d = d >= 10 ? 10 : d >= 5 ? 5 : d >= 3 ? 3 : d >= 2 ? 2 : 1;\n      return pow10 * d;\n    }\n  }, {\n    key: \"addScales\",\n    value: function addScales(className, container) {\n      var _this$controlOption2 = this.controlOption,\n          metric = _this$controlOption2.metric,\n          imperial = _this$controlOption2.imperial;\n\n      if (metric) {\n        this.mScale = DOM.create('div', className, container);\n      }\n\n      if (imperial) {\n        this.iScale = DOM.create('div', className, container);\n      }\n    }\n  }]);\n\n  return Scale;\n}(Control);\n\nexport { Scale as default };","map":{"version":3,"sources":["../../src/control/scale.ts"],"names":["Scale","Control","bindAll","position","PositionType","maxWidth","metric","updateWhenIdle","imperial","name","className","container","DOM","mapsService","y","p1","p2","maxMeters","lnglatDistance","meters","label","maxFeet","maxMiles","miles","feet","scale","Math","pow10","d","num"],"mappings":"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","sourcesContent":["import { IControlOption } from '@antv/l7-core';\nimport { bindAll, DOM, lnglatDistance } from '@antv/l7-utils';\n\nimport Control, { PositionType } from './BaseControl';\nexport interface IScaleControlOption extends IControlOption {\n  maxWidth: number;\n  metric: boolean;\n  updateWhenIdle: boolean;\n  imperial: boolean;\n}\nexport default class Scale extends Control {\n  private mScale: HTMLElement;\n  private iScale: HTMLElement;\n  constructor(cfg?: Partial<IScaleControlOption>) {\n    super(cfg);\n    bindAll(['update'], this);\n  }\n\n  public getDefault() {\n    return {\n      position: PositionType.BOTTOMLEFT,\n      maxWidth: 100,\n      metric: true,\n      updateWhenIdle: false,\n      imperial: false,\n      name: 'scale',\n    };\n  }\n\n  public onAdd() {\n    const className = 'l7-control-scale';\n    const container = DOM.create('div', className);\n    this.addScales(className + '-line', container);\n    const { updateWhenIdle } = this.controlOption;\n    // TODO: 高德地图和MapBox地图事件不一致问题\n    // 高德zoomchange\n    this.mapsService.on(updateWhenIdle ? 'moveend' : 'mapmove', this.update);\n    this.mapsService.on(updateWhenIdle ? 'zoomend' : 'zoomchange', this.update);\n    this.update();\n\n    return container;\n  }\n  public onRemove() {\n    const { updateWhenIdle } = this.controlOption;\n    this.mapsService.off(\n      updateWhenIdle ? 'zoomend' : 'zoomchange',\n      this.update,\n    );\n    this.mapsService.off(updateWhenIdle ? 'moveend' : 'mapmove', this.update);\n  }\n  public update() {\n    const mapsService = this.mapsService;\n    const { maxWidth } = this.controlOption;\n    const y = mapsService.getSize()[1] / 2;\n\n    const p1 = mapsService.containerToLngLat([0, y]);\n    const p2 = mapsService.containerToLngLat([maxWidth, y]);\n    const maxMeters = lnglatDistance([p1.lng, p1.lat], [p2.lng, p2.lat]);\n    this.updateScales(maxMeters);\n  }\n  public updateScales(maxMeters: number) {\n    const { metric, imperial } = this.controlOption;\n    if (metric && maxMeters) {\n      this.updateMetric(maxMeters);\n    }\n    if (imperial && maxMeters) {\n      this.updateImperial(maxMeters);\n    }\n  }\n  private updateMetric(maxMeters: number) {\n    const meters = this.getRoundNum(maxMeters);\n    const label = meters < 1000 ? meters + ' m' : meters / 1000 + ' km';\n    this.updateScale(this.mScale, label, meters / maxMeters);\n  }\n  private updateImperial(maxMeters: number) {\n    const maxFeet = maxMeters * 3.2808399;\n    let maxMiles: number;\n    let miles: number;\n    let feet: number;\n\n    if (maxFeet > 5280) {\n      maxMiles = maxFeet / 5280;\n      miles = this.getRoundNum(maxMiles);\n      this.updateScale(this.iScale, miles + ' mi', miles / maxMiles);\n    } else {\n      feet = this.getRoundNum(maxFeet);\n      this.updateScale(this.iScale, feet + ' ft', feet / maxFeet);\n    }\n  }\n  private updateScale(scale: HTMLElement, text: string, ratio: number) {\n    const { maxWidth } = this.controlOption;\n    scale.style.width = Math.round(maxWidth * ratio) + 'px';\n    scale.innerHTML = text;\n  }\n  private getRoundNum(num: number) {\n    const pow10 = Math.pow(10, (Math.floor(num) + '').length - 1);\n    let d = num / pow10;\n\n    d = d >= 10 ? 10 : d >= 5 ? 5 : d >= 3 ? 3 : d >= 2 ? 2 : 1;\n\n    return pow10 * d;\n  }\n  private addScales(className: string, container: HTMLElement) {\n    const { metric, imperial } = this.controlOption;\n    if (metric) {\n      this.mScale = DOM.create('div', className, container);\n    }\n    if (imperial) {\n      this.iScale = DOM.create('div', className, container);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}