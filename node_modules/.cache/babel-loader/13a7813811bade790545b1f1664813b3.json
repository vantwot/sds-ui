{"ast":null,"code":"import _toConsumableArray from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Rectangle, Point } from '../geometry';\nimport { ArrayExt, ObjectExt, Dom, FunctionExt, Vector } from '../util';\nimport { Registry } from '../registry/registry';\nimport { ConnectionStrategy } from '../registry/connection-strategy';\nimport { View } from './view';\nimport { Cache } from './cache';\nimport { Markup } from './markup';\nimport { ToolsView } from './tool';\nimport { AttrManager } from './attr';\nimport { FlagManager } from './flag';\nexport var CellView = /*#__PURE__*/function (_View, _Symbol$toStringTag) {\n  _inherits(CellView, _View);\n\n  var _super = _createSuper(CellView);\n\n  function CellView(cell) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, CellView);\n\n    _this = _super.call(this);\n    _this.cell = cell;\n    _this.options = _this.ensureOptions(options);\n    _this.graph = _this.options.graph;\n    _this.attr = new AttrManager(_assertThisInitialized(_this));\n    _this.flag = new FlagManager(_assertThisInitialized(_this), _this.options.actions, _this.options.bootstrap);\n    _this.cache = new Cache(_assertThisInitialized(_this));\n\n    _this.setContainer(_this.ensureContainer());\n\n    _this.setup();\n\n    _this.$(_this.container).data('view', _assertThisInitialized(_this));\n\n    _this.init();\n\n    return _this;\n  }\n\n  _createClass(CellView, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return CellView.toStringTag;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"onRemove\",\n    value: function onRemove() {\n      this.removeTools();\n    }\n  }, {\n    key: \"priority\",\n    get: function get() {\n      return this.options.priority;\n    }\n  }, {\n    key: \"rootSelector\",\n    get: function get() {\n      return this.options.rootSelector;\n    }\n  }, {\n    key: \"getConstructor\",\n    value: function getConstructor() {\n      return this.constructor;\n    }\n  }, {\n    key: \"ensureOptions\",\n    value: function ensureOptions(options) {\n      return this.getConstructor().getOptions(options);\n    }\n  }, {\n    key: \"getContainerTagName\",\n    value: function getContainerTagName() {\n      return this.options.isSvgElement ? 'g' : 'div';\n    }\n  }, {\n    key: \"getContainerStyle\",\n    value: function getContainerStyle() {}\n  }, {\n    key: \"getContainerAttrs\",\n    value: function getContainerAttrs() {\n      return {\n        'data-cell-id': this.cell.id,\n        'data-shape': this.cell.shape\n      };\n    }\n  }, {\n    key: \"getContainerClassName\",\n    value: function getContainerClassName() {\n      return this.prefixClassName('cell');\n    }\n  }, {\n    key: \"ensureContainer\",\n    value: function ensureContainer() {\n      return View.createElement(this.getContainerTagName(), this.options.isSvgElement);\n    }\n  }, {\n    key: \"setContainer\",\n    value: function setContainer(container) {\n      if (this.container !== container) {\n        this.undelegateEvents();\n        this.container = container;\n\n        if (this.options.events != null) {\n          this.delegateEvents(this.options.events);\n        }\n\n        var attrs = this.getContainerAttrs();\n\n        if (attrs != null) {\n          this.setAttrs(attrs, container);\n        }\n\n        var style = this.getContainerStyle();\n\n        if (style != null) {\n          this.setStyle(style, container);\n        }\n\n        var className = this.getContainerClassName();\n\n        if (className != null) {\n          this.addClass(className, container);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isNodeView\",\n    value: function isNodeView() {\n      return false;\n    }\n  }, {\n    key: \"isEdgeView\",\n    value: function isEdgeView() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this;\n    } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"confirmUpdate\",\n    value: function confirmUpdate(flag) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return 0;\n    }\n  }, {\n    key: \"getBootstrapFlag\",\n    value: function getBootstrapFlag() {\n      return this.flag.getBootstrapFlag();\n    }\n  }, {\n    key: \"getFlag\",\n    value: function getFlag(actions) {\n      return this.flag.getFlag(actions);\n    }\n  }, {\n    key: \"hasAction\",\n    value: function hasAction(flag, actions) {\n      return this.flag.hasAction(flag, actions);\n    }\n  }, {\n    key: \"removeAction\",\n    value: function removeAction(flag, actions) {\n      return this.flag.removeAction(flag, actions);\n    }\n  }, {\n    key: \"handleAction\",\n    value: function handleAction(flag, action, handle, additionalRemovedActions) {\n      if (this.hasAction(flag, action)) {\n        handle();\n        var removedFlags = [action];\n\n        if (additionalRemovedActions) {\n          if (typeof additionalRemovedActions === 'string') {\n            removedFlags.push(additionalRemovedActions);\n          } else {\n            removedFlags.push.apply(removedFlags, _toConsumableArray(additionalRemovedActions));\n          }\n        }\n\n        return this.removeAction(flag, removedFlags);\n      }\n\n      return flag;\n    }\n  }, {\n    key: \"setup\",\n    value: function setup() {\n      var _this2 = this;\n\n      this.cell.on('changed', function (_ref) {\n        var options = _ref.options;\n        return _this2.onAttrsChange(options);\n      });\n    }\n  }, {\n    key: \"onAttrsChange\",\n    value: function onAttrsChange(options) {\n      var flag = this.flag.getChangedFlag();\n\n      if (options.updated || !flag) {\n        return;\n      }\n\n      if (options.dirty && this.hasAction(flag, 'update')) {\n        flag |= this.getFlag('render'); // eslint-disable-line no-bitwise\n      } // tool changes should be sync render\n\n\n      if (options.toolId) {\n        options.async = false;\n      }\n\n      if (this.graph != null) {\n        this.graph.renderer.requestViewUpdate(this, flag, this.priority, options);\n      }\n    }\n  }, {\n    key: \"parseJSONMarkup\",\n    value: function parseJSONMarkup(markup, rootElem) {\n      var result = Markup.parseJSONMarkup(markup);\n      var selectors = result.selectors;\n      var rootSelector = this.rootSelector;\n\n      if (rootElem && rootSelector) {\n        if (selectors[rootSelector]) {\n          throw new Error('Invalid root selector');\n        }\n\n        selectors[rootSelector] = rootElem;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"can\",\n    value: function can(feature) {\n      var interacting = this.graph.options.interacting;\n\n      if (typeof interacting === 'function') {\n        interacting = FunctionExt.call(interacting, this.graph, this);\n      }\n\n      if (typeof interacting === 'object') {\n        var val = interacting[feature];\n\n        if (typeof val === 'function') {\n          val = FunctionExt.call(val, this.graph, this);\n        }\n\n        return val !== false;\n      }\n\n      if (typeof interacting === 'boolean') {\n        return interacting;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"cleanCache\",\n    value: function cleanCache() {\n      this.cache.clean();\n      return this;\n    }\n  }, {\n    key: \"getCache\",\n    value: function getCache(elem) {\n      return this.cache.get(elem);\n    }\n  }, {\n    key: \"getDataOfElement\",\n    value: function getDataOfElement(elem) {\n      return this.cache.getData(elem);\n    }\n  }, {\n    key: \"getMatrixOfElement\",\n    value: function getMatrixOfElement(elem) {\n      return this.cache.getMatrix(elem);\n    }\n  }, {\n    key: \"getShapeOfElement\",\n    value: function getShapeOfElement(elem) {\n      return this.cache.getShape(elem);\n    }\n  }, {\n    key: \"getScaleOfElement\",\n    value: function getScaleOfElement(node, scalableNode) {\n      var sx;\n      var sy;\n\n      if (scalableNode && scalableNode.contains(node)) {\n        var scale = Dom.scale(scalableNode);\n        sx = 1 / scale.sx;\n        sy = 1 / scale.sy;\n      } else {\n        sx = 1;\n        sy = 1;\n      }\n\n      return {\n        sx: sx,\n        sy: sy\n      };\n    }\n  }, {\n    key: \"getBoundingRectOfElement\",\n    value: function getBoundingRectOfElement(elem) {\n      return this.cache.getBoundingRect(elem);\n    }\n  }, {\n    key: \"getBBoxOfElement\",\n    value: function getBBoxOfElement(elem) {\n      var rect = this.getBoundingRectOfElement(elem);\n      var matrix = this.getMatrixOfElement(elem);\n      var rm = this.getRootRotatedMatrix();\n      var tm = this.getRootTranslatedMatrix();\n      return Dom.transformRectangle(rect, tm.multiply(rm).multiply(matrix));\n    }\n  }, {\n    key: \"getUnrotatedBBoxOfElement\",\n    value: function getUnrotatedBBoxOfElement(elem) {\n      var rect = this.getBoundingRectOfElement(elem);\n      var matrix = this.getMatrixOfElement(elem);\n      var tm = this.getRootTranslatedMatrix();\n      return Dom.transformRectangle(rect, tm.multiply(matrix));\n    }\n  }, {\n    key: \"getBBox\",\n    value: function getBBox() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var bbox;\n\n      if (options.useCellGeometry) {\n        var cell = this.cell;\n        var angle = cell.isNode() ? cell.getAngle() : 0;\n        bbox = cell.getBBox().bbox(angle);\n      } else {\n        bbox = this.getBBoxOfElement(this.container);\n      }\n\n      return this.graph.localToGraph(bbox);\n    }\n  }, {\n    key: \"getRootTranslatedMatrix\",\n    value: function getRootTranslatedMatrix() {\n      var cell = this.cell;\n      var pos = cell.isNode() ? cell.getPosition() : {\n        x: 0,\n        y: 0\n      };\n      return Dom.createSVGMatrix().translate(pos.x, pos.y);\n    }\n  }, {\n    key: \"getRootRotatedMatrix\",\n    value: function getRootRotatedMatrix() {\n      var matrix = Dom.createSVGMatrix();\n      var cell = this.cell;\n      var angle = cell.isNode() ? cell.getAngle() : 0;\n\n      if (angle) {\n        var bbox = cell.getBBox();\n        var cx = bbox.width / 2;\n        var cy = bbox.height / 2;\n        matrix = matrix.translate(cx, cy).rotate(angle).translate(-cx, -cy);\n      }\n\n      return matrix;\n    }\n  }, {\n    key: \"findMagnet\",\n    value: function findMagnet() {\n      var elem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.container;\n      // If the overall cell has set `magnet === false`, then returns\n      // `undefined` to announce there is no magnet found for this cell.\n      // This is especially useful to set on cells that have 'ports'.\n      // In this case, only the ports have set `magnet === true` and the\n      // overall element has `magnet === false`.\n      return this.findByAttr('magnet', elem);\n    }\n  }, {\n    key: \"updateAttrs\",\n    value: function updateAttrs(rootNode, attrs) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (options.rootBBox == null) {\n        options.rootBBox = new Rectangle();\n      }\n\n      if (options.selectors == null) {\n        options.selectors = this.selectors;\n      }\n\n      this.attr.update(rootNode, attrs, options);\n    }\n  }, {\n    key: \"isEdgeElement\",\n    value: function isEdgeElement(magnet) {\n      return this.cell.isEdge() && (magnet == null || magnet === this.container);\n    } // #region highlight\n\n  }, {\n    key: \"prepareHighlight\",\n    value: function prepareHighlight(elem) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var magnet = elem && this.$(elem)[0] || this.container;\n      options.partial = magnet === this.container;\n      return magnet;\n    }\n  }, {\n    key: \"highlight\",\n    value: function highlight(elem) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var magnet = this.prepareHighlight(elem, options);\n      this.notify('cell:highlight', {\n        magnet: magnet,\n        options: options,\n        view: this,\n        cell: this.cell\n      });\n\n      if (this.isEdgeView()) {\n        this.notify('edge:highlight', {\n          magnet: magnet,\n          options: options,\n          view: this,\n          edge: this.cell,\n          cell: this.cell\n        });\n      } else if (this.isNodeView()) {\n        this.notify('node:highlight', {\n          magnet: magnet,\n          options: options,\n          view: this,\n          node: this.cell,\n          cell: this.cell\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"unhighlight\",\n    value: function unhighlight(elem) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var magnet = this.prepareHighlight(elem, options);\n      this.notify('cell:unhighlight', {\n        magnet: magnet,\n        options: options,\n        view: this,\n        cell: this.cell\n      });\n\n      if (this.isNodeView()) {\n        this.notify('node:unhighlight', {\n          magnet: magnet,\n          options: options,\n          view: this,\n          node: this.cell,\n          cell: this.cell\n        });\n      } else if (this.isEdgeView()) {\n        this.notify('edge:unhighlight', {\n          magnet: magnet,\n          options: options,\n          view: this,\n          edge: this.cell,\n          cell: this.cell\n        });\n      }\n\n      return this;\n    } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"notifyUnhighlight\",\n    value: function notifyUnhighlight(magnet, options) {} // #endregion\n\n  }, {\n    key: \"getEdgeTerminal\",\n    value: function getEdgeTerminal(magnet, x, y, edge, type) {\n      var cell = this.cell;\n      var portId = this.findAttr('port', magnet);\n      var selector = magnet.getAttribute('data-selector');\n      var terminal = {\n        cell: cell.id\n      };\n\n      if (selector != null) {\n        terminal.magnet = selector;\n      }\n\n      if (portId != null) {\n        terminal.port = portId;\n\n        if (cell.isNode()) {\n          if (!cell.hasPort(portId) && selector == null) {\n            // port created via the `port` attribute (not API)\n            terminal.selector = this.getSelector(magnet);\n          }\n        }\n      } else if (selector == null && this.container !== magnet) {\n        terminal.selector = this.getSelector(magnet);\n      }\n\n      return this.customizeEdgeTerminal(terminal, magnet, x, y, edge, type);\n    }\n  }, {\n    key: \"customizeEdgeTerminal\",\n    value: function customizeEdgeTerminal(terminal, magnet, x, y, edge, type) {\n      var raw = edge.getStrategy() || this.graph.options.connecting.strategy;\n\n      if (raw) {\n        var name = typeof raw === 'string' ? raw : raw.name;\n        var args = typeof raw === 'string' ? {} : raw.args || {};\n        var registry = ConnectionStrategy.registry;\n\n        if (name) {\n          var fn = registry.get(name);\n\n          if (fn == null) {\n            return registry.onNotFound(name);\n          }\n\n          var result = FunctionExt.call(fn, this.graph, terminal, this, magnet, new Point(x, y), edge, type, args);\n\n          if (result) {\n            return result;\n          }\n        }\n      }\n\n      return terminal;\n    }\n  }, {\n    key: \"getMagnetFromEdgeTerminal\",\n    value: function getMagnetFromEdgeTerminal(terminal) {\n      var cell = this.cell;\n      var root = this.container;\n      var portId = terminal.port;\n      var selector = terminal.magnet;\n      var magnet;\n\n      if (portId != null && cell.isNode() && cell.hasPort(portId)) {\n        magnet = this.findPortElem(portId, selector) || root;\n      } else {\n        if (!selector) {\n          selector = terminal.selector;\n        }\n\n        if (!selector && portId != null) {\n          selector = \"[port=\\\"\".concat(portId, \"\\\"]\");\n        }\n\n        magnet = this.findOne(selector, root, this.selectors);\n      }\n\n      return magnet;\n    } // #region animate\n\n  }, {\n    key: \"animate\",\n    value: function animate(elem, options) {\n      var target = typeof elem === 'string' ? this.findOne(elem) : elem;\n\n      if (target == null) {\n        throw new Error('Invalid animation element.');\n      }\n\n      var parent = target.parentNode;\n\n      var revert = function revert() {\n        if (!parent) {\n          Dom.remove(target);\n        }\n      };\n\n      var vTarget = Vector.create(target);\n\n      if (!parent) {\n        vTarget.appendTo(this.graph.view.stage);\n      }\n\n      var onComplete = options.complete;\n\n      options.complete = function (e) {\n        revert();\n\n        if (onComplete) {\n          onComplete(e);\n        }\n      };\n\n      return vTarget.animate(options);\n    }\n  }, {\n    key: \"animateTransform\",\n    value: function animateTransform(elem, options) {\n      var target = typeof elem === 'string' ? this.findOne(elem) : elem;\n\n      if (target == null) {\n        throw new Error('Invalid animation element.');\n      }\n\n      var parent = target.parentNode;\n\n      var revert = function revert() {\n        if (!parent) {\n          Dom.remove(target);\n        }\n      };\n\n      var vTarget = Vector.create(target);\n\n      if (!parent) {\n        vTarget.appendTo(this.graph.view.stage);\n      }\n\n      var onComplete = options.complete;\n\n      options.complete = function (e) {\n        revert();\n\n        if (onComplete) {\n          onComplete(e);\n        }\n      };\n\n      return vTarget.animateTransform(options);\n    }\n  }, {\n    key: \"hasTools\",\n    value: function hasTools(name) {\n      var tools = this.tools;\n\n      if (tools == null) {\n        return false;\n      }\n\n      if (name == null) {\n        return true;\n      }\n\n      return tools.name === name;\n    }\n  }, {\n    key: \"addTools\",\n    value: function addTools(config) {\n      if (!this.can('toolsAddable')) {\n        return this;\n      }\n\n      this.removeTools();\n\n      if (config) {\n        var tools = ToolsView.isToolsView(config) ? config : new ToolsView(config);\n        this.tools = tools;\n        this.graph.on('tools:hide', this.hideTools, this);\n        this.graph.on('tools:show', this.showTools, this);\n        this.graph.on('tools:remove', this.removeTools, this);\n        tools.config({\n          view: this\n        });\n        tools.mount();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"updateTools\",\n    value: function updateTools() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (this.tools) {\n        this.tools.update(options);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"removeTools\",\n    value: function removeTools() {\n      if (this.tools) {\n        this.tools.remove();\n        this.graph.off('tools:hide', this.hideTools, this);\n        this.graph.off('tools:show', this.showTools, this);\n        this.graph.off('tools:remove', this.removeTools, this);\n        this.tools = null;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"hideTools\",\n    value: function hideTools() {\n      if (this.tools) {\n        this.tools.hide();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"showTools\",\n    value: function showTools() {\n      if (this.tools) {\n        this.tools.show();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"renderTools\",\n    value: function renderTools() {\n      var tools = this.cell.getTools();\n      this.addTools(tools);\n      return this;\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(name, args) {\n      this.trigger(name, args);\n      this.graph.trigger(name, args);\n      return this;\n    }\n  }, {\n    key: \"getEventArgs\",\n    value: function getEventArgs(e, x, y) {\n      var view = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n      var cell = view.cell;\n\n      if (x == null || y == null) {\n        return {\n          e: e,\n          view: view,\n          cell: cell\n        };\n      }\n\n      return {\n        e: e,\n        x: x,\n        y: y,\n        view: view,\n        cell: cell\n      };\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(e, x, y) {\n      this.notify('cell:click', this.getEventArgs(e, x, y));\n    }\n  }, {\n    key: \"onDblClick\",\n    value: function onDblClick(e, x, y) {\n      this.notify('cell:dblclick', this.getEventArgs(e, x, y));\n    }\n  }, {\n    key: \"onContextMenu\",\n    value: function onContextMenu(e, x, y) {\n      this.notify('cell:contextmenu', this.getEventArgs(e, x, y));\n    }\n  }, {\n    key: \"onMouseDown\",\n    value: function onMouseDown(e, x, y) {\n      if (this.cell.model) {\n        this.cachedModelForMouseEvent = this.cell.model;\n        this.cachedModelForMouseEvent.startBatch('mouse');\n      }\n\n      this.notify('cell:mousedown', this.getEventArgs(e, x, y));\n    }\n  }, {\n    key: \"onMouseUp\",\n    value: function onMouseUp(e, x, y) {\n      this.notify('cell:mouseup', this.getEventArgs(e, x, y));\n\n      if (this.cachedModelForMouseEvent) {\n        this.cachedModelForMouseEvent.stopBatch('mouse', {\n          cell: this.cell\n        });\n        this.cachedModelForMouseEvent = null;\n      }\n    }\n  }, {\n    key: \"onMouseMove\",\n    value: function onMouseMove(e, x, y) {\n      this.notify('cell:mousemove', this.getEventArgs(e, x, y));\n    }\n  }, {\n    key: \"onMouseOver\",\n    value: function onMouseOver(e) {\n      this.notify('cell:mouseover', this.getEventArgs(e));\n    }\n  }, {\n    key: \"onMouseOut\",\n    value: function onMouseOut(e) {\n      this.notify('cell:mouseout', this.getEventArgs(e));\n    }\n  }, {\n    key: \"onMouseEnter\",\n    value: function onMouseEnter(e) {\n      this.notify('cell:mouseenter', this.getEventArgs(e));\n    }\n  }, {\n    key: \"onMouseLeave\",\n    value: function onMouseLeave(e) {\n      this.notify('cell:mouseleave', this.getEventArgs(e));\n    }\n  }, {\n    key: \"onMouseWheel\",\n    value: function onMouseWheel(e, x, y, delta) {\n      this.notify('cell:mousewheel', Object.assign({\n        delta: delta\n      }, this.getEventArgs(e, x, y)));\n    }\n  }, {\n    key: \"onCustomEvent\",\n    value: function onCustomEvent(e, name, x, y) {\n      this.notify('cell:customevent', Object.assign({\n        name: name\n      }, this.getEventArgs(e, x, y)));\n      this.notify(name, Object.assign({}, this.getEventArgs(e, x, y)));\n    }\n  }, {\n    key: \"onMagnetMouseDown\",\n    value: function onMagnetMouseDown(e, magnet, x, y) {}\n  }, {\n    key: \"onMagnetDblClick\",\n    value: function onMagnetDblClick(e, magnet, x, y) {}\n  }, {\n    key: \"onMagnetContextMenu\",\n    value: function onMagnetContextMenu(e, magnet, x, y) {}\n  }, {\n    key: \"onLabelMouseDown\",\n    value: function onLabelMouseDown(e, x, y) {}\n  }, {\n    key: \"checkMouseleave\",\n    value: function checkMouseleave(e) {\n      var graph = this.graph;\n\n      if (graph.renderer.isAsync()) {\n        // Do the updates of the current view synchronously now\n        graph.renderer.dumpView(this);\n      }\n\n      var target = this.getEventTarget(e, {\n        fromPoint: true\n      });\n      var view = graph.renderer.findViewByElem(target);\n\n      if (view === this) {\n        return;\n      } // Leaving the current view\n\n\n      this.onMouseLeave(e);\n\n      if (!view) {\n        return;\n      } // Entering another view\n\n\n      view.onMouseEnter(e);\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return this.defaults;\n    }\n  }, {\n    key: \"config\",\n    value: function config(options) {\n      this.defaults = this.getOptions(options);\n    }\n  }, {\n    key: \"getOptions\",\n    value: function getOptions(options) {\n      var mergeActions = function mergeActions(arr1, arr2) {\n        if (arr2 != null) {\n          return ArrayExt.uniq([].concat(_toConsumableArray(Array.isArray(arr1) ? arr1 : [arr1]), _toConsumableArray(Array.isArray(arr2) ? arr2 : [arr2])));\n        }\n\n        return Array.isArray(arr1) ? _toConsumableArray(arr1) : [arr1];\n      };\n\n      var ret = ObjectExt.cloneDeep(this.getDefaults());\n\n      var bootstrap = options.bootstrap,\n          actions = options.actions,\n          events = options.events,\n          documentEvents = options.documentEvents,\n          others = __rest(options, [\"bootstrap\", \"actions\", \"events\", \"documentEvents\"]);\n\n      if (bootstrap) {\n        ret.bootstrap = mergeActions(ret.bootstrap, bootstrap);\n      }\n\n      if (actions) {\n        Object.keys(actions).forEach(function (key) {\n          var val = actions[key];\n          var raw = ret.actions[key];\n\n          if (val && raw) {\n            ret.actions[key] = mergeActions(raw, val);\n          } else if (val) {\n            ret.actions[key] = mergeActions(val);\n          }\n        });\n      }\n\n      if (events) {\n        ret.events = Object.assign(Object.assign({}, ret.events), events);\n      }\n\n      if (options.documentEvents) {\n        ret.documentEvents = Object.assign(Object.assign({}, ret.documentEvents), documentEvents);\n      }\n\n      return ObjectExt.merge(ret, others);\n    }\n  }]);\n\n  return CellView;\n}(View, Symbol.toStringTag);\nCellView.defaults = {\n  isSvgElement: true,\n  rootSelector: 'root',\n  priority: 0,\n  bootstrap: [],\n  actions: {}\n};\n\n(function (CellView) {\n  CellView.Flag = FlagManager;\n  CellView.Attr = AttrManager;\n})(CellView || (CellView = {}));\n\n(function (CellView) {\n  CellView.toStringTag = \"X6.\".concat(CellView.name);\n\n  function isCellView(instance) {\n    if (instance == null) {\n      return false;\n    }\n\n    if (instance instanceof CellView) {\n      return true;\n    }\n\n    var tag = instance[Symbol.toStringTag];\n    var view = instance;\n\n    if ((tag == null || tag === CellView.toStringTag) && typeof view.isNodeView === 'function' && typeof view.isEdgeView === 'function' && typeof view.confirmUpdate === 'function') {\n      return true;\n    }\n\n    return false;\n  }\n\n  CellView.isCellView = isCellView;\n})(CellView || (CellView = {})); // decorators\n// ----\n\n\n(function (CellView) {\n  function priority(value) {\n    return function (ctor) {\n      ctor.config({\n        priority: value\n      });\n    };\n  }\n\n  CellView.priority = priority;\n\n  function bootstrap(actions) {\n    return function (ctor) {\n      ctor.config({\n        bootstrap: actions\n      });\n    };\n  }\n\n  CellView.bootstrap = bootstrap;\n})(CellView || (CellView = {}));\n\n(function (CellView) {\n  CellView.registry = Registry.create({\n    type: 'view'\n  });\n})(CellView || (CellView = {}));","map":{"version":3,"sources":["../../src/view/cell.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { Rectangle, Point } from '../geometry';\nimport { ArrayExt, ObjectExt, Dom, FunctionExt, Vector } from '../util';\nimport { Registry } from '../registry/registry';\nimport { ConnectionStrategy } from '../registry/connection-strategy';\nimport { View } from './view';\nimport { Cache } from './cache';\nimport { Markup } from './markup';\nimport { ToolsView } from './tool';\nimport { AttrManager } from './attr';\nimport { FlagManager } from './flag';\nexport class CellView extends View {\n    constructor(cell, options = {}) {\n        super();\n        this.cell = cell;\n        this.options = this.ensureOptions(options);\n        this.graph = this.options.graph;\n        this.attr = new AttrManager(this);\n        this.flag = new FlagManager(this, this.options.actions, this.options.bootstrap);\n        this.cache = new Cache(this);\n        this.setContainer(this.ensureContainer());\n        this.setup();\n        this.$(this.container).data('view', this);\n        this.init();\n    }\n    static getDefaults() {\n        return this.defaults;\n    }\n    static config(options) {\n        this.defaults = this.getOptions(options);\n    }\n    static getOptions(options) {\n        const mergeActions = (arr1, arr2) => {\n            if (arr2 != null) {\n                return ArrayExt.uniq([\n                    ...(Array.isArray(arr1) ? arr1 : [arr1]),\n                    ...(Array.isArray(arr2) ? arr2 : [arr2]),\n                ]);\n            }\n            return Array.isArray(arr1) ? [...arr1] : [arr1];\n        };\n        const ret = ObjectExt.cloneDeep(this.getDefaults());\n        const { bootstrap, actions, events, documentEvents } = options, others = __rest(options, [\"bootstrap\", \"actions\", \"events\", \"documentEvents\"]);\n        if (bootstrap) {\n            ret.bootstrap = mergeActions(ret.bootstrap, bootstrap);\n        }\n        if (actions) {\n            Object.keys(actions).forEach((key) => {\n                const val = actions[key];\n                const raw = ret.actions[key];\n                if (val && raw) {\n                    ret.actions[key] = mergeActions(raw, val);\n                }\n                else if (val) {\n                    ret.actions[key] = mergeActions(val);\n                }\n            });\n        }\n        if (events) {\n            ret.events = Object.assign(Object.assign({}, ret.events), events);\n        }\n        if (options.documentEvents) {\n            ret.documentEvents = Object.assign(Object.assign({}, ret.documentEvents), documentEvents);\n        }\n        return ObjectExt.merge(ret, others);\n    }\n    get [Symbol.toStringTag]() {\n        return CellView.toStringTag;\n    }\n    init() { }\n    onRemove() {\n        this.removeTools();\n    }\n    get priority() {\n        return this.options.priority;\n    }\n    get rootSelector() {\n        return this.options.rootSelector;\n    }\n    getConstructor() {\n        return this.constructor;\n    }\n    ensureOptions(options) {\n        return this.getConstructor().getOptions(options);\n    }\n    getContainerTagName() {\n        return this.options.isSvgElement ? 'g' : 'div';\n    }\n    getContainerStyle() { }\n    getContainerAttrs() {\n        return {\n            'data-cell-id': this.cell.id,\n            'data-shape': this.cell.shape,\n        };\n    }\n    getContainerClassName() {\n        return this.prefixClassName('cell');\n    }\n    ensureContainer() {\n        return View.createElement(this.getContainerTagName(), this.options.isSvgElement);\n    }\n    setContainer(container) {\n        if (this.container !== container) {\n            this.undelegateEvents();\n            this.container = container;\n            if (this.options.events != null) {\n                this.delegateEvents(this.options.events);\n            }\n            const attrs = this.getContainerAttrs();\n            if (attrs != null) {\n                this.setAttrs(attrs, container);\n            }\n            const style = this.getContainerStyle();\n            if (style != null) {\n                this.setStyle(style, container);\n            }\n            const className = this.getContainerClassName();\n            if (className != null) {\n                this.addClass(className, container);\n            }\n        }\n        return this;\n    }\n    isNodeView() {\n        return false;\n    }\n    isEdgeView() {\n        return false;\n    }\n    render() {\n        return this;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    confirmUpdate(flag, options = {}) {\n        return 0;\n    }\n    getBootstrapFlag() {\n        return this.flag.getBootstrapFlag();\n    }\n    getFlag(actions) {\n        return this.flag.getFlag(actions);\n    }\n    hasAction(flag, actions) {\n        return this.flag.hasAction(flag, actions);\n    }\n    removeAction(flag, actions) {\n        return this.flag.removeAction(flag, actions);\n    }\n    handleAction(flag, action, handle, additionalRemovedActions) {\n        if (this.hasAction(flag, action)) {\n            handle();\n            const removedFlags = [action];\n            if (additionalRemovedActions) {\n                if (typeof additionalRemovedActions === 'string') {\n                    removedFlags.push(additionalRemovedActions);\n                }\n                else {\n                    removedFlags.push(...additionalRemovedActions);\n                }\n            }\n            return this.removeAction(flag, removedFlags);\n        }\n        return flag;\n    }\n    setup() {\n        this.cell.on('changed', ({ options }) => this.onAttrsChange(options));\n    }\n    onAttrsChange(options) {\n        let flag = this.flag.getChangedFlag();\n        if (options.updated || !flag) {\n            return;\n        }\n        if (options.dirty && this.hasAction(flag, 'update')) {\n            flag |= this.getFlag('render'); // eslint-disable-line no-bitwise\n        }\n        // tool changes should be sync render\n        if (options.toolId) {\n            options.async = false;\n        }\n        if (this.graph != null) {\n            this.graph.renderer.requestViewUpdate(this, flag, this.priority, options);\n        }\n    }\n    parseJSONMarkup(markup, rootElem) {\n        const result = Markup.parseJSONMarkup(markup);\n        const selectors = result.selectors;\n        const rootSelector = this.rootSelector;\n        if (rootElem && rootSelector) {\n            if (selectors[rootSelector]) {\n                throw new Error('Invalid root selector');\n            }\n            selectors[rootSelector] = rootElem;\n        }\n        return result;\n    }\n    can(feature) {\n        let interacting = this.graph.options.interacting;\n        if (typeof interacting === 'function') {\n            interacting = FunctionExt.call(interacting, this.graph, this);\n        }\n        if (typeof interacting === 'object') {\n            let val = interacting[feature];\n            if (typeof val === 'function') {\n                val = FunctionExt.call(val, this.graph, this);\n            }\n            return val !== false;\n        }\n        if (typeof interacting === 'boolean') {\n            return interacting;\n        }\n        return false;\n    }\n    cleanCache() {\n        this.cache.clean();\n        return this;\n    }\n    getCache(elem) {\n        return this.cache.get(elem);\n    }\n    getDataOfElement(elem) {\n        return this.cache.getData(elem);\n    }\n    getMatrixOfElement(elem) {\n        return this.cache.getMatrix(elem);\n    }\n    getShapeOfElement(elem) {\n        return this.cache.getShape(elem);\n    }\n    getScaleOfElement(node, scalableNode) {\n        let sx;\n        let sy;\n        if (scalableNode && scalableNode.contains(node)) {\n            const scale = Dom.scale(scalableNode);\n            sx = 1 / scale.sx;\n            sy = 1 / scale.sy;\n        }\n        else {\n            sx = 1;\n            sy = 1;\n        }\n        return { sx, sy };\n    }\n    getBoundingRectOfElement(elem) {\n        return this.cache.getBoundingRect(elem);\n    }\n    getBBoxOfElement(elem) {\n        const rect = this.getBoundingRectOfElement(elem);\n        const matrix = this.getMatrixOfElement(elem);\n        const rm = this.getRootRotatedMatrix();\n        const tm = this.getRootTranslatedMatrix();\n        return Dom.transformRectangle(rect, tm.multiply(rm).multiply(matrix));\n    }\n    getUnrotatedBBoxOfElement(elem) {\n        const rect = this.getBoundingRectOfElement(elem);\n        const matrix = this.getMatrixOfElement(elem);\n        const tm = this.getRootTranslatedMatrix();\n        return Dom.transformRectangle(rect, tm.multiply(matrix));\n    }\n    getBBox(options = {}) {\n        let bbox;\n        if (options.useCellGeometry) {\n            const cell = this.cell;\n            const angle = cell.isNode() ? cell.getAngle() : 0;\n            bbox = cell.getBBox().bbox(angle);\n        }\n        else {\n            bbox = this.getBBoxOfElement(this.container);\n        }\n        return this.graph.localToGraph(bbox);\n    }\n    getRootTranslatedMatrix() {\n        const cell = this.cell;\n        const pos = cell.isNode() ? cell.getPosition() : { x: 0, y: 0 };\n        return Dom.createSVGMatrix().translate(pos.x, pos.y);\n    }\n    getRootRotatedMatrix() {\n        let matrix = Dom.createSVGMatrix();\n        const cell = this.cell;\n        const angle = cell.isNode() ? cell.getAngle() : 0;\n        if (angle) {\n            const bbox = cell.getBBox();\n            const cx = bbox.width / 2;\n            const cy = bbox.height / 2;\n            matrix = matrix.translate(cx, cy).rotate(angle).translate(-cx, -cy);\n        }\n        return matrix;\n    }\n    findMagnet(elem = this.container) {\n        // If the overall cell has set `magnet === false`, then returns\n        // `undefined` to announce there is no magnet found for this cell.\n        // This is especially useful to set on cells that have 'ports'.\n        // In this case, only the ports have set `magnet === true` and the\n        // overall element has `magnet === false`.\n        return this.findByAttr('magnet', elem);\n    }\n    updateAttrs(rootNode, attrs, options = {}) {\n        if (options.rootBBox == null) {\n            options.rootBBox = new Rectangle();\n        }\n        if (options.selectors == null) {\n            options.selectors = this.selectors;\n        }\n        this.attr.update(rootNode, attrs, options);\n    }\n    isEdgeElement(magnet) {\n        return this.cell.isEdge() && (magnet == null || magnet === this.container);\n    }\n    // #region highlight\n    prepareHighlight(elem, options = {}) {\n        const magnet = (elem && this.$(elem)[0]) || this.container;\n        options.partial = magnet === this.container;\n        return magnet;\n    }\n    highlight(elem, options = {}) {\n        const magnet = this.prepareHighlight(elem, options);\n        this.notify('cell:highlight', {\n            magnet,\n            options,\n            view: this,\n            cell: this.cell,\n        });\n        if (this.isEdgeView()) {\n            this.notify('edge:highlight', {\n                magnet,\n                options,\n                view: this,\n                edge: this.cell,\n                cell: this.cell,\n            });\n        }\n        else if (this.isNodeView()) {\n            this.notify('node:highlight', {\n                magnet,\n                options,\n                view: this,\n                node: this.cell,\n                cell: this.cell,\n            });\n        }\n        return this;\n    }\n    unhighlight(elem, options = {}) {\n        const magnet = this.prepareHighlight(elem, options);\n        this.notify('cell:unhighlight', {\n            magnet,\n            options,\n            view: this,\n            cell: this.cell,\n        });\n        if (this.isNodeView()) {\n            this.notify('node:unhighlight', {\n                magnet,\n                options,\n                view: this,\n                node: this.cell,\n                cell: this.cell,\n            });\n        }\n        else if (this.isEdgeView()) {\n            this.notify('edge:unhighlight', {\n                magnet,\n                options,\n                view: this,\n                edge: this.cell,\n                cell: this.cell,\n            });\n        }\n        return this;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    notifyUnhighlight(magnet, options) { }\n    // #endregion\n    getEdgeTerminal(magnet, x, y, edge, type) {\n        const cell = this.cell;\n        const portId = this.findAttr('port', magnet);\n        const selector = magnet.getAttribute('data-selector');\n        const terminal = { cell: cell.id };\n        if (selector != null) {\n            terminal.magnet = selector;\n        }\n        if (portId != null) {\n            terminal.port = portId;\n            if (cell.isNode()) {\n                if (!cell.hasPort(portId) && selector == null) {\n                    // port created via the `port` attribute (not API)\n                    terminal.selector = this.getSelector(magnet);\n                }\n            }\n        }\n        else if (selector == null && this.container !== magnet) {\n            terminal.selector = this.getSelector(magnet);\n        }\n        return this.customizeEdgeTerminal(terminal, magnet, x, y, edge, type);\n    }\n    customizeEdgeTerminal(terminal, magnet, x, y, edge, type) {\n        const raw = edge.getStrategy() || this.graph.options.connecting.strategy;\n        if (raw) {\n            const name = typeof raw === 'string' ? raw : raw.name;\n            const args = typeof raw === 'string' ? {} : raw.args || {};\n            const registry = ConnectionStrategy.registry;\n            if (name) {\n                const fn = registry.get(name);\n                if (fn == null) {\n                    return registry.onNotFound(name);\n                }\n                const result = FunctionExt.call(fn, this.graph, terminal, this, magnet, new Point(x, y), edge, type, args);\n                if (result) {\n                    return result;\n                }\n            }\n        }\n        return terminal;\n    }\n    getMagnetFromEdgeTerminal(terminal) {\n        const cell = this.cell;\n        const root = this.container;\n        const portId = terminal.port;\n        let selector = terminal.magnet;\n        let magnet;\n        if (portId != null && cell.isNode() && cell.hasPort(portId)) {\n            magnet = this.findPortElem(portId, selector) || root;\n        }\n        else {\n            if (!selector) {\n                selector = terminal.selector;\n            }\n            if (!selector && portId != null) {\n                selector = `[port=\"${portId}\"]`;\n            }\n            magnet = this.findOne(selector, root, this.selectors);\n        }\n        return magnet;\n    }\n    // #region animate\n    animate(elem, options) {\n        const target = typeof elem === 'string' ? this.findOne(elem) : elem;\n        if (target == null) {\n            throw new Error('Invalid animation element.');\n        }\n        const parent = target.parentNode;\n        const revert = () => {\n            if (!parent) {\n                Dom.remove(target);\n            }\n        };\n        const vTarget = Vector.create(target);\n        if (!parent) {\n            vTarget.appendTo(this.graph.view.stage);\n        }\n        const onComplete = options.complete;\n        options.complete = (e) => {\n            revert();\n            if (onComplete) {\n                onComplete(e);\n            }\n        };\n        return vTarget.animate(options);\n    }\n    animateTransform(elem, options) {\n        const target = typeof elem === 'string' ? this.findOne(elem) : elem;\n        if (target == null) {\n            throw new Error('Invalid animation element.');\n        }\n        const parent = target.parentNode;\n        const revert = () => {\n            if (!parent) {\n                Dom.remove(target);\n            }\n        };\n        const vTarget = Vector.create(target);\n        if (!parent) {\n            vTarget.appendTo(this.graph.view.stage);\n        }\n        const onComplete = options.complete;\n        options.complete = (e) => {\n            revert();\n            if (onComplete) {\n                onComplete(e);\n            }\n        };\n        return vTarget.animateTransform(options);\n    }\n    hasTools(name) {\n        const tools = this.tools;\n        if (tools == null) {\n            return false;\n        }\n        if (name == null) {\n            return true;\n        }\n        return tools.name === name;\n    }\n    addTools(config) {\n        if (!this.can('toolsAddable')) {\n            return this;\n        }\n        this.removeTools();\n        if (config) {\n            const tools = ToolsView.isToolsView(config)\n                ? config\n                : new ToolsView(config);\n            this.tools = tools;\n            this.graph.on('tools:hide', this.hideTools, this);\n            this.graph.on('tools:show', this.showTools, this);\n            this.graph.on('tools:remove', this.removeTools, this);\n            tools.config({ view: this });\n            tools.mount();\n        }\n        return this;\n    }\n    updateTools(options = {}) {\n        if (this.tools) {\n            this.tools.update(options);\n        }\n        return this;\n    }\n    removeTools() {\n        if (this.tools) {\n            this.tools.remove();\n            this.graph.off('tools:hide', this.hideTools, this);\n            this.graph.off('tools:show', this.showTools, this);\n            this.graph.off('tools:remove', this.removeTools, this);\n            this.tools = null;\n        }\n        return this;\n    }\n    hideTools() {\n        if (this.tools) {\n            this.tools.hide();\n        }\n        return this;\n    }\n    showTools() {\n        if (this.tools) {\n            this.tools.show();\n        }\n        return this;\n    }\n    renderTools() {\n        const tools = this.cell.getTools();\n        this.addTools(tools);\n        return this;\n    }\n    notify(name, args) {\n        this.trigger(name, args);\n        this.graph.trigger(name, args);\n        return this;\n    }\n    getEventArgs(e, x, y) {\n        const view = this; // eslint-disable-line @typescript-eslint/no-this-alias\n        const cell = view.cell;\n        if (x == null || y == null) {\n            return { e, view, cell };\n        }\n        return { e, x, y, view, cell };\n    }\n    onClick(e, x, y) {\n        this.notify('cell:click', this.getEventArgs(e, x, y));\n    }\n    onDblClick(e, x, y) {\n        this.notify('cell:dblclick', this.getEventArgs(e, x, y));\n    }\n    onContextMenu(e, x, y) {\n        this.notify('cell:contextmenu', this.getEventArgs(e, x, y));\n    }\n    onMouseDown(e, x, y) {\n        if (this.cell.model) {\n            this.cachedModelForMouseEvent = this.cell.model;\n            this.cachedModelForMouseEvent.startBatch('mouse');\n        }\n        this.notify('cell:mousedown', this.getEventArgs(e, x, y));\n    }\n    onMouseUp(e, x, y) {\n        this.notify('cell:mouseup', this.getEventArgs(e, x, y));\n        if (this.cachedModelForMouseEvent) {\n            this.cachedModelForMouseEvent.stopBatch('mouse', { cell: this.cell });\n            this.cachedModelForMouseEvent = null;\n        }\n    }\n    onMouseMove(e, x, y) {\n        this.notify('cell:mousemove', this.getEventArgs(e, x, y));\n    }\n    onMouseOver(e) {\n        this.notify('cell:mouseover', this.getEventArgs(e));\n    }\n    onMouseOut(e) {\n        this.notify('cell:mouseout', this.getEventArgs(e));\n    }\n    onMouseEnter(e) {\n        this.notify('cell:mouseenter', this.getEventArgs(e));\n    }\n    onMouseLeave(e) {\n        this.notify('cell:mouseleave', this.getEventArgs(e));\n    }\n    onMouseWheel(e, x, y, delta) {\n        this.notify('cell:mousewheel', Object.assign({ delta }, this.getEventArgs(e, x, y)));\n    }\n    onCustomEvent(e, name, x, y) {\n        this.notify('cell:customevent', Object.assign({ name }, this.getEventArgs(e, x, y)));\n        this.notify(name, Object.assign({}, this.getEventArgs(e, x, y)));\n    }\n    onMagnetMouseDown(e, magnet, x, y) { }\n    onMagnetDblClick(e, magnet, x, y) { }\n    onMagnetContextMenu(e, magnet, x, y) { }\n    onLabelMouseDown(e, x, y) { }\n    checkMouseleave(e) {\n        const graph = this.graph;\n        if (graph.renderer.isAsync()) {\n            // Do the updates of the current view synchronously now\n            graph.renderer.dumpView(this);\n        }\n        const target = this.getEventTarget(e, { fromPoint: true });\n        const view = graph.renderer.findViewByElem(target);\n        if (view === this) {\n            return;\n        }\n        // Leaving the current view\n        this.onMouseLeave(e);\n        if (!view) {\n            return;\n        }\n        // Entering another view\n        view.onMouseEnter(e);\n    }\n}\nCellView.defaults = {\n    isSvgElement: true,\n    rootSelector: 'root',\n    priority: 0,\n    bootstrap: [],\n    actions: {},\n};\n(function (CellView) {\n    CellView.Flag = FlagManager;\n    CellView.Attr = AttrManager;\n})(CellView || (CellView = {}));\n(function (CellView) {\n    CellView.toStringTag = `X6.${CellView.name}`;\n    function isCellView(instance) {\n        if (instance == null) {\n            return false;\n        }\n        if (instance instanceof CellView) {\n            return true;\n        }\n        const tag = instance[Symbol.toStringTag];\n        const view = instance;\n        if ((tag == null || tag === CellView.toStringTag) &&\n            typeof view.isNodeView === 'function' &&\n            typeof view.isEdgeView === 'function' &&\n            typeof view.confirmUpdate === 'function') {\n            return true;\n        }\n        return false;\n    }\n    CellView.isCellView = isCellView;\n})(CellView || (CellView = {}));\n// decorators\n// ----\n(function (CellView) {\n    function priority(value) {\n        return function (ctor) {\n            ctor.config({ priority: value });\n        };\n    }\n    CellView.priority = priority;\n    function bootstrap(actions) {\n        return function (ctor) {\n            ctor.config({ bootstrap: actions });\n        };\n    }\n    CellView.bootstrap = bootstrap;\n})(CellView || (CellView = {}));\n(function (CellView) {\n    CellView.registry = Registry.create({\n        type: 'view',\n    });\n})(CellView || (CellView = {}));\n//# sourceMappingURL=cell.js.map"]},"metadata":{},"sourceType":"module"}