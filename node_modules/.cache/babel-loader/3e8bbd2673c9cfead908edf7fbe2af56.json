{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { isEqual } from 'lodash';\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { XFlowGraphCommands, XFlowNodeCommands, XFlowEdgeCommands, XFlowGroupCommands } from '../constant';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nexport var NsGraphUtils;\n\n(function (NsGraphUtils) {\n  function isNodeEqual(curNodeConfig, nextNodeConfig) {\n    /** XFlow默认的判断节点是否相等的逻辑 */\n    return isEqual(curNodeConfig, nextNodeConfig);\n  }\n\n  NsGraphUtils.isNodeEqual = isNodeEqual;\n\n  function isEdgeEqual(curEdgeConfig, nextEdgeConfig) {\n    /** XFlow默认的判断边是否相等的逻辑 */\n    return isEqual(curEdgeConfig, nextEdgeConfig);\n  }\n\n  NsGraphUtils.isEdgeEqual = isEdgeEqual;\n})(NsGraphUtils || (NsGraphUtils = {}));\n\nexport var NsGraphRender;\n\n(function (NsGraphRender) {\n  /** Command: 用于注册named factory */\n  NsGraphRender.command = XFlowGraphCommands.GRAPH_RENDER;\n  /** hookName */\n\n  NsGraphRender.hookKey = 'graphRender';\n})(NsGraphRender || (NsGraphRender = {}));\n\nvar GraphRenderCommand =\n/*#__PURE__*/\n\n/** 画布渲染命令 */\nfunction () {\n  function GraphRenderCommand() {\n    var _this = this;\n\n    _classCallCheck(this, GraphRenderCommand);\n\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var _this$ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$ctx$getArgs = this.ctx.getArgs(), args = _this$ctx$getArgs.args, runtimeHook = _this$ctx$getArgs.hooks;\n                hooks = this.ctx.getHooks();\n                _context2.next = 4;\n                return hooks.graphRender.call(args, function (handlerArgs) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                    var x6Graph, graphMeta, beforeRender, graphData, isNodeEqual, isEdgeEqual, afterRender;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return this.ctx.getX6Graph();\n\n                          case 2:\n                            x6Graph = _context.sent;\n                            graphMeta = handlerArgs.graphMeta, beforeRender = handlerArgs.beforeRender, graphData = handlerArgs.graphData, isNodeEqual = handlerArgs.isNodeEqual, isEdgeEqual = handlerArgs.isEdgeEqual, afterRender = handlerArgs.afterRender;\n                            /** 如果用户自定义beforeRender方法 */\n\n                            /** 如果用户自定义beforeRender方法 */\n                            beforeRender && beforeRender(graphMeta);\n                            _context.next = 7;\n                            return this.doLoadGraph(x6Graph, graphData, isNodeEqual, isEdgeEqual);\n\n                          case 7:\n                            /** 如果用户自定义afterRender方法 */\n                            afterRender && afterRender(graphData, graphMeta);\n                            return _context.abrupt(\"return\", {});\n\n                          case 9:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this);\n                  }));\n                }, runtimeHook);\n\n              case 4:\n                result = _context2.sent;\n\n                /** 设置结果 */\n                this.ctx.setResult(result);\n                return _context2.abrupt(\"return\", this);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    };\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.ctx.undo();\n                return _context3.abrupt(\"return\", this);\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.ctx.isUndoable) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                _context4.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context4.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n\n    this.doLoadGraph = function (x6Graph, graphData, isNodeEqual, isEdgeEqual) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var _this3 = this;\n\n        var commandService, _this$graphDataDiff, addNodeConfigs, addEdgeConfigs, removeNodes, removeEdges, updateNodes, updateEdges, _iterator, _step, nodeConfig, _iterator2, _step2, edgeConfig, _iterator3, _step3, removeNode, nodeData, _iterator4, _step4, removeEdge, edgeData, _iterator5, _step5, updateNode, _nodeData, _iterator6, _step6, updateEdge, _edgeData;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.isFrozen())) {\n                  x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.freeze();\n                }\n\n                commandService = this.ctx.getCommands();\n                _this$graphDataDiff = this.graphDataDiff(x6Graph, graphData, isNodeEqual, isEdgeEqual), addNodeConfigs = _this$graphDataDiff.addNodeConfigs, addEdgeConfigs = _this$graphDataDiff.addEdgeConfigs, removeNodes = _this$graphDataDiff.removeNodes, removeEdges = _this$graphDataDiff.removeEdges, updateNodes = _this$graphDataDiff.updateNodes, updateEdges = _this$graphDataDiff.updateEdges;\n                /** 新增节点/边 */\n\n                _iterator = _createForOfIteratorHelper(addNodeConfigs);\n                _context7.prev = 4;\n\n                _iterator.s();\n\n              case 6:\n                if ((_step = _iterator.n()).done) {\n                  _context7.next = 12;\n                  break;\n                }\n\n                nodeConfig = _step.value;\n                _context7.next = 10;\n                return commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n                  nodeConfig: nodeConfig\n                }, {\n                  name: 'remove servcie ',\n                  handler: function handler(args) {\n                    return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n                      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                        while (1) {\n                          switch (_context5.prev = _context5.next) {\n                            case 0:\n                              delete args.createNodeService;\n\n                            case 1:\n                            case \"end\":\n                              return _context5.stop();\n                          }\n                        }\n                      }, _callee5);\n                    }));\n                  }\n                });\n\n              case 10:\n                _context7.next = 6;\n                break;\n\n              case 12:\n                _context7.next = 17;\n                break;\n\n              case 14:\n                _context7.prev = 14;\n                _context7.t0 = _context7[\"catch\"](4);\n\n                _iterator.e(_context7.t0);\n\n              case 17:\n                _context7.prev = 17;\n\n                _iterator.f();\n\n                return _context7.finish(17);\n\n              case 20:\n                _context7.next = 22;\n                return commandService.executeCommand(XFlowGroupCommands.INIT_GROUP.id, {\n                  graphData: {\n                    nodes: addNodeConfigs,\n                    edges: []\n                  }\n                });\n\n              case 22:\n                _iterator2 = _createForOfIteratorHelper(addEdgeConfigs);\n                _context7.prev = 23;\n\n                _iterator2.s();\n\n              case 25:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context7.next = 31;\n                  break;\n                }\n\n                edgeConfig = _step2.value;\n                _context7.next = 29;\n                return commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n                  edgeConfig: edgeConfig\n                }, {\n                  name: 'remove servcie ',\n                  handler: function handler(args) {\n                    return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n                      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                        while (1) {\n                          switch (_context6.prev = _context6.next) {\n                            case 0:\n                              delete args.createEdgeService;\n\n                            case 1:\n                            case \"end\":\n                              return _context6.stop();\n                          }\n                        }\n                      }, _callee6);\n                    }));\n                  }\n                });\n\n              case 29:\n                _context7.next = 25;\n                break;\n\n              case 31:\n                _context7.next = 36;\n                break;\n\n              case 33:\n                _context7.prev = 33;\n                _context7.t1 = _context7[\"catch\"](23);\n\n                _iterator2.e(_context7.t1);\n\n              case 36:\n                _context7.prev = 36;\n\n                _iterator2.f();\n\n                return _context7.finish(36);\n\n              case 39:\n                /** 删除节点/边/群组 */\n                _iterator3 = _createForOfIteratorHelper(removeNodes);\n                _context7.prev = 40;\n\n                _iterator3.s();\n\n              case 42:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context7.next = 54;\n                  break;\n                }\n\n                removeNode = _step3.value;\n                nodeData = removeNode === null || removeNode === void 0 ? void 0 : removeNode.getData();\n\n                if (!nodeData.isGroup) {\n                  _context7.next = 50;\n                  break;\n                }\n\n                _context7.next = 48;\n                return commandService.executeCommand(XFlowGroupCommands.DEL_GROUP.id, {\n                  nodeConfig: nodeData\n                });\n\n              case 48:\n                _context7.next = 52;\n                break;\n\n              case 50:\n                _context7.next = 52;\n                return commandService.executeCommand(XFlowNodeCommands.DEL_NODE.id, {\n                  nodeConfig: nodeData\n                });\n\n              case 52:\n                _context7.next = 42;\n                break;\n\n              case 54:\n                _context7.next = 59;\n                break;\n\n              case 56:\n                _context7.prev = 56;\n                _context7.t2 = _context7[\"catch\"](40);\n\n                _iterator3.e(_context7.t2);\n\n              case 59:\n                _context7.prev = 59;\n\n                _iterator3.f();\n\n                return _context7.finish(59);\n\n              case 62:\n                _iterator4 = _createForOfIteratorHelper(removeEdges);\n                _context7.prev = 63;\n\n                _iterator4.s();\n\n              case 65:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context7.next = 72;\n                  break;\n                }\n\n                removeEdge = _step4.value;\n                edgeData = removeEdge === null || removeEdge === void 0 ? void 0 : removeEdge.getData();\n                _context7.next = 70;\n                return commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, {\n                  edgeConfig: edgeData\n                });\n\n              case 70:\n                _context7.next = 65;\n                break;\n\n              case 72:\n                _context7.next = 77;\n                break;\n\n              case 74:\n                _context7.prev = 74;\n                _context7.t3 = _context7[\"catch\"](63);\n\n                _iterator4.e(_context7.t3);\n\n              case 77:\n                _context7.prev = 77;\n\n                _iterator4.f();\n\n                return _context7.finish(77);\n\n              case 80:\n                /** 更新节点/边 */\n                _iterator5 = _createForOfIteratorHelper(updateNodes);\n                _context7.prev = 81;\n\n                _iterator5.s();\n\n              case 83:\n                if ((_step5 = _iterator5.n()).done) {\n                  _context7.next = 90;\n                  break;\n                }\n\n                updateNode = _step5.value;\n                _nodeData = updateNode === null || updateNode === void 0 ? void 0 : updateNode.getData();\n                _context7.next = 88;\n                return commandService.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n                  nodeConfig: _nodeData\n                });\n\n              case 88:\n                _context7.next = 83;\n                break;\n\n              case 90:\n                _context7.next = 95;\n                break;\n\n              case 92:\n                _context7.prev = 92;\n                _context7.t4 = _context7[\"catch\"](81);\n\n                _iterator5.e(_context7.t4);\n\n              case 95:\n                _context7.prev = 95;\n\n                _iterator5.f();\n\n                return _context7.finish(95);\n\n              case 98:\n                _iterator6 = _createForOfIteratorHelper(updateEdges);\n                _context7.prev = 99;\n\n                _iterator6.s();\n\n              case 101:\n                if ((_step6 = _iterator6.n()).done) {\n                  _context7.next = 108;\n                  break;\n                }\n\n                updateEdge = _step6.value;\n                _edgeData = updateEdge === null || updateEdge === void 0 ? void 0 : updateEdge.getData();\n                _context7.next = 106;\n                return commandService.executeCommand(XFlowEdgeCommands.UPDATE_EDGE.id, {\n                  edgeConfig: _edgeData\n                });\n\n              case 106:\n                _context7.next = 101;\n                break;\n\n              case 108:\n                _context7.next = 113;\n                break;\n\n              case 110:\n                _context7.prev = 110;\n                _context7.t5 = _context7[\"catch\"](99);\n\n                _iterator6.e(_context7.t5);\n\n              case 113:\n                _context7.prev = 113;\n\n                _iterator6.f();\n\n                return _context7.finish(113);\n\n              case 116:\n                if (x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.isFrozen()) {\n                  x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.unfreeze();\n                }\n\n              case 117:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[4, 14, 17, 20], [23, 33, 36, 39], [40, 56, 59, 62], [63, 74, 77, 80], [81, 92, 95, 98], [99, 110, 113, 116]]);\n      }));\n    };\n  }\n\n  _createClass(GraphRenderCommand, [{\n    key: \"init\",\n    value: function init() {\n      this.ctx = this.contextProvider();\n    }\n  }, {\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      return this.ctx.isUndoable();\n    }\n    /**\n     * 画布内容Diff\n     * @param x6Graph x6画布实例\n     * @param graphData 画布数据\n     * @param isNodeEqual 允许用户自定义判断节点是否相等\n     * @param isEdgeEqual 允许用户自定义判断边是否相等\n     */\n\n  }, {\n    key: \"graphDataDiff\",\n    value: function graphDataDiff(x6Graph, graphData, isNodeEqual, isEdgeEqual) {\n      var nodeConfigs = graphData.nodes,\n          edgeConfigs = graphData.edges;\n      /** 新增节点数据 */\n\n      var addNodeConfigs = [];\n      nodeConfigs.forEach(function (nodeConfig) {\n        var findNode = x6Graph.getCellById(nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.id);\n\n        if (!findNode) {\n          addNodeConfigs.push(nodeConfig);\n        }\n      });\n      /** 保持、更新、移除节点 */\n\n      var retainNodes = [];\n      var updateNodes = [];\n      var removeNodes = [];\n      var allNodes = x6Graph.getNodes();\n      allNodes.forEach(function (x6Node) {\n        var findNodeConfig = nodeConfigs.find(function (nodeConfig) {\n          return (nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.id) === (x6Node === null || x6Node === void 0 ? void 0 : x6Node.id);\n        });\n\n        if (!findNodeConfig) {\n          removeNodes.push(x6Node);\n        } else {\n          var judgeResult = true;\n\n          if (isNodeEqual) {\n            /** 如果用户自定义节点是否相等的方法 */\n            judgeResult = isNodeEqual(x6Node === null || x6Node === void 0 ? void 0 : x6Node.data, findNodeConfig);\n          } else {\n            /** XFlow默认的判断节点是否相等的逻辑 */\n            if ((x6Node === null || x6Node === void 0 ? void 0 : x6Node.data) && findNodeConfig) {\n              judgeResult = NsGraphUtils.isNodeEqual(x6Node === null || x6Node === void 0 ? void 0 : x6Node.data, findNodeConfig);\n            }\n          }\n\n          if (!judgeResult) {\n            x6Node.setData(findNodeConfig);\n          }\n\n          judgeResult === true ? retainNodes.push(x6Node) : updateNodes.push(x6Node);\n        }\n      });\n      /** 新增边数据 */\n\n      var addEdgeConfigs = [];\n      edgeConfigs.forEach(function (edgeConfig) {\n        var findEdge = x6Graph.getCellById(edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.id);\n\n        if (!findEdge) {\n          addEdgeConfigs.push(edgeConfig);\n        }\n      });\n      /** 保持、更新、移除节点 */\n\n      var retainEdges = [];\n      var updateEdges = [];\n      var removeEdges = [];\n      var allEdges = x6Graph.getEdges();\n      allEdges.forEach(function (x6Edge) {\n        var findEdgeConfig = edgeConfigs.find(function (edgeConfig) {\n          return (edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.id) === (x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.id);\n        });\n\n        if (!findEdgeConfig) {\n          removeEdges.push(x6Edge);\n        } else {\n          var judgeResult = true;\n\n          if (isEdgeEqual) {\n            /** 如果用户自定义边是否相等的方法 */\n            judgeResult = isEdgeEqual(x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data, findEdgeConfig);\n          } else {\n            /** XFlow默认的判断边是否相等的逻辑 */\n            if ((x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data) && findEdgeConfig) {\n              judgeResult = NsGraphUtils.isEdgeEqual(x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data, findEdgeConfig);\n            }\n          }\n\n          if (!judgeResult) {\n            x6Edge.setData(findEdgeConfig);\n          }\n\n          judgeResult === true ? retainEdges.push(x6Edge) : updateEdges.push(x6Edge);\n        }\n      });\n      return {\n        addNodeConfigs: addNodeConfigs,\n        addEdgeConfigs: addEdgeConfigs,\n        retainNodes: retainNodes,\n        retainEdges: retainEdges,\n        removeNodes: removeNodes,\n        removeEdges: removeEdges,\n        updateNodes: updateNodes,\n        updateEdges: updateEdges\n      };\n    }\n  }]);\n\n  return GraphRenderCommand;\n}();\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], GraphRenderCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], GraphRenderCommand.prototype, \"init\", null);\n\nGraphRenderCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphRender.command.id\n  }\n})\n/** 画布渲染命令 */\n], GraphRenderCommand);\nexport { GraphRenderCommand };","map":{"version":3,"sources":["../../../src/command-contributions/graph/graph-render.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isEqual } from 'lodash';\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { XFlowGraphCommands, XFlowNodeCommands, XFlowEdgeCommands, XFlowGroupCommands, } from '../constant';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nexport var NsGraphUtils;\n(function (NsGraphUtils) {\n    function isNodeEqual(curNodeConfig, nextNodeConfig) {\n        /** XFlow默认的判断节点是否相等的逻辑 */\n        return isEqual(curNodeConfig, nextNodeConfig);\n    }\n    NsGraphUtils.isNodeEqual = isNodeEqual;\n    function isEdgeEqual(curEdgeConfig, nextEdgeConfig) {\n        /** XFlow默认的判断边是否相等的逻辑 */\n        return isEqual(curEdgeConfig, nextEdgeConfig);\n    }\n    NsGraphUtils.isEdgeEqual = isEdgeEqual;\n})(NsGraphUtils || (NsGraphUtils = {}));\nexport var NsGraphRender;\n(function (NsGraphRender) {\n    /** Command: 用于注册named factory */\n    NsGraphRender.command = XFlowGraphCommands.GRAPH_RENDER;\n    /** hookName */\n    NsGraphRender.hookKey = 'graphRender';\n})(NsGraphRender || (NsGraphRender = {}));\nlet GraphRenderCommand = \n/** 画布渲染命令 */\nclass GraphRenderCommand {\n    constructor() {\n        this.execute = () => __awaiter(this, void 0, void 0, function* () {\n            const { args, hooks: runtimeHook } = this.ctx.getArgs();\n            const hooks = this.ctx.getHooks();\n            const result = yield hooks.graphRender.call(args, (handlerArgs) => __awaiter(this, void 0, void 0, function* () {\n                const x6Graph = yield this.ctx.getX6Graph();\n                const { graphMeta, beforeRender, graphData, isNodeEqual, isEdgeEqual, afterRender } = handlerArgs;\n                /** 如果用户自定义beforeRender方法 */\n                beforeRender && beforeRender(graphMeta);\n                yield this.doLoadGraph(x6Graph, graphData, isNodeEqual, isEdgeEqual);\n                /** 如果用户自定义afterRender方法 */\n                afterRender && afterRender(graphData, graphMeta);\n                return {};\n            }), runtimeHook);\n            /** 设置结果 */\n            this.ctx.setResult(result);\n            return this;\n        });\n        this.undo = () => __awaiter(this, void 0, void 0, function* () {\n            this.ctx.undo();\n            return this;\n        });\n        this.redo = () => __awaiter(this, void 0, void 0, function* () {\n            if (!this.ctx.isUndoable) {\n                yield this.execute();\n            }\n            return this;\n        });\n        this.doLoadGraph = (x6Graph, graphData, isNodeEqual, isEdgeEqual) => __awaiter(this, void 0, void 0, function* () {\n            if (!(x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.isFrozen())) {\n                x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.freeze();\n            }\n            const commandService = this.ctx.getCommands();\n            const { addNodeConfigs, addEdgeConfigs, \n            // retainNodes,\n            // retainEdges,\n            removeNodes, removeEdges, updateNodes, updateEdges, } = this.graphDataDiff(x6Graph, graphData, isNodeEqual, isEdgeEqual);\n            /** 新增节点/边 */\n            for (const nodeConfig of addNodeConfigs) {\n                yield commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n                    nodeConfig,\n                }, {\n                    name: 'remove servcie ',\n                    handler: (args) => __awaiter(this, void 0, void 0, function* () {\n                        delete args.createNodeService;\n                    }),\n                });\n            }\n            yield commandService.executeCommand(XFlowGroupCommands.INIT_GROUP.id, {\n                graphData: { nodes: addNodeConfigs, edges: [] },\n            });\n            for (const edgeConfig of addEdgeConfigs) {\n                yield commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n                    edgeConfig,\n                }, {\n                    name: 'remove servcie ',\n                    handler: (args) => __awaiter(this, void 0, void 0, function* () {\n                        delete args.createEdgeService;\n                    }),\n                });\n            }\n            /** 删除节点/边/群组 */\n            for (const removeNode of removeNodes) {\n                const nodeData = removeNode === null || removeNode === void 0 ? void 0 : removeNode.getData();\n                if (nodeData.isGroup) {\n                    yield commandService.executeCommand(XFlowGroupCommands.DEL_GROUP.id, {\n                        nodeConfig: nodeData,\n                    });\n                }\n                else {\n                    yield commandService.executeCommand(XFlowNodeCommands.DEL_NODE.id, { nodeConfig: nodeData });\n                }\n            }\n            for (const removeEdge of removeEdges) {\n                const edgeData = removeEdge === null || removeEdge === void 0 ? void 0 : removeEdge.getData();\n                yield commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, { edgeConfig: edgeData });\n            }\n            /** 更新节点/边 */\n            for (const updateNode of updateNodes) {\n                const nodeData = updateNode === null || updateNode === void 0 ? void 0 : updateNode.getData();\n                yield commandService.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n                    nodeConfig: nodeData,\n                });\n            }\n            for (const updateEdge of updateEdges) {\n                const edgeData = updateEdge === null || updateEdge === void 0 ? void 0 : updateEdge.getData();\n                yield commandService.executeCommand(XFlowEdgeCommands.UPDATE_EDGE.id, {\n                    edgeConfig: edgeData,\n                });\n            }\n            if (x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.isFrozen()) {\n                x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.unfreeze();\n            }\n        });\n    }\n    init() {\n        this.ctx = this.contextProvider();\n    }\n    isUndoable() {\n        return this.ctx.isUndoable();\n    }\n    /**\n     * 画布内容Diff\n     * @param x6Graph x6画布实例\n     * @param graphData 画布数据\n     * @param isNodeEqual 允许用户自定义判断节点是否相等\n     * @param isEdgeEqual 允许用户自定义判断边是否相等\n     */\n    graphDataDiff(x6Graph, graphData, isNodeEqual, isEdgeEqual) {\n        const { nodes: nodeConfigs, edges: edgeConfigs } = graphData;\n        /** 新增节点数据 */\n        const addNodeConfigs = [];\n        nodeConfigs.forEach(nodeConfig => {\n            const findNode = x6Graph.getCellById(nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.id);\n            if (!findNode) {\n                addNodeConfigs.push(nodeConfig);\n            }\n        });\n        /** 保持、更新、移除节点 */\n        const retainNodes = [];\n        const updateNodes = [];\n        const removeNodes = [];\n        const allNodes = x6Graph.getNodes();\n        allNodes.forEach(x6Node => {\n            const findNodeConfig = nodeConfigs.find(nodeConfig => (nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.id) === (x6Node === null || x6Node === void 0 ? void 0 : x6Node.id));\n            if (!findNodeConfig) {\n                removeNodes.push(x6Node);\n            }\n            else {\n                let judgeResult = true;\n                if (isNodeEqual) {\n                    /** 如果用户自定义节点是否相等的方法 */\n                    judgeResult = isNodeEqual(x6Node === null || x6Node === void 0 ? void 0 : x6Node.data, findNodeConfig);\n                }\n                else {\n                    /** XFlow默认的判断节点是否相等的逻辑 */\n                    if ((x6Node === null || x6Node === void 0 ? void 0 : x6Node.data) && findNodeConfig) {\n                        judgeResult = NsGraphUtils.isNodeEqual(x6Node === null || x6Node === void 0 ? void 0 : x6Node.data, findNodeConfig);\n                    }\n                }\n                if (!judgeResult) {\n                    x6Node.setData(findNodeConfig);\n                }\n                judgeResult === true ? retainNodes.push(x6Node) : updateNodes.push(x6Node);\n            }\n        });\n        /** 新增边数据 */\n        const addEdgeConfigs = [];\n        edgeConfigs.forEach(edgeConfig => {\n            const findEdge = x6Graph.getCellById(edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.id);\n            if (!findEdge) {\n                addEdgeConfigs.push(edgeConfig);\n            }\n        });\n        /** 保持、更新、移除节点 */\n        const retainEdges = [];\n        const updateEdges = [];\n        const removeEdges = [];\n        const allEdges = x6Graph.getEdges();\n        allEdges.forEach(x6Edge => {\n            const findEdgeConfig = edgeConfigs.find(edgeConfig => (edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.id) === (x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.id));\n            if (!findEdgeConfig) {\n                removeEdges.push(x6Edge);\n            }\n            else {\n                let judgeResult = true;\n                if (isEdgeEqual) {\n                    /** 如果用户自定义边是否相等的方法 */\n                    judgeResult = isEdgeEqual(x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data, findEdgeConfig);\n                }\n                else {\n                    /** XFlow默认的判断边是否相等的逻辑 */\n                    if ((x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data) && findEdgeConfig) {\n                        judgeResult = NsGraphUtils.isEdgeEqual(x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data, findEdgeConfig);\n                    }\n                }\n                if (!judgeResult) {\n                    x6Edge.setData(findEdgeConfig);\n                }\n                judgeResult === true ? retainEdges.push(x6Edge) : updateEdges.push(x6Edge);\n            }\n        });\n        return {\n            addNodeConfigs,\n            addEdgeConfigs,\n            retainNodes,\n            retainEdges,\n            removeNodes,\n            removeEdges,\n            updateNodes,\n            updateEdges,\n        };\n    }\n};\n__decorate([\n    inject(ICommandContextProvider),\n    __metadata(\"design:type\", Object)\n], GraphRenderCommand.prototype, \"contextProvider\", void 0);\n__decorate([\n    postConstruct(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], GraphRenderCommand.prototype, \"init\", null);\nGraphRenderCommand = __decorate([\n    injectable({\n        token: { token: ICommandHandler, named: NsGraphRender.command.id },\n    })\n    /** 画布渲染命令 */\n], GraphRenderCommand);\nexport { GraphRenderCommand };\n//# sourceMappingURL=graph-render.js.map"]},"metadata":{},"sourceType":"module"}