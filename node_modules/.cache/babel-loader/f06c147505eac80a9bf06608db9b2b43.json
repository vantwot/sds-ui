{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar Point = function () {\n  function Point(x, y) {\n    _classCallCheck(this, Point);\n\n    _defineProperty(this, \"x\", void 0);\n\n    _defineProperty(this, \"y\", void 0);\n\n    this.x = x;\n    this.y = y;\n  }\n\n  _createClass(Point, [{\n    key: \"clone\",\n    value: function clone() {\n      return new Point(this.x, this.y);\n    }\n  }, {\n    key: \"_add\",\n    value: function _add(p) {\n      this.x += p.x;\n      this.y += p.y;\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(p) {\n      return this.clone()._add(p);\n    }\n  }, {\n    key: \"_sub\",\n    value: function _sub(p) {\n      this.x -= p.x;\n      this.y -= p.y;\n      return this;\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(p) {\n      return this.clone()._sub(p);\n    }\n  }, {\n    key: \"_multByPoint\",\n    value: function _multByPoint(p) {\n      this.x *= p.x;\n      this.y *= p.y;\n      return this;\n    }\n  }, {\n    key: \"multByPoint\",\n    value: function multByPoint(p) {\n      return this.clone()._multByPoint(p);\n    }\n  }, {\n    key: \"_divByPoint\",\n    value: function _divByPoint(p) {\n      this.x /= p.x;\n      this.y /= p.y;\n      return this;\n    }\n  }, {\n    key: \"divByPoint\",\n    value: function divByPoint(p) {\n      return this.clone()._divByPoint(p);\n    }\n  }, {\n    key: \"_mult\",\n    value: function _mult(k) {\n      this.x *= k;\n      this.y *= k;\n      return this;\n    }\n  }, {\n    key: \"mult\",\n    value: function mult(k) {\n      return this.clone()._mult(k);\n    }\n  }, {\n    key: \"_div\",\n    value: function _div(k) {\n      this.x /= k;\n      this.y /= k;\n      return this;\n    }\n  }, {\n    key: \"div\",\n    value: function div(k) {\n      return this.clone()._div(k);\n    }\n  }, {\n    key: \"_rotate\",\n    value: function _rotate(angle) {\n      var cos = Math.cos(angle);\n      var sin = Math.sin(angle);\n      var x = cos * this.x - sin * this.y;\n      var y = sin * this.x + cos * this.y;\n      this.x = x;\n      this.y = y;\n      return this;\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(angle) {\n      return this.clone()._rotate(angle);\n    }\n  }, {\n    key: \"_rotateAround\",\n    value: function _rotateAround(angle, p) {\n      var cos = Math.cos(angle);\n      var sin = Math.sin(angle);\n      var x = p.x + cos * (this.x - p.x) - sin * (this.y - p.y);\n      var y = p.y + sin * (this.x - p.x) + cos * (this.y - p.y);\n      this.x = x;\n      this.y = y;\n      return this;\n    }\n  }, {\n    key: \"roateAround\",\n    value: function roateAround(angle, p) {\n      return this.clone()._rotateAround(angle, p);\n    }\n  }, {\n    key: \"_matMult\",\n    value: function _matMult(m) {\n      var x = m[0] * this.x + m[1] * this.y;\n      var y = m[2] * this.x + m[3] * this.y;\n      this.x = x;\n      this.y = y;\n      return this;\n    }\n  }, {\n    key: \"matMult\",\n    value: function matMult(m) {\n      return this.clone()._matMult(m);\n    }\n  }, {\n    key: \"_unit\",\n    value: function _unit() {\n      this.div(this.mag());\n      return this;\n    }\n  }, {\n    key: \"unit\",\n    value: function unit() {\n      return this.clone()._unit();\n    }\n  }, {\n    key: \"_perp\",\n    value: function _perp() {\n      var y = this.y;\n      this.y = this.x;\n      this.x = -y;\n      return this;\n    }\n  }, {\n    key: \"perp\",\n    value: function perp() {\n      return this.clone()._perp();\n    }\n  }, {\n    key: \"_round\",\n    value: function _round() {\n      this.x = Math.round(this.x);\n      this.y = Math.round(this.y);\n      return this;\n    }\n  }, {\n    key: \"round\",\n    value: function round() {\n      return this.clone()._round();\n    }\n  }, {\n    key: \"mag\",\n    value: function mag() {\n      return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.x === other.x && this.y === other.y;\n    }\n  }, {\n    key: \"dist\",\n    value: function dist(p) {\n      return Math.sqrt(this.distSqr(p));\n    }\n  }, {\n    key: \"distSqr\",\n    value: function distSqr(p) {\n      var dx = p.x - this.x;\n      var dy = p.y - this.y;\n      return dx * dx + dy * dy;\n    }\n  }, {\n    key: \"angle\",\n    value: function angle() {\n      return Math.atan2(this.y, this.x);\n    }\n  }, {\n    key: \"angleTo\",\n    value: function angleTo(b) {\n      return Math.atan2(this.y - b.y, this.x - b.x);\n    }\n  }, {\n    key: \"angleWith\",\n    value: function angleWith(b) {\n      return this.angleWithSep(b.x, b.y);\n    }\n  }, {\n    key: \"angleWithSep\",\n    value: function angleWithSep(x, y) {\n      return Math.atan2(this.x * y - this.y * x, this.x * x + this.y * y);\n    }\n  }], [{\n    key: \"convert\",\n    value: function convert(a) {\n      if (a instanceof Point) {\n        return a;\n      }\n\n      if (Array.isArray(a)) {\n        return new Point(a[0], a[1]);\n      }\n\n      return a;\n    }\n  }]);\n\n  return Point;\n}();\n\nexport { Point as default };","map":{"version":3,"sources":["../../src/geo/point.ts"],"names":["Point","a","Array","p","cos","Math","sin","x","y","m","other","dx","dy","b"],"mappings":"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","sourcesContent":["export type PointLike = [number, number] | Point;\n\nexport default class Point {\n  public static convert(a: any) {\n    if (a instanceof Point) {\n      return a;\n    }\n    if (Array.isArray(a)) {\n      return new Point(a[0], a[1]);\n    }\n    return a;\n  }\n  public x: number;\n  public y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  public clone() {\n    return new Point(this.x, this.y);\n  }\n\n  public _add(p: Point) {\n    this.x += p.x;\n    this.y += p.y;\n    return this;\n  }\n\n  public add(p: Point) {\n    return this.clone()._add(p);\n  }\n\n  public _sub(p: Point) {\n    this.x -= p.x;\n    this.y -= p.y;\n    return this;\n  }\n  public sub(p: Point) {\n    return this.clone()._sub(p);\n  }\n\n  public _multByPoint(p: Point) {\n    this.x *= p.x;\n    this.y *= p.y;\n    return this;\n  }\n\n  public multByPoint(p: Point) {\n    return this.clone()._multByPoint(p);\n  }\n\n  public _divByPoint(p: Point) {\n    this.x /= p.x;\n    this.y /= p.y;\n    return this;\n  }\n  public divByPoint(p: Point) {\n    return this.clone()._divByPoint(p);\n  }\n\n  public _mult(k: number) {\n    this.x *= k;\n    this.y *= k;\n    return this;\n  }\n\n  public mult(k: number) {\n    return this.clone()._mult(k);\n  }\n\n  public _div(k: number) {\n    this.x /= k;\n    this.y /= k;\n    return this;\n  }\n\n  public div(k: number) {\n    return this.clone()._div(k);\n  }\n\n  public _rotate(angle: number) {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    const x = cos * this.x - sin * this.y;\n    const y = sin * this.x + cos * this.y;\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  public rotate(angle: number) {\n    return this.clone()._rotate(angle);\n  }\n\n  public _rotateAround(angle: number, p: Point) {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    const x = p.x + cos * (this.x - p.x) - sin * (this.y - p.y);\n    const y = p.y + sin * (this.x - p.x) + cos * (this.y - p.y);\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n  public roateAround(angle: number, p: Point) {\n    return this.clone()._rotateAround(angle, p);\n  }\n\n  public _matMult(m: number[]) {\n    const x = m[0] * this.x + m[1] * this.y;\n    const y = m[2] * this.x + m[3] * this.y;\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  public matMult(m: number[]) {\n    return this.clone()._matMult(m);\n  }\n\n  public _unit() {\n    this.div(this.mag());\n    return this;\n  }\n  public unit() {\n    return this.clone()._unit();\n  }\n\n  public _perp() {\n    const y = this.y;\n    this.y = this.x;\n    this.x = -y;\n    return this;\n  }\n  public perp() {\n    return this.clone()._perp();\n  }\n\n  public _round() {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    return this;\n  }\n\n  public round() {\n    return this.clone()._round();\n  }\n\n  public mag() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  public equals(other: Point) {\n    return this.x === other.x && this.y === other.y;\n  }\n\n  public dist(p: Point) {\n    return Math.sqrt(this.distSqr(p));\n  }\n\n  public distSqr(p: Point) {\n    const dx = p.x - this.x;\n    const dy = p.y - this.y;\n    return dx * dx + dy * dy;\n  }\n\n  public angle() {\n    return Math.atan2(this.y, this.x);\n  }\n\n  public angleTo(b: Point) {\n    return Math.atan2(this.y - b.y, this.x - b.x);\n  }\n\n  public angleWith(b: Point) {\n    return this.angleWithSep(b.x, b.y);\n  }\n\n  public angleWithSep(x: number, y: number) {\n    return Math.atan2(this.x * y - this.y * x, this.x * x + this.y * y);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}