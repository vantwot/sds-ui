{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _isNumber from \"lodash/isNumber\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { LineArcTriangulation } from '../../core/triangulation';\nvar line_arc_frag = \"#define LineTypeSolid 0.0\\n#define LineTypeDash 1.0\\n#define Animate 0.0\\n#define LineTexture 1.0\\n\\nuniform float u_opacity;\\nuniform float u_textureBlend;\\nuniform float u_blur : 0.9;\\nuniform float u_line_type: 0.0;\\n// varying vec2 v_normal;\\nvarying vec4 v_dash_array;\\nvarying vec4 v_color;\\n\\nuniform float u_time;\\nuniform vec4 u_aimate: [ 0, 2., 1.0, 0.2 ];\\n\\nuniform float u_line_texture;\\nuniform sampler2D u_texture;\\nuniform vec2 u_textSize;\\n\\nuniform float segmentNumber;\\nvarying vec2 v_iconMapUV;\\n\\nvarying mat4 styleMappingMat; // \\u4F20\\u9012\\u4ECE\\u7247\\u5143\\u4E2D\\u4F20\\u9012\\u7684\\u6620\\u5C04\\u6570\\u636E\\n\\nuniform float u_linearColor: 0;\\nuniform vec4 u_sourceColor;\\nuniform vec4 u_targetColor;\\n\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  float opacity = styleMappingMat[0][0];\\n  float animateSpeed = 0.0; // \\u8FD0\\u52A8\\u901F\\u5EA6\\n  float d_segmentIndex = styleMappingMat[3].r;   // \\u5F53\\u524D\\u9876\\u70B9\\u5728\\u5F27\\u7EBF\\u4E2D\\u6240\\u5904\\u7684\\u5206\\u6BB5\\u4F4D\\u7F6E\\n  float d_distance_ratio = styleMappingMat[3].b; // \\u5F53\\u524D\\u9876\\u70B9\\u5728\\u5F27\\u7EBF\\u4E2D\\u6240\\u5904\\u7684\\u5206\\u6BB5\\u6BD4\\u4F8B\\n\\n  // \\u8BBE\\u7F6E\\u5F27\\u7EBF\\u7684\\u5E95\\u8272\\n  if(u_linearColor == 1.0) { // \\u4F7F\\u7528\\u6E10\\u53D8\\u989C\\u8272\\n    gl_FragColor = mix(u_sourceColor, u_targetColor, d_segmentIndex/segmentNumber);\\n  } else { // \\u4F7F\\u7528 color \\u65B9\\u6CD5\\u4F20\\u5165\\u7684\\u989C\\u8272\\n     gl_FragColor = v_color;\\n  }\\n  \\n  // float blur = 1.- smoothstep(u_blur, 1., length(v_normal.xy));\\n  // float blur = smoothstep(1.0, u_blur, length(v_normal.xy));\\n  gl_FragColor.a *= opacity;\\n  if(u_line_type == LineTypeDash) {\\n   float flag = 0.;\\n    float dashLength = mod(d_distance_ratio, v_dash_array.x + v_dash_array.y + v_dash_array.z + v_dash_array.w);\\n    if(dashLength < v_dash_array.x || (dashLength > (v_dash_array.x + v_dash_array.y) && dashLength <  v_dash_array.x + v_dash_array.y + v_dash_array.z)) {\\n      flag = 1.;\\n    }\\n    gl_FragColor.a *=flag;\\n  }\\n\\n  if(u_aimate.x == Animate) {\\n      animateSpeed = u_time / u_aimate.y;\\n      float alpha =1.0 - fract( mod(1.0- d_distance_ratio, u_aimate.z)* (1.0/ u_aimate.z) + u_time / u_aimate.y);\\n      alpha = (alpha + u_aimate.w -1.0) / u_aimate.w;\\n      // alpha = smoothstep(0., 1., alpha);\\n      alpha = clamp(alpha, 0.0, 1.0);\\n      gl_FragColor.a *= alpha;\\n  }\\n\\n  // \\u5F53\\u5B58\\u5728\\u8D34\\u56FE\\u65F6\\u5728\\u5E95\\u8272\\u4E0A\\u8D34\\u4E0A\\u8D34\\u56FE\\n  if(u_line_texture == LineTexture && u_line_type != LineTypeDash) { // while load texture\\n    float arcRadio = smoothstep( 0.0, 1.0, (d_segmentIndex / segmentNumber));\\n    // float arcRadio = smoothstep( 0.0, 1.0, d_distance_ratio);\\n\\n    float d_texCount = styleMappingMat[3].g; // \\u8D34\\u56FE\\u5728\\u5F27\\u7EBF\\u4E0A\\u91CD\\u590D\\u7684\\u6570\\u91CF\\n\\n    float u = 1.0 - fract(arcRadio * d_texCount + animateSpeed);\\n\\n    if(u_aimate.x == Animate) {\\n      u = gl_FragColor.a/opacity;\\n    }\\n    float v = styleMappingMat[3].a; // \\u6A2A\\u5411 v\\n    vec2 uv= v_iconMapUV / u_textSize + vec2(u, v) / u_textSize * 64.;\\n\\n    vec4 pattern = texture2D(u_texture, uv);\\n\\n    if(u_textureBlend == 0.0) { // normal\\n      pattern.a = 0.0;\\n      gl_FragColor = filterColor(gl_FragColor + pattern);\\n    } else { // replace\\n        pattern.a *= opacity;\\n        if(gl_FragColor.a <= 0.0) {\\n          pattern.a = 0.0;\\n        }\\n        gl_FragColor = filterColor(pattern);\\n    }\\n    // gl_FragColor = vec4(1.0 - fract(arcRadio * 20000.0), 0.0, 0.0, 1.0);\\n    // gl_FragColor = filterColor(gl_FragColor + texture2D(u_texture, uv));\\n    // gl_FragColor = filterColor(texture2D(u_texture, uv));\\n    \\n  } else {\\n     gl_FragColor = filterColor(gl_FragColor);\\n  }\\n  // gl_FragColor = filterColor(gl_FragColor);\\n}\";\nvar line_arc2d_vert = \"#define LineTypeSolid 0.0\\n#define LineTypeDash 1.0\\n#define Animate 0.0\\n#define LineTexture 1.0\\n\\nattribute vec4 a_Color;\\nattribute vec3 a_Position;\\nattribute vec4 a_Instance;\\nattribute float a_Size;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\nuniform float segmentNumber;\\nuniform vec4 u_aimate: [ 0, 2., 1.0, 0.2 ];\\nvarying vec4 v_color;\\n// varying vec2 v_normal;\\n\\nuniform float u_line_type: 0.0;\\nuniform vec4 u_dash_array: [10.0, 5., 0, 0];\\nuniform float u_lineDir: 1.0;\\nvarying vec4 v_dash_array;\\n\\nuniform float u_thetaOffset: 0.314;\\nuniform float u_icon_step: 100;\\nuniform float u_line_texture: 0.0;\\nattribute vec2 a_iconMapUV;\\nvarying vec2 v_iconMapUV;\\n\\nuniform float u_opacity: 1.0;\\nvarying mat4 styleMappingMat; // \\u7528\\u4E8E\\u5C06\\u5728\\u9876\\u70B9\\u7740\\u8272\\u5668\\u4E2D\\u8BA1\\u7B97\\u597D\\u7684\\u6837\\u5F0F\\u503C\\u4F20\\u9012\\u7ED9\\u7247\\u5143\\n\\n#pragma include \\\"styleMapping\\\"\\n#pragma include \\\"styleMappingCalOpacity\\\"\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"project\\\"\\n#pragma include \\\"picking\\\"\\n\\nfloat bezier3(vec3 arr, float t) {\\n  float ut = 1. - t;\\n  return (arr.x * ut + arr.y * t) * ut + (arr.y * ut + arr.z * t) * t;\\n}\\nvec2 midPoint(vec2 source, vec2 target) {\\n  vec2 center = target - source;\\n  float r = length(center);\\n  float theta = atan(center.y, center.x);\\n  float thetaOffset = u_thetaOffset;\\n  float r2 = r / 2.0 / cos(thetaOffset);\\n  float theta2 = theta + thetaOffset;\\n  vec2 mid = vec2(r2*cos(theta2) + source.x, r2*sin(theta2) + source.y);\\n  if(u_lineDir == 1.0) { // \\u6B63\\u5411\\n    return mid;\\n  } else { // \\u9006\\u5411\\n    // (mid + vmin)/2 = (s + t)/2\\n    vec2 vmid = source + target - mid;\\n    return vmid;\\n  }\\n  // return mid;\\n}\\nfloat getSegmentRatio(float index) {\\n    return smoothstep(0.0, 1.0, index / (segmentNumber - 1.));\\n}\\nvec2 interpolate (vec2 source, vec2 target, float t) {\\n  // if the angularDist is PI, linear interpolation is applied. otherwise, use spherical interpolation\\n  vec2 mid = midPoint(source, target);\\n  vec3 x = vec3(source.x, mid.x, target.x);\\n  vec3 y = vec3(source.y, mid.y, target.y);\\n  return vec2(bezier3(x ,t), bezier3(y,t));\\n}\\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace);\\n  // rotate by 90 degrees\\n   dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n  vec2 offset = dir_screenspace * offset_direction * setPickingSize(a_Size) / 2.0;\\n  return offset;\\n}\\nvec2 getNormal(vec2 line_clipspace, float offset_direction) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace);\\n  // rotate by 90 degrees\\n   dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n   return reverse_offset_normal(vec3(dir_screenspace,1.0)).xy * sign(offset_direction);\\n}\\n\\nvoid main() {\\n  v_color = a_Color;\\n\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n  styleMappingMat = mat4(\\n    0.0, 0.0, 0.0, 0.0, // opacity - strokeOpacity - strokeWidth - empty\\n    0.0, 0.0, 0.0, 0.0, // strokeR - strokeG - strokeB - strokeA\\n    0.0, 0.0, 0.0, 0.0, // offsets[0] - offsets[1]\\n    0.0, 0.0, 0.0, 0.0  // dataset \\u6570\\u636E\\u96C6\\n  );\\n\\n  float rowCount = u_cellTypeLayout[0][0];    // \\u5F53\\u524D\\u7684\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u884C\\n  float columnCount = u_cellTypeLayout[0][1]; // \\u5F53\\u770B\\u5230\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u5217\\n  float columnWidth = 1.0/columnCount;  // \\u5217\\u5BBD\\n  float rowHeight = 1.0/rowCount;       // \\u884C\\u9AD8\\n  float cellCount = calCellCount(); // opacity - strokeOpacity - strokeWidth - stroke - offsets\\n  float id = a_vertexId; // \\u7B2Cn\\u4E2A\\u9876\\u70B9\\n  float cellCurrentRow = floor(id * cellCount / columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u884C\\n  float cellCurrentColumn = mod(id * cellCount, columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u5217\\n  \\n  // cell \\u56FA\\u5B9A\\u987A\\u5E8F opacity -> strokeOpacity -> strokeWidth -> stroke ... \\n  // \\u6309\\u987A\\u5E8F\\u4ECE cell \\u4E2D\\u53D6\\u503C\\u3001\\u82E5\\u6CA1\\u6709\\u5219\\u81EA\\u52A8\\u5F80\\u4E0B\\u53D6\\u503C\\n  float textureOffset = 0.0; // \\u5728 cell \\u4E2D\\u53D6\\u503C\\u7684\\u504F\\u79FB\\u91CF\\n\\n  vec2 opacityAndOffset = calOpacityAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\\n  styleMappingMat[0][0] = opacityAndOffset.r;\\n  textureOffset = opacityAndOffset.g;\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n\\n  \\n  vec2 source = a_Instance.rg;  // \\u8D77\\u59CB\\u70B9\\n  vec2 target =  a_Instance.ba; // \\u7EC8\\u70B9\\n  float segmentIndex = a_Position.x;\\n  float segmentRatio = getSegmentRatio(segmentIndex);\\n\\n  float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));\\n  float nextSegmentRatio = getSegmentRatio(segmentIndex + indexDir);\\n  float d_distance_ratio;\\n  if(u_line_type == LineTypeDash) {\\n      d_distance_ratio = segmentIndex / segmentNumber;\\n\\n      vec2 s = source;\\n      vec2 t = target;\\n      \\n      if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n        s = unProjCustomCoord(source);\\n        t = unProjCustomCoord(target);\\n      }\\n      float total_Distance = pixelDistance(s, t) / 2.0 * PI;\\n      // float total_Distance = pixelDistance(a_Instance.rg, a_Instance.ba) / 2.0 * PI;\\n      v_dash_array = pow(2.0, 20.0 - u_Zoom) * u_dash_array / (total_Distance / segmentNumber * segmentIndex);\\n  }\\n  \\n  if(u_aimate.x == Animate) {\\n      d_distance_ratio = segmentIndex / segmentNumber;\\n      if(u_lineDir != 1.0) {\\n        d_distance_ratio = 1.0 - d_distance_ratio;\\n      }\\n  }\\n\\n   styleMappingMat[3].b = d_distance_ratio;\\n\\n  vec4 curr = project_position(vec4(interpolate(source, target, segmentRatio), 0.0, 1.0));\\n  vec4 next = project_position(vec4(interpolate(source, target, nextSegmentRatio), 0.0, 1.0));\\n  // v_normal = getNormal((next.xy - curr.xy) * indexDir, a_Position.y);\\n  //unProjCustomCoord\\n  \\n  vec2 offset = project_pixel(getExtrusionOffset((next.xy - curr.xy) * indexDir, a_Position.y));\\n\\n\\n  float d_segmentIndex = a_Position.x + 1.0; // \\u5F53\\u524D\\u9876\\u70B9\\u5728\\u5F27\\u7EBF\\u4E2D\\u6240\\u5904\\u7684\\u5206\\u6BB5\\u4F4D\\u7F6E\\n  styleMappingMat[3].r = d_segmentIndex;\\n\\n  if(LineTexture == u_line_texture) { // \\u5F00\\u542F\\u8D34\\u56FE\\u6A21\\u5F0F\\n\\n    float arcDistrance = length(source - target); // \\u8D77\\u59CB\\u70B9\\u548C\\u7EC8\\u70B9\\u7684\\u8DDD\\u79BB\\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_P20) { // amap\\n      arcDistrance *= 1000000.0;\\n    }\\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT || u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET) { // mapbox\\n      // arcDistrance *= 8.0;\\n      arcDistrance = project_pixel_allmap(arcDistrance);\\n    }\\n    v_iconMapUV = a_iconMapUV;\\n\\n    float pixelLen = project_pixel(u_icon_step); // \\u8D34\\u56FE\\u6CBF\\u5F27\\u7EBF\\u65B9\\u5411\\u7684\\u957F\\u5EA6 - \\u968F\\u5730\\u56FE\\u7F29\\u653E\\u6539\\u53D8\\n    float texCount = floor(arcDistrance/pixelLen); // \\u8D34\\u56FE\\u5728\\u5F27\\u7EBF\\u4E0A\\u91CD\\u590D\\u7684\\u6570\\u91CF\\n     styleMappingMat[3].g = texCount;\\n\\n    float lineOffsetWidth = length(offset + offset * sign(a_Position.y)); // \\u7EBF\\u6A2A\\u5411\\u504F\\u79FB\\u7684\\u8DDD\\u79BB\\n    float linePixelSize = project_pixel(a_Size); // \\u5B9A\\u70B9\\u4F4D\\u7F6E\\u504F\\u79FB\\n     styleMappingMat[3].a = lineOffsetWidth/linePixelSize; // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n  }\\n  \\n\\n  // gl_Position = project_common_position_to_clipspace(vec4(curr.xy + offset, 0, 1.0));\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n    // gl_Position = u_Mvp * (vec4(curr.xy + offset, 0, 1.0));\\n    gl_Position = u_Mvp * (vec4(curr.xy + offset, 0, 1.0));\\n  } else {\\n    gl_Position = project_common_position_to_clipspace(vec4(curr.xy + offset, 0, 1.0));\\n  }\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nvar lineStyleObj = {\n  solid: 0.0,\n  dash: 1.0\n};\n\nvar ArcModel = function (_BaseModel) {\n  _inherits(ArcModel, _BaseModel);\n\n  var _super = _createSuper(ArcModel);\n\n  function ArcModel() {\n    var _this;\n\n    _classCallCheck(this, ArcModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"texture\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"updateTexture\", function () {\n      var createTexture2D = _this.rendererService.createTexture2D;\n\n      if (_this.texture) {\n        _this.texture.update({\n          data: _this.iconService.getCanvas()\n        });\n\n        _this.layer.render();\n\n        return;\n      }\n\n      _this.texture = createTexture2D({\n        data: _this.iconService.getCanvas(),\n        mag: gl.NEAREST,\n        min: gl.NEAREST,\n        premultiplyAlpha: false,\n        width: 1024,\n        height: _this.iconService.canvasHeight || 128\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ArcModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          opacity = _ref.opacity,\n          sourceColor = _ref.sourceColor,\n          targetColor = _ref.targetColor,\n          _ref$textureBlend = _ref.textureBlend,\n          textureBlend = _ref$textureBlend === void 0 ? 'normal' : _ref$textureBlend,\n          _ref$lineType = _ref.lineType,\n          lineType = _ref$lineType === void 0 ? 'solid' : _ref$lineType,\n          _ref$dashArray = _ref.dashArray,\n          dashArray = _ref$dashArray === void 0 ? [10, 5] : _ref$dashArray,\n          _ref$forward = _ref.forward,\n          forward = _ref$forward === void 0 ? true : _ref$forward,\n          _ref$lineTexture = _ref.lineTexture,\n          lineTexture = _ref$lineTexture === void 0 ? false : _ref$lineTexture,\n          _ref$iconStep = _ref.iconStep,\n          iconStep = _ref$iconStep === void 0 ? 100 : _ref$iconStep,\n          _ref$segmentNumber = _ref.segmentNumber,\n          segmentNumber = _ref$segmentNumber === void 0 ? 30 : _ref$segmentNumber,\n          _ref$thetaOffset = _ref.thetaOffset,\n          thetaOffset = _ref$thetaOffset === void 0 ? 0.314 : _ref$thetaOffset;\n\n      if (this.dataTextureTest && this.dataTextureNeedUpdate({\n        opacity: opacity\n      })) {\n        this.judgeStyleAttributes({\n          opacity: opacity\n        });\n        var encodeData = this.layer.getEncodedData();\n\n        var _this$calDataFrame = this.calDataFrame(this.cellLength, encodeData, this.cellProperties),\n            data = _this$calDataFrame.data,\n            width = _this$calDataFrame.width,\n            height = _this$calDataFrame.height;\n\n        this.rowCount = height;\n        this.dataTexture = this.cellLength > 0 && data.length > 0 ? this.createTexture2D({\n          flipY: true,\n          data: data,\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: width,\n          height: height\n        }) : this.createTexture2D({\n          flipY: true,\n          data: [1],\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: 1,\n          height: 1\n        });\n      }\n\n      if (dashArray.length === 2) {\n        dashArray.push(0, 0);\n      }\n\n      var useLinearColor = 0;\n      var sourceColorArr = [0, 0, 0, 0];\n      var targetColorArr = [0, 0, 0, 0];\n\n      if (sourceColor && targetColor) {\n        sourceColorArr = rgb2arr(sourceColor);\n        targetColorArr = rgb2arr(targetColor);\n        useLinearColor = 1;\n      }\n\n      if (this.rendererService.getDirty()) {\n        this.texture.bind();\n      }\n\n      return {\n        u_thetaOffset: thetaOffset,\n        u_dataTexture: this.dataTexture,\n        u_cellTypeLayout: this.getCellTypeLayout(),\n        u_opacity: _isNumber(opacity) ? opacity : 1.0,\n        u_textureBlend: textureBlend === 'normal' ? 0.0 : 1.0,\n        segmentNumber: segmentNumber,\n        u_line_type: lineStyleObj[lineType || 'solid'],\n        u_dash_array: dashArray,\n        u_blur: 0.9,\n        u_lineDir: forward ? 1 : -1,\n        u_texture: this.texture,\n        u_line_texture: lineTexture ? 1.0 : 0.0,\n        u_icon_step: iconStep,\n        u_textSize: [1024, this.iconService.canvasHeight || 128],\n        u_linearColor: useLinearColor,\n        u_sourceColor: sourceColorArr,\n        u_targetColor: targetColorArr\n      };\n    }\n  }, {\n    key: \"getAnimateUniforms\",\n    value: function getAnimateUniforms() {\n      var _ref2 = this.layer.getLayerConfig(),\n          animateOption = _ref2.animateOption;\n\n      return {\n        u_aimate: this.animateOption2Array(animateOption),\n        u_time: this.layer.getLayerAnimateTime()\n      };\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      this.updateTexture();\n      this.iconService.on('imageUpdate', this.updateTexture);\n      return this.buildModels();\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$texture, _this$dataTexture;\n\n      (_this$texture = this.texture) === null || _this$texture === void 0 ? void 0 : _this$texture.destroy();\n      (_this$dataTexture = this.dataTexture) === null || _this$dataTexture === void 0 ? void 0 : _this$dataTexture.destroy();\n      this.iconService.off('imageUpdate', this.updateTexture);\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      var _ref3 = this.layer.getLayerConfig(),\n          _ref3$segmentNumber = _ref3.segmentNumber,\n          segmentNumber = _ref3$segmentNumber === void 0 ? 30 : _ref3$segmentNumber;\n\n      return [this.layer.buildLayerModel({\n        moduleName: 'arc2dline',\n        vertexShader: line_arc2d_vert,\n        fragmentShader: line_arc_frag,\n        triangulation: LineArcTriangulation,\n        depth: {\n          enable: false\n        },\n        blend: this.getBlend(),\n        segmentNumber: segmentNumber\n      })];\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      var _this2 = this;\n\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var _feature$size = feature.size,\n                size = _feature$size === void 0 ? 1 : _feature$size;\n            return Array.isArray(size) ? [size[0]] : [size];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'instance',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Instance',\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 4,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[3], vertex[4], vertex[5], vertex[6]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_iconMapUV',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var iconMap = _this2.iconService.getIconMap();\n\n            var texture = feature.texture;\n\n            var _ref4 = iconMap[texture] || {\n              x: 0,\n              y: 0\n            },\n                x = _ref4.x,\n                y = _ref4.y;\n\n            return [x, y];\n          }\n        }\n      });\n    }\n  }]);\n\n  return ArcModel;\n}(BaseModel);\n\nexport { ArcModel as default };","map":{"version":3,"sources":["../../../src/line/models/arc.ts"],"names":["lineStyleObj","solid","dash","ArcModel","BaseModel","opacity","sourceColor","targetColor","textureBlend","lineType","dashArray","forward","lineTexture","iconStep","segmentNumber","thetaOffset","encodeData","data","width","height","flipY","format","gl","type","useLinearColor","sourceColorArr","targetColorArr","rgb2arr","u_thetaOffset","u_dataTexture","u_cellTypeLayout","u_opacity","u_textureBlend","u_line_type","u_dash_array","u_blur","u_lineDir","u_texture","u_line_texture","u_icon_step","u_textSize","u_linearColor","u_sourceColor","u_targetColor","animateOption","u_aimate","u_time","moduleName","vertexShader","fragmentShader","triangulation","depth","enable","blend","name","AttributeType","descriptor","buffer","usage","FLOAT","size","update","feature","Array","vertex","iconMap","texture","x","y","createTexture2D","mag","min","premultiplyAlpha"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IAnimateOption,\n  IEncodeFeature,\n  ILayerConfig,\n  IModel,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\n\nimport { rgb2arr } from '@antv/l7-utils';\nimport { isNumber } from 'lodash';\nimport BaseModel from '../../core/BaseModel';\nimport { ILineLayerStyleOptions, lineStyleType } from '../../core/interface';\nimport { LineArcTriangulation } from '../../core/triangulation';\nimport line_arc_frag from '../shaders/line_arc_frag.glsl';\nimport line_arc2d_vert from '../shaders/line_arc_vert.glsl';\nconst lineStyleObj: { [key: string]: number } = {\n  solid: 0.0,\n  dash: 1.0,\n};\nexport default class ArcModel extends BaseModel {\n  protected texture: ITexture2D;\n  public getUninforms(): IModelUniform {\n    const {\n      opacity,\n      sourceColor,\n      targetColor,\n      textureBlend = 'normal',\n      lineType = 'solid',\n      dashArray = [10, 5],\n      forward = true,\n      lineTexture = false,\n      iconStep = 100,\n      segmentNumber = 30,\n      thetaOffset = 0.314,\n    } = this.layer.getLayerConfig() as ILineLayerStyleOptions;\n\n    if (this.dataTextureTest && this.dataTextureNeedUpdate({ opacity })) {\n      this.judgeStyleAttributes({ opacity });\n      const encodeData = this.layer.getEncodedData();\n      const { data, width, height } = this.calDataFrame(\n        this.cellLength,\n        encodeData,\n        this.cellProperties,\n      );\n      this.rowCount = height; // 当前数据纹理有多少行\n\n      this.dataTexture =\n        this.cellLength > 0 && data.length > 0\n          ? this.createTexture2D({\n              flipY: true,\n              data,\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width,\n              height,\n            })\n          : this.createTexture2D({\n              flipY: true,\n              data: [1],\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width: 1,\n              height: 1,\n            });\n    }\n\n    if (dashArray.length === 2) {\n      dashArray.push(0, 0);\n    }\n\n    // 转化渐变色\n    let useLinearColor = 0; // 默认不生效\n    let sourceColorArr = [0, 0, 0, 0];\n    let targetColorArr = [0, 0, 0, 0];\n    if (sourceColor && targetColor) {\n      sourceColorArr = rgb2arr(sourceColor);\n      targetColorArr = rgb2arr(targetColor);\n      useLinearColor = 1;\n    }\n\n    if (this.rendererService.getDirty()) {\n      this.texture.bind();\n    }\n\n    return {\n      u_thetaOffset: thetaOffset,\n      u_dataTexture: this.dataTexture, // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]\n      u_cellTypeLayout: this.getCellTypeLayout(),\n\n      u_opacity: isNumber(opacity) ? opacity : 1.0,\n      u_textureBlend: textureBlend === 'normal' ? 0.0 : 1.0,\n      segmentNumber,\n      u_line_type: lineStyleObj[lineType || 'solid'],\n      u_dash_array: dashArray,\n      u_blur: 0.9,\n      u_lineDir: forward ? 1 : -1,\n\n      // 纹理支持参数\n      u_texture: this.texture, // 贴图\n      u_line_texture: lineTexture ? 1.0 : 0.0, // 传入线的标识\n      u_icon_step: iconStep,\n      u_textSize: [1024, this.iconService.canvasHeight || 128],\n\n      // 渐变色支持参数\n      u_linearColor: useLinearColor,\n      u_sourceColor: sourceColorArr,\n      u_targetColor: targetColorArr,\n    };\n  }\n\n  public getAnimateUniforms(): IModelUniform {\n    const { animateOption } = this.layer.getLayerConfig() as ILayerConfig;\n    // console.log('animateOption', animateOption)\n    return {\n      u_aimate: this.animateOption2Array(animateOption as IAnimateOption),\n      u_time: this.layer.getLayerAnimateTime(),\n    };\n  }\n\n  public initModels(): IModel[] {\n    this.updateTexture();\n    this.iconService.on('imageUpdate', this.updateTexture);\n\n    return this.buildModels();\n  }\n\n  public clearModels() {\n    this.texture?.destroy();\n    this.dataTexture?.destroy();\n    this.iconService.off('imageUpdate', this.updateTexture);\n  }\n\n  public buildModels(): IModel[] {\n    const {\n      segmentNumber = 30,\n    } = this.layer.getLayerConfig() as ILineLayerStyleOptions;\n\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'arc2dline',\n        vertexShader: line_arc2d_vert,\n        fragmentShader: line_arc_frag,\n        triangulation: LineArcTriangulation,\n        depth: { enable: false },\n        blend: this.getBlend(),\n        segmentNumber,\n      }),\n    ];\n  }\n\n  protected registerBuiltinAttributes() {\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 1 } = feature;\n          return Array.isArray(size) ? [size[0]] : [size as number];\n        },\n      },\n    });\n\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'instance', // 弧线起始点信息\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Instance',\n        buffer: {\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 4,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[3], vertex[4], vertex[5], vertex[6]];\n        },\n      },\n    });\n\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_iconMapUV',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const iconMap = this.iconService.getIconMap();\n          const { texture } = feature;\n          const { x, y } = iconMap[texture as string] || { x: 0, y: 0 };\n          return [x, y];\n        },\n      },\n    });\n  }\n\n  private updateTexture = () => {\n    const { createTexture2D } = this.rendererService;\n    if (this.texture) {\n      this.texture.update({\n        data: this.iconService.getCanvas(),\n      });\n      this.layer.render();\n      return;\n    }\n    this.texture = createTexture2D({\n      data: this.iconService.getCanvas(),\n      mag: gl.NEAREST,\n      min: gl.NEAREST,\n      premultiplyAlpha: false,\n      width: 1024,\n      height: this.iconService.canvasHeight || 128,\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}