{"ast":null,"code":"import { ArrayExt } from '../../util';\nimport { Config } from '../../global/config';\nimport { Graph } from '../../graph/graph';\nimport { Model } from '../../model/model';\nexport class Clipboard {\n  constructor() {\n    this.cells = [];\n  }\n\n  copy(cells, graph) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.options = Object.assign({}, options);\n    const model = Model.isModel(graph) ? graph : graph.model;\n    const cloned = model.cloneSubGraph(cells, options); // sort asc by cell type\n\n    this.cells = ArrayExt.sortBy(Object.keys(cloned).map(key => cloned[key]), cell => cell.isEdge() ? 2 : 1);\n    this.serialize(options);\n  }\n\n  cut(cells, graph) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.copy(cells, graph, options);\n    const model = Graph.isGraph(graph) ? graph.model : graph;\n    model.batchUpdate('cut', () => {\n      cells.forEach(cell => cell.remove());\n    });\n  }\n\n  paste(graph) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const localOptions = Object.assign(Object.assign({}, this.options), options);\n    const {\n      offset,\n      edgeProps,\n      nodeProps\n    } = localOptions;\n    let dx = 20;\n    let dy = 20;\n\n    if (offset) {\n      dx = typeof offset === 'number' ? offset : offset.dx;\n      dy = typeof offset === 'number' ? offset : offset.dy;\n    }\n\n    this.deserialize(localOptions);\n    const cells = this.cells;\n    cells.forEach(cell => {\n      cell.model = null;\n      cell.removeProp('zIndex');\n\n      if (dx || dy) {\n        cell.translate(dx, dy);\n      }\n\n      if (nodeProps && cell.isNode()) {\n        cell.prop(nodeProps);\n      }\n\n      if (edgeProps && cell.isEdge()) {\n        cell.prop(edgeProps);\n      }\n    });\n    const model = Graph.isGraph(graph) ? graph.model : graph;\n    model.batchUpdate('paste', () => {\n      model.addCells(this.cells);\n    });\n    this.copy(cells, graph, options);\n    return cells;\n  }\n\n  serialize(options) {\n    if (options.useLocalStorage !== false) {\n      Storage.save(this.cells);\n    }\n  }\n\n  deserialize(options) {\n    if (options.useLocalStorage) {\n      const cells = Storage.fetch();\n\n      if (cells) {\n        this.cells = cells;\n      }\n    }\n  }\n\n  isEmpty() {\n    return this.cells.length <= 0;\n  }\n\n  clean() {\n    this.options = {};\n    this.cells = [];\n    Storage.clean();\n  }\n\n}\nvar Storage;\n\n(function (Storage) {\n  const LOCAL_STORAGE_KEY = `${Config.prefixCls}.clipboard.cells`;\n\n  function save(cells) {\n    if (window.localStorage) {\n      const data = cells.map(cell => cell.toJSON());\n      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(data));\n    }\n  }\n\n  Storage.save = save;\n\n  function fetch() {\n    if (window.localStorage) {\n      const raw = localStorage.getItem(LOCAL_STORAGE_KEY);\n      const cells = raw ? JSON.parse(raw) : [];\n\n      if (cells) {\n        return Model.fromJSON(cells);\n      }\n    }\n  }\n\n  Storage.fetch = fetch;\n\n  function clean() {\n    if (window.localStorage) {\n      localStorage.removeItem(LOCAL_STORAGE_KEY);\n    }\n  }\n\n  Storage.clean = clean;\n})(Storage || (Storage = {}));","map":{"version":3,"sources":["../../../src/addon/clipboard/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { ArrayExt } from '../../util';\nimport { Config } from '../../global/config';\nimport { Graph } from '../../graph/graph';\nimport { Model } from '../../model/model';\nexport class Clipboard {\n    constructor() {\n        this.cells = [];\n    }\n    copy(cells, graph, options = {}) {\n        this.options = Object.assign({}, options);\n        const model = Model.isModel(graph) ? graph : graph.model;\n        const cloned = model.cloneSubGraph(cells, options);\n        // sort asc by cell type\n        this.cells = ArrayExt.sortBy(Object.keys(cloned).map((key) => cloned[key]), (cell) => (cell.isEdge() ? 2 : 1));\n        this.serialize(options);\n    }\n    cut(cells, graph, options = {}) {\n        this.copy(cells, graph, options);\n        const model = Graph.isGraph(graph) ? graph.model : graph;\n        model.batchUpdate('cut', () => {\n            cells.forEach((cell) => cell.remove());\n        });\n    }\n    paste(graph, options = {}) {\n        const localOptions = Object.assign(Object.assign({}, this.options), options);\n        const { offset, edgeProps, nodeProps } = localOptions;\n        let dx = 20;\n        let dy = 20;\n        if (offset) {\n            dx = typeof offset === 'number' ? offset : offset.dx;\n            dy = typeof offset === 'number' ? offset : offset.dy;\n        }\n        this.deserialize(localOptions);\n        const cells = this.cells;\n        cells.forEach((cell) => {\n            cell.model = null;\n            cell.removeProp('zIndex');\n            if (dx || dy) {\n                cell.translate(dx, dy);\n            }\n            if (nodeProps && cell.isNode()) {\n                cell.prop(nodeProps);\n            }\n            if (edgeProps && cell.isEdge()) {\n                cell.prop(edgeProps);\n            }\n        });\n        const model = Graph.isGraph(graph) ? graph.model : graph;\n        model.batchUpdate('paste', () => {\n            model.addCells(this.cells);\n        });\n        this.copy(cells, graph, options);\n        return cells;\n    }\n    serialize(options) {\n        if (options.useLocalStorage !== false) {\n            Storage.save(this.cells);\n        }\n    }\n    deserialize(options) {\n        if (options.useLocalStorage) {\n            const cells = Storage.fetch();\n            if (cells) {\n                this.cells = cells;\n            }\n        }\n    }\n    isEmpty() {\n        return this.cells.length <= 0;\n    }\n    clean() {\n        this.options = {};\n        this.cells = [];\n        Storage.clean();\n    }\n}\nvar Storage;\n(function (Storage) {\n    const LOCAL_STORAGE_KEY = `${Config.prefixCls}.clipboard.cells`;\n    function save(cells) {\n        if (window.localStorage) {\n            const data = cells.map((cell) => cell.toJSON());\n            localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(data));\n        }\n    }\n    Storage.save = save;\n    function fetch() {\n        if (window.localStorage) {\n            const raw = localStorage.getItem(LOCAL_STORAGE_KEY);\n            const cells = raw ? JSON.parse(raw) : [];\n            if (cells) {\n                return Model.fromJSON(cells);\n            }\n        }\n    }\n    Storage.fetch = fetch;\n    function clean() {\n        if (window.localStorage) {\n            localStorage.removeItem(LOCAL_STORAGE_KEY);\n        }\n    }\n    Storage.clean = clean;\n})(Storage || (Storage = {}));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}