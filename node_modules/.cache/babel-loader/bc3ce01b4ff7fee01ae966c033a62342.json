{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { injectable } from 'mana-syringe';\nlet GraphMappingHelper = class GraphMappingHelper {\n  constructor() {\n    this.groupNodeMap = new Map(); // node 的 mapping\n\n    this.nodeMap = new Map();\n    this.nodeMappingRecord = new Map(); // port 的 mapping\n\n    this.portMap = new Map();\n    this.portMappingRecord = new Map(); // edge 的 mapping\n\n    this.edgeMap = new Map();\n    this.edgeMappingRecord = new Map(); // 区分类型\n\n    this.getNodesByType = nodes => {\n      return nodes.reduce((acc, node) => {\n        if (node.isGroup) {\n          acc.groupNodes.push(node);\n        } else {\n          acc.normalNodes.push(node);\n        }\n\n        return acc;\n      }, {\n        normalNodes: [],\n        groupNodes: []\n      });\n    }; // 增加已有节点\n\n\n    this.getNodePorts = node => {\n      if (Array.isArray(node.ports)) {\n        return node.ports;\n      }\n\n      if (node.ports && Array.isArray(node.ports.items)) {\n        return node.ports.items;\n      }\n\n      return [];\n    }; // 增加已有节点\n\n\n    this.addNodes = nodes => {\n      nodes.forEach(node => {\n        if (node.isGroup) {\n          this.groupNodeMap.set(node.id, node);\n        } else {\n          const ports = this.getNodePorts(node);\n          this.nodeMap.set(node.id, node);\n          ports.forEach(port => {\n            this.portMap.set(port.id, port);\n          });\n        }\n      });\n    }; // 增加已有edge\n\n\n    this.addEdge = edges => {\n      edges.forEach(edge => {\n        this.edgeMap.set(edge.id, edge);\n      });\n    }; // 添加node的映射关系\n\n\n    this.buildNodeMapping = (currentNode, nextNode) => {\n      const currentNodeId = currentNode.id || currentNode.originId;\n      const nextNodeId = nextNode.id;\n      this.nodeMappingRecord.set(currentNodeId, nextNodeId);\n      const ports = this.getNodePorts(currentNode);\n      ports.forEach((oldPort, index) => {\n        const newPort = nextNode.ports[index];\n\n        if (newPort) {\n          this.portMap.set(newPort.id, newPort);\n          this.portMappingRecord.set(oldPort.id, newPort.id);\n        }\n      });\n    }; // 更新Edge的NodeId和PortId\n\n\n    this.createEdgeBetweenNodes = edgeConfig => {\n      const {\n        source,\n        sourcePortId,\n        target,\n        targetPortId\n      } = edgeConfig;\n      return Object.assign(Object.assign({}, edgeConfig), {\n        source: this.nodeMappingRecord.get(source),\n        target: this.nodeMappingRecord.get(target),\n        sourcePortId: this.portMappingRecord.get(sourcePortId),\n        targetPortId: this.portMappingRecord.get(targetPortId)\n      });\n    }; // 更新GroupNode的NodeId\n\n\n    this.buildGroupRelations = groupNode => {\n      const {\n        groupChildren\n      } = groupNode;\n      const newGroupChildren = groupChildren.map(id => {\n        return this.nodeMappingRecord.get(id);\n      });\n      return Object.assign(Object.assign({}, groupNode), {\n        groupChildren: newGroupChildren\n      });\n    };\n  }\n\n};\nGraphMappingHelper = __decorate([injectable()], GraphMappingHelper);\nexport { GraphMappingHelper };","map":{"version":3,"sources":["../../src/command-contributions/mapping-service.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { injectable } from 'mana-syringe';\nlet GraphMappingHelper = class GraphMappingHelper {\n    constructor() {\n        this.groupNodeMap = new Map();\n        // node 的 mapping\n        this.nodeMap = new Map();\n        this.nodeMappingRecord = new Map();\n        // port 的 mapping\n        this.portMap = new Map();\n        this.portMappingRecord = new Map();\n        // edge 的 mapping\n        this.edgeMap = new Map();\n        this.edgeMappingRecord = new Map();\n        // 区分类型\n        this.getNodesByType = (nodes) => {\n            return nodes.reduce((acc, node) => {\n                if (node.isGroup) {\n                    acc.groupNodes.push(node);\n                }\n                else {\n                    acc.normalNodes.push(node);\n                }\n                return acc;\n            }, { normalNodes: [], groupNodes: [] });\n        };\n        // 增加已有节点\n        this.getNodePorts = (node) => {\n            if (Array.isArray(node.ports)) {\n                return node.ports;\n            }\n            if (node.ports && Array.isArray(node.ports.items)) {\n                return node.ports.items;\n            }\n            return [];\n        };\n        // 增加已有节点\n        this.addNodes = (nodes) => {\n            nodes.forEach(node => {\n                if (node.isGroup) {\n                    this.groupNodeMap.set(node.id, node);\n                }\n                else {\n                    const ports = this.getNodePorts(node);\n                    this.nodeMap.set(node.id, node);\n                    ports.forEach(port => {\n                        this.portMap.set(port.id, port);\n                    });\n                }\n            });\n        };\n        // 增加已有edge\n        this.addEdge = (edges) => {\n            edges.forEach(edge => {\n                this.edgeMap.set(edge.id, edge);\n            });\n        };\n        // 添加node的映射关系\n        this.buildNodeMapping = (currentNode, nextNode) => {\n            const currentNodeId = currentNode.id || currentNode.originId;\n            const nextNodeId = nextNode.id;\n            this.nodeMappingRecord.set(currentNodeId, nextNodeId);\n            const ports = this.getNodePorts(currentNode);\n            ports.forEach((oldPort, index) => {\n                const newPort = nextNode.ports[index];\n                if (newPort) {\n                    this.portMap.set(newPort.id, newPort);\n                    this.portMappingRecord.set(oldPort.id, newPort.id);\n                }\n            });\n        };\n        // 更新Edge的NodeId和PortId\n        this.createEdgeBetweenNodes = (edgeConfig) => {\n            const { source, sourcePortId, target, targetPortId } = edgeConfig;\n            return Object.assign(Object.assign({}, edgeConfig), { source: this.nodeMappingRecord.get(source), target: this.nodeMappingRecord.get(target), sourcePortId: this.portMappingRecord.get(sourcePortId), targetPortId: this.portMappingRecord.get(targetPortId) });\n        };\n        // 更新GroupNode的NodeId\n        this.buildGroupRelations = (groupNode) => {\n            const { groupChildren } = groupNode;\n            const newGroupChildren = groupChildren.map(id => {\n                return this.nodeMappingRecord.get(id);\n            });\n            return Object.assign(Object.assign({}, groupNode), { groupChildren: newGroupChildren });\n        };\n    }\n};\nGraphMappingHelper = __decorate([\n    injectable()\n], GraphMappingHelper);\nexport { GraphMappingHelper };\n//# sourceMappingURL=mapping-service.js.map"]},"metadata":{},"sourceType":"module"}