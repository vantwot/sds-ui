{"ast":null,"code":"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { InputNumber as AInputNumber } from 'antd';\n\nfunction transformValue(val) {\n  var result = Number(val);\n  return Number.isNaN(result) ? undefined : result;\n}\n\nexport var InputNumber = function (props) {\n  var disabled = props.disabled,\n      placeholder = props.placeholder,\n      value = props.value,\n      onChange = props.onChange;\n\n  var _a = useState(transformValue(value)),\n      innerValue = _a[0],\n      setInnerValue = _a[1];\n\n  var mountedRef = useRef(false);\n  useEffect(function () {\n    if (!mountedRef.current) {\n      mountedRef.current = true;\n    }\n\n    setInnerValue(transformValue(value));\n  }, [value]);\n  var onValueChange = useCallback(function (nextValue) {\n    setInnerValue(nextValue);\n\n    if (typeof onChange === 'function') {\n      if (nextValue === undefined) {\n        onChange('');\n      } else if (typeof transformValue(nextValue) === 'number') {\n        onChange(transformValue(nextValue));\n      }\n    }\n  }, [onChange]);\n  return React.createElement(AInputNumber, {\n    style: {\n      width: '100%'\n    },\n    size: \"small\",\n    placeholder: placeholder,\n    value: innerValue,\n    onChange: onValueChange,\n    disabled: disabled\n  });\n};","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/@ant-design/flowchart/es/components/canvas-json-schema-form/schema-form/control-map/float/input-number.js"],"names":["React","useState","useEffect","useRef","useCallback","InputNumber","AInputNumber","transformValue","val","result","Number","isNaN","undefined","props","disabled","placeholder","value","onChange","_a","innerValue","setInnerValue","mountedRef","current","onValueChange","nextValue","createElement","style","width","size"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,EAA6CC,WAA7C,QAAgE,OAAhE;AACA,SAASC,WAAW,IAAIC,YAAxB,QAA4C,MAA5C;;AACA,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;AACzB,MAAIC,MAAM,GAAGC,MAAM,CAACF,GAAD,CAAnB;AACA,SAAOE,MAAM,CAACC,KAAP,CAAaF,MAAb,IAAuBG,SAAvB,GAAmCH,MAA1C;AACH;;AACD,OAAO,IAAIJ,WAAW,GAAG,UAAUQ,KAAV,EAAiB;AACtC,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MAA+BC,WAAW,GAAGF,KAAK,CAACE,WAAnD;AAAA,MAAgEC,KAAK,GAAGH,KAAK,CAACG,KAA9E;AAAA,MAAqFC,QAAQ,GAAGJ,KAAK,CAACI,QAAtG;;AACA,MAAIC,EAAE,GAAGjB,QAAQ,CAACM,cAAc,CAACS,KAAD,CAAf,CAAjB;AAAA,MAA0CG,UAAU,GAAGD,EAAE,CAAC,CAAD,CAAzD;AAAA,MAA8DE,aAAa,GAAGF,EAAE,CAAC,CAAD,CAAhF;;AACA,MAAIG,UAAU,GAAGlB,MAAM,CAAC,KAAD,CAAvB;AACAD,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAI,CAACmB,UAAU,CAACC,OAAhB,EAAyB;AACrBD,MAAAA,UAAU,CAACC,OAAX,GAAqB,IAArB;AACH;;AACDF,IAAAA,aAAa,CAACb,cAAc,CAACS,KAAD,CAAf,CAAb;AACH,GALQ,EAKN,CAACA,KAAD,CALM,CAAT;AAMA,MAAIO,aAAa,GAAGnB,WAAW,CAAC,UAAUoB,SAAV,EAAqB;AACjDJ,IAAAA,aAAa,CAACI,SAAD,CAAb;;AACA,QAAI,OAAOP,QAAP,KAAoB,UAAxB,EAAoC;AAChC,UAAIO,SAAS,KAAKZ,SAAlB,EAA6B;AACzBK,QAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,OAFD,MAGK,IAAI,OAAOV,cAAc,CAACiB,SAAD,CAArB,KAAqC,QAAzC,EAAmD;AACpDP,QAAAA,QAAQ,CAACV,cAAc,CAACiB,SAAD,CAAf,CAAR;AACH;AACJ;AACJ,GAV8B,EAU5B,CAACP,QAAD,CAV4B,CAA/B;AAWA,SAAQjB,KAAK,CAACyB,aAAN,CAAoBnB,YAApB,EAAkC;AAAEoB,IAAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAT;AAA4BC,IAAAA,IAAI,EAAE,OAAlC;AAA2Cb,IAAAA,WAAW,EAAEA,WAAxD;AAAqEC,IAAAA,KAAK,EAAEG,UAA5E;AAAwFF,IAAAA,QAAQ,EAAEM,aAAlG;AAAiHT,IAAAA,QAAQ,EAAEA;AAA3H,GAAlC,CAAR;AACH,CAtBM","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { InputNumber as AInputNumber } from 'antd';\nfunction transformValue(val) {\n    var result = Number(val);\n    return Number.isNaN(result) ? undefined : result;\n}\nexport var InputNumber = function (props) {\n    var disabled = props.disabled, placeholder = props.placeholder, value = props.value, onChange = props.onChange;\n    var _a = useState(transformValue(value)), innerValue = _a[0], setInnerValue = _a[1];\n    var mountedRef = useRef(false);\n    useEffect(function () {\n        if (!mountedRef.current) {\n            mountedRef.current = true;\n        }\n        setInnerValue(transformValue(value));\n    }, [value]);\n    var onValueChange = useCallback(function (nextValue) {\n        setInnerValue(nextValue);\n        if (typeof onChange === 'function') {\n            if (nextValue === undefined) {\n                onChange('');\n            }\n            else if (typeof transformValue(nextValue) === 'number') {\n                onChange(transformValue(nextValue));\n            }\n        }\n    }, [onChange]);\n    return (React.createElement(AInputNumber, { style: { width: '100%' }, size: \"small\", placeholder: placeholder, value: innerValue, onChange: onValueChange, disabled: disabled }));\n};\n"]},"metadata":{},"sourceType":"module"}