{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { clone, deepMix, each, isArray, isObject, isString, upperFirst, throttle } from '@antv/util';\nimport Edge from '../../item/edge';\nimport Node from '../../item/node';\nimport Combo from '../../item/combo';\nimport { traverseTreeUp, traverseTree, getComboBBox } from '../../util/graphic';\nvar NODE = 'node';\nvar EDGE = 'edge';\nvar VEDGE = 'vedge';\nvar COMBO = 'combo';\nvar CFG_PREFIX = 'default';\nvar MAPPER_SUFFIX = 'Mapper';\nvar STATE_SUFFIX = 'stateStyles';\n\nvar ItemController =\n/** @class */\nfunction () {\n  function ItemController(graph) {\n    var _this = this;\n\n    this.edgeToBeUpdateMap = {};\n    /**\n     * 更新边限流，同时可以防止相同的边频繁重复更新\n     * */\n\n    this.throttleRefresh = throttle(function (_) {\n      var _a;\n\n      var graph = _this.graph;\n      if (!graph || graph.get('destroyed')) return;\n      var edgeToBeUpdateMap = _this.edgeToBeUpdateMap;\n      if (!edgeToBeUpdateMap || !((_a = Object.keys(edgeToBeUpdateMap)) === null || _a === void 0 ? void 0 : _a.length)) return;\n      Object.keys(edgeToBeUpdateMap).forEach(function (eid) {\n        var edge = edgeToBeUpdateMap[eid].edge;\n        if (!edge || edge.destroyed) return;\n        edge.refresh(edgeToBeUpdateMap[eid].updateType);\n      });\n      _this.edgeToBeUpdateMap = {};\n    }, 16, {\n      trailing: true,\n      leading: true\n    });\n    this.graph = graph;\n    this.destroyed = false;\n  }\n  /**\n   * 增加 Item 实例\n   *\n   * @param {ITEM_TYPE} type 实例类型，node 或 edge\n   * @param {(NodeConfig & EdgeConfig)} model 数据模型\n   * @returns {(Item)}\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.addItem = function (type, model) {\n    var graph = this.graph;\n    var vType = type === VEDGE ? EDGE : type;\n    var parent = graph.get(vType + \"Group\") || graph.get('group');\n    var upperType = upperFirst(vType);\n    var item = null; // 获取 this.get('styles') 中的值\n\n    var styles = graph.get(vType + upperFirst(STATE_SUFFIX)) || {};\n    var defaultModel = graph.get(CFG_PREFIX + upperType);\n\n    if (model[STATE_SUFFIX]) {\n      // 设置 this.get('styles') 中的值\n      styles = model[STATE_SUFFIX];\n    }\n\n    if (defaultModel) {\n      // 很多布局会直接修改原数据模型，所以不能用 merge 的形式，逐个写入原 model 中\n      each(defaultModel, function (val, cfg) {\n        if (isObject(val) && !isArray(val)) {\n          model[cfg] = deepMix({}, val, model[cfg]);\n        } else if (isArray(val)) {\n          model[cfg] = model[cfg] || clone(defaultModel[cfg]);\n        } else {\n          model[cfg] = model[cfg] || defaultModel[cfg];\n        }\n      });\n    }\n\n    var mapper = graph.get(vType + MAPPER_SUFFIX);\n\n    if (mapper) {\n      var mappedModel_1 = mapper(model);\n\n      if (mappedModel_1[STATE_SUFFIX]) {\n        // 设置 this.get('styles') 中的值\n        styles = mappedModel_1[STATE_SUFFIX];\n        delete mappedModel_1[STATE_SUFFIX];\n      } // 如果配置了 defaultEdge 或 defaultNode，则将默认配置的数据也合并进去\n\n\n      each(mappedModel_1, function (val, cfg) {\n        if (isObject(val) && !isArray(val)) {\n          model[cfg] = deepMix({}, model[cfg], val);\n        } else {\n          model[cfg] = mappedModel_1[cfg] || model[cfg];\n        }\n      });\n    }\n\n    graph.emit('beforeadditem', {\n      type: type,\n      model: model\n    });\n\n    if (type === EDGE || type === VEDGE) {\n      var source = void 0;\n      var target = void 0;\n      source = model.source; // eslint-disable-line prefer-destructuring\n\n      target = model.target; // eslint-disable-line prefer-destructuring\n\n      if (source && isString(source)) {\n        source = graph.findById(source);\n      }\n\n      if (target && isString(target)) {\n        target = graph.findById(target);\n      }\n\n      if (!source || !target) {\n        console.warn(\"The source or target node of edge \" + model.id + \" does not exist!\");\n        return;\n      }\n\n      if (source.getType && source.getType() === 'combo') {\n        model.isComboEdge = true; // graph.updateCombo(source as ICombo);\n      }\n\n      if (target.getType && target.getType() === 'combo') {\n        model.isComboEdge = true; // graph.updateCombo(target as ICombo);\n      }\n\n      item = new Edge({\n        model: model,\n        source: source,\n        target: target,\n        styles: styles,\n        linkCenter: graph.get('linkCenter'),\n        group: parent.addGroup()\n      });\n    } else if (type === NODE) {\n      item = new Node({\n        model: model,\n        styles: styles,\n        group: parent.addGroup()\n      });\n    } else if (type === COMBO) {\n      var children = model.children;\n      var comboBBox = getComboBBox(children, graph);\n      if (!isNaN(comboBBox.x)) model.x = comboBBox.x;else if (isNaN(model.x)) model.x = Math.random() * 100;\n      if (!isNaN(comboBBox.y)) model.y = comboBBox.y;else if (isNaN(model.y)) model.y = Math.random() * 100;\n      var comboGroup = parent.addGroup();\n      comboGroup.setZIndex(model.depth);\n      item = new Combo({\n        model: model,\n        styles: styles,\n        bbox: model.collapsed ? getComboBBox([], graph) : comboBBox,\n        group: comboGroup\n      });\n      var comboModel_1 = item.getModel();\n      (children || []).forEach(function (child) {\n        var childItem = graph.findById(child.id);\n        item.addChild(childItem);\n        child.depth = comboModel_1.depth + 2;\n      }); // collapse the combo if the collapsed is true in the model\n\n      if (model.collapsed) {\n        setTimeout(function () {\n          if (!item.destroyed) {\n            graph.collapseCombo(item);\n          }\n        }, 0);\n      }\n    }\n\n    if (item) {\n      graph.get(type + \"s\").push(item);\n      graph.get('itemMap')[item.get('id')] = item;\n      graph.emit('afteradditem', {\n        item: item,\n        model: model\n      }); // eslint-disable-next-line consistent-return\n\n      return item;\n    }\n  };\n  /**\n   * 更新节点或边\n   *\n   * @param {Item} item ID 或 实例\n   * @param {(EdgeConfig | Partial<NodeConfig>)} cfg 数据模型\n   * @returns\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.updateItem = function (item, cfg) {\n    var _this = this;\n\n    var _a, _b;\n\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    if (!item || item.destroyed) {\n      return;\n    } // 更新的 item 的类型\n\n\n    var type = '';\n    if (item.getType) type = item.getType();\n    var mapper = graph.get(type + MAPPER_SUFFIX);\n    var model = item.getModel();\n    var updateType = item.getUpdateType(cfg);\n\n    if (mapper) {\n      var result = deepMix({}, model, cfg);\n      var mappedModel = mapper(result); // 将 update 时候用户传入的参数与mapperModel做deepMix，以便复用之前设置的参数值\n\n      var newModel = deepMix({}, model, mappedModel, cfg);\n\n      if (mappedModel[STATE_SUFFIX]) {\n        item.set('styles', newModel[STATE_SUFFIX]);\n        delete newModel[STATE_SUFFIX];\n      }\n\n      each(newModel, function (val, key) {\n        cfg[key] = val;\n      });\n    } else {\n      // merge update传进来的对象参数，model中没有的数据不做处理，对象和字符串值也不做处理，直接替换原来的\n      each(cfg, function (val, key) {\n        if (model[key]) {\n          if (isObject(val) && !isArray(val)) {\n            cfg[key] = __assign(__assign({}, model[key]), cfg[key]);\n          }\n        }\n      });\n    } // emit beforeupdateitem 事件\n\n\n    graph.emit('beforeupdateitem', {\n      item: item,\n      cfg: cfg\n    });\n\n    if (type === EDGE) {\n      // 若是边要更新source || target, 为了不影响示例内部model，并且重新计算startPoint和endPoint，手动设置\n      if (cfg.source) {\n        var source = cfg.source;\n\n        if (isString(source)) {\n          source = graph.findById(source);\n        }\n\n        item.setSource(source);\n      }\n\n      if (cfg.target) {\n        var target = cfg.target;\n\n        if (isString(target)) {\n          target = graph.findById(target);\n        }\n\n        item.setTarget(target);\n      }\n\n      item.update(cfg);\n    } // item.update(cfg);\n\n\n    if (type === NODE || type === COMBO) {\n      item.update(cfg, updateType);\n      var edges_1 = item.getEdges();\n      var refreshEdge = (updateType === null || updateType === void 0 ? void 0 : updateType.includes('bbox')) || updateType === 'move';\n\n      if (type === NODE) {\n        if (updateType === 'move') {\n          each(edges_1, function (edge) {\n            _this.edgeToBeUpdateMap[edge.getID()] = {\n              edge: edge,\n              updateType: updateType\n            };\n\n            _this.throttleRefresh();\n          });\n        } else if (refreshEdge) {\n          each(edges_1, function (edge) {\n            edge.refresh(updateType);\n          });\n        }\n      } else if (refreshEdge && type === COMBO) {\n        var shapeFactory = item.get('shapeFactory');\n        var shapeType = model.type || 'circle';\n        var comboAnimate = model.animate === undefined || cfg.animate === undefined ? (_b = (_a = shapeFactory[shapeType]) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.animate : model.animate || cfg.animate;\n\n        if (comboAnimate) {\n          setTimeout(function () {\n            if (!item || item.destroyed) return;\n            var keyShape = item.getKeyShape();\n            if (!keyShape || keyShape.destroyed) return;\n            each(edges_1, function (edge) {\n              if (edge && !edge.destroyed) edge.refresh();\n            });\n          }, 201);\n        } else {\n          each(edges_1, function (edge) {\n            edge.refresh();\n          });\n        }\n      }\n    }\n\n    graph.emit('afterupdateitem', {\n      item: item,\n      cfg: cfg\n    });\n  };\n  /**\n   * 根据 combo 的子元素更新 combo 的位置及大小\n   *\n   * @param {ICombo} combo ID 或 实例\n   * @returns\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.updateCombo = function (combo, children) {\n    var _this = this;\n\n    var _a, _b;\n\n    var graph = this.graph;\n\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n\n    if (!combo || combo.destroyed) {\n      return;\n    }\n\n    var model = combo.getModel();\n    var comboBBox = getComboBBox(model.collapsed ? [] : children, graph);\n\n    var _c = model.collapsed ? getComboBBox(children, graph) : comboBBox,\n        comboX = _c.x,\n        comboY = _c.y;\n\n    combo.set('bbox', comboBBox);\n    combo.update({\n      x: comboX,\n      y: comboY\n    });\n    var shapeFactory = combo.get('shapeFactory');\n    var shapeType = model.type || 'circle';\n    var comboAnimate = model.animate === undefined ? (_b = (_a = shapeFactory[shapeType]) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.animate : model.animate;\n\n    if (comboAnimate) {\n      setTimeout(function () {\n        if (!combo || combo.destroyed) return;\n        var keyShape = combo.getKeyShape();\n        if (!keyShape || keyShape.destroyed) return;\n        combo.getShapeCfg(model); // 更新 combo 缓存的 size\n\n        _this.updateComboEdges(combo);\n      }, 201);\n    } else {\n      this.updateComboEdges(combo);\n    }\n  };\n\n  ItemController.prototype.updateComboEdges = function (combo) {\n    var combEdges = combo.getEdges() || [];\n\n    for (var i = 0; i < combEdges.length; i++) {\n      var edge = combEdges[i];\n\n      if (edge && !edge.destroyed) {\n        var edgeSF = edge.get('shapeFactory');\n        var edgeCfg = edge.getShapeCfg(edge.getModel());\n        var edgeGroup = edge.getContainer();\n        edgeGroup.clear();\n        var keyShape = edgeSF.draw(edgeCfg.type, edgeCfg, edgeGroup);\n        edge.set('keyShape', keyShape);\n        keyShape.set('isKeyShape', true);\n        keyShape.set('draggable', true);\n        edge.setOriginStyle();\n      }\n    }\n  };\n  /**\n   * 收起 combo，隐藏相关元素\n   */\n\n\n  ItemController.prototype.collapseCombo = function (combo) {\n    var graph = this.graph;\n\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n\n    var children = combo.getChildren();\n    children.nodes.forEach(function (node) {\n      graph.hideItem(node);\n    });\n    children.combos.forEach(function (c) {\n      graph.hideItem(c);\n    });\n  };\n  /**\n   * 展开 combo，相关元素出现\n   * 若子 combo 原先是收起状态，则保持它的收起状态\n   */\n\n\n  ItemController.prototype.expandCombo = function (combo) {\n    var graph = this.graph;\n\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n\n    var children = combo.getChildren();\n    children.nodes.forEach(function (node) {\n      graph.showItem(node);\n    });\n    children.combos.forEach(function (c) {\n      if (c.getModel().collapsed) {\n        c.show();\n      } else {\n        graph.showItem(c);\n      }\n    });\n  };\n  /**\n   * 删除指定的节点或边\n   *\n   * @param {Item} item item ID 或实例\n   * @returns {void}\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.removeItem = function (item) {\n    var _this = this;\n\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    if (!item || item.destroyed) {\n      return;\n    }\n\n    var itemModel = clone(item.getModel());\n    graph.emit('beforeremoveitem', {\n      item: itemModel\n    });\n    var type = '';\n    if (item.getType) type = item.getType();\n    var items = graph.get(type + \"s\");\n    var index = items.indexOf(item);\n    if (index > -1) items.splice(index, 1);\n\n    if (type === EDGE) {\n      var vitems = graph.get(\"v\" + type + \"s\");\n      var vindex = vitems.indexOf(item);\n      if (vindex > -1) vitems.splice(vindex, 1);\n    }\n\n    var itemId = item.get('id');\n    var itemMap = graph.get('itemMap');\n    delete itemMap[itemId];\n    var comboTrees = graph.get('comboTrees');\n    var id = item.get('id');\n\n    if (type === NODE) {\n      var comboId = item.getModel().comboId;\n\n      if (comboTrees && comboId) {\n        var brothers_1 = comboTrees;\n        var found_1 = false; // the flag to terminate the forEach circulation\n        // remove the node from the children array of its parent fromt he tree\n\n        comboTrees.forEach(function (ctree) {\n          if (found_1) return;\n          traverseTree(ctree, function (combo) {\n            if (combo.id === id && brothers_1) {\n              var bidx = brothers_1.indexOf(combo);\n              brothers_1.splice(bidx, 1);\n              found_1 = true;\n              return false; // terminate the traverse\n            }\n\n            brothers_1 = combo.children;\n            return true;\n          });\n        });\n      } // 若移除的是节点，需要将与之相连的边一同删除\n\n\n      var edges = item.getEdges();\n\n      for (var i = edges.length - 1; i >= 0; i--) {\n        graph.removeItem(edges[i], false);\n      }\n\n      if (comboId) graph.updateCombo(comboId);\n    } else if (type === COMBO) {\n      var parentId = item.getModel().parentId;\n      var comboInTree_1; // find the subtree rooted at the item to be removed\n\n      var found_2 = false; // the flag to terminate the forEach circulation\n\n      (comboTrees || []).forEach(function (ctree) {\n        if (found_2) return;\n        traverseTree(ctree, function (combo) {\n          if (combo.id === id) {\n            comboInTree_1 = combo;\n            found_2 = true;\n            return false; // terminate the traverse\n          }\n\n          return true;\n        });\n      });\n      comboInTree_1.removed = true;\n\n      if (comboInTree_1 && comboInTree_1.children) {\n        comboInTree_1.children.forEach(function (child) {\n          _this.removeItem(child.id);\n        });\n      } // 若移除的是 combo，需要将与之相连的边一同删除\n\n\n      var edges = item.getEdges();\n\n      for (var i = edges.length; i >= 0; i--) {\n        graph.removeItem(edges[i], false);\n      }\n\n      if (parentId) graph.updateCombo(parentId);\n    }\n\n    item.destroy();\n    graph.emit('afterremoveitem', {\n      item: itemModel,\n      type: type\n    });\n  };\n  /**\n   * 更新 item 状态\n   *\n   * @param {Item} item Item 实例\n   * @param {string} state 状态名称\n   * @param {boolean} value 是否启用状态或状态值\n   * @returns {void}\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.setItemState = function (item, state, value) {\n    var graph = this.graph;\n    var stateName = state;\n\n    if (isString(value)) {\n      stateName = state + \":\" + value;\n    } // 已经存在要设置的 state，或不存在 state 的样式为 undefined\n\n\n    if (item.hasState(stateName) === value && value || // 当该状态已经存在且现在需要设置为 true 时，不需要继续。当该状态不存在，且设置为 false 时，需要继续\n    isString(value) && item.hasState(stateName)) {\n      // 当该状态 value 是字符串，且已经存在该状态，不需要继续\n      return;\n    }\n\n    graph.emit('beforeitemstatechange', {\n      item: item,\n      state: stateName,\n      enabled: value\n    });\n    item.setState(state, value);\n    graph.autoPaint();\n    graph.emit('afteritemstatechange', {\n      item: item,\n      state: stateName,\n      enabled: value\n    });\n  };\n  /**\n   * 将指定状态的优先级提升为最高优先级\n   * @param {Item} item 元素id或元素实例\n   * @param state 状态名称\n   */\n\n\n  ItemController.prototype.priorityState = function (item, state) {\n    var graph = this.graph;\n    var currentItem = item;\n\n    if (isString(item)) {\n      currentItem = graph.findById(item);\n    } // 先取消已有的 state\n\n\n    this.setItemState(currentItem, state, false); // 再设置state，则此时该优先级为最高\n\n    this.setItemState(currentItem, state, true);\n  };\n  /**\n   * 清除所有指定的状态\n   *\n   * @param {Item} item Item 实例\n   * @param {string[]} states 状态名称集合\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.clearItemStates = function (item, states) {\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    graph.emit('beforeitemstatesclear', {\n      item: item,\n      states: states\n    });\n    item.clearStates(states);\n    graph.emit('afteritemstatesclear', {\n      item: item,\n      states: states\n    });\n  };\n  /**\n   * 刷新指定的 Item\n   *\n   * @param {Item} item Item ID 或 实例\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.refreshItem = function (item) {\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    graph.emit('beforeitemrefresh', {\n      item: item\n    }); // 调用 Item 的 refresh 方法，实现刷新功能\n\n    item.refresh();\n    graph.emit('afteritemrefresh', {\n      item: item\n    });\n  };\n  /**\n   * 根据 graph 上用 combos 数据生成的 comboTree 来增加所有 combos\n   *\n   * @param {ComboTree[]} comboTrees graph 上用 combos 数据生成的 comboTree\n   * @param {ComboConfig[]} comboModels combos 数据\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.addCombos = function (comboTrees, comboModels) {\n    var _this = this;\n\n    var graph = this.graph;\n    (comboTrees || []).forEach(function (ctree) {\n      traverseTreeUp(ctree, function (child) {\n        var comboModel;\n        comboModels.forEach(function (model) {\n          if (model.id === child.id) {\n            model.children = child.children;\n            model.depth = child.depth;\n            comboModel = model;\n          }\n        });\n\n        if (comboModel) {\n          _this.addItem('combo', comboModel);\n        }\n\n        return true;\n      });\n    });\n    var comboGroup = graph.get('comboGroup');\n    if (comboGroup) comboGroup.sort();\n  };\n  /**\n   * 改变Item的显示状态\n   *\n   * @param {Item} item Item ID 或 实例\n   * @param {boolean} visible 是否显示\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.changeItemVisibility = function (item, visible) {\n    var _this = this;\n\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    if (!item) {\n      console.warn('The item to be shown or hidden does not exist!');\n      return;\n    }\n\n    graph.emit('beforeitemvisibilitychange', {\n      item: item,\n      visible: visible\n    });\n    item.changeVisibility(visible);\n\n    if (item.getType && item.getType() === NODE) {\n      var edges = item.getEdges();\n      each(edges, function (edge) {\n        // 若隐藏节点，则将与之关联的边也隐藏\n        // 若显示节点，则将与之关联的边也显示，但是需要判断边两端的节点都是可见的\n        if (visible && !(edge.get('source').isVisible() && edge.get('target').isVisible())) {\n          return;\n        }\n\n        _this.changeItemVisibility(edge, visible);\n      });\n    } else if (item.getType && item.getType() === COMBO) {\n      var comboTrees = graph.get('comboTrees');\n      var id_1 = item.get('id');\n      var children_1 = [];\n      var found_3 = false; // flag the terminate the forEach\n\n      (comboTrees || []).forEach(function (ctree) {\n        if (found_3) return;\n        if (!ctree.children || ctree.children.length === 0) return;\n        traverseTree(ctree, function (combo) {\n          if (combo.id === id_1) {\n            children_1 = combo.children;\n            found_3 = true;\n            return false; // terminate the traverse\n          }\n\n          return true;\n        });\n      });\n\n      if (children_1 && (!visible || visible && !item.getModel().collapsed)) {\n        children_1.forEach(function (child) {\n          var childItem = graph.findById(child.id);\n\n          _this.changeItemVisibility(childItem, visible);\n        });\n      }\n\n      var edges = item.getEdges();\n      each(edges, function (edge) {\n        // 若隐藏 combo，则将与 combo 本身关联的边也隐藏\n        // 若显示 combo，则将与 combo 本身关联的边也显示，但是需要判断边两端的节点都是可见的\n        if (visible && !(edge.get('source').isVisible() && edge.get('target').isVisible())) {\n          return;\n        }\n\n        _this.changeItemVisibility(edge, visible);\n      });\n    }\n\n    graph.emit('afteritemvisibilitychange', {\n      item: item,\n      visible: visible\n    });\n    return item;\n  };\n\n  ItemController.prototype.destroy = function () {\n    this.graph = null;\n    this.destroyed = true;\n  };\n\n  return ItemController;\n}();\n\nexport default ItemController;","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/@antv/g6-core/es/graph/controller/item.js"],"names":["__assign","clone","deepMix","each","isArray","isObject","isString","upperFirst","throttle","Edge","Node","Combo","traverseTreeUp","traverseTree","getComboBBox","NODE","EDGE","VEDGE","COMBO","CFG_PREFIX","MAPPER_SUFFIX","STATE_SUFFIX","ItemController","graph","_this","edgeToBeUpdateMap","throttleRefresh","_","_a","get","Object","keys","length","forEach","eid","edge","destroyed","refresh","updateType","trailing","leading","prototype","addItem","type","model","vType","parent","upperType","item","styles","defaultModel","val","cfg","mapper","mappedModel_1","emit","source","target","findById","console","warn","id","getType","isComboEdge","linkCenter","group","addGroup","children","comboBBox","isNaN","x","Math","random","y","comboGroup","setZIndex","depth","bbox","collapsed","comboModel_1","getModel","child","childItem","addChild","setTimeout","collapseCombo","push","updateItem","_b","getUpdateType","result","mappedModel","newModel","set","key","setSource","setTarget","update","edges_1","getEdges","refreshEdge","includes","getID","shapeFactory","shapeType","comboAnimate","animate","undefined","options","keyShape","getKeyShape","updateCombo","combo","_c","comboX","comboY","getShapeCfg","updateComboEdges","combEdges","i","edgeSF","edgeCfg","edgeGroup","getContainer","clear","draw","setOriginStyle","getChildren","nodes","node","hideItem","combos","c","expandCombo","showItem","show","removeItem","itemModel","items","index","indexOf","splice","vitems","vindex","itemId","itemMap","comboTrees","comboId","brothers_1","found_1","ctree","bidx","edges","parentId","comboInTree_1","found_2","removed","destroy","setItemState","state","value","stateName","hasState","enabled","setState","autoPaint","priorityState","currentItem","clearItemStates","states","clearStates","refreshItem","addCombos","comboModels","comboModel","sort","changeItemVisibility","visible","changeVisibility","isVisible","id_1","children_1","found_3"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { clone, deepMix, each, isArray, isObject, isString, upperFirst, throttle } from '@antv/util';\nimport Edge from '../../item/edge';\nimport Node from '../../item/node';\nimport Combo from '../../item/combo';\nimport { traverseTreeUp, traverseTree, getComboBBox } from '../../util/graphic';\nvar NODE = 'node';\nvar EDGE = 'edge';\nvar VEDGE = 'vedge';\nvar COMBO = 'combo';\nvar CFG_PREFIX = 'default';\nvar MAPPER_SUFFIX = 'Mapper';\nvar STATE_SUFFIX = 'stateStyles';\n\nvar ItemController =\n/** @class */\nfunction () {\n  function ItemController(graph) {\n    var _this = this;\n\n    this.edgeToBeUpdateMap = {};\n    /**\n     * 更新边限流，同时可以防止相同的边频繁重复更新\n     * */\n\n    this.throttleRefresh = throttle(function (_) {\n      var _a;\n\n      var graph = _this.graph;\n      if (!graph || graph.get('destroyed')) return;\n      var edgeToBeUpdateMap = _this.edgeToBeUpdateMap;\n      if (!edgeToBeUpdateMap || !((_a = Object.keys(edgeToBeUpdateMap)) === null || _a === void 0 ? void 0 : _a.length)) return;\n      Object.keys(edgeToBeUpdateMap).forEach(function (eid) {\n        var edge = edgeToBeUpdateMap[eid].edge;\n        if (!edge || edge.destroyed) return;\n        edge.refresh(edgeToBeUpdateMap[eid].updateType);\n      });\n      _this.edgeToBeUpdateMap = {};\n    }, 16, {\n      trailing: true,\n      leading: true\n    });\n    this.graph = graph;\n    this.destroyed = false;\n  }\n  /**\n   * 增加 Item 实例\n   *\n   * @param {ITEM_TYPE} type 实例类型，node 或 edge\n   * @param {(NodeConfig & EdgeConfig)} model 数据模型\n   * @returns {(Item)}\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.addItem = function (type, model) {\n    var graph = this.graph;\n    var vType = type === VEDGE ? EDGE : type;\n    var parent = graph.get(vType + \"Group\") || graph.get('group');\n    var upperType = upperFirst(vType);\n    var item = null; // 获取 this.get('styles') 中的值\n\n    var styles = graph.get(vType + upperFirst(STATE_SUFFIX)) || {};\n    var defaultModel = graph.get(CFG_PREFIX + upperType);\n\n    if (model[STATE_SUFFIX]) {\n      // 设置 this.get('styles') 中的值\n      styles = model[STATE_SUFFIX];\n    }\n\n    if (defaultModel) {\n      // 很多布局会直接修改原数据模型，所以不能用 merge 的形式，逐个写入原 model 中\n      each(defaultModel, function (val, cfg) {\n        if (isObject(val) && !isArray(val)) {\n          model[cfg] = deepMix({}, val, model[cfg]);\n        } else if (isArray(val)) {\n          model[cfg] = model[cfg] || clone(defaultModel[cfg]);\n        } else {\n          model[cfg] = model[cfg] || defaultModel[cfg];\n        }\n      });\n    }\n\n    var mapper = graph.get(vType + MAPPER_SUFFIX);\n\n    if (mapper) {\n      var mappedModel_1 = mapper(model);\n\n      if (mappedModel_1[STATE_SUFFIX]) {\n        // 设置 this.get('styles') 中的值\n        styles = mappedModel_1[STATE_SUFFIX];\n        delete mappedModel_1[STATE_SUFFIX];\n      } // 如果配置了 defaultEdge 或 defaultNode，则将默认配置的数据也合并进去\n\n\n      each(mappedModel_1, function (val, cfg) {\n        if (isObject(val) && !isArray(val)) {\n          model[cfg] = deepMix({}, model[cfg], val);\n        } else {\n          model[cfg] = mappedModel_1[cfg] || model[cfg];\n        }\n      });\n    }\n\n    graph.emit('beforeadditem', {\n      type: type,\n      model: model\n    });\n\n    if (type === EDGE || type === VEDGE) {\n      var source = void 0;\n      var target = void 0;\n      source = model.source; // eslint-disable-line prefer-destructuring\n\n      target = model.target; // eslint-disable-line prefer-destructuring\n\n      if (source && isString(source)) {\n        source = graph.findById(source);\n      }\n\n      if (target && isString(target)) {\n        target = graph.findById(target);\n      }\n\n      if (!source || !target) {\n        console.warn(\"The source or target node of edge \" + model.id + \" does not exist!\");\n        return;\n      }\n\n      if (source.getType && source.getType() === 'combo') {\n        model.isComboEdge = true; // graph.updateCombo(source as ICombo);\n      }\n\n      if (target.getType && target.getType() === 'combo') {\n        model.isComboEdge = true; // graph.updateCombo(target as ICombo);\n      }\n\n      item = new Edge({\n        model: model,\n        source: source,\n        target: target,\n        styles: styles,\n        linkCenter: graph.get('linkCenter'),\n        group: parent.addGroup()\n      });\n    } else if (type === NODE) {\n      item = new Node({\n        model: model,\n        styles: styles,\n        group: parent.addGroup()\n      });\n    } else if (type === COMBO) {\n      var children = model.children;\n      var comboBBox = getComboBBox(children, graph);\n      if (!isNaN(comboBBox.x)) model.x = comboBBox.x;else if (isNaN(model.x)) model.x = Math.random() * 100;\n      if (!isNaN(comboBBox.y)) model.y = comboBBox.y;else if (isNaN(model.y)) model.y = Math.random() * 100;\n      var comboGroup = parent.addGroup();\n      comboGroup.setZIndex(model.depth);\n      item = new Combo({\n        model: model,\n        styles: styles,\n        bbox: model.collapsed ? getComboBBox([], graph) : comboBBox,\n        group: comboGroup\n      });\n      var comboModel_1 = item.getModel();\n      (children || []).forEach(function (child) {\n        var childItem = graph.findById(child.id);\n        item.addChild(childItem);\n        child.depth = comboModel_1.depth + 2;\n      }); // collapse the combo if the collapsed is true in the model\n\n      if (model.collapsed) {\n        setTimeout(function () {\n          if (!item.destroyed) {\n            graph.collapseCombo(item);\n          }\n        }, 0);\n      }\n    }\n\n    if (item) {\n      graph.get(type + \"s\").push(item);\n      graph.get('itemMap')[item.get('id')] = item;\n      graph.emit('afteradditem', {\n        item: item,\n        model: model\n      }); // eslint-disable-next-line consistent-return\n\n      return item;\n    }\n  };\n  /**\n   * 更新节点或边\n   *\n   * @param {Item} item ID 或 实例\n   * @param {(EdgeConfig | Partial<NodeConfig>)} cfg 数据模型\n   * @returns\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.updateItem = function (item, cfg) {\n    var _this = this;\n\n    var _a, _b;\n\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    if (!item || item.destroyed) {\n      return;\n    } // 更新的 item 的类型\n\n\n    var type = '';\n    if (item.getType) type = item.getType();\n    var mapper = graph.get(type + MAPPER_SUFFIX);\n    var model = item.getModel();\n    var updateType = item.getUpdateType(cfg);\n\n    if (mapper) {\n      var result = deepMix({}, model, cfg);\n      var mappedModel = mapper(result); // 将 update 时候用户传入的参数与mapperModel做deepMix，以便复用之前设置的参数值\n\n      var newModel = deepMix({}, model, mappedModel, cfg);\n\n      if (mappedModel[STATE_SUFFIX]) {\n        item.set('styles', newModel[STATE_SUFFIX]);\n        delete newModel[STATE_SUFFIX];\n      }\n\n      each(newModel, function (val, key) {\n        cfg[key] = val;\n      });\n    } else {\n      // merge update传进来的对象参数，model中没有的数据不做处理，对象和字符串值也不做处理，直接替换原来的\n      each(cfg, function (val, key) {\n        if (model[key]) {\n          if (isObject(val) && !isArray(val)) {\n            cfg[key] = __assign(__assign({}, model[key]), cfg[key]);\n          }\n        }\n      });\n    } // emit beforeupdateitem 事件\n\n\n    graph.emit('beforeupdateitem', {\n      item: item,\n      cfg: cfg\n    });\n\n    if (type === EDGE) {\n      // 若是边要更新source || target, 为了不影响示例内部model，并且重新计算startPoint和endPoint，手动设置\n      if (cfg.source) {\n        var source = cfg.source;\n\n        if (isString(source)) {\n          source = graph.findById(source);\n        }\n\n        item.setSource(source);\n      }\n\n      if (cfg.target) {\n        var target = cfg.target;\n\n        if (isString(target)) {\n          target = graph.findById(target);\n        }\n\n        item.setTarget(target);\n      }\n\n      item.update(cfg);\n    } // item.update(cfg);\n\n\n    if (type === NODE || type === COMBO) {\n      item.update(cfg, updateType);\n      var edges_1 = item.getEdges();\n      var refreshEdge = (updateType === null || updateType === void 0 ? void 0 : updateType.includes('bbox')) || updateType === 'move';\n\n      if (type === NODE) {\n        if (updateType === 'move') {\n          each(edges_1, function (edge) {\n            _this.edgeToBeUpdateMap[edge.getID()] = {\n              edge: edge,\n              updateType: updateType\n            };\n\n            _this.throttleRefresh();\n          });\n        } else if (refreshEdge) {\n          each(edges_1, function (edge) {\n            edge.refresh(updateType);\n          });\n        }\n      } else if (refreshEdge && type === COMBO) {\n        var shapeFactory = item.get('shapeFactory');\n        var shapeType = model.type || 'circle';\n        var comboAnimate = model.animate === undefined || cfg.animate === undefined ? (_b = (_a = shapeFactory[shapeType]) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.animate : model.animate || cfg.animate;\n\n        if (comboAnimate) {\n          setTimeout(function () {\n            if (!item || item.destroyed) return;\n            var keyShape = item.getKeyShape();\n            if (!keyShape || keyShape.destroyed) return;\n            each(edges_1, function (edge) {\n              if (edge && !edge.destroyed) edge.refresh();\n            });\n          }, 201);\n        } else {\n          each(edges_1, function (edge) {\n            edge.refresh();\n          });\n        }\n      }\n    }\n\n    graph.emit('afterupdateitem', {\n      item: item,\n      cfg: cfg\n    });\n  };\n  /**\n   * 根据 combo 的子元素更新 combo 的位置及大小\n   *\n   * @param {ICombo} combo ID 或 实例\n   * @returns\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.updateCombo = function (combo, children) {\n    var _this = this;\n\n    var _a, _b;\n\n    var graph = this.graph;\n\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n\n    if (!combo || combo.destroyed) {\n      return;\n    }\n\n    var model = combo.getModel();\n    var comboBBox = getComboBBox(model.collapsed ? [] : children, graph);\n\n    var _c = model.collapsed ? getComboBBox(children, graph) : comboBBox,\n        comboX = _c.x,\n        comboY = _c.y;\n\n    combo.set('bbox', comboBBox);\n    combo.update({\n      x: comboX,\n      y: comboY\n    });\n    var shapeFactory = combo.get('shapeFactory');\n    var shapeType = model.type || 'circle';\n    var comboAnimate = model.animate === undefined ? (_b = (_a = shapeFactory[shapeType]) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.animate : model.animate;\n\n    if (comboAnimate) {\n      setTimeout(function () {\n        if (!combo || combo.destroyed) return;\n        var keyShape = combo.getKeyShape();\n        if (!keyShape || keyShape.destroyed) return;\n        combo.getShapeCfg(model); // 更新 combo 缓存的 size\n\n        _this.updateComboEdges(combo);\n      }, 201);\n    } else {\n      this.updateComboEdges(combo);\n    }\n  };\n\n  ItemController.prototype.updateComboEdges = function (combo) {\n    var combEdges = combo.getEdges() || [];\n\n    for (var i = 0; i < combEdges.length; i++) {\n      var edge = combEdges[i];\n\n      if (edge && !edge.destroyed) {\n        var edgeSF = edge.get('shapeFactory');\n        var edgeCfg = edge.getShapeCfg(edge.getModel());\n        var edgeGroup = edge.getContainer();\n        edgeGroup.clear();\n        var keyShape = edgeSF.draw(edgeCfg.type, edgeCfg, edgeGroup);\n        edge.set('keyShape', keyShape);\n        keyShape.set('isKeyShape', true);\n        keyShape.set('draggable', true);\n        edge.setOriginStyle();\n      }\n    }\n  };\n  /**\n   * 收起 combo，隐藏相关元素\n   */\n\n\n  ItemController.prototype.collapseCombo = function (combo) {\n    var graph = this.graph;\n\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n\n    var children = combo.getChildren();\n    children.nodes.forEach(function (node) {\n      graph.hideItem(node);\n    });\n    children.combos.forEach(function (c) {\n      graph.hideItem(c);\n    });\n  };\n  /**\n   * 展开 combo，相关元素出现\n   * 若子 combo 原先是收起状态，则保持它的收起状态\n   */\n\n\n  ItemController.prototype.expandCombo = function (combo) {\n    var graph = this.graph;\n\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n\n    var children = combo.getChildren();\n    children.nodes.forEach(function (node) {\n      graph.showItem(node);\n    });\n    children.combos.forEach(function (c) {\n      if (c.getModel().collapsed) {\n        c.show();\n      } else {\n        graph.showItem(c);\n      }\n    });\n  };\n  /**\n   * 删除指定的节点或边\n   *\n   * @param {Item} item item ID 或实例\n   * @returns {void}\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.removeItem = function (item) {\n    var _this = this;\n\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    if (!item || item.destroyed) {\n      return;\n    }\n\n    var itemModel = clone(item.getModel());\n    graph.emit('beforeremoveitem', {\n      item: itemModel\n    });\n    var type = '';\n    if (item.getType) type = item.getType();\n    var items = graph.get(type + \"s\");\n    var index = items.indexOf(item);\n    if (index > -1) items.splice(index, 1);\n\n    if (type === EDGE) {\n      var vitems = graph.get(\"v\" + type + \"s\");\n      var vindex = vitems.indexOf(item);\n      if (vindex > -1) vitems.splice(vindex, 1);\n    }\n\n    var itemId = item.get('id');\n    var itemMap = graph.get('itemMap');\n    delete itemMap[itemId];\n    var comboTrees = graph.get('comboTrees');\n    var id = item.get('id');\n\n    if (type === NODE) {\n      var comboId = item.getModel().comboId;\n\n      if (comboTrees && comboId) {\n        var brothers_1 = comboTrees;\n        var found_1 = false; // the flag to terminate the forEach circulation\n        // remove the node from the children array of its parent fromt he tree\n\n        comboTrees.forEach(function (ctree) {\n          if (found_1) return;\n          traverseTree(ctree, function (combo) {\n            if (combo.id === id && brothers_1) {\n              var bidx = brothers_1.indexOf(combo);\n              brothers_1.splice(bidx, 1);\n              found_1 = true;\n              return false; // terminate the traverse\n            }\n\n            brothers_1 = combo.children;\n            return true;\n          });\n        });\n      } // 若移除的是节点，需要将与之相连的边一同删除\n\n\n      var edges = item.getEdges();\n\n      for (var i = edges.length - 1; i >= 0; i--) {\n        graph.removeItem(edges[i], false);\n      }\n\n      if (comboId) graph.updateCombo(comboId);\n    } else if (type === COMBO) {\n      var parentId = item.getModel().parentId;\n      var comboInTree_1; // find the subtree rooted at the item to be removed\n\n      var found_2 = false; // the flag to terminate the forEach circulation\n\n      (comboTrees || []).forEach(function (ctree) {\n        if (found_2) return;\n        traverseTree(ctree, function (combo) {\n          if (combo.id === id) {\n            comboInTree_1 = combo;\n            found_2 = true;\n            return false; // terminate the traverse\n          }\n\n          return true;\n        });\n      });\n      comboInTree_1.removed = true;\n\n      if (comboInTree_1 && comboInTree_1.children) {\n        comboInTree_1.children.forEach(function (child) {\n          _this.removeItem(child.id);\n        });\n      } // 若移除的是 combo，需要将与之相连的边一同删除\n\n\n      var edges = item.getEdges();\n\n      for (var i = edges.length; i >= 0; i--) {\n        graph.removeItem(edges[i], false);\n      }\n\n      if (parentId) graph.updateCombo(parentId);\n    }\n\n    item.destroy();\n    graph.emit('afterremoveitem', {\n      item: itemModel,\n      type: type\n    });\n  };\n  /**\n   * 更新 item 状态\n   *\n   * @param {Item} item Item 实例\n   * @param {string} state 状态名称\n   * @param {boolean} value 是否启用状态或状态值\n   * @returns {void}\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.setItemState = function (item, state, value) {\n    var graph = this.graph;\n    var stateName = state;\n\n    if (isString(value)) {\n      stateName = state + \":\" + value;\n    } // 已经存在要设置的 state，或不存在 state 的样式为 undefined\n\n\n    if (item.hasState(stateName) === value && value || // 当该状态已经存在且现在需要设置为 true 时，不需要继续。当该状态不存在，且设置为 false 时，需要继续\n    isString(value) && item.hasState(stateName)) {\n      // 当该状态 value 是字符串，且已经存在该状态，不需要继续\n      return;\n    }\n\n    graph.emit('beforeitemstatechange', {\n      item: item,\n      state: stateName,\n      enabled: value\n    });\n    item.setState(state, value);\n    graph.autoPaint();\n    graph.emit('afteritemstatechange', {\n      item: item,\n      state: stateName,\n      enabled: value\n    });\n  };\n  /**\n   * 将指定状态的优先级提升为最高优先级\n   * @param {Item} item 元素id或元素实例\n   * @param state 状态名称\n   */\n\n\n  ItemController.prototype.priorityState = function (item, state) {\n    var graph = this.graph;\n    var currentItem = item;\n\n    if (isString(item)) {\n      currentItem = graph.findById(item);\n    } // 先取消已有的 state\n\n\n    this.setItemState(currentItem, state, false); // 再设置state，则此时该优先级为最高\n\n    this.setItemState(currentItem, state, true);\n  };\n  /**\n   * 清除所有指定的状态\n   *\n   * @param {Item} item Item 实例\n   * @param {string[]} states 状态名称集合\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.clearItemStates = function (item, states) {\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    graph.emit('beforeitemstatesclear', {\n      item: item,\n      states: states\n    });\n    item.clearStates(states);\n    graph.emit('afteritemstatesclear', {\n      item: item,\n      states: states\n    });\n  };\n  /**\n   * 刷新指定的 Item\n   *\n   * @param {Item} item Item ID 或 实例\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.refreshItem = function (item) {\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    graph.emit('beforeitemrefresh', {\n      item: item\n    }); // 调用 Item 的 refresh 方法，实现刷新功能\n\n    item.refresh();\n    graph.emit('afteritemrefresh', {\n      item: item\n    });\n  };\n  /**\n   * 根据 graph 上用 combos 数据生成的 comboTree 来增加所有 combos\n   *\n   * @param {ComboTree[]} comboTrees graph 上用 combos 数据生成的 comboTree\n   * @param {ComboConfig[]} comboModels combos 数据\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.addCombos = function (comboTrees, comboModels) {\n    var _this = this;\n\n    var graph = this.graph;\n    (comboTrees || []).forEach(function (ctree) {\n      traverseTreeUp(ctree, function (child) {\n        var comboModel;\n        comboModels.forEach(function (model) {\n          if (model.id === child.id) {\n            model.children = child.children;\n            model.depth = child.depth;\n            comboModel = model;\n          }\n        });\n\n        if (comboModel) {\n          _this.addItem('combo', comboModel);\n        }\n\n        return true;\n      });\n    });\n    var comboGroup = graph.get('comboGroup');\n    if (comboGroup) comboGroup.sort();\n  };\n  /**\n   * 改变Item的显示状态\n   *\n   * @param {Item} item Item ID 或 实例\n   * @param {boolean} visible 是否显示\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.changeItemVisibility = function (item, visible) {\n    var _this = this;\n\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    if (!item) {\n      console.warn('The item to be shown or hidden does not exist!');\n      return;\n    }\n\n    graph.emit('beforeitemvisibilitychange', {\n      item: item,\n      visible: visible\n    });\n    item.changeVisibility(visible);\n\n    if (item.getType && item.getType() === NODE) {\n      var edges = item.getEdges();\n      each(edges, function (edge) {\n        // 若隐藏节点，则将与之关联的边也隐藏\n        // 若显示节点，则将与之关联的边也显示，但是需要判断边两端的节点都是可见的\n        if (visible && !(edge.get('source').isVisible() && edge.get('target').isVisible())) {\n          return;\n        }\n\n        _this.changeItemVisibility(edge, visible);\n      });\n    } else if (item.getType && item.getType() === COMBO) {\n      var comboTrees = graph.get('comboTrees');\n      var id_1 = item.get('id');\n      var children_1 = [];\n      var found_3 = false; // flag the terminate the forEach\n\n      (comboTrees || []).forEach(function (ctree) {\n        if (found_3) return;\n        if (!ctree.children || ctree.children.length === 0) return;\n        traverseTree(ctree, function (combo) {\n          if (combo.id === id_1) {\n            children_1 = combo.children;\n            found_3 = true;\n            return false; // terminate the traverse\n          }\n\n          return true;\n        });\n      });\n\n      if (children_1 && (!visible || visible && !item.getModel().collapsed)) {\n        children_1.forEach(function (child) {\n          var childItem = graph.findById(child.id);\n\n          _this.changeItemVisibility(childItem, visible);\n        });\n      }\n\n      var edges = item.getEdges();\n      each(edges, function (edge) {\n        // 若隐藏 combo，则将与 combo 本身关联的边也隐藏\n        // 若显示 combo，则将与 combo 本身关联的边也显示，但是需要判断边两端的节点都是可见的\n        if (visible && !(edge.get('source').isVisible() && edge.get('target').isVisible())) {\n          return;\n        }\n\n        _this.changeItemVisibility(edge, visible);\n      });\n    }\n\n    graph.emit('afteritemvisibilitychange', {\n      item: item,\n      visible: visible\n    });\n    return item;\n  };\n\n  ItemController.prototype.destroy = function () {\n    this.graph = null;\n    this.destroyed = true;\n  };\n\n  return ItemController;\n}();\n\nexport default ItemController;"]},"metadata":{},"sourceType":"module"}