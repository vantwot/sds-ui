{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Syringe } from 'mana-syringe';\nimport { IHookContribution } from '../hooks/interface';\nimport { disposableNoop } from '../common/utils';\nexport const CONFIG_TYPE = 'CommandConfig';\nexport const getDefaultContributions = () => {\n  return [];\n};\nexport class CommandConfig {\n  constructor() {\n    this.setCommandContributions = fn => {\n      this.getContributions = fn;\n    };\n\n    this.getCommandContributions = () => {\n      return this.getContributions();\n    };\n\n    this.registerHook = hooks => __awaiter(this, void 0, void 0, function* () {\n      if (this.registerHookFn) {\n        return this.registerHookFn(hooks);\n      }\n\n      return disposableNoop;\n    });\n\n    this.registerHookHub = registry => __awaiter(this, void 0, void 0, function* () {\n      if (this.registerHookHubFn) {\n        return this.registerHookHubFn(registry);\n      }\n\n      return disposableNoop;\n    });\n    /** 设置CONFIG类型 */\n\n\n    this.CONFIG_TYPE = CONFIG_TYPE;\n    /** set command hook fn */\n\n    this.setRegisterHookFn = fn => {\n      this.registerHookFn = fn;\n    };\n    /** 注册 command hook hub */\n\n\n    this.setRegisterHookHubFn = fn => {\n      this.registerHookHubFn = fn;\n    };\n    /** 获取config的所有配置*/\n\n\n    this.getConfig = () => __awaiter(this, void 0, void 0, function* () {\n      return {\n        registerHookFn: this.registerHookFn,\n        getContributions: this.getContributions,\n        CONFIG_TYPE: this.CONFIG_TYPE\n      };\n    });\n\n    this.getContributions = getDefaultContributions;\n  }\n\n}\n/** 提供一个工厂方法 */\n\nexport const createCommandConfig = () => {\n  return new CommandConfig();\n};\nexport const registerCommandConfig = (register, commandConfig) => {\n  register({\n    token: CommandConfig,\n    contrib: [IHookContribution],\n    lifecycle: Syringe.Lifecycle.singleton,\n    useDynamic: () => {\n      return commandConfig;\n    }\n  });\n};","map":{"version":3,"sources":["../../src/command-contributions/config.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,OAAT,QAAwB,cAAxB;AAEA,SAAS,iBAAT,QAAkC,oBAAlC;AAEA,SAAS,cAAT,QAA+B,iBAA/B;AAKA,OAAO,MAAM,WAAW,GAAG,eAApB;AAEP,OAAO,MAAM,uBAAuB,GAAG,MAAK;AAC1C,SAAO,EAAP;AACD,CAFM;AAQP,OAAM,MAAO,aAAP,CAAoB;AAGxB,EAAA,WAAA,GAAA;AAIA,SAAA,uBAAA,GAA2B,EAAD,IAAqC;AAC7D,WAAK,gBAAL,GAAwB,EAAxB;AACD,KAFD;;AAIA,SAAA,uBAAA,GAA0B,MAAK;AAC7B,aAAO,KAAK,gBAAL,EAAP;AACD,KAFD;;AAIA,SAAA,YAAA,GAAsB,KAAP,IAA2B,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACxC,UAAI,KAAK,cAAT,EAAyB;AACvB,eAAO,KAAK,cAAL,CAAoB,KAApB,CAAP;AACD;;AACD,aAAO,cAAP;AACD,KALyC,CAA1C;;AAOA,SAAA,eAAA,GAAyB,QAAP,IAA4C,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC5D,UAAI,KAAK,iBAAT,EAA4B;AAC1B,eAAO,KAAK,iBAAL,CAAuB,QAAvB,CAAP;AACD;;AACD,aAAO,cAAP;AACD,KAL6D,CAA9D;AAMA;;;AACS,SAAA,WAAA,GAAc,WAAd;AAIT;;AACA,SAAA,iBAAA,GAAqB,EAAD,IAAmC;AACrD,WAAK,cAAL,GAAsB,EAAtB;AACD,KAFD;AAKA;;;AACA,SAAA,oBAAA,GAAwB,EAAD,IAAsC;AAC3D,WAAK,iBAAL,GAAyB,EAAzB;AACD,KAFD;AAGA;;;AACA,SAAA,SAAA,GAAY,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACrB,aAAO;AACL,QAAA,cAAc,EAAE,KAAK,cADhB;AAEL,QAAA,gBAAgB,EAAE,KAAK,gBAFlB;AAGL,QAAA,WAAW,EAAE,KAAK;AAHb,OAAP;AAKD,KANsB,CAAvB;;AAxCE,SAAK,gBAAL,GAAwB,uBAAxB;AACD;;AALuB;AAqD1B;;AACA,OAAO,MAAM,mBAAmB,GAAG,MAAK;AACtC,SAAO,IAAI,aAAJ,EAAP;AACD,CAFM;AAIP,OAAO,MAAM,qBAAqB,GAAG,CAAC,QAAD,EAA6B,aAA7B,KAA6D;AAChG,EAAA,QAAQ,CAAgB;AACtB,IAAA,KAAK,EAAE,aADe;AAEtB,IAAA,OAAO,EAAE,CAAC,iBAAD,CAFa;AAGtB,IAAA,SAAS,EAAE,OAAO,CAAC,SAAR,CAAkB,SAHP;AAItB,IAAA,UAAU,EAAE,MAAK;AACf,aAAO,aAAP;AACD;AANqB,GAAhB,CAAR;AAQD,CATM","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Syringe } from 'mana-syringe';\nimport { IHookContribution } from '../hooks/interface';\nimport { disposableNoop } from '../common/utils';\nexport const CONFIG_TYPE = 'CommandConfig';\nexport const getDefaultContributions = () => {\n    return [];\n};\nexport class CommandConfig {\n    constructor() {\n        this.setCommandContributions = (fn) => {\n            this.getContributions = fn;\n        };\n        this.getCommandContributions = () => {\n            return this.getContributions();\n        };\n        this.registerHook = (hooks) => __awaiter(this, void 0, void 0, function* () {\n            if (this.registerHookFn) {\n                return this.registerHookFn(hooks);\n            }\n            return disposableNoop;\n        });\n        this.registerHookHub = (registry) => __awaiter(this, void 0, void 0, function* () {\n            if (this.registerHookHubFn) {\n                return this.registerHookHubFn(registry);\n            }\n            return disposableNoop;\n        });\n        /** 设置CONFIG类型 */\n        this.CONFIG_TYPE = CONFIG_TYPE;\n        /** set command hook fn */\n        this.setRegisterHookFn = (fn) => {\n            this.registerHookFn = fn;\n        };\n        /** 注册 command hook hub */\n        this.setRegisterHookHubFn = (fn) => {\n            this.registerHookHubFn = fn;\n        };\n        /** 获取config的所有配置*/\n        this.getConfig = () => __awaiter(this, void 0, void 0, function* () {\n            return {\n                registerHookFn: this.registerHookFn,\n                getContributions: this.getContributions,\n                CONFIG_TYPE: this.CONFIG_TYPE,\n            };\n        });\n        this.getContributions = getDefaultContributions;\n    }\n}\n/** 提供一个工厂方法 */\nexport const createCommandConfig = () => {\n    return new CommandConfig();\n};\nexport const registerCommandConfig = (register, commandConfig) => {\n    register({\n        token: CommandConfig,\n        contrib: [IHookContribution],\n        lifecycle: Syringe.Lifecycle.singleton,\n        useDynamic: () => {\n            return commandConfig;\n        },\n    });\n};\n//# sourceMappingURL=config.js.map"]},"metadata":{},"sourceType":"module"}