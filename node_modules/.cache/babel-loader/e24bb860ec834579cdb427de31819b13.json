{"ast":null,"code":"import _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { injectable } from 'mana-syringe';\n\nvar GraphMappingHelper = function GraphMappingHelper() {\n  var _this = this;\n\n  _classCallCheck(this, GraphMappingHelper);\n\n  this.groupNodeMap = new Map(); // node 的 mapping\n\n  this.nodeMap = new Map();\n  this.nodeMappingRecord = new Map(); // port 的 mapping\n\n  this.portMap = new Map();\n  this.portMappingRecord = new Map(); // edge 的 mapping\n\n  this.edgeMap = new Map();\n  this.edgeMappingRecord = new Map(); // 区分类型\n\n  this.getNodesByType = function (nodes) {\n    return nodes.reduce(function (acc, node) {\n      if (node.isGroup) {\n        acc.groupNodes.push(node);\n      } else {\n        acc.normalNodes.push(node);\n      }\n\n      return acc;\n    }, {\n      normalNodes: [],\n      groupNodes: []\n    });\n  }; // 增加已有节点\n\n\n  this.getNodePorts = function (node) {\n    if (Array.isArray(node.ports)) {\n      return node.ports;\n    }\n\n    if (node.ports && Array.isArray(node.ports.items)) {\n      return node.ports.items;\n    }\n\n    return [];\n  }; // 增加已有节点\n\n\n  this.addNodes = function (nodes) {\n    nodes.forEach(function (node) {\n      if (node.isGroup) {\n        _this.groupNodeMap.set(node.id, node);\n      } else {\n        var ports = _this.getNodePorts(node);\n\n        _this.nodeMap.set(node.id, node);\n\n        ports.forEach(function (port) {\n          _this.portMap.set(port.id, port);\n        });\n      }\n    });\n  }; // 增加已有edge\n\n\n  this.addEdge = function (edges) {\n    edges.forEach(function (edge) {\n      _this.edgeMap.set(edge.id, edge);\n    });\n  }; // 添加node的映射关系\n\n\n  this.buildNodeMapping = function (currentNode, nextNode) {\n    var currentNodeId = currentNode.id || currentNode.originId;\n    var nextNodeId = nextNode.id;\n\n    _this.nodeMappingRecord.set(currentNodeId, nextNodeId);\n\n    var ports = _this.getNodePorts(currentNode);\n\n    ports.forEach(function (oldPort, index) {\n      var newPort = nextNode.ports[index];\n\n      if (newPort) {\n        _this.portMap.set(newPort.id, newPort);\n\n        _this.portMappingRecord.set(oldPort.id, newPort.id);\n      }\n    });\n  }; // 更新Edge的NodeId和PortId\n\n\n  this.createEdgeBetweenNodes = function (edgeConfig) {\n    var source = edgeConfig.source,\n        sourcePortId = edgeConfig.sourcePortId,\n        target = edgeConfig.target,\n        targetPortId = edgeConfig.targetPortId;\n    return Object.assign(Object.assign({}, edgeConfig), {\n      source: _this.nodeMappingRecord.get(source),\n      target: _this.nodeMappingRecord.get(target),\n      sourcePortId: _this.portMappingRecord.get(sourcePortId),\n      targetPortId: _this.portMappingRecord.get(targetPortId)\n    });\n  }; // 更新GroupNode的NodeId\n\n\n  this.buildGroupRelations = function (groupNode) {\n    var groupChildren = groupNode.groupChildren;\n    var newGroupChildren = groupChildren.map(function (id) {\n      return _this.nodeMappingRecord.get(id);\n    });\n    return Object.assign(Object.assign({}, groupNode), {\n      groupChildren: newGroupChildren\n    });\n  };\n};\n\nGraphMappingHelper = __decorate([injectable()], GraphMappingHelper);\nexport { GraphMappingHelper };","map":{"version":3,"sources":["../../src/command-contributions/mapping-service.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { injectable } from 'mana-syringe';\nlet GraphMappingHelper = class GraphMappingHelper {\n    constructor() {\n        this.groupNodeMap = new Map();\n        // node 的 mapping\n        this.nodeMap = new Map();\n        this.nodeMappingRecord = new Map();\n        // port 的 mapping\n        this.portMap = new Map();\n        this.portMappingRecord = new Map();\n        // edge 的 mapping\n        this.edgeMap = new Map();\n        this.edgeMappingRecord = new Map();\n        // 区分类型\n        this.getNodesByType = (nodes) => {\n            return nodes.reduce((acc, node) => {\n                if (node.isGroup) {\n                    acc.groupNodes.push(node);\n                }\n                else {\n                    acc.normalNodes.push(node);\n                }\n                return acc;\n            }, { normalNodes: [], groupNodes: [] });\n        };\n        // 增加已有节点\n        this.getNodePorts = (node) => {\n            if (Array.isArray(node.ports)) {\n                return node.ports;\n            }\n            if (node.ports && Array.isArray(node.ports.items)) {\n                return node.ports.items;\n            }\n            return [];\n        };\n        // 增加已有节点\n        this.addNodes = (nodes) => {\n            nodes.forEach(node => {\n                if (node.isGroup) {\n                    this.groupNodeMap.set(node.id, node);\n                }\n                else {\n                    const ports = this.getNodePorts(node);\n                    this.nodeMap.set(node.id, node);\n                    ports.forEach(port => {\n                        this.portMap.set(port.id, port);\n                    });\n                }\n            });\n        };\n        // 增加已有edge\n        this.addEdge = (edges) => {\n            edges.forEach(edge => {\n                this.edgeMap.set(edge.id, edge);\n            });\n        };\n        // 添加node的映射关系\n        this.buildNodeMapping = (currentNode, nextNode) => {\n            const currentNodeId = currentNode.id || currentNode.originId;\n            const nextNodeId = nextNode.id;\n            this.nodeMappingRecord.set(currentNodeId, nextNodeId);\n            const ports = this.getNodePorts(currentNode);\n            ports.forEach((oldPort, index) => {\n                const newPort = nextNode.ports[index];\n                if (newPort) {\n                    this.portMap.set(newPort.id, newPort);\n                    this.portMappingRecord.set(oldPort.id, newPort.id);\n                }\n            });\n        };\n        // 更新Edge的NodeId和PortId\n        this.createEdgeBetweenNodes = (edgeConfig) => {\n            const { source, sourcePortId, target, targetPortId } = edgeConfig;\n            return Object.assign(Object.assign({}, edgeConfig), { source: this.nodeMappingRecord.get(source), target: this.nodeMappingRecord.get(target), sourcePortId: this.portMappingRecord.get(sourcePortId), targetPortId: this.portMappingRecord.get(targetPortId) });\n        };\n        // 更新GroupNode的NodeId\n        this.buildGroupRelations = (groupNode) => {\n            const { groupChildren } = groupNode;\n            const newGroupChildren = groupChildren.map(id => {\n                return this.nodeMappingRecord.get(id);\n            });\n            return Object.assign(Object.assign({}, groupNode), { groupChildren: newGroupChildren });\n        };\n    }\n};\nGraphMappingHelper = __decorate([\n    injectable()\n], GraphMappingHelper);\nexport { GraphMappingHelper };\n//# sourceMappingURL=mapping-service.js.map"]},"metadata":{},"sourceType":"module"}