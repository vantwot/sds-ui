{"ast":null,"code":"import { Util, Config } from '../global';\nimport { ArrayExt, FunctionExt, Dom, Vector } from '../util';\nimport { Rectangle, Point } from '../geometry';\nimport { Cell } from '../model/cell';\nimport { CellView } from './cell';\nimport { Markup } from './markup';\nexport class NodeView extends CellView {\n  constructor() {\n    super(...arguments);\n    this.scalableNode = null;\n    this.rotatableNode = null;\n    this.scalableSelector = 'scalable';\n    this.rotatableSelector = 'rotatable';\n    this.defaultPortMarkup = Markup.getPortMarkup();\n    this.defaultPortLabelMarkup = Markup.getPortLabelMarkup();\n    this.defaultPortContainerMarkup = Markup.getPortContainerMarkup();\n    this.portsCache = {}; // #endregion\n  }\n\n  get [Symbol.toStringTag]() {\n    return NodeView.toStringTag;\n  }\n\n  getContainerClassName() {\n    const classList = [super.getContainerClassName(), this.prefixClassName('node')];\n\n    if (!this.can('nodeMovable')) {\n      classList.push(this.prefixClassName('node-immovable'));\n    }\n\n    return classList.join(' ');\n  }\n\n  updateClassName(e) {\n    const target = e.target;\n\n    if (target.hasAttribute('magnet')) {\n      // port\n      const className = this.prefixClassName('port-unconnectable');\n\n      if (this.can('magnetConnectable')) {\n        Dom.removeClass(target, className);\n      } else {\n        Dom.addClass(target, className);\n      }\n    } else {\n      // node\n      const className = this.prefixClassName('node-immovable');\n\n      if (this.can('nodeMovable')) {\n        this.removeClass(className);\n      } else {\n        this.addClass(className);\n      }\n    }\n  }\n\n  isNodeView() {\n    return true;\n  }\n\n  confirmUpdate(flag) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let ret = flag;\n\n    if (this.hasAction(ret, 'ports')) {\n      this.removePorts();\n      this.cleanPortsCache();\n    }\n\n    if (this.hasAction(ret, 'render')) {\n      this.render();\n      ret = this.removeAction(ret, ['render', 'update', 'resize', 'translate', 'rotate', 'ports', 'tools']);\n    } else {\n      ret = this.handleAction(ret, 'resize', () => this.resize(options), 'update');\n      ret = this.handleAction(ret, 'update', () => this.update(), // `update()` will render ports when useCSSSelectors are enabled\n      Config.useCSSSelector ? 'ports' : null);\n      ret = this.handleAction(ret, 'translate', () => this.translate());\n      ret = this.handleAction(ret, 'rotate', () => this.rotate());\n      ret = this.handleAction(ret, 'ports', () => this.renderPorts());\n      ret = this.handleAction(ret, 'tools', () => this.renderTools());\n    }\n\n    return ret;\n  }\n\n  update(partialAttrs) {\n    this.cleanCache(); // When CSS selector strings are used, make sure no rule matches port nodes.\n\n    if (Config.useCSSSelector) {\n      this.removePorts();\n    }\n\n    const node = this.cell;\n    const size = node.getSize();\n    const attrs = node.getAttrs();\n    this.updateAttrs(this.container, attrs, {\n      attrs: partialAttrs === attrs ? null : partialAttrs,\n      rootBBox: new Rectangle(0, 0, size.width, size.height),\n      selectors: this.selectors,\n      scalableNode: this.scalableNode,\n      rotatableNode: this.rotatableNode\n    });\n\n    if (Config.useCSSSelector) {\n      this.renderPorts();\n    }\n  }\n\n  renderMarkup() {\n    const markup = this.cell.markup;\n\n    if (markup) {\n      if (typeof markup === 'string') {\n        return this.renderStringMarkup(markup);\n      }\n\n      return this.renderJSONMarkup(markup);\n    }\n\n    throw new TypeError('Invalid node markup.');\n  }\n\n  renderJSONMarkup(markup) {\n    const ret = this.parseJSONMarkup(markup, this.container);\n\n    const one = elems => Array.isArray(elems) ? elems[0] : elems;\n\n    this.selectors = ret.selectors;\n    this.rotatableNode = one(this.selectors[this.rotatableSelector]);\n    this.scalableNode = one(this.selectors[this.scalableSelector]);\n    this.container.appendChild(ret.fragment);\n  }\n\n  renderStringMarkup(markup) {\n    Dom.append(this.container, Vector.toNodes(Vector.createVectors(markup)));\n    this.rotatableNode = Dom.findOne(this.container, `.${this.rotatableSelector}`);\n    this.scalableNode = Dom.findOne(this.container, `.${this.scalableSelector}`);\n    this.selectors = {};\n\n    if (this.rootSelector) {\n      this.selectors[this.rootSelector] = this.container;\n    }\n  }\n\n  render() {\n    this.empty();\n    this.renderMarkup();\n\n    if (this.scalableNode) {\n      // Double update is necessary for elements with the scalable group only\n      // Note the `resize()` triggers the other `update`.\n      this.update();\n    }\n\n    this.resize();\n\n    if (this.rotatableNode) {\n      this.rotate();\n      this.translate();\n    } else {\n      this.updateTransform();\n    }\n\n    if (!Config.useCSSSelector) {\n      this.renderPorts();\n    }\n\n    this.renderTools();\n    return this;\n  }\n\n  resize() {\n    let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (this.scalableNode) {\n      return this.updateSize(opt);\n    }\n\n    if (this.cell.getAngle()) {\n      this.rotate();\n    }\n\n    this.update();\n  }\n\n  translate() {\n    if (this.rotatableNode) {\n      return this.updateTranslation();\n    }\n\n    this.updateTransform();\n  }\n\n  rotate() {\n    if (this.rotatableNode) {\n      this.updateRotation(); // It's necessary to call the update for the nodes outside\n      // the rotatable group referencing nodes inside the group\n\n      this.update();\n      return;\n    }\n\n    this.updateTransform();\n  }\n\n  getTranslationString() {\n    const position = this.cell.getPosition();\n    return `translate(${position.x},${position.y})`;\n  }\n\n  getRotationString() {\n    const angle = this.cell.getAngle();\n\n    if (angle) {\n      const size = this.cell.getSize();\n      return `rotate(${angle},${size.width / 2},${size.height / 2})`;\n    }\n  }\n\n  updateTransform() {\n    let transform = this.getTranslationString();\n    const rot = this.getRotationString();\n\n    if (rot) {\n      transform += ` ${rot}`;\n    }\n\n    this.container.setAttribute('transform', transform);\n  }\n\n  updateRotation() {\n    if (this.rotatableNode != null) {\n      const transform = this.getRotationString();\n\n      if (transform != null) {\n        this.rotatableNode.setAttribute('transform', transform);\n      } else {\n        this.rotatableNode.removeAttribute('transform');\n      }\n    }\n  }\n\n  updateTranslation() {\n    this.container.setAttribute('transform', this.getTranslationString());\n  }\n\n  updateSize() {\n    let opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const cell = this.cell;\n    const size = cell.getSize();\n    const angle = cell.getAngle();\n    const scalableNode = this.scalableNode; // Getting scalable group's bbox.\n    // Due to a bug in webkit's native SVG .getBBox implementation, the\n    // bbox of groups with path children includes the paths' control points.\n    // To work around the issue, we need to check whether there are any path\n    // elements inside the scalable group.\n\n    let recursive = false;\n\n    if (scalableNode.getElementsByTagName('path').length > 0) {\n      // If scalable has at least one descendant that is a path, we need\n      // toswitch to recursive bbox calculation. Otherwise, group bbox\n      // calculation works and so we can use the (faster) native function.\n      recursive = true;\n    }\n\n    const scalableBBox = Dom.getBBox(scalableNode, {\n      recursive\n    }); // Make sure `scalableBbox.width` and `scalableBbox.height` are not zero\n    // which can happen if the element does not have any content.\n\n    const sx = size.width / (scalableBBox.width || 1);\n    const sy = size.height / (scalableBBox.height || 1);\n    scalableNode.setAttribute('transform', `scale(${sx},${sy})`); // Now the interesting part. The goal is to be able to store the object geometry via just `x`, `y`, `angle`, `width` and `height`\n    // Order of transformations is significant but we want to reconstruct the object always in the order:\n    // resize(), rotate(), translate() no matter of how the object was transformed. For that to work,\n    // we must adjust the `x` and `y` coordinates of the object whenever we resize it (because the origin of the\n    // rotation changes). The new `x` and `y` coordinates are computed by canceling the previous rotation\n    // around the center of the resized object (which is a different origin then the origin of the previous rotation)\n    // and getting the top-left corner of the resulting object. Then we clean up the rotation back to what it originally was.\n    // Cancel the rotation but now around a different origin, which is the center of the scaled object.\n\n    const rotatableNode = this.rotatableNode;\n\n    if (rotatableNode != null) {\n      const transform = rotatableNode.getAttribute('transform');\n\n      if (transform) {\n        rotatableNode.setAttribute('transform', `${transform} rotate(${-angle},${size.width / 2},${size.height / 2})`);\n        const rotatableBBox = Dom.getBBox(scalableNode, {\n          target: this.graph.view.stage\n        }); // Store new x, y and perform rotate() again against the new rotation origin.\n\n        cell.prop('position', {\n          x: rotatableBBox.x,\n          y: rotatableBBox.y\n        }, Object.assign({\n          updated: true\n        }, opt));\n        this.translate();\n        this.rotate();\n      }\n    } // Update must always be called on non-rotated element. Otherwise,\n    // relative positioning would work with wrong (rotated) bounding boxes.\n\n\n    this.update();\n  } // #region ports\n\n\n  findPortElem(portId, selector) {\n    const cache = portId ? this.portsCache[portId] : null;\n\n    if (!cache) {\n      return null;\n    }\n\n    const portRoot = cache.portContentElement;\n    const portSelectors = cache.portContentSelectors || {};\n    return this.findOne(selector, portRoot, portSelectors);\n  }\n\n  initializePorts() {\n    this.cleanPortsCache();\n  }\n\n  refreshPorts() {\n    this.removePorts();\n    this.cleanPortsCache();\n    this.renderPorts();\n  }\n\n  cleanPortsCache() {\n    this.portsCache = {};\n  }\n\n  removePorts() {\n    Object.keys(this.portsCache).forEach(portId => {\n      const cached = this.portsCache[portId];\n      Dom.remove(cached.portElement);\n    });\n  }\n\n  renderPorts() {\n    const container = this.getPortsContainer(); // References to rendered elements without z-index\n\n    const references = [];\n    container.childNodes.forEach(child => {\n      references.push(child);\n    });\n    const portsGropsByZ = ArrayExt.groupBy(this.cell.getParsedPorts(), 'zIndex');\n    const autoZIndexKey = 'auto'; // render non-z first\n\n    if (portsGropsByZ[autoZIndexKey]) {\n      portsGropsByZ[autoZIndexKey].forEach(port => {\n        const portElement = this.getPortElement(port);\n        container.append(portElement);\n        references.push(portElement);\n      });\n    }\n\n    Object.keys(portsGropsByZ).forEach(key => {\n      if (key !== autoZIndexKey) {\n        const zIndex = parseInt(key, 10);\n        this.appendPorts(portsGropsByZ[key], zIndex, references);\n      }\n    });\n    this.updatePorts();\n  }\n\n  getPortsContainer() {\n    return this.rotatableNode || this.container;\n  }\n\n  appendPorts(ports, zIndex, refs) {\n    const elems = ports.map(p => this.getPortElement(p));\n\n    if (refs[zIndex] || zIndex < 0) {\n      Dom.before(refs[Math.max(zIndex, 0)], elems);\n    } else {\n      Dom.append(this.getPortsContainer(), elems);\n    }\n  }\n\n  getPortElement(port) {\n    const cached = this.portsCache[port.id];\n\n    if (cached) {\n      return cached.portElement;\n    }\n\n    return this.createPortElement(port);\n  }\n\n  createPortElement(port) {\n    let renderResult = Markup.renderMarkup(this.getPortContainerMarkup());\n    const portElement = renderResult.elem;\n\n    if (portElement == null) {\n      throw new Error('Invalid port container markup.');\n    }\n\n    renderResult = Markup.renderMarkup(this.getPortMarkup(port));\n    const portContentElement = renderResult.elem;\n    const portContentSelectors = renderResult.selectors;\n\n    if (portContentElement == null) {\n      throw new Error('Invalid port markup.');\n    }\n\n    this.setAttrs({\n      port: port.id,\n      'port-group': port.group\n    }, portContentElement);\n    renderResult = Markup.renderMarkup(this.getPortLabelMarkup(port.label));\n    const portLabelElement = renderResult.elem;\n    const portLabelSelectors = renderResult.selectors;\n\n    if (portLabelElement == null) {\n      throw new Error('Invalid port label markup.');\n    }\n\n    let portSelectors;\n\n    if (portContentSelectors && portLabelSelectors) {\n      // eslint-disable-next-line\n      for (const key in portLabelSelectors) {\n        if (portContentSelectors[key] && key !== this.rootSelector) {\n          throw new Error('Selectors within port must be unique.');\n        }\n      }\n\n      portSelectors = Object.assign(Object.assign({}, portContentSelectors), portLabelSelectors);\n    } else {\n      portSelectors = portContentSelectors || portLabelSelectors;\n    }\n\n    Dom.addClass(portElement, 'x6-port');\n    Dom.addClass(portContentElement, 'x6-port-body');\n    Dom.addClass(portLabelElement, 'x6-port-label');\n    portElement.appendChild(portContentElement);\n    portElement.appendChild(portLabelElement);\n    this.portsCache[port.id] = {\n      portElement,\n      portSelectors,\n      portLabelElement,\n      portLabelSelectors,\n      portContentElement,\n      portContentSelectors\n    };\n    this.graph.hook.onPortRendered({\n      port,\n      node: this.cell,\n      container: portElement,\n      selectors: portSelectors,\n      labelContainer: portLabelElement,\n      labelSelectors: portLabelSelectors,\n      contentContainer: portContentElement,\n      contentSelectors: portContentSelectors\n    });\n    return portElement;\n  }\n\n  updatePorts() {\n    // Layout ports without group\n    this.updatePortGroup(); // Layout ports with explicit group\n\n    const groups = this.cell.getParsedGroups();\n    Object.keys(groups).forEach(groupName => this.updatePortGroup(groupName));\n  }\n\n  updatePortGroup(groupName) {\n    const bbox = Rectangle.fromSize(this.cell.getSize());\n    const metrics = this.cell.getPortsLayoutByGroup(groupName, bbox);\n\n    for (let i = 0, n = metrics.length; i < n; i += 1) {\n      const metric = metrics[i];\n      const portId = metric.portId;\n      const cached = this.portsCache[portId] || {};\n      const portLayout = metric.portLayout;\n      this.applyPortTransform(cached.portElement, portLayout);\n\n      if (metric.portAttrs != null) {\n        const options = {\n          selectors: cached.portSelectors || {}\n        };\n\n        if (metric.portSize) {\n          options.rootBBox = Rectangle.fromSize(metric.portSize);\n        }\n\n        this.updateAttrs(cached.portElement, metric.portAttrs, options);\n      }\n\n      const labelLayout = metric.labelLayout;\n\n      if (labelLayout) {\n        this.applyPortTransform(cached.portLabelElement, labelLayout, -(portLayout.angle || 0));\n\n        if (labelLayout.attrs) {\n          const options = {\n            selectors: cached.portLabelSelectors || {}\n          };\n\n          if (metric.labelSize) {\n            options.rootBBox = Rectangle.fromSize(metric.labelSize);\n          }\n\n          this.updateAttrs(cached.portLabelElement, labelLayout.attrs, options);\n        }\n      }\n    }\n  }\n\n  applyPortTransform(element, layout) {\n    let initialAngle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const angle = layout.angle;\n    const position = layout.position;\n    const matrix = Dom.createSVGMatrix().rotate(initialAngle).translate(position.x || 0, position.y || 0).rotate(angle || 0);\n    Dom.transform(element, matrix, {\n      absolute: true\n    });\n  }\n\n  getPortContainerMarkup() {\n    return this.cell.getPortContainerMarkup() || this.defaultPortContainerMarkup;\n  }\n\n  getPortMarkup(port) {\n    return port.markup || this.cell.portMarkup || this.defaultPortMarkup;\n  }\n\n  getPortLabelMarkup(label) {\n    return label.markup || this.cell.portLabelMarkup || this.defaultPortLabelMarkup;\n  }\n\n  getEventArgs(e, x, y) {\n    const view = this; // eslint-disable-line\n\n    const node = view.cell;\n    const cell = node;\n\n    if (x == null || y == null) {\n      return {\n        e,\n        view,\n        node,\n        cell\n      };\n    }\n\n    return {\n      e,\n      x,\n      y,\n      view,\n      node,\n      cell\n    };\n  }\n\n  notifyMouseDown(e, x, y) {\n    super.onMouseDown(e, x, y);\n    this.notify('node:mousedown', this.getEventArgs(e, x, y));\n  }\n\n  notifyMouseMove(e, x, y) {\n    super.onMouseMove(e, x, y);\n    this.notify('node:mousemove', this.getEventArgs(e, x, y));\n  }\n\n  notifyMouseUp(e, x, y) {\n    super.onMouseUp(e, x, y);\n    this.notify('node:mouseup', this.getEventArgs(e, x, y));\n  }\n\n  onClick(e, x, y) {\n    super.onClick(e, x, y);\n    this.notify('node:click', this.getEventArgs(e, x, y));\n  }\n\n  onDblClick(e, x, y) {\n    super.onDblClick(e, x, y);\n    this.notify('node:dblclick', this.getEventArgs(e, x, y));\n  }\n\n  onContextMenu(e, x, y) {\n    super.onContextMenu(e, x, y);\n    this.notify('node:contextmenu', this.getEventArgs(e, x, y));\n  }\n\n  onMouseDown(e, x, y) {\n    if (this.isPropagationStopped(e)) {\n      return;\n    }\n\n    this.notifyMouseDown(e, x, y);\n    this.startNodeDragging(e, x, y);\n  }\n\n  onMouseMove(e, x, y) {\n    const data = this.getEventData(e);\n    const action = data.action;\n\n    if (action === 'magnet') {\n      this.dragMagnet(e, x, y);\n    } else {\n      if (action === 'move') {\n        const meta = data;\n        const view = meta.targetView || this;\n        view.dragNode(e, x, y);\n        view.notify('node:moving', {\n          e,\n          x,\n          y,\n          view,\n          cell: view.cell,\n          node: view.cell\n        });\n      }\n\n      this.notifyMouseMove(e, x, y);\n    }\n\n    this.setEventData(e, data);\n  }\n\n  onMouseUp(e, x, y) {\n    const data = this.getEventData(e);\n    const action = data.action;\n\n    if (action === 'magnet') {\n      this.stopMagnetDragging(e, x, y);\n    } else {\n      this.notifyMouseUp(e, x, y);\n\n      if (action === 'move') {\n        const meta = data;\n        const view = meta.targetView || this;\n        view.stopNodeDragging(e, x, y);\n      }\n    }\n\n    const magnet = data.targetMagnet;\n\n    if (magnet) {\n      this.onMagnetClick(e, magnet, x, y);\n    }\n\n    this.checkMouseleave(e);\n  }\n\n  onMouseOver(e) {\n    super.onMouseOver(e);\n    this.notify('node:mouseover', this.getEventArgs(e));\n  }\n\n  onMouseOut(e) {\n    super.onMouseOut(e);\n    this.notify('node:mouseout', this.getEventArgs(e));\n  }\n\n  onMouseEnter(e) {\n    this.updateClassName(e);\n    super.onMouseEnter(e);\n    this.notify('node:mouseenter', this.getEventArgs(e));\n  }\n\n  onMouseLeave(e) {\n    super.onMouseLeave(e);\n    this.notify('node:mouseleave', this.getEventArgs(e));\n  }\n\n  onMouseWheel(e, x, y, delta) {\n    super.onMouseWheel(e, x, y, delta);\n    this.notify('node:mousewheel', Object.assign({\n      delta\n    }, this.getEventArgs(e, x, y)));\n  }\n\n  onMagnetClick(e, magnet, x, y) {\n    const count = this.graph.view.getMouseMovedCount(e);\n\n    if (count > this.graph.options.clickThreshold) {\n      return;\n    }\n\n    this.notify('node:magnet:click', Object.assign({\n      magnet\n    }, this.getEventArgs(e, x, y)));\n  }\n\n  onMagnetDblClick(e, magnet, x, y) {\n    this.notify('node:magnet:dblclick', Object.assign({\n      magnet\n    }, this.getEventArgs(e, x, y)));\n  }\n\n  onMagnetContextMenu(e, magnet, x, y) {\n    this.notify('node:magnet:contextmenu', Object.assign({\n      magnet\n    }, this.getEventArgs(e, x, y)));\n  }\n\n  onMagnetMouseDown(e, magnet, x, y) {\n    this.startMagnetDragging(e, x, y);\n  }\n\n  onCustomEvent(e, name, x, y) {\n    this.notify('node:customevent', Object.assign({\n      name\n    }, this.getEventArgs(e, x, y)));\n    super.onCustomEvent(e, name, x, y);\n  }\n\n  prepareEmbedding(e) {\n    // const cell = data.cell || this.cell\n    // const graph = data.graph || this.graph\n    // const model = graph.model\n    // model.startBatch('to-front')\n    // // Bring the model to the front with all his embeds.\n    // cell.toFront({ deep: true, ui: true })\n    // const maxZ = model\n    //   .getNodes()\n    //   .reduce((max, cell) => Math.max(max, cell.getZIndex() || 0), 0)\n    // const connectedEdges = model.getConnectedEdges(cell, {\n    //   deep: true,\n    //   enclosed: true,\n    // })\n    // connectedEdges.forEach((edge) => {\n    //   const zIndex = edge.getZIndex() || 0\n    //   if (zIndex <= maxZ) {\n    //     edge.setZIndex(maxZ + 1, { ui: true })\n    //   }\n    // })\n    // model.stopBatch('to-front')\n    // Before we start looking for suitable parent we remove the current one.\n    // const parent = cell.getParent()\n    // if (parent) {\n    //   parent.unembed(cell, { ui: true })\n    // }\n    const data = this.getEventData(e);\n    const node = data.cell || this.cell;\n    const view = this.graph.findViewByCell(node);\n    const localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n    this.notify('node:embed', {\n      e,\n      node,\n      view,\n      cell: node,\n      x: localPoint.x,\n      y: localPoint.y,\n      currentParent: node.getParent()\n    });\n  }\n\n  processEmbedding(e, data) {\n    const cell = data.cell || this.cell;\n    const graph = data.graph || this.graph;\n    const options = graph.options.embedding;\n    const findParent = options.findParent;\n    let candidates = typeof findParent === 'function' ? FunctionExt.call(findParent, graph, {\n      view: this,\n      node: this.cell\n    }).filter(c => {\n      return Cell.isCell(c) && this.cell.id !== c.id && !c.isDescendantOf(this.cell);\n    }) : graph.model.getNodesUnderNode(cell, {\n      by: findParent\n    }); // Picks the node with the highest `z` index\n\n    if (options.frontOnly) {\n      candidates = candidates.slice(-1);\n    }\n\n    let newCandidateView = null;\n    const prevCandidateView = data.candidateEmbedView;\n    const validateEmbeding = options.validate;\n\n    for (let i = candidates.length - 1; i >= 0; i -= 1) {\n      const candidate = candidates[i];\n\n      if (prevCandidateView && prevCandidateView.cell.id === candidate.id) {\n        // candidate remains the same\n        newCandidateView = prevCandidateView;\n        break;\n      } else {\n        const view = candidate.findView(graph);\n\n        if (FunctionExt.call(validateEmbeding, graph, {\n          child: this.cell,\n          parent: view.cell,\n          childView: this,\n          parentView: view\n        })) {\n          // flip to the new candidate\n          newCandidateView = view;\n          break;\n        }\n      }\n    }\n\n    this.clearEmbedding(data);\n\n    if (newCandidateView) {\n      newCandidateView.highlight(null, {\n        type: 'embedding'\n      });\n    }\n\n    data.candidateEmbedView = newCandidateView;\n    const localPoint = graph.snapToGrid(e.clientX, e.clientY);\n    this.notify('node:embedding', {\n      e,\n      cell,\n      node: cell,\n      view: graph.findViewByCell(cell),\n      x: localPoint.x,\n      y: localPoint.y,\n      currentParent: cell.getParent(),\n      candidateParent: newCandidateView ? newCandidateView.cell : null\n    });\n  }\n\n  clearEmbedding(data) {\n    const candidateView = data.candidateEmbedView;\n\n    if (candidateView) {\n      candidateView.unhighlight(null, {\n        type: 'embedding'\n      });\n      data.candidateEmbedView = null;\n    }\n  }\n\n  finalizeEmbedding(e, data) {\n    const cell = data.cell || this.cell;\n    const graph = data.graph || this.graph;\n    const view = graph.findViewByCell(cell);\n    const parent = cell.getParent();\n    const candidateView = data.candidateEmbedView;\n\n    if (candidateView) {\n      // Candidate view is chosen to become the parent of the node.\n      candidateView.unhighlight(null, {\n        type: 'embedding'\n      });\n      data.candidateEmbedView = null;\n\n      if (parent == null || parent.id !== candidateView.cell.id) {\n        candidateView.cell.insertChild(cell, undefined, {\n          ui: true\n        });\n      }\n    } else if (parent) {\n      parent.unembed(cell, {\n        ui: true\n      });\n    }\n\n    graph.model.getConnectedEdges(cell, {\n      deep: true\n    }).forEach(edge => {\n      edge.updateParent({\n        ui: true\n      });\n    });\n    const localPoint = graph.snapToGrid(e.clientX, e.clientY);\n\n    if (view) {\n      view.notify('node:embedded', {\n        e,\n        cell,\n        x: localPoint.x,\n        y: localPoint.y,\n        node: cell,\n        view: graph.findViewByCell(cell),\n        previousParent: parent,\n        currentParent: cell.getParent()\n      });\n    }\n  }\n\n  getDelegatedView() {\n    let cell = this.cell;\n    let view = this; // eslint-disable-line\n\n    while (view) {\n      if (cell.isEdge()) {\n        break;\n      }\n\n      if (!cell.hasParent() || view.can('stopDelegateOnDragging')) {\n        return view;\n      }\n\n      cell = cell.getParent();\n      view = this.graph.renderer.findViewByCell(cell);\n    }\n\n    return null;\n  }\n\n  startMagnetDragging(e, x, y) {\n    if (!this.can('magnetConnectable')) {\n      return;\n    }\n\n    e.stopPropagation();\n    const magnet = e.currentTarget;\n    const graph = this.graph;\n    this.setEventData(e, {\n      targetMagnet: magnet\n    });\n\n    if (graph.hook.validateMagnet(this, magnet, e)) {\n      if (graph.options.magnetThreshold <= 0) {\n        this.startConnectting(e, magnet, x, y);\n      }\n\n      this.setEventData(e, {\n        action: 'magnet'\n      });\n      this.stopPropagation(e);\n    } else {\n      this.onMouseDown(e, x, y);\n    }\n\n    graph.view.delegateDragEvents(e, this);\n  }\n\n  startConnectting(e, magnet, x, y) {\n    this.graph.model.startBatch('add-edge');\n    const edgeView = this.createEdgeFromMagnet(magnet, x, y);\n    edgeView.notifyMouseDown(e, x, y); // backwards compatibility events\n\n    edgeView.setEventData(e, edgeView.prepareArrowheadDragging('target', {\n      x,\n      y,\n      isNewEdge: true,\n      fallbackAction: 'remove'\n    }));\n    this.setEventData(e, {\n      edgeView\n    });\n  }\n\n  createEdgeFromMagnet(magnet, x, y) {\n    const graph = this.graph;\n    const model = graph.model;\n    const edge = graph.hook.getDefaultEdge(this, magnet);\n    edge.setSource(Object.assign(Object.assign({}, edge.getSource()), this.getEdgeTerminal(magnet, x, y, edge, 'source')));\n    edge.setTarget(Object.assign(Object.assign({}, edge.getTarget()), {\n      x,\n      y\n    }));\n    edge.addTo(model, {\n      async: false,\n      ui: true\n    });\n    return edge.findView(graph);\n  }\n\n  dragMagnet(e, x, y) {\n    const data = this.getEventData(e);\n    const edgeView = data.edgeView;\n\n    if (edgeView) {\n      edgeView.onMouseMove(e, x, y);\n      this.autoScrollGraph(e.clientX, e.clientY);\n    } else {\n      const graph = this.graph;\n      const magnetThreshold = graph.options.magnetThreshold;\n      const currentTarget = this.getEventTarget(e);\n      const targetMagnet = data.targetMagnet; // magnetThreshold when the pointer leaves the magnet\n\n      if (magnetThreshold === 'onleave') {\n        if (targetMagnet === currentTarget || targetMagnet.contains(currentTarget)) {\n          return;\n        } // eslint-disable-next-line no-lonely-if\n\n      } else {\n        // magnetThreshold defined as a number of movements\n        if (graph.view.getMouseMovedCount(e) <= magnetThreshold) {\n          return;\n        }\n      }\n\n      this.startConnectting(e, targetMagnet, x, y);\n    }\n  }\n\n  stopMagnetDragging(e, x, y) {\n    const data = this.eventData(e);\n    const edgeView = data.edgeView;\n\n    if (edgeView) {\n      edgeView.onMouseUp(e, x, y);\n      this.graph.model.stopBatch('add-edge');\n    }\n  }\n\n  notifyUnhandledMouseDown(e, x, y) {\n    this.notify('node:unhandled:mousedown', {\n      e,\n      x,\n      y,\n      view: this,\n      cell: this.cell,\n      node: this.cell\n    });\n  }\n\n  notifyNodeMove(name, e, x, y, cell) {\n    let cells = [cell];\n    const selection = this.graph.selection.widget;\n\n    if (selection && selection.options.movable) {\n      const selectedCells = this.graph.getSelectedCells();\n\n      if (selectedCells.includes(cell)) {\n        cells = selectedCells.filter(c => c.isNode());\n      }\n    }\n\n    cells.forEach(c => {\n      this.notify(name, {\n        e,\n        x,\n        y,\n        cell: c,\n        node: c,\n        view: c.findView(this.graph)\n      });\n    });\n  }\n\n  startNodeDragging(e, x, y) {\n    const targetView = this.getDelegatedView();\n\n    if (targetView == null || !targetView.can('nodeMovable')) {\n      return this.notifyUnhandledMouseDown(e, x, y);\n    }\n\n    this.setEventData(e, {\n      targetView,\n      action: 'move'\n    });\n    const position = Point.create(targetView.cell.getPosition());\n    targetView.setEventData(e, {\n      moving: false,\n      offset: position.diff(x, y),\n      restrict: this.graph.hook.getRestrictArea(targetView)\n    });\n  }\n\n  dragNode(e, x, y) {\n    const node = this.cell;\n    const graph = this.graph;\n    const gridSize = graph.getGridSize();\n    const data = this.getEventData(e);\n    const offset = data.offset;\n    const restrict = data.restrict;\n\n    if (!data.moving) {\n      data.moving = true;\n      this.addClass('node-moving');\n      this.notifyNodeMove('node:move', e, x, y, this.cell);\n    }\n\n    this.autoScrollGraph(e.clientX, e.clientY);\n    const posX = Util.snapToGrid(x + offset.x, gridSize);\n    const posY = Util.snapToGrid(y + offset.y, gridSize);\n    node.setPosition(posX, posY, {\n      restrict,\n      deep: true,\n      ui: true\n    });\n\n    if (graph.options.embedding.enabled) {\n      if (!data.embedding) {\n        this.prepareEmbedding(e);\n        data.embedding = true;\n      }\n\n      this.processEmbedding(e, data);\n    }\n  }\n\n  stopNodeDragging(e, x, y) {\n    const data = this.getEventData(e);\n\n    if (data.embedding) {\n      this.finalizeEmbedding(e, data);\n    }\n\n    if (data.moving) {\n      this.removeClass('node-moving');\n      this.notifyNodeMove('node:moved', e, x, y, this.cell);\n    }\n\n    data.moving = false;\n    data.embedding = false;\n  }\n\n  autoScrollGraph(x, y) {\n    const scroller = this.graph.scroller.widget;\n\n    if (scroller) {\n      scroller.autoScroll(x, y);\n    }\n  }\n\n}\n\n(function (NodeView) {\n  NodeView.toStringTag = `X6.${NodeView.name}`;\n\n  function isNodeView(instance) {\n    if (instance == null) {\n      return false;\n    }\n\n    if (instance instanceof NodeView) {\n      return true;\n    }\n\n    const tag = instance[Symbol.toStringTag];\n    const view = instance;\n\n    if ((tag == null || tag === NodeView.toStringTag) && typeof view.isNodeView === 'function' && typeof view.isEdgeView === 'function' && typeof view.confirmUpdate === 'function' && typeof view.update === 'function' && typeof view.findPortElem === 'function' && typeof view.resize === 'function' && typeof view.rotate === 'function' && typeof view.translate === 'function') {\n      return true;\n    }\n\n    return false;\n  }\n\n  NodeView.isNodeView = isNodeView;\n})(NodeView || (NodeView = {}));\n\nNodeView.config({\n  isSvgElement: true,\n  priority: 0,\n  bootstrap: ['render'],\n  actions: {\n    view: ['render'],\n    markup: ['render'],\n    attrs: ['update'],\n    size: ['resize', 'ports', 'tools'],\n    angle: ['rotate', 'tools'],\n    position: ['translate', 'tools'],\n    ports: ['ports'],\n    tools: ['tools']\n  }\n});\nNodeView.registry.register('node', NodeView, true);","map":{"version":3,"sources":["../../src/view/node.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,EAAe,MAAf,QAA6B,WAA7B;AACA,SAAS,QAAT,EAAmB,WAAnB,EAAgC,GAAhC,EAAqC,MAArC,QAAmD,SAAnD;AACA,SAAS,SAAT,EAAoB,KAApB,QAAiC,aAAjC;AAEA,SAAS,IAAT,QAAqB,eAArB;AAIA,SAAS,QAAT,QAAyB,QAAzB;AAEA,SAAS,MAAT,QAAuB,UAAvB;AAGA,OAAM,MAAO,QAAP,SAGI,QAHJ,CAG6B;AAHnC,EAAA,WAAA,GAAA;;AAIS,SAAA,YAAA,GAA+B,IAA/B;AACA,SAAA,aAAA,GAAgC,IAAhC;AACY,SAAA,gBAAA,GAA2B,UAA3B;AACA,SAAA,iBAAA,GAA4B,WAA5B;AACA,SAAA,iBAAA,GAAoB,MAAM,CAAC,aAAP,EAApB;AACA,SAAA,sBAAA,GAAyB,MAAM,CAAC,kBAAP,EAAzB;AACA,SAAA,0BAAA,GACjB,MAAM,CAAC,sBAAP,EADiB;AAET,SAAA,UAAA,GAAmD,EAAnD,CAZZ,CA4oCE;AACD;;AA/nCkC,OAAlB,MAAM,CAAC,WAAW,IAAC;AAChC,WAAO,QAAQ,CAAC,WAAhB;AACD;;AAES,EAAA,qBAAqB,GAAA;AAC7B,UAAM,SAAS,GAAG,CAChB,MAAM,qBAAN,EADgB,EAEhB,KAAK,eAAL,CAAqB,MAArB,CAFgB,CAAlB;;AAIA,QAAI,CAAC,KAAK,GAAL,CAAS,aAAT,CAAL,EAA8B;AAC5B,MAAA,SAAS,CAAC,IAAV,CAAe,KAAK,eAAL,CAAqB,gBAArB,CAAf;AACD;;AACD,WAAO,SAAS,CAAC,IAAV,CAAe,GAAf,CAAP;AACD;;AAES,EAAA,eAAe,CAAC,CAAD,EAA0B;AACjD,UAAM,MAAM,GAAG,CAAC,CAAC,MAAjB;;AACA,QAAI,MAAM,CAAC,YAAP,CAAoB,QAApB,CAAJ,EAAmC;AACjC;AACA,YAAM,SAAS,GAAG,KAAK,eAAL,CAAqB,oBAArB,CAAlB;;AACA,UAAI,KAAK,GAAL,CAAS,mBAAT,CAAJ,EAAmC;AACjC,QAAA,GAAG,CAAC,WAAJ,CAAgB,MAAhB,EAAwB,SAAxB;AACD,OAFD,MAEO;AACL,QAAA,GAAG,CAAC,QAAJ,CAAa,MAAb,EAAqB,SAArB;AACD;AACF,KARD,MAQO;AACL;AACA,YAAM,SAAS,GAAG,KAAK,eAAL,CAAqB,gBAArB,CAAlB;;AACA,UAAI,KAAK,GAAL,CAAS,aAAT,CAAJ,EAA6B;AAC3B,aAAK,WAAL,CAAiB,SAAjB;AACD,OAFD,MAEO;AACL,aAAK,QAAL,CAAc,SAAd;AACD;AACF;AACF;;AAED,EAAA,UAAU,GAAA;AACR,WAAO,IAAP;AACD;;AAED,EAAA,aAAa,CAAC,IAAD,EAAgC;AAAA,QAAjB,OAAiB,uEAAF,EAAE;AAC3C,QAAI,GAAG,GAAG,IAAV;;AACA,QAAI,KAAK,SAAL,CAAe,GAAf,EAAoB,OAApB,CAAJ,EAAkC;AAChC,WAAK,WAAL;AACA,WAAK,eAAL;AACD;;AAED,QAAI,KAAK,SAAL,CAAe,GAAf,EAAoB,QAApB,CAAJ,EAAmC;AACjC,WAAK,MAAL;AACA,MAAA,GAAG,GAAG,KAAK,YAAL,CAAkB,GAAlB,EAAuB,CAC3B,QAD2B,EAE3B,QAF2B,EAG3B,QAH2B,EAI3B,WAJ2B,EAK3B,QAL2B,EAM3B,OAN2B,EAO3B,OAP2B,CAAvB,CAAN;AASD,KAXD,MAWO;AACL,MAAA,GAAG,GAAG,KAAK,YAAL,CACJ,GADI,EAEJ,QAFI,EAGJ,MAAM,KAAK,MAAL,CAAY,OAAZ,CAHF,EAIJ,QAJI,CAAN;AAOA,MAAA,GAAG,GAAG,KAAK,YAAL,CACJ,GADI,EAEJ,QAFI,EAGJ,MAAM,KAAK,MAAL,EAHF,EAIJ;AACA,MAAA,MAAM,CAAC,cAAP,GAAwB,OAAxB,GAAkC,IAL9B,CAAN;AAQA,MAAA,GAAG,GAAG,KAAK,YAAL,CAAkB,GAAlB,EAAuB,WAAvB,EAAoC,MAAM,KAAK,SAAL,EAA1C,CAAN;AACA,MAAA,GAAG,GAAG,KAAK,YAAL,CAAkB,GAAlB,EAAuB,QAAvB,EAAiC,MAAM,KAAK,MAAL,EAAvC,CAAN;AACA,MAAA,GAAG,GAAG,KAAK,YAAL,CAAkB,GAAlB,EAAuB,OAAvB,EAAgC,MAAM,KAAK,WAAL,EAAtC,CAAN;AACA,MAAA,GAAG,GAAG,KAAK,YAAL,CAAkB,GAAlB,EAAuB,OAAvB,EAAgC,MAAM,KAAK,WAAL,EAAtC,CAAN;AACD;;AAED,WAAO,GAAP;AACD;;AAED,EAAA,MAAM,CAAC,YAAD,EAA8B;AAClC,SAAK,UAAL,GADkC,CAGlC;;AACA,QAAI,MAAM,CAAC,cAAX,EAA2B;AACzB,WAAK,WAAL;AACD;;AAED,UAAM,IAAI,GAAG,KAAK,IAAlB;AACA,UAAM,IAAI,GAAG,IAAI,CAAC,OAAL,EAAb;AACA,UAAM,KAAK,GAAG,IAAI,CAAC,QAAL,EAAd;AACA,SAAK,WAAL,CAAiB,KAAK,SAAtB,EAAiC,KAAjC,EAAwC;AACtC,MAAA,KAAK,EAAE,YAAY,KAAK,KAAjB,GAAyB,IAAzB,GAAgC,YADD;AAEtC,MAAA,QAAQ,EAAE,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,IAAI,CAAC,KAAzB,EAAgC,IAAI,CAAC,MAArC,CAF4B;AAGtC,MAAA,SAAS,EAAE,KAAK,SAHsB;AAItC,MAAA,YAAY,EAAE,KAAK,YAJmB;AAKtC,MAAA,aAAa,EAAE,KAAK;AALkB,KAAxC;;AAQA,QAAI,MAAM,CAAC,cAAX,EAA2B;AACzB,WAAK,WAAL;AACD;AACF;;AAES,EAAA,YAAY,GAAA;AACpB,UAAM,MAAM,GAAG,KAAK,IAAL,CAAU,MAAzB;;AACA,QAAI,MAAJ,EAAY;AACV,UAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,eAAO,KAAK,kBAAL,CAAwB,MAAxB,CAAP;AACD;;AAED,aAAO,KAAK,gBAAL,CAAsB,MAAtB,CAAP;AACD;;AAED,UAAM,IAAI,SAAJ,CAAc,sBAAd,CAAN;AACD;;AAES,EAAA,gBAAgB,CAAC,MAAD,EAAgD;AACxE,UAAM,GAAG,GAAG,KAAK,eAAL,CAAqB,MAArB,EAA6B,KAAK,SAAlC,CAAZ;;AACA,UAAM,GAAG,GAAI,KAAD,IACV,KAAK,CAAC,OAAN,CAAc,KAAd,IAAuB,KAAK,CAAC,CAAD,CAA5B,GAAkC,KADpC;;AAEA,SAAK,SAAL,GAAiB,GAAG,CAAC,SAArB;AACA,SAAK,aAAL,GAAqB,GAAG,CAAC,KAAK,SAAL,CAAe,KAAK,iBAApB,CAAD,CAAxB;AACA,SAAK,YAAL,GAAoB,GAAG,CAAC,KAAK,SAAL,CAAe,KAAK,gBAApB,CAAD,CAAvB;AACA,SAAK,SAAL,CAAe,WAAf,CAA2B,GAAG,CAAC,QAA/B;AACD;;AAES,EAAA,kBAAkB,CAAC,MAAD,EAAe;AACzC,IAAA,GAAG,CAAC,MAAJ,CAAW,KAAK,SAAhB,EAA2B,MAAM,CAAC,OAAP,CAAe,MAAM,CAAC,aAAP,CAAqB,MAArB,CAAf,CAA3B;AACA,SAAK,aAAL,GAAqB,GAAG,CAAC,OAAJ,CACnB,KAAK,SADc,EAEnB,IAAI,KAAK,iBAAiB,EAFP,CAArB;AAIA,SAAK,YAAL,GAAoB,GAAG,CAAC,OAAJ,CAAY,KAAK,SAAjB,EAA4B,IAAI,KAAK,gBAAgB,EAArD,CAApB;AACA,SAAK,SAAL,GAAiB,EAAjB;;AACA,QAAI,KAAK,YAAT,EAAuB;AACrB,WAAK,SAAL,CAAe,KAAK,YAApB,IAAoC,KAAK,SAAzC;AACD;AACF;;AAED,EAAA,MAAM,GAAA;AACJ,SAAK,KAAL;AACA,SAAK,YAAL;;AAEA,QAAI,KAAK,YAAT,EAAuB;AACrB;AACA;AACA,WAAK,MAAL;AACD;;AAED,SAAK,MAAL;;AAEA,QAAI,KAAK,aAAT,EAAwB;AACtB,WAAK,MAAL;AACA,WAAK,SAAL;AACD,KAHD,MAGO;AACL,WAAK,eAAL;AACD;;AAED,QAAI,CAAC,MAAM,CAAC,cAAZ,EAA4B;AAC1B,WAAK,WAAL;AACD;;AAED,SAAK,WAAL;AAEA,WAAO,IAAP;AACD;;AAED,EAAA,MAAM,GAAc;AAAA,QAAb,GAAa,uEAAF,EAAE;;AAClB,QAAI,KAAK,YAAT,EAAuB;AACrB,aAAO,KAAK,UAAL,CAAgB,GAAhB,CAAP;AACD;;AAED,QAAI,KAAK,IAAL,CAAU,QAAV,EAAJ,EAA0B;AACxB,WAAK,MAAL;AACD;;AAED,SAAK,MAAL;AACD;;AAED,EAAA,SAAS,GAAA;AACP,QAAI,KAAK,aAAT,EAAwB;AACtB,aAAO,KAAK,iBAAL,EAAP;AACD;;AAED,SAAK,eAAL;AACD;;AAED,EAAA,MAAM,GAAA;AACJ,QAAI,KAAK,aAAT,EAAwB;AACtB,WAAK,cAAL,GADsB,CAEtB;AACA;;AACA,WAAK,MAAL;AACA;AACD;;AAED,SAAK,eAAL;AACD;;AAES,EAAA,oBAAoB,GAAA;AAC5B,UAAM,QAAQ,GAAG,KAAK,IAAL,CAAU,WAAV,EAAjB;AACA,WAAO,aAAa,QAAQ,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,GAA5C;AACD;;AAES,EAAA,iBAAiB,GAAA;AACzB,UAAM,KAAK,GAAG,KAAK,IAAL,CAAU,QAAV,EAAd;;AACA,QAAI,KAAJ,EAAW;AACT,YAAM,IAAI,GAAG,KAAK,IAAL,CAAU,OAAV,EAAb;AACA,aAAO,UAAU,KAAK,IAAI,IAAI,CAAC,KAAL,GAAa,CAAC,IAAI,IAAI,CAAC,MAAL,GAAc,CAAC,GAA3D;AACD;AACF;;AAES,EAAA,eAAe,GAAA;AACvB,QAAI,SAAS,GAAG,KAAK,oBAAL,EAAhB;AACA,UAAM,GAAG,GAAG,KAAK,iBAAL,EAAZ;;AACA,QAAI,GAAJ,EAAS;AACP,MAAA,SAAS,IAAI,IAAI,GAAG,EAApB;AACD;;AACD,SAAK,SAAL,CAAe,YAAf,CAA4B,WAA5B,EAAyC,SAAzC;AACD;;AAES,EAAA,cAAc,GAAA;AACtB,QAAI,KAAK,aAAL,IAAsB,IAA1B,EAAgC;AAC9B,YAAM,SAAS,GAAG,KAAK,iBAAL,EAAlB;;AACA,UAAI,SAAS,IAAI,IAAjB,EAAuB;AACrB,aAAK,aAAL,CAAmB,YAAnB,CAAgC,WAAhC,EAA6C,SAA7C;AACD,OAFD,MAEO;AACL,aAAK,aAAL,CAAmB,eAAnB,CAAmC,WAAnC;AACD;AACF;AACF;;AAES,EAAA,iBAAiB,GAAA;AACzB,SAAK,SAAL,CAAe,YAAf,CAA4B,WAA5B,EAAyC,KAAK,oBAAL,EAAzC;AACD;;AAES,EAAA,UAAU,GAAc;AAAA,QAAb,GAAa,uEAAF,EAAE;AAChC,UAAM,IAAI,GAAG,KAAK,IAAlB;AACA,UAAM,IAAI,GAAG,IAAI,CAAC,OAAL,EAAb;AACA,UAAM,KAAK,GAAG,IAAI,CAAC,QAAL,EAAd;AACA,UAAM,YAAY,GAAG,KAAK,YAA1B,CAJgC,CAMhC;AACA;AACA;AACA;AACA;;AACA,QAAI,SAAS,GAAG,KAAhB;;AACA,QAAI,YAAY,CAAC,oBAAb,CAAkC,MAAlC,EAA0C,MAA1C,GAAmD,CAAvD,EAA0D;AACxD;AACA;AACA;AACA,MAAA,SAAS,GAAG,IAAZ;AACD;;AACD,UAAM,YAAY,GAAG,GAAG,CAAC,OAAJ,CAAY,YAAZ,EAAwC;AAAE,MAAA;AAAF,KAAxC,CAArB,CAlBgC,CAoBhC;AACA;;AACA,UAAM,EAAE,GAAG,IAAI,CAAC,KAAL,IAAc,YAAY,CAAC,KAAb,IAAsB,CAApC,CAAX;AACA,UAAM,EAAE,GAAG,IAAI,CAAC,MAAL,IAAe,YAAY,CAAC,MAAb,IAAuB,CAAtC,CAAX;AACA,IAAA,YAAY,CAAC,YAAb,CAA0B,WAA1B,EAAuC,SAAS,EAAE,IAAI,EAAE,GAAxD,EAxBgC,CA0BhC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,UAAM,aAAa,GAAG,KAAK,aAA3B;;AACA,QAAI,aAAa,IAAI,IAArB,EAA2B;AACzB,YAAM,SAAS,GAAG,aAAa,CAAC,YAAd,CAA2B,WAA3B,CAAlB;;AACA,UAAI,SAAJ,EAAe;AACb,QAAA,aAAa,CAAC,YAAd,CACE,WADF,EAEE,GAAG,SAAS,WAAW,CAAC,KAAK,IAAI,IAAI,CAAC,KAAL,GAAa,CAAC,IAAI,IAAI,CAAC,MAAL,GAAc,CAAC,GAFpE;AAIA,cAAM,aAAa,GAAG,GAAG,CAAC,OAAJ,CAAY,YAAZ,EAAwC;AAC5D,UAAA,MAAM,EAAE,KAAK,KAAL,CAAW,IAAX,CAAgB;AADoC,SAAxC,CAAtB,CALa,CASb;;AACA,QAAA,IAAI,CAAC,IAAL,CACE,UADF,EAEE;AAAE,UAAA,CAAC,EAAE,aAAa,CAAC,CAAnB;AAAsB,UAAA,CAAC,EAAE,aAAa,CAAC;AAAvC,SAFF,EAE4C,MAAA,CAAA,MAAA,CAAA;AACxC,UAAA,OAAO,EAAE;AAD+B,SAAA,EACtB,GADsB,CAF5C;AAKA,aAAK,SAAL;AACA,aAAK,MAAL;AACD;AACF,KAxD+B,CA0DhC;AACA;;;AACA,SAAK,MAAL;AACD,GAxTgC,CA0TjC;;;AAEA,EAAA,YAAY,CAAC,MAAD,EAAkB,QAAlB,EAAmC;AAC7C,UAAM,KAAK,GAAG,MAAM,GAAG,KAAK,UAAL,CAAgB,MAAhB,CAAH,GAA6B,IAAjD;;AACA,QAAI,CAAC,KAAL,EAAY;AACV,aAAO,IAAP;AACD;;AACD,UAAM,QAAQ,GAAG,KAAK,CAAC,kBAAvB;AACA,UAAM,aAAa,GAAG,KAAK,CAAC,oBAAN,IAA8B,EAApD;AACA,WAAO,KAAK,OAAL,CAAa,QAAb,EAAuB,QAAvB,EAAiC,aAAjC,CAAP;AACD;;AAES,EAAA,eAAe,GAAA;AACvB,SAAK,eAAL;AACD;;AAES,EAAA,YAAY,GAAA;AACpB,SAAK,WAAL;AACA,SAAK,eAAL;AACA,SAAK,WAAL;AACD;;AAES,EAAA,eAAe,GAAA;AACvB,SAAK,UAAL,GAAkB,EAAlB;AACD;;AAES,EAAA,WAAW,GAAA;AACnB,IAAA,MAAM,CAAC,IAAP,CAAY,KAAK,UAAjB,EAA6B,OAA7B,CAAsC,MAAD,IAAW;AAC9C,YAAM,MAAM,GAAG,KAAK,UAAL,CAAgB,MAAhB,CAAf;AACA,MAAA,GAAG,CAAC,MAAJ,CAAW,MAAM,CAAC,WAAlB;AACD,KAHD;AAID;;AAES,EAAA,WAAW,GAAA;AACnB,UAAM,SAAS,GAAG,KAAK,iBAAL,EAAlB,CADmB,CAEnB;;AACA,UAAM,UAAU,GAAc,EAA9B;AACA,IAAA,SAAS,CAAC,UAAV,CAAqB,OAArB,CAA8B,KAAD,IAAU;AACrC,MAAA,UAAU,CAAC,IAAX,CAAgB,KAAhB;AACD,KAFD;AAIA,UAAM,aAAa,GAAG,QAAQ,CAAC,OAAT,CAAiB,KAAK,IAAL,CAAU,cAAV,EAAjB,EAA6C,QAA7C,CAAtB;AACA,UAAM,aAAa,GAAG,MAAtB,CATmB,CAWnB;;AACA,QAAI,aAAa,CAAC,aAAD,CAAjB,EAAkC;AAChC,MAAA,aAAa,CAAC,aAAD,CAAb,CAA6B,OAA7B,CAAsC,IAAD,IAAS;AAC5C,cAAM,WAAW,GAAG,KAAK,cAAL,CAAoB,IAApB,CAApB;AACA,QAAA,SAAS,CAAC,MAAV,CAAiB,WAAjB;AACA,QAAA,UAAU,CAAC,IAAX,CAAgB,WAAhB;AACD,OAJD;AAKD;;AAED,IAAA,MAAM,CAAC,IAAP,CAAY,aAAZ,EAA2B,OAA3B,CAAoC,GAAD,IAAQ;AACzC,UAAI,GAAG,KAAK,aAAZ,EAA2B;AACzB,cAAM,MAAM,GAAG,QAAQ,CAAC,GAAD,EAAM,EAAN,CAAvB;AACA,aAAK,WAAL,CAAiB,aAAa,CAAC,GAAD,CAA9B,EAAqC,MAArC,EAA6C,UAA7C;AACD;AACF,KALD;AAOA,SAAK,WAAL;AACD;;AAES,EAAA,iBAAiB,GAAA;AACzB,WAAO,KAAK,aAAL,IAAsB,KAAK,SAAlC;AACD;;AAES,EAAA,WAAW,CACnB,KADmB,EAEnB,MAFmB,EAGnB,IAHmB,EAGJ;AAEf,UAAM,KAAK,GAAG,KAAK,CAAC,GAAN,CAAW,CAAD,IAAO,KAAK,cAAL,CAAoB,CAApB,CAAjB,CAAd;;AACA,QAAI,IAAI,CAAC,MAAD,CAAJ,IAAgB,MAAM,GAAG,CAA7B,EAAgC;AAC9B,MAAA,GAAG,CAAC,MAAJ,CAAW,IAAI,CAAC,IAAI,CAAC,GAAL,CAAS,MAAT,EAAiB,CAAjB,CAAD,CAAf,EAAsC,KAAtC;AACD,KAFD,MAEO;AACL,MAAA,GAAG,CAAC,MAAJ,CAAW,KAAK,iBAAL,EAAX,EAAqC,KAArC;AACD;AACF;;AAES,EAAA,cAAc,CAAC,IAAD,EAAuB;AAC7C,UAAM,MAAM,GAAG,KAAK,UAAL,CAAgB,IAAI,CAAC,EAArB,CAAf;;AACA,QAAI,MAAJ,EAAY;AACV,aAAO,MAAM,CAAC,WAAd;AACD;;AACD,WAAO,KAAK,iBAAL,CAAuB,IAAvB,CAAP;AACD;;AAES,EAAA,iBAAiB,CAAC,IAAD,EAAuB;AAChD,QAAI,YAAY,GAAG,MAAM,CAAC,YAAP,CAAoB,KAAK,sBAAL,EAApB,CAAnB;AACA,UAAM,WAAW,GAAG,YAAY,CAAC,IAAjC;;AACA,QAAI,WAAW,IAAI,IAAnB,EAAyB;AACvB,YAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAED,IAAA,YAAY,GAAG,MAAM,CAAC,YAAP,CAAoB,KAAK,aAAL,CAAmB,IAAnB,CAApB,CAAf;AACA,UAAM,kBAAkB,GAAG,YAAY,CAAC,IAAxC;AACA,UAAM,oBAAoB,GAAG,YAAY,CAAC,SAA1C;;AAEA,QAAI,kBAAkB,IAAI,IAA1B,EAAgC;AAC9B,YAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,SAAK,QAAL,CACE;AACE,MAAA,IAAI,EAAE,IAAI,CAAC,EADb;AAEE,oBAAc,IAAI,CAAC;AAFrB,KADF,EAKE,kBALF;AAQA,IAAA,YAAY,GAAG,MAAM,CAAC,YAAP,CAAoB,KAAK,kBAAL,CAAwB,IAAI,CAAC,KAA7B,CAApB,CAAf;AACA,UAAM,gBAAgB,GAAG,YAAY,CAAC,IAAtC;AACA,UAAM,kBAAkB,GAAG,YAAY,CAAC,SAAxC;;AAEA,QAAI,gBAAgB,IAAI,IAAxB,EAA8B;AAC5B,YAAM,IAAI,KAAJ,CAAU,4BAAV,CAAN;AACD;;AAED,QAAI,aAAJ;;AACA,QAAI,oBAAoB,IAAI,kBAA5B,EAAgD;AAC9C;AACA,WAAK,MAAM,GAAX,IAAkB,kBAAlB,EAAsC;AACpC,YAAI,oBAAoB,CAAC,GAAD,CAApB,IAA6B,GAAG,KAAK,KAAK,YAA9C,EAA4D;AAC1D,gBAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN;AACD;AACF;;AACD,MAAA,aAAa,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACR,oBADQ,CAAA,EAER,kBAFQ,CAAb;AAID,KAXD,MAWO;AACL,MAAA,aAAa,GAAG,oBAAoB,IAAI,kBAAxC;AACD;;AAED,IAAA,GAAG,CAAC,QAAJ,CAAa,WAAb,EAA0B,SAA1B;AACA,IAAA,GAAG,CAAC,QAAJ,CAAa,kBAAb,EAAiC,cAAjC;AACA,IAAA,GAAG,CAAC,QAAJ,CAAa,gBAAb,EAA+B,eAA/B;AAEA,IAAA,WAAW,CAAC,WAAZ,CAAwB,kBAAxB;AACA,IAAA,WAAW,CAAC,WAAZ,CAAwB,gBAAxB;AAEA,SAAK,UAAL,CAAgB,IAAI,CAAC,EAArB,IAA2B;AACzB,MAAA,WADyB;AAEzB,MAAA,aAFyB;AAGzB,MAAA,gBAHyB;AAIzB,MAAA,kBAJyB;AAKzB,MAAA,kBALyB;AAMzB,MAAA;AANyB,KAA3B;AASA,SAAK,KAAL,CAAW,IAAX,CAAgB,cAAhB,CAA+B;AAC7B,MAAA,IAD6B;AAE7B,MAAA,IAAI,EAAE,KAAK,IAFkB;AAG7B,MAAA,SAAS,EAAE,WAHkB;AAI7B,MAAA,SAAS,EAAE,aAJkB;AAK7B,MAAA,cAAc,EAAE,gBALa;AAM7B,MAAA,cAAc,EAAE,kBANa;AAO7B,MAAA,gBAAgB,EAAE,kBAPW;AAQ7B,MAAA,gBAAgB,EAAE;AARW,KAA/B;AAWA,WAAO,WAAP;AACD;;AAES,EAAA,WAAW,GAAA;AACnB;AACA,SAAK,eAAL,GAFmB,CAInB;;AACA,UAAM,MAAM,GAAG,KAAK,IAAL,CAAU,eAAV,EAAf;AACA,IAAA,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA6B,SAAD,IAAe,KAAK,eAAL,CAAqB,SAArB,CAA3C;AACD;;AAES,EAAA,eAAe,CAAC,SAAD,EAAmB;AAC1C,UAAM,IAAI,GAAG,SAAS,CAAC,QAAV,CAAmB,KAAK,IAAL,CAAU,OAAV,EAAnB,CAAb;AACA,UAAM,OAAO,GAAG,KAAK,IAAL,CAAU,qBAAV,CAAgC,SAAhC,EAA2C,IAA3C,CAAhB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,CAAC,GAAG,OAAO,CAAC,MAA5B,EAAoC,CAAC,GAAG,CAAxC,EAA2C,CAAC,IAAI,CAAhD,EAAmD;AACjD,YAAM,MAAM,GAAG,OAAO,CAAC,CAAD,CAAtB;AACA,YAAM,MAAM,GAAG,MAAM,CAAC,MAAtB;AACA,YAAM,MAAM,GAAG,KAAK,UAAL,CAAgB,MAAhB,KAA2B,EAA1C;AACA,YAAM,UAAU,GAAG,MAAM,CAAC,UAA1B;AACA,WAAK,kBAAL,CAAwB,MAAM,CAAC,WAA/B,EAA4C,UAA5C;;AACA,UAAI,MAAM,CAAC,SAAP,IAAoB,IAAxB,EAA8B;AAC5B,cAAM,OAAO,GAAuC;AAClD,UAAA,SAAS,EAAE,MAAM,CAAC,aAAP,IAAwB;AADe,SAApD;;AAIA,YAAI,MAAM,CAAC,QAAX,EAAqB;AACnB,UAAA,OAAO,CAAC,QAAR,GAAmB,SAAS,CAAC,QAAV,CAAmB,MAAM,CAAC,QAA1B,CAAnB;AACD;;AAED,aAAK,WAAL,CAAiB,MAAM,CAAC,WAAxB,EAAqC,MAAM,CAAC,SAA5C,EAAuD,OAAvD;AACD;;AAED,YAAM,WAAW,GAAG,MAAM,CAAC,WAA3B;;AACA,UAAI,WAAJ,EAAiB;AACf,aAAK,kBAAL,CACE,MAAM,CAAC,gBADT,EAEE,WAFF,EAGE,EAAE,UAAU,CAAC,KAAX,IAAoB,CAAtB,CAHF;;AAMA,YAAI,WAAW,CAAC,KAAhB,EAAuB;AACrB,gBAAM,OAAO,GAAuC;AAClD,YAAA,SAAS,EAAE,MAAM,CAAC,kBAAP,IAA6B;AADU,WAApD;;AAIA,cAAI,MAAM,CAAC,SAAX,EAAsB;AACpB,YAAA,OAAO,CAAC,QAAR,GAAmB,SAAS,CAAC,QAAV,CAAmB,MAAM,CAAC,SAA1B,CAAnB;AACD;;AAED,eAAK,WAAL,CAAiB,MAAM,CAAC,gBAAxB,EAA0C,WAAW,CAAC,KAAtD,EAA6D,OAA7D;AACD;AACF;AACF;AACF;;AAES,EAAA,kBAAkB,CAC1B,OAD0B,EAE1B,MAF0B,EAGV;AAAA,QAAhB,YAAgB,uEAAD,CAAC;AAEhB,UAAM,KAAK,GAAG,MAAM,CAAC,KAArB;AACA,UAAM,QAAQ,GAAG,MAAM,CAAC,QAAxB;AACA,UAAM,MAAM,GAAG,GAAG,CAAC,eAAJ,GACZ,MADY,CACL,YADK,EAEZ,SAFY,CAEF,QAAQ,CAAC,CAAT,IAAc,CAFZ,EAEe,QAAQ,CAAC,CAAT,IAAc,CAF7B,EAGZ,MAHY,CAGL,KAAK,IAAI,CAHJ,CAAf;AAKA,IAAA,GAAG,CAAC,SAAJ,CAAc,OAAd,EAAqC,MAArC,EAA6C;AAAE,MAAA,QAAQ,EAAE;AAAZ,KAA7C;AACD;;AAES,EAAA,sBAAsB,GAAA;AAC9B,WAAO,KAAK,IAAL,CAAU,sBAAV,MAAsC,KAAK,0BAAlD;AACD;;AAES,EAAA,aAAa,CAAC,IAAD,EAAuB;AAC5C,WAAO,IAAI,CAAC,MAAL,IAAe,KAAK,IAAL,CAAU,UAAzB,IAAuC,KAAK,iBAAnD;AACD;;AAES,EAAA,kBAAkB,CAAC,KAAD,EAAyB;AACnD,WACE,KAAK,CAAC,MAAN,IAAgB,KAAK,IAAL,CAAU,eAA1B,IAA6C,KAAK,sBADpD;AAGD;;AAYS,EAAA,YAAY,CAAI,CAAJ,EAAU,CAAV,EAAsB,CAAtB,EAAgC;AACpD,UAAM,IAAI,GAAG,IAAb,CADoD,CAClC;;AAClB,UAAM,IAAI,GAAG,IAAI,CAAC,IAAlB;AACA,UAAM,IAAI,GAAG,IAAb;;AACA,QAAI,CAAC,IAAI,IAAL,IAAa,CAAC,IAAI,IAAtB,EAA4B;AAC1B,aAAO;AAAE,QAAA,CAAF;AAAK,QAAA,IAAL;AAAW,QAAA,IAAX;AAAiB,QAAA;AAAjB,OAAP;AACD;;AACD,WAAO;AAAE,MAAA,CAAF;AAAK,MAAA,CAAL;AAAQ,MAAA,CAAR;AAAW,MAAA,IAAX;AAAiB,MAAA,IAAjB;AAAuB,MAAA;AAAvB,KAAP;AACD;;AAED,EAAA,eAAe,CAAC,CAAD,EAA2B,CAA3B,EAAsC,CAAtC,EAA+C;AAC5D,UAAM,WAAN,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AACA,SAAK,MAAL,CAAY,gBAAZ,EAA8B,KAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAA9B;AACD;;AAED,EAAA,eAAe,CAAC,CAAD,EAA2B,CAA3B,EAAsC,CAAtC,EAA+C;AAC5D,UAAM,WAAN,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AACA,SAAK,MAAL,CAAY,gBAAZ,EAA8B,KAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAA9B;AACD;;AAED,EAAA,aAAa,CAAC,CAAD,EAAyB,CAAzB,EAAoC,CAApC,EAA6C;AACxD,UAAM,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB;AACA,SAAK,MAAL,CAAY,cAAZ,EAA4B,KAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAA5B;AACD;;AAED,EAAA,OAAO,CAAC,CAAD,EAAuB,CAAvB,EAAkC,CAAlC,EAA2C;AAChD,UAAM,OAAN,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB;AACA,SAAK,MAAL,CAAY,YAAZ,EAA0B,KAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAA1B;AACD;;AAED,EAAA,UAAU,CAAC,CAAD,EAA6B,CAA7B,EAAwC,CAAxC,EAAiD;AACzD,UAAM,UAAN,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AACA,SAAK,MAAL,CAAY,eAAZ,EAA6B,KAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAA7B;AACD;;AAED,EAAA,aAAa,CAAC,CAAD,EAA6B,CAA7B,EAAwC,CAAxC,EAAiD;AAC5D,UAAM,aAAN,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B;AACA,SAAK,MAAL,CAAY,kBAAZ,EAAgC,KAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAAhC;AACD;;AAED,EAAA,WAAW,CAAC,CAAD,EAA2B,CAA3B,EAAsC,CAAtC,EAA+C;AACxD,QAAI,KAAK,oBAAL,CAA0B,CAA1B,CAAJ,EAAkC;AAChC;AACD;;AACD,SAAK,eAAL,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B;AACA,SAAK,iBAAL,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B;AACD;;AAED,EAAA,WAAW,CAAC,CAAD,EAA2B,CAA3B,EAAsC,CAAtC,EAA+C;AACxD,UAAM,IAAI,GAAG,KAAK,YAAL,CAAuC,CAAvC,CAAb;AACA,UAAM,MAAM,GAAG,IAAI,CAAC,MAApB;;AACA,QAAI,MAAM,KAAK,QAAf,EAAyB;AACvB,WAAK,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB;AACD,KAFD,MAEO;AACL,UAAI,MAAM,KAAK,MAAf,EAAuB;AACrB,cAAM,IAAI,GAAG,IAAb;AACA,cAAM,IAAI,GAAG,IAAI,CAAC,UAAL,IAAmB,IAAhC;AACA,QAAA,IAAI,CAAC,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB;AACA,QAAA,IAAI,CAAC,MAAL,CAAY,aAAZ,EAA2B;AACzB,UAAA,CADyB;AAEzB,UAAA,CAFyB;AAGzB,UAAA,CAHyB;AAIzB,UAAA,IAJyB;AAKzB,UAAA,IAAI,EAAE,IAAI,CAAC,IALc;AAMzB,UAAA,IAAI,EAAE,IAAI,CAAC;AANc,SAA3B;AAQD;;AACD,WAAK,eAAL,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B;AACD;;AAED,SAAK,YAAL,CAAuC,CAAvC,EAA0C,IAA1C;AACD;;AAED,EAAA,SAAS,CAAC,CAAD,EAAyB,CAAzB,EAAoC,CAApC,EAA6C;AACpD,UAAM,IAAI,GAAG,KAAK,YAAL,CAAuC,CAAvC,CAAb;AACA,UAAM,MAAM,GAAG,IAAI,CAAC,MAApB;;AACA,QAAI,MAAM,KAAK,QAAf,EAAyB;AACvB,WAAK,kBAAL,CAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B;AACD,KAFD,MAEO;AACL,WAAK,aAAL,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;;AACA,UAAI,MAAM,KAAK,MAAf,EAAuB;AACrB,cAAM,IAAI,GAAG,IAAb;AACA,cAAM,IAAI,GAAG,IAAI,CAAC,UAAL,IAAmB,IAAhC;AACA,QAAA,IAAI,CAAC,gBAAL,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B;AACD;AACF;;AAED,UAAM,MAAM,GAAI,IAAyB,CAAC,YAA1C;;AACA,QAAI,MAAJ,EAAY;AACV,WAAK,aAAL,CAAmB,CAAnB,EAAsB,MAAtB,EAA8B,CAA9B,EAAiC,CAAjC;AACD;;AAED,SAAK,eAAL,CAAqB,CAArB;AACD;;AAED,EAAA,WAAW,CAAC,CAAD,EAAyB;AAClC,UAAM,WAAN,CAAkB,CAAlB;AACA,SAAK,MAAL,CAAY,gBAAZ,EAA8B,KAAK,YAAL,CAAkB,CAAlB,CAA9B;AACD;;AAED,EAAA,UAAU,CAAC,CAAD,EAAwB;AAChC,UAAM,UAAN,CAAiB,CAAjB;AACA,SAAK,MAAL,CAAY,eAAZ,EAA6B,KAAK,YAAL,CAAkB,CAAlB,CAA7B;AACD;;AAED,EAAA,YAAY,CAAC,CAAD,EAA0B;AACpC,SAAK,eAAL,CAAqB,CAArB;AACA,UAAM,YAAN,CAAmB,CAAnB;AACA,SAAK,MAAL,CAAY,iBAAZ,EAA+B,KAAK,YAAL,CAAkB,CAAlB,CAA/B;AACD;;AAED,EAAA,YAAY,CAAC,CAAD,EAA0B;AACpC,UAAM,YAAN,CAAmB,CAAnB;AACA,SAAK,MAAL,CAAY,iBAAZ,EAA+B,KAAK,YAAL,CAAkB,CAAlB,CAA/B;AACD;;AAED,EAAA,YAAY,CAAC,CAAD,EAA2B,CAA3B,EAAsC,CAAtC,EAAiD,KAAjD,EAA8D;AACxE,UAAM,YAAN,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,KAA5B;AACA,SAAK,MAAL,CAAY,iBAAZ,EAA6B,MAAA,CAAA,MAAA,CAAA;AAC3B,MAAA;AAD2B,KAAA,EAExB,KAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAFwB,CAA7B;AAID;;AAED,EAAA,aAAa,CAAC,CAAD,EAAyB,MAAzB,EAA0C,CAA1C,EAAqD,CAArD,EAA8D;AACzE,UAAM,KAAK,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,kBAAhB,CAAmC,CAAnC,CAAd;;AACA,QAAI,KAAK,GAAG,KAAK,KAAL,CAAW,OAAX,CAAmB,cAA/B,EAA+C;AAC7C;AACD;;AACD,SAAK,MAAL,CAAY,mBAAZ,EAA+B,MAAA,CAAA,MAAA,CAAA;AAC7B,MAAA;AAD6B,KAAA,EAE1B,KAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAF0B,CAA/B;AAID;;AAED,EAAA,gBAAgB,CACd,CADc,EAEd,MAFc,EAGd,CAHc,EAId,CAJc,EAIL;AAET,SAAK,MAAL,CAAY,sBAAZ,EAAkC,MAAA,CAAA,MAAA,CAAA;AAChC,MAAA;AADgC,KAAA,EAE7B,KAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAF6B,CAAlC;AAID;;AAED,EAAA,mBAAmB,CACjB,CADiB,EAEjB,MAFiB,EAGjB,CAHiB,EAIjB,CAJiB,EAIR;AAET,SAAK,MAAL,CAAY,yBAAZ,EAAqC,MAAA,CAAA,MAAA,CAAA;AACnC,MAAA;AADmC,KAAA,EAEhC,KAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAFgC,CAArC;AAID;;AAED,EAAA,iBAAiB,CACf,CADe,EAEf,MAFe,EAGf,CAHe,EAIf,CAJe,EAIN;AAET,SAAK,mBAAL,CAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B;AACD;;AAED,EAAA,aAAa,CAAC,CAAD,EAA2B,IAA3B,EAAyC,CAAzC,EAAoD,CAApD,EAA6D;AACxE,SAAK,MAAL,CAAY,kBAAZ,EAA8B,MAAA,CAAA,MAAA,CAAA;AAAI,MAAA;AAAJ,KAAA,EAAa,KAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAAb,CAA9B;AACA,UAAM,aAAN,CAAoB,CAApB,EAAuB,IAAvB,EAA6B,CAA7B,EAAgC,CAAhC;AACD;;AAES,EAAA,gBAAgB,CAAC,CAAD,EAAyB;AACjD;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA,UAAM,IAAI,GAAG,KAAK,YAAL,CAA8C,CAA9C,CAAb;AACA,UAAM,IAAI,GAAG,IAAI,CAAC,IAAL,IAAa,KAAK,IAA/B;AACA,UAAM,IAAI,GAAG,KAAK,KAAL,CAAW,cAAX,CAA0B,IAA1B,CAAb;AACA,UAAM,UAAU,GAAG,KAAK,KAAL,CAAW,UAAX,CAAsB,CAAC,CAAC,OAAxB,EAAiC,CAAC,CAAC,OAAnC,CAAnB;AAEA,SAAK,MAAL,CAAY,YAAZ,EAA0B;AACxB,MAAA,CADwB;AAExB,MAAA,IAFwB;AAGxB,MAAA,IAHwB;AAIxB,MAAA,IAAI,EAAE,IAJkB;AAKxB,MAAA,CAAC,EAAE,UAAU,CAAC,CALU;AAMxB,MAAA,CAAC,EAAE,UAAU,CAAC,CANU;AAOxB,MAAA,aAAa,EAAE,IAAI,CAAC,SAAL;AAPS,KAA1B;AASD;;AAED,EAAA,gBAAgB,CAAC,CAAD,EAA2B,IAA3B,EAA2D;AACzE,UAAM,IAAI,GAAG,IAAI,CAAC,IAAL,IAAa,KAAK,IAA/B;AACA,UAAM,KAAK,GAAG,IAAI,CAAC,KAAL,IAAc,KAAK,KAAjC;AACA,UAAM,OAAO,GAAG,KAAK,CAAC,OAAN,CAAc,SAA9B;AACA,UAAM,UAAU,GAAG,OAAO,CAAC,UAA3B;AAEA,QAAI,UAAU,GACZ,OAAO,UAAP,KAAsB,UAAtB,GAEM,WAAW,CAAC,IAAZ,CAAiB,UAAjB,EAA6B,KAA7B,EAAoC;AAClC,MAAA,IAAI,EAAE,IAD4B;AAElC,MAAA,IAAI,EAAE,KAAK;AAFuB,KAApC,EAIA,MAJA,CAIQ,CAAD,IAAM;AACb,aACE,IAAI,CAAC,MAAL,CAAY,CAAZ,KACA,KAAK,IAAL,CAAU,EAAV,KAAiB,CAAC,CAAC,EADnB,IAEA,CAAC,CAAC,CAAC,cAAF,CAAiB,KAAK,IAAtB,CAHH;AAKD,KAVC,CAFN,GAaI,KAAK,CAAC,KAAN,CAAY,iBAAZ,CAA8B,IAA9B,EAAoC;AAClC,MAAA,EAAE,EAAE;AAD8B,KAApC,CAdN,CANyE,CAwBzE;;AACA,QAAI,OAAO,CAAC,SAAZ,EAAuB;AACrB,MAAA,UAAU,GAAG,UAAU,CAAC,KAAX,CAAiB,CAAC,CAAlB,CAAb;AACD;;AAED,QAAI,gBAAgB,GAAG,IAAvB;AACA,UAAM,iBAAiB,GAAG,IAAI,CAAC,kBAA/B;AACA,UAAM,gBAAgB,GAAG,OAAO,CAAC,QAAjC;;AACA,SAAK,IAAI,CAAC,GAAG,UAAU,CAAC,MAAX,GAAoB,CAAjC,EAAoC,CAAC,IAAI,CAAzC,EAA4C,CAAC,IAAI,CAAjD,EAAoD;AAClD,YAAM,SAAS,GAAG,UAAU,CAAC,CAAD,CAA5B;;AAEA,UAAI,iBAAiB,IAAI,iBAAiB,CAAC,IAAlB,CAAuB,EAAvB,KAA8B,SAAS,CAAC,EAAjE,EAAqE;AACnE;AACA,QAAA,gBAAgB,GAAG,iBAAnB;AACA;AACD,OAJD,MAIO;AACL,cAAM,IAAI,GAAG,SAAS,CAAC,QAAV,CAAmB,KAAnB,CAAb;;AACA,YACE,WAAW,CAAC,IAAZ,CAAiB,gBAAjB,EAAmC,KAAnC,EAA0C;AACxC,UAAA,KAAK,EAAE,KAAK,IAD4B;AAExC,UAAA,MAAM,EAAE,IAAI,CAAC,IAF2B;AAGxC,UAAA,SAAS,EAAE,IAH6B;AAIxC,UAAA,UAAU,EAAE;AAJ4B,SAA1C,CADF,EAOE;AACA;AACA,UAAA,gBAAgB,GAAG,IAAnB;AACA;AACD;AACF;AACF;;AAED,SAAK,cAAL,CAAoB,IAApB;;AACA,QAAI,gBAAJ,EAAsB;AACpB,MAAA,gBAAgB,CAAC,SAAjB,CAA2B,IAA3B,EAAiC;AAAE,QAAA,IAAI,EAAE;AAAR,OAAjC;AACD;;AACD,IAAA,IAAI,CAAC,kBAAL,GAA0B,gBAA1B;AAEA,UAAM,UAAU,GAAG,KAAK,CAAC,UAAN,CAAiB,CAAC,CAAC,OAAnB,EAA4B,CAAC,CAAC,OAA9B,CAAnB;AACA,SAAK,MAAL,CAAY,gBAAZ,EAA8B;AAC5B,MAAA,CAD4B;AAE5B,MAAA,IAF4B;AAG5B,MAAA,IAAI,EAAE,IAHsB;AAI5B,MAAA,IAAI,EAAE,KAAK,CAAC,cAAN,CAAqB,IAArB,CAJsB;AAK5B,MAAA,CAAC,EAAE,UAAU,CAAC,CALc;AAM5B,MAAA,CAAC,EAAE,UAAU,CAAC,CANc;AAO5B,MAAA,aAAa,EAAE,IAAI,CAAC,SAAL,EAPa;AAQ5B,MAAA,eAAe,EAAE,gBAAgB,GAAG,gBAAgB,CAAC,IAApB,GAA2B;AARhC,KAA9B;AAUD;;AAED,EAAA,cAAc,CAAC,IAAD,EAAiC;AAC7C,UAAM,aAAa,GAAG,IAAI,CAAC,kBAA3B;;AACA,QAAI,aAAJ,EAAmB;AACjB,MAAA,aAAa,CAAC,WAAd,CAA0B,IAA1B,EAAgC;AAAE,QAAA,IAAI,EAAE;AAAR,OAAhC;AACA,MAAA,IAAI,CAAC,kBAAL,GAA0B,IAA1B;AACD;AACF;;AAED,EAAA,iBAAiB,CAAC,CAAD,EAAyB,IAAzB,EAAyD;AACxE,UAAM,IAAI,GAAG,IAAI,CAAC,IAAL,IAAa,KAAK,IAA/B;AACA,UAAM,KAAK,GAAG,IAAI,CAAC,KAAL,IAAc,KAAK,KAAjC;AACA,UAAM,IAAI,GAAG,KAAK,CAAC,cAAN,CAAqB,IAArB,CAAb;AACA,UAAM,MAAM,GAAG,IAAI,CAAC,SAAL,EAAf;AACA,UAAM,aAAa,GAAG,IAAI,CAAC,kBAA3B;;AACA,QAAI,aAAJ,EAAmB;AACjB;AACA,MAAA,aAAa,CAAC,WAAd,CAA0B,IAA1B,EAAgC;AAAE,QAAA,IAAI,EAAE;AAAR,OAAhC;AACA,MAAA,IAAI,CAAC,kBAAL,GAA0B,IAA1B;;AACA,UAAI,MAAM,IAAI,IAAV,IAAkB,MAAM,CAAC,EAAP,KAAc,aAAa,CAAC,IAAd,CAAmB,EAAvD,EAA2D;AACzD,QAAA,aAAa,CAAC,IAAd,CAAmB,WAAnB,CAA+B,IAA/B,EAAqC,SAArC,EAAgD;AAAE,UAAA,EAAE,EAAE;AAAN,SAAhD;AACD;AACF,KAPD,MAOO,IAAI,MAAJ,EAAY;AACjB,MAAA,MAAM,CAAC,OAAP,CAAe,IAAf,EAAqB;AAAE,QAAA,EAAE,EAAE;AAAN,OAArB;AACD;;AAED,IAAA,KAAK,CAAC,KAAN,CAAY,iBAAZ,CAA8B,IAA9B,EAAoC;AAAE,MAAA,IAAI,EAAE;AAAR,KAApC,EAAoD,OAApD,CAA6D,IAAD,IAAS;AACnE,MAAA,IAAI,CAAC,YAAL,CAAkB;AAAE,QAAA,EAAE,EAAE;AAAN,OAAlB;AACD,KAFD;AAIA,UAAM,UAAU,GAAG,KAAK,CAAC,UAAN,CAAiB,CAAC,CAAC,OAAnB,EAA4B,CAAC,CAAC,OAA9B,CAAnB;;AAEA,QAAI,IAAJ,EAAU;AACR,MAAA,IAAI,CAAC,MAAL,CAAY,eAAZ,EAA6B;AAC3B,QAAA,CAD2B;AAE3B,QAAA,IAF2B;AAG3B,QAAA,CAAC,EAAE,UAAU,CAAC,CAHa;AAI3B,QAAA,CAAC,EAAE,UAAU,CAAC,CAJa;AAK3B,QAAA,IAAI,EAAE,IALqB;AAM3B,QAAA,IAAI,EAAE,KAAK,CAAC,cAAN,CAAqB,IAArB,CANqB;AAO3B,QAAA,cAAc,EAAE,MAPW;AAQ3B,QAAA,aAAa,EAAE,IAAI,CAAC,SAAL;AARY,OAA7B;AAUD;AACF;;AAED,EAAA,gBAAgB,GAAA;AACd,QAAI,IAAI,GAAG,KAAK,IAAhB;AACA,QAAI,IAAI,GAAa,IAArB,CAFc,CAEY;;AAE1B,WAAO,IAAP,EAAa;AACX,UAAI,IAAI,CAAC,MAAL,EAAJ,EAAmB;AACjB;AACD;;AACD,UAAI,CAAC,IAAI,CAAC,SAAL,EAAD,IAAqB,IAAI,CAAC,GAAL,CAAS,wBAAT,CAAzB,EAA6D;AAC3D,eAAO,IAAP;AACD;;AACD,MAAA,IAAI,GAAG,IAAI,CAAC,SAAL,EAAP;AACA,MAAA,IAAI,GAAG,KAAK,KAAL,CAAW,QAAX,CAAoB,cAApB,CAAmC,IAAnC,CAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAES,EAAA,mBAAmB,CAC3B,CAD2B,EAE3B,CAF2B,EAG3B,CAH2B,EAGlB;AAET,QAAI,CAAC,KAAK,GAAL,CAAS,mBAAT,CAAL,EAAoC;AAClC;AACD;;AAED,IAAA,CAAC,CAAC,eAAF;AAEA,UAAM,MAAM,GAAG,CAAC,CAAC,aAAjB;AACA,UAAM,KAAK,GAAG,KAAK,KAAnB;AAEA,SAAK,YAAL,CAA6C,CAA7C,EAAgD;AAC9C,MAAA,YAAY,EAAE;AADgC,KAAhD;;AAIA,QAAI,KAAK,CAAC,IAAN,CAAW,cAAX,CAA0B,IAA1B,EAAgC,MAAhC,EAAwC,CAAxC,CAAJ,EAAgD;AAC9C,UAAI,KAAK,CAAC,OAAN,CAAc,eAAd,IAAiC,CAArC,EAAwC;AACtC,aAAK,gBAAL,CAAsB,CAAtB,EAAyB,MAAzB,EAAiC,CAAjC,EAAoC,CAApC;AACD;;AAED,WAAK,YAAL,CAA6C,CAA7C,EAAgD;AAC9C,QAAA,MAAM,EAAE;AADsC,OAAhD;AAGA,WAAK,eAAL,CAAqB,CAArB;AACD,KATD,MASO;AACL,WAAK,WAAL,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AACD;;AAED,IAAA,KAAK,CAAC,IAAN,CAAW,kBAAX,CAA8B,CAA9B,EAAiC,IAAjC;AACD;;AAES,EAAA,gBAAgB,CACxB,CADwB,EAExB,MAFwB,EAGxB,CAHwB,EAIxB,CAJwB,EAIf;AAET,SAAK,KAAL,CAAW,KAAX,CAAiB,UAAjB,CAA4B,UAA5B;AACA,UAAM,QAAQ,GAAG,KAAK,oBAAL,CAA0B,MAA1B,EAAkC,CAAlC,EAAqC,CAArC,CAAjB;AACA,IAAA,QAAQ,CAAC,eAAT,CAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAJS,CAIyB;;AAClC,IAAA,QAAQ,CAAC,YAAT,CACE,CADF,EAEE,QAAQ,CAAC,wBAAT,CAAkC,QAAlC,EAA4C;AAC1C,MAAA,CAD0C;AAE1C,MAAA,CAF0C;AAG1C,MAAA,SAAS,EAAE,IAH+B;AAI1C,MAAA,cAAc,EAAE;AAJ0B,KAA5C,CAFF;AASA,SAAK,YAAL,CAA6C,CAA7C,EAAgD;AAAE,MAAA;AAAF,KAAhD;AACD;;AAES,EAAA,oBAAoB,CAAC,MAAD,EAAkB,CAAlB,EAA6B,CAA7B,EAAsC;AAClE,UAAM,KAAK,GAAG,KAAK,KAAnB;AACA,UAAM,KAAK,GAAG,KAAK,CAAC,KAApB;AACA,UAAM,IAAI,GAAG,KAAK,CAAC,IAAN,CAAW,cAAX,CAA0B,IAA1B,EAAgC,MAAhC,CAAb;AAEA,IAAA,IAAI,CAAC,SAAL,CAAc,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACT,IAAI,CAAC,SAAL,EADS,CAAA,EAET,KAAK,eAAL,CAAqB,MAArB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,IAAnC,EAAyC,QAAzC,CAFS,CAAd;AAIA,IAAA,IAAI,CAAC,SAAL,CAAc,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,IAAI,CAAC,SAAL,EAAN,CAAA,EAAsB;AAAE,MAAA,CAAF;AAAK,MAAA;AAAL,KAAtB,CAAd;AACA,IAAA,IAAI,CAAC,KAAL,CAAW,KAAX,EAAkB;AAAE,MAAA,KAAK,EAAE,KAAT;AAAgB,MAAA,EAAE,EAAE;AAApB,KAAlB;AAEA,WAAO,IAAI,CAAC,QAAL,CAAc,KAAd,CAAP;AACD;;AAES,EAAA,UAAU,CAAC,CAAD,EAA2B,CAA3B,EAAsC,CAAtC,EAA+C;AACjE,UAAM,IAAI,GAAG,KAAK,YAAL,CAAoC,CAApC,CAAb;AACA,UAAM,QAAQ,GAAG,IAAI,CAAC,QAAtB;;AACA,QAAI,QAAJ,EAAc;AACZ,MAAA,QAAQ,CAAC,WAAT,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B;AACA,WAAK,eAAL,CAAqB,CAAC,CAAC,OAAvB,EAAgC,CAAC,CAAC,OAAlC;AACD,KAHD,MAGO;AACL,YAAM,KAAK,GAAG,KAAK,KAAnB;AACA,YAAM,eAAe,GAAG,KAAK,CAAC,OAAN,CAAc,eAAtC;AACA,YAAM,aAAa,GAAG,KAAK,cAAL,CAAoB,CAApB,CAAtB;AACA,YAAM,YAAY,GAAG,IAAI,CAAC,YAA1B,CAJK,CAML;;AACA,UAAI,eAAe,KAAK,SAAxB,EAAmC;AACjC,YACE,YAAY,KAAK,aAAjB,IACA,YAAY,CAAC,QAAb,CAAsB,aAAtB,CAFF,EAGE;AACA;AACD,SANgC,CAOjC;;AACD,OARD,MAQO;AACL;AACA,YAAI,KAAK,CAAC,IAAN,CAAW,kBAAX,CAA8B,CAA9B,KAAoC,eAAxC,EAAyD;AACvD;AACD;AACF;;AACD,WAAK,gBAAL,CAAsB,CAAtB,EAAgC,YAAhC,EAA8C,CAA9C,EAAiD,CAAjD;AACD;AACF;;AAES,EAAA,kBAAkB,CAAC,CAAD,EAAyB,CAAzB,EAAoC,CAApC,EAA6C;AACvE,UAAM,IAAI,GAAG,KAAK,SAAL,CAAiC,CAAjC,CAAb;AACA,UAAM,QAAQ,GAAG,IAAI,CAAC,QAAtB;;AACA,QAAI,QAAJ,EAAc;AACZ,MAAA,QAAQ,CAAC,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AACA,WAAK,KAAL,CAAW,KAAX,CAAiB,SAAjB,CAA2B,UAA3B;AACD;AACF;;AAES,EAAA,wBAAwB,CAChC,CADgC,EAEhC,CAFgC,EAGhC,CAHgC,EAGvB;AAET,SAAK,MAAL,CAAY,0BAAZ,EAAwC;AACtC,MAAA,CADsC;AAEtC,MAAA,CAFsC;AAGtC,MAAA,CAHsC;AAItC,MAAA,IAAI,EAAE,IAJgC;AAKtC,MAAA,IAAI,EAAE,KAAK,IAL2B;AAMtC,MAAA,IAAI,EAAE,KAAK;AAN2B,KAAxC;AAQD;;AAES,EAAA,cAAc,CACtB,IADsB,EAEtB,CAFsB,EAGtB,CAHsB,EAItB,CAJsB,EAKtB,IALsB,EAKZ;AAEV,QAAI,KAAK,GAAG,CAAC,IAAD,CAAZ;AAEA,UAAM,SAAS,GAAG,KAAK,KAAL,CAAW,SAAX,CAAqB,MAAvC;;AACA,QAAI,SAAS,IAAI,SAAS,CAAC,OAAV,CAAkB,OAAnC,EAA4C;AAC1C,YAAM,aAAa,GAAG,KAAK,KAAL,CAAW,gBAAX,EAAtB;;AACA,UAAI,aAAa,CAAC,QAAd,CAAuB,IAAvB,CAAJ,EAAkC;AAChC,QAAA,KAAK,GAAG,aAAa,CAAC,MAAd,CAAsB,CAAD,IAAa,CAAC,CAAC,MAAF,EAAlC,CAAR;AACD;AACF;;AAED,IAAA,KAAK,CAAC,OAAN,CAAe,CAAD,IAAY;AACxB,WAAK,MAAL,CAAY,IAAZ,EAAkB;AAChB,QAAA,CADgB;AAEhB,QAAA,CAFgB;AAGhB,QAAA,CAHgB;AAIhB,QAAA,IAAI,EAAE,CAJU;AAKhB,QAAA,IAAI,EAAE,CALU;AAMhB,QAAA,IAAI,EAAE,CAAC,CAAC,QAAF,CAAW,KAAK,KAAhB;AANU,OAAlB;AAQD,KATD;AAUD;;AAES,EAAA,iBAAiB,CAAC,CAAD,EAA2B,CAA3B,EAAsC,CAAtC,EAA+C;AACxE,UAAM,UAAU,GAAG,KAAK,gBAAL,EAAnB;;AACA,QAAI,UAAU,IAAI,IAAd,IAAsB,CAAC,UAAU,CAAC,GAAX,CAAe,aAAf,CAA3B,EAA0D;AACxD,aAAO,KAAK,wBAAL,CAA8B,CAA9B,EAAiC,CAAjC,EAAoC,CAApC,CAAP;AACD;;AAED,SAAK,YAAL,CAAoC,CAApC,EAAuC;AACrC,MAAA,UADqC;AAErC,MAAA,MAAM,EAAE;AAF6B,KAAvC;AAKA,UAAM,QAAQ,GAAG,KAAK,CAAC,MAAN,CAAa,UAAU,CAAC,IAAX,CAAgB,WAAhB,EAAb,CAAjB;AACA,IAAA,UAAU,CAAC,YAAX,CAAoD,CAApD,EAAuD;AACrD,MAAA,MAAM,EAAE,KAD6C;AAErD,MAAA,MAAM,EAAE,QAAQ,CAAC,IAAT,CAAc,CAAd,EAAiB,CAAjB,CAF6C;AAGrD,MAAA,QAAQ,EAAE,KAAK,KAAL,CAAW,IAAX,CAAgB,eAAhB,CAAgC,UAAhC;AAH2C,KAAvD;AAKD;;AAES,EAAA,QAAQ,CAAC,CAAD,EAA2B,CAA3B,EAAsC,CAAtC,EAA+C;AAC/D,UAAM,IAAI,GAAG,KAAK,IAAlB;AACA,UAAM,KAAK,GAAG,KAAK,KAAnB;AACA,UAAM,QAAQ,GAAG,KAAK,CAAC,WAAN,EAAjB;AACA,UAAM,IAAI,GAAG,KAAK,YAAL,CAA8C,CAA9C,CAAb;AACA,UAAM,MAAM,GAAG,IAAI,CAAC,MAApB;AACA,UAAM,QAAQ,GAAG,IAAI,CAAC,QAAtB;;AAEA,QAAI,CAAC,IAAI,CAAC,MAAV,EAAkB;AAChB,MAAA,IAAI,CAAC,MAAL,GAAc,IAAd;AACA,WAAK,QAAL,CAAc,aAAd;AACA,WAAK,cAAL,CAAoB,WAApB,EAAiC,CAAjC,EAAoC,CAApC,EAAuC,CAAvC,EAA0C,KAAK,IAA/C;AACD;;AAED,SAAK,eAAL,CAAqB,CAAC,CAAC,OAAvB,EAAgC,CAAC,CAAC,OAAlC;AAEA,UAAM,IAAI,GAAG,IAAI,CAAC,UAAL,CAAgB,CAAC,GAAG,MAAM,CAAC,CAA3B,EAA8B,QAA9B,CAAb;AACA,UAAM,IAAI,GAAG,IAAI,CAAC,UAAL,CAAgB,CAAC,GAAG,MAAM,CAAC,CAA3B,EAA8B,QAA9B,CAAb;AACA,IAAA,IAAI,CAAC,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,EAA6B;AAC3B,MAAA,QAD2B;AAE3B,MAAA,IAAI,EAAE,IAFqB;AAG3B,MAAA,EAAE,EAAE;AAHuB,KAA7B;;AAMA,QAAI,KAAK,CAAC,OAAN,CAAc,SAAd,CAAwB,OAA5B,EAAqC;AACnC,UAAI,CAAC,IAAI,CAAC,SAAV,EAAqB;AACnB,aAAK,gBAAL,CAAsB,CAAtB;AACA,QAAA,IAAI,CAAC,SAAL,GAAiB,IAAjB;AACD;;AACD,WAAK,gBAAL,CAAsB,CAAtB,EAAyB,IAAzB;AACD;AACF;;AAES,EAAA,gBAAgB,CAAC,CAAD,EAAyB,CAAzB,EAAoC,CAApC,EAA6C;AACrE,UAAM,IAAI,GAAG,KAAK,YAAL,CAA8C,CAA9C,CAAb;;AACA,QAAI,IAAI,CAAC,SAAT,EAAoB;AAClB,WAAK,iBAAL,CAAuB,CAAvB,EAA0B,IAA1B;AACD;;AAED,QAAI,IAAI,CAAC,MAAT,EAAiB;AACf,WAAK,WAAL,CAAiB,aAAjB;AACA,WAAK,cAAL,CAAoB,YAApB,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,KAAK,IAAhD;AACD;;AAED,IAAA,IAAI,CAAC,MAAL,GAAc,KAAd;AACA,IAAA,IAAI,CAAC,SAAL,GAAiB,KAAjB;AACD;;AAES,EAAA,eAAe,CAAC,CAAD,EAAY,CAAZ,EAAqB;AAC5C,UAAM,QAAQ,GAAG,KAAK,KAAL,CAAW,QAAX,CAAoB,MAArC;;AACA,QAAI,QAAJ,EAAc;AACZ,MAAA,QAAQ,CAAC,UAAT,CAAoB,CAApB,EAAuB,CAAvB;AACD;AACF;;AAvoCgC;;AA6uCnC,CAAA,UAAiB,QAAjB,EAAyB;AACV,EAAA,QAAA,CAAA,WAAA,GAAc,MAAM,QAAQ,CAAC,IAAI,EAAjC;;AAEb,WAAgB,UAAhB,CAA2B,QAA3B,EAAwC;AACtC,QAAI,QAAQ,IAAI,IAAhB,EAAsB;AACpB,aAAO,KAAP;AACD;;AAED,QAAI,QAAQ,YAAY,QAAxB,EAAkC;AAChC,aAAO,IAAP;AACD;;AAED,UAAM,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,WAAR,CAApB;AACA,UAAM,IAAI,GAAG,QAAb;;AAEA,QACE,CAAC,GAAG,IAAI,IAAP,IAAe,GAAG,KAAK,QAAA,CAAA,WAAxB,KACA,OAAO,IAAI,CAAC,UAAZ,KAA2B,UAD3B,IAEA,OAAO,IAAI,CAAC,UAAZ,KAA2B,UAF3B,IAGA,OAAO,IAAI,CAAC,aAAZ,KAA8B,UAH9B,IAIA,OAAO,IAAI,CAAC,MAAZ,KAAuB,UAJvB,IAKA,OAAO,IAAI,CAAC,YAAZ,KAA6B,UAL7B,IAMA,OAAO,IAAI,CAAC,MAAZ,KAAuB,UANvB,IAOA,OAAO,IAAI,CAAC,MAAZ,KAAuB,UAPvB,IAQA,OAAO,IAAI,CAAC,SAAZ,KAA0B,UAT5B,EAUE;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AA3Be,EAAA,QAAA,CAAA,UAAA,GAAU,UAAV;AA4BjB,CA/BD,EAAiB,QAAQ,KAAR,QAAQ,GAAA,EAAA,CAAzB;;AA0DA,QAAQ,CAAC,MAAT,CAAgB;AACd,EAAA,YAAY,EAAE,IADA;AAEd,EAAA,QAAQ,EAAE,CAFI;AAGd,EAAA,SAAS,EAAE,CAAC,QAAD,CAHG;AAId,EAAA,OAAO,EAAE;AACP,IAAA,IAAI,EAAE,CAAC,QAAD,CADC;AAEP,IAAA,MAAM,EAAE,CAAC,QAAD,CAFD;AAGP,IAAA,KAAK,EAAE,CAAC,QAAD,CAHA;AAIP,IAAA,IAAI,EAAE,CAAC,QAAD,EAAW,OAAX,EAAoB,OAApB,CAJC;AAKP,IAAA,KAAK,EAAE,CAAC,QAAD,EAAW,OAAX,CALA;AAMP,IAAA,QAAQ,EAAE,CAAC,WAAD,EAAc,OAAd,CANH;AAOP,IAAA,KAAK,EAAE,CAAC,OAAD,CAPA;AAQP,IAAA,KAAK,EAAE,CAAC,OAAD;AARA;AAJK,CAAhB;AAgBA,QAAQ,CAAC,QAAT,CAAkB,QAAlB,CAA2B,MAA3B,EAAmC,QAAnC,EAA6C,IAA7C","sourceRoot":"","sourcesContent":["import { Util, Config } from '../global';\nimport { ArrayExt, FunctionExt, Dom, Vector } from '../util';\nimport { Rectangle, Point } from '../geometry';\nimport { Cell } from '../model/cell';\nimport { CellView } from './cell';\nimport { Markup } from './markup';\nexport class NodeView extends CellView {\n    constructor() {\n        super(...arguments);\n        this.scalableNode = null;\n        this.rotatableNode = null;\n        this.scalableSelector = 'scalable';\n        this.rotatableSelector = 'rotatable';\n        this.defaultPortMarkup = Markup.getPortMarkup();\n        this.defaultPortLabelMarkup = Markup.getPortLabelMarkup();\n        this.defaultPortContainerMarkup = Markup.getPortContainerMarkup();\n        this.portsCache = {};\n        // #endregion\n    }\n    get [Symbol.toStringTag]() {\n        return NodeView.toStringTag;\n    }\n    getContainerClassName() {\n        const classList = [\n            super.getContainerClassName(),\n            this.prefixClassName('node'),\n        ];\n        if (!this.can('nodeMovable')) {\n            classList.push(this.prefixClassName('node-immovable'));\n        }\n        return classList.join(' ');\n    }\n    updateClassName(e) {\n        const target = e.target;\n        if (target.hasAttribute('magnet')) {\n            // port\n            const className = this.prefixClassName('port-unconnectable');\n            if (this.can('magnetConnectable')) {\n                Dom.removeClass(target, className);\n            }\n            else {\n                Dom.addClass(target, className);\n            }\n        }\n        else {\n            // node\n            const className = this.prefixClassName('node-immovable');\n            if (this.can('nodeMovable')) {\n                this.removeClass(className);\n            }\n            else {\n                this.addClass(className);\n            }\n        }\n    }\n    isNodeView() {\n        return true;\n    }\n    confirmUpdate(flag, options = {}) {\n        let ret = flag;\n        if (this.hasAction(ret, 'ports')) {\n            this.removePorts();\n            this.cleanPortsCache();\n        }\n        if (this.hasAction(ret, 'render')) {\n            this.render();\n            ret = this.removeAction(ret, [\n                'render',\n                'update',\n                'resize',\n                'translate',\n                'rotate',\n                'ports',\n                'tools',\n            ]);\n        }\n        else {\n            ret = this.handleAction(ret, 'resize', () => this.resize(options), 'update');\n            ret = this.handleAction(ret, 'update', () => this.update(), \n            // `update()` will render ports when useCSSSelectors are enabled\n            Config.useCSSSelector ? 'ports' : null);\n            ret = this.handleAction(ret, 'translate', () => this.translate());\n            ret = this.handleAction(ret, 'rotate', () => this.rotate());\n            ret = this.handleAction(ret, 'ports', () => this.renderPorts());\n            ret = this.handleAction(ret, 'tools', () => this.renderTools());\n        }\n        return ret;\n    }\n    update(partialAttrs) {\n        this.cleanCache();\n        // When CSS selector strings are used, make sure no rule matches port nodes.\n        if (Config.useCSSSelector) {\n            this.removePorts();\n        }\n        const node = this.cell;\n        const size = node.getSize();\n        const attrs = node.getAttrs();\n        this.updateAttrs(this.container, attrs, {\n            attrs: partialAttrs === attrs ? null : partialAttrs,\n            rootBBox: new Rectangle(0, 0, size.width, size.height),\n            selectors: this.selectors,\n            scalableNode: this.scalableNode,\n            rotatableNode: this.rotatableNode,\n        });\n        if (Config.useCSSSelector) {\n            this.renderPorts();\n        }\n    }\n    renderMarkup() {\n        const markup = this.cell.markup;\n        if (markup) {\n            if (typeof markup === 'string') {\n                return this.renderStringMarkup(markup);\n            }\n            return this.renderJSONMarkup(markup);\n        }\n        throw new TypeError('Invalid node markup.');\n    }\n    renderJSONMarkup(markup) {\n        const ret = this.parseJSONMarkup(markup, this.container);\n        const one = (elems) => Array.isArray(elems) ? elems[0] : elems;\n        this.selectors = ret.selectors;\n        this.rotatableNode = one(this.selectors[this.rotatableSelector]);\n        this.scalableNode = one(this.selectors[this.scalableSelector]);\n        this.container.appendChild(ret.fragment);\n    }\n    renderStringMarkup(markup) {\n        Dom.append(this.container, Vector.toNodes(Vector.createVectors(markup)));\n        this.rotatableNode = Dom.findOne(this.container, `.${this.rotatableSelector}`);\n        this.scalableNode = Dom.findOne(this.container, `.${this.scalableSelector}`);\n        this.selectors = {};\n        if (this.rootSelector) {\n            this.selectors[this.rootSelector] = this.container;\n        }\n    }\n    render() {\n        this.empty();\n        this.renderMarkup();\n        if (this.scalableNode) {\n            // Double update is necessary for elements with the scalable group only\n            // Note the `resize()` triggers the other `update`.\n            this.update();\n        }\n        this.resize();\n        if (this.rotatableNode) {\n            this.rotate();\n            this.translate();\n        }\n        else {\n            this.updateTransform();\n        }\n        if (!Config.useCSSSelector) {\n            this.renderPorts();\n        }\n        this.renderTools();\n        return this;\n    }\n    resize(opt = {}) {\n        if (this.scalableNode) {\n            return this.updateSize(opt);\n        }\n        if (this.cell.getAngle()) {\n            this.rotate();\n        }\n        this.update();\n    }\n    translate() {\n        if (this.rotatableNode) {\n            return this.updateTranslation();\n        }\n        this.updateTransform();\n    }\n    rotate() {\n        if (this.rotatableNode) {\n            this.updateRotation();\n            // It's necessary to call the update for the nodes outside\n            // the rotatable group referencing nodes inside the group\n            this.update();\n            return;\n        }\n        this.updateTransform();\n    }\n    getTranslationString() {\n        const position = this.cell.getPosition();\n        return `translate(${position.x},${position.y})`;\n    }\n    getRotationString() {\n        const angle = this.cell.getAngle();\n        if (angle) {\n            const size = this.cell.getSize();\n            return `rotate(${angle},${size.width / 2},${size.height / 2})`;\n        }\n    }\n    updateTransform() {\n        let transform = this.getTranslationString();\n        const rot = this.getRotationString();\n        if (rot) {\n            transform += ` ${rot}`;\n        }\n        this.container.setAttribute('transform', transform);\n    }\n    updateRotation() {\n        if (this.rotatableNode != null) {\n            const transform = this.getRotationString();\n            if (transform != null) {\n                this.rotatableNode.setAttribute('transform', transform);\n            }\n            else {\n                this.rotatableNode.removeAttribute('transform');\n            }\n        }\n    }\n    updateTranslation() {\n        this.container.setAttribute('transform', this.getTranslationString());\n    }\n    updateSize(opt = {}) {\n        const cell = this.cell;\n        const size = cell.getSize();\n        const angle = cell.getAngle();\n        const scalableNode = this.scalableNode;\n        // Getting scalable group's bbox.\n        // Due to a bug in webkit's native SVG .getBBox implementation, the\n        // bbox of groups with path children includes the paths' control points.\n        // To work around the issue, we need to check whether there are any path\n        // elements inside the scalable group.\n        let recursive = false;\n        if (scalableNode.getElementsByTagName('path').length > 0) {\n            // If scalable has at least one descendant that is a path, we need\n            // toswitch to recursive bbox calculation. Otherwise, group bbox\n            // calculation works and so we can use the (faster) native function.\n            recursive = true;\n        }\n        const scalableBBox = Dom.getBBox(scalableNode, { recursive });\n        // Make sure `scalableBbox.width` and `scalableBbox.height` are not zero\n        // which can happen if the element does not have any content.\n        const sx = size.width / (scalableBBox.width || 1);\n        const sy = size.height / (scalableBBox.height || 1);\n        scalableNode.setAttribute('transform', `scale(${sx},${sy})`);\n        // Now the interesting part. The goal is to be able to store the object geometry via just `x`, `y`, `angle`, `width` and `height`\n        // Order of transformations is significant but we want to reconstruct the object always in the order:\n        // resize(), rotate(), translate() no matter of how the object was transformed. For that to work,\n        // we must adjust the `x` and `y` coordinates of the object whenever we resize it (because the origin of the\n        // rotation changes). The new `x` and `y` coordinates are computed by canceling the previous rotation\n        // around the center of the resized object (which is a different origin then the origin of the previous rotation)\n        // and getting the top-left corner of the resulting object. Then we clean up the rotation back to what it originally was.\n        // Cancel the rotation but now around a different origin, which is the center of the scaled object.\n        const rotatableNode = this.rotatableNode;\n        if (rotatableNode != null) {\n            const transform = rotatableNode.getAttribute('transform');\n            if (transform) {\n                rotatableNode.setAttribute('transform', `${transform} rotate(${-angle},${size.width / 2},${size.height / 2})`);\n                const rotatableBBox = Dom.getBBox(scalableNode, {\n                    target: this.graph.view.stage,\n                });\n                // Store new x, y and perform rotate() again against the new rotation origin.\n                cell.prop('position', { x: rotatableBBox.x, y: rotatableBBox.y }, Object.assign({ updated: true }, opt));\n                this.translate();\n                this.rotate();\n            }\n        }\n        // Update must always be called on non-rotated element. Otherwise,\n        // relative positioning would work with wrong (rotated) bounding boxes.\n        this.update();\n    }\n    // #region ports\n    findPortElem(portId, selector) {\n        const cache = portId ? this.portsCache[portId] : null;\n        if (!cache) {\n            return null;\n        }\n        const portRoot = cache.portContentElement;\n        const portSelectors = cache.portContentSelectors || {};\n        return this.findOne(selector, portRoot, portSelectors);\n    }\n    initializePorts() {\n        this.cleanPortsCache();\n    }\n    refreshPorts() {\n        this.removePorts();\n        this.cleanPortsCache();\n        this.renderPorts();\n    }\n    cleanPortsCache() {\n        this.portsCache = {};\n    }\n    removePorts() {\n        Object.keys(this.portsCache).forEach((portId) => {\n            const cached = this.portsCache[portId];\n            Dom.remove(cached.portElement);\n        });\n    }\n    renderPorts() {\n        const container = this.getPortsContainer();\n        // References to rendered elements without z-index\n        const references = [];\n        container.childNodes.forEach((child) => {\n            references.push(child);\n        });\n        const portsGropsByZ = ArrayExt.groupBy(this.cell.getParsedPorts(), 'zIndex');\n        const autoZIndexKey = 'auto';\n        // render non-z first\n        if (portsGropsByZ[autoZIndexKey]) {\n            portsGropsByZ[autoZIndexKey].forEach((port) => {\n                const portElement = this.getPortElement(port);\n                container.append(portElement);\n                references.push(portElement);\n            });\n        }\n        Object.keys(portsGropsByZ).forEach((key) => {\n            if (key !== autoZIndexKey) {\n                const zIndex = parseInt(key, 10);\n                this.appendPorts(portsGropsByZ[key], zIndex, references);\n            }\n        });\n        this.updatePorts();\n    }\n    getPortsContainer() {\n        return this.rotatableNode || this.container;\n    }\n    appendPorts(ports, zIndex, refs) {\n        const elems = ports.map((p) => this.getPortElement(p));\n        if (refs[zIndex] || zIndex < 0) {\n            Dom.before(refs[Math.max(zIndex, 0)], elems);\n        }\n        else {\n            Dom.append(this.getPortsContainer(), elems);\n        }\n    }\n    getPortElement(port) {\n        const cached = this.portsCache[port.id];\n        if (cached) {\n            return cached.portElement;\n        }\n        return this.createPortElement(port);\n    }\n    createPortElement(port) {\n        let renderResult = Markup.renderMarkup(this.getPortContainerMarkup());\n        const portElement = renderResult.elem;\n        if (portElement == null) {\n            throw new Error('Invalid port container markup.');\n        }\n        renderResult = Markup.renderMarkup(this.getPortMarkup(port));\n        const portContentElement = renderResult.elem;\n        const portContentSelectors = renderResult.selectors;\n        if (portContentElement == null) {\n            throw new Error('Invalid port markup.');\n        }\n        this.setAttrs({\n            port: port.id,\n            'port-group': port.group,\n        }, portContentElement);\n        renderResult = Markup.renderMarkup(this.getPortLabelMarkup(port.label));\n        const portLabelElement = renderResult.elem;\n        const portLabelSelectors = renderResult.selectors;\n        if (portLabelElement == null) {\n            throw new Error('Invalid port label markup.');\n        }\n        let portSelectors;\n        if (portContentSelectors && portLabelSelectors) {\n            // eslint-disable-next-line\n            for (const key in portLabelSelectors) {\n                if (portContentSelectors[key] && key !== this.rootSelector) {\n                    throw new Error('Selectors within port must be unique.');\n                }\n            }\n            portSelectors = Object.assign(Object.assign({}, portContentSelectors), portLabelSelectors);\n        }\n        else {\n            portSelectors = portContentSelectors || portLabelSelectors;\n        }\n        Dom.addClass(portElement, 'x6-port');\n        Dom.addClass(portContentElement, 'x6-port-body');\n        Dom.addClass(portLabelElement, 'x6-port-label');\n        portElement.appendChild(portContentElement);\n        portElement.appendChild(portLabelElement);\n        this.portsCache[port.id] = {\n            portElement,\n            portSelectors,\n            portLabelElement,\n            portLabelSelectors,\n            portContentElement,\n            portContentSelectors,\n        };\n        this.graph.hook.onPortRendered({\n            port,\n            node: this.cell,\n            container: portElement,\n            selectors: portSelectors,\n            labelContainer: portLabelElement,\n            labelSelectors: portLabelSelectors,\n            contentContainer: portContentElement,\n            contentSelectors: portContentSelectors,\n        });\n        return portElement;\n    }\n    updatePorts() {\n        // Layout ports without group\n        this.updatePortGroup();\n        // Layout ports with explicit group\n        const groups = this.cell.getParsedGroups();\n        Object.keys(groups).forEach((groupName) => this.updatePortGroup(groupName));\n    }\n    updatePortGroup(groupName) {\n        const bbox = Rectangle.fromSize(this.cell.getSize());\n        const metrics = this.cell.getPortsLayoutByGroup(groupName, bbox);\n        for (let i = 0, n = metrics.length; i < n; i += 1) {\n            const metric = metrics[i];\n            const portId = metric.portId;\n            const cached = this.portsCache[portId] || {};\n            const portLayout = metric.portLayout;\n            this.applyPortTransform(cached.portElement, portLayout);\n            if (metric.portAttrs != null) {\n                const options = {\n                    selectors: cached.portSelectors || {},\n                };\n                if (metric.portSize) {\n                    options.rootBBox = Rectangle.fromSize(metric.portSize);\n                }\n                this.updateAttrs(cached.portElement, metric.portAttrs, options);\n            }\n            const labelLayout = metric.labelLayout;\n            if (labelLayout) {\n                this.applyPortTransform(cached.portLabelElement, labelLayout, -(portLayout.angle || 0));\n                if (labelLayout.attrs) {\n                    const options = {\n                        selectors: cached.portLabelSelectors || {},\n                    };\n                    if (metric.labelSize) {\n                        options.rootBBox = Rectangle.fromSize(metric.labelSize);\n                    }\n                    this.updateAttrs(cached.portLabelElement, labelLayout.attrs, options);\n                }\n            }\n        }\n    }\n    applyPortTransform(element, layout, initialAngle = 0) {\n        const angle = layout.angle;\n        const position = layout.position;\n        const matrix = Dom.createSVGMatrix()\n            .rotate(initialAngle)\n            .translate(position.x || 0, position.y || 0)\n            .rotate(angle || 0);\n        Dom.transform(element, matrix, { absolute: true });\n    }\n    getPortContainerMarkup() {\n        return this.cell.getPortContainerMarkup() || this.defaultPortContainerMarkup;\n    }\n    getPortMarkup(port) {\n        return port.markup || this.cell.portMarkup || this.defaultPortMarkup;\n    }\n    getPortLabelMarkup(label) {\n        return (label.markup || this.cell.portLabelMarkup || this.defaultPortLabelMarkup);\n    }\n    getEventArgs(e, x, y) {\n        const view = this; // eslint-disable-line\n        const node = view.cell;\n        const cell = node;\n        if (x == null || y == null) {\n            return { e, view, node, cell };\n        }\n        return { e, x, y, view, node, cell };\n    }\n    notifyMouseDown(e, x, y) {\n        super.onMouseDown(e, x, y);\n        this.notify('node:mousedown', this.getEventArgs(e, x, y));\n    }\n    notifyMouseMove(e, x, y) {\n        super.onMouseMove(e, x, y);\n        this.notify('node:mousemove', this.getEventArgs(e, x, y));\n    }\n    notifyMouseUp(e, x, y) {\n        super.onMouseUp(e, x, y);\n        this.notify('node:mouseup', this.getEventArgs(e, x, y));\n    }\n    onClick(e, x, y) {\n        super.onClick(e, x, y);\n        this.notify('node:click', this.getEventArgs(e, x, y));\n    }\n    onDblClick(e, x, y) {\n        super.onDblClick(e, x, y);\n        this.notify('node:dblclick', this.getEventArgs(e, x, y));\n    }\n    onContextMenu(e, x, y) {\n        super.onContextMenu(e, x, y);\n        this.notify('node:contextmenu', this.getEventArgs(e, x, y));\n    }\n    onMouseDown(e, x, y) {\n        if (this.isPropagationStopped(e)) {\n            return;\n        }\n        this.notifyMouseDown(e, x, y);\n        this.startNodeDragging(e, x, y);\n    }\n    onMouseMove(e, x, y) {\n        const data = this.getEventData(e);\n        const action = data.action;\n        if (action === 'magnet') {\n            this.dragMagnet(e, x, y);\n        }\n        else {\n            if (action === 'move') {\n                const meta = data;\n                const view = meta.targetView || this;\n                view.dragNode(e, x, y);\n                view.notify('node:moving', {\n                    e,\n                    x,\n                    y,\n                    view,\n                    cell: view.cell,\n                    node: view.cell,\n                });\n            }\n            this.notifyMouseMove(e, x, y);\n        }\n        this.setEventData(e, data);\n    }\n    onMouseUp(e, x, y) {\n        const data = this.getEventData(e);\n        const action = data.action;\n        if (action === 'magnet') {\n            this.stopMagnetDragging(e, x, y);\n        }\n        else {\n            this.notifyMouseUp(e, x, y);\n            if (action === 'move') {\n                const meta = data;\n                const view = meta.targetView || this;\n                view.stopNodeDragging(e, x, y);\n            }\n        }\n        const magnet = data.targetMagnet;\n        if (magnet) {\n            this.onMagnetClick(e, magnet, x, y);\n        }\n        this.checkMouseleave(e);\n    }\n    onMouseOver(e) {\n        super.onMouseOver(e);\n        this.notify('node:mouseover', this.getEventArgs(e));\n    }\n    onMouseOut(e) {\n        super.onMouseOut(e);\n        this.notify('node:mouseout', this.getEventArgs(e));\n    }\n    onMouseEnter(e) {\n        this.updateClassName(e);\n        super.onMouseEnter(e);\n        this.notify('node:mouseenter', this.getEventArgs(e));\n    }\n    onMouseLeave(e) {\n        super.onMouseLeave(e);\n        this.notify('node:mouseleave', this.getEventArgs(e));\n    }\n    onMouseWheel(e, x, y, delta) {\n        super.onMouseWheel(e, x, y, delta);\n        this.notify('node:mousewheel', Object.assign({ delta }, this.getEventArgs(e, x, y)));\n    }\n    onMagnetClick(e, magnet, x, y) {\n        const count = this.graph.view.getMouseMovedCount(e);\n        if (count > this.graph.options.clickThreshold) {\n            return;\n        }\n        this.notify('node:magnet:click', Object.assign({ magnet }, this.getEventArgs(e, x, y)));\n    }\n    onMagnetDblClick(e, magnet, x, y) {\n        this.notify('node:magnet:dblclick', Object.assign({ magnet }, this.getEventArgs(e, x, y)));\n    }\n    onMagnetContextMenu(e, magnet, x, y) {\n        this.notify('node:magnet:contextmenu', Object.assign({ magnet }, this.getEventArgs(e, x, y)));\n    }\n    onMagnetMouseDown(e, magnet, x, y) {\n        this.startMagnetDragging(e, x, y);\n    }\n    onCustomEvent(e, name, x, y) {\n        this.notify('node:customevent', Object.assign({ name }, this.getEventArgs(e, x, y)));\n        super.onCustomEvent(e, name, x, y);\n    }\n    prepareEmbedding(e) {\n        // const cell = data.cell || this.cell\n        // const graph = data.graph || this.graph\n        // const model = graph.model\n        // model.startBatch('to-front')\n        // // Bring the model to the front with all his embeds.\n        // cell.toFront({ deep: true, ui: true })\n        // const maxZ = model\n        //   .getNodes()\n        //   .reduce((max, cell) => Math.max(max, cell.getZIndex() || 0), 0)\n        // const connectedEdges = model.getConnectedEdges(cell, {\n        //   deep: true,\n        //   enclosed: true,\n        // })\n        // connectedEdges.forEach((edge) => {\n        //   const zIndex = edge.getZIndex() || 0\n        //   if (zIndex <= maxZ) {\n        //     edge.setZIndex(maxZ + 1, { ui: true })\n        //   }\n        // })\n        // model.stopBatch('to-front')\n        // Before we start looking for suitable parent we remove the current one.\n        // const parent = cell.getParent()\n        // if (parent) {\n        //   parent.unembed(cell, { ui: true })\n        // }\n        const data = this.getEventData(e);\n        const node = data.cell || this.cell;\n        const view = this.graph.findViewByCell(node);\n        const localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n        this.notify('node:embed', {\n            e,\n            node,\n            view,\n            cell: node,\n            x: localPoint.x,\n            y: localPoint.y,\n            currentParent: node.getParent(),\n        });\n    }\n    processEmbedding(e, data) {\n        const cell = data.cell || this.cell;\n        const graph = data.graph || this.graph;\n        const options = graph.options.embedding;\n        const findParent = options.findParent;\n        let candidates = typeof findParent === 'function'\n            ? FunctionExt.call(findParent, graph, {\n                view: this,\n                node: this.cell,\n            }).filter((c) => {\n                return (Cell.isCell(c) &&\n                    this.cell.id !== c.id &&\n                    !c.isDescendantOf(this.cell));\n            })\n            : graph.model.getNodesUnderNode(cell, {\n                by: findParent,\n            });\n        // Picks the node with the highest `z` index\n        if (options.frontOnly) {\n            candidates = candidates.slice(-1);\n        }\n        let newCandidateView = null;\n        const prevCandidateView = data.candidateEmbedView;\n        const validateEmbeding = options.validate;\n        for (let i = candidates.length - 1; i >= 0; i -= 1) {\n            const candidate = candidates[i];\n            if (prevCandidateView && prevCandidateView.cell.id === candidate.id) {\n                // candidate remains the same\n                newCandidateView = prevCandidateView;\n                break;\n            }\n            else {\n                const view = candidate.findView(graph);\n                if (FunctionExt.call(validateEmbeding, graph, {\n                    child: this.cell,\n                    parent: view.cell,\n                    childView: this,\n                    parentView: view,\n                })) {\n                    // flip to the new candidate\n                    newCandidateView = view;\n                    break;\n                }\n            }\n        }\n        this.clearEmbedding(data);\n        if (newCandidateView) {\n            newCandidateView.highlight(null, { type: 'embedding' });\n        }\n        data.candidateEmbedView = newCandidateView;\n        const localPoint = graph.snapToGrid(e.clientX, e.clientY);\n        this.notify('node:embedding', {\n            e,\n            cell,\n            node: cell,\n            view: graph.findViewByCell(cell),\n            x: localPoint.x,\n            y: localPoint.y,\n            currentParent: cell.getParent(),\n            candidateParent: newCandidateView ? newCandidateView.cell : null,\n        });\n    }\n    clearEmbedding(data) {\n        const candidateView = data.candidateEmbedView;\n        if (candidateView) {\n            candidateView.unhighlight(null, { type: 'embedding' });\n            data.candidateEmbedView = null;\n        }\n    }\n    finalizeEmbedding(e, data) {\n        const cell = data.cell || this.cell;\n        const graph = data.graph || this.graph;\n        const view = graph.findViewByCell(cell);\n        const parent = cell.getParent();\n        const candidateView = data.candidateEmbedView;\n        if (candidateView) {\n            // Candidate view is chosen to become the parent of the node.\n            candidateView.unhighlight(null, { type: 'embedding' });\n            data.candidateEmbedView = null;\n            if (parent == null || parent.id !== candidateView.cell.id) {\n                candidateView.cell.insertChild(cell, undefined, { ui: true });\n            }\n        }\n        else if (parent) {\n            parent.unembed(cell, { ui: true });\n        }\n        graph.model.getConnectedEdges(cell, { deep: true }).forEach((edge) => {\n            edge.updateParent({ ui: true });\n        });\n        const localPoint = graph.snapToGrid(e.clientX, e.clientY);\n        if (view) {\n            view.notify('node:embedded', {\n                e,\n                cell,\n                x: localPoint.x,\n                y: localPoint.y,\n                node: cell,\n                view: graph.findViewByCell(cell),\n                previousParent: parent,\n                currentParent: cell.getParent(),\n            });\n        }\n    }\n    getDelegatedView() {\n        let cell = this.cell;\n        let view = this; // eslint-disable-line\n        while (view) {\n            if (cell.isEdge()) {\n                break;\n            }\n            if (!cell.hasParent() || view.can('stopDelegateOnDragging')) {\n                return view;\n            }\n            cell = cell.getParent();\n            view = this.graph.renderer.findViewByCell(cell);\n        }\n        return null;\n    }\n    startMagnetDragging(e, x, y) {\n        if (!this.can('magnetConnectable')) {\n            return;\n        }\n        e.stopPropagation();\n        const magnet = e.currentTarget;\n        const graph = this.graph;\n        this.setEventData(e, {\n            targetMagnet: magnet,\n        });\n        if (graph.hook.validateMagnet(this, magnet, e)) {\n            if (graph.options.magnetThreshold <= 0) {\n                this.startConnectting(e, magnet, x, y);\n            }\n            this.setEventData(e, {\n                action: 'magnet',\n            });\n            this.stopPropagation(e);\n        }\n        else {\n            this.onMouseDown(e, x, y);\n        }\n        graph.view.delegateDragEvents(e, this);\n    }\n    startConnectting(e, magnet, x, y) {\n        this.graph.model.startBatch('add-edge');\n        const edgeView = this.createEdgeFromMagnet(magnet, x, y);\n        edgeView.notifyMouseDown(e, x, y); // backwards compatibility events\n        edgeView.setEventData(e, edgeView.prepareArrowheadDragging('target', {\n            x,\n            y,\n            isNewEdge: true,\n            fallbackAction: 'remove',\n        }));\n        this.setEventData(e, { edgeView });\n    }\n    createEdgeFromMagnet(magnet, x, y) {\n        const graph = this.graph;\n        const model = graph.model;\n        const edge = graph.hook.getDefaultEdge(this, magnet);\n        edge.setSource(Object.assign(Object.assign({}, edge.getSource()), this.getEdgeTerminal(magnet, x, y, edge, 'source')));\n        edge.setTarget(Object.assign(Object.assign({}, edge.getTarget()), { x, y }));\n        edge.addTo(model, { async: false, ui: true });\n        return edge.findView(graph);\n    }\n    dragMagnet(e, x, y) {\n        const data = this.getEventData(e);\n        const edgeView = data.edgeView;\n        if (edgeView) {\n            edgeView.onMouseMove(e, x, y);\n            this.autoScrollGraph(e.clientX, e.clientY);\n        }\n        else {\n            const graph = this.graph;\n            const magnetThreshold = graph.options.magnetThreshold;\n            const currentTarget = this.getEventTarget(e);\n            const targetMagnet = data.targetMagnet;\n            // magnetThreshold when the pointer leaves the magnet\n            if (magnetThreshold === 'onleave') {\n                if (targetMagnet === currentTarget ||\n                    targetMagnet.contains(currentTarget)) {\n                    return;\n                }\n                // eslint-disable-next-line no-lonely-if\n            }\n            else {\n                // magnetThreshold defined as a number of movements\n                if (graph.view.getMouseMovedCount(e) <= magnetThreshold) {\n                    return;\n                }\n            }\n            this.startConnectting(e, targetMagnet, x, y);\n        }\n    }\n    stopMagnetDragging(e, x, y) {\n        const data = this.eventData(e);\n        const edgeView = data.edgeView;\n        if (edgeView) {\n            edgeView.onMouseUp(e, x, y);\n            this.graph.model.stopBatch('add-edge');\n        }\n    }\n    notifyUnhandledMouseDown(e, x, y) {\n        this.notify('node:unhandled:mousedown', {\n            e,\n            x,\n            y,\n            view: this,\n            cell: this.cell,\n            node: this.cell,\n        });\n    }\n    notifyNodeMove(name, e, x, y, cell) {\n        let cells = [cell];\n        const selection = this.graph.selection.widget;\n        if (selection && selection.options.movable) {\n            const selectedCells = this.graph.getSelectedCells();\n            if (selectedCells.includes(cell)) {\n                cells = selectedCells.filter((c) => c.isNode());\n            }\n        }\n        cells.forEach((c) => {\n            this.notify(name, {\n                e,\n                x,\n                y,\n                cell: c,\n                node: c,\n                view: c.findView(this.graph),\n            });\n        });\n    }\n    startNodeDragging(e, x, y) {\n        const targetView = this.getDelegatedView();\n        if (targetView == null || !targetView.can('nodeMovable')) {\n            return this.notifyUnhandledMouseDown(e, x, y);\n        }\n        this.setEventData(e, {\n            targetView,\n            action: 'move',\n        });\n        const position = Point.create(targetView.cell.getPosition());\n        targetView.setEventData(e, {\n            moving: false,\n            offset: position.diff(x, y),\n            restrict: this.graph.hook.getRestrictArea(targetView),\n        });\n    }\n    dragNode(e, x, y) {\n        const node = this.cell;\n        const graph = this.graph;\n        const gridSize = graph.getGridSize();\n        const data = this.getEventData(e);\n        const offset = data.offset;\n        const restrict = data.restrict;\n        if (!data.moving) {\n            data.moving = true;\n            this.addClass('node-moving');\n            this.notifyNodeMove('node:move', e, x, y, this.cell);\n        }\n        this.autoScrollGraph(e.clientX, e.clientY);\n        const posX = Util.snapToGrid(x + offset.x, gridSize);\n        const posY = Util.snapToGrid(y + offset.y, gridSize);\n        node.setPosition(posX, posY, {\n            restrict,\n            deep: true,\n            ui: true,\n        });\n        if (graph.options.embedding.enabled) {\n            if (!data.embedding) {\n                this.prepareEmbedding(e);\n                data.embedding = true;\n            }\n            this.processEmbedding(e, data);\n        }\n    }\n    stopNodeDragging(e, x, y) {\n        const data = this.getEventData(e);\n        if (data.embedding) {\n            this.finalizeEmbedding(e, data);\n        }\n        if (data.moving) {\n            this.removeClass('node-moving');\n            this.notifyNodeMove('node:moved', e, x, y, this.cell);\n        }\n        data.moving = false;\n        data.embedding = false;\n    }\n    autoScrollGraph(x, y) {\n        const scroller = this.graph.scroller.widget;\n        if (scroller) {\n            scroller.autoScroll(x, y);\n        }\n    }\n}\n(function (NodeView) {\n    NodeView.toStringTag = `X6.${NodeView.name}`;\n    function isNodeView(instance) {\n        if (instance == null) {\n            return false;\n        }\n        if (instance instanceof NodeView) {\n            return true;\n        }\n        const tag = instance[Symbol.toStringTag];\n        const view = instance;\n        if ((tag == null || tag === NodeView.toStringTag) &&\n            typeof view.isNodeView === 'function' &&\n            typeof view.isEdgeView === 'function' &&\n            typeof view.confirmUpdate === 'function' &&\n            typeof view.update === 'function' &&\n            typeof view.findPortElem === 'function' &&\n            typeof view.resize === 'function' &&\n            typeof view.rotate === 'function' &&\n            typeof view.translate === 'function') {\n            return true;\n        }\n        return false;\n    }\n    NodeView.isNodeView = isNodeView;\n})(NodeView || (NodeView = {}));\nNodeView.config({\n    isSvgElement: true,\n    priority: 0,\n    bootstrap: ['render'],\n    actions: {\n        view: ['render'],\n        markup: ['render'],\n        attrs: ['update'],\n        size: ['resize', 'ports', 'tools'],\n        angle: ['rotate', 'tools'],\n        position: ['translate', 'tools'],\n        ports: ['ports'],\n        tools: ['tools'],\n    },\n});\nNodeView.registry.register('node', NodeView, true);\n//# sourceMappingURL=node.js.map"]},"metadata":{},"sourceType":"module"}