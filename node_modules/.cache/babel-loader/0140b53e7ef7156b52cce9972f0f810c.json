{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Basecoat } from '../common';\nimport { ObjectExt } from '../util';\nexport class Store extends Basecoat {\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.pending = false;\n    this.changing = false;\n    this.data = {};\n    this.mutate(ObjectExt.cloneDeep(data));\n    this.changed = {};\n  }\n\n  mutate(data) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const unset = options.unset === true;\n    const silent = options.silent === true;\n    const changes = [];\n    const changing = this.changing;\n    this.changing = true;\n\n    if (!changing) {\n      this.previous = ObjectExt.cloneDeep(this.data);\n      this.changed = {};\n    }\n\n    const current = this.data;\n    const previous = this.previous;\n    const changed = this.changed;\n    Object.keys(data).forEach(k => {\n      const key = k;\n      const newValue = data[key];\n\n      if (!ObjectExt.isEqual(current[key], newValue)) {\n        changes.push(key);\n      }\n\n      if (!ObjectExt.isEqual(previous[key], newValue)) {\n        changed[key] = newValue;\n      } else {\n        delete changed[key];\n      }\n\n      if (unset) {\n        delete current[key];\n      } else {\n        current[key] = newValue;\n      }\n    });\n\n    if (!silent && changes.length > 0) {\n      this.pending = true;\n      this.pendingOptions = options;\n      changes.forEach(key => {\n        this.emit('change:*', {\n          key,\n          options,\n          store: this,\n          current: current[key],\n          previous: previous[key]\n        });\n      });\n    }\n\n    if (changing) {\n      return this;\n    }\n\n    if (!silent) {\n      // Changes can be recursively nested within `\"change\"` events.\n      while (this.pending) {\n        this.pending = false;\n        this.emit('changed', {\n          current,\n          previous,\n          store: this,\n          options: this.pendingOptions\n        });\n      }\n    }\n\n    this.pending = false;\n    this.changing = false;\n    this.pendingOptions = null;\n    return this;\n  }\n\n  get(key, defaultValue) {\n    if (key == null) {\n      return this.data;\n    }\n\n    const ret = this.data[key];\n    return ret == null ? defaultValue : ret;\n  }\n\n  getPrevious(key) {\n    if (this.previous) {\n      const ret = this.previous[key];\n      return ret == null ? undefined : ret;\n    }\n\n    return undefined;\n  }\n\n  set(key, value, options) {\n    if (key != null) {\n      if (typeof key === 'object') {\n        this.mutate(key, value);\n      } else {\n        this.mutate({\n          [key]: value\n        }, options);\n      }\n    }\n\n    return this;\n  }\n\n  remove(key, options) {\n    const empty = undefined;\n    const subset = {};\n    let opts;\n\n    if (typeof key === 'string') {\n      subset[key] = empty;\n      opts = options;\n    } else if (Array.isArray(key)) {\n      key.forEach(k => subset[k] = empty);\n      opts = options;\n    } else {\n      // eslint-disable-next-line\n      for (const key in this.data) {\n        subset[key] = empty;\n      }\n\n      opts = key;\n    }\n\n    this.mutate(subset, Object.assign(Object.assign({}, opts), {\n      unset: true\n    }));\n    return this;\n  }\n\n  getByPath(path) {\n    return ObjectExt.getByPath(this.data, path, '/');\n  }\n\n  setByPath(path, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const delim = '/';\n    const pathArray = Array.isArray(path) ? [...path] : path.split(delim);\n    const pathString = Array.isArray(path) ? path.join(delim) : path;\n    const property = pathArray[0];\n    const pathArrayLength = pathArray.length;\n    options.propertyPath = pathString;\n    options.propertyValue = value;\n    options.propertyPathArray = pathArray;\n\n    if (pathArrayLength === 1) {\n      this.set(property, value, options);\n    } else {\n      const update = {};\n      let diver = update;\n      let nextKey = property; // Initialize the nested object. Subobjects are either arrays or objects.\n      // An empty array is created if the sub-key is an integer. Otherwise, an\n      // empty object is created.\n\n      for (let i = 1; i < pathArrayLength; i += 1) {\n        const key = pathArray[i];\n        const isArrayIndex = Number.isFinite(Number(key));\n        diver = diver[nextKey] = isArrayIndex ? [] : {};\n        nextKey = key;\n      } // Fills update with the `value` on `path`.\n\n\n      ObjectExt.setByPath(update, pathArray, value, delim);\n      const data = ObjectExt.cloneDeep(this.data); // If rewrite mode enabled, we replace value referenced by path with the\n      // new one (we don't merge).\n\n      if (options.rewrite) {\n        ObjectExt.unsetByPath(data, path, delim);\n      }\n\n      const merged = ObjectExt.merge(data, update);\n      this.set(property, merged[property], options);\n    }\n\n    return this;\n  }\n\n  removeByPath(path, options) {\n    const keys = Array.isArray(path) ? path : path.split('/');\n    const key = keys[0];\n\n    if (keys.length === 1) {\n      this.remove(key, options);\n    } else {\n      const paths = keys.slice(1);\n      const prop = ObjectExt.cloneDeep(this.get(key));\n\n      if (prop) {\n        ObjectExt.unsetByPath(prop, paths);\n      }\n\n      this.set(key, prop, options);\n    }\n\n    return this;\n  }\n\n  hasChanged(key) {\n    if (key == null) {\n      return Object.keys(this.changed).length > 0;\n    }\n\n    return key in this.changed;\n  }\n  /**\n   * Returns an object containing all the data that have changed,\n   * or `null` if there are no changes. Useful for determining what\n   * parts of a view need to be updated.\n   */\n\n\n  getChanges(diff) {\n    if (diff == null) {\n      return this.hasChanged() ? ObjectExt.cloneDeep(this.changed) : null;\n    }\n\n    const old = this.changing ? this.previous : this.data;\n    const changed = {};\n    let hasChanged; // eslint-disable-next-line\n\n    for (const key in diff) {\n      const val = diff[key];\n\n      if (!ObjectExt.isEqual(old[key], val)) {\n        changed[key] = val;\n        hasChanged = true;\n      }\n    }\n\n    return hasChanged ? ObjectExt.cloneDeep(changed) : null;\n  }\n  /**\n   * Returns a copy of the store's `data` object.\n   */\n\n\n  toJSON() {\n    return ObjectExt.cloneDeep(this.data);\n  }\n\n  clone() {\n    const constructor = this.constructor;\n    return new constructor(this.data);\n  }\n\n  dispose() {\n    this.off();\n    this.data = {};\n    this.previous = {};\n    this.changed = {};\n    this.pending = false;\n    this.changing = false;\n    this.pendingOptions = null;\n    this.trigger('disposed', {\n      store: this\n    });\n  }\n\n}\n\n__decorate([Basecoat.dispose()], Store.prototype, \"dispose\", null);","map":{"version":3,"sources":["../../src/model/store.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Basecoat } from '../common';\nimport { ObjectExt } from '../util';\nexport class Store extends Basecoat {\n    constructor(data = {}) {\n        super();\n        this.pending = false;\n        this.changing = false;\n        this.data = {};\n        this.mutate(ObjectExt.cloneDeep(data));\n        this.changed = {};\n    }\n    mutate(data, options = {}) {\n        const unset = options.unset === true;\n        const silent = options.silent === true;\n        const changes = [];\n        const changing = this.changing;\n        this.changing = true;\n        if (!changing) {\n            this.previous = ObjectExt.cloneDeep(this.data);\n            this.changed = {};\n        }\n        const current = this.data;\n        const previous = this.previous;\n        const changed = this.changed;\n        Object.keys(data).forEach((k) => {\n            const key = k;\n            const newValue = data[key];\n            if (!ObjectExt.isEqual(current[key], newValue)) {\n                changes.push(key);\n            }\n            if (!ObjectExt.isEqual(previous[key], newValue)) {\n                changed[key] = newValue;\n            }\n            else {\n                delete changed[key];\n            }\n            if (unset) {\n                delete current[key];\n            }\n            else {\n                current[key] = newValue;\n            }\n        });\n        if (!silent && changes.length > 0) {\n            this.pending = true;\n            this.pendingOptions = options;\n            changes.forEach((key) => {\n                this.emit('change:*', {\n                    key,\n                    options,\n                    store: this,\n                    current: current[key],\n                    previous: previous[key],\n                });\n            });\n        }\n        if (changing) {\n            return this;\n        }\n        if (!silent) {\n            // Changes can be recursively nested within `\"change\"` events.\n            while (this.pending) {\n                this.pending = false;\n                this.emit('changed', {\n                    current,\n                    previous,\n                    store: this,\n                    options: this.pendingOptions,\n                });\n            }\n        }\n        this.pending = false;\n        this.changing = false;\n        this.pendingOptions = null;\n        return this;\n    }\n    get(key, defaultValue) {\n        if (key == null) {\n            return this.data;\n        }\n        const ret = this.data[key];\n        return ret == null ? defaultValue : ret;\n    }\n    getPrevious(key) {\n        if (this.previous) {\n            const ret = this.previous[key];\n            return ret == null ? undefined : ret;\n        }\n        return undefined;\n    }\n    set(key, value, options) {\n        if (key != null) {\n            if (typeof key === 'object') {\n                this.mutate(key, value);\n            }\n            else {\n                this.mutate({ [key]: value }, options);\n            }\n        }\n        return this;\n    }\n    remove(key, options) {\n        const empty = undefined;\n        const subset = {};\n        let opts;\n        if (typeof key === 'string') {\n            subset[key] = empty;\n            opts = options;\n        }\n        else if (Array.isArray(key)) {\n            key.forEach((k) => (subset[k] = empty));\n            opts = options;\n        }\n        else {\n            // eslint-disable-next-line\n            for (const key in this.data) {\n                subset[key] = empty;\n            }\n            opts = key;\n        }\n        this.mutate(subset, Object.assign(Object.assign({}, opts), { unset: true }));\n        return this;\n    }\n    getByPath(path) {\n        return ObjectExt.getByPath(this.data, path, '/');\n    }\n    setByPath(path, value, options = {}) {\n        const delim = '/';\n        const pathArray = Array.isArray(path) ? [...path] : path.split(delim);\n        const pathString = Array.isArray(path) ? path.join(delim) : path;\n        const property = pathArray[0];\n        const pathArrayLength = pathArray.length;\n        options.propertyPath = pathString;\n        options.propertyValue = value;\n        options.propertyPathArray = pathArray;\n        if (pathArrayLength === 1) {\n            this.set(property, value, options);\n        }\n        else {\n            const update = {};\n            let diver = update;\n            let nextKey = property;\n            // Initialize the nested object. Subobjects are either arrays or objects.\n            // An empty array is created if the sub-key is an integer. Otherwise, an\n            // empty object is created.\n            for (let i = 1; i < pathArrayLength; i += 1) {\n                const key = pathArray[i];\n                const isArrayIndex = Number.isFinite(Number(key));\n                diver = diver[nextKey] = isArrayIndex ? [] : {};\n                nextKey = key;\n            }\n            // Fills update with the `value` on `path`.\n            ObjectExt.setByPath(update, pathArray, value, delim);\n            const data = ObjectExt.cloneDeep(this.data);\n            // If rewrite mode enabled, we replace value referenced by path with the\n            // new one (we don't merge).\n            if (options.rewrite) {\n                ObjectExt.unsetByPath(data, path, delim);\n            }\n            const merged = ObjectExt.merge(data, update);\n            this.set(property, merged[property], options);\n        }\n        return this;\n    }\n    removeByPath(path, options) {\n        const keys = Array.isArray(path) ? path : path.split('/');\n        const key = keys[0];\n        if (keys.length === 1) {\n            this.remove(key, options);\n        }\n        else {\n            const paths = keys.slice(1);\n            const prop = ObjectExt.cloneDeep(this.get(key));\n            if (prop) {\n                ObjectExt.unsetByPath(prop, paths);\n            }\n            this.set(key, prop, options);\n        }\n        return this;\n    }\n    hasChanged(key) {\n        if (key == null) {\n            return Object.keys(this.changed).length > 0;\n        }\n        return key in this.changed;\n    }\n    /**\n     * Returns an object containing all the data that have changed,\n     * or `null` if there are no changes. Useful for determining what\n     * parts of a view need to be updated.\n     */\n    getChanges(diff) {\n        if (diff == null) {\n            return this.hasChanged() ? ObjectExt.cloneDeep(this.changed) : null;\n        }\n        const old = this.changing ? this.previous : this.data;\n        const changed = {};\n        let hasChanged;\n        // eslint-disable-next-line\n        for (const key in diff) {\n            const val = diff[key];\n            if (!ObjectExt.isEqual(old[key], val)) {\n                changed[key] = val;\n                hasChanged = true;\n            }\n        }\n        return hasChanged ? ObjectExt.cloneDeep(changed) : null;\n    }\n    /**\n     * Returns a copy of the store's `data` object.\n     */\n    toJSON() {\n        return ObjectExt.cloneDeep(this.data);\n    }\n    clone() {\n        const constructor = this.constructor;\n        return new constructor(this.data);\n    }\n    dispose() {\n        this.off();\n        this.data = {};\n        this.previous = {};\n        this.changed = {};\n        this.pending = false;\n        this.changing = false;\n        this.pendingOptions = null;\n        this.trigger('disposed', { store: this });\n    }\n}\n__decorate([\n    Basecoat.dispose()\n], Store.prototype, \"dispose\", null);\n//# sourceMappingURL=store.js.map"]},"metadata":{},"sourceType":"module"}