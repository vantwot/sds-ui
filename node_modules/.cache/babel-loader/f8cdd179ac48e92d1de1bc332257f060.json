{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport BaseLayer from '../core/BaseLayer';\nimport LineModels from './models';\n\nvar LineLayer = function (_BaseLayer) {\n  _inherits(LineLayer, _BaseLayer);\n\n  var _super = _createSuper(LineLayer);\n\n  function LineLayer() {\n    var _this;\n\n    _classCallCheck(this, LineLayer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", 'LineLayer');\n\n    return _this;\n  }\n\n  _createClass(LineLayer, [{\n    key: \"buildModels\",\n    value: function buildModels() {\n      var shape = this.getModelType();\n      this.layerModel = new LineModels[shape](this);\n      this.models = this.layerModel.initModels();\n    }\n  }, {\n    key: \"rebuildModels\",\n    value: function rebuildModels() {\n      this.models = this.layerModel.buildModels();\n    }\n  }, {\n    key: \"getConfigSchema\",\n    value: function getConfigSchema() {\n      return {\n        properties: {\n          opacity: {\n            type: 'number',\n            minimum: 0,\n            maximum: 1\n          }\n        }\n      };\n    }\n  }, {\n    key: \"getDefaultConfig\",\n    value: function getDefaultConfig() {\n      var type = this.getModelType();\n      var defaultConfig = {\n        line: {},\n        arc3d: {\n          blend: 'additive'\n        },\n        arc: {\n          blend: 'additive'\n        },\n        arcmini: {\n          blend: 'additive'\n        },\n        greatcircle: {\n          blend: 'additive'\n        }\n      };\n      return defaultConfig[type];\n    }\n  }, {\n    key: \"getModelType\",\n    value: function getModelType() {\n      var _shapeAttribute$scale;\n\n      var shapeAttribute = this.styleAttributeService.getLayerStyleAttribute('shape');\n      var shape = shapeAttribute === null || shapeAttribute === void 0 ? void 0 : (_shapeAttribute$scale = shapeAttribute.scale) === null || _shapeAttribute$scale === void 0 ? void 0 : _shapeAttribute$scale.field;\n      return shape || 'line';\n    }\n  }]);\n\n  return LineLayer;\n}(BaseLayer);\n\nexport { LineLayer as default };","map":{"version":3,"sources":["../../src/line/index.ts"],"names":["LineLayer","BaseLayer","shape","LineModels","properties","opacity","type","minimum","maximum","defaultConfig","line","arc3d","blend","arc","arcmini","greatcircle","shapeAttribute"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,SAAA,MAAA,mBAAA;AAEA,OAAA,UAAA,MAAA,UAAA;;IAEqBA,S;;;;;;;;;;;;;;;;2DACG,W;;;;;;;WAEtB,SAAA,WAAA,GAAqB;AACnB,UAAME,KAAK,GAAG,KAAd,YAAc,EAAd;AACA,WAAA,UAAA,GAAkB,IAAIC,UAAU,CAAd,KAAc,CAAd,CAAlB,IAAkB,CAAlB;AACA,WAAA,MAAA,GAAc,KAAA,UAAA,CAAd,UAAc,EAAd;AACD;;;WACD,SAAA,aAAA,GAAuB;AACrB,WAAA,MAAA,GAAc,KAAA,UAAA,CAAd,WAAc,EAAd;AACD;;;WAED,SAAA,eAAA,GAA4B;AAC1B,aAAO;AACLC,QAAAA,UAAU,EAAE;AACVC,UAAAA,OAAO,EAAE;AACPC,YAAAA,IAAI,EADG,QAAA;AAEPC,YAAAA,OAAO,EAFA,CAAA;AAGPC,YAAAA,OAAO,EAAE;AAHF;AADC;AADP,OAAP;AASD;;;WACD,SAAA,gBAAA,GAA6B;AAC3B,UAAMF,IAAI,GAAG,KAAb,YAAa,EAAb;AACA,UAAMG,aAAa,GAAG;AACpBC,QAAAA,IAAI,EADgB,EAAA;AAEpBC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAFa;AAGpBC,QAAAA,GAAG,EAAE;AAAED,UAAAA,KAAK,EAAE;AAAT,SAHe;AAIpBE,QAAAA,OAAO,EAAE;AAAEF,UAAAA,KAAK,EAAE;AAAT,SAJW;AAKpBG,QAAAA,WAAW,EAAE;AAAEH,UAAAA,KAAK,EAAE;AAAT;AALO,OAAtB;AAOA,aAAOH,aAAa,CAApB,IAAoB,CAApB;AACD;;;WACD,SAAA,YAAA,GAAwC;AAAA,UAAA,qBAAA;;AACtC,UAAMO,cAAc,GAAG,KAAA,qBAAA,CAAA,sBAAA,CAAvB,OAAuB,CAAvB;AAGA,UAAMd,KAAK,GAAGc,cAAH,KAAA,IAAGA,IAAAA,cAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAH,CAAA,qBAAA,GAAGA,cAAc,CAAjB,KAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,qBAAAA,CAAd,KAAA;AACA,aAAOd,KAAK,IAAZ,MAAA;AACD;;;;EAxCoCD,S;;SAAlBD,S","sourcesContent":["import BaseLayer from '../core/BaseLayer';\nimport { ILineLayerStyleOptions } from '../core/interface';\nimport LineModels, { LineModelType } from './models';\n\nexport default class LineLayer extends BaseLayer<ILineLayerStyleOptions> {\n  public type: string = 'LineLayer';\n\n  public buildModels() {\n    const shape = this.getModelType();\n    this.layerModel = new LineModels[shape](this);\n    this.models = this.layerModel.initModels();\n  }\n  public rebuildModels() {\n    this.models = this.layerModel.buildModels();\n  }\n\n  protected getConfigSchema() {\n    return {\n      properties: {\n        opacity: {\n          type: 'number',\n          minimum: 0,\n          maximum: 1,\n        },\n      },\n    };\n  }\n  protected getDefaultConfig() {\n    const type = this.getModelType();\n    const defaultConfig = {\n      line: {},\n      arc3d: { blend: 'additive' },\n      arc: { blend: 'additive' },\n      arcmini: { blend: 'additive' },\n      greatcircle: { blend: 'additive' },\n    };\n    return defaultConfig[type];\n  }\n  protected getModelType(): LineModelType {\n    const shapeAttribute = this.styleAttributeService.getLayerStyleAttribute(\n      'shape',\n    );\n    const shape = shapeAttribute?.scale?.field as LineModelType;\n    return shape || 'line';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}