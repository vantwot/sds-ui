{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ManaSyringe, ICommandHandler, ICommandContextProvider, delay } from '@antv/xflow-core';\nimport { XFlowDagCommands, GRAPH_STATUS_INFO, EDGE_PROCESSING_CLASSNAME } from '../constants';\nexport var NsGraphStatusCommand;\n\n(function (NsGraphStatusCommand) {\n  /** Command: 获取执行状态 */\n  NsGraphStatusCommand.MODEL = GRAPH_STATUS_INFO;\n  /** Command: 用于注册 named factory */\n\n  NsGraphStatusCommand.command = XFlowDagCommands.QUERY_GRAPH_STATUS;\n  /** hookName */\n\n  NsGraphStatusCommand.hookKey = 'queryGraphStatus';\n  /** 状态 类型 */\n\n  let StatusEnum;\n\n  (function (StatusEnum) {\n    StatusEnum[\"SUCCESS\"] = \"success\";\n    StatusEnum[\"PROCESSING\"] = \"processing\";\n    StatusEnum[\"ERROR\"] = \"error\";\n    StatusEnum[\"DEFAULT\"] = \"default\";\n    StatusEnum[\"WARNING\"] = \"warning\";\n  })(StatusEnum = NsGraphStatusCommand.StatusEnum || (NsGraphStatusCommand.StatusEnum = {}));\n  /** 按status 分类  */\n\n\n  NsGraphStatusCommand.initStatusMap = () => ({\n    [NsGraphStatusCommand.StatusEnum.DEFAULT]: [],\n    [NsGraphStatusCommand.StatusEnum.PROCESSING]: [],\n    [NsGraphStatusCommand.StatusEnum.ERROR]: [],\n    [NsGraphStatusCommand.StatusEnum.WARNING]: [],\n    [NsGraphStatusCommand.StatusEnum.SUCCESS]: []\n  });\n  /** 接口返回 类型 */\n\n\n  NsGraphStatusCommand.groupByStatus = data => {\n    const seed = NsGraphStatusCommand.initStatusMap();\n    return Object.entries(data).reduce((acc, _ref) => {\n      let [nodeId, value] = _ref;\n      acc[value.status].push(nodeId);\n      return acc;\n    }, seed);\n  };\n  /** diff status */\n\n\n  NsGraphStatusCommand.statusDiff = (cur, next) => {\n    const items = new Set([...cur, ...next]);\n    const diff = {\n      current: [],\n      add: [],\n      remove: []\n    };\n    items.forEach(item => {\n      if (next.includes(item) && !cur.includes(item)) {\n        diff.add.push(item);\n      }\n\n      if (!next.includes(item) && cur.includes(item)) {\n        diff.remove.push(item);\n      }\n    });\n    return diff;\n  };\n\n  NsGraphStatusCommand.shouldStop = info => __awaiter(this, void 0, void 0, function* () {\n    return [StatusEnum.ERROR, StatusEnum.SUCCESS].includes(info.graphStatus);\n  });\n})(NsGraphStatusCommand || (NsGraphStatusCommand = {}));\n/** 创建节点命令 */\n\n\nlet QueryGraphStatusCommand = class QueryGraphStatusCommand {\n  constructor() {\n    /** 状态缓存 */\n    this.statusInfo = NsGraphStatusCommand.initStatusMap();\n    /** 获取Model */\n\n    this.getStatusModel = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const modelService = ctx.getModelService();\n      const statusModel = yield GRAPH_STATUS_INFO.getModel(modelService);\n      return statusModel;\n    });\n    /** 更新Model数据 */\n\n\n    this.updateModelValue = callback => __awaiter(this, void 0, void 0, function* () {\n      const statusModel = yield this.getStatusModel();\n      statusModel.setValue(callback);\n    });\n    /** 停止Looping的flag */\n\n\n    this.stopCurrentStatusLooping = () => __awaiter(this, void 0, void 0, function* () {\n      const statusModel = yield this.getStatusModel();\n      const {\n        subscription\n      } = yield statusModel.getValidValue();\n      subscription.dispose();\n    });\n    /** 设置停止looping的方法 */\n\n\n    this.addStopDispose = () => __awaiter(this, void 0, void 0, function* () {\n      const statusModel = yield this.getStatusModel();\n      const {\n        subscription\n      } = yield statusModel.getValidValue();\n      subscription.push({\n        dispose: () => {\n          /** 重制processing的边的状态 */\n          this.updateEdges(this.statusInfo, NsGraphStatusCommand.initStatusMap());\n          this.isLooping = false;\n        }\n      });\n    });\n    /** 更新Graph的数据 */\n\n\n    this.updateGraph = (curStatusInfo, nextStatusMap, statusMap) => {\n      /** 更新节点 */\n      this.updateNodes(curStatusInfo, nextStatusMap, statusMap);\n      /** 更新边 */\n\n      this.updateEdges(curStatusInfo, nextStatusMap);\n    };\n    /** 更新节点数据 */\n\n\n    this.updateNodeData = (id, data) => {\n      const cell = this.x6Graph.getCellById(id);\n\n      if (!cell) {\n        return;\n      }\n\n      cell.setData(Object.assign(Object.assign(Object.assign(Object.assign({}, cell.getData()), cell.getSize()), cell.getPosition()), data));\n    };\n    /** 更新连线数据 */\n\n\n    this.updateNodes = (curStatusInfo, nextStatusMap, statusMap) => {\n      Object.keys(curStatusInfo).forEach(status => {\n        const nodes = NsGraphStatusCommand.statusDiff(curStatusInfo[status], nextStatusMap[status]);\n        nodes.add.forEach(id => {\n          this.updateNodeData(id, statusMap[id]);\n        });\n        nodes.remove.forEach(id => {\n          this.updateNodeData(id, statusMap[id]);\n        });\n      });\n    };\n    /** 更新节点数据 */\n\n\n    this.updateEdges = (curStatusInfo, nextStatusMap) => {\n      const runningNodes = NsGraphStatusCommand.statusDiff(curStatusInfo.processing, nextStatusMap.processing);\n      const edges = this.x6Graph.getEdges();\n      edges.forEach(edge => {\n        var _a;\n\n        const view = (_a = this.x6Graph) === null || _a === void 0 ? void 0 : _a.findViewByCell(edge.id);\n        const target = edge.getTargetCellId();\n\n        if (!target) {\n          return;\n        }\n\n        const targetNodeId = target.toString();\n\n        if (!view) {\n          return;\n        }\n\n        if (runningNodes.add.includes(targetNodeId)) {\n          /** 新增className */\n          return view.addClass(EDGE_PROCESSING_CLASSNAME);\n        } else if (runningNodes.remove.includes(targetNodeId)) {\n          /** 移除className */\n          return view.removeClass(EDGE_PROCESSING_CLASSNAME);\n        }\n      });\n    };\n    /** 执行Cmd */\n\n\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks(); // 引用\n\n      this.x6Graph = yield ctx.getX6Graph();\n      const result = yield hooks.queryGraphStatus.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        var _this = this;\n\n        const {\n          graphStatusService,\n          shouldStop = NsGraphStatusCommand.shouldStop,\n          doOnce\n        } = handlerArgs; // 取消已有的循环\n\n        yield this.stopCurrentStatusLooping(); // 循环函数\n\n        const loopFunction = function (service) {\n          let loopInterval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10000;\n          return __awaiter(_this, void 0, void 0, function* () {\n            // 查询服务端状态\n            const data = yield service(handlerArgs); // 更新全局状态\n\n            this.updateModelValue(state => {\n              Object.entries(data.statusMap).forEach(_ref2 => {\n                let [key, value] = _ref2;\n                state.statusMap.set(key, value);\n              });\n              state.graphStatus = data.graphStatus;\n            }); // 更新图上状态\n\n            const statusGroupMap = NsGraphStatusCommand.groupByStatus(data.statusMap);\n            this.updateGraph(this.statusInfo, statusGroupMap, data.statusMap); // 缓存当前状态作为对比数据\n\n            this.statusInfo = statusGroupMap; // 延迟\n\n            yield delay(loopInterval); // 判断是否循环\n\n            if (!this.isLooping) {\n              return;\n            } // 判断是否循环\n\n\n            if (shouldStop) {\n              const isStop = yield shouldStop(data, handlerArgs);\n\n              if (isStop) {\n                return;\n              }\n            } // 执行下次调用\n\n\n            yield loopFunction(service, loopInterval);\n          });\n        }; // 从参数更新循环的FLAG\n\n\n        this.isLooping = handlerArgs.loop === undefined ? true : handlerArgs.loop; // 添加可以停止loop的回调\n\n        yield this.addStopDispose(); // 执行\n\n        if (doOnce) {\n          yield doOnce(handlerArgs);\n        }\n\n        loopFunction(graphStatusService, handlerArgs.loopInterval);\n        return {};\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n\n};\n\n__decorate([ManaSyringe.inject(ICommandContextProvider), __metadata(\"design:type\", Object)], QueryGraphStatusCommand.prototype, \"contextProvider\", void 0);\n\nQueryGraphStatusCommand = __decorate([ManaSyringe.injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphStatusCommand.command.id\n  }\n})], QueryGraphStatusCommand);\nexport { QueryGraphStatusCommand };\nexport const execCmd = () => {};","map":{"version":3,"sources":["../../../src/canvas-dag-extension/contributions/command.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ManaSyringe, ICommandHandler, ICommandContextProvider, delay } from '@antv/xflow-core';\nimport { XFlowDagCommands, GRAPH_STATUS_INFO, EDGE_PROCESSING_CLASSNAME } from '../constants';\nexport var NsGraphStatusCommand;\n(function (NsGraphStatusCommand) {\n    /** Command: 获取执行状态 */\n    NsGraphStatusCommand.MODEL = GRAPH_STATUS_INFO;\n    /** Command: 用于注册 named factory */\n    NsGraphStatusCommand.command = XFlowDagCommands.QUERY_GRAPH_STATUS;\n    /** hookName */\n    NsGraphStatusCommand.hookKey = 'queryGraphStatus';\n    /** 状态 类型 */\n    let StatusEnum;\n    (function (StatusEnum) {\n        StatusEnum[\"SUCCESS\"] = \"success\";\n        StatusEnum[\"PROCESSING\"] = \"processing\";\n        StatusEnum[\"ERROR\"] = \"error\";\n        StatusEnum[\"DEFAULT\"] = \"default\";\n        StatusEnum[\"WARNING\"] = \"warning\";\n    })(StatusEnum = NsGraphStatusCommand.StatusEnum || (NsGraphStatusCommand.StatusEnum = {}));\n    /** 按status 分类  */\n    NsGraphStatusCommand.initStatusMap = () => ({\n        [NsGraphStatusCommand.StatusEnum.DEFAULT]: [],\n        [NsGraphStatusCommand.StatusEnum.PROCESSING]: [],\n        [NsGraphStatusCommand.StatusEnum.ERROR]: [],\n        [NsGraphStatusCommand.StatusEnum.WARNING]: [],\n        [NsGraphStatusCommand.StatusEnum.SUCCESS]: [],\n    });\n    /** 接口返回 类型 */\n    NsGraphStatusCommand.groupByStatus = (data) => {\n        const seed = NsGraphStatusCommand.initStatusMap();\n        return Object.entries(data).reduce((acc, [nodeId, value]) => {\n            acc[value.status].push(nodeId);\n            return acc;\n        }, seed);\n    };\n    /** diff status */\n    NsGraphStatusCommand.statusDiff = (cur, next) => {\n        const items = new Set([...cur, ...next]);\n        const diff = { current: [], add: [], remove: [] };\n        items.forEach(item => {\n            if (next.includes(item) && !cur.includes(item)) {\n                diff.add.push(item);\n            }\n            if (!next.includes(item) && cur.includes(item)) {\n                diff.remove.push(item);\n            }\n        });\n        return diff;\n    };\n    NsGraphStatusCommand.shouldStop = (info) => __awaiter(this, void 0, void 0, function* () {\n        return [StatusEnum.ERROR, StatusEnum.SUCCESS].includes(info.graphStatus);\n    });\n})(NsGraphStatusCommand || (NsGraphStatusCommand = {}));\n/** 创建节点命令 */\nlet QueryGraphStatusCommand = class QueryGraphStatusCommand {\n    constructor() {\n        /** 状态缓存 */\n        this.statusInfo = NsGraphStatusCommand.initStatusMap();\n        /** 获取Model */\n        this.getStatusModel = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            const modelService = ctx.getModelService();\n            const statusModel = yield GRAPH_STATUS_INFO.getModel(modelService);\n            return statusModel;\n        });\n        /** 更新Model数据 */\n        this.updateModelValue = (callback) => __awaiter(this, void 0, void 0, function* () {\n            const statusModel = yield this.getStatusModel();\n            statusModel.setValue(callback);\n        });\n        /** 停止Looping的flag */\n        this.stopCurrentStatusLooping = () => __awaiter(this, void 0, void 0, function* () {\n            const statusModel = yield this.getStatusModel();\n            const { subscription } = yield statusModel.getValidValue();\n            subscription.dispose();\n        });\n        /** 设置停止looping的方法 */\n        this.addStopDispose = () => __awaiter(this, void 0, void 0, function* () {\n            const statusModel = yield this.getStatusModel();\n            const { subscription } = yield statusModel.getValidValue();\n            subscription.push({\n                dispose: () => {\n                    /** 重制processing的边的状态 */\n                    this.updateEdges(this.statusInfo, NsGraphStatusCommand.initStatusMap());\n                    this.isLooping = false;\n                },\n            });\n        });\n        /** 更新Graph的数据 */\n        this.updateGraph = (curStatusInfo, nextStatusMap, statusMap) => {\n            /** 更新节点 */\n            this.updateNodes(curStatusInfo, nextStatusMap, statusMap);\n            /** 更新边 */\n            this.updateEdges(curStatusInfo, nextStatusMap);\n        };\n        /** 更新节点数据 */\n        this.updateNodeData = (id, data) => {\n            const cell = this.x6Graph.getCellById(id);\n            if (!cell) {\n                return;\n            }\n            cell.setData(Object.assign(Object.assign(Object.assign(Object.assign({}, cell.getData()), cell.getSize()), cell.getPosition()), data));\n        };\n        /** 更新连线数据 */\n        this.updateNodes = (curStatusInfo, nextStatusMap, statusMap) => {\n            Object.keys(curStatusInfo).forEach(status => {\n                const nodes = NsGraphStatusCommand.statusDiff(curStatusInfo[status], nextStatusMap[status]);\n                nodes.add.forEach((id) => {\n                    this.updateNodeData(id, statusMap[id]);\n                });\n                nodes.remove.forEach((id) => {\n                    this.updateNodeData(id, statusMap[id]);\n                });\n            });\n        };\n        /** 更新节点数据 */\n        this.updateEdges = (curStatusInfo, nextStatusMap) => {\n            const runningNodes = NsGraphStatusCommand.statusDiff(curStatusInfo.processing, nextStatusMap.processing);\n            const edges = this.x6Graph.getEdges();\n            edges.forEach(edge => {\n                var _a;\n                const view = (_a = this.x6Graph) === null || _a === void 0 ? void 0 : _a.findViewByCell(edge.id);\n                const target = edge.getTargetCellId();\n                if (!target) {\n                    return;\n                }\n                const targetNodeId = target.toString();\n                if (!view) {\n                    return;\n                }\n                if (runningNodes.add.includes(targetNodeId)) {\n                    /** 新增className */\n                    return view.addClass(EDGE_PROCESSING_CLASSNAME);\n                }\n                else if (runningNodes.remove.includes(targetNodeId)) {\n                    /** 移除className */\n                    return view.removeClass(EDGE_PROCESSING_CLASSNAME);\n                }\n            });\n        };\n        /** 执行Cmd */\n        this.execute = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            const { args, hooks: runtimeHook } = ctx.getArgs();\n            const hooks = ctx.getHooks();\n            // 引用\n            this.x6Graph = yield ctx.getX6Graph();\n            const result = yield hooks.queryGraphStatus.call(args, (handlerArgs) => __awaiter(this, void 0, void 0, function* () {\n                const { graphStatusService, shouldStop = NsGraphStatusCommand.shouldStop, doOnce, } = handlerArgs;\n                // 取消已有的循环\n                yield this.stopCurrentStatusLooping();\n                // 循环函数\n                const loopFunction = (service, loopInterval = 10000) => __awaiter(this, void 0, void 0, function* () {\n                    // 查询服务端状态\n                    const data = yield service(handlerArgs);\n                    // 更新全局状态\n                    this.updateModelValue(state => {\n                        Object.entries(data.statusMap).forEach(([key, value]) => {\n                            state.statusMap.set(key, value);\n                        });\n                        state.graphStatus = data.graphStatus;\n                    });\n                    // 更新图上状态\n                    const statusGroupMap = NsGraphStatusCommand.groupByStatus(data.statusMap);\n                    this.updateGraph(this.statusInfo, statusGroupMap, data.statusMap);\n                    // 缓存当前状态作为对比数据\n                    this.statusInfo = statusGroupMap;\n                    // 延迟\n                    yield delay(loopInterval);\n                    // 判断是否循环\n                    if (!this.isLooping) {\n                        return;\n                    }\n                    // 判断是否循环\n                    if (shouldStop) {\n                        const isStop = yield shouldStop(data, handlerArgs);\n                        if (isStop) {\n                            return;\n                        }\n                    }\n                    // 执行下次调用\n                    yield loopFunction(service, loopInterval);\n                });\n                // 从参数更新循环的FLAG\n                this.isLooping = handlerArgs.loop === undefined ? true : handlerArgs.loop;\n                // 添加可以停止loop的回调\n                yield this.addStopDispose();\n                // 执行\n                if (doOnce) {\n                    yield doOnce(handlerArgs);\n                }\n                loopFunction(graphStatusService, handlerArgs.loopInterval);\n                return {};\n            }), runtimeHook);\n            ctx.setResult(result);\n            return this;\n        });\n        /** undo cmd */\n        this.undo = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            if (this.isUndoable()) {\n                ctx.undo();\n            }\n            return this;\n        });\n        /** redo cmd */\n        this.redo = () => __awaiter(this, void 0, void 0, function* () {\n            if (!this.isUndoable()) {\n                yield this.execute();\n            }\n            return this;\n        });\n    }\n    isUndoable() {\n        const ctx = this.contextProvider();\n        return ctx.isUndoable();\n    }\n};\n__decorate([\n    ManaSyringe.inject(ICommandContextProvider),\n    __metadata(\"design:type\", Object)\n], QueryGraphStatusCommand.prototype, \"contextProvider\", void 0);\nQueryGraphStatusCommand = __decorate([\n    ManaSyringe.injectable({\n        token: { token: ICommandHandler, named: NsGraphStatusCommand.command.id },\n    })\n], QueryGraphStatusCommand);\nexport { QueryGraphStatusCommand };\nexport const execCmd = () => { };\n//# sourceMappingURL=command.js.map"]},"metadata":{},"sourceType":"module"}