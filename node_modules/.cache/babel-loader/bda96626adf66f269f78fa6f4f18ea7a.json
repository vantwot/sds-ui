{"ast":null,"code":"import _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Curve } from '../curve';\nimport { Point } from '../point';\nimport { Segment } from './segment';\nexport var CurveTo = /*#__PURE__*/function (_Segment) {\n  _inherits(CurveTo, _Segment);\n\n  var _super = _createSuper(CurveTo);\n\n  function CurveTo(arg0, arg1, arg2, arg3, arg4, arg5) {\n    var _this;\n\n    _classCallCheck(this, CurveTo);\n\n    _this = _super.call(this);\n\n    if (Curve.isCurve(arg0)) {\n      _this.controlPoint1 = arg0.controlPoint1.clone().round(2);\n      _this.controlPoint2 = arg0.controlPoint2.clone().round(2);\n      _this.endPoint = arg0.end.clone().round(2);\n    } else if (typeof arg0 === 'number') {\n      _this.controlPoint1 = new Point(arg0, arg1).round(2);\n      _this.controlPoint2 = new Point(arg2, arg3).round(2);\n      _this.endPoint = new Point(arg4, arg5).round(2);\n    } else {\n      _this.controlPoint1 = Point.create(arg0).round(2);\n      _this.controlPoint2 = Point.create(arg1).round(2);\n      _this.endPoint = Point.create(arg2).round(2);\n    }\n\n    return _this;\n  }\n\n  _createClass(CurveTo, [{\n    key: \"type\",\n    get: function get() {\n      return 'C';\n    }\n  }, {\n    key: \"curve\",\n    get: function get() {\n      return new Curve(this.start, this.controlPoint1, this.controlPoint2, this.end);\n    }\n  }, {\n    key: \"bbox\",\n    value: function bbox() {\n      return this.curve.bbox();\n    }\n  }, {\n    key: \"closestPoint\",\n    value: function closestPoint(p) {\n      return this.curve.closestPoint(p);\n    }\n  }, {\n    key: \"closestPointLength\",\n    value: function closestPointLength(p) {\n      return this.curve.closestPointLength(p);\n    }\n  }, {\n    key: \"closestPointNormalizedLength\",\n    value: function closestPointNormalizedLength(p) {\n      return this.curve.closestPointNormalizedLength(p);\n    }\n  }, {\n    key: \"closestPointTangent\",\n    value: function closestPointTangent(p) {\n      return this.curve.closestPointTangent(p);\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      return this.curve.length();\n    }\n  }, {\n    key: \"divideAt\",\n    value: function divideAt(ratio) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // TODO: fix options\n      var divided = this.curve.divideAt(ratio, options);\n      return [new CurveTo(divided[0]), new CurveTo(divided[1])];\n    }\n  }, {\n    key: \"divideAtLength\",\n    value: function divideAtLength(length) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // TODO: fix options\n      var divided = this.curve.divideAtLength(length, options);\n      return [new CurveTo(divided[0]), new CurveTo(divided[1])];\n    }\n  }, {\n    key: \"divideAtT\",\n    value: function divideAtT(t) {\n      var divided = this.curve.divideAtT(t);\n      return [new CurveTo(divided[0]), new CurveTo(divided[1])];\n    }\n  }, {\n    key: \"getSubdivisions\",\n    value: function getSubdivisions() {\n      return [];\n    }\n  }, {\n    key: \"pointAt\",\n    value: function pointAt(ratio) {\n      return this.curve.pointAt(ratio);\n    }\n  }, {\n    key: \"pointAtLength\",\n    value: function pointAtLength(length) {\n      return this.curve.pointAtLength(length);\n    }\n  }, {\n    key: \"tangentAt\",\n    value: function tangentAt(ratio) {\n      return this.curve.tangentAt(ratio);\n    }\n  }, {\n    key: \"tangentAtLength\",\n    value: function tangentAtLength(length) {\n      return this.curve.tangentAtLength(length);\n    }\n  }, {\n    key: \"isDifferentiable\",\n    value: function isDifferentiable() {\n      if (!this.previousSegment) {\n        return false;\n      }\n\n      var start = this.start;\n      var control1 = this.controlPoint1;\n      var control2 = this.controlPoint2;\n      var end = this.end;\n      return !(start.equals(control1) && control1.equals(control2) && control2.equals(end));\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(sx, sy, origin) {\n      this.controlPoint1.scale(sx, sy, origin);\n      this.controlPoint2.scale(sx, sy, origin);\n      this.end.scale(sx, sy, origin);\n      return this;\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(angle, origin) {\n      this.controlPoint1.rotate(angle, origin);\n      this.controlPoint2.rotate(angle, origin);\n      this.end.rotate(angle, origin);\n      return this;\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(tx, ty) {\n      if (typeof tx === 'number') {\n        this.controlPoint1.translate(tx, ty);\n        this.controlPoint2.translate(tx, ty);\n        this.end.translate(tx, ty);\n      } else {\n        this.controlPoint1.translate(tx);\n        this.controlPoint2.translate(tx);\n        this.end.translate(tx);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(s) {\n      return this.start.equals(s.start) && this.end.equals(s.end) && this.controlPoint1.equals(s.controlPoint1) && this.controlPoint2.equals(s.controlPoint2);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new CurveTo(this.controlPoint1, this.controlPoint2, this.end);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        type: this.type,\n        start: this.start.toJSON(),\n        controlPoint1: this.controlPoint1.toJSON(),\n        controlPoint2: this.controlPoint2.toJSON(),\n        end: this.end.toJSON()\n      };\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var c1 = this.controlPoint1;\n      var c2 = this.controlPoint2;\n      var end = this.end;\n      return [this.type, c1.x, c1.y, c2.x, c2.y, end.x, end.y].join(' ');\n    }\n  }]);\n\n  return CurveTo;\n}(Segment);\n\n(function (CurveTo) {\n  function create() {\n    var len = arguments.length;\n    var arg0 = arguments.length <= 0 ? undefined : arguments[0]; // curve provided\n\n    if (Curve.isCurve(arg0)) {\n      return new CurveTo(arg0);\n    } // points provided\n\n\n    if (Point.isPointLike(arg0)) {\n      if (len === 3) {\n        return new CurveTo(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      } // this is a poly-bezier segment\n\n\n      var _segments = [];\n\n      for (var i = 0; i < len; i += 3) {\n        _segments.push(new CurveTo(i < 0 || arguments.length <= i ? undefined : arguments[i], i + 1 < 0 || arguments.length <= i + 1 ? undefined : arguments[i + 1], i + 2 < 0 || arguments.length <= i + 2 ? undefined : arguments[i + 2]));\n      }\n\n      return _segments;\n    } // coordinates provided\n\n\n    if (len === 6) {\n      return new CurveTo(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2], arguments.length <= 3 ? undefined : arguments[3], arguments.length <= 4 ? undefined : arguments[4], arguments.length <= 5 ? undefined : arguments[5]);\n    } // this is a poly-bezier segment\n\n\n    var segments = [];\n\n    for (var _i = 0; _i < len; _i += 6) {\n      segments.push(new CurveTo(_i < 0 || arguments.length <= _i ? undefined : arguments[_i], _i + 1 < 0 || arguments.length <= _i + 1 ? undefined : arguments[_i + 1], _i + 2 < 0 || arguments.length <= _i + 2 ? undefined : arguments[_i + 2], _i + 3 < 0 || arguments.length <= _i + 3 ? undefined : arguments[_i + 3], _i + 4 < 0 || arguments.length <= _i + 4 ? undefined : arguments[_i + 4], _i + 5 < 0 || arguments.length <= _i + 5 ? undefined : arguments[_i + 5]));\n    }\n\n    return segments;\n  }\n\n  CurveTo.create = create;\n})(CurveTo || (CurveTo = {}));","map":{"version":3,"sources":["../../../src/geometry/path/curveto.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Curve } from '../curve';\nimport { Point } from '../point';\nimport { Segment } from './segment';\nexport class CurveTo extends Segment {\n    constructor(arg0, arg1, arg2, arg3, arg4, arg5) {\n        super();\n        if (Curve.isCurve(arg0)) {\n            this.controlPoint1 = arg0.controlPoint1.clone().round(2);\n            this.controlPoint2 = arg0.controlPoint2.clone().round(2);\n            this.endPoint = arg0.end.clone().round(2);\n        }\n        else if (typeof arg0 === 'number') {\n            this.controlPoint1 = new Point(arg0, arg1).round(2);\n            this.controlPoint2 = new Point(arg2, arg3).round(2);\n            this.endPoint = new Point(arg4, arg5).round(2);\n        }\n        else {\n            this.controlPoint1 = Point.create(arg0).round(2);\n            this.controlPoint2 = Point.create(arg1).round(2);\n            this.endPoint = Point.create(arg2).round(2);\n        }\n    }\n    get type() {\n        return 'C';\n    }\n    get curve() {\n        return new Curve(this.start, this.controlPoint1, this.controlPoint2, this.end);\n    }\n    bbox() {\n        return this.curve.bbox();\n    }\n    closestPoint(p) {\n        return this.curve.closestPoint(p);\n    }\n    closestPointLength(p) {\n        return this.curve.closestPointLength(p);\n    }\n    closestPointNormalizedLength(p) {\n        return this.curve.closestPointNormalizedLength(p);\n    }\n    closestPointTangent(p) {\n        return this.curve.closestPointTangent(p);\n    }\n    length() {\n        return this.curve.length();\n    }\n    divideAt(ratio, options = {}) {\n        // TODO: fix options\n        const divided = this.curve.divideAt(ratio, options);\n        return [new CurveTo(divided[0]), new CurveTo(divided[1])];\n    }\n    divideAtLength(length, options = {}) {\n        // TODO: fix options\n        const divided = this.curve.divideAtLength(length, options);\n        return [new CurveTo(divided[0]), new CurveTo(divided[1])];\n    }\n    divideAtT(t) {\n        const divided = this.curve.divideAtT(t);\n        return [new CurveTo(divided[0]), new CurveTo(divided[1])];\n    }\n    getSubdivisions() {\n        return [];\n    }\n    pointAt(ratio) {\n        return this.curve.pointAt(ratio);\n    }\n    pointAtLength(length) {\n        return this.curve.pointAtLength(length);\n    }\n    tangentAt(ratio) {\n        return this.curve.tangentAt(ratio);\n    }\n    tangentAtLength(length) {\n        return this.curve.tangentAtLength(length);\n    }\n    isDifferentiable() {\n        if (!this.previousSegment) {\n            return false;\n        }\n        const start = this.start;\n        const control1 = this.controlPoint1;\n        const control2 = this.controlPoint2;\n        const end = this.end;\n        return !(start.equals(control1) &&\n            control1.equals(control2) &&\n            control2.equals(end));\n    }\n    scale(sx, sy, origin) {\n        this.controlPoint1.scale(sx, sy, origin);\n        this.controlPoint2.scale(sx, sy, origin);\n        this.end.scale(sx, sy, origin);\n        return this;\n    }\n    rotate(angle, origin) {\n        this.controlPoint1.rotate(angle, origin);\n        this.controlPoint2.rotate(angle, origin);\n        this.end.rotate(angle, origin);\n        return this;\n    }\n    translate(tx, ty) {\n        if (typeof tx === 'number') {\n            this.controlPoint1.translate(tx, ty);\n            this.controlPoint2.translate(tx, ty);\n            this.end.translate(tx, ty);\n        }\n        else {\n            this.controlPoint1.translate(tx);\n            this.controlPoint2.translate(tx);\n            this.end.translate(tx);\n        }\n        return this;\n    }\n    equals(s) {\n        return (this.start.equals(s.start) &&\n            this.end.equals(s.end) &&\n            this.controlPoint1.equals(s.controlPoint1) &&\n            this.controlPoint2.equals(s.controlPoint2));\n    }\n    clone() {\n        return new CurveTo(this.controlPoint1, this.controlPoint2, this.end);\n    }\n    toJSON() {\n        return {\n            type: this.type,\n            start: this.start.toJSON(),\n            controlPoint1: this.controlPoint1.toJSON(),\n            controlPoint2: this.controlPoint2.toJSON(),\n            end: this.end.toJSON(),\n        };\n    }\n    serialize() {\n        const c1 = this.controlPoint1;\n        const c2 = this.controlPoint2;\n        const end = this.end;\n        return [this.type, c1.x, c1.y, c2.x, c2.y, end.x, end.y].join(' ');\n    }\n}\n(function (CurveTo) {\n    function create(...args) {\n        const len = args.length;\n        const arg0 = args[0];\n        // curve provided\n        if (Curve.isCurve(arg0)) {\n            return new CurveTo(arg0);\n        }\n        // points provided\n        if (Point.isPointLike(arg0)) {\n            if (len === 3) {\n                return new CurveTo(args[0], args[1], args[2]);\n            }\n            // this is a poly-bezier segment\n            const segments = [];\n            for (let i = 0; i < len; i += 3) {\n                segments.push(new CurveTo(args[i], args[i + 1], args[i + 2]));\n            }\n            return segments;\n        }\n        // coordinates provided\n        if (len === 6) {\n            return new CurveTo(args[0], args[1], args[2], args[3], args[4], args[5]);\n        }\n        // this is a poly-bezier segment\n        const segments = [];\n        for (let i = 0; i < len; i += 6) {\n            segments.push(new CurveTo(args[i], args[i + 1], args[i + 2], args[i + 3], args[i + 4], args[i + 5]));\n        }\n        return segments;\n    }\n    CurveTo.create = create;\n})(CurveTo || (CurveTo = {}));\n//# sourceMappingURL=curveto.js.map"]},"metadata":{},"sourceType":"module"}