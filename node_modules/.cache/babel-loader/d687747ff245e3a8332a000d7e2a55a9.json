{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { registerNode, BaseGlobal as Global } from '@antv/g6-core';\nimport { mix } from '@antv/util'; // 菱形shape\n\nregisterNode('diamond', {\n  // 自定义节点时的配置\n  options: {\n    size: [80, 80],\n    style: {\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize,\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    // 节点上左右上下四个方向上的链接circle配置\n    linkPoints: {\n      top: false,\n      right: false,\n      bottom: false,\n      left: false,\n      // circle的大小\n      size: Global.defaultNode.linkPoints.size,\n      lineWidth: Global.defaultNode.linkPoints.lineWidth,\n      fill: Global.defaultNode.linkPoints.fill,\n      stroke: Global.defaultNode.linkPoints.stroke\n    },\n    // 节点中icon配置\n    icon: {\n      // 是否显示icon，值为 false 则不渲染icon\n      show: false,\n      // icon的地址，字符串类型\n      img: 'https://gw.alipayobjects.com/zos/bmw-prod/5d015065-8505-4e7a-baec-976f81e3c41d.svg',\n      width: 20,\n      height: 20\n    },\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'diamond',\n  // 文本位置\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var _a = (this.mergeStyle || this.getOptions(cfg)).icon,\n        icon = _a === void 0 ? {} : _a;\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('path', {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      name: this.type + \"-keyShape\",\n      draggable: true\n    });\n    group['shapeMap'][this.type + \"-keyShape\"] = keyShape;\n    var w = icon.width,\n        h = icon.height,\n        show = icon.show,\n        text = icon.text;\n\n    if (show) {\n      if (text) {\n        group['shapeMap'][this.type + \"-icon\"] = group.addShape('text', {\n          attrs: __assign({\n            x: 0,\n            y: 0,\n            fontSize: 12,\n            fill: '#000',\n            stroke: '#000',\n            textBaseline: 'middle',\n            textAlign: 'center'\n          }, icon),\n          className: this.type + \"-icon\",\n          name: this.type + \"-icon\",\n          draggable: true\n        });\n      } else {\n        group['shapeMap'][this.type + \"-icon\"] = group.addShape('image', {\n          attrs: __assign({\n            x: -w / 2,\n            y: -h / 2\n          }, icon),\n          className: this.type + \"-icon\",\n          name: this.type + \"-icon\",\n          draggable: true\n        });\n      }\n    }\n\n    this.drawLinkPoints(cfg, group);\n    return keyShape;\n  },\n\n  /**\n   * 绘制节点上的LinkPoints\n   * @param {Object} cfg data数据配置项\n   * @param {Group} group Group实例\n   */\n  drawLinkPoints: function drawLinkPoints(cfg, group) {\n    var _a = (this.mergeStyle || this.getOptions(cfg)).linkPoints,\n        linkPoints = _a === void 0 ? {} : _a;\n\n    var top = linkPoints.top,\n        left = linkPoints.left,\n        right = linkPoints.right,\n        bottom = linkPoints.bottom,\n        markSize = linkPoints.size,\n        markR = linkPoints.r,\n        markStyle = __rest(linkPoints, [\"top\", \"left\", \"right\", \"bottom\", \"size\", \"r\"]);\n\n    var size = this.getSize(cfg);\n    var width = size[0];\n    var height = size[1];\n\n    if (left) {\n      // left circle\n      group['shapeMap']['link-point-left'] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: -width / 2,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-left',\n        name: 'link-point-left',\n        isAnchorPoint: true\n      });\n    }\n\n    if (right) {\n      // right circle\n      group['shapeMap']['link-point-right'] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: width / 2,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-right',\n        name: 'link-point-right',\n        isAnchorPoint: true\n      });\n    }\n\n    if (top) {\n      // top circle\n      group['shapeMap']['link-point-top'] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: -height / 2,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-top',\n        name: 'link-point-top',\n        isAnchorPoint: true\n      });\n    }\n\n    if (bottom) {\n      // bottom circle\n      group['shapeMap']['link-point-bottom'] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: height / 2,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-bottom',\n        name: 'link-point-bottom',\n        isAnchorPoint: true\n      });\n    }\n  },\n  getPath: function getPath(cfg) {\n    var size = this.getSize(cfg);\n    var width = size[0];\n    var height = size[1];\n    var path = [['M', 0, -height / 2], ['L', width / 2, 0], ['L', 0, height / 2], ['L', -width / 2, 0], ['Z'] // 封闭\n    ];\n    return path;\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = mix({}, defaultStyle, strokeStyle);\n    var path = this.getPath(cfg);\n\n    var styles = __assign({\n      path: path\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item, updateType) {\n    var group = item.getContainer(); // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\n\n    var defaultStyle = this.getOptions({}).style;\n    var path = this.getPath(cfg); // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      path: path\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var keyShape = item.get('keyShape');\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\n    style = mix(style, cfg.style);\n    this.updateShape(cfg, item, style, true, updateType);\n    this.updateLinkPoints(cfg, group);\n  }\n}, 'single-node');","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/@antv/g6-element/es/nodes/diamond.js"],"names":["__assign","__rest","registerNode","BaseGlobal","Global","mix","options","size","style","stroke","defaultNode","fill","lineWidth","labelCfg","nodeLabel","fontSize","fontFamily","windowFontFamily","linkPoints","top","right","bottom","left","icon","show","img","width","height","stateStyles","nodeStateStyles","shapeType","labelPosition","drawShape","cfg","group","_a","mergeStyle","getOptions","getShapeStyle","keyShape","addShape","attrs","className","type","name","draggable","w","h","text","x","y","textBaseline","textAlign","drawLinkPoints","markSize","markR","r","markStyle","getSize","isAnchorPoint","getPath","path","defaultStyle","strokeStyle","color","styles","update","item","updateType","getContainer","get","attr","updateShape","updateLinkPoints"],"mappings":"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","sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport { registerNode, BaseGlobal as Global } from '@antv/g6-core';\nimport { mix } from '@antv/util'; // 菱形shape\n\nregisterNode('diamond', {\n  // 自定义节点时的配置\n  options: {\n    size: [80, 80],\n    style: {\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize,\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    // 节点上左右上下四个方向上的链接circle配置\n    linkPoints: {\n      top: false,\n      right: false,\n      bottom: false,\n      left: false,\n      // circle的大小\n      size: Global.defaultNode.linkPoints.size,\n      lineWidth: Global.defaultNode.linkPoints.lineWidth,\n      fill: Global.defaultNode.linkPoints.fill,\n      stroke: Global.defaultNode.linkPoints.stroke\n    },\n    // 节点中icon配置\n    icon: {\n      // 是否显示icon，值为 false 则不渲染icon\n      show: false,\n      // icon的地址，字符串类型\n      img: 'https://gw.alipayobjects.com/zos/bmw-prod/5d015065-8505-4e7a-baec-976f81e3c41d.svg',\n      width: 20,\n      height: 20\n    },\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'diamond',\n  // 文本位置\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var _a = (this.mergeStyle || this.getOptions(cfg)).icon,\n        icon = _a === void 0 ? {} : _a;\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('path', {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      name: this.type + \"-keyShape\",\n      draggable: true\n    });\n    group['shapeMap'][this.type + \"-keyShape\"] = keyShape;\n    var w = icon.width,\n        h = icon.height,\n        show = icon.show,\n        text = icon.text;\n\n    if (show) {\n      if (text) {\n        group['shapeMap'][this.type + \"-icon\"] = group.addShape('text', {\n          attrs: __assign({\n            x: 0,\n            y: 0,\n            fontSize: 12,\n            fill: '#000',\n            stroke: '#000',\n            textBaseline: 'middle',\n            textAlign: 'center'\n          }, icon),\n          className: this.type + \"-icon\",\n          name: this.type + \"-icon\",\n          draggable: true\n        });\n      } else {\n        group['shapeMap'][this.type + \"-icon\"] = group.addShape('image', {\n          attrs: __assign({\n            x: -w / 2,\n            y: -h / 2\n          }, icon),\n          className: this.type + \"-icon\",\n          name: this.type + \"-icon\",\n          draggable: true\n        });\n      }\n    }\n\n    this.drawLinkPoints(cfg, group);\n    return keyShape;\n  },\n\n  /**\n   * 绘制节点上的LinkPoints\n   * @param {Object} cfg data数据配置项\n   * @param {Group} group Group实例\n   */\n  drawLinkPoints: function drawLinkPoints(cfg, group) {\n    var _a = (this.mergeStyle || this.getOptions(cfg)).linkPoints,\n        linkPoints = _a === void 0 ? {} : _a;\n\n    var top = linkPoints.top,\n        left = linkPoints.left,\n        right = linkPoints.right,\n        bottom = linkPoints.bottom,\n        markSize = linkPoints.size,\n        markR = linkPoints.r,\n        markStyle = __rest(linkPoints, [\"top\", \"left\", \"right\", \"bottom\", \"size\", \"r\"]);\n\n    var size = this.getSize(cfg);\n    var width = size[0];\n    var height = size[1];\n\n    if (left) {\n      // left circle\n      group['shapeMap']['link-point-left'] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: -width / 2,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-left',\n        name: 'link-point-left',\n        isAnchorPoint: true\n      });\n    }\n\n    if (right) {\n      // right circle\n      group['shapeMap']['link-point-right'] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: width / 2,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-right',\n        name: 'link-point-right',\n        isAnchorPoint: true\n      });\n    }\n\n    if (top) {\n      // top circle\n      group['shapeMap']['link-point-top'] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: -height / 2,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-top',\n        name: 'link-point-top',\n        isAnchorPoint: true\n      });\n    }\n\n    if (bottom) {\n      // bottom circle\n      group['shapeMap']['link-point-bottom'] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: height / 2,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-bottom',\n        name: 'link-point-bottom',\n        isAnchorPoint: true\n      });\n    }\n  },\n  getPath: function getPath(cfg) {\n    var size = this.getSize(cfg);\n    var width = size[0];\n    var height = size[1];\n    var path = [['M', 0, -height / 2], ['L', width / 2, 0], ['L', 0, height / 2], ['L', -width / 2, 0], ['Z'] // 封闭\n    ];\n    return path;\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = mix({}, defaultStyle, strokeStyle);\n    var path = this.getPath(cfg);\n\n    var styles = __assign({\n      path: path\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item, updateType) {\n    var group = item.getContainer(); // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\n\n    var defaultStyle = this.getOptions({}).style;\n    var path = this.getPath(cfg); // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      path: path\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var keyShape = item.get('keyShape');\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\n    style = mix(style, cfg.style);\n    this.updateShape(cfg, item, style, true, updateType);\n    this.updateLinkPoints(cfg, group);\n  }\n}, 'single-node');"]},"metadata":{},"sourceType":"module"}