{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { singleton, inject } from 'mana-syringe';\nimport { IModelContribution } from '../interface';\nimport { DisposableCollection, Disposable } from '../../common/disposable';\nimport { disposableSubscribe } from '../../common/event-helper';\nimport { IGraphProvider } from '../../xflow-main/graph/graph-provider';\nimport * as MODELS from '../constant';\nlet GraphModelContribution = class GraphModelContribution {\n  constructor() {\n    /** 获取画布实例 */\n    this.getGraphInstance = () => __awaiter(this, void 0, void 0, function* () {\n      const graphInstance = yield this.graphProvider.getGraphInstance();\n      const graphConfig = yield this.graphProvider.getGraphOptions();\n      return {\n        graph: graphInstance,\n        config: graphConfig\n      };\n    });\n  }\n\n  registerModel(registry) {\n    /** X6 GRAPH META */\n    registry.registerModel({\n      id: MODELS.GRAPH_META.id,\n      getInitialValue: () => ({\n        flowId: '-1'\n      }),\n      watchChange: self => __awaiter(this, void 0, void 0, function* () {\n        return Disposable.create(() => {\n          self.setValue({\n            flowId: '-1'\n          });\n        });\n      })\n    });\n    /** Graph 多选状态 */\n\n    registry.registerModel({\n      id: MODELS.GRAPH_ENABLE_MULTI_SELECT.id,\n      getInitialValue: () => ({\n        isEnable: false\n      }),\n      watchChange: self => __awaiter(this, void 0, void 0, function* () {\n        return Disposable.create(() => {\n          self.setValue({\n            isEnable: false\n          });\n        });\n      })\n    });\n    /** 选中Cells状态 */\n\n    registry.registerModel({\n      id: MODELS.SELECTED_CELLS.id,\n      getInitialValue: () => [],\n      watchChange: self => __awaiter(this, void 0, void 0, function* () {\n        const {\n          graph\n        } = yield this.getGraphInstance();\n\n        const onChange = e => {\n          const {\n            selected\n          } = e;\n          self.setValue(selected);\n        };\n\n        graph.on('selection:changed', onChange);\n        return Disposable.create(() => graph.off('selection:changed', onChange));\n      })\n    });\n    /** 选中Cell状态 */\n\n    registry.registerModel({\n      id: MODELS.SELECTED_CELL.id,\n      watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n        const cellsModel = yield MODELS.SELECTED_CELLS.getModel(modelService);\n        return cellsModel.watch(function () {\n          let cells = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n          self.setValue([...cells].pop() || null);\n        });\n      })\n    });\n    /** 选中节点列表状态 */\n\n    registry.registerModel({\n      id: MODELS.SELECTED_NODES.id,\n      getInitialValue: () => [],\n      watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n        const model = yield MODELS.SELECTED_CELLS.getModel(modelService);\n        return model.watch(function () {\n          let cells = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n          const nodes = cells.filter(cell => cell.isNode());\n          self.setValue(nodes);\n        });\n      })\n    });\n    /** 选中节点状态 */\n\n    registry.registerModel({\n      id: MODELS.SELECTED_NODE.id,\n      watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n        const model = yield MODELS.SELECTED_NODES.getModel(modelService);\n        const disposable = model.watch(nodes => {\n          self.setValue([...nodes].pop() || null);\n        });\n        return disposable;\n      })\n    });\n    /** 是否选中节点状态 */\n\n    registry.registerModel({\n      id: MODELS.IS_NODE_SELECTED.id,\n      watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n        const model = yield MODELS.SELECTED_NODES.getModel(modelService);\n        const disposable = model.watch(nodes => {\n          self.setValue(nodes.length > 0);\n        });\n        return disposable;\n      })\n    });\n    /** 画布选中节点是否是Group */\n\n    registry.registerModel({\n      id: MODELS.IS_GROUP_SELECTED.id,\n      getInitialValue: () => false,\n      watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n        const model = yield MODELS.SELECTED_CELLS.getModel(modelService);\n        const disposable = model.watch(cells => {\n          const isGroup = cells.every(cell => {\n            return cell && cell.getProp('isGroup') === true;\n          });\n          self.setValue(isGroup);\n        });\n        return disposable;\n      })\n    });\n    /** 画布选中节点是否是Group */\n\n    registry.registerModel({\n      id: MODELS.SELECTED_GROUPS.id,\n      getInitialValue: () => [],\n      watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n        const model = yield MODELS.SELECTED_NODES.getModel(modelService);\n        const disposable = model.watch(cells => {\n          const groups = cells.filter(cell => {\n            return cell && cell.getProp('isGroup') === true;\n          });\n          self.setValue(groups);\n        });\n        return disposable;\n      })\n    });\n    /** 画布选中节点是否是普通节点 */\n\n    registry.registerModel({\n      id: MODELS.IS_NORMAL_NODES_SELECTED.id,\n      getInitialValue: () => false,\n      watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n        const model = yield MODELS.SELECTED_CELLS.getModel(modelService);\n        const disposable = model.watch(cells => {\n          const isNormalNodesSelected = cells.every(cell => {\n            const isNotGroup = !(cell && cell.getProp('isGroup'));\n            const isNotGroupChild = !(cell && cell.getProp('group'));\n            return isNotGroup && isNotGroupChild;\n          });\n          const isNodeSelected = cells.length > 0 && isNormalNodesSelected;\n          self.setValue(isNodeSelected);\n        });\n        return disposable;\n      })\n    });\n    /** 画布缩放状态 */\n\n    registry.registerModel({\n      id: MODELS.GRAPH_SCALE.id,\n      getInitialValue: () => ({\n        zoomFactor: -1\n      }),\n      watchChange: self => __awaiter(this, void 0, void 0, function* () {\n        const {\n          graph\n        } = yield this.getGraphInstance();\n\n        const onChange = e => {\n          const factor = graph.zoom();\n          self.setValue(Object.assign(Object.assign({}, e), {\n            zoomFactor: factor\n          }));\n        };\n\n        graph.on('scale', onChange);\n        return Disposable.create(() => graph.off('scale', onChange));\n      })\n    });\n    /** 画布右键菜单状态 */\n\n    registry.registerModel({\n      id: MODELS.CONTEXTMENU_TARGET.id,\n      watchChange: self => __awaiter(this, void 0, void 0, function* () {\n        const {\n          graph,\n          config\n        } = yield this.getGraphInstance();\n\n        const onContextMenu = type => e => {\n          const {\n            x,\n            y\n          } = e;\n          const pagePoint = graph.localToClient({\n            x,\n            y\n          });\n          const clientRect = config.rootContainer.getBoundingClientRect();\n          const anchor = {\n            x: pagePoint.x - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.x) || 0),\n            y: pagePoint.y - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.y) || 0)\n          };\n          self.setValue({\n            type,\n            anchor,\n            data: e,\n            cell: e.cell\n          });\n        };\n\n        const toDispose = new DisposableCollection();\n        toDispose.pushAll([disposableSubscribe(graph, 'node:contextmenu', onContextMenu('node')), disposableSubscribe(graph, 'edge:contextmenu', onContextMenu('edge')), disposableSubscribe(graph, 'blank:contextmenu', onContextMenu('blank'))]);\n        return toDispose;\n      })\n    });\n    /** 画布历史Redo */\n\n    registry.registerModel({\n      id: MODELS.HISTORY_REDOABLE.id,\n      getInitialValue: () => false,\n      watchChange: self => __awaiter(this, void 0, void 0, function* () {\n        const {\n          graph\n        } = yield this.getGraphInstance();\n\n        const onChange = () => {\n          const canRedo = graph.history.canRedo();\n          self.setValue(canRedo);\n        };\n\n        if (graph.history) {\n          graph.history.on('change', onChange);\n        }\n\n        return Disposable.create(() => graph.history.off('change', onChange));\n      })\n    });\n    /** 画布历史undo */\n\n    registry.registerModel({\n      id: MODELS.HISTORY_UNDOABLE.id,\n      getInitialValue: () => false,\n      watchChange: self => __awaiter(this, void 0, void 0, function* () {\n        const {\n          graph\n        } = yield this.getGraphInstance();\n\n        const onChange = () => {\n          const canUndo = graph.history.canUndo();\n          self.setValue(canUndo);\n        };\n\n        if (graph.history) {\n          graph.history.on('change', onChange);\n        }\n\n        return Disposable.create(() => graph.history.off('change', onChange));\n      })\n    });\n  }\n\n};\n\n__decorate([inject(IGraphProvider), __metadata(\"design:type\", Object)], GraphModelContribution.prototype, \"graphProvider\", void 0);\n\nGraphModelContribution = __decorate([singleton({\n  contrib: IModelContribution\n})], GraphModelContribution);\nexport { GraphModelContribution };","map":{"version":3,"sources":["../../../src/model-service/contributions/graph-model.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { singleton, inject } from 'mana-syringe';\nimport { IModelContribution } from '../interface';\nimport { DisposableCollection, Disposable } from '../../common/disposable';\nimport { disposableSubscribe } from '../../common/event-helper';\nimport { IGraphProvider } from '../../xflow-main/graph/graph-provider';\nimport * as MODELS from '../constant';\nlet GraphModelContribution = class GraphModelContribution {\n    constructor() {\n        /** 获取画布实例 */\n        this.getGraphInstance = () => __awaiter(this, void 0, void 0, function* () {\n            const graphInstance = yield this.graphProvider.getGraphInstance();\n            const graphConfig = yield this.graphProvider.getGraphOptions();\n            return { graph: graphInstance, config: graphConfig };\n        });\n    }\n    registerModel(registry) {\n        /** X6 GRAPH META */\n        registry.registerModel({\n            id: MODELS.GRAPH_META.id,\n            getInitialValue: () => ({\n                flowId: '-1',\n            }),\n            watchChange: (self) => __awaiter(this, void 0, void 0, function* () {\n                return Disposable.create(() => {\n                    self.setValue({ flowId: '-1' });\n                });\n            }),\n        });\n        /** Graph 多选状态 */\n        registry.registerModel({\n            id: MODELS.GRAPH_ENABLE_MULTI_SELECT.id,\n            getInitialValue: () => ({\n                isEnable: false,\n            }),\n            watchChange: (self) => __awaiter(this, void 0, void 0, function* () {\n                return Disposable.create(() => {\n                    self.setValue({ isEnable: false });\n                });\n            }),\n        });\n        /** 选中Cells状态 */\n        registry.registerModel({\n            id: MODELS.SELECTED_CELLS.id,\n            getInitialValue: () => [],\n            watchChange: (self) => __awaiter(this, void 0, void 0, function* () {\n                const { graph } = yield this.getGraphInstance();\n                const onChange = (e) => {\n                    const { selected } = e;\n                    self.setValue(selected);\n                };\n                graph.on('selection:changed', onChange);\n                return Disposable.create(() => graph.off('selection:changed', onChange));\n            }),\n        });\n        /** 选中Cell状态 */\n        registry.registerModel({\n            id: MODELS.SELECTED_CELL.id,\n            watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n                const cellsModel = yield MODELS.SELECTED_CELLS.getModel(modelService);\n                return cellsModel.watch((cells = []) => {\n                    self.setValue([...cells].pop() || null);\n                });\n            }),\n        });\n        /** 选中节点列表状态 */\n        registry.registerModel({\n            id: MODELS.SELECTED_NODES.id,\n            getInitialValue: () => [],\n            watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n                const model = yield MODELS.SELECTED_CELLS.getModel(modelService);\n                return model.watch((cells = []) => {\n                    const nodes = cells.filter(cell => cell.isNode());\n                    self.setValue(nodes);\n                });\n            }),\n        });\n        /** 选中节点状态 */\n        registry.registerModel({\n            id: MODELS.SELECTED_NODE.id,\n            watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n                const model = yield MODELS.SELECTED_NODES.getModel(modelService);\n                const disposable = model.watch(nodes => {\n                    self.setValue([...nodes].pop() || null);\n                });\n                return disposable;\n            }),\n        });\n        /** 是否选中节点状态 */\n        registry.registerModel({\n            id: MODELS.IS_NODE_SELECTED.id,\n            watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n                const model = yield MODELS.SELECTED_NODES.getModel(modelService);\n                const disposable = model.watch(nodes => {\n                    self.setValue(nodes.length > 0);\n                });\n                return disposable;\n            }),\n        });\n        /** 画布选中节点是否是Group */\n        registry.registerModel({\n            id: MODELS.IS_GROUP_SELECTED.id,\n            getInitialValue: () => false,\n            watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n                const model = yield MODELS.SELECTED_CELLS.getModel(modelService);\n                const disposable = model.watch(cells => {\n                    const isGroup = cells.every(cell => {\n                        return cell && cell.getProp('isGroup') === true;\n                    });\n                    self.setValue(isGroup);\n                });\n                return disposable;\n            }),\n        });\n        /** 画布选中节点是否是Group */\n        registry.registerModel({\n            id: MODELS.SELECTED_GROUPS.id,\n            getInitialValue: () => [],\n            watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n                const model = yield MODELS.SELECTED_NODES.getModel(modelService);\n                const disposable = model.watch(cells => {\n                    const groups = cells.filter(cell => {\n                        return cell && cell.getProp('isGroup') === true;\n                    });\n                    self.setValue(groups);\n                });\n                return disposable;\n            }),\n        });\n        /** 画布选中节点是否是普通节点 */\n        registry.registerModel({\n            id: MODELS.IS_NORMAL_NODES_SELECTED.id,\n            getInitialValue: () => false,\n            watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n                const model = yield MODELS.SELECTED_CELLS.getModel(modelService);\n                const disposable = model.watch(cells => {\n                    const isNormalNodesSelected = cells.every(cell => {\n                        const isNotGroup = !(cell && cell.getProp('isGroup'));\n                        const isNotGroupChild = !(cell && cell.getProp('group'));\n                        return isNotGroup && isNotGroupChild;\n                    });\n                    const isNodeSelected = cells.length > 0 && isNormalNodesSelected;\n                    self.setValue(isNodeSelected);\n                });\n                return disposable;\n            }),\n        });\n        /** 画布缩放状态 */\n        registry.registerModel({\n            id: MODELS.GRAPH_SCALE.id,\n            getInitialValue: () => ({ zoomFactor: -1 }),\n            watchChange: (self) => __awaiter(this, void 0, void 0, function* () {\n                const { graph } = yield this.getGraphInstance();\n                const onChange = (e) => {\n                    const factor = graph.zoom();\n                    self.setValue(Object.assign(Object.assign({}, e), { zoomFactor: factor }));\n                };\n                graph.on('scale', onChange);\n                return Disposable.create(() => graph.off('scale', onChange));\n            }),\n        });\n        /** 画布右键菜单状态 */\n        registry.registerModel({\n            id: MODELS.CONTEXTMENU_TARGET.id,\n            watchChange: (self) => __awaiter(this, void 0, void 0, function* () {\n                const { graph, config } = yield this.getGraphInstance();\n                const onContextMenu = (type) => (e) => {\n                    const { x, y } = e;\n                    const pagePoint = graph.localToClient({ x, y });\n                    const clientRect = config.rootContainer.getBoundingClientRect();\n                    const anchor = {\n                        x: pagePoint.x - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.x) || 0),\n                        y: pagePoint.y - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.y) || 0),\n                    };\n                    self.setValue({\n                        type,\n                        anchor,\n                        data: e,\n                        cell: e.cell,\n                    });\n                };\n                const toDispose = new DisposableCollection();\n                toDispose.pushAll([\n                    disposableSubscribe(graph, 'node:contextmenu', onContextMenu('node')),\n                    disposableSubscribe(graph, 'edge:contextmenu', onContextMenu('edge')),\n                    disposableSubscribe(graph, 'blank:contextmenu', onContextMenu('blank')),\n                ]);\n                return toDispose;\n            }),\n        });\n        /** 画布历史Redo */\n        registry.registerModel({\n            id: MODELS.HISTORY_REDOABLE.id,\n            getInitialValue: () => false,\n            watchChange: (self) => __awaiter(this, void 0, void 0, function* () {\n                const { graph } = yield this.getGraphInstance();\n                const onChange = () => {\n                    const canRedo = graph.history.canRedo();\n                    self.setValue(canRedo);\n                };\n                if (graph.history) {\n                    graph.history.on('change', onChange);\n                }\n                return Disposable.create(() => graph.history.off('change', onChange));\n            }),\n        });\n        /** 画布历史undo */\n        registry.registerModel({\n            id: MODELS.HISTORY_UNDOABLE.id,\n            getInitialValue: () => false,\n            watchChange: (self) => __awaiter(this, void 0, void 0, function* () {\n                const { graph } = yield this.getGraphInstance();\n                const onChange = () => {\n                    const canUndo = graph.history.canUndo();\n                    self.setValue(canUndo);\n                };\n                if (graph.history) {\n                    graph.history.on('change', onChange);\n                }\n                return Disposable.create(() => graph.history.off('change', onChange));\n            }),\n        });\n    }\n};\n__decorate([\n    inject(IGraphProvider),\n    __metadata(\"design:type\", Object)\n], GraphModelContribution.prototype, \"graphProvider\", void 0);\nGraphModelContribution = __decorate([\n    singleton({ contrib: IModelContribution })\n], GraphModelContribution);\nexport { GraphModelContribution };\n//# sourceMappingURL=graph-model.js.map"]},"metadata":{},"sourceType":"module"}