{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BehaviorSubject, asyncScheduler } from 'rxjs';\nimport { throttleTime, filter, distinctUntilChanged } from 'rxjs/operators';\nimport { Disposable, DisposableCollection } from './disposable';\nimport { produce, setAutoFreeze, enableMapSet } from 'immer';\nimport { Deferred } from './deferred'; // docs:https://immerjs.github.io/immer/map-set\n\nenableMapSet(); // https://immerjs.github.io/immer/freezing\n\nsetAutoFreeze(false);\nexport var NsModel;\n\n(function (NsModel) {\n  /**\n   * observable 空值，当作model ready的变量\n   * 空值不会触发subscrition\n   */\n  NsModel.EMPTY_VALUE = Symbol('EMPTY_MODEL_VALUE');\n  /** 判断是否是空 */\n\n  function isValidValue(val) {\n    return val !== NsModel.EMPTY_VALUE;\n  }\n\n  NsModel.isValidValue = isValidValue;\n  /** 默认的对事件性能优化方法：只在value不同时才触发，同时增加throttle */\n\n  function defaultPipeFunction(observable) {\n    return observable.pipe(distinctUntilChanged(), filter(item => isValidValue(item)), throttleTime(17, asyncScheduler, {\n      leading: false,\n      trailing: true\n    }));\n  }\n\n  NsModel.defaultPipeFunction = defaultPipeFunction;\n})(NsModel || (NsModel = {}));\n\nexport class RxModel {\n  /** 初始化 */\n  constructor() {\n    var _this = this;\n\n    let initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NsModel.EMPTY_VALUE;\n    let maxSubscription = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n\n    /** disposable */\n    this.toDispose = new DisposableCollection();\n    /** 监听model变化 */\n\n    this.watch = function (cb) {\n      let pipeFunction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NsModel.defaultPipeFunction;\n\n      if (_this.subject$.observers.length + 1 > _this.maxSubscription) {\n        console.warn(`${_this.subject$} reach maxSubscription limitation, please check`);\n      }\n\n      const observable = pipeFunction ? pipeFunction(_this.subject$) : _this.subject$;\n      const subscription = observable.subscribe(cb);\n      return Disposable.create(() => {\n        subscription.unsubscribe();\n      });\n    };\n    /** 获取model的值 */\n\n\n    this.getValue = () => {\n      return this.subject$.getValue();\n    };\n    /** 更新model */\n\n\n    this.setValue = value => {\n      if (!this.subject$) {\n        return;\n      }\n\n      if (typeof value === 'function') {\n        const currentValue = this.subject$.getValue();\n        const nextState = produce(currentValue, draft => {\n          value(draft);\n        });\n\n        if (NsModel.isValidValue(nextState)) {\n          this.setValue(nextState);\n        }\n\n        return;\n      }\n\n      this.subject$.next(value);\n    };\n    /** 是否已有值 */\n\n\n    this.hasValidValue = () => {\n      const value = this.getValue();\n      return NsModel.isValidValue(value);\n    };\n    /** 获取非空的值 */\n\n\n    this.getValidValue = () => __awaiter(this, void 0, void 0, function* () {\n      const deffer = new Deferred();\n      /** 返回非空的值 */\n\n      if (this.hasValidValue()) {\n        return this.getValue();\n      }\n      /** 返回会resolve非空值的Promise */\n\n\n      const d = this.watch(val => {\n        if (NsModel.isValidValue(val)) {\n          deffer.resolve(val);\n          d.dispose();\n        }\n      });\n      return deffer.promise;\n    });\n    /** disposable */\n\n\n    this.dispose = () => {\n      this.toDispose.dispose();\n    };\n\n    this.subject$ = new BehaviorSubject(initialValue || NsModel.EMPTY_VALUE);\n    this.maxSubscription = maxSubscription;\n    this.toDispose.push(Disposable.create(() => {\n      this.subject$.complete();\n      this.subject$.unsubscribe(); // @ts-ignore\n\n      this.subject$ = null;\n    }));\n  }\n\n}","map":{"version":3,"sources":["../../src/common/rx-model.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BehaviorSubject, asyncScheduler } from 'rxjs';\nimport { throttleTime, filter, distinctUntilChanged } from 'rxjs/operators';\nimport { Disposable, DisposableCollection } from './disposable';\nimport { produce, setAutoFreeze, enableMapSet } from 'immer';\nimport { Deferred } from './deferred';\n// docs:https://immerjs.github.io/immer/map-set\nenableMapSet();\n// https://immerjs.github.io/immer/freezing\nsetAutoFreeze(false);\nexport var NsModel;\n(function (NsModel) {\n    /**\n     * observable 空值，当作model ready的变量\n     * 空值不会触发subscrition\n     */\n    NsModel.EMPTY_VALUE = Symbol('EMPTY_MODEL_VALUE');\n    /** 判断是否是空 */\n    function isValidValue(val) {\n        return val !== NsModel.EMPTY_VALUE;\n    }\n    NsModel.isValidValue = isValidValue;\n    /** 默认的对事件性能优化方法：只在value不同时才触发，同时增加throttle */\n    function defaultPipeFunction(observable) {\n        return observable.pipe(distinctUntilChanged(), filter(item => isValidValue(item)), throttleTime(17, asyncScheduler, { leading: false, trailing: true }));\n    }\n    NsModel.defaultPipeFunction = defaultPipeFunction;\n})(NsModel || (NsModel = {}));\nexport class RxModel {\n    /** 初始化 */\n    constructor(initialValue = NsModel.EMPTY_VALUE, maxSubscription = 30) {\n        /** disposable */\n        this.toDispose = new DisposableCollection();\n        /** 监听model变化 */\n        this.watch = (cb, pipeFunction = NsModel.defaultPipeFunction) => {\n            if (this.subject$.observers.length + 1 > this.maxSubscription) {\n                console.warn(`${this.subject$} reach maxSubscription limitation, please check`);\n            }\n            const observable = pipeFunction ? pipeFunction(this.subject$) : this.subject$;\n            const subscription = observable.subscribe(cb);\n            return Disposable.create(() => {\n                subscription.unsubscribe();\n            });\n        };\n        /** 获取model的值 */\n        this.getValue = () => {\n            return this.subject$.getValue();\n        };\n        /** 更新model */\n        this.setValue = value => {\n            if (!this.subject$) {\n                return;\n            }\n            if (typeof value === 'function') {\n                const currentValue = this.subject$.getValue();\n                const nextState = produce(currentValue, draft => {\n                    value(draft);\n                });\n                if (NsModel.isValidValue(nextState)) {\n                    this.setValue(nextState);\n                }\n                return;\n            }\n            this.subject$.next(value);\n        };\n        /** 是否已有值 */\n        this.hasValidValue = () => {\n            const value = this.getValue();\n            return NsModel.isValidValue(value);\n        };\n        /** 获取非空的值 */\n        this.getValidValue = () => __awaiter(this, void 0, void 0, function* () {\n            const deffer = new Deferred();\n            /** 返回非空的值 */\n            if (this.hasValidValue()) {\n                return this.getValue();\n            }\n            /** 返回会resolve非空值的Promise */\n            const d = this.watch(val => {\n                if (NsModel.isValidValue(val)) {\n                    deffer.resolve(val);\n                    d.dispose();\n                }\n            });\n            return deffer.promise;\n        });\n        /** disposable */\n        this.dispose = () => {\n            this.toDispose.dispose();\n        };\n        this.subject$ = new BehaviorSubject(initialValue || NsModel.EMPTY_VALUE);\n        this.maxSubscription = maxSubscription;\n        this.toDispose.push(Disposable.create(() => {\n            this.subject$.complete();\n            this.subject$.unsubscribe();\n            // @ts-ignore\n            this.subject$ = null;\n        }));\n    }\n}\n//# sourceMappingURL=rx-model.js.map"]},"metadata":{},"sourceType":"module"}