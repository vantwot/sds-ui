{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { decodePickingColor, DOM } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../types';\nimport { isEventCrash } from '../../utils/dom';\nimport { InteractionEvent } from '../interaction/IInteractionService';\nimport { gl } from '../renderer/gl';\nvar PickingService = (_dec = injectable(), _dec2 = inject(TYPES.IRendererService), _dec3 = inject(TYPES.IGlobalConfigService), _dec4 = inject(TYPES.IInteractionService), _dec5 = inject(TYPES.ILayerService), _dec(_class = (_class2 = function () {\n  function PickingService() {\n    var _this = this;\n\n    _classCallCheck(this, PickingService);\n\n    _initializerDefineProperty(this, \"rendererService\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"configService\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"interactionService\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"layerService\", _descriptor4, this);\n\n    _defineProperty(this, \"pickingFBO\", void 0);\n\n    _defineProperty(this, \"width\", 0);\n\n    _defineProperty(this, \"height\", 0);\n\n    _defineProperty(this, \"alreadyInPicking\", false);\n\n    _defineProperty(this, \"pickBufferScale\", 1.0);\n\n    _defineProperty(this, \"pickFromPickingFBO\", function (layer, _ref) {\n      var _pickedColors;\n\n      var x = _ref.x,\n          y = _ref.y,\n          lngLat = _ref.lngLat,\n          type = _ref.type,\n          target = _ref.target;\n      var isPicked = false;\n      var _this$rendererService = _this.rendererService,\n          getViewportSize = _this$rendererService.getViewportSize,\n          readPixels = _this$rendererService.readPixels,\n          getContainer = _this$rendererService.getContainer;\n\n      var _this$getContainerSiz = _this.getContainerSize(getContainer()),\n          width = _this$getContainerSiz.width,\n          height = _this$getContainerSiz.height;\n\n      width *= DOM.DPR;\n      height *= DOM.DPR;\n\n      var _layer$getLayerConfig = layer.getLayerConfig(),\n          enableHighlight = _layer$getLayerConfig.enableHighlight,\n          enableSelect = _layer$getLayerConfig.enableSelect;\n\n      var xInDevicePixel = x * DOM.DPR;\n      var yInDevicePixel = y * DOM.DPR;\n\n      if (xInDevicePixel > width - 1 * DOM.DPR || xInDevicePixel < 0 || yInDevicePixel > height - 1 * DOM.DPR || yInDevicePixel < 0) {\n        return false;\n      }\n\n      var pickedColors;\n      pickedColors = readPixels({\n        x: Math.floor(xInDevicePixel / _this.pickBufferScale),\n        y: Math.floor((height - (y + 1) * DOM.DPR) / _this.pickBufferScale),\n        width: 1,\n        height: 1,\n        data: new Uint8Array(1 * 1 * 4),\n        framebuffer: _this.pickingFBO\n      });\n\n      if (pickedColors[0] !== 0 || pickedColors[1] !== 0 || pickedColors[2] !== 0) {\n        var pickedFeatureIdx = decodePickingColor(pickedColors);\n        var rawFeature = layer.getSource().getFeatureById(pickedFeatureIdx);\n\n        if (pickedFeatureIdx !== layer.getCurrentPickId() && type === 'mousemove') {\n          type = 'mouseenter';\n        }\n\n        var layerTarget = {\n          x: x,\n          y: y,\n          type: type,\n          lngLat: lngLat,\n          featureId: pickedFeatureIdx,\n          feature: rawFeature,\n          target: target\n        };\n\n        if (!rawFeature) {} else {\n          isPicked = true;\n          layer.setCurrentPickId(pickedFeatureIdx);\n\n          _this.triggerHoverOnLayer(layer, layerTarget);\n        }\n      } else {\n        var _layerTarget = {\n          x: x,\n          y: y,\n          lngLat: lngLat,\n          type: layer.getCurrentPickId() !== null && type === 'mousemove' ? 'mouseout' : 'un' + type,\n          featureId: null,\n          target: target,\n          feature: null\n        };\n\n        _this.triggerHoverOnLayer(layer, _objectSpread(_objectSpread({}, _layerTarget), {}, {\n          type: 'unpick'\n        }));\n\n        _this.triggerHoverOnLayer(layer, _layerTarget);\n\n        layer.setCurrentPickId(null);\n      }\n\n      if (enableHighlight) {\n        _this.highlightPickedFeature(layer, pickedColors);\n      }\n\n      if (enableSelect && type === 'click' && ((_pickedColors = pickedColors) === null || _pickedColors === void 0 ? void 0 : _pickedColors.toString()) !== [0, 0, 0, 0].toString()) {\n        var selectedId = decodePickingColor(pickedColors);\n\n        if (layer.getCurrentSelectedId() === null || selectedId !== layer.getCurrentSelectedId()) {\n          _this.selectFeature(layer, pickedColors);\n\n          layer.setCurrentSelectedId(selectedId);\n        } else {\n          _this.selectFeature(layer, new Uint8Array([0, 0, 0, 0]));\n\n          layer.setCurrentSelectedId(null);\n        }\n      }\n\n      return isPicked;\n    });\n  }\n\n  _createClass(PickingService, [{\n    key: \"init\",\n    value: function init(id) {\n      var _this$rendererService2 = this.rendererService,\n          createTexture2D = _this$rendererService2.createTexture2D,\n          createFramebuffer = _this$rendererService2.createFramebuffer,\n          getViewportSize = _this$rendererService2.getViewportSize,\n          getContainer = _this$rendererService2.getContainer;\n\n      var _this$getContainerSiz2 = this.getContainerSize(getContainer()),\n          width = _this$getContainerSiz2.width,\n          height = _this$getContainerSiz2.height;\n\n      width *= DOM.DPR;\n      height *= DOM.DPR;\n      this.pickBufferScale = this.configService.getSceneConfig(id).pickBufferScale || 1;\n      this.pickingFBO = createFramebuffer({\n        color: createTexture2D({\n          width: Math.round(width / this.pickBufferScale),\n          height: Math.round(height / this.pickBufferScale),\n          wrapS: gl.CLAMP_TO_EDGE,\n          wrapT: gl.CLAMP_TO_EDGE\n        })\n      });\n      this.interactionService.on(InteractionEvent.Hover, this.pickingAllLayer.bind(this));\n    }\n  }, {\n    key: \"boxPickLayer\",\n    value: function () {\n      var _boxPickLayer = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(layer, box, cb) {\n        var _this2 = this;\n\n        var _this$rendererService3, useFramebuffer, clear, getContainer;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$rendererService3 = this.rendererService, useFramebuffer = _this$rendererService3.useFramebuffer, clear = _this$rendererService3.clear, getContainer = _this$rendererService3.getContainer;\n                this.resizePickingFBO();\n                useFramebuffer(this.pickingFBO, function () {\n                  clear({\n                    framebuffer: _this2.pickingFBO,\n                    color: [0, 0, 0, 0],\n                    stencil: 0,\n                    depth: 1\n                  });\n                  layer.hooks.beforePickingEncode.call();\n                  layer.renderModels();\n                  layer.hooks.afterPickingEncode.call();\n\n                  var features = _this2.pickBox(layer, box);\n\n                  cb(features);\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function boxPickLayer(_x, _x2, _x3) {\n        return _boxPickLayer.apply(this, arguments);\n      }\n\n      return boxPickLayer;\n    }()\n  }, {\n    key: \"pickBox\",\n    value: function pickBox(layer, box) {\n      var _this3 = this;\n\n      var _box$map = box.map(function (v) {\n        var tmpV = v < 0 ? 0 : v;\n        return Math.floor(tmpV * DOM.DPR / _this3.pickBufferScale);\n      }),\n          _box$map2 = _slicedToArray(_box$map, 4),\n          xMin = _box$map2[0],\n          yMin = _box$map2[1],\n          xMax = _box$map2[2],\n          yMax = _box$map2[3];\n\n      var _this$rendererService4 = this.rendererService,\n          getViewportSize = _this$rendererService4.getViewportSize,\n          readPixels = _this$rendererService4.readPixels,\n          getContainer = _this$rendererService4.getContainer;\n\n      var _this$getContainerSiz3 = this.getContainerSize(getContainer()),\n          width = _this$getContainerSiz3.width,\n          height = _this$getContainerSiz3.height;\n\n      width *= DOM.DPR;\n      height *= DOM.DPR;\n\n      if (xMin > (width - 1) * DOM.DPR / this.pickBufferScale || xMax < 0 || yMin > (height - 1) * DOM.DPR / this.pickBufferScale || yMax < 0) {\n        return [];\n      }\n\n      var pickedColors;\n      var w = Math.min(width / this.pickBufferScale, xMax) - xMin;\n      var h = Math.min(height / this.pickBufferScale, yMax) - yMin;\n      pickedColors = readPixels({\n        x: xMin,\n        y: Math.floor(height / this.pickBufferScale - (yMax + 1)),\n        width: w,\n        height: h,\n        data: new Uint8Array(w * h * 4),\n        framebuffer: this.pickingFBO\n      });\n      var features = [];\n      var featuresIdMap = {};\n\n      for (var i = 0; i < pickedColors.length / 4; i = i + 1) {\n        var color = pickedColors.slice(i * 4, i * 4 + 4);\n        var pickedFeatureIdx = decodePickingColor(color);\n\n        if (pickedFeatureIdx !== -1 && !featuresIdMap[pickedFeatureIdx]) {\n          var rawFeature = layer.getSource().getFeatureById(pickedFeatureIdx);\n          features.push(rawFeature);\n          featuresIdMap[pickedFeatureIdx] = true;\n        }\n      }\n\n      return features;\n    }\n  }, {\n    key: \"getContainerSize\",\n    value: function getContainerSize(container) {\n      if (!!container.getContext) {\n        return {\n          width: container.width / DOM.DPR,\n          height: container.height / DOM.DPR\n        };\n      } else {\n        return container.getBoundingClientRect();\n      }\n    }\n  }, {\n    key: \"pickingAllLayer\",\n    value: function () {\n      var _pickingAllLayer = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(target) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.alreadyInPicking || this.layerService.alreadyInRendering || this.layerService.isMapDragging())) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                this.alreadyInPicking = true;\n                _context2.next = 5;\n                return this.pickingLayers(target);\n\n              case 5:\n                this.layerService.renderLayers();\n                this.alreadyInPicking = false;\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function pickingAllLayer(_x4) {\n        return _pickingAllLayer.apply(this, arguments);\n      }\n\n      return pickingAllLayer;\n    }()\n  }, {\n    key: \"resizePickingFBO\",\n    value: function resizePickingFBO() {\n      var getContainer = this.rendererService.getContainer;\n\n      var _this$getContainerSiz4 = this.getContainerSize(getContainer()),\n          width = _this$getContainerSiz4.width,\n          height = _this$getContainerSiz4.height;\n\n      width *= DOM.DPR;\n      height *= DOM.DPR;\n\n      if (this.width !== width || this.height !== height) {\n        this.pickingFBO.resize({\n          width: Math.round(width / this.pickBufferScale),\n          height: Math.round(height / this.pickBufferScale)\n        });\n        this.width = width;\n        this.height = height;\n      }\n    }\n  }, {\n    key: \"pickingLayers\",\n    value: function () {\n      var _pickingLayers = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(target) {\n        var _this4 = this;\n\n        var _this$rendererService5, getViewportSize, useFramebuffer, clear, getContainer;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$rendererService5 = this.rendererService, getViewportSize = _this$rendererService5.getViewportSize, useFramebuffer = _this$rendererService5.useFramebuffer, clear = _this$rendererService5.clear, getContainer = _this$rendererService5.getContainer;\n                this.resizePickingFBO();\n                useFramebuffer(this.pickingFBO, function () {\n                  var layers = _this4.layerService.getLayers();\n\n                  layers.filter(function (layer) {\n                    return layer.needPick(target.type);\n                  }).reverse().some(function (layer) {\n                    clear({\n                      framebuffer: _this4.pickingFBO,\n                      color: [0, 0, 0, 0],\n                      stencil: 0,\n                      depth: 1\n                    });\n                    layer.hooks.beforePickingEncode.call();\n                    layer.renderModels();\n                    layer.hooks.afterPickingEncode.call();\n\n                    var isPicked = _this4.pickFromPickingFBO(layer, target);\n\n                    return isPicked && !layer.getLayerConfig().enablePropagation;\n                  });\n                });\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function pickingLayers(_x5) {\n        return _pickingLayers.apply(this, arguments);\n      }\n\n      return pickingLayers;\n    }()\n  }, {\n    key: \"triggerHoverOnLayer\",\n    value: function triggerHoverOnLayer(layer, target) {\n      if (isEventCrash(target)) {\n        layer.emit(target.type, target);\n      }\n    }\n  }, {\n    key: \"highlightPickedFeature\",\n    value: function highlightPickedFeature(layer, pickedColors) {\n      var _pickedColors2 = _slicedToArray(pickedColors, 3),\n          r = _pickedColors2[0],\n          g = _pickedColors2[1],\n          b = _pickedColors2[2];\n\n      layer.hooks.beforeHighlight.call([r, g, b]);\n    }\n  }, {\n    key: \"selectFeature\",\n    value: function selectFeature(layer, pickedColors) {\n      var _pickedColors3 = _slicedToArray(pickedColors, 3),\n          r = _pickedColors3[0],\n          g = _pickedColors3[1],\n          b = _pickedColors3[2];\n\n      layer.hooks.beforeSelect.call([r, g, b]);\n    }\n  }]);\n\n  return PickingService;\n}(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"rendererService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"configService\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"interactionService\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"layerService\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexport { PickingService as default };","map":{"version":3,"sources":["../../../src/services/interaction/PickingService.ts"],"names":["injectable","PickingService","inject","TYPES","createTexture2D","createFramebuffer","getViewportSize","getContainer","width","height","DOM","color","Math","wrapS","gl","wrapT","CLAMP_TO_EDGE","InteractionEvent","useFramebuffer","clear","framebuffer","stencil","depth","layer","features","cb","xMin","yMin","xMax","yMax","tmpV","v","readPixels","w","h","pickedColors","x","y","data","pickingFBO","featuresIdMap","i","pickedFeatureIdx","decodePickingColor","rawFeature","container","DPR","layers","target","isPicked","lngLat","type","enableHighlight","enableSelect","xInDevicePixel","yInDevicePixel","layerTarget","featureId","feature","selectedId","isEventCrash","r","g","b"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,kBAAA,EAAA,GAAA,QAAA,gBAAA;AAMA,SAAA,MAAA,EAAA,UAAA,QAAA,WAAA;AACA,OAAA,kBAAA;AACA,SAAA,KAAA,QAAA,aAAA;AACA,SAAA,YAAA,QAAA,iBAAA;AAEA,SAAA,gBAAA,QAAA,oCAAA;AAOA,SAAA,EAAA,QAAA,gBAAA;IAKqBC,c,WADpBD,UAAU,E,UAERE,MAAM,CAACC,KAAK,CAAN,gBAAA,C,UAGND,MAAM,CAACC,KAAK,CAAN,oBAAA,C,UAGND,MAAM,CAACC,KAAK,CAAN,mBAAA,C,UAGND,MAAM,CAACC,KAAK,CAAN,aAAA,C;;;;;;;;;;;;;;;;mCAIiB,C;;oCAEC,C;;8CAEW,K;;6CAEF,G;;gDAiLL,UAAA,KAAA,EAAA,IAAA,EAGxB;AAAA,UAAA,aAAA;;AAAA,UADDiC,CACC,GAAA,IAAA,CADDA,CACC;AAAA,UADEC,CACF,GAAA,IAAA,CADEA,CACF;AAAA,UADKa,MACL,GAAA,IAAA,CADKA,MACL;AAAA,UADaC,IACb,GAAA,IAAA,CADaA,IACb;AAAA,UADmBH,MACnB,GAAA,IAAA,CADmBA,MACnB;AACH,UAAIC,QAAQ,GAAZ,KAAA;AACA,UAAA,qBAAA,GAAsD,KAAI,CAA1D,eAAA;AAAA,UAAQ3C,eAAR,GAAA,qBAAA,CAAA,eAAA;AAAA,UAAyB0B,UAAzB,GAAA,qBAAA,CAAA,UAAA;AAAA,UAAqCzB,YAArC,GAAA,qBAAA,CAAA,YAAA;;AACA,UAAA,qBAAA,GAAwB,KAAI,CAAJ,gBAAA,CACtBA,YADF,EAAwB,CAAxB;AAAA,UAAMC,KAAN,GAAA,qBAAA,CAAA,KAAA;AAAA,UAAaC,MAAb,GAAA,qBAAA,CAAA,MAAA;;AAGAD,MAAAA,KAAK,IAAIE,GAAG,CAAZF,GAAAA;AACAC,MAAAA,MAAM,IAAIC,GAAG,CAAbD,GAAAA;;AACA,UAAA,qBAAA,GAA0Cc,KAAK,CAA/C,cAA0CA,EAA1C;AAAA,UAAQ6B,eAAR,GAAA,qBAAA,CAAA,eAAA;AAAA,UAAyBC,YAAzB,GAAA,qBAAA,CAAA,YAAA;;AAEA,UAAMC,cAAc,GAAGlB,CAAC,GAAG1B,GAAG,CAA9B,GAAA;AACA,UAAM6C,cAAc,GAAGlB,CAAC,GAAG3B,GAAG,CAA9B,GAAA;;AACA,UACE4C,cAAc,GAAG9C,KAAK,GAAG,IAAIE,GAAG,CAAhC4C,GAAAA,IACAA,cAAc,GADdA,CAAAA,IAEAC,cAAc,GAAG9C,MAAM,GAAG,IAAIC,GAAG,CAFjC4C,GAAAA,IAGAC,cAAc,GAJhB,CAAA,EAKE;AACA,eAAA,KAAA;AACD;;AACD,UAAA,YAAA;AACApB,MAAAA,YAAY,GAAGH,UAAU,CAAC;AACxBI,QAAAA,CAAC,EAAExB,IAAI,CAAJA,KAAAA,CAAW0C,cAAc,GAAG,KAAI,CADX,eACrB1C,CADqB;AAGxByB,QAAAA,CAAC,EAAEzB,IAAI,CAAJA,KAAAA,CAAW,CAACH,MAAM,GAAG,CAAC4B,CAAC,GAAF,CAAA,IAAU3B,GAAG,CAAvB,GAAA,IAA+B,KAAI,CAHzB,eAGrBE,CAHqB;AAIxBJ,QAAAA,KAAK,EAJmB,CAAA;AAKxBC,QAAAA,MAAM,EALkB,CAAA;AAMxB6B,QAAAA,IAAI,EAAE,IAAA,UAAA,CAAe,IAAA,CAAA,GANG,CAMlB,CANkB;AAOxBlB,QAAAA,WAAW,EAAE,KAAI,CAACmB;AAPM,OAAD,CAAzBJ;;AASA,UACEA,YAAY,CAAZA,CAAY,CAAZA,KAAAA,CAAAA,IACAA,YAAY,CAAZA,CAAY,CAAZA,KADAA,CAAAA,IAEAA,YAAY,CAAZA,CAAY,CAAZA,KAHF,CAAA,EAIE;AACA,YAAMO,gBAAgB,GAAGC,kBAAkB,CAA3C,YAA2C,CAA3C;AACA,YAAMC,UAAU,GAAGrB,KAAK,CAALA,SAAAA,GAAAA,cAAAA,CAAnB,gBAAmBA,CAAnB;;AACA,YACEmB,gBAAgB,KAAKnB,KAAK,CAA1BmB,gBAAqBnB,EAArBmB,IACAS,IAAI,KAFN,WAAA,EAGE;AACAA,UAAAA,IAAI,GAAJA,YAAAA;AACD;;AAED,YAAMK,WAAW,GAAG;AAClBpB,UAAAA,CAAC,EADiB,CAAA;AAElBC,UAAAA,CAAC,EAFiB,CAAA;AAGlBc,UAAAA,IAAI,EAHc,IAAA;AAIlBD,UAAAA,MAAM,EAJY,MAAA;AAKlBO,UAAAA,SAAS,EALS,gBAAA;AAMlBC,UAAAA,OAAO,EANW,UAAA;AAOlBV,UAAAA,MAAM,EAANA;AAPkB,SAApB;;AASA,YAAI,CAAJ,UAAA,EAAiB,CAAjB,CAAA,MAIO;AAELC,UAAAA,QAAQ,GAARA,IAAAA;AACA1B,UAAAA,KAAK,CAALA,gBAAAA,CAAAA,gBAAAA;;AACA,UAAA,KAAI,CAAJ,mBAAA,CAAA,KAAA,EAAA,WAAA;AACD;AAhCH,OAAA,MAiCO;AAEL,YAAMiC,YAAW,GAAG;AAClBpB,UAAAA,CAAC,EADiB,CAAA;AAElBC,UAAAA,CAAC,EAFiB,CAAA;AAGlBa,UAAAA,MAAM,EAHY,MAAA;AAIlBC,UAAAA,IAAI,EACF5B,KAAK,CAALA,gBAAAA,OAAAA,IAAAA,IAAqC4B,IAAI,KAAzC5B,WAAAA,GAAAA,UAAAA,GAEI,OAPY,IAAA;AAQlBkC,UAAAA,SAAS,EARS,IAAA;AASlBT,UAAAA,MAAM,EATY,MAAA;AAUlBU,UAAAA,OAAO,EAAE;AAVS,SAApB;;AAYA,QAAA,KAAI,CAAJ,mBAAA,CAAA,KAAA,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,YAAA,CAAA,EAAA,EAAA,EAAA;AAEEP,UAAAA,IAAI,EAAE;AAFR,SAAA,CAAA;;AAIA,QAAA,KAAI,CAAJ,mBAAA,CAAA,KAAA,EAAA,YAAA;;AACA5B,QAAAA,KAAK,CAALA,gBAAAA,CAAAA,IAAAA;AACD;;AAED,UAAA,eAAA,EAAqB;AACnB,QAAA,KAAI,CAAJ,sBAAA,CAAA,KAAA,EAAA,YAAA;AACD;;AACD,UACE8B,YAAY,IACZF,IAAI,KADJE,OAAAA,IAEA,CAAA,CAAA,aAAA,GAAA,YAAA,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAA,QAAA,EAAA,MAA6B,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAH/B,QAG+B,EAH/B,EAIE;AACA,YAAMM,UAAU,GAAGhB,kBAAkB,CAArC,YAAqC,CAArC;;AACA,YACEpB,KAAK,CAALA,oBAAAA,OAAAA,IAAAA,IACAoC,UAAU,KAAKpC,KAAK,CAFtB,oBAEiBA,EAFjB,EAGE;AACA,UAAA,KAAI,CAAJ,aAAA,CAAA,KAAA,EAAA,YAAA;;AACAA,UAAAA,KAAK,CAALA,oBAAAA,CAAAA,UAAAA;AALF,SAAA,MAMO;AACL,UAAA,KAAI,CAAJ,aAAA,CAAA,KAAA,EAA0B,IAAA,UAAA,CAAe,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAzC,CAAyC,CAAf,CAA1B;;AACAA,UAAAA,KAAK,CAALA,oBAAAA,CAAAA,IAAAA;AACD;AACF;;AACD,aAAA,QAAA;;;;;;WA3RF,SAAA,IAAA,CAAA,EAAA,EAAwB;AACtB,UAAA,sBAAA,GAKI,KALJ,eAAA;AAAA,UACEnB,eADF,GAAA,sBAAA,CAAA,eAAA;AAAA,UAEEC,iBAFF,GAAA,sBAAA,CAAA,iBAAA;AAAA,UAGEC,eAHF,GAAA,sBAAA,CAAA,eAAA;AAAA,UAIEC,YAJF,GAAA,sBAAA,CAAA,YAAA;;AAOA,UAAA,sBAAA,GAAwB,KAAA,gBAAA,CACtBA,YADF,EAAwB,CAAxB;AAAA,UAAMC,KAAN,GAAA,sBAAA,CAAA,KAAA;AAAA,UAAaC,MAAb,GAAA,sBAAA,CAAA,MAAA;;AAGAD,MAAAA,KAAK,IAAIE,GAAG,CAAZF,GAAAA;AACAC,MAAAA,MAAM,IAAIC,GAAG,CAAbD,GAAAA;AACA,WAAA,eAAA,GACE,KAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EAAA,eAAA,IADF,CAAA;AAGA,WAAA,UAAA,GAAkBJ,iBAAiB,CAAC;AAClCM,QAAAA,KAAK,EAAEP,eAAe,CAAC;AACrBI,UAAAA,KAAK,EAAEI,IAAI,CAAJA,KAAAA,CAAWJ,KAAK,GAAG,KADL,eACdI,CADc;AAErBH,UAAAA,MAAM,EAAEG,IAAI,CAAJA,KAAAA,CAAWH,MAAM,GAAG,KAFP,eAEbG,CAFa;AAGrBC,UAAAA,KAAK,EAAEC,EAAE,CAHY,aAAA;AAIrBC,UAAAA,KAAK,EAAED,EAAE,CAACE;AAJW,SAAD;AADY,OAAD,CAAnC;AAUA,WAAA,kBAAA,CAAA,EAAA,CACEC,gBAAgB,CADlB,KAAA,EAEE,KAAA,eAAA,CAAA,IAAA,CAFF,IAEE,CAFF;AAID;;;;qEAED,SAAA,OAAA,CAAA,KAAA,EAAA,GAAA,EAAA,EAAA,EAAA;AAAA,YAAA,MAAA,GAAA,IAAA;;AAAA,YAAA,sBAAA,EAAA,cAAA,EAAA,KAAA,EAAA,YAAA;;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,gBAAA,sBAAA,GAKkD,KALlD,eAAA,EAKUC,cALV,GAAA,sBAAA,CAAA,cAAA,EAK0BC,KAL1B,GAAA,sBAAA,CAAA,KAAA,EAKiCZ,YALjC,GAAA,sBAAA,CAAA,YAAA;AAME,qBAAA,gBAAA;AACAW,gBAAAA,cAAc,CAAC,KAAD,UAAA,EAAkB,YAAM;AACpCC,kBAAAA,KAAK,CAAC;AACJC,oBAAAA,WAAW,EAAE,MAAI,CADb,UAAA;AAEJT,oBAAAA,KAAK,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAFH,CAEG,CAFH;AAGJU,oBAAAA,OAAO,EAHH,CAAA;AAIJC,oBAAAA,KAAK,EAAE;AAJH,mBAAD,CAALH;AAMAI,kBAAAA,KAAK,CAALA,KAAAA,CAAAA,mBAAAA,CAAAA,IAAAA;AACAA,kBAAAA,KAAK,CAALA,YAAAA;AACAA,kBAAAA,KAAK,CAALA,KAAAA,CAAAA,kBAAAA,CAAAA,IAAAA;;AACA,sBAAMC,QAAQ,GAAG,MAAI,CAAJ,OAAA,CAAA,KAAA,EAAjB,GAAiB,CAAjB;;AACAC,kBAAAA,EAAE,CAAFA,QAAE,CAAFA;AAXFP,iBAAc,CAAdA;;AAPF,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,OAAA,EAAA,IAAA,CAAA;;;;;;;;;;;WAsBA,SAAA,OAAA,CAAA,KAAA,EAAA,GAAA,EAA4E;AAAA,UAAA,MAAA,GAAA,IAAA;;AAC1E,UAAA,QAAA,GAAiC,GAAG,CAAH,GAAA,CAAQ,UAAA,CAAA,EAAO;AAC9C,YAAMY,IAAI,GAAGC,CAAC,GAADA,CAAAA,GAAAA,CAAAA,GAAb,CAAA;AACA,eAAOnB,IAAI,CAAJA,KAAAA,CAAYkB,IAAI,GAAGpB,GAAG,CAAX,GAACoB,GAAkB,MAAI,CAAzC,eAAOlB,CAAP;AAFF,OAAiC,CAAjC;AAAA,UAAA,SAAA,GAAA,cAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AAAA,UAAOc,IAAP,GAAA,SAAA,CAAA,CAAA,CAAA;AAAA,UAAaC,IAAb,GAAA,SAAA,CAAA,CAAA,CAAA;AAAA,UAAmBC,IAAnB,GAAA,SAAA,CAAA,CAAA,CAAA;AAAA,UAAyBC,IAAzB,GAAA,SAAA,CAAA,CAAA,CAAA;;AAIA,UAAA,sBAAA,GAAsD,KAAtD,eAAA;AAAA,UAAQvB,eAAR,GAAA,sBAAA,CAAA,eAAA;AAAA,UAAyB0B,UAAzB,GAAA,sBAAA,CAAA,UAAA;AAAA,UAAqCzB,YAArC,GAAA,sBAAA,CAAA,YAAA;;AACA,UAAA,sBAAA,GAAwB,KAAA,gBAAA,CACtBA,YADF,EAAwB,CAAxB;AAAA,UAAMC,KAAN,GAAA,sBAAA,CAAA,KAAA;AAAA,UAAaC,MAAb,GAAA,sBAAA,CAAA,MAAA;;AAGAD,MAAAA,KAAK,IAAIE,GAAG,CAAZF,GAAAA;AACAC,MAAAA,MAAM,IAAIC,GAAG,CAAbD,GAAAA;;AACA,UACEiB,IAAI,GAAI,CAAClB,KAAK,GAAN,CAAA,IAAcE,GAAG,CAAlB,GAAC,GAAyB,KAAjCgB,eAAAA,IACAE,IAAI,GADJF,CAAAA,IAEAC,IAAI,GAAI,CAAClB,MAAM,GAAP,CAAA,IAAeC,GAAG,CAAnB,GAAC,GAA0B,KAFlCgB,eAAAA,IAGAG,IAAI,GAJN,CAAA,EAKE;AACA,eAAA,EAAA;AACD;;AACD,UAAA,YAAA;AACA,UAAMI,CAAC,GAAGrB,IAAI,CAAJA,GAAAA,CAASJ,KAAK,GAAG,KAAjBI,eAAAA,EAAAA,IAAAA,IAAV,IAAA;AACA,UAAMsB,CAAC,GAAGtB,IAAI,CAAJA,GAAAA,CAASH,MAAM,GAAG,KAAlBG,eAAAA,EAAAA,IAAAA,IAAV,IAAA;AACAuB,MAAAA,YAAY,GAAGH,UAAU,CAAC;AACxBI,QAAAA,CAAC,EADuB,IAAA;AAGxBC,QAAAA,CAAC,EAAEzB,IAAI,CAAJA,KAAAA,CAAWH,MAAM,GAAG,KAATA,eAAAA,IAAiCoB,IAAI,GAH3B,CAGVpB,CAAXG,CAHqB;AAIxBJ,QAAAA,KAAK,EAJmB,CAAA;AAKxBC,QAAAA,MAAM,EALkB,CAAA;AAMxB6B,QAAAA,IAAI,EAAE,IAAA,UAAA,CAAeL,CAAC,GAADA,CAAAA,GANG,CAMlB,CANkB;AAOxBb,QAAAA,WAAW,EAAE,KAAKmB;AAPM,OAAD,CAAzBJ;AAUA,UAAMX,QAAQ,GAAd,EAAA;AACA,UAAMgB,aAAyC,GAA/C,EAAA;;AACA,WAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGN,YAAY,CAAZA,MAAAA,GAApB,CAAA,EAA6CM,CAAC,GAAGA,CAAC,GAAlD,CAAA,EAAwD;AACtD,YAAM9B,KAAK,GAAGwB,YAAY,CAAZA,KAAAA,CAAmBM,CAAC,GAApBN,CAAAA,EAA0BM,CAAC,GAADA,CAAAA,GAAxC,CAAcN,CAAd;AACA,YAAMO,gBAAgB,GAAGC,kBAAkB,CAA3C,KAA2C,CAA3C;;AACA,YAAID,gBAAgB,KAAK,CAArBA,CAAAA,IAA2B,CAACF,aAAa,CAA7C,gBAA6C,CAA7C,EAAiE;AAC/D,cAAMI,UAAU,GAAGrB,KAAK,CAALA,SAAAA,GAAAA,cAAAA,CAAnB,gBAAmBA,CAAnB;AACAC,UAAAA,QAAQ,CAARA,IAAAA,CAAAA,UAAAA;AACAgB,UAAAA,aAAa,CAAbA,gBAAa,CAAbA,GAAAA,IAAAA;AACD;AACF;;AACD,aAAA,QAAA;AACD;;;WAGD,SAAA,gBAAA,CAAA,SAAA,EAAqE;AACnE,UAAI,CAAC,CAAEK,SAAD,CAAN,UAAA,EAAmD;AACjD,eAAO;AACLrC,UAAAA,KAAK,EAAGqC,SAAD,CAAA,KAACA,GAAwCnC,GAAG,CAD9C,GAAA;AAELD,UAAAA,MAAM,EAAGoC,SAAD,CAAA,MAACA,GAAyCnC,GAAG,CAACoC;AAFjD,SAAP;AADF,OAAA,MAKO;AACL,eAAOD,SAAS,CAAhB,qBAAOA,EAAP;AACD;AACF;;;;wEACD,SAAA,QAAA,CAAA,MAAA,EAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,oBAAA,EAGI,KAAA,gBAAA,IAEA,KAAA,YAAA,CAFA,kBAAA,IAIA,KAAA,YAAA,CAPJ,aAOI,EAPJ,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA;;AAAA,mBAAA,CAAA;AAWE,qBAAA,gBAAA,GAAA,IAAA;AAXF,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAYQ,KAAA,aAAA,CAZR,MAYQ,CAZR;;AAAA,mBAAA,CAAA;AAaE,qBAAA,YAAA,CAAA,YAAA;AACA,qBAAA,gBAAA,GAAA,KAAA;;AAdF,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,CAAA;;;;;;;;;;;WAiBA,SAAA,gBAAA,GAA2B;AACzB,UAAQtC,YAAR,GAAyB,KAAzB,eAAyB,CAAzB,YAAA;;AACA,UAAA,sBAAA,GAAwB,KAAA,gBAAA,CACtBA,YADF,EAAwB,CAAxB;AAAA,UAAMC,KAAN,GAAA,sBAAA,CAAA,KAAA;AAAA,UAAaC,MAAb,GAAA,sBAAA,CAAA,MAAA;;AAGAD,MAAAA,KAAK,IAAIE,GAAG,CAAZF,GAAAA;AACAC,MAAAA,MAAM,IAAIC,GAAG,CAAbD,GAAAA;;AACA,UAAI,KAAA,KAAA,KAAA,KAAA,IAAwB,KAAA,MAAA,KAA5B,MAAA,EAAoD;AAClD,aAAA,UAAA,CAAA,MAAA,CAAuB;AACrBD,UAAAA,KAAK,EAAEI,IAAI,CAAJA,KAAAA,CAAWJ,KAAK,GAAG,KADL,eACdI,CADc;AAErBH,UAAAA,MAAM,EAAEG,IAAI,CAAJA,KAAAA,CAAWH,MAAM,GAAG,KAApBG,eAAAA;AAFa,SAAvB;AAIA,aAAA,KAAA,GAAA,KAAA;AACA,aAAA,MAAA,GAAA,MAAA;AACD;AACF;;;;sEACD,SAAA,QAAA,CAAA,MAAA,EAAA;AAAA,YAAA,MAAA,GAAA,IAAA;;AAAA,YAAA,sBAAA,EAAA,eAAA,EAAA,cAAA,EAAA,KAAA,EAAA,YAAA;;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,gBAAA,sBAAA,GAMM,KANN,eAAA,EAEIN,eAFJ,GAAA,sBAAA,CAAA,eAAA,EAGIY,cAHJ,GAAA,sBAAA,CAAA,cAAA,EAIIC,KAJJ,GAAA,sBAAA,CAAA,KAAA,EAKIZ,YALJ,GAAA,sBAAA,CAAA,YAAA;AAQE,qBAAA,gBAAA;AAEAW,gBAAAA,cAAc,CAAC,KAAD,UAAA,EAAkB,YAAM;AACpC,sBAAM6B,MAAM,GAAG,MAAI,CAAJ,YAAA,CAAf,SAAe,EAAf;;AACAA,kBAAAA,MAAM,CAANA,MAAAA,CACU,UAAA,KAAA,EAAA;AAAA,2BAAWxB,KAAK,CAALA,QAAAA,CAAeyB,MAAM,CAAhC,IAAWzB,CAAX;AADVwB,mBAAAA,EAAAA,OAAAA,GAAAA,IAAAA,CAGQ,UAAA,KAAA,EAAW;AACf5B,oBAAAA,KAAK,CAAC;AACJC,sBAAAA,WAAW,EAAE,MAAI,CADb,UAAA;AAEJT,sBAAAA,KAAK,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAFH,CAEG,CAFH;AAGJU,sBAAAA,OAAO,EAHH,CAAA;AAIJC,sBAAAA,KAAK,EAAE;AAJH,qBAAD,CAALH;AAMAI,oBAAAA,KAAK,CAALA,KAAAA,CAAAA,mBAAAA,CAAAA,IAAAA;AACAA,oBAAAA,KAAK,CAALA,YAAAA;AACAA,oBAAAA,KAAK,CAALA,KAAAA,CAAAA,kBAAAA,CAAAA,IAAAA;;AACA,wBAAM0B,QAAQ,GAAG,MAAI,CAAJ,kBAAA,CAAA,KAAA,EAAjB,MAAiB,CAAjB;;AACA,2BAAOA,QAAQ,IAAI,CAAC1B,KAAK,CAALA,cAAAA,GAApB,iBAAA;AAdJwB,mBAAAA;AAFF7B,iBAAc,CAAdA;;AAVF,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,CAAA;;;;;;;;;;;WA6IA,SAAA,mBAAA,CAAA,KAAA,EAAA,MAAA,EAUE;AAGA,UAAI0C,YAAY,CAAhB,MAAgB,CAAhB,EAA0B;AACxBrC,QAAAA,KAAK,CAALA,IAAAA,CAAWyB,MAAM,CAAjBzB,IAAAA,EAAAA,MAAAA;AACD;AACF;;;WAeD,SAAA,sBAAA,CAAA,KAAA,EAAA,YAAA,EAGE;AAEA,UAAA,cAAA,GAAA,cAAA,CAAA,YAAA,EAAA,CAAA,CAAA;AAAA,UAAOsC,CAAP,GAAA,cAAA,CAAA,CAAA,CAAA;AAAA,UAAUC,CAAV,GAAA,cAAA,CAAA,CAAA,CAAA;AAAA,UAAaC,CAAb,GAAA,cAAA,CAAA,CAAA,CAAA;;AACAxC,MAAAA,KAAK,CAALA,KAAAA,CAAAA,eAAAA,CAAAA,IAAAA,CAAiC,CAAA,CAAA,EAAA,CAAA,EAAjCA,CAAiC,CAAjCA;AACD;;;WAED,SAAA,aAAA,CAAA,KAAA,EAAA,YAAA,EAA2E;AAEzE,UAAA,cAAA,GAAA,cAAA,CAAA,YAAA,EAAA,CAAA,CAAA;AAAA,UAAOsC,CAAP,GAAA,cAAA,CAAA,CAAA,CAAA;AAAA,UAAUC,CAAV,GAAA,cAAA,CAAA,CAAA,CAAA;AAAA,UAAaC,CAAb,GAAA,cAAA,CAAA,CAAA,CAAA;;AACAxC,MAAAA,KAAK,CAALA,KAAAA,CAAAA,YAAAA,CAAAA,IAAAA,CAA8B,CAAA,CAAA,EAAA,CAAA,EAA9BA,CAA8B,CAA9BA;AACD;;;;;;;;;;;;;;;;;;;;;;;;;SA/VkBtB,c","sourcesContent":["import {\n  decodePickingColor,\n  DOM,\n  encodePickingColor,\n  isMini,\n} from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../types';\nimport { isEventCrash } from '../../utils/dom';\nimport { IGlobalConfigService, ISceneConfig } from '../config/IConfigService';\nimport {\n  IInteractionService,\n  IInteractionTarget,\n  InteractionEvent,\n} from '../interaction/IInteractionService';\nimport { ILayer, ILayerService } from '../layer/ILayerService';\nimport { ILngLat } from '../map/IMapService';\nimport { gl } from '../renderer/gl';\nimport { IFramebuffer } from '../renderer/IFramebuffer';\nimport { IRendererService } from '../renderer/IRendererService';\nimport { IPickingService } from './IPickingService';\n@injectable()\nexport default class PickingService implements IPickingService {\n  @inject(TYPES.IRendererService)\n  private rendererService: IRendererService;\n\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  @inject(TYPES.IInteractionService)\n  private interactionService: IInteractionService;\n\n  @inject(TYPES.ILayerService)\n  private layerService: ILayerService;\n  private pickingFBO: IFramebuffer;\n\n  private width: number = 0;\n\n  private height: number = 0;\n\n  private alreadyInPicking: boolean = false;\n\n  private pickBufferScale: number = 1.0;\n\n  public init(id: string) {\n    const {\n      createTexture2D,\n      createFramebuffer,\n      getViewportSize,\n      getContainer,\n    } = this.rendererService;\n\n    let { width, height } = this.getContainerSize(\n      getContainer() as HTMLCanvasElement | HTMLElement,\n    );\n    width *= DOM.DPR;\n    height *= DOM.DPR;\n    this.pickBufferScale =\n      this.configService.getSceneConfig(id).pickBufferScale || 1;\n    // 创建 picking framebuffer，后续实时 resize\n    this.pickingFBO = createFramebuffer({\n      color: createTexture2D({\n        width: Math.round(width / this.pickBufferScale),\n        height: Math.round(height / this.pickBufferScale),\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n      }),\n    });\n\n    // 监听 hover 事件\n    this.interactionService.on(\n      InteractionEvent.Hover,\n      this.pickingAllLayer.bind(this),\n    );\n  }\n\n  public async boxPickLayer(\n    layer: ILayer,\n    box: [number, number, number, number],\n    cb: (...args: any[]) => void,\n  ): Promise<any> {\n    const { useFramebuffer, clear, getContainer } = this.rendererService;\n    this.resizePickingFBO();\n    useFramebuffer(this.pickingFBO, () => {\n      clear({\n        framebuffer: this.pickingFBO,\n        color: [0, 0, 0, 0],\n        stencil: 0,\n        depth: 1,\n      });\n      layer.hooks.beforePickingEncode.call();\n      layer.renderModels();\n      layer.hooks.afterPickingEncode.call();\n      const features = this.pickBox(layer, box);\n      cb(features);\n    });\n  }\n\n  public pickBox(layer: ILayer, box: [number, number, number, number]): any[] {\n    const [xMin, yMin, xMax, yMax] = box.map((v) => {\n      const tmpV = v < 0 ? 0 : v;\n      return Math.floor((tmpV * DOM.DPR) / this.pickBufferScale);\n    });\n    const { getViewportSize, readPixels, getContainer } = this.rendererService;\n    let { width, height } = this.getContainerSize(\n      getContainer() as HTMLCanvasElement | HTMLElement,\n    );\n    width *= DOM.DPR;\n    height *= DOM.DPR;\n    if (\n      xMin > ((width - 1) * DOM.DPR) / this.pickBufferScale ||\n      xMax < 0 ||\n      yMin > ((height - 1) * DOM.DPR) / this.pickBufferScale ||\n      yMax < 0\n    ) {\n      return [];\n    }\n    let pickedColors: Uint8Array | undefined;\n    const w = Math.min(width / this.pickBufferScale, xMax) - xMin;\n    const h = Math.min(height / this.pickBufferScale, yMax) - yMin;\n    pickedColors = readPixels({\n      x: xMin,\n      // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n      y: Math.floor(height / this.pickBufferScale - (yMax + 1)),\n      width: w,\n      height: h,\n      data: new Uint8Array(w * h * 4),\n      framebuffer: this.pickingFBO,\n    });\n\n    const features = [];\n    const featuresIdMap: { [key: string]: boolean } = {};\n    for (let i = 0; i < pickedColors.length / 4; i = i + 1) {\n      const color = pickedColors.slice(i * 4, i * 4 + 4);\n      const pickedFeatureIdx = decodePickingColor(color);\n      if (pickedFeatureIdx !== -1 && !featuresIdMap[pickedFeatureIdx]) {\n        const rawFeature = layer.getSource().getFeatureById(pickedFeatureIdx);\n        features.push(rawFeature);\n        featuresIdMap[pickedFeatureIdx] = true;\n      }\n    }\n    return features;\n  }\n\n  // 获取容器的大小 - 兼容小程序环境\n  private getContainerSize(container: HTMLCanvasElement | HTMLElement) {\n    if (!!(container as HTMLCanvasElement).getContext) {\n      return {\n        width: (container as HTMLCanvasElement).width / DOM.DPR,\n        height: (container as HTMLCanvasElement).height / DOM.DPR,\n      };\n    } else {\n      return container.getBoundingClientRect();\n    }\n  }\n  private async pickingAllLayer(target: IInteractionTarget) {\n    if (\n      // TODO: this.alreadyInPicking 避免多次重复拾取\n      this.alreadyInPicking ||\n      // TODO: this.layerService.alreadyInRendering 一个渲染序列中只进行一次拾取操作\n      this.layerService.alreadyInRendering ||\n      // TODO: this.layerService.isMapDragging() 如果地图正在拖拽 则不进行拾取操作\n      this.layerService.isMapDragging()\n    ) {\n      return;\n    }\n    this.alreadyInPicking = true;\n    await this.pickingLayers(target);\n    this.layerService.renderLayers();\n    this.alreadyInPicking = false;\n  }\n\n  private resizePickingFBO() {\n    const { getContainer } = this.rendererService;\n    let { width, height } = this.getContainerSize(\n      getContainer() as HTMLCanvasElement | HTMLElement,\n    );\n    width *= DOM.DPR;\n    height *= DOM.DPR;\n    if (this.width !== width || this.height !== height) {\n      this.pickingFBO.resize({\n        width: Math.round(width / this.pickBufferScale),\n        height: Math.round(height / this.pickBufferScale),\n      });\n      this.width = width;\n      this.height = height;\n    }\n  }\n  private async pickingLayers(target: IInteractionTarget) {\n    const {\n      getViewportSize,\n      useFramebuffer,\n      clear,\n      getContainer,\n    } = this.rendererService;\n\n    this.resizePickingFBO();\n\n    useFramebuffer(this.pickingFBO, () => {\n      const layers = this.layerService.getLayers();\n      layers\n        .filter((layer) => layer.needPick(target.type))\n        .reverse()\n        .some((layer) => {\n          clear({\n            framebuffer: this.pickingFBO,\n            color: [0, 0, 0, 0],\n            stencil: 0,\n            depth: 1,\n          });\n          layer.hooks.beforePickingEncode.call();\n          layer.renderModels();\n          layer.hooks.afterPickingEncode.call();\n          const isPicked = this.pickFromPickingFBO(layer, target);\n          return isPicked && !layer.getLayerConfig().enablePropagation;\n        });\n    });\n  }\n\n  private pickFromPickingFBO = (\n    layer: ILayer,\n    { x, y, lngLat, type, target }: IInteractionTarget,\n  ) => {\n    let isPicked = false;\n    const { getViewportSize, readPixels, getContainer } = this.rendererService;\n    let { width, height } = this.getContainerSize(\n      getContainer() as HTMLCanvasElement | HTMLElement,\n    );\n    width *= DOM.DPR;\n    height *= DOM.DPR;\n    const { enableHighlight, enableSelect } = layer.getLayerConfig();\n\n    const xInDevicePixel = x * DOM.DPR;\n    const yInDevicePixel = y * DOM.DPR;\n    if (\n      xInDevicePixel > width - 1 * DOM.DPR ||\n      xInDevicePixel < 0 ||\n      yInDevicePixel > height - 1 * DOM.DPR ||\n      yInDevicePixel < 0\n    ) {\n      return false;\n    }\n    let pickedColors: Uint8Array | undefined;\n    pickedColors = readPixels({\n      x: Math.floor(xInDevicePixel / this.pickBufferScale),\n      // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n      y: Math.floor((height - (y + 1) * DOM.DPR) / this.pickBufferScale),\n      width: 1,\n      height: 1,\n      data: new Uint8Array(1 * 1 * 4),\n      framebuffer: this.pickingFBO,\n    });\n    if (\n      pickedColors[0] !== 0 ||\n      pickedColors[1] !== 0 ||\n      pickedColors[2] !== 0\n    ) {\n      const pickedFeatureIdx = decodePickingColor(pickedColors);\n      const rawFeature = layer.getSource().getFeatureById(pickedFeatureIdx);\n      if (\n        pickedFeatureIdx !== layer.getCurrentPickId() &&\n        type === 'mousemove'\n      ) {\n        type = 'mouseenter';\n      }\n\n      const layerTarget = {\n        x,\n        y,\n        type,\n        lngLat,\n        featureId: pickedFeatureIdx,\n        feature: rawFeature,\n        target,\n      };\n      if (!rawFeature) {\n        // this.logger.error(\n        //   '未找到颜色编码解码后的原始 feature，请检查 fragment shader 中末尾是否添加了 `gl_FragColor = filterColor(gl_FragColor);`',\n        // );\n      } else {\n        // trigger onHover/Click callback on layer\n        isPicked = true;\n        layer.setCurrentPickId(pickedFeatureIdx);\n        this.triggerHoverOnLayer(layer, layerTarget); // 触发拾取事件\n      }\n    } else {\n      // 未选中\n      const layerTarget = {\n        x,\n        y,\n        lngLat,\n        type:\n          layer.getCurrentPickId() !== null && type === 'mousemove'\n            ? 'mouseout'\n            : 'un' + type,\n        featureId: null,\n        target,\n        feature: null,\n      };\n      this.triggerHoverOnLayer(layer, {\n        ...layerTarget,\n        type: 'unpick',\n      });\n      this.triggerHoverOnLayer(layer, layerTarget);\n      layer.setCurrentPickId(null);\n    }\n\n    if (enableHighlight) {\n      this.highlightPickedFeature(layer, pickedColors);\n    }\n    if (\n      enableSelect &&\n      type === 'click' &&\n      pickedColors?.toString() !== [0, 0, 0, 0].toString()\n    ) {\n      const selectedId = decodePickingColor(pickedColors);\n      if (\n        layer.getCurrentSelectedId() === null ||\n        selectedId !== layer.getCurrentSelectedId()\n      ) {\n        this.selectFeature(layer, pickedColors);\n        layer.setCurrentSelectedId(selectedId);\n      } else {\n        this.selectFeature(layer, new Uint8Array([0, 0, 0, 0])); // toggle select\n        layer.setCurrentSelectedId(null);\n      }\n    }\n    return isPicked;\n  };\n  private triggerHoverOnLayer(\n    layer: ILayer,\n    target: {\n      x: number;\n      y: number;\n      type: string;\n      lngLat: ILngLat;\n      feature: unknown;\n      featureId: number | null;\n    },\n  ) {\n    // layer.emit(target.type, target);\n    // 判断是否发生事件冲突\n    if (isEventCrash(target)) {\n      layer.emit(target.type, target);\n    }\n  }\n\n  /**\n   * highlight 如果直接修改选中 feature 的 buffer，存在两个问题：\n   * 1. 鼠标移走时无法恢复\n   * 2. 无法实现高亮颜色与原始原色的 alpha 混合\n   * 因此高亮还是放在 shader 中做比较好\n   * @example\n   * this.layer.color('name', ['#000000'], {\n   *  featureRange: {\n   *    startIndex: pickedFeatureIdx,\n   *    endIndex: pickedFeatureIdx + 1,\n   *  },\n   * });\n   */\n  private highlightPickedFeature(\n    layer: ILayer,\n    pickedColors: Uint8Array | undefined,\n  ) {\n    // @ts-ignore\n    const [r, g, b] = pickedColors;\n    layer.hooks.beforeHighlight.call([r, g, b]);\n  }\n\n  private selectFeature(layer: ILayer, pickedColors: Uint8Array | undefined) {\n    // @ts-ignore\n    const [r, g, b] = pickedColors;\n    layer.hooks.beforeSelect.call([r, g, b]);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}