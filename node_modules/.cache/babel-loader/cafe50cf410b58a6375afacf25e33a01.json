{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Basecoat } from '../common';\nimport { Point, Rectangle } from '../geometry';\nimport { Cell } from '../model/cell';\nimport { Node } from '../model/node';\nimport { Edge } from '../model/edge';\nimport { CellView } from '../view/cell';\nimport * as Registry from '../registry';\nimport { HTML } from '../shape/standard/html';\nimport { Base } from './base';\nimport { GraphView } from './view';\nimport { Decorator } from './decorator';\nimport { CSSManager } from './css';\nimport { Hook as HookManager } from './hook';\nimport { Options as GraphOptions } from './options';\nimport { DefsManager as Defs } from './defs';\nimport { GridManager as Grid } from './grid';\nimport { CoordManager as Coord } from './coord';\nimport { Keyboard as Shortcut } from './keyboard';\nimport { PrintManager as Print } from './print';\nimport { MouseWheel as Wheel } from './mousewheel';\nimport { FormatManager as Format } from './format';\nimport { Renderer as ViewRenderer } from './renderer';\nimport { HistoryManager as History } from './history';\nimport { MiniMapManager as MiniMap } from './minimap';\nimport { SnaplineManager as Snapline } from './snapline';\nimport { ScrollerManager as Scroller } from './scroller';\nimport { SelectionManager as Selection } from './selection';\nimport { HighlightManager as Highlight } from './highlight';\nimport { TransformManager as Transform } from './transform';\nimport { ClipboardManager as Clipboard } from './clipboard';\nimport { BackgroundManager as Background } from './background';\nexport class Graph extends Basecoat {\n  constructor(options) {\n    super();\n    this.options = GraphOptions.get(options);\n    this.css = new CSSManager(this);\n    this.hook = new HookManager(this);\n    this.view = this.hook.createView();\n    this.defs = this.hook.createDefsManager();\n    this.coord = this.hook.createCoordManager();\n    this.transform = this.hook.createTransformManager();\n    this.knob = this.hook.createKnobManager();\n    this.highlight = this.hook.createHighlightManager();\n    this.grid = this.hook.createGridManager();\n    this.background = this.hook.createBackgroundManager();\n    this.model = this.hook.createModel();\n    this.renderer = this.hook.createRenderer();\n    this.clipboard = this.hook.createClipboardManager();\n    this.snapline = this.hook.createSnaplineManager();\n    this.selection = this.hook.createSelectionManager();\n    this.history = this.hook.createHistoryManager();\n    this.scroller = this.hook.createScrollerManager();\n    this.minimap = this.hook.createMiniMapManager();\n    this.keyboard = this.hook.createKeyboard();\n    this.mousewheel = this.hook.createMouseWheel();\n    this.print = this.hook.createPrintManager();\n    this.format = this.hook.createFormatManager();\n    this.panning = this.hook.createPanningManager();\n    this.size = this.hook.createSizeManager();\n  }\n\n  get container() {\n    return this.view.container;\n  }\n\n  get [Symbol.toStringTag]() {\n    return Graph.toStringTag;\n  } // #region model\n\n\n  isNode(cell) {\n    return cell.isNode();\n  }\n\n  isEdge(cell) {\n    return cell.isEdge();\n  }\n\n  resetCells(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.model.resetCells(cells, options);\n    return this;\n  }\n\n  clearCells() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.model.clear(options);\n    return this;\n  }\n\n  toJSON() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.model.toJSON(options);\n  }\n\n  parseJSON(data) {\n    return this.model.parseJSON(data);\n  }\n\n  fromJSON(data) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.model.fromJSON(data, options);\n    return this;\n  }\n\n  getCellById(id) {\n    return this.model.getCell(id);\n  }\n\n  addNode(node) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.model.addNode(node, options);\n  }\n\n  addNodes(nodes) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.addCell(nodes.map(node => Node.isNode(node) ? node : this.createNode(node)), options);\n  }\n\n  createNode(metadata) {\n    return this.model.createNode(metadata);\n  }\n\n  removeNode(node) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.model.removeCell(node, options);\n  }\n\n  addEdge(edge) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.model.addEdge(edge, options);\n  }\n\n  addEdges(edges) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.addCell(edges.map(edge => Edge.isEdge(edge) ? edge : this.createEdge(edge)), options);\n  }\n\n  removeEdge(edge) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.model.removeCell(edge, options);\n  }\n\n  createEdge(metadata) {\n    return this.model.createEdge(metadata);\n  }\n\n  addCell(cell) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.model.addCell(cell, options);\n    return this;\n  }\n\n  removeCell(cell) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.model.removeCell(cell, options);\n  }\n\n  removeCells(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.model.removeCells(cells, options);\n  }\n\n  removeConnectedEdges(cell) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.model.removeConnectedEdges(cell, options);\n  }\n\n  disconnectConnectedEdges(cell) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.model.disconnectConnectedEdges(cell, options);\n    return this;\n  }\n\n  hasCell(cell) {\n    return this.model.has(cell);\n  }\n  /**\n   * **Deprecation Notice:** `getCell` is deprecated and will be moved in next\n   * major release. Use `getCellById()` instead.\n   *\n   * @deprecated\n   */\n\n\n  getCell(id) {\n    return this.model.getCell(id);\n  }\n\n  getCells() {\n    return this.model.getCells();\n  }\n\n  getCellCount() {\n    return this.model.total();\n  }\n  /**\n   * Returns all the nodes in the graph.\n   */\n\n\n  getNodes() {\n    return this.model.getNodes();\n  }\n  /**\n   * Returns all the edges in the graph.\n   */\n\n\n  getEdges() {\n    return this.model.getEdges();\n  }\n  /**\n   * Returns all outgoing edges for the node.\n   */\n\n\n  getOutgoingEdges(cell) {\n    return this.model.getOutgoingEdges(cell);\n  }\n  /**\n   * Returns all incoming edges for the node.\n   */\n\n\n  getIncomingEdges(cell) {\n    return this.model.getIncomingEdges(cell);\n  }\n  /**\n   * Returns edges connected with cell.\n   */\n\n\n  getConnectedEdges(cell) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.model.getConnectedEdges(cell, options);\n  }\n  /**\n   * Returns an array of all the roots of the graph.\n   */\n\n\n  getRootNodes() {\n    return this.model.getRoots();\n  }\n  /**\n   * Returns an array of all the leafs of the graph.\n   */\n\n\n  getLeafNodes() {\n    return this.model.getLeafs();\n  }\n  /**\n   * Returns `true` if the node is a root node, i.e.\n   * there is no  edges coming to the node.\n   */\n\n\n  isRootNode(cell) {\n    return this.model.isRoot(cell);\n  }\n  /**\n   * Returns `true` if the node is a leaf node, i.e.\n   * there is no edges going out from the node.\n   */\n\n\n  isLeafNode(cell) {\n    return this.model.isLeaf(cell);\n  }\n  /**\n   * Returns all the neighbors of node in the graph. Neighbors are all\n   * the nodes connected to node via either incoming or outgoing edge.\n   */\n\n\n  getNeighbors(cell) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.model.getNeighbors(cell, options);\n  }\n  /**\n   * Returns `true` if `cell2` is a neighbor of `cell1`.\n   */\n\n\n  isNeighbor(cell1, cell2) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.model.isNeighbor(cell1, cell2, options);\n  }\n\n  getSuccessors(cell) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.model.getSuccessors(cell, options);\n  }\n  /**\n   * Returns `true` if `cell2` is a successor of `cell1`.\n   */\n\n\n  isSuccessor(cell1, cell2) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.model.isSuccessor(cell1, cell2, options);\n  }\n\n  getPredecessors(cell) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.model.getPredecessors(cell, options);\n  }\n  /**\n   * Returns `true` if `cell2` is a predecessor of `cell1`.\n   */\n\n\n  isPredecessor(cell1, cell2) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.model.isPredecessor(cell1, cell2, options);\n  }\n\n  getCommonAncestor() {\n    return this.model.getCommonAncestor(...arguments);\n  }\n  /**\n   * Returns an array of cells that result from finding nodes/edges that\n   * are connected to any of the cells in the cells array. This function\n   * loops over cells and if the current cell is a edge, it collects its\n   * source/target nodes; if it is an node, it collects its incoming and\n   * outgoing edges if both the edge terminal (source/target) are in the\n   * cells array.\n   */\n\n\n  getSubGraph(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.model.getSubGraph(cells, options);\n  }\n  /**\n   * Clones the whole subgraph (including all the connected links whose\n   * source/target is in the subgraph). If `options.deep` is `true`, also\n   * take into account all the embedded cells of all the subgraph cells.\n   *\n   * Returns a map of the form: { [original cell ID]: [clone] }.\n   */\n\n\n  cloneSubGraph(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.model.cloneSubGraph(cells, options);\n  }\n\n  cloneCells(cells) {\n    return this.model.cloneCells(cells);\n  }\n\n  getNodesFromPoint(x, y) {\n    return this.model.getNodesFromPoint(x, y);\n  }\n\n  getNodesInArea(x, y, w, h, options) {\n    return this.model.getNodesInArea(x, y, w, h, options);\n  }\n\n  getNodesUnderNode(node) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.model.getNodesUnderNode(node, options);\n  }\n\n  searchCell(cell, iterator) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.model.search(cell, iterator, options);\n    return this;\n  }\n  /** *\n   * Returns an array of IDs of nodes on the shortest\n   * path between source and target.\n   */\n\n\n  getShortestPath(source, target) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.model.getShortestPath(source, target, options);\n  }\n  /**\n   * Returns the bounding box that surrounds all cells in the graph.\n   */\n\n\n  getAllCellsBBox() {\n    return this.model.getAllCellsBBox();\n  }\n  /**\n   * Returns the bounding box that surrounds all the given cells.\n   */\n\n\n  getCellsBBox(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.model.getCellsBBox(cells, options);\n  }\n\n  startBatch(name) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.model.startBatch(name, data);\n  }\n\n  stopBatch(name) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.model.stopBatch(name, data);\n  }\n\n  batchUpdate(arg1, arg2, arg3) {\n    const name = typeof arg1 === 'string' ? arg1 : 'update';\n    const execute = typeof arg1 === 'string' ? arg2 : arg1;\n    const data = typeof arg2 === 'function' ? arg3 : arg2;\n    this.startBatch(name, data);\n    const result = execute();\n    this.stopBatch(name, data);\n    return result;\n  } // #endregion\n  // #region view\n\n\n  isFrozen() {\n    return this.renderer.isFrozen();\n  }\n\n  freeze() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.renderer.freeze(options);\n    return this;\n  }\n\n  unfreeze() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.renderer.unfreeze(options);\n    return this;\n  }\n\n  isAsync() {\n    return this.renderer.isAsync();\n  }\n\n  setAsync(async) {\n    this.renderer.setAsync(async);\n    return this;\n  }\n\n  findView(ref) {\n    if (Cell.isCell(ref)) {\n      return this.findViewByCell(ref);\n    }\n\n    return this.findViewByElem(ref);\n  }\n\n  findViews(ref) {\n    if (Rectangle.isRectangleLike(ref)) {\n      return this.findViewsInArea(ref);\n    }\n\n    if (Point.isPointLike(ref)) {\n      return this.findViewsFromPoint(ref);\n    }\n\n    return [];\n  }\n\n  findViewByCell(cell) {\n    return this.renderer.findViewByCell(cell);\n  }\n\n  findViewByElem(elem) {\n    return this.renderer.findViewByElem(elem);\n  }\n\n  findViewsFromPoint(x, y) {\n    const p = typeof x === 'number' ? {\n      x,\n      y: y\n    } : x;\n    return this.renderer.findViewsFromPoint(p);\n  }\n\n  findViewsInArea(x, y, width, height, options) {\n    const rect = typeof x === 'number' ? {\n      x,\n      y: y,\n      width: width,\n      height: height\n    } : x;\n    const localOptions = typeof x === 'number' ? options : y;\n    return this.renderer.findViewsInArea(rect, localOptions);\n  }\n\n  isViewMounted(view) {\n    return this.renderer.isViewMounted(view);\n  }\n\n  getMountedViews() {\n    return this.renderer.getMountedViews();\n  }\n\n  getUnmountedViews() {\n    return this.renderer.getUnmountedViews();\n  }\n\n  matrix(mat) {\n    if (typeof mat === 'undefined') {\n      return this.transform.getMatrix();\n    }\n\n    this.transform.setMatrix(mat);\n    return this;\n  }\n\n  resize(width, height) {\n    this.size.resize(width, height);\n    return this;\n  }\n\n  resizeGraph(width, height) {\n    this.size.resizeGraph(width, height);\n    return this;\n  }\n\n  resizeScroller(width, height) {\n    this.size.resizeScroller(width, height);\n    return this;\n  }\n\n  resizePage(width, height) {\n    this.size.resizePage(width, height);\n    return this;\n  }\n\n  scale(sx) {\n    let sy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : sx;\n    let cx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let cy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    if (typeof sx === 'undefined') {\n      return this.transform.getScale();\n    }\n\n    this.transform.scale(sx, sy, cx, cy);\n    return this;\n  }\n\n  zoom(factor, options) {\n    const scroller = this.scroller.widget;\n\n    if (scroller) {\n      if (typeof factor === 'undefined') {\n        return scroller.zoom();\n      }\n\n      scroller.zoom(factor, options);\n    } else {\n      if (typeof factor === 'undefined') {\n        return this.transform.getZoom();\n      }\n\n      this.transform.zoom(factor, options);\n    }\n\n    return this;\n  }\n\n  zoomTo(factor) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const scroller = this.scroller.widget;\n\n    if (scroller) {\n      scroller.zoom(factor, Object.assign(Object.assign({}, options), {\n        absolute: true\n      }));\n    } else {\n      this.transform.zoom(factor, Object.assign(Object.assign({}, options), {\n        absolute: true\n      }));\n    }\n  }\n\n  zoomToRect(rect) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const scroller = this.scroller.widget;\n\n    if (scroller) {\n      scroller.zoomToRect(rect, options);\n    } else {\n      this.transform.zoomToRect(rect, options);\n    }\n\n    return this;\n  }\n\n  zoomToFit() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const scroller = this.scroller.widget;\n\n    if (scroller) {\n      scroller.zoomToFit(options);\n    } else {\n      this.transform.zoomToFit(options);\n    }\n\n    return this;\n  }\n\n  rotate(angle, cx, cy) {\n    if (typeof angle === 'undefined') {\n      return this.transform.getRotation();\n    }\n\n    this.transform.rotate(angle, cx, cy);\n    return this;\n  }\n\n  translate(tx, ty) {\n    if (typeof tx === 'undefined') {\n      return this.transform.getTranslation();\n    }\n\n    this.transform.translate(tx, ty);\n    return this;\n  }\n\n  translateBy(dx, dy) {\n    const ts = this.translate();\n    const tx = ts.tx + dx;\n    const ty = ts.ty + dy;\n    return this.translate(tx, ty);\n  }\n  /**\n   * **Deprecation Notice:** `getArea` is deprecated and will be moved in next\n   * major release. Use `getGraphArea()` instead.\n   *\n   * @deprecated\n   */\n\n\n  getArea() {\n    return this.transform.getGraphArea();\n  }\n\n  getGraphArea() {\n    return this.transform.getGraphArea();\n  }\n\n  getContentArea() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.transform.getContentArea(options);\n  }\n\n  getContentBBox() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.transform.getContentBBox(options);\n  }\n\n  fitToContent(gridWidth, gridHeight, padding, options) {\n    return this.transform.fitToContent(gridWidth, gridHeight, padding, options);\n  }\n\n  scaleContentToFit() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.transform.scaleContentToFit(options);\n    return this;\n  }\n  /**\n   * Position the center of graph to the center of the viewport.\n   */\n\n\n  center(optons) {\n    return this.centerPoint(optons);\n  }\n\n  centerPoint(x, y, options) {\n    const scroller = this.scroller.widget;\n\n    if (scroller) {\n      scroller.centerPoint(x, y, options);\n    } else {\n      this.transform.centerPoint(x, y);\n    }\n\n    return this;\n  }\n\n  centerContent(options) {\n    const scroller = this.scroller.widget;\n\n    if (scroller) {\n      scroller.centerContent(options);\n    } else {\n      this.transform.centerContent(options);\n    }\n\n    return this;\n  }\n\n  centerCell(cell, options) {\n    const scroller = this.scroller.widget;\n\n    if (scroller) {\n      scroller.centerCell(cell, options);\n    } else {\n      this.transform.centerCell(cell);\n    }\n\n    return this;\n  }\n\n  positionPoint(point, x, y) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const scroller = this.scroller.widget;\n\n    if (scroller) {\n      scroller.positionPoint(point, x, y, options);\n    } else {\n      this.transform.positionPoint(point, x, y);\n    }\n\n    return this;\n  }\n\n  positionRect(rect, direction, options) {\n    const scroller = this.scroller.widget;\n\n    if (scroller) {\n      scroller.positionRect(rect, direction, options);\n    } else {\n      this.transform.positionRect(rect, direction);\n    }\n\n    return this;\n  }\n\n  positionCell(cell, direction, options) {\n    const scroller = this.scroller.widget;\n\n    if (scroller) {\n      scroller.positionCell(cell, direction, options);\n    } else {\n      this.transform.positionCell(cell, direction);\n    }\n\n    return this;\n  }\n\n  positionContent(pos, options) {\n    const scroller = this.scroller.widget;\n\n    if (scroller) {\n      scroller.positionContent(pos, options);\n    } else {\n      this.transform.positionContent(pos, options);\n    }\n\n    return this;\n  } // #endregion\n  // #region coord\n\n\n  getClientMatrix() {\n    return this.coord.getClientMatrix();\n  }\n  /**\n   * Returns coordinates of the graph viewport, relative to the window.\n   */\n\n\n  getClientOffset() {\n    return this.coord.getClientOffset();\n  }\n  /**\n   * Returns coordinates of the graph viewport, relative to the document.\n   */\n\n\n  getPageOffset() {\n    return this.coord.getPageOffset();\n  }\n\n  snapToGrid(x, y) {\n    return this.coord.snapToGrid(x, y);\n  }\n\n  pageToLocal(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.pageToLocalRect(x);\n    }\n\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.pageToLocalRect(x, y, width, height);\n    }\n\n    return this.coord.pageToLocalPoint(x, y);\n  }\n\n  localToPage(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.localToPageRect(x);\n    }\n\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.localToPageRect(x, y, width, height);\n    }\n\n    return this.coord.localToPagePoint(x, y);\n  }\n\n  clientToLocal(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.clientToLocalRect(x);\n    }\n\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.clientToLocalRect(x, y, width, height);\n    }\n\n    return this.coord.clientToLocalPoint(x, y);\n  }\n\n  localToClient(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.localToClientRect(x);\n    }\n\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.localToClientRect(x, y, width, height);\n    }\n\n    return this.coord.localToClientPoint(x, y);\n  }\n\n  localToGraph(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.localToGraphRect(x);\n    }\n\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.localToGraphRect(x, y, width, height);\n    }\n\n    return this.coord.localToGraphPoint(x, y);\n  }\n\n  graphToLocal(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.graphToLocalRect(x);\n    }\n\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.graphToLocalRect(x, y, width, height);\n    }\n\n    return this.coord.graphToLocalPoint(x, y);\n  }\n\n  clientToGraph(x, y, width, height) {\n    if (Rectangle.isRectangleLike(x)) {\n      return this.coord.clientToGraphRect(x);\n    }\n\n    if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n      return this.coord.clientToGraphRect(x, y, width, height);\n    }\n\n    return this.coord.clientToGraphPoint(x, y);\n  } // #endregion\n  // #region defs\n\n\n  defineFilter(options) {\n    return this.defs.filter(options);\n  }\n\n  defineGradient(options) {\n    return this.defs.gradient(options);\n  }\n\n  defineMarker(options) {\n    return this.defs.marker(options);\n  } // #endregion\n  // #region grid\n\n\n  getGridSize() {\n    return this.grid.getGridSize();\n  }\n\n  setGridSize(gridSize) {\n    this.grid.setGridSize(gridSize);\n    return this;\n  }\n\n  showGrid() {\n    this.grid.show();\n    return this;\n  }\n\n  hideGrid() {\n    this.grid.hide();\n    return this;\n  }\n\n  clearGrid() {\n    this.grid.clear();\n    return this;\n  }\n\n  drawGrid(options) {\n    this.grid.draw(options);\n    return this;\n  } // #endregion\n  // #region background\n\n\n  updateBackground() {\n    this.background.update();\n    return this;\n  }\n\n  drawBackground(options, onGraph) {\n    const scroller = this.scroller.widget;\n\n    if (scroller != null && (this.options.background == null || !onGraph)) {\n      scroller.backgroundManager.draw(options);\n    } else {\n      this.background.draw(options);\n    }\n\n    return this;\n  }\n\n  clearBackground(onGraph) {\n    const scroller = this.scroller.widget;\n\n    if (scroller != null && (this.options.background == null || !onGraph)) {\n      scroller.backgroundManager.clear();\n    } else {\n      this.background.clear();\n    }\n\n    return this;\n  } // #endregion\n  // #region clipboard\n\n\n  isClipboardEnabled() {\n    return !this.clipboard.disabled;\n  }\n\n  enableClipboard() {\n    this.clipboard.enable();\n    return this;\n  }\n\n  disableClipboard() {\n    this.clipboard.disable();\n    return this;\n  }\n\n  toggleClipboard(enabled) {\n    if (enabled != null) {\n      if (enabled !== this.isClipboardEnabled()) {\n        if (enabled) {\n          this.enableClipboard();\n        } else {\n          this.disableClipboard();\n        }\n      }\n    } else if (this.isClipboardEnabled()) {\n      this.disableClipboard();\n    } else {\n      this.enableClipboard();\n    }\n\n    return this;\n  }\n\n  isClipboardEmpty() {\n    return this.clipboard.isEmpty();\n  }\n\n  getCellsInClipboard() {\n    return this.clipboard.cells;\n  }\n\n  cleanClipboard() {\n    this.clipboard.clean();\n    return this;\n  }\n\n  copy(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.clipboard.copy(cells, options);\n    return this;\n  }\n\n  cut(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.clipboard.cut(cells, options);\n    return this;\n  }\n\n  paste() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let graph = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n    return this.clipboard.paste(options, graph);\n  } // #endregion\n  // #region redo/undo\n\n\n  isHistoryEnabled() {\n    return !this.history.disabled;\n  }\n\n  enableHistory() {\n    this.history.enable();\n    return this;\n  }\n\n  disableHistory() {\n    this.history.disable();\n    return this;\n  }\n\n  toggleHistory(enabled) {\n    if (enabled != null) {\n      if (enabled !== this.isHistoryEnabled()) {\n        if (enabled) {\n          this.enableHistory();\n        } else {\n          this.disableHistory();\n        }\n      }\n    } else if (this.isHistoryEnabled()) {\n      this.disableHistory();\n    } else {\n      this.enableHistory();\n    }\n\n    return this;\n  }\n\n  undo() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.history.undo(options);\n    return this;\n  }\n\n  undoAndCancel() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.history.cancel(options);\n    return this;\n  }\n\n  redo() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.history.redo(options);\n    return this;\n  }\n\n  canUndo() {\n    return this.history.canUndo();\n  }\n\n  canRedo() {\n    return this.history.canRedo();\n  }\n\n  cleanHistory() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.history.clean(options);\n  } // #endregion\n  // #region keyboard\n\n\n  isKeyboardEnabled() {\n    return !this.keyboard.disabled;\n  }\n\n  enableKeyboard() {\n    this.keyboard.enable();\n    return this;\n  }\n\n  disableKeyboard() {\n    this.keyboard.disable();\n    return this;\n  }\n\n  toggleKeyboard(enabled) {\n    if (enabled != null) {\n      if (enabled !== this.isKeyboardEnabled()) {\n        if (enabled) {\n          this.enableKeyboard();\n        } else {\n          this.disableKeyboard();\n        }\n      }\n    } else if (this.isKeyboardEnabled()) {\n      this.disableKeyboard();\n    } else {\n      this.enableKeyboard();\n    }\n\n    return this;\n  }\n\n  bindKey(keys, callback, action) {\n    this.keyboard.on(keys, callback, action);\n    return this;\n  }\n\n  unbindKey(keys, action) {\n    this.keyboard.off(keys, action);\n    return this;\n  } // #endregion\n  // #region mousewheel\n\n\n  isMouseWheelEnabled() {\n    return !this.mousewheel.disabled;\n  }\n\n  enableMouseWheel() {\n    this.mousewheel.enable();\n    return this;\n  }\n\n  disableMouseWheel() {\n    this.mousewheel.disable();\n    return this;\n  }\n\n  toggleMouseWheel(enabled) {\n    if (enabled == null) {\n      if (this.isMouseWheelEnabled()) {\n        this.disableMouseWheel();\n      } else {\n        this.enableMouseWheel();\n      }\n    } else if (enabled) {\n      this.enableMouseWheel();\n    } else {\n      this.disableMouseWheel();\n    }\n\n    return this;\n  } // #endregion\n  // #region panning\n\n\n  isPannable() {\n    const scroller = this.scroller.widget;\n\n    if (scroller) {\n      return this.scroller.pannable;\n    }\n\n    return this.panning.pannable;\n  }\n\n  enablePanning() {\n    const scroller = this.scroller.widget;\n\n    if (scroller) {\n      this.scroller.enablePanning();\n    } else {\n      this.panning.enablePanning();\n    }\n\n    return this;\n  }\n\n  disablePanning() {\n    const scroller = this.scroller.widget;\n\n    if (scroller) {\n      this.scroller.disablePanning();\n    } else {\n      this.panning.disablePanning();\n    }\n\n    return this;\n  }\n\n  togglePanning(pannable) {\n    if (pannable == null) {\n      if (this.isPannable()) {\n        this.disablePanning();\n      } else {\n        this.enablePanning();\n      }\n    } else if (pannable !== this.isPannable()) {\n      if (pannable) {\n        this.enablePanning();\n      } else {\n        this.disablePanning();\n      }\n    }\n\n    return this;\n  } // #endregion\n  // #region scroller\n\n\n  lockScroller() {\n    var _a;\n\n    (_a = this.scroller.widget) === null || _a === void 0 ? void 0 : _a.lock();\n  }\n\n  unlockScroller() {\n    var _a;\n\n    (_a = this.scroller.widget) === null || _a === void 0 ? void 0 : _a.unlock();\n  }\n\n  updateScroller() {\n    var _a;\n\n    (_a = this.scroller.widget) === null || _a === void 0 ? void 0 : _a.update();\n  }\n\n  getScrollbarPosition() {\n    const scroller = this.scroller.widget;\n    return scroller.scrollbarPosition();\n  }\n\n  setScrollbarPosition(left, top, options) {\n    const scroller = this.scroller.widget;\n    scroller.scrollbarPosition(left, top, options);\n    return this;\n  }\n  /**\n   * Try to scroll to ensure that the position (x,y) on the graph (in local\n   * coordinates) is at the center of the viewport. If only one of the\n   * coordinates is specified, only scroll in the specified dimension and\n   * keep the other coordinate unchanged.\n   */\n\n\n  scrollToPoint(x, y, options) {\n    const scroller = this.scroller.widget;\n    scroller.scrollToPoint(x, y, options);\n    return this;\n  }\n  /**\n   * Try to scroll to ensure that the center of graph content is at the\n   * center of the viewport.\n   */\n\n\n  scrollToContent(options) {\n    const scroller = this.scroller.widget;\n    scroller.scrollToContent(options);\n    return this;\n  }\n  /**\n   * Try to scroll to ensure that the center of cell is at the center of\n   * the viewport.\n   */\n\n\n  scrollToCell(cell, options) {\n    const scroller = this.scroller.widget;\n    scroller.scrollToCell(cell, options);\n    return this;\n  }\n\n  transitionToPoint(x, y, options) {\n    const scroller = this.scroller.widget;\n    scroller.transitionToPoint(x, y, options);\n    return this;\n  }\n\n  transitionToRect(rect) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const scroller = this.scroller.widget;\n    scroller.transitionToRect(rect, options);\n    return this;\n  } // #endregion\n  // #region selection\n\n\n  isSelectionEnabled() {\n    return !this.selection.disabled;\n  }\n\n  enableSelection() {\n    this.selection.enable();\n    return this;\n  }\n\n  disableSelection() {\n    this.selection.disable();\n    return this;\n  }\n\n  toggleSelection(enabled) {\n    if (enabled != null) {\n      if (enabled !== this.isSelectionEnabled()) {\n        if (enabled) {\n          this.enableSelection();\n        } else {\n          this.disableSelection();\n        }\n      }\n    } else if (this.isSelectionEnabled()) {\n      this.disableSelection();\n    } else {\n      this.enableSelection();\n    }\n\n    return this;\n  }\n\n  isMultipleSelection() {\n    return this.selection.isMultiple();\n  }\n\n  enableMultipleSelection() {\n    this.selection.enableMultiple();\n    return this;\n  }\n\n  disableMultipleSelection() {\n    this.selection.disableMultiple();\n    return this;\n  }\n\n  toggleMultipleSelection(multiple) {\n    if (multiple != null) {\n      if (multiple !== this.isMultipleSelection()) {\n        if (multiple) {\n          this.enableMultipleSelection();\n        } else {\n          this.disableMultipleSelection();\n        }\n      }\n    } else if (this.isMultipleSelection()) {\n      this.disableMultipleSelection();\n    } else {\n      this.enableMultipleSelection();\n    }\n\n    return this;\n  }\n\n  isSelectionMovable() {\n    return this.selection.widget.options.movable !== false;\n  }\n\n  enableSelectionMovable() {\n    this.selection.widget.options.movable = true;\n    return this;\n  }\n\n  disableSelectionMovable() {\n    this.selection.widget.options.movable = false;\n    return this;\n  }\n\n  toggleSelectionMovable(movable) {\n    if (movable != null) {\n      if (movable !== this.isSelectionMovable()) {\n        if (movable) {\n          this.enableSelectionMovable();\n        } else {\n          this.disableSelectionMovable();\n        }\n      }\n    } else if (this.isSelectionMovable()) {\n      this.disableSelectionMovable();\n    } else {\n      this.enableSelectionMovable();\n    }\n\n    return this;\n  }\n\n  isRubberbandEnabled() {\n    return !this.selection.rubberbandDisabled;\n  }\n\n  enableRubberband() {\n    this.selection.enableRubberband();\n    return this;\n  }\n\n  disableRubberband() {\n    this.selection.disableRubberband();\n    return this;\n  }\n\n  toggleRubberband(enabled) {\n    if (enabled != null) {\n      if (enabled !== this.isRubberbandEnabled()) {\n        if (enabled) {\n          this.enableRubberband();\n        } else {\n          this.disableRubberband();\n        }\n      }\n    } else if (this.isRubberbandEnabled()) {\n      this.disableRubberband();\n    } else {\n      this.enableRubberband();\n    }\n\n    return this;\n  }\n\n  isStrictRubberband() {\n    return this.selection.widget.options.strict === true;\n  }\n\n  enableStrictRubberband() {\n    this.selection.widget.options.strict = true;\n    return this;\n  }\n\n  disableStrictRubberband() {\n    this.selection.widget.options.strict = false;\n    return this;\n  }\n\n  toggleStrictRubberband(strict) {\n    if (strict != null) {\n      if (strict !== this.isStrictRubberband()) {\n        if (strict) {\n          this.enableStrictRubberband();\n        } else {\n          this.disableStrictRubberband();\n        }\n      }\n    } else if (this.isStrictRubberband()) {\n      this.disableStrictRubberband();\n    } else {\n      this.enableStrictRubberband();\n    }\n\n    return this;\n  }\n\n  setRubberbandModifiers(modifiers) {\n    this.selection.setModifiers(modifiers);\n  }\n\n  setSelectionFilter(filter) {\n    this.selection.setFilter(filter);\n    return this;\n  }\n\n  setSelectionDisplayContent(content) {\n    this.selection.setContent(content);\n    return this;\n  }\n\n  isSelectionEmpty() {\n    return this.selection.isEmpty();\n  }\n\n  cleanSelection(options) {\n    this.selection.clean(options);\n    return this;\n  }\n\n  resetSelection(cells, options) {\n    this.selection.reset(cells, options);\n    return this;\n  }\n\n  getSelectedCells() {\n    return this.selection.cells;\n  }\n\n  getSelectedCellCount() {\n    return this.selection.length;\n  }\n\n  isSelected(cell) {\n    return this.selection.isSelected(cell);\n  }\n\n  select(cells, options) {\n    this.selection.select(cells, options);\n    return this;\n  }\n\n  unselect(cells, options) {\n    this.selection.unselect(cells, options);\n    return this;\n  } // #endregion\n  // #region snapline\n\n\n  isSnaplineEnabled() {\n    return !this.snapline.widget.disabled;\n  }\n\n  enableSnapline() {\n    this.snapline.widget.enable();\n    return this;\n  }\n\n  disableSnapline() {\n    this.snapline.widget.disable();\n    return this;\n  }\n\n  toggleSnapline(enabled) {\n    if (enabled != null) {\n      if (enabled !== this.isSnaplineEnabled()) {\n        if (enabled) {\n          this.enableSnapline();\n        } else {\n          this.disableSnapline();\n        }\n      }\n    } else {\n      if (this.isSnaplineEnabled()) {\n        this.disableSnapline();\n      } else {\n        this.enableSnapline();\n      }\n\n      return this;\n    }\n  }\n\n  hideSnapline() {\n    this.snapline.widget.hide();\n    return this;\n  }\n\n  setSnaplineFilter(filter) {\n    this.snapline.widget.setFilter(filter);\n    return this;\n  }\n\n  isSnaplineOnResizingEnabled() {\n    return this.snapline.widget.options.resizing === true;\n  }\n\n  enableSnaplineOnResizing() {\n    this.snapline.widget.options.resizing = true;\n    return this;\n  }\n\n  disableSnaplineOnResizing() {\n    this.snapline.widget.options.resizing = false;\n    return this;\n  }\n\n  toggleSnaplineOnResizing(enableOnResizing) {\n    if (enableOnResizing != null) {\n      if (enableOnResizing !== this.isSnaplineOnResizingEnabled()) {\n        if (enableOnResizing) {\n          this.enableSnaplineOnResizing();\n        } else {\n          this.disableSnaplineOnResizing();\n        }\n      }\n    } else if (this.isSnaplineOnResizingEnabled()) {\n      this.disableSnaplineOnResizing();\n    } else {\n      this.enableSnaplineOnResizing();\n    }\n\n    return this;\n  }\n\n  isSharpSnapline() {\n    return this.snapline.widget.options.sharp === true;\n  }\n\n  enableSharpSnapline() {\n    this.snapline.widget.options.sharp = true;\n    return this;\n  }\n\n  disableSharpSnapline() {\n    this.snapline.widget.options.sharp = false;\n    return this;\n  }\n\n  toggleSharpSnapline(sharp) {\n    if (sharp != null) {\n      if (sharp !== this.isSharpSnapline()) {\n        if (sharp) {\n          this.enableSharpSnapline();\n        } else {\n          this.disableSharpSnapline();\n        }\n      }\n    } else if (this.isSharpSnapline()) {\n      this.disableSharpSnapline();\n    } else {\n      this.enableSharpSnapline();\n    }\n\n    return this;\n  }\n\n  getSnaplineTolerance() {\n    return this.snapline.widget.options.tolerance;\n  }\n\n  setSnaplineTolerance(tolerance) {\n    this.snapline.widget.options.tolerance = tolerance;\n    return this;\n  } // #endregion\n  // #region tools\n\n\n  removeTools() {\n    this.emit('tools:remove');\n    return this;\n  }\n\n  hideTools() {\n    this.emit('tools:hide');\n    return this;\n  }\n\n  showTools() {\n    this.emit('tools:show');\n    return this;\n  } // #endregion\n  // #region format\n\n\n  toSVG(callback) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.format.toSVG(callback, options);\n  }\n\n  toDataURL(callback, options) {\n    this.format.toDataURL(callback, options);\n  }\n\n  toPNG(callback) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.format.toPNG(callback, options);\n  }\n\n  toJPEG(callback) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.format.toJPEG(callback, options);\n  } // #endregion\n  // #region print\n\n\n  printPreview(options) {\n    this.print.show(options);\n  } // #endregion\n  // #region dispose\n\n\n  dispose() {\n    this.clearCells();\n    this.off();\n    this.css.dispose();\n    this.hook.dispose();\n    this.defs.dispose();\n    this.grid.dispose();\n    this.coord.dispose();\n    this.transform.dispose();\n    this.knob.dispose();\n    this.highlight.dispose();\n    this.background.dispose();\n    this.clipboard.dispose();\n    this.snapline.dispose();\n    this.selection.dispose();\n    this.history.dispose();\n    this.keyboard.dispose();\n    this.mousewheel.dispose();\n    this.print.dispose();\n    this.format.dispose();\n    this.minimap.dispose();\n    this.panning.dispose();\n    this.scroller.dispose();\n    this.view.dispose();\n    this.renderer.dispose();\n    this.size.dispose();\n  }\n\n}\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"lockScroller\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"unlockScroller\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"updateScroller\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"getScrollbarPosition\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"setScrollbarPosition\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"scrollToPoint\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"scrollToContent\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"scrollToCell\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"transitionToPoint\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"transitionToRect\", null);\n\n__decorate([Basecoat.dispose()], Graph.prototype, \"dispose\", null);\n\n(function (Graph) {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  Graph.View = GraphView;\n  Graph.Hook = HookManager;\n  Graph.Renderer = ViewRenderer;\n  Graph.Keyboard = Shortcut;\n  Graph.MouseWheel = Wheel;\n  Graph.BaseManager = Base;\n  Graph.DefsManager = Defs;\n  Graph.GridManager = Grid;\n  Graph.CoordManager = Coord;\n  Graph.PrintManager = Print;\n  Graph.FormatManager = Format;\n  Graph.MiniMapManager = MiniMap;\n  Graph.HistoryManager = History;\n  Graph.SnaplineManager = Snapline;\n  Graph.ScrollerManager = Scroller;\n  Graph.ClipboardManager = Clipboard;\n  Graph.TransformManager = Transform;\n  Graph.HighlightManager = Highlight;\n  Graph.BackgroundManager = Background;\n  Graph.SelectionManager = Selection;\n})(Graph || (Graph = {}));\n\n(function (Graph) {\n  Graph.toStringTag = `X6.${Graph.name}`;\n\n  function isGraph(instance) {\n    if (instance == null) {\n      return false;\n    }\n\n    if (instance instanceof Graph) {\n      return true;\n    }\n\n    const tag = instance[Symbol.toStringTag];\n    const graph = instance;\n\n    if ((tag == null || tag === Graph.toStringTag) && graph.hook != null && graph.view != null && graph.model != null) {\n      return true;\n    }\n\n    return false;\n  }\n\n  Graph.isGraph = isGraph;\n})(Graph || (Graph = {}));\n\n(function (Graph) {\n  function render(options, data) {\n    const graph = options instanceof HTMLElement ? new Graph({\n      container: options\n    }) : new Graph(options);\n\n    if (data != null) {\n      graph.fromJSON(data);\n    }\n\n    return graph;\n  }\n\n  Graph.render = render;\n})(Graph || (Graph = {}));\n\n(function (Graph) {\n  Graph.registerNode = Node.registry.register;\n  Graph.registerEdge = Edge.registry.register;\n  Graph.registerView = CellView.registry.register;\n  Graph.registerAttr = Registry.Attr.registry.register;\n  Graph.registerGrid = Registry.Grid.registry.register;\n  Graph.registerFilter = Registry.Filter.registry.register;\n  Graph.registerNodeTool = Registry.NodeTool.registry.register;\n  Graph.registerEdgeTool = Registry.EdgeTool.registry.register;\n  Graph.registerBackground = Registry.Background.registry.register;\n  Graph.registerHighlighter = Registry.Highlighter.registry.register;\n  Graph.registerPortLayout = Registry.PortLayout.registry.register;\n  Graph.registerPortLabelLayout = Registry.PortLabelLayout.registry.register;\n  Graph.registerMarker = Registry.Marker.registry.register;\n  Graph.registerRouter = Registry.Router.registry.register;\n  Graph.registerConnector = Registry.Connector.registry.register;\n  Graph.registerAnchor = Registry.NodeAnchor.registry.register;\n  Graph.registerEdgeAnchor = Registry.EdgeAnchor.registry.register;\n  Graph.registerConnectionPoint = Registry.ConnectionPoint.registry.register;\n  Graph.registerConnectionStrategy = Registry.ConnectionStrategy.registry.register;\n  Graph.registerHTMLComponent = HTML.componentRegistry.register;\n})(Graph || (Graph = {}));\n\n(function (Graph) {\n  Graph.unregisterNode = Node.registry.unregister;\n  Graph.unregisterEdge = Edge.registry.unregister;\n  Graph.unregisterView = CellView.registry.unregister;\n  Graph.unregisterAttr = Registry.Attr.registry.unregister;\n  Graph.unregisterGrid = Registry.Grid.registry.unregister;\n  Graph.unregisterFilter = Registry.Filter.registry.unregister;\n  Graph.unregisterNodeTool = Registry.NodeTool.registry.unregister;\n  Graph.unregisterEdgeTool = Registry.EdgeTool.registry.unregister;\n  Graph.unregisterBackground = Registry.Background.registry.unregister;\n  Graph.unregisterHighlighter = Registry.Highlighter.registry.unregister;\n  Graph.unregisterPortLayout = Registry.PortLayout.registry.unregister;\n  Graph.unregisterPortLabelLayout = Registry.PortLabelLayout.registry.unregister;\n  Graph.unregisterMarker = Registry.Marker.registry.unregister;\n  Graph.unregisterRouter = Registry.Router.registry.unregister;\n  Graph.unregisterConnector = Registry.Connector.registry.unregister;\n  Graph.unregisterAnchor = Registry.NodeAnchor.registry.unregister;\n  Graph.unregisterEdgeAnchor = Registry.EdgeAnchor.registry.unregister;\n  Graph.unregisterConnectionPoint = Registry.ConnectionPoint.registry.unregister;\n  Graph.unregisterConnectionStrategy = Registry.ConnectionStrategy.registry.unregister;\n  Graph.unregisterHTMLComponent = HTML.componentRegistry.unregister;\n})(Graph || (Graph = {}));","map":{"version":3,"sources":["../../src/graph/graph.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Basecoat } from '../common';\nimport { Point, Rectangle } from '../geometry';\nimport { Cell } from '../model/cell';\nimport { Node } from '../model/node';\nimport { Edge } from '../model/edge';\nimport { CellView } from '../view/cell';\nimport * as Registry from '../registry';\nimport { HTML } from '../shape/standard/html';\nimport { Base } from './base';\nimport { GraphView } from './view';\nimport { Decorator } from './decorator';\nimport { CSSManager } from './css';\nimport { Hook as HookManager } from './hook';\nimport { Options as GraphOptions } from './options';\nimport { DefsManager as Defs } from './defs';\nimport { GridManager as Grid } from './grid';\nimport { CoordManager as Coord } from './coord';\nimport { Keyboard as Shortcut } from './keyboard';\nimport { PrintManager as Print } from './print';\nimport { MouseWheel as Wheel } from './mousewheel';\nimport { FormatManager as Format } from './format';\nimport { Renderer as ViewRenderer } from './renderer';\nimport { HistoryManager as History } from './history';\nimport { MiniMapManager as MiniMap } from './minimap';\nimport { SnaplineManager as Snapline } from './snapline';\nimport { ScrollerManager as Scroller } from './scroller';\nimport { SelectionManager as Selection } from './selection';\nimport { HighlightManager as Highlight } from './highlight';\nimport { TransformManager as Transform } from './transform';\nimport { ClipboardManager as Clipboard } from './clipboard';\nimport { BackgroundManager as Background } from './background';\nexport class Graph extends Basecoat {\n    constructor(options) {\n        super();\n        this.options = GraphOptions.get(options);\n        this.css = new CSSManager(this);\n        this.hook = new HookManager(this);\n        this.view = this.hook.createView();\n        this.defs = this.hook.createDefsManager();\n        this.coord = this.hook.createCoordManager();\n        this.transform = this.hook.createTransformManager();\n        this.knob = this.hook.createKnobManager();\n        this.highlight = this.hook.createHighlightManager();\n        this.grid = this.hook.createGridManager();\n        this.background = this.hook.createBackgroundManager();\n        this.model = this.hook.createModel();\n        this.renderer = this.hook.createRenderer();\n        this.clipboard = this.hook.createClipboardManager();\n        this.snapline = this.hook.createSnaplineManager();\n        this.selection = this.hook.createSelectionManager();\n        this.history = this.hook.createHistoryManager();\n        this.scroller = this.hook.createScrollerManager();\n        this.minimap = this.hook.createMiniMapManager();\n        this.keyboard = this.hook.createKeyboard();\n        this.mousewheel = this.hook.createMouseWheel();\n        this.print = this.hook.createPrintManager();\n        this.format = this.hook.createFormatManager();\n        this.panning = this.hook.createPanningManager();\n        this.size = this.hook.createSizeManager();\n    }\n    get container() {\n        return this.view.container;\n    }\n    get [Symbol.toStringTag]() {\n        return Graph.toStringTag;\n    }\n    // #region model\n    isNode(cell) {\n        return cell.isNode();\n    }\n    isEdge(cell) {\n        return cell.isEdge();\n    }\n    resetCells(cells, options = {}) {\n        this.model.resetCells(cells, options);\n        return this;\n    }\n    clearCells(options = {}) {\n        this.model.clear(options);\n        return this;\n    }\n    toJSON(options = {}) {\n        return this.model.toJSON(options);\n    }\n    parseJSON(data) {\n        return this.model.parseJSON(data);\n    }\n    fromJSON(data, options = {}) {\n        this.model.fromJSON(data, options);\n        return this;\n    }\n    getCellById(id) {\n        return this.model.getCell(id);\n    }\n    addNode(node, options = {}) {\n        return this.model.addNode(node, options);\n    }\n    addNodes(nodes, options = {}) {\n        return this.addCell(nodes.map((node) => (Node.isNode(node) ? node : this.createNode(node))), options);\n    }\n    createNode(metadata) {\n        return this.model.createNode(metadata);\n    }\n    removeNode(node, options = {}) {\n        return this.model.removeCell(node, options);\n    }\n    addEdge(edge, options = {}) {\n        return this.model.addEdge(edge, options);\n    }\n    addEdges(edges, options = {}) {\n        return this.addCell(edges.map((edge) => (Edge.isEdge(edge) ? edge : this.createEdge(edge))), options);\n    }\n    removeEdge(edge, options = {}) {\n        return this.model.removeCell(edge, options);\n    }\n    createEdge(metadata) {\n        return this.model.createEdge(metadata);\n    }\n    addCell(cell, options = {}) {\n        this.model.addCell(cell, options);\n        return this;\n    }\n    removeCell(cell, options = {}) {\n        return this.model.removeCell(cell, options);\n    }\n    removeCells(cells, options = {}) {\n        return this.model.removeCells(cells, options);\n    }\n    removeConnectedEdges(cell, options = {}) {\n        return this.model.removeConnectedEdges(cell, options);\n    }\n    disconnectConnectedEdges(cell, options = {}) {\n        this.model.disconnectConnectedEdges(cell, options);\n        return this;\n    }\n    hasCell(cell) {\n        return this.model.has(cell);\n    }\n    /**\n     * **Deprecation Notice:** `getCell` is deprecated and will be moved in next\n     * major release. Use `getCellById()` instead.\n     *\n     * @deprecated\n     */\n    getCell(id) {\n        return this.model.getCell(id);\n    }\n    getCells() {\n        return this.model.getCells();\n    }\n    getCellCount() {\n        return this.model.total();\n    }\n    /**\n     * Returns all the nodes in the graph.\n     */\n    getNodes() {\n        return this.model.getNodes();\n    }\n    /**\n     * Returns all the edges in the graph.\n     */\n    getEdges() {\n        return this.model.getEdges();\n    }\n    /**\n     * Returns all outgoing edges for the node.\n     */\n    getOutgoingEdges(cell) {\n        return this.model.getOutgoingEdges(cell);\n    }\n    /**\n     * Returns all incoming edges for the node.\n     */\n    getIncomingEdges(cell) {\n        return this.model.getIncomingEdges(cell);\n    }\n    /**\n     * Returns edges connected with cell.\n     */\n    getConnectedEdges(cell, options = {}) {\n        return this.model.getConnectedEdges(cell, options);\n    }\n    /**\n     * Returns an array of all the roots of the graph.\n     */\n    getRootNodes() {\n        return this.model.getRoots();\n    }\n    /**\n     * Returns an array of all the leafs of the graph.\n     */\n    getLeafNodes() {\n        return this.model.getLeafs();\n    }\n    /**\n     * Returns `true` if the node is a root node, i.e.\n     * there is no  edges coming to the node.\n     */\n    isRootNode(cell) {\n        return this.model.isRoot(cell);\n    }\n    /**\n     * Returns `true` if the node is a leaf node, i.e.\n     * there is no edges going out from the node.\n     */\n    isLeafNode(cell) {\n        return this.model.isLeaf(cell);\n    }\n    /**\n     * Returns all the neighbors of node in the graph. Neighbors are all\n     * the nodes connected to node via either incoming or outgoing edge.\n     */\n    getNeighbors(cell, options = {}) {\n        return this.model.getNeighbors(cell, options);\n    }\n    /**\n     * Returns `true` if `cell2` is a neighbor of `cell1`.\n     */\n    isNeighbor(cell1, cell2, options = {}) {\n        return this.model.isNeighbor(cell1, cell2, options);\n    }\n    getSuccessors(cell, options = {}) {\n        return this.model.getSuccessors(cell, options);\n    }\n    /**\n     * Returns `true` if `cell2` is a successor of `cell1`.\n     */\n    isSuccessor(cell1, cell2, options = {}) {\n        return this.model.isSuccessor(cell1, cell2, options);\n    }\n    getPredecessors(cell, options = {}) {\n        return this.model.getPredecessors(cell, options);\n    }\n    /**\n     * Returns `true` if `cell2` is a predecessor of `cell1`.\n     */\n    isPredecessor(cell1, cell2, options = {}) {\n        return this.model.isPredecessor(cell1, cell2, options);\n    }\n    getCommonAncestor(...cells) {\n        return this.model.getCommonAncestor(...cells);\n    }\n    /**\n     * Returns an array of cells that result from finding nodes/edges that\n     * are connected to any of the cells in the cells array. This function\n     * loops over cells and if the current cell is a edge, it collects its\n     * source/target nodes; if it is an node, it collects its incoming and\n     * outgoing edges if both the edge terminal (source/target) are in the\n     * cells array.\n     */\n    getSubGraph(cells, options = {}) {\n        return this.model.getSubGraph(cells, options);\n    }\n    /**\n     * Clones the whole subgraph (including all the connected links whose\n     * source/target is in the subgraph). If `options.deep` is `true`, also\n     * take into account all the embedded cells of all the subgraph cells.\n     *\n     * Returns a map of the form: { [original cell ID]: [clone] }.\n     */\n    cloneSubGraph(cells, options = {}) {\n        return this.model.cloneSubGraph(cells, options);\n    }\n    cloneCells(cells) {\n        return this.model.cloneCells(cells);\n    }\n    getNodesFromPoint(x, y) {\n        return this.model.getNodesFromPoint(x, y);\n    }\n    getNodesInArea(x, y, w, h, options) {\n        return this.model.getNodesInArea(x, y, w, h, options);\n    }\n    getNodesUnderNode(node, options = {}) {\n        return this.model.getNodesUnderNode(node, options);\n    }\n    searchCell(cell, iterator, options = {}) {\n        this.model.search(cell, iterator, options);\n        return this;\n    }\n    /** *\n     * Returns an array of IDs of nodes on the shortest\n     * path between source and target.\n     */\n    getShortestPath(source, target, options = {}) {\n        return this.model.getShortestPath(source, target, options);\n    }\n    /**\n     * Returns the bounding box that surrounds all cells in the graph.\n     */\n    getAllCellsBBox() {\n        return this.model.getAllCellsBBox();\n    }\n    /**\n     * Returns the bounding box that surrounds all the given cells.\n     */\n    getCellsBBox(cells, options = {}) {\n        return this.model.getCellsBBox(cells, options);\n    }\n    startBatch(name, data = {}) {\n        this.model.startBatch(name, data);\n    }\n    stopBatch(name, data = {}) {\n        this.model.stopBatch(name, data);\n    }\n    batchUpdate(arg1, arg2, arg3) {\n        const name = typeof arg1 === 'string' ? arg1 : 'update';\n        const execute = typeof arg1 === 'string' ? arg2 : arg1;\n        const data = typeof arg2 === 'function' ? arg3 : arg2;\n        this.startBatch(name, data);\n        const result = execute();\n        this.stopBatch(name, data);\n        return result;\n    }\n    // #endregion\n    // #region view\n    isFrozen() {\n        return this.renderer.isFrozen();\n    }\n    freeze(options = {}) {\n        this.renderer.freeze(options);\n        return this;\n    }\n    unfreeze(options = {}) {\n        this.renderer.unfreeze(options);\n        return this;\n    }\n    isAsync() {\n        return this.renderer.isAsync();\n    }\n    setAsync(async) {\n        this.renderer.setAsync(async);\n        return this;\n    }\n    findView(ref) {\n        if (Cell.isCell(ref)) {\n            return this.findViewByCell(ref);\n        }\n        return this.findViewByElem(ref);\n    }\n    findViews(ref) {\n        if (Rectangle.isRectangleLike(ref)) {\n            return this.findViewsInArea(ref);\n        }\n        if (Point.isPointLike(ref)) {\n            return this.findViewsFromPoint(ref);\n        }\n        return [];\n    }\n    findViewByCell(cell) {\n        return this.renderer.findViewByCell(cell);\n    }\n    findViewByElem(elem) {\n        return this.renderer.findViewByElem(elem);\n    }\n    findViewsFromPoint(x, y) {\n        const p = typeof x === 'number' ? { x, y: y } : x;\n        return this.renderer.findViewsFromPoint(p);\n    }\n    findViewsInArea(x, y, width, height, options) {\n        const rect = typeof x === 'number'\n            ? {\n                x,\n                y: y,\n                width: width,\n                height: height,\n            }\n            : x;\n        const localOptions = typeof x === 'number'\n            ? options\n            : y;\n        return this.renderer.findViewsInArea(rect, localOptions);\n    }\n    isViewMounted(view) {\n        return this.renderer.isViewMounted(view);\n    }\n    getMountedViews() {\n        return this.renderer.getMountedViews();\n    }\n    getUnmountedViews() {\n        return this.renderer.getUnmountedViews();\n    }\n    matrix(mat) {\n        if (typeof mat === 'undefined') {\n            return this.transform.getMatrix();\n        }\n        this.transform.setMatrix(mat);\n        return this;\n    }\n    resize(width, height) {\n        this.size.resize(width, height);\n        return this;\n    }\n    resizeGraph(width, height) {\n        this.size.resizeGraph(width, height);\n        return this;\n    }\n    resizeScroller(width, height) {\n        this.size.resizeScroller(width, height);\n        return this;\n    }\n    resizePage(width, height) {\n        this.size.resizePage(width, height);\n        return this;\n    }\n    scale(sx, sy = sx, cx = 0, cy = 0) {\n        if (typeof sx === 'undefined') {\n            return this.transform.getScale();\n        }\n        this.transform.scale(sx, sy, cx, cy);\n        return this;\n    }\n    zoom(factor, options) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            if (typeof factor === 'undefined') {\n                return scroller.zoom();\n            }\n            scroller.zoom(factor, options);\n        }\n        else {\n            if (typeof factor === 'undefined') {\n                return this.transform.getZoom();\n            }\n            this.transform.zoom(factor, options);\n        }\n        return this;\n    }\n    zoomTo(factor, options = {}) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.zoom(factor, Object.assign(Object.assign({}, options), { absolute: true }));\n        }\n        else {\n            this.transform.zoom(factor, Object.assign(Object.assign({}, options), { absolute: true }));\n        }\n    }\n    zoomToRect(rect, options = {}) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.zoomToRect(rect, options);\n        }\n        else {\n            this.transform.zoomToRect(rect, options);\n        }\n        return this;\n    }\n    zoomToFit(options = {}) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.zoomToFit(options);\n        }\n        else {\n            this.transform.zoomToFit(options);\n        }\n        return this;\n    }\n    rotate(angle, cx, cy) {\n        if (typeof angle === 'undefined') {\n            return this.transform.getRotation();\n        }\n        this.transform.rotate(angle, cx, cy);\n        return this;\n    }\n    translate(tx, ty) {\n        if (typeof tx === 'undefined') {\n            return this.transform.getTranslation();\n        }\n        this.transform.translate(tx, ty);\n        return this;\n    }\n    translateBy(dx, dy) {\n        const ts = this.translate();\n        const tx = ts.tx + dx;\n        const ty = ts.ty + dy;\n        return this.translate(tx, ty);\n    }\n    /**\n     * **Deprecation Notice:** `getArea` is deprecated and will be moved in next\n     * major release. Use `getGraphArea()` instead.\n     *\n     * @deprecated\n     */\n    getArea() {\n        return this.transform.getGraphArea();\n    }\n    getGraphArea() {\n        return this.transform.getGraphArea();\n    }\n    getContentArea(options = {}) {\n        return this.transform.getContentArea(options);\n    }\n    getContentBBox(options = {}) {\n        return this.transform.getContentBBox(options);\n    }\n    fitToContent(gridWidth, gridHeight, padding, options) {\n        return this.transform.fitToContent(gridWidth, gridHeight, padding, options);\n    }\n    scaleContentToFit(options = {}) {\n        this.transform.scaleContentToFit(options);\n        return this;\n    }\n    /**\n     * Position the center of graph to the center of the viewport.\n     */\n    center(optons) {\n        return this.centerPoint(optons);\n    }\n    centerPoint(x, y, options) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.centerPoint(x, y, options);\n        }\n        else {\n            this.transform.centerPoint(x, y);\n        }\n        return this;\n    }\n    centerContent(options) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.centerContent(options);\n        }\n        else {\n            this.transform.centerContent(options);\n        }\n        return this;\n    }\n    centerCell(cell, options) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.centerCell(cell, options);\n        }\n        else {\n            this.transform.centerCell(cell);\n        }\n        return this;\n    }\n    positionPoint(point, x, y, options = {}) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.positionPoint(point, x, y, options);\n        }\n        else {\n            this.transform.positionPoint(point, x, y);\n        }\n        return this;\n    }\n    positionRect(rect, direction, options) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.positionRect(rect, direction, options);\n        }\n        else {\n            this.transform.positionRect(rect, direction);\n        }\n        return this;\n    }\n    positionCell(cell, direction, options) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.positionCell(cell, direction, options);\n        }\n        else {\n            this.transform.positionCell(cell, direction);\n        }\n        return this;\n    }\n    positionContent(pos, options) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.positionContent(pos, options);\n        }\n        else {\n            this.transform.positionContent(pos, options);\n        }\n        return this;\n    }\n    // #endregion\n    // #region coord\n    getClientMatrix() {\n        return this.coord.getClientMatrix();\n    }\n    /**\n     * Returns coordinates of the graph viewport, relative to the window.\n     */\n    getClientOffset() {\n        return this.coord.getClientOffset();\n    }\n    /**\n     * Returns coordinates of the graph viewport, relative to the document.\n     */\n    getPageOffset() {\n        return this.coord.getPageOffset();\n    }\n    snapToGrid(x, y) {\n        return this.coord.snapToGrid(x, y);\n    }\n    pageToLocal(x, y, width, height) {\n        if (Rectangle.isRectangleLike(x)) {\n            return this.coord.pageToLocalRect(x);\n        }\n        if (typeof x === 'number' &&\n            typeof y === 'number' &&\n            typeof width === 'number' &&\n            typeof height === 'number') {\n            return this.coord.pageToLocalRect(x, y, width, height);\n        }\n        return this.coord.pageToLocalPoint(x, y);\n    }\n    localToPage(x, y, width, height) {\n        if (Rectangle.isRectangleLike(x)) {\n            return this.coord.localToPageRect(x);\n        }\n        if (typeof x === 'number' &&\n            typeof y === 'number' &&\n            typeof width === 'number' &&\n            typeof height === 'number') {\n            return this.coord.localToPageRect(x, y, width, height);\n        }\n        return this.coord.localToPagePoint(x, y);\n    }\n    clientToLocal(x, y, width, height) {\n        if (Rectangle.isRectangleLike(x)) {\n            return this.coord.clientToLocalRect(x);\n        }\n        if (typeof x === 'number' &&\n            typeof y === 'number' &&\n            typeof width === 'number' &&\n            typeof height === 'number') {\n            return this.coord.clientToLocalRect(x, y, width, height);\n        }\n        return this.coord.clientToLocalPoint(x, y);\n    }\n    localToClient(x, y, width, height) {\n        if (Rectangle.isRectangleLike(x)) {\n            return this.coord.localToClientRect(x);\n        }\n        if (typeof x === 'number' &&\n            typeof y === 'number' &&\n            typeof width === 'number' &&\n            typeof height === 'number') {\n            return this.coord.localToClientRect(x, y, width, height);\n        }\n        return this.coord.localToClientPoint(x, y);\n    }\n    localToGraph(x, y, width, height) {\n        if (Rectangle.isRectangleLike(x)) {\n            return this.coord.localToGraphRect(x);\n        }\n        if (typeof x === 'number' &&\n            typeof y === 'number' &&\n            typeof width === 'number' &&\n            typeof height === 'number') {\n            return this.coord.localToGraphRect(x, y, width, height);\n        }\n        return this.coord.localToGraphPoint(x, y);\n    }\n    graphToLocal(x, y, width, height) {\n        if (Rectangle.isRectangleLike(x)) {\n            return this.coord.graphToLocalRect(x);\n        }\n        if (typeof x === 'number' &&\n            typeof y === 'number' &&\n            typeof width === 'number' &&\n            typeof height === 'number') {\n            return this.coord.graphToLocalRect(x, y, width, height);\n        }\n        return this.coord.graphToLocalPoint(x, y);\n    }\n    clientToGraph(x, y, width, height) {\n        if (Rectangle.isRectangleLike(x)) {\n            return this.coord.clientToGraphRect(x);\n        }\n        if (typeof x === 'number' &&\n            typeof y === 'number' &&\n            typeof width === 'number' &&\n            typeof height === 'number') {\n            return this.coord.clientToGraphRect(x, y, width, height);\n        }\n        return this.coord.clientToGraphPoint(x, y);\n    }\n    // #endregion\n    // #region defs\n    defineFilter(options) {\n        return this.defs.filter(options);\n    }\n    defineGradient(options) {\n        return this.defs.gradient(options);\n    }\n    defineMarker(options) {\n        return this.defs.marker(options);\n    }\n    // #endregion\n    // #region grid\n    getGridSize() {\n        return this.grid.getGridSize();\n    }\n    setGridSize(gridSize) {\n        this.grid.setGridSize(gridSize);\n        return this;\n    }\n    showGrid() {\n        this.grid.show();\n        return this;\n    }\n    hideGrid() {\n        this.grid.hide();\n        return this;\n    }\n    clearGrid() {\n        this.grid.clear();\n        return this;\n    }\n    drawGrid(options) {\n        this.grid.draw(options);\n        return this;\n    }\n    // #endregion\n    // #region background\n    updateBackground() {\n        this.background.update();\n        return this;\n    }\n    drawBackground(options, onGraph) {\n        const scroller = this.scroller.widget;\n        if (scroller != null && (this.options.background == null || !onGraph)) {\n            scroller.backgroundManager.draw(options);\n        }\n        else {\n            this.background.draw(options);\n        }\n        return this;\n    }\n    clearBackground(onGraph) {\n        const scroller = this.scroller.widget;\n        if (scroller != null && (this.options.background == null || !onGraph)) {\n            scroller.backgroundManager.clear();\n        }\n        else {\n            this.background.clear();\n        }\n        return this;\n    }\n    // #endregion\n    // #region clipboard\n    isClipboardEnabled() {\n        return !this.clipboard.disabled;\n    }\n    enableClipboard() {\n        this.clipboard.enable();\n        return this;\n    }\n    disableClipboard() {\n        this.clipboard.disable();\n        return this;\n    }\n    toggleClipboard(enabled) {\n        if (enabled != null) {\n            if (enabled !== this.isClipboardEnabled()) {\n                if (enabled) {\n                    this.enableClipboard();\n                }\n                else {\n                    this.disableClipboard();\n                }\n            }\n        }\n        else if (this.isClipboardEnabled()) {\n            this.disableClipboard();\n        }\n        else {\n            this.enableClipboard();\n        }\n        return this;\n    }\n    isClipboardEmpty() {\n        return this.clipboard.isEmpty();\n    }\n    getCellsInClipboard() {\n        return this.clipboard.cells;\n    }\n    cleanClipboard() {\n        this.clipboard.clean();\n        return this;\n    }\n    copy(cells, options = {}) {\n        this.clipboard.copy(cells, options);\n        return this;\n    }\n    cut(cells, options = {}) {\n        this.clipboard.cut(cells, options);\n        return this;\n    }\n    paste(options = {}, graph = this) {\n        return this.clipboard.paste(options, graph);\n    }\n    // #endregion\n    // #region redo/undo\n    isHistoryEnabled() {\n        return !this.history.disabled;\n    }\n    enableHistory() {\n        this.history.enable();\n        return this;\n    }\n    disableHistory() {\n        this.history.disable();\n        return this;\n    }\n    toggleHistory(enabled) {\n        if (enabled != null) {\n            if (enabled !== this.isHistoryEnabled()) {\n                if (enabled) {\n                    this.enableHistory();\n                }\n                else {\n                    this.disableHistory();\n                }\n            }\n        }\n        else if (this.isHistoryEnabled()) {\n            this.disableHistory();\n        }\n        else {\n            this.enableHistory();\n        }\n        return this;\n    }\n    undo(options = {}) {\n        this.history.undo(options);\n        return this;\n    }\n    undoAndCancel(options = {}) {\n        this.history.cancel(options);\n        return this;\n    }\n    redo(options = {}) {\n        this.history.redo(options);\n        return this;\n    }\n    canUndo() {\n        return this.history.canUndo();\n    }\n    canRedo() {\n        return this.history.canRedo();\n    }\n    cleanHistory(options = {}) {\n        this.history.clean(options);\n    }\n    // #endregion\n    // #region keyboard\n    isKeyboardEnabled() {\n        return !this.keyboard.disabled;\n    }\n    enableKeyboard() {\n        this.keyboard.enable();\n        return this;\n    }\n    disableKeyboard() {\n        this.keyboard.disable();\n        return this;\n    }\n    toggleKeyboard(enabled) {\n        if (enabled != null) {\n            if (enabled !== this.isKeyboardEnabled()) {\n                if (enabled) {\n                    this.enableKeyboard();\n                }\n                else {\n                    this.disableKeyboard();\n                }\n            }\n        }\n        else if (this.isKeyboardEnabled()) {\n            this.disableKeyboard();\n        }\n        else {\n            this.enableKeyboard();\n        }\n        return this;\n    }\n    bindKey(keys, callback, action) {\n        this.keyboard.on(keys, callback, action);\n        return this;\n    }\n    unbindKey(keys, action) {\n        this.keyboard.off(keys, action);\n        return this;\n    }\n    // #endregion\n    // #region mousewheel\n    isMouseWheelEnabled() {\n        return !this.mousewheel.disabled;\n    }\n    enableMouseWheel() {\n        this.mousewheel.enable();\n        return this;\n    }\n    disableMouseWheel() {\n        this.mousewheel.disable();\n        return this;\n    }\n    toggleMouseWheel(enabled) {\n        if (enabled == null) {\n            if (this.isMouseWheelEnabled()) {\n                this.disableMouseWheel();\n            }\n            else {\n                this.enableMouseWheel();\n            }\n        }\n        else if (enabled) {\n            this.enableMouseWheel();\n        }\n        else {\n            this.disableMouseWheel();\n        }\n        return this;\n    }\n    // #endregion\n    // #region panning\n    isPannable() {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            return this.scroller.pannable;\n        }\n        return this.panning.pannable;\n    }\n    enablePanning() {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            this.scroller.enablePanning();\n        }\n        else {\n            this.panning.enablePanning();\n        }\n        return this;\n    }\n    disablePanning() {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            this.scroller.disablePanning();\n        }\n        else {\n            this.panning.disablePanning();\n        }\n        return this;\n    }\n    togglePanning(pannable) {\n        if (pannable == null) {\n            if (this.isPannable()) {\n                this.disablePanning();\n            }\n            else {\n                this.enablePanning();\n            }\n        }\n        else if (pannable !== this.isPannable()) {\n            if (pannable) {\n                this.enablePanning();\n            }\n            else {\n                this.disablePanning();\n            }\n        }\n        return this;\n    }\n    // #endregion\n    // #region scroller\n    lockScroller() {\n        var _a;\n        (_a = this.scroller.widget) === null || _a === void 0 ? void 0 : _a.lock();\n    }\n    unlockScroller() {\n        var _a;\n        (_a = this.scroller.widget) === null || _a === void 0 ? void 0 : _a.unlock();\n    }\n    updateScroller() {\n        var _a;\n        (_a = this.scroller.widget) === null || _a === void 0 ? void 0 : _a.update();\n    }\n    getScrollbarPosition() {\n        const scroller = this.scroller.widget;\n        return scroller.scrollbarPosition();\n    }\n    setScrollbarPosition(left, top, options) {\n        const scroller = this.scroller.widget;\n        scroller.scrollbarPosition(left, top, options);\n        return this;\n    }\n    /**\n     * Try to scroll to ensure that the position (x,y) on the graph (in local\n     * coordinates) is at the center of the viewport. If only one of the\n     * coordinates is specified, only scroll in the specified dimension and\n     * keep the other coordinate unchanged.\n     */\n    scrollToPoint(x, y, options) {\n        const scroller = this.scroller.widget;\n        scroller.scrollToPoint(x, y, options);\n        return this;\n    }\n    /**\n     * Try to scroll to ensure that the center of graph content is at the\n     * center of the viewport.\n     */\n    scrollToContent(options) {\n        const scroller = this.scroller.widget;\n        scroller.scrollToContent(options);\n        return this;\n    }\n    /**\n     * Try to scroll to ensure that the center of cell is at the center of\n     * the viewport.\n     */\n    scrollToCell(cell, options) {\n        const scroller = this.scroller.widget;\n        scroller.scrollToCell(cell, options);\n        return this;\n    }\n    transitionToPoint(x, y, options) {\n        const scroller = this.scroller.widget;\n        scroller.transitionToPoint(x, y, options);\n        return this;\n    }\n    transitionToRect(rect, options = {}) {\n        const scroller = this.scroller.widget;\n        scroller.transitionToRect(rect, options);\n        return this;\n    }\n    // #endregion\n    // #region selection\n    isSelectionEnabled() {\n        return !this.selection.disabled;\n    }\n    enableSelection() {\n        this.selection.enable();\n        return this;\n    }\n    disableSelection() {\n        this.selection.disable();\n        return this;\n    }\n    toggleSelection(enabled) {\n        if (enabled != null) {\n            if (enabled !== this.isSelectionEnabled()) {\n                if (enabled) {\n                    this.enableSelection();\n                }\n                else {\n                    this.disableSelection();\n                }\n            }\n        }\n        else if (this.isSelectionEnabled()) {\n            this.disableSelection();\n        }\n        else {\n            this.enableSelection();\n        }\n        return this;\n    }\n    isMultipleSelection() {\n        return this.selection.isMultiple();\n    }\n    enableMultipleSelection() {\n        this.selection.enableMultiple();\n        return this;\n    }\n    disableMultipleSelection() {\n        this.selection.disableMultiple();\n        return this;\n    }\n    toggleMultipleSelection(multiple) {\n        if (multiple != null) {\n            if (multiple !== this.isMultipleSelection()) {\n                if (multiple) {\n                    this.enableMultipleSelection();\n                }\n                else {\n                    this.disableMultipleSelection();\n                }\n            }\n        }\n        else if (this.isMultipleSelection()) {\n            this.disableMultipleSelection();\n        }\n        else {\n            this.enableMultipleSelection();\n        }\n        return this;\n    }\n    isSelectionMovable() {\n        return this.selection.widget.options.movable !== false;\n    }\n    enableSelectionMovable() {\n        this.selection.widget.options.movable = true;\n        return this;\n    }\n    disableSelectionMovable() {\n        this.selection.widget.options.movable = false;\n        return this;\n    }\n    toggleSelectionMovable(movable) {\n        if (movable != null) {\n            if (movable !== this.isSelectionMovable()) {\n                if (movable) {\n                    this.enableSelectionMovable();\n                }\n                else {\n                    this.disableSelectionMovable();\n                }\n            }\n        }\n        else if (this.isSelectionMovable()) {\n            this.disableSelectionMovable();\n        }\n        else {\n            this.enableSelectionMovable();\n        }\n        return this;\n    }\n    isRubberbandEnabled() {\n        return !this.selection.rubberbandDisabled;\n    }\n    enableRubberband() {\n        this.selection.enableRubberband();\n        return this;\n    }\n    disableRubberband() {\n        this.selection.disableRubberband();\n        return this;\n    }\n    toggleRubberband(enabled) {\n        if (enabled != null) {\n            if (enabled !== this.isRubberbandEnabled()) {\n                if (enabled) {\n                    this.enableRubberband();\n                }\n                else {\n                    this.disableRubberband();\n                }\n            }\n        }\n        else if (this.isRubberbandEnabled()) {\n            this.disableRubberband();\n        }\n        else {\n            this.enableRubberband();\n        }\n        return this;\n    }\n    isStrictRubberband() {\n        return this.selection.widget.options.strict === true;\n    }\n    enableStrictRubberband() {\n        this.selection.widget.options.strict = true;\n        return this;\n    }\n    disableStrictRubberband() {\n        this.selection.widget.options.strict = false;\n        return this;\n    }\n    toggleStrictRubberband(strict) {\n        if (strict != null) {\n            if (strict !== this.isStrictRubberband()) {\n                if (strict) {\n                    this.enableStrictRubberband();\n                }\n                else {\n                    this.disableStrictRubberband();\n                }\n            }\n        }\n        else if (this.isStrictRubberband()) {\n            this.disableStrictRubberband();\n        }\n        else {\n            this.enableStrictRubberband();\n        }\n        return this;\n    }\n    setRubberbandModifiers(modifiers) {\n        this.selection.setModifiers(modifiers);\n    }\n    setSelectionFilter(filter) {\n        this.selection.setFilter(filter);\n        return this;\n    }\n    setSelectionDisplayContent(content) {\n        this.selection.setContent(content);\n        return this;\n    }\n    isSelectionEmpty() {\n        return this.selection.isEmpty();\n    }\n    cleanSelection(options) {\n        this.selection.clean(options);\n        return this;\n    }\n    resetSelection(cells, options) {\n        this.selection.reset(cells, options);\n        return this;\n    }\n    getSelectedCells() {\n        return this.selection.cells;\n    }\n    getSelectedCellCount() {\n        return this.selection.length;\n    }\n    isSelected(cell) {\n        return this.selection.isSelected(cell);\n    }\n    select(cells, options) {\n        this.selection.select(cells, options);\n        return this;\n    }\n    unselect(cells, options) {\n        this.selection.unselect(cells, options);\n        return this;\n    }\n    // #endregion\n    // #region snapline\n    isSnaplineEnabled() {\n        return !this.snapline.widget.disabled;\n    }\n    enableSnapline() {\n        this.snapline.widget.enable();\n        return this;\n    }\n    disableSnapline() {\n        this.snapline.widget.disable();\n        return this;\n    }\n    toggleSnapline(enabled) {\n        if (enabled != null) {\n            if (enabled !== this.isSnaplineEnabled()) {\n                if (enabled) {\n                    this.enableSnapline();\n                }\n                else {\n                    this.disableSnapline();\n                }\n            }\n        }\n        else {\n            if (this.isSnaplineEnabled()) {\n                this.disableSnapline();\n            }\n            else {\n                this.enableSnapline();\n            }\n            return this;\n        }\n    }\n    hideSnapline() {\n        this.snapline.widget.hide();\n        return this;\n    }\n    setSnaplineFilter(filter) {\n        this.snapline.widget.setFilter(filter);\n        return this;\n    }\n    isSnaplineOnResizingEnabled() {\n        return this.snapline.widget.options.resizing === true;\n    }\n    enableSnaplineOnResizing() {\n        this.snapline.widget.options.resizing = true;\n        return this;\n    }\n    disableSnaplineOnResizing() {\n        this.snapline.widget.options.resizing = false;\n        return this;\n    }\n    toggleSnaplineOnResizing(enableOnResizing) {\n        if (enableOnResizing != null) {\n            if (enableOnResizing !== this.isSnaplineOnResizingEnabled()) {\n                if (enableOnResizing) {\n                    this.enableSnaplineOnResizing();\n                }\n                else {\n                    this.disableSnaplineOnResizing();\n                }\n            }\n        }\n        else if (this.isSnaplineOnResizingEnabled()) {\n            this.disableSnaplineOnResizing();\n        }\n        else {\n            this.enableSnaplineOnResizing();\n        }\n        return this;\n    }\n    isSharpSnapline() {\n        return this.snapline.widget.options.sharp === true;\n    }\n    enableSharpSnapline() {\n        this.snapline.widget.options.sharp = true;\n        return this;\n    }\n    disableSharpSnapline() {\n        this.snapline.widget.options.sharp = false;\n        return this;\n    }\n    toggleSharpSnapline(sharp) {\n        if (sharp != null) {\n            if (sharp !== this.isSharpSnapline()) {\n                if (sharp) {\n                    this.enableSharpSnapline();\n                }\n                else {\n                    this.disableSharpSnapline();\n                }\n            }\n        }\n        else if (this.isSharpSnapline()) {\n            this.disableSharpSnapline();\n        }\n        else {\n            this.enableSharpSnapline();\n        }\n        return this;\n    }\n    getSnaplineTolerance() {\n        return this.snapline.widget.options.tolerance;\n    }\n    setSnaplineTolerance(tolerance) {\n        this.snapline.widget.options.tolerance = tolerance;\n        return this;\n    }\n    // #endregion\n    // #region tools\n    removeTools() {\n        this.emit('tools:remove');\n        return this;\n    }\n    hideTools() {\n        this.emit('tools:hide');\n        return this;\n    }\n    showTools() {\n        this.emit('tools:show');\n        return this;\n    }\n    // #endregion\n    // #region format\n    toSVG(callback, options = {}) {\n        this.format.toSVG(callback, options);\n    }\n    toDataURL(callback, options) {\n        this.format.toDataURL(callback, options);\n    }\n    toPNG(callback, options = {}) {\n        this.format.toPNG(callback, options);\n    }\n    toJPEG(callback, options = {}) {\n        this.format.toJPEG(callback, options);\n    }\n    // #endregion\n    // #region print\n    printPreview(options) {\n        this.print.show(options);\n    }\n    // #endregion\n    // #region dispose\n    dispose() {\n        this.clearCells();\n        this.off();\n        this.css.dispose();\n        this.hook.dispose();\n        this.defs.dispose();\n        this.grid.dispose();\n        this.coord.dispose();\n        this.transform.dispose();\n        this.knob.dispose();\n        this.highlight.dispose();\n        this.background.dispose();\n        this.clipboard.dispose();\n        this.snapline.dispose();\n        this.selection.dispose();\n        this.history.dispose();\n        this.keyboard.dispose();\n        this.mousewheel.dispose();\n        this.print.dispose();\n        this.format.dispose();\n        this.minimap.dispose();\n        this.panning.dispose();\n        this.scroller.dispose();\n        this.view.dispose();\n        this.renderer.dispose();\n        this.size.dispose();\n    }\n}\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"lockScroller\", null);\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"unlockScroller\", null);\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"updateScroller\", null);\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"getScrollbarPosition\", null);\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"setScrollbarPosition\", null);\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"scrollToPoint\", null);\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"scrollToContent\", null);\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"scrollToCell\", null);\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"transitionToPoint\", null);\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"transitionToRect\", null);\n__decorate([\n    Basecoat.dispose()\n], Graph.prototype, \"dispose\", null);\n(function (Graph) {\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    Graph.View = GraphView;\n    Graph.Hook = HookManager;\n    Graph.Renderer = ViewRenderer;\n    Graph.Keyboard = Shortcut;\n    Graph.MouseWheel = Wheel;\n    Graph.BaseManager = Base;\n    Graph.DefsManager = Defs;\n    Graph.GridManager = Grid;\n    Graph.CoordManager = Coord;\n    Graph.PrintManager = Print;\n    Graph.FormatManager = Format;\n    Graph.MiniMapManager = MiniMap;\n    Graph.HistoryManager = History;\n    Graph.SnaplineManager = Snapline;\n    Graph.ScrollerManager = Scroller;\n    Graph.ClipboardManager = Clipboard;\n    Graph.TransformManager = Transform;\n    Graph.HighlightManager = Highlight;\n    Graph.BackgroundManager = Background;\n    Graph.SelectionManager = Selection;\n})(Graph || (Graph = {}));\n(function (Graph) {\n    Graph.toStringTag = `X6.${Graph.name}`;\n    function isGraph(instance) {\n        if (instance == null) {\n            return false;\n        }\n        if (instance instanceof Graph) {\n            return true;\n        }\n        const tag = instance[Symbol.toStringTag];\n        const graph = instance;\n        if ((tag == null || tag === Graph.toStringTag) &&\n            graph.hook != null &&\n            graph.view != null &&\n            graph.model != null) {\n            return true;\n        }\n        return false;\n    }\n    Graph.isGraph = isGraph;\n})(Graph || (Graph = {}));\n(function (Graph) {\n    function render(options, data) {\n        const graph = options instanceof HTMLElement\n            ? new Graph({ container: options })\n            : new Graph(options);\n        if (data != null) {\n            graph.fromJSON(data);\n        }\n        return graph;\n    }\n    Graph.render = render;\n})(Graph || (Graph = {}));\n(function (Graph) {\n    Graph.registerNode = Node.registry.register;\n    Graph.registerEdge = Edge.registry.register;\n    Graph.registerView = CellView.registry.register;\n    Graph.registerAttr = Registry.Attr.registry.register;\n    Graph.registerGrid = Registry.Grid.registry.register;\n    Graph.registerFilter = Registry.Filter.registry.register;\n    Graph.registerNodeTool = Registry.NodeTool.registry.register;\n    Graph.registerEdgeTool = Registry.EdgeTool.registry.register;\n    Graph.registerBackground = Registry.Background.registry.register;\n    Graph.registerHighlighter = Registry.Highlighter.registry.register;\n    Graph.registerPortLayout = Registry.PortLayout.registry.register;\n    Graph.registerPortLabelLayout = Registry.PortLabelLayout.registry.register;\n    Graph.registerMarker = Registry.Marker.registry.register;\n    Graph.registerRouter = Registry.Router.registry.register;\n    Graph.registerConnector = Registry.Connector.registry.register;\n    Graph.registerAnchor = Registry.NodeAnchor.registry.register;\n    Graph.registerEdgeAnchor = Registry.EdgeAnchor.registry.register;\n    Graph.registerConnectionPoint = Registry.ConnectionPoint.registry.register;\n    Graph.registerConnectionStrategy = Registry.ConnectionStrategy.registry.register;\n    Graph.registerHTMLComponent = HTML.componentRegistry.register;\n})(Graph || (Graph = {}));\n(function (Graph) {\n    Graph.unregisterNode = Node.registry.unregister;\n    Graph.unregisterEdge = Edge.registry.unregister;\n    Graph.unregisterView = CellView.registry.unregister;\n    Graph.unregisterAttr = Registry.Attr.registry.unregister;\n    Graph.unregisterGrid = Registry.Grid.registry.unregister;\n    Graph.unregisterFilter = Registry.Filter.registry.unregister;\n    Graph.unregisterNodeTool = Registry.NodeTool.registry.unregister;\n    Graph.unregisterEdgeTool = Registry.EdgeTool.registry.unregister;\n    Graph.unregisterBackground = Registry.Background.registry.unregister;\n    Graph.unregisterHighlighter = Registry.Highlighter.registry.unregister;\n    Graph.unregisterPortLayout = Registry.PortLayout.registry.unregister;\n    Graph.unregisterPortLabelLayout = Registry.PortLabelLayout.registry.unregister;\n    Graph.unregisterMarker = Registry.Marker.registry.unregister;\n    Graph.unregisterRouter = Registry.Router.registry.unregister;\n    Graph.unregisterConnector = Registry.Connector.registry.unregister;\n    Graph.unregisterAnchor = Registry.NodeAnchor.registry.unregister;\n    Graph.unregisterEdgeAnchor = Registry.EdgeAnchor.registry.unregister;\n    Graph.unregisterConnectionPoint = Registry.ConnectionPoint.registry.unregister;\n    Graph.unregisterConnectionStrategy = Registry.ConnectionStrategy.registry.unregister;\n    Graph.unregisterHTMLComponent = HTML.componentRegistry.unregister;\n})(Graph || (Graph = {}));\n//# sourceMappingURL=graph.js.map"]},"metadata":{},"sourceType":"module"}