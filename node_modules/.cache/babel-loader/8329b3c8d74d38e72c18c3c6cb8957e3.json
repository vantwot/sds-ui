{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar TaskQueue = function () {\n  function TaskQueue() {\n    _classCallCheck(this, TaskQueue);\n\n    _defineProperty(this, \"queue\", void 0);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"cleared\", void 0);\n\n    _defineProperty(this, \"currentlyRunning\", void 0);\n\n    this.queue = [];\n    this.id = 0;\n    this.cleared = false;\n    this.currentlyRunning = false;\n  }\n\n  _createClass(TaskQueue, [{\n    key: \"add\",\n    value: function add(callback) {\n      var id = ++this.id;\n      var queue = this.queue;\n      queue.push({\n        callback: callback,\n        id: id,\n        cancelled: false\n      });\n      return id;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(id) {\n      var running = this.currentlyRunning;\n      var queue = running ? this.queue.concat(running) : this.queue;\n\n      var _iterator = _createForOfIteratorHelper(queue),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var task = _step.value;\n\n          if (task.id === id) {\n            task.cancelled = true;\n            return;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      var timeStamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var queue = this.currentlyRunning = this.queue;\n      this.queue = [];\n\n      var _iterator2 = _createForOfIteratorHelper(queue),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var task = _step2.value;\n\n          if (task.cancelled) {\n            continue;\n          }\n\n          task.callback(timeStamp);\n\n          if (this.cleared) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this.cleared = false;\n      this.currentlyRunning = false;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      if (this.currentlyRunning) {\n        this.cleared = true;\n      }\n\n      this.queue = [];\n    }\n  }]);\n\n  return TaskQueue;\n}();\n\nexport default TaskQueue;","map":{"version":3,"sources":["../../src/utils/task_queue.ts"],"names":["TaskQueue","id","queue","callback","cancelled","running","task","timeStamp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOMA,S;AAMJ,WAAA,SAAA,GAAc;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,kBAAA,EAAA,KAAA,CAAA,CAAA;;AACZ,SAAA,KAAA,GAAA,EAAA;AACA,SAAA,EAAA,GAAA,CAAA;AACA,SAAA,OAAA,GAAA,KAAA;AACA,SAAA,gBAAA,GAAA,KAAA;AACD;;;;WAED,SAAA,GAAA,CAAA,QAAA,EAA0D;AACxD,UAAMC,EAAE,GAAG,EAAE,KAAb,EAAA;AACA,UAAMC,KAAK,GAAG,KAAd,KAAA;AACAA,MAAAA,KAAK,CAALA,IAAAA,CAAW;AAAEC,QAAAA,QAAQ,EAAV,QAAA;AAAYF,QAAAA,EAAE,EAAd,EAAA;AAAgBG,QAAAA,SAAS,EAAE;AAA3B,OAAXF;AACA,aAAA,EAAA;AACD;;;WAED,SAAA,MAAA,CAAA,EAAA,EAA0B;AACxB,UAAMG,OAAO,GAAG,KAAhB,gBAAA;AACA,UAAMH,KAAK,GAAGG,OAAO,GAAG,KAAA,KAAA,CAAA,MAAA,CAAH,OAAG,CAAH,GAAgC,KAArD,KAAA;;AAFwB,UAAA,SAAA,GAAA,0BAAA,CAAA,KAAA,CAAA;AAAA,UAAA,KAAA;;AAAA,UAAA;AAGxB,aAAA,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAA0B;AAAA,cAAfC,IAAe,GAAA,KAAA,CAAA,KAAA;;AACxB,cAAIA,IAAI,CAAJA,EAAAA,KAAJ,EAAA,EAAoB;AAClBA,YAAAA,IAAI,CAAJA,SAAAA,GAAAA,IAAAA;AACA;AACD;AACF;AARuB,OAAA,CAAA,OAAA,GAAA,EAAA;AAAA,QAAA,SAAA,CAAA,CAAA,CAAA,GAAA;AAAA,OAAA,SAAA;AAAA,QAAA,SAAA,CAAA,CAAA;AAAA;AASzB;;;WAED,SAAA,GAAA,GAAkC;AAAA,UAAvBC,SAAuB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAH,CAAG;AAChC,UAAML,KAAK,GAAI,KAAA,gBAAA,GAAwB,KAAvC,KAAA;AAIA,WAAA,KAAA,GAAA,EAAA;;AALgC,UAAA,UAAA,GAAA,0BAAA,CAAA,KAAA,CAAA;AAAA,UAAA,MAAA;;AAAA,UAAA;AAOhC,aAAA,UAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAA0B;AAAA,cAAfI,IAAe,GAAA,MAAA,CAAA,KAAA;;AACxB,cAAIA,IAAI,CAAR,SAAA,EAAoB;AAClB;AACD;;AACDA,UAAAA,IAAI,CAAJA,QAAAA,CAAAA,SAAAA;;AACA,cAAI,KAAJ,OAAA,EAAkB;AAChB;AACD;AACF;AAf+B,OAAA,CAAA,OAAA,GAAA,EAAA;AAAA,QAAA,UAAA,CAAA,CAAA,CAAA,GAAA;AAAA,OAAA,SAAA;AAAA,QAAA,UAAA,CAAA,CAAA;AAAA;;AAiBhC,WAAA,OAAA,GAAA,KAAA;AACA,WAAA,gBAAA,GAAA,KAAA;AACD;;;WAED,SAAA,KAAA,GAAe;AACb,UAAI,KAAJ,gBAAA,EAA2B;AACzB,aAAA,OAAA,GAAA,IAAA;AACD;;AACD,WAAA,KAAA,GAAA,EAAA;AACD;;;;;;AAGH,eAAA,SAAA","sourcesContent":["export type TaskID = number; // can't mark opaque due to https://github.com/flowtype/flow-remove-types/pull/61\ninterface ITask {\n  callback: (timeStamp: number) => void;\n  id: TaskID;\n  cancelled: boolean;\n}\n\nclass TaskQueue {\n  private queue: ITask[];\n  private id: TaskID;\n  private cleared: boolean;\n  private currentlyRunning: ITask[] | false;\n\n  constructor() {\n    this.queue = [];\n    this.id = 0;\n    this.cleared = false;\n    this.currentlyRunning = false;\n  }\n\n  public add(callback: (timeStamp: number) => void): TaskID {\n    const id = ++this.id;\n    const queue = this.queue;\n    queue.push({ callback, id, cancelled: false });\n    return id;\n  }\n\n  public remove(id: TaskID) {\n    const running = this.currentlyRunning;\n    const queue = running ? this.queue.concat(running) : this.queue;\n    for (const task of queue) {\n      if (task.id === id) {\n        task.cancelled = true;\n        return;\n      }\n    }\n  }\n\n  public run(timeStamp: number = 0) {\n    const queue = (this.currentlyRunning = this.queue);\n\n    // Tasks queued by callbacks in the current queue should be executed\n    // on the next run, not the current run.\n    this.queue = [];\n\n    for (const task of queue) {\n      if (task.cancelled) {\n        continue;\n      }\n      task.callback(timeStamp);\n      if (this.cleared) {\n        break;\n      }\n    }\n\n    this.cleared = false;\n    this.currentlyRunning = false;\n  }\n\n  public clear() {\n    if (this.currentlyRunning) {\n      this.cleared = true;\n    }\n    this.queue = [];\n  }\n}\n\nexport default TaskQueue;\n"]},"metadata":{},"sourceType":"module"}