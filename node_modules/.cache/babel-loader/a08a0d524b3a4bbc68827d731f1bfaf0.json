{"ast":null,"code":"import { UAParser } from 'ua-parser-js';\nimport { isEventSupported } from './isEventSupported';\nconst PIXEL_STEP = 10;\nconst LINE_HEIGHT = 40;\nconst PAGE_HEIGHT = 800;\nconst uaParser = new UAParser();\nconst uaObject = uaParser.getResult();\nconst isFirefox = uaObject.browser.name === 'Firefox';\n/**\n * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is\n * complicated, thus this doc is long and (hopefully) detailed enough to answer\n * your questions.\n *\n * If you need to react to the mouse wheel in a predictable way, this code is\n * like your bestest friend. * hugs *\n *\n * As of today, there are 4 DOM event types you can listen to:\n *\n *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)\n *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari\n *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!\n *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003\n *\n * So what to do?  The is the best:\n *\n *   getEventType();\n *\n * In your event callback, use this code to get sane interpretation of the\n * deltas.  This code will return an object with properties:\n *\n *   spinX   -- normalized spin speed (use for zoom) - x plane\n *   spinY   -- \" - y plane\n *   pixelX  -- normalized distance (to pixels) - x plane\n *   pixelY  -- \" - y plane\n *\n * Wheel values are provided by the browser assuming you are using the wheel to\n * scroll a web page by a number of lines or pixels (or pages).  Values can vary\n * significantly on different platforms and browsers, forgetting that you can\n * scroll at different speeds.  Some devices (like trackpads) emit more events\n * at smaller increments with fine granularity, and some emit massive jumps with\n * linear speed or acceleration.\n *\n * This code does its best to normalize the deltas for you:\n *\n *   - spin is trying to normalize how far the wheel was spun (or trackpad\n *     dragged).  This is super useful for zoom support where you want to\n *     throw away the chunky scroll steps on the PC and make those equal to\n *     the slow and smooth tiny steps on the Mac. Key data: This code tries to\n *     resolve a single slow step on a wheel to 1.\n *\n *   - pixel is normalizing the desired scroll delta in pixel units.  You'll\n *     get the crazy differences between browsers, but at least it'll be in\n *     pixels!\n *\n *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This\n *     should translate to positive value zooming IN, negative zooming OUT.\n *     This matches the newer 'wheel' event.\n *\n * Why are there spinX, spinY (or pixels)?\n *\n *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn\n *     with a mouse.  It results in side-scrolling in the browser by default.\n *\n *   - spinY is what you expect -- it's the classic axis of a mouse wheel.\n *\n *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and\n *     probably is by browsers in conjunction with fancy 3D controllers .. but\n *     you know.\n *\n * Implementation info:\n *\n * Examples of 'wheel' event if you scroll slowly (down) by one step with an\n * average mouse:\n *\n *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)\n *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)\n *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)\n *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)\n *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)\n *\n * On the trackpad:\n *\n *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)\n *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)\n *\n * On other/older browsers.. it's more complicated as there can be multiple and\n * also missing delta values.\n *\n * The 'wheel' event is more standard:\n *\n * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents\n *\n * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and\n * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain\n * backward compatibility with older events.  Those other values help us\n * better normalize spin speed.  Example of what the browsers provide:\n *\n *                          | event.wheelDelta | event.detail\n *        ------------------+------------------+--------------\n *          Safari v5/OS X  |       -120       |       0\n *          Safari v5/Win7  |       -120       |       0\n *         Chrome v17/OS X  |       -120       |       0\n *         Chrome v17/Win7  |       -120       |       0\n *                IE9/Win7  |       -120       |   undefined\n *         Firefox v4/OS X  |     undefined    |       1\n *         Firefox v4/Win7  |     undefined    |       3\n *\n */\n\nexport function normalizeWheel(e) {\n  let spinX = 0;\n  let spinY = 0;\n  let pixelX = 0;\n  let pixelY = 0; // legacy\n\n  if ('detail' in e) {\n    spinY = e.detail;\n  }\n\n  if ('wheelDelta' in e) {\n    spinY = -e.wheelDelta / 120;\n  }\n\n  if ('wheelDeltaY' in e) {\n    spinY = -e.wheelDeltaY / 120;\n  }\n\n  if ('wheelDeltaX' in e) {\n    spinX = -e.wheelDeltaX / 120;\n  } // side scrolling on FF with DOMMouseScroll\n\n\n  if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {\n    spinX = spinY;\n    spinY = 0;\n  }\n\n  pixelX = spinX * PIXEL_STEP;\n  pixelY = spinY * PIXEL_STEP;\n\n  if ('deltaY' in e) {\n    pixelY = e.deltaY;\n  }\n\n  if ('deltaX' in e) {\n    pixelX = e.deltaX;\n  }\n\n  if ((pixelX || pixelY) && e.deltaMode) {\n    if (e.deltaMode === 1) {\n      // delta in LINE units\n      pixelX *= LINE_HEIGHT;\n      pixelY *= LINE_HEIGHT;\n    } else {\n      // delta in PAGE units\n      pixelX *= PAGE_HEIGHT;\n      pixelY *= PAGE_HEIGHT;\n    }\n  } // fall-back if spin cannot be determined\n\n\n  if (pixelX && !spinX) {\n    spinX = pixelX < 1 ? -1 : 1;\n  }\n\n  if (pixelY && !spinY) {\n    spinY = pixelY < 1 ? -1 : 1;\n  }\n\n  return {\n    spinX,\n    spinY,\n    pixelX,\n    pixelY\n  };\n}\n/**\n * The best combination if you prefer spinX + spinY normalization.  It favors\n * the older DOMMouseScroll for Firefox, as FF does not include wheelDelta with\n * 'wheel' event, making spin speed determination impossible.\n */\n\nexport function getEventType() {\n  if (isFirefox) {\n    return 'DOMMouseScroll';\n  }\n\n  if (isEventSupported('wheel')) {\n    return 'wheel';\n  }\n\n  return 'mousewheel';\n}","map":{"version":3,"sources":["../../../src/util/dom/normalizeWheel.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,QAAyB,cAAzB;AACA,SAAS,gBAAT,QAAiC,oBAAjC;AAEA,MAAM,UAAU,GAAG,EAAnB;AACA,MAAM,WAAW,GAAG,EAApB;AACA,MAAM,WAAW,GAAG,GAApB;AAEA,MAAM,QAAQ,GAAG,IAAI,QAAJ,EAAjB;AACA,MAAM,QAAQ,GAAG,QAAQ,CAAC,SAAT,EAAjB;AACA,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAT,CAAiB,IAAjB,KAA0B,SAA5C;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmGG;;AAEH,OAAM,SAAU,cAAV,CAAyB,CAAzB,EAA+B;AACnC,MAAI,KAAK,GAAG,CAAZ;AACA,MAAI,KAAK,GAAG,CAAZ;AACA,MAAI,MAAM,GAAG,CAAb;AACA,MAAI,MAAM,GAAG,CAAb,CAJmC,CAMnC;;AACA,MAAI,YAAY,CAAhB,EAAmB;AACjB,IAAA,KAAK,GAAG,CAAC,CAAC,MAAV;AACD;;AACD,MAAI,gBAAgB,CAApB,EAAuB;AACrB,IAAA,KAAK,GAAG,CAAC,CAAC,CAAC,UAAH,GAAgB,GAAxB;AACD;;AACD,MAAI,iBAAiB,CAArB,EAAwB;AACtB,IAAA,KAAK,GAAG,CAAC,CAAC,CAAC,WAAH,GAAiB,GAAzB;AACD;;AACD,MAAI,iBAAiB,CAArB,EAAwB;AACtB,IAAA,KAAK,GAAG,CAAC,CAAC,CAAC,WAAH,GAAiB,GAAzB;AACD,GAlBkC,CAoBnC;;;AACA,MAAI,UAAU,CAAV,IAAe,CAAC,CAAC,IAAF,KAAW,CAAC,CAAC,eAAhC,EAAiD;AAC/C,IAAA,KAAK,GAAG,KAAR;AACA,IAAA,KAAK,GAAG,CAAR;AACD;;AAED,EAAA,MAAM,GAAG,KAAK,GAAG,UAAjB;AACA,EAAA,MAAM,GAAG,KAAK,GAAG,UAAjB;;AAEA,MAAI,YAAY,CAAhB,EAAmB;AACjB,IAAA,MAAM,GAAG,CAAC,CAAC,MAAX;AACD;;AACD,MAAI,YAAY,CAAhB,EAAmB;AACjB,IAAA,MAAM,GAAG,CAAC,CAAC,MAAX;AACD;;AAED,MAAI,CAAC,MAAM,IAAI,MAAX,KAAsB,CAAC,CAAC,SAA5B,EAAuC;AACrC,QAAI,CAAC,CAAC,SAAF,KAAgB,CAApB,EAAuB;AACrB;AACA,MAAA,MAAM,IAAI,WAAV;AACA,MAAA,MAAM,IAAI,WAAV;AACD,KAJD,MAIO;AACL;AACA,MAAA,MAAM,IAAI,WAAV;AACA,MAAA,MAAM,IAAI,WAAV;AACD;AACF,GA9CkC,CAgDnC;;;AACA,MAAI,MAAM,IAAI,CAAC,KAAf,EAAsB;AACpB,IAAA,KAAK,GAAG,MAAM,GAAG,CAAT,GAAa,CAAC,CAAd,GAAkB,CAA1B;AACD;;AACD,MAAI,MAAM,IAAI,CAAC,KAAf,EAAsB;AACpB,IAAA,KAAK,GAAG,MAAM,GAAG,CAAT,GAAa,CAAC,CAAd,GAAkB,CAA1B;AACD;;AAED,SAAO;AACL,IAAA,KADK;AAEL,IAAA,KAFK;AAGL,IAAA,MAHK;AAIL,IAAA;AAJK,GAAP;AAMD;AAED;;;;AAIG;;AACH,OAAM,SAAU,YAAV,GAAsB;AAC1B,MAAI,SAAJ,EAAe;AACb,WAAO,gBAAP;AACD;;AAED,MAAI,gBAAgB,CAAC,OAAD,CAApB,EAA+B;AAC7B,WAAO,OAAP;AACD;;AAED,SAAO,YAAP;AACD","sourceRoot":"","sourcesContent":["import { UAParser } from 'ua-parser-js';\nimport { isEventSupported } from './isEventSupported';\nconst PIXEL_STEP = 10;\nconst LINE_HEIGHT = 40;\nconst PAGE_HEIGHT = 800;\nconst uaParser = new UAParser();\nconst uaObject = uaParser.getResult();\nconst isFirefox = uaObject.browser.name === 'Firefox';\n/**\n * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is\n * complicated, thus this doc is long and (hopefully) detailed enough to answer\n * your questions.\n *\n * If you need to react to the mouse wheel in a predictable way, this code is\n * like your bestest friend. * hugs *\n *\n * As of today, there are 4 DOM event types you can listen to:\n *\n *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)\n *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari\n *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!\n *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003\n *\n * So what to do?  The is the best:\n *\n *   getEventType();\n *\n * In your event callback, use this code to get sane interpretation of the\n * deltas.  This code will return an object with properties:\n *\n *   spinX   -- normalized spin speed (use for zoom) - x plane\n *   spinY   -- \" - y plane\n *   pixelX  -- normalized distance (to pixels) - x plane\n *   pixelY  -- \" - y plane\n *\n * Wheel values are provided by the browser assuming you are using the wheel to\n * scroll a web page by a number of lines or pixels (or pages).  Values can vary\n * significantly on different platforms and browsers, forgetting that you can\n * scroll at different speeds.  Some devices (like trackpads) emit more events\n * at smaller increments with fine granularity, and some emit massive jumps with\n * linear speed or acceleration.\n *\n * This code does its best to normalize the deltas for you:\n *\n *   - spin is trying to normalize how far the wheel was spun (or trackpad\n *     dragged).  This is super useful for zoom support where you want to\n *     throw away the chunky scroll steps on the PC and make those equal to\n *     the slow and smooth tiny steps on the Mac. Key data: This code tries to\n *     resolve a single slow step on a wheel to 1.\n *\n *   - pixel is normalizing the desired scroll delta in pixel units.  You'll\n *     get the crazy differences between browsers, but at least it'll be in\n *     pixels!\n *\n *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This\n *     should translate to positive value zooming IN, negative zooming OUT.\n *     This matches the newer 'wheel' event.\n *\n * Why are there spinX, spinY (or pixels)?\n *\n *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn\n *     with a mouse.  It results in side-scrolling in the browser by default.\n *\n *   - spinY is what you expect -- it's the classic axis of a mouse wheel.\n *\n *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and\n *     probably is by browsers in conjunction with fancy 3D controllers .. but\n *     you know.\n *\n * Implementation info:\n *\n * Examples of 'wheel' event if you scroll slowly (down) by one step with an\n * average mouse:\n *\n *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)\n *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)\n *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)\n *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)\n *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)\n *\n * On the trackpad:\n *\n *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)\n *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)\n *\n * On other/older browsers.. it's more complicated as there can be multiple and\n * also missing delta values.\n *\n * The 'wheel' event is more standard:\n *\n * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents\n *\n * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and\n * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain\n * backward compatibility with older events.  Those other values help us\n * better normalize spin speed.  Example of what the browsers provide:\n *\n *                          | event.wheelDelta | event.detail\n *        ------------------+------------------+--------------\n *          Safari v5/OS X  |       -120       |       0\n *          Safari v5/Win7  |       -120       |       0\n *         Chrome v17/OS X  |       -120       |       0\n *         Chrome v17/Win7  |       -120       |       0\n *                IE9/Win7  |       -120       |   undefined\n *         Firefox v4/OS X  |     undefined    |       1\n *         Firefox v4/Win7  |     undefined    |       3\n *\n */\nexport function normalizeWheel(e) {\n    let spinX = 0;\n    let spinY = 0;\n    let pixelX = 0;\n    let pixelY = 0;\n    // legacy\n    if ('detail' in e) {\n        spinY = e.detail;\n    }\n    if ('wheelDelta' in e) {\n        spinY = -e.wheelDelta / 120;\n    }\n    if ('wheelDeltaY' in e) {\n        spinY = -e.wheelDeltaY / 120;\n    }\n    if ('wheelDeltaX' in e) {\n        spinX = -e.wheelDeltaX / 120;\n    }\n    // side scrolling on FF with DOMMouseScroll\n    if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {\n        spinX = spinY;\n        spinY = 0;\n    }\n    pixelX = spinX * PIXEL_STEP;\n    pixelY = spinY * PIXEL_STEP;\n    if ('deltaY' in e) {\n        pixelY = e.deltaY;\n    }\n    if ('deltaX' in e) {\n        pixelX = e.deltaX;\n    }\n    if ((pixelX || pixelY) && e.deltaMode) {\n        if (e.deltaMode === 1) {\n            // delta in LINE units\n            pixelX *= LINE_HEIGHT;\n            pixelY *= LINE_HEIGHT;\n        }\n        else {\n            // delta in PAGE units\n            pixelX *= PAGE_HEIGHT;\n            pixelY *= PAGE_HEIGHT;\n        }\n    }\n    // fall-back if spin cannot be determined\n    if (pixelX && !spinX) {\n        spinX = pixelX < 1 ? -1 : 1;\n    }\n    if (pixelY && !spinY) {\n        spinY = pixelY < 1 ? -1 : 1;\n    }\n    return {\n        spinX,\n        spinY,\n        pixelX,\n        pixelY,\n    };\n}\n/**\n * The best combination if you prefer spinX + spinY normalization.  It favors\n * the older DOMMouseScroll for Firefox, as FF does not include wheelDelta with\n * 'wheel' event, making spin speed determination impossible.\n */\nexport function getEventType() {\n    if (isFirefox) {\n        return 'DOMMouseScroll';\n    }\n    if (isEventSupported('wheel')) {\n        return 'wheel';\n    }\n    return 'mousewheel';\n}\n//# sourceMappingURL=normalizeWheel.js.map"]},"metadata":{},"sourceType":"module"}