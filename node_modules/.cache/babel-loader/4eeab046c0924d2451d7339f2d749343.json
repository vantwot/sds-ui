{"ast":null,"code":"import { Util } from '../../global';\nimport { NumberExt } from '../../util';\nimport { Angle, Point } from '../../geometry';\nimport { Widget } from '../common';\nimport { notify } from './util';\nexport class Transform extends Widget {\n  get node() {\n    return this.cell;\n  }\n\n  get containerClassName() {\n    return this.prefixClassName('widget-transform');\n  }\n\n  get resizeClassName() {\n    return `${this.containerClassName}-resize`;\n  }\n\n  get rotateClassName() {\n    return `${this.containerClassName}-rotate`;\n  }\n\n  init(options) {\n    this.options = Object.assign(Object.assign({}, Private.defaultOptions), options);\n    this.render();\n    this.startListening();\n  }\n\n  startListening() {\n    this.delegateEvents({\n      [`mousedown .${this.resizeClassName}`]: 'startResizing',\n      [`touchstart .${this.resizeClassName}`]: 'startResizing',\n      [`mousedown .${this.rotateClassName}`]: 'startRotating',\n      [`touchstart .${this.rotateClassName}`]: 'startRotating'\n    });\n    this.model.on('*', this.update, this);\n    this.graph.on('scale', this.update, this);\n    this.graph.on('translate', this.update, this);\n    this.node.on('removed', this.remove, this);\n    this.model.on('reseted', this.remove, this);\n    this.view.on('cell:knob:mousedown', this.onKnobMouseDown, this);\n    this.view.on('cell:knob:mouseup', this.onKnobMouseUp, this);\n    super.startListening();\n  }\n\n  stopListening() {\n    this.undelegateEvents();\n    this.model.off('*', this.update, this);\n    this.graph.off('scale', this.update, this);\n    this.graph.off('translate', this.update, this);\n    this.node.off('removed', this.remove, this);\n    this.model.off('reseted', this.remove, this);\n    this.view.off('cell:knob:mousedown', this.onKnobMouseDown, this);\n    this.view.off('cell:knob:mouseup', this.onKnobMouseUp, this);\n    super.stopListening();\n  }\n\n  renderHandles() {\n    this.container = document.createElement('div');\n    this.$container = this.$(this.container);\n    const $knob = this.$('<div/>').prop('draggable', false);\n    const $rotate = $knob.clone().addClass(this.rotateClassName);\n    const $resizes = Private.POSITIONS.map(pos => {\n      return $knob.clone().addClass(this.resizeClassName).attr('data-position', pos);\n    });\n    this.empty();\n    this.$container.append($resizes, $rotate);\n  }\n\n  render() {\n    this.renderHandles();\n    this.view.addClass(Private.NODE_CLS);\n    this.$container.addClass(this.containerClassName).toggleClass('no-orth-resize', this.options.preserveAspectRatio || !this.options.orthogonalResizing).toggleClass('no-resize', !this.options.resizable).toggleClass('no-rotate', !this.options.rotatable);\n\n    if (this.options.className) {\n      this.$container.addClass(this.options.className);\n    }\n\n    this.graph.container.appendChild(this.container);\n    return this.update();\n  }\n\n  update() {\n    const ctm = this.graph.matrix();\n    const bbox = this.node.getBBox();\n    bbox.x *= ctm.a;\n    bbox.x += ctm.e;\n    bbox.y *= ctm.d;\n    bbox.y += ctm.f;\n    bbox.width *= ctm.a;\n    bbox.height *= ctm.d;\n    const angle = Angle.normalize(this.node.getAngle());\n    const transform = angle !== 0 ? `rotate(${angle}deg)` : '';\n    this.$container.css({\n      transform,\n      width: bbox.width,\n      height: bbox.height,\n      left: bbox.x,\n      top: bbox.y\n    });\n    this.updateResizerDirections();\n    return this;\n  }\n\n  remove() {\n    this.view.removeClass(Private.NODE_CLS);\n    return super.remove();\n  }\n\n  onKnobMouseDown() {\n    this.startHandle();\n  }\n\n  onKnobMouseUp() {\n    this.stopHandle();\n  }\n\n  updateResizerDirections() {\n    // Update the directions on the resizer divs while the node being rotated.\n    // The directions are represented by cardinal points (N,S,E,W). For example\n    // the div originally pointed to north needs to be changed to point to south\n    // if the node was rotated by 180 degrees.\n    const angle = Angle.normalize(this.node.getAngle());\n    const shift = Math.floor(angle * (Private.DIRECTIONS.length / 360));\n\n    if (shift !== this.prevShift) {\n      // Create the current directions array based on the calculated shift.\n      const directions = Private.DIRECTIONS.slice(shift).concat(Private.DIRECTIONS.slice(0, shift));\n\n      const className = dir => `${this.containerClassName}-cursor-${dir}`;\n\n      this.$container.find(`.${this.resizeClassName}`).removeClass(Private.DIRECTIONS.map(dir => className(dir)).join(' ')).each((index, elem) => {\n        this.$(elem).addClass(className(directions[index]));\n      });\n      this.prevShift = shift;\n    }\n  }\n\n  getTrueDirection(dir) {\n    const angle = Angle.normalize(this.node.getAngle());\n    let index = Private.POSITIONS.indexOf(dir);\n    index += Math.floor(angle * (Private.POSITIONS.length / 360));\n    index %= Private.POSITIONS.length;\n    return Private.POSITIONS[index];\n  }\n\n  toValidResizeDirection(dir) {\n    return {\n      top: 'top-left',\n      bottom: 'bottom-right',\n      left: 'bottom-left',\n      right: 'top-right'\n    }[dir] || dir;\n  }\n\n  startResizing(evt) {\n    evt.stopPropagation();\n    this.model.startBatch('resize', {\n      cid: this.cid\n    });\n    const dir = this.$(evt.target).attr('data-position');\n    const view = this.graph.findViewByCell(this.node);\n    this.prepareResizing(evt, dir);\n    this.startAction(evt);\n    notify('node:resize:mousedown', evt, view);\n  }\n\n  prepareResizing(evt, relativeDirection) {\n    const trueDirection = this.getTrueDirection(relativeDirection);\n    let rx = 0;\n    let ry = 0;\n    relativeDirection.split('-').forEach(direction => {\n      rx = {\n        left: -1,\n        right: 1\n      }[direction] || rx;\n      ry = {\n        top: -1,\n        bottom: 1\n      }[direction] || ry;\n    });\n    const direction = this.toValidResizeDirection(relativeDirection);\n    const selector = {\n      'top-right': 'bottomLeft',\n      'top-left': 'bottomRight',\n      'bottom-left': 'topRight',\n      'bottom-right': 'topLeft'\n    }[direction];\n    const angle = Angle.normalize(this.node.getAngle());\n    this.setEventData(evt, {\n      selector,\n      direction,\n      trueDirection,\n      relativeDirection,\n      angle,\n      resizeX: rx,\n      resizeY: ry,\n      action: 'resizing'\n    });\n  }\n\n  startRotating(evt) {\n    evt.stopPropagation();\n    this.model.startBatch('rotate', {\n      cid: this.cid\n    });\n    const view = this.graph.findViewByCell(this.node);\n    const center = this.node.getBBox().getCenter();\n    const e = this.normalizeEvent(evt);\n    const client = this.graph.snapToGrid(e.clientX, e.clientY);\n    this.setEventData(evt, {\n      center,\n      action: 'rotating',\n      angle: Angle.normalize(this.node.getAngle()),\n      start: Point.create(client).theta(center)\n    });\n    this.startAction(evt);\n    notify('node:rotate:mousedown', evt, view);\n  }\n\n  onMouseMove(evt) {\n    const view = this.graph.findViewByCell(this.node);\n    let data = this.getEventData(evt);\n\n    if (data.action) {\n      const e = this.normalizeEvent(evt);\n      let clientX = e.clientX;\n      let clientY = e.clientY;\n      const scroller = this.graph.scroller.widget;\n      const restrict = this.options.restrictedResizing;\n\n      if (restrict === true || typeof restrict === 'number') {\n        const factor = restrict === true ? 0 : restrict;\n        const fix = scroller ? Math.max(factor, 8) : factor;\n        const rect = this.graph.container.getBoundingClientRect();\n        clientX = NumberExt.clamp(clientX, rect.left + fix, rect.right - fix);\n        clientY = NumberExt.clamp(clientY, rect.top + fix, rect.bottom - fix);\n      } else if (this.options.autoScrollOnResizing && scroller) {\n        scroller.autoScroll(clientX, clientY);\n      }\n\n      const pos = this.graph.snapToGrid(clientX, clientY);\n      const gridSize = this.graph.getGridSize();\n      const node = this.node;\n      const options = this.options;\n\n      if (data.action === 'resizing') {\n        data = data;\n\n        if (!data.resized) {\n          if (view) {\n            view.addClass('node-resizing');\n            notify('node:resize', evt, view);\n          }\n\n          data.resized = true;\n        }\n\n        const currentBBox = node.getBBox();\n        const requestedSize = Point.create(pos).rotate(data.angle, currentBBox.getCenter()).diff(currentBBox[data.selector]);\n        let width = data.resizeX ? requestedSize.x * data.resizeX : currentBBox.width;\n        let height = data.resizeY ? requestedSize.y * data.resizeY : currentBBox.height;\n        const rawWidth = width;\n        const rawHeight = height;\n        width = Util.snapToGrid(width, gridSize);\n        height = Util.snapToGrid(height, gridSize);\n        width = Math.max(width, options.minWidth || gridSize);\n        height = Math.max(height, options.minHeight || gridSize);\n        width = Math.min(width, options.maxWidth || Infinity);\n        height = Math.min(height, options.maxHeight || Infinity);\n\n        if (options.preserveAspectRatio) {\n          const candidateWidth = currentBBox.width * height / currentBBox.height;\n          const candidateHeight = currentBBox.height * width / currentBBox.width;\n\n          if (width < candidateWidth) {\n            height = candidateHeight;\n          } else {\n            width = candidateWidth;\n          }\n        }\n\n        const relativeDirection = data.relativeDirection;\n\n        if (options.allowReverse && (rawWidth <= -width || rawHeight <= -height)) {\n          let reverted;\n\n          if (relativeDirection === 'left') {\n            if (rawWidth <= -width) {\n              reverted = 'right';\n            }\n          } else if (relativeDirection === 'right') {\n            if (rawWidth <= -width) {\n              reverted = 'left';\n            }\n          } else if (relativeDirection === 'top') {\n            if (rawHeight <= -height) {\n              reverted = 'bottom';\n            }\n          } else if (relativeDirection === 'bottom') {\n            if (rawHeight <= -height) {\n              reverted = 'top';\n            }\n          } else if (relativeDirection === 'top-left') {\n            if (rawWidth <= -width && rawHeight <= -height) {\n              reverted = 'bottom-right';\n            } else if (rawWidth <= -width) {\n              reverted = 'top-right';\n            } else if (rawHeight <= -height) {\n              reverted = 'bottom-left';\n            }\n          } else if (relativeDirection === 'top-right') {\n            if (rawWidth <= -width && rawHeight <= -height) {\n              reverted = 'bottom-left';\n            } else if (rawWidth <= -width) {\n              reverted = 'top-left';\n            } else if (rawHeight <= -height) {\n              reverted = 'bottom-right';\n            }\n          } else if (relativeDirection === 'bottom-left') {\n            if (rawWidth <= -width && rawHeight <= -height) {\n              reverted = 'top-right';\n            } else if (rawWidth <= -width) {\n              reverted = 'bottom-right';\n            } else if (rawHeight <= -height) {\n              reverted = 'top-left';\n            }\n          } else if (relativeDirection === 'bottom-right') {\n            if (rawWidth <= -width && rawHeight <= -height) {\n              reverted = 'top-left';\n            } else if (rawWidth <= -width) {\n              reverted = 'bottom-left';\n            } else if (rawHeight <= -height) {\n              reverted = 'top-right';\n            }\n          }\n\n          const revertedDir = reverted;\n          this.stopHandle();\n          const $handle = this.$container.find(`.${this.resizeClassName}[data-position=\"${revertedDir}\"]`);\n          this.startHandle($handle[0]);\n          this.prepareResizing(evt, revertedDir);\n          this.onMouseMove(evt);\n        }\n\n        if (currentBBox.width !== width || currentBBox.height !== height) {\n          const resizeOptions = {\n            ui: true,\n            direction: data.direction,\n            relativeDirection: data.relativeDirection,\n            trueDirection: data.trueDirection,\n            minWidth: options.minWidth,\n            minHeight: options.minHeight,\n            maxWidth: options.maxWidth,\n            maxHeight: options.maxHeight,\n            preserveAspectRatio: options.preserveAspectRatio === true\n          };\n          node.resize(width, height, resizeOptions);\n          notify('node:resizing', evt, view);\n        }\n\n        notify('node:resize:mousemove', evt, view);\n      } else if (data.action === 'rotating') {\n        data = data;\n\n        if (!data.rotated) {\n          if (view) {\n            view.addClass('node-rotating');\n            notify('node:rotate', evt, view);\n          }\n\n          data.rotated = true;\n        }\n\n        const currentAngle = node.getAngle();\n        const theta = data.start - Point.create(pos).theta(data.center);\n        let target = data.angle + theta;\n\n        if (options.rotateGrid) {\n          target = Util.snapToGrid(target, options.rotateGrid);\n        }\n\n        if (currentAngle !== target) {\n          node.rotate(target, {\n            absolute: true\n          });\n          notify('node:rotating', evt, view);\n        }\n\n        notify('node:rotate:mousemove', evt, view);\n      }\n    }\n  }\n\n  onMouseUp(evt) {\n    const view = this.graph.findViewByCell(this.node);\n    const data = this.getEventData(evt);\n\n    if (data.action) {\n      this.stopAction(evt);\n      this.model.stopBatch(data.action === 'resizing' ? 'resize' : 'rotate', {\n        cid: this.cid\n      });\n\n      if (data.action === 'resizing') {\n        notify('node:resize:mouseup', evt, view);\n      } else if (data.action === 'rotating') {\n        notify('node:rotate:mouseup', evt, view);\n      }\n    }\n  }\n\n  startHandle(handle) {\n    this.handle = handle || null;\n    this.$container.addClass(`${this.containerClassName}-active`);\n\n    if (handle) {\n      this.$(handle).addClass(`${this.containerClassName}-active-handle`);\n      const pos = handle.getAttribute('data-position');\n\n      if (pos) {\n        const dir = Private.DIRECTIONS[Private.POSITIONS.indexOf(pos)];\n        this.$container.addClass(`${this.containerClassName}-cursor-${dir}`);\n      }\n    }\n  }\n\n  stopHandle() {\n    this.$container.removeClass(`${this.containerClassName}-active`);\n\n    if (this.handle) {\n      this.$(this.handle).removeClass(`${this.containerClassName}-active-handle`);\n      const pos = this.handle.getAttribute('data-position');\n\n      if (pos) {\n        const dir = Private.DIRECTIONS[Private.POSITIONS.indexOf(pos)];\n        this.$container.removeClass(`${this.containerClassName}-cursor-${dir}`);\n      }\n\n      this.handle = null;\n    }\n  }\n\n  startAction(evt) {\n    this.startHandle(evt.target);\n    this.graph.view.undelegateEvents();\n    this.delegateDocumentEvents(Private.documentEvents, evt.data);\n  }\n\n  stopAction(evt) {\n    this.stopHandle();\n    this.undelegateDocumentEvents();\n    this.graph.view.delegateEvents();\n    const view = this.graph.findViewByCell(this.node);\n    const data = this.getEventData(evt);\n\n    if (view) {\n      view.removeClass(`node-${data.action}`);\n\n      if (data.action === 'resizing' && data.resized) {\n        notify('node:resized', evt, view);\n      } else if (data.action === 'rotating' && data.rotated) {\n        notify('node:rotated', evt, view);\n      }\n    }\n  }\n\n}\nvar Private;\n\n(function (Private) {\n  Private.NODE_CLS = 'has-widget-transform';\n  Private.DIRECTIONS = ['nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w'];\n  Private.POSITIONS = ['top-left', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left'];\n  Private.documentEvents = {\n    mousemove: 'onMouseMove',\n    touchmove: 'onMouseMove',\n    mouseup: 'onMouseUp',\n    touchend: 'onMouseUp'\n  };\n  Private.defaultOptions = {\n    minWidth: 0,\n    minHeight: 0,\n    maxWidth: Infinity,\n    maxHeight: Infinity,\n    rotateGrid: 15,\n    rotatable: true,\n    preserveAspectRatio: false,\n    orthogonalResizing: true,\n    restrictedResizing: false,\n    autoScrollOnResizing: true,\n    allowReverse: true\n  };\n})(Private || (Private = {}));","map":{"version":3,"sources":["../../../src/addon/transform/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Util } from '../../global';\nimport { NumberExt } from '../../util';\nimport { Angle, Point } from '../../geometry';\nimport { Widget } from '../common';\nimport { notify } from './util';\nexport class Transform extends Widget {\n    get node() {\n        return this.cell;\n    }\n    get containerClassName() {\n        return this.prefixClassName('widget-transform');\n    }\n    get resizeClassName() {\n        return `${this.containerClassName}-resize`;\n    }\n    get rotateClassName() {\n        return `${this.containerClassName}-rotate`;\n    }\n    init(options) {\n        this.options = Object.assign(Object.assign({}, Private.defaultOptions), options);\n        this.render();\n        this.startListening();\n    }\n    startListening() {\n        this.delegateEvents({\n            [`mousedown .${this.resizeClassName}`]: 'startResizing',\n            [`touchstart .${this.resizeClassName}`]: 'startResizing',\n            [`mousedown .${this.rotateClassName}`]: 'startRotating',\n            [`touchstart .${this.rotateClassName}`]: 'startRotating',\n        });\n        this.model.on('*', this.update, this);\n        this.graph.on('scale', this.update, this);\n        this.graph.on('translate', this.update, this);\n        this.node.on('removed', this.remove, this);\n        this.model.on('reseted', this.remove, this);\n        this.view.on('cell:knob:mousedown', this.onKnobMouseDown, this);\n        this.view.on('cell:knob:mouseup', this.onKnobMouseUp, this);\n        super.startListening();\n    }\n    stopListening() {\n        this.undelegateEvents();\n        this.model.off('*', this.update, this);\n        this.graph.off('scale', this.update, this);\n        this.graph.off('translate', this.update, this);\n        this.node.off('removed', this.remove, this);\n        this.model.off('reseted', this.remove, this);\n        this.view.off('cell:knob:mousedown', this.onKnobMouseDown, this);\n        this.view.off('cell:knob:mouseup', this.onKnobMouseUp, this);\n        super.stopListening();\n    }\n    renderHandles() {\n        this.container = document.createElement('div');\n        this.$container = this.$(this.container);\n        const $knob = this.$('<div/>').prop('draggable', false);\n        const $rotate = $knob.clone().addClass(this.rotateClassName);\n        const $resizes = Private.POSITIONS.map((pos) => {\n            return $knob\n                .clone()\n                .addClass(this.resizeClassName)\n                .attr('data-position', pos);\n        });\n        this.empty();\n        this.$container.append($resizes, $rotate);\n    }\n    render() {\n        this.renderHandles();\n        this.view.addClass(Private.NODE_CLS);\n        this.$container\n            .addClass(this.containerClassName)\n            .toggleClass('no-orth-resize', this.options.preserveAspectRatio || !this.options.orthogonalResizing)\n            .toggleClass('no-resize', !this.options.resizable)\n            .toggleClass('no-rotate', !this.options.rotatable);\n        if (this.options.className) {\n            this.$container.addClass(this.options.className);\n        }\n        this.graph.container.appendChild(this.container);\n        return this.update();\n    }\n    update() {\n        const ctm = this.graph.matrix();\n        const bbox = this.node.getBBox();\n        bbox.x *= ctm.a;\n        bbox.x += ctm.e;\n        bbox.y *= ctm.d;\n        bbox.y += ctm.f;\n        bbox.width *= ctm.a;\n        bbox.height *= ctm.d;\n        const angle = Angle.normalize(this.node.getAngle());\n        const transform = angle !== 0 ? `rotate(${angle}deg)` : '';\n        this.$container.css({\n            transform,\n            width: bbox.width,\n            height: bbox.height,\n            left: bbox.x,\n            top: bbox.y,\n        });\n        this.updateResizerDirections();\n        return this;\n    }\n    remove() {\n        this.view.removeClass(Private.NODE_CLS);\n        return super.remove();\n    }\n    onKnobMouseDown() {\n        this.startHandle();\n    }\n    onKnobMouseUp() {\n        this.stopHandle();\n    }\n    updateResizerDirections() {\n        // Update the directions on the resizer divs while the node being rotated.\n        // The directions are represented by cardinal points (N,S,E,W). For example\n        // the div originally pointed to north needs to be changed to point to south\n        // if the node was rotated by 180 degrees.\n        const angle = Angle.normalize(this.node.getAngle());\n        const shift = Math.floor(angle * (Private.DIRECTIONS.length / 360));\n        if (shift !== this.prevShift) {\n            // Create the current directions array based on the calculated shift.\n            const directions = Private.DIRECTIONS.slice(shift).concat(Private.DIRECTIONS.slice(0, shift));\n            const className = (dir) => `${this.containerClassName}-cursor-${dir}`;\n            this.$container\n                .find(`.${this.resizeClassName}`)\n                .removeClass(Private.DIRECTIONS.map((dir) => className(dir)).join(' '))\n                .each((index, elem) => {\n                this.$(elem).addClass(className(directions[index]));\n            });\n            this.prevShift = shift;\n        }\n    }\n    getTrueDirection(dir) {\n        const angle = Angle.normalize(this.node.getAngle());\n        let index = Private.POSITIONS.indexOf(dir);\n        index += Math.floor(angle * (Private.POSITIONS.length / 360));\n        index %= Private.POSITIONS.length;\n        return Private.POSITIONS[index];\n    }\n    toValidResizeDirection(dir) {\n        return ({\n            top: 'top-left',\n            bottom: 'bottom-right',\n            left: 'bottom-left',\n            right: 'top-right',\n        }[dir] || dir);\n    }\n    startResizing(evt) {\n        evt.stopPropagation();\n        this.model.startBatch('resize', { cid: this.cid });\n        const dir = this.$(evt.target).attr('data-position');\n        const view = this.graph.findViewByCell(this.node);\n        this.prepareResizing(evt, dir);\n        this.startAction(evt);\n        notify('node:resize:mousedown', evt, view);\n    }\n    prepareResizing(evt, relativeDirection) {\n        const trueDirection = this.getTrueDirection(relativeDirection);\n        let rx = 0;\n        let ry = 0;\n        relativeDirection.split('-').forEach((direction) => {\n            rx = { left: -1, right: 1 }[direction] || rx;\n            ry = { top: -1, bottom: 1 }[direction] || ry;\n        });\n        const direction = this.toValidResizeDirection(relativeDirection);\n        const selector = {\n            'top-right': 'bottomLeft',\n            'top-left': 'bottomRight',\n            'bottom-left': 'topRight',\n            'bottom-right': 'topLeft',\n        }[direction];\n        const angle = Angle.normalize(this.node.getAngle());\n        this.setEventData(evt, {\n            selector,\n            direction,\n            trueDirection,\n            relativeDirection,\n            angle,\n            resizeX: rx,\n            resizeY: ry,\n            action: 'resizing',\n        });\n    }\n    startRotating(evt) {\n        evt.stopPropagation();\n        this.model.startBatch('rotate', { cid: this.cid });\n        const view = this.graph.findViewByCell(this.node);\n        const center = this.node.getBBox().getCenter();\n        const e = this.normalizeEvent(evt);\n        const client = this.graph.snapToGrid(e.clientX, e.clientY);\n        this.setEventData(evt, {\n            center,\n            action: 'rotating',\n            angle: Angle.normalize(this.node.getAngle()),\n            start: Point.create(client).theta(center),\n        });\n        this.startAction(evt);\n        notify('node:rotate:mousedown', evt, view);\n    }\n    onMouseMove(evt) {\n        const view = this.graph.findViewByCell(this.node);\n        let data = this.getEventData(evt);\n        if (data.action) {\n            const e = this.normalizeEvent(evt);\n            let clientX = e.clientX;\n            let clientY = e.clientY;\n            const scroller = this.graph.scroller.widget;\n            const restrict = this.options.restrictedResizing;\n            if (restrict === true || typeof restrict === 'number') {\n                const factor = restrict === true ? 0 : restrict;\n                const fix = scroller ? Math.max(factor, 8) : factor;\n                const rect = this.graph.container.getBoundingClientRect();\n                clientX = NumberExt.clamp(clientX, rect.left + fix, rect.right - fix);\n                clientY = NumberExt.clamp(clientY, rect.top + fix, rect.bottom - fix);\n            }\n            else if (this.options.autoScrollOnResizing && scroller) {\n                scroller.autoScroll(clientX, clientY);\n            }\n            const pos = this.graph.snapToGrid(clientX, clientY);\n            const gridSize = this.graph.getGridSize();\n            const node = this.node;\n            const options = this.options;\n            if (data.action === 'resizing') {\n                data = data;\n                if (!data.resized) {\n                    if (view) {\n                        view.addClass('node-resizing');\n                        notify('node:resize', evt, view);\n                    }\n                    data.resized = true;\n                }\n                const currentBBox = node.getBBox();\n                const requestedSize = Point.create(pos)\n                    .rotate(data.angle, currentBBox.getCenter())\n                    .diff(currentBBox[data.selector]);\n                let width = data.resizeX\n                    ? requestedSize.x * data.resizeX\n                    : currentBBox.width;\n                let height = data.resizeY\n                    ? requestedSize.y * data.resizeY\n                    : currentBBox.height;\n                const rawWidth = width;\n                const rawHeight = height;\n                width = Util.snapToGrid(width, gridSize);\n                height = Util.snapToGrid(height, gridSize);\n                width = Math.max(width, options.minWidth || gridSize);\n                height = Math.max(height, options.minHeight || gridSize);\n                width = Math.min(width, options.maxWidth || Infinity);\n                height = Math.min(height, options.maxHeight || Infinity);\n                if (options.preserveAspectRatio) {\n                    const candidateWidth = (currentBBox.width * height) / currentBBox.height;\n                    const candidateHeight = (currentBBox.height * width) / currentBBox.width;\n                    if (width < candidateWidth) {\n                        height = candidateHeight;\n                    }\n                    else {\n                        width = candidateWidth;\n                    }\n                }\n                const relativeDirection = data.relativeDirection;\n                if (options.allowReverse &&\n                    (rawWidth <= -width || rawHeight <= -height)) {\n                    let reverted;\n                    if (relativeDirection === 'left') {\n                        if (rawWidth <= -width) {\n                            reverted = 'right';\n                        }\n                    }\n                    else if (relativeDirection === 'right') {\n                        if (rawWidth <= -width) {\n                            reverted = 'left';\n                        }\n                    }\n                    else if (relativeDirection === 'top') {\n                        if (rawHeight <= -height) {\n                            reverted = 'bottom';\n                        }\n                    }\n                    else if (relativeDirection === 'bottom') {\n                        if (rawHeight <= -height) {\n                            reverted = 'top';\n                        }\n                    }\n                    else if (relativeDirection === 'top-left') {\n                        if (rawWidth <= -width && rawHeight <= -height) {\n                            reverted = 'bottom-right';\n                        }\n                        else if (rawWidth <= -width) {\n                            reverted = 'top-right';\n                        }\n                        else if (rawHeight <= -height) {\n                            reverted = 'bottom-left';\n                        }\n                    }\n                    else if (relativeDirection === 'top-right') {\n                        if (rawWidth <= -width && rawHeight <= -height) {\n                            reverted = 'bottom-left';\n                        }\n                        else if (rawWidth <= -width) {\n                            reverted = 'top-left';\n                        }\n                        else if (rawHeight <= -height) {\n                            reverted = 'bottom-right';\n                        }\n                    }\n                    else if (relativeDirection === 'bottom-left') {\n                        if (rawWidth <= -width && rawHeight <= -height) {\n                            reverted = 'top-right';\n                        }\n                        else if (rawWidth <= -width) {\n                            reverted = 'bottom-right';\n                        }\n                        else if (rawHeight <= -height) {\n                            reverted = 'top-left';\n                        }\n                    }\n                    else if (relativeDirection === 'bottom-right') {\n                        if (rawWidth <= -width && rawHeight <= -height) {\n                            reverted = 'top-left';\n                        }\n                        else if (rawWidth <= -width) {\n                            reverted = 'bottom-left';\n                        }\n                        else if (rawHeight <= -height) {\n                            reverted = 'top-right';\n                        }\n                    }\n                    const revertedDir = reverted;\n                    this.stopHandle();\n                    const $handle = this.$container.find(`.${this.resizeClassName}[data-position=\"${revertedDir}\"]`);\n                    this.startHandle($handle[0]);\n                    this.prepareResizing(evt, revertedDir);\n                    this.onMouseMove(evt);\n                }\n                if (currentBBox.width !== width || currentBBox.height !== height) {\n                    const resizeOptions = {\n                        ui: true,\n                        direction: data.direction,\n                        relativeDirection: data.relativeDirection,\n                        trueDirection: data.trueDirection,\n                        minWidth: options.minWidth,\n                        minHeight: options.minHeight,\n                        maxWidth: options.maxWidth,\n                        maxHeight: options.maxHeight,\n                        preserveAspectRatio: options.preserveAspectRatio === true,\n                    };\n                    node.resize(width, height, resizeOptions);\n                    notify('node:resizing', evt, view);\n                }\n                notify('node:resize:mousemove', evt, view);\n            }\n            else if (data.action === 'rotating') {\n                data = data;\n                if (!data.rotated) {\n                    if (view) {\n                        view.addClass('node-rotating');\n                        notify('node:rotate', evt, view);\n                    }\n                    data.rotated = true;\n                }\n                const currentAngle = node.getAngle();\n                const theta = data.start - Point.create(pos).theta(data.center);\n                let target = data.angle + theta;\n                if (options.rotateGrid) {\n                    target = Util.snapToGrid(target, options.rotateGrid);\n                }\n                if (currentAngle !== target) {\n                    node.rotate(target, { absolute: true });\n                    notify('node:rotating', evt, view);\n                }\n                notify('node:rotate:mousemove', evt, view);\n            }\n        }\n    }\n    onMouseUp(evt) {\n        const view = this.graph.findViewByCell(this.node);\n        const data = this.getEventData(evt);\n        if (data.action) {\n            this.stopAction(evt);\n            this.model.stopBatch(data.action === 'resizing' ? 'resize' : 'rotate', {\n                cid: this.cid,\n            });\n            if (data.action === 'resizing') {\n                notify('node:resize:mouseup', evt, view);\n            }\n            else if (data.action === 'rotating') {\n                notify('node:rotate:mouseup', evt, view);\n            }\n        }\n    }\n    startHandle(handle) {\n        this.handle = handle || null;\n        this.$container.addClass(`${this.containerClassName}-active`);\n        if (handle) {\n            this.$(handle).addClass(`${this.containerClassName}-active-handle`);\n            const pos = handle.getAttribute('data-position');\n            if (pos) {\n                const dir = Private.DIRECTIONS[Private.POSITIONS.indexOf(pos)];\n                this.$container.addClass(`${this.containerClassName}-cursor-${dir}`);\n            }\n        }\n    }\n    stopHandle() {\n        this.$container.removeClass(`${this.containerClassName}-active`);\n        if (this.handle) {\n            this.$(this.handle).removeClass(`${this.containerClassName}-active-handle`);\n            const pos = this.handle.getAttribute('data-position');\n            if (pos) {\n                const dir = Private.DIRECTIONS[Private.POSITIONS.indexOf(pos)];\n                this.$container.removeClass(`${this.containerClassName}-cursor-${dir}`);\n            }\n            this.handle = null;\n        }\n    }\n    startAction(evt) {\n        this.startHandle(evt.target);\n        this.graph.view.undelegateEvents();\n        this.delegateDocumentEvents(Private.documentEvents, evt.data);\n    }\n    stopAction(evt) {\n        this.stopHandle();\n        this.undelegateDocumentEvents();\n        this.graph.view.delegateEvents();\n        const view = this.graph.findViewByCell(this.node);\n        const data = this.getEventData(evt);\n        if (view) {\n            view.removeClass(`node-${data.action}`);\n            if (data.action === 'resizing' && data.resized) {\n                notify('node:resized', evt, view);\n            }\n            else if (data.action === 'rotating' && data.rotated) {\n                notify('node:rotated', evt, view);\n            }\n        }\n    }\n}\nvar Private;\n(function (Private) {\n    Private.NODE_CLS = 'has-widget-transform';\n    Private.DIRECTIONS = ['nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w'];\n    Private.POSITIONS = [\n        'top-left',\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n    ];\n    Private.documentEvents = {\n        mousemove: 'onMouseMove',\n        touchmove: 'onMouseMove',\n        mouseup: 'onMouseUp',\n        touchend: 'onMouseUp',\n    };\n    Private.defaultOptions = {\n        minWidth: 0,\n        minHeight: 0,\n        maxWidth: Infinity,\n        maxHeight: Infinity,\n        rotateGrid: 15,\n        rotatable: true,\n        preserveAspectRatio: false,\n        orthogonalResizing: true,\n        restrictedResizing: false,\n        autoScrollOnResizing: true,\n        allowReverse: true,\n    };\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}