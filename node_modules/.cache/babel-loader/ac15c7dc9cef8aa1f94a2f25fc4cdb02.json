{"ast":null,"code":"import React from 'react';\nimport { Disposable } from '../../common/disposable';\nimport { uuidv4 } from '../../common/uuid';\n/** 保存组件上的配置 */\n\nexport class ExtensionRegistry {\n  constructor() {\n    this.extensions = [];\n    this.containerClassNames = new Set();\n\n    this.addCoreModule = extension => {\n      // core module 添加在前面\n      this.extensions.unshift(extension);\n      return Disposable.create(() => {\n        this.removeExtension(extension);\n      });\n    };\n\n    this.addExtension = extension => {\n      this.extensions.push(extension);\n      return Disposable.create(() => {\n        this.removeExtension(extension);\n      });\n    };\n\n    this.removeExtension = extension => {\n      const idx = this.extensions.indexOf(extension);\n\n      if (idx > -1) {\n        this.extensions.splice(idx, 1);\n      }\n    };\n\n    this.getInstaceId = () => {\n      return this.instanceId;\n    };\n\n    this.addContainerClassNames = clz => {\n      return this.containerClassNames.add(clz);\n    };\n\n    this.getContainerClassNames = () => {\n      return Array.from(this.containerClassNames);\n    };\n\n    this.getAllExtensions = () => {\n      return this.extensions;\n    };\n\n    this.getAllExtensionConfigs = () => {\n      return this.extensions.map(i => i.config);\n    };\n\n    this.instanceId = uuidv4();\n  }\n\n  has(name) {\n    return this.extensions.some(ext => ext.config.CONFIG_TYPE === name);\n  }\n\n}\n/** 获取Xflow extension，用于收集React组件的配置 */\n\nexport const createExtensionRegistry = () => {\n  /* eslint-disable-next-line react-hooks/rules-of-hooks */\n  const registry = React.useMemo(() => {\n    return new ExtensionRegistry();\n  }, []);\n  return registry;\n};","map":{"version":3,"sources":["../../../src/xflow-main/components/extension-registry.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,UAAT,QAA2B,yBAA3B;AACA,SAAS,MAAT,QAAuB,mBAAvB;AAGA;;AACA,OAAM,MAAO,iBAAP,CAAwB;AAQ5B,EAAA,WAAA,GAAA;AAJS,SAAA,UAAA,GAAiC,EAAjC;AAEA,SAAA,mBAAA,GAAmC,IAAI,GAAJ,EAAnC;;AAMT,SAAA,aAAA,GAAiB,SAAD,IAAgC;AAC9C;AACA,WAAK,UAAL,CAAgB,OAAhB,CAAwB,SAAxB;AACA,aAAO,UAAU,CAAC,MAAX,CAAkB,MAAK;AAC5B,aAAK,eAAL,CAAqB,SAArB;AACD,OAFM,CAAP;AAGD,KAND;;AAQA,SAAA,YAAA,GAAgB,SAAD,IAAgC;AAC7C,WAAK,UAAL,CAAgB,IAAhB,CAAqB,SAArB;AACA,aAAO,UAAU,CAAC,MAAX,CAAkB,MAAK;AAC5B,aAAK,eAAL,CAAqB,SAArB;AACD,OAFM,CAAP;AAGD,KALD;;AAOA,SAAA,eAAA,GAAmB,SAAD,IAAgC;AAChD,YAAM,GAAG,GAAG,KAAK,UAAL,CAAgB,OAAhB,CAAwB,SAAxB,CAAZ;;AACA,UAAI,GAAG,GAAG,CAAC,CAAX,EAAc;AACZ,aAAK,UAAL,CAAgB,MAAhB,CAAuB,GAAvB,EAA4B,CAA5B;AACD;AACF,KALD;;AAOA,SAAA,YAAA,GAAe,MAAK;AAClB,aAAO,KAAK,UAAZ;AACD,KAFD;;AAIA,SAAA,sBAAA,GAA0B,GAAD,IAAgB;AACvC,aAAO,KAAK,mBAAL,CAAyB,GAAzB,CAA6B,GAA7B,CAAP;AACD,KAFD;;AAIA,SAAA,sBAAA,GAAyB,MAAK;AAC5B,aAAO,KAAK,CAAC,IAAN,CAAW,KAAK,mBAAhB,CAAP;AACD,KAFD;;AAQA,SAAA,gBAAA,GAAmB,MAAK;AACtB,aAAO,KAAK,UAAZ;AACD,KAFD;;AAIA,SAAA,sBAAA,GAAyB,MAAK;AAC5B,aAAO,KAAK,UAAL,CAAgB,GAAhB,CAAoB,CAAC,IAAI,CAAC,CAAC,MAA3B,CAAP;AACD,KAFD;;AA7CE,SAAK,UAAL,GAAkB,MAAM,EAAxB;AACD;;AAoCD,EAAA,GAAG,CAAC,IAAD,EAAa;AACd,WAAO,KAAK,UAAL,CAAgB,IAAhB,CAAqB,GAAG,IAAI,GAAG,CAAC,MAAJ,CAAW,WAAX,KAA2B,IAAvD,CAAP;AACD;;AAhD2B;AA2D9B;;AACA,OAAO,MAAM,uBAAuB,GAAG,MAAK;AAC1C;AACA,QAAM,QAAQ,GAAG,KAAK,CAAC,OAAN,CAAc,MAAK;AAClC,WAAO,IAAI,iBAAJ,EAAP;AACD,GAFgB,EAEd,EAFc,CAAjB;AAGA,SAAO,QAAP;AACD,CANM","sourceRoot":"","sourcesContent":["import React from 'react';\nimport { Disposable } from '../../common/disposable';\nimport { uuidv4 } from '../../common/uuid';\n/** 保存组件上的配置 */\nexport class ExtensionRegistry {\n    constructor() {\n        this.extensions = [];\n        this.containerClassNames = new Set();\n        this.addCoreModule = (extension) => {\n            // core module 添加在前面\n            this.extensions.unshift(extension);\n            return Disposable.create(() => {\n                this.removeExtension(extension);\n            });\n        };\n        this.addExtension = (extension) => {\n            this.extensions.push(extension);\n            return Disposable.create(() => {\n                this.removeExtension(extension);\n            });\n        };\n        this.removeExtension = (extension) => {\n            const idx = this.extensions.indexOf(extension);\n            if (idx > -1) {\n                this.extensions.splice(idx, 1);\n            }\n        };\n        this.getInstaceId = () => {\n            return this.instanceId;\n        };\n        this.addContainerClassNames = (clz) => {\n            return this.containerClassNames.add(clz);\n        };\n        this.getContainerClassNames = () => {\n            return Array.from(this.containerClassNames);\n        };\n        this.getAllExtensions = () => {\n            return this.extensions;\n        };\n        this.getAllExtensionConfigs = () => {\n            return this.extensions.map(i => i.config);\n        };\n        this.instanceId = uuidv4();\n    }\n    has(name) {\n        return this.extensions.some(ext => ext.config.CONFIG_TYPE === name);\n    }\n}\n/** 获取Xflow extension，用于收集React组件的配置 */\nexport const createExtensionRegistry = () => {\n    /* eslint-disable-next-line react-hooks/rules-of-hooks */\n    const registry = React.useMemo(() => {\n        return new ExtensionRegistry();\n    }, []);\n    return registry;\n};\n//# sourceMappingURL=extension-registry.js.map"]},"metadata":{},"sourceType":"module"}