{"ast":null,"code":"import _slicedToArray from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useMemo } from 'react';\nimport { Form } from 'antd';\nimport { makeUpdaterByDependencies, makeFormItemControlledProps, isEmptyParamValue } from './util';\nexport var FormItemWrapper = function FormItemWrapper(props) {\n  var schema = props.schema,\n      children = props.children;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      updateReasonField = _useState2[0],\n      setUpdateReasonField = _useState2[1];\n\n  var dependencies = schema.dependencies,\n      value = schema.value,\n      defaultValue = schema.defaultValue,\n      hidden = schema.hidden,\n      disabled = schema.disabled;\n  var updater = useMemo(function () {\n    return (dependencies === null || dependencies === void 0 ? void 0 : dependencies.length) ? makeUpdaterByDependencies(dependencies, setUpdateReasonField) : undefined;\n  }, [dependencies]);\n\n  if (typeof children !== 'function') {\n    throw new Error('[Schema Form]: chilren of FormItemWrapper should be a render prop.');\n  }\n\n  var initValue = isEmptyParamValue(value) ? defaultValue : value;\n\n  if (updater) {\n    return React.createElement(Form.Item, {\n      noStyle: true,\n      shouldUpdate: updater\n    }, function (form) {\n      var _makeFormItemControll = makeFormItemControlledProps(form, schema, updateReasonField),\n          isHidden = _makeFormItemControll.hidden,\n          isDisabled = _makeFormItemControll.disabled;\n\n      return children({\n        hidden: isHidden,\n        disabled: isDisabled,\n        initialValue: initValue\n      });\n    });\n  }\n\n  return children({\n    hidden: hidden,\n    disabled: disabled,\n    initialValue: initValue\n  });\n};","map":{"version":3,"sources":["../../../../../src/canvas-json-schema-form/schema-form/common/form-item-wrapper/index.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAP,IAAgB,QAAhB,EAA0B,OAA1B,QAAyC,OAAzC;AACA,SAAS,IAAT,QAAqB,MAArB;AAEA,SAAS,yBAAT,EAAoC,2BAApC,EAAiE,iBAAjE,QAA0F,QAA1F;AAaA,OAAO,IAAM,eAAe,GAAoB,SAAnC,eAAmC,CAAA,KAAK,EAAG;AACtD,MAAQ,MAAR,GAA6B,KAA7B,CAAQ,MAAR;AAAA,MAAgB,QAAhB,GAA6B,KAA7B,CAAgB,QAAhB;;AACA,kBAAkD,QAAQ,EAA1D;AAAA;AAAA,MAAO,iBAAP;AAAA,MAA0B,oBAA1B;;AACA,MAAQ,YAAR,GAAgE,MAAhE,CAAQ,YAAR;AAAA,MAAsB,KAAtB,GAAgE,MAAhE,CAAsB,KAAtB;AAAA,MAA6B,YAA7B,GAAgE,MAAhE,CAA6B,YAA7B;AAAA,MAA2C,MAA3C,GAAgE,MAAhE,CAA2C,MAA3C;AAAA,MAAmD,QAAnD,GAAgE,MAAhE,CAAmD,QAAnD;AAEA,MAAM,OAAO,GAAG,OAAO,CAAC,YAAK;AAC3B,WAAO,CAAA,YAAY,KAAA,IAAZ,IAAA,YAAY,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAA,YAAY,CAAE,MAAd,IACH,yBAAyB,CAAC,YAAD,EAAe,oBAAf,CADtB,GAEH,SAFJ;AAGD,GAJsB,EAIpB,CAAC,YAAD,CAJoB,CAAvB;;AAMA,MAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAClC,UAAM,IAAI,KAAJ,CAAU,oEAAV,CAAN;AACD;;AAED,MAAM,SAAS,GAAG,iBAAiB,CAAC,KAAD,CAAjB,GAA2B,YAA3B,GAA0C,KAA5D;;AAEA,MAAI,OAAJ,EAAa;AACX,WACE,KAAA,CAAA,aAAA,CAAC,IAAI,CAAC,IAAN,EAAU;AAAC,MAAA,OAAO,EAAA,IAAR;AAAS,MAAA,YAAY,EAAE;AAAvB,KAAV,EACG,UAAA,IAAI,EAAG;AACN,kCAAmD,2BAA2B,CAC5E,IAD4E,EAE5E,MAF4E,EAG5E,iBAH4E,CAA9E;AAAA,UAAgB,QAAhB,yBAAQ,MAAR;AAAA,UAAoC,UAApC,yBAA0B,QAA1B;;AAKA,aAAO,QAAQ,CAAC;AACd,QAAA,MAAM,EAAE,QADM;AAEd,QAAA,QAAQ,EAAE,UAFI;AAGd,QAAA,YAAY,EAAE;AAHA,OAAD,CAAf;AAKD,KAZH,CADF;AAgBD;;AAED,SAAO,QAAQ,CAAC;AACd,IAAA,MAAM,EAAN,MADc;AAEd,IAAA,QAAQ,EAAR,QAFc;AAGd,IAAA,YAAY,EAAE;AAHA,GAAD,CAAf;AAKD,CAzCM","sourceRoot":"","sourcesContent":["import React, { useState, useMemo } from 'react';\nimport { Form } from 'antd';\nimport { makeUpdaterByDependencies, makeFormItemControlledProps, isEmptyParamValue } from './util';\nexport const FormItemWrapper = props => {\n    const { schema, children } = props;\n    const [updateReasonField, setUpdateReasonField] = useState();\n    const { dependencies, value, defaultValue, hidden, disabled } = schema;\n    const updater = useMemo(() => {\n        return (dependencies === null || dependencies === void 0 ? void 0 : dependencies.length)\n            ? makeUpdaterByDependencies(dependencies, setUpdateReasonField)\n            : undefined;\n    }, [dependencies]);\n    if (typeof children !== 'function') {\n        throw new Error('[Schema Form]: chilren of FormItemWrapper should be a render prop.');\n    }\n    const initValue = isEmptyParamValue(value) ? defaultValue : value;\n    if (updater) {\n        return (React.createElement(Form.Item, { noStyle: true, shouldUpdate: updater }, form => {\n            const { hidden: isHidden, disabled: isDisabled } = makeFormItemControlledProps(form, schema, updateReasonField);\n            return children({\n                hidden: isHidden,\n                disabled: isDisabled,\n                initialValue: initValue,\n            });\n        }));\n    }\n    return children({\n        hidden,\n        disabled,\n        initialValue: initValue,\n    });\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}