{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _clamp from \"lodash/clamp\";\nimport { getShapeIndex } from './sdf-2d';\nexport var LEFT_SHIFT1 = 2;\nexport var LEFT_SHIFT2 = 4;\nexport var LEFT_SHIFT6 = 64;\nexport var LEFT_SHIFT7 = 128;\nexport var LEFT_SHIFT8 = 256;\nexport var LEFT_SHIFT9 = 512;\nexport var LEFT_SHIFT13 = 8192;\nexport var LEFT_SHIFT14 = 16384;\nexport var LEFT_SHIFT15 = 32768;\nexport var LEFT_SHIFT16 = 32768 * 2;\nexport var LEFT_SHIFT17 = 131072.0;\nexport var LEFT_SHIFT18 = 262144.0;\nexport var LEFT_SHIFT19 = 524288.0;\nexport var LEFT_SHIFT20 = 1048576.0;\nexport var LEFT_SHIFT21 = 2097152.0;\nexport var LEFT_SHIFT22 = 4194304.0;\nexport var LEFT_SHIFT23 = 8388608.0;\nexport var LEFT_SHIFT24 = 16777216.0;\nexport var LEFT_SHIFT25 = 16777216.0 * 2;\nexport function packUint8ToFloat(a, b) {\n  a = _clamp(Math.floor(a), 0, 255);\n  b = _clamp(Math.floor(b), 0, 255);\n  return 256 * a + b;\n}\nexport function packCircleVertex(props) {\n  var color = props.color,\n      radius = props.radius,\n      tileX = props.tileX,\n      tileY = props.tileY,\n      shape = props.shape,\n      opacity = props.opacity,\n      stroke = props.stroke,\n      strokeWidth = props.strokeWidth,\n      strokeOpacity = props.strokeOpacity;\n  var packedBuffer = [];\n  var packedBuffer2 = [];\n  var packedBuffer3 = [];\n  var packedColor = [packUint8ToFloat(color[0], color[1]), packUint8ToFloat(color[2], color[3])];\n  var packedStrokeColor = [packUint8ToFloat(stroke[0], stroke[1]), packUint8ToFloat(stroke[2], stroke[3])];\n  [[-1, -1], [1, -1], [1, 1], [-1, 1]].forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        extrudeX = _ref2[0],\n        extrudeY = _ref2[1];\n\n    packedBuffer.push([].concat(packedColor, [(extrudeX + 1) * LEFT_SHIFT23 + (extrudeY + 1) * LEFT_SHIFT21 + getShapeIndex(shape) * LEFT_SHIFT17 + radius, (tileX + 512) * LEFT_SHIFT19 + (tileY + 512) * LEFT_SHIFT6]));\n    packedBuffer2.push([].concat(packedStrokeColor, [strokeWidth, strokeOpacity]));\n    packedBuffer3.push([opacity, 0, 0, 0]);\n  });\n  return {\n    packedBuffer: packedBuffer,\n    packedBuffer2: packedBuffer2,\n    packedBuffer3: packedBuffer3\n  };\n}\nexport function packOpacity(opacity, placed) {\n  if (opacity === 0 && !placed) {\n    return 0;\n  } else if (opacity === 1 && placed) {\n    return 4294967295;\n  }\n\n  var targetBit = placed ? 1 : 0;\n  var opacityBits = Math.floor(opacity * 127);\n  return opacityBits * LEFT_SHIFT25 + targetBit * LEFT_SHIFT24 + opacityBits * LEFT_SHIFT17 + targetBit * LEFT_SHIFT16 + opacityBits * LEFT_SHIFT9 + targetBit * LEFT_SHIFT8 + opacityBits * LEFT_SHIFT1 + targetBit;\n}","map":{"version":3,"sources":["../../src/utils/vertex-compression.ts"],"names":["LEFT_SHIFT1","LEFT_SHIFT2","LEFT_SHIFT6","LEFT_SHIFT7","LEFT_SHIFT8","LEFT_SHIFT9","LEFT_SHIFT13","LEFT_SHIFT14","LEFT_SHIFT15","LEFT_SHIFT16","LEFT_SHIFT17","LEFT_SHIFT18","LEFT_SHIFT19","LEFT_SHIFT20","LEFT_SHIFT21","LEFT_SHIFT22","LEFT_SHIFT23","LEFT_SHIFT24","LEFT_SHIFT25","a","Math","b","color","radius","tileX","tileY","shape","opacity","stroke","strokeWidth","strokeOpacity","props","packedBuffer","packedBuffer2","packedBuffer3","packedColor","packUint8ToFloat","packedStrokeColor","extrudeX","extrudeY","getShapeIndex","targetBit","placed","opacityBits"],"mappings":"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","sourcesContent":["/**\n * WebGL 中的顶点数据压缩\n * 使用 float-pack 技术，在 shader 中解压\n * @see https://zhuanlan.zhihu.com/p/67484498\n */\n\nimport { clamp } from 'lodash';\nimport { getShapeIndex } from './sdf-2d';\n\nexport interface ICircleVertex {\n  tileX: number;\n  tileY: number;\n  shape: string;\n  color: number[];\n  radius: number;\n  opacity: number;\n  stroke: number[];\n  strokeWidth: number;\n  strokeOpacity: number;\n}\n\nexport const LEFT_SHIFT1 = 2;\nexport const LEFT_SHIFT2 = 4;\nexport const LEFT_SHIFT6 = 64;\nexport const LEFT_SHIFT7 = 128;\nexport const LEFT_SHIFT8 = 256;\nexport const LEFT_SHIFT9 = 512;\nexport const LEFT_SHIFT13 = 8192;\nexport const LEFT_SHIFT14 = 16384;\nexport const LEFT_SHIFT15 = 32768;\nexport const LEFT_SHIFT16 = 32768 * 2;\nexport const LEFT_SHIFT17 = 131072.0;\nexport const LEFT_SHIFT18 = 262144.0;\nexport const LEFT_SHIFT19 = 524288.0;\nexport const LEFT_SHIFT20 = 1048576.0;\nexport const LEFT_SHIFT21 = 2097152.0;\nexport const LEFT_SHIFT22 = 4194304.0;\nexport const LEFT_SHIFT23 = 8388608.0;\nexport const LEFT_SHIFT24 = 16777216.0;\nexport const LEFT_SHIFT25 = 16777216.0 * 2;\n\n/**\n * encode 2 8-bit unsigned int into a 16-bit float\n * @param {number} a 8-bit int\n * @param {number} b 8-bit int\n * @return {number} float\n */\nexport function packUint8ToFloat(a: number, b: number): number {\n  a = clamp(Math.floor(a), 0, 255);\n  b = clamp(Math.floor(b), 0, 255);\n  return 256 * a + b;\n}\n\n/**\n * 为 SDF circle 压缩顶点数据\n */\nexport function packCircleVertex(\n  props: ICircleVertex,\n): {\n  packedBuffer: number[][];\n  packedBuffer2: number[][];\n  packedBuffer3: number[][];\n} {\n  const {\n    color,\n    radius,\n    tileX,\n    tileY,\n    shape,\n    opacity, // packed buffer1\n    stroke,\n    strokeWidth,\n    strokeOpacity, // packed buffer2\n  } = props;\n  const packedBuffer: number[][] = [];\n  const packedBuffer2: number[][] = [];\n  const packedBuffer3: number[][] = [];\n\n  const packedColor: [number, number] = [\n    packUint8ToFloat(color[0], color[1]),\n    packUint8ToFloat(color[2], color[3]),\n  ];\n  const packedStrokeColor: [number, number] = [\n    packUint8ToFloat(stroke[0], stroke[1]),\n    packUint8ToFloat(stroke[2], stroke[3]),\n  ];\n\n  [\n    [-1, -1],\n    [1, -1],\n    [1, 1],\n    [-1, 1],\n  ].forEach(([extrudeX, extrudeY]) => {\n    // vec4(\n    //   color,\n    //   color,\n    //   (4-bit extrude, 4-bit shape, 16-bit radius),\n    //   tileCoords\n    // )\n    packedBuffer.push([\n      ...packedColor,\n      (extrudeX + 1) * LEFT_SHIFT23 +\n        (extrudeY + 1) * LEFT_SHIFT21 +\n        getShapeIndex(shape) * LEFT_SHIFT17 +\n        radius,\n      (tileX + 512) * LEFT_SHIFT19 + (tileY + 512) * LEFT_SHIFT6,\n    ]);\n\n    // vec4(\n    //   strokeColor,\n    //   strokeColor,\n    //   strokeWidth,\n    //   strokeOpacity\n    // )\n    packedBuffer2.push([...packedStrokeColor, strokeWidth, strokeOpacity]);\n\n    packedBuffer3.push([opacity, 0, 0, 0]);\n  });\n\n  return {\n    packedBuffer,\n    packedBuffer2,\n    packedBuffer3,\n  };\n}\n\nexport function packOpacity(opacity: number, placed: boolean): number {\n  if (opacity === 0 && !placed) {\n    return 0;\n  } else if (opacity === 1 && placed) {\n    return 4294967295;\n  }\n  const targetBit = placed ? 1 : 0;\n  const opacityBits = Math.floor(opacity * 127);\n  return (\n    opacityBits * LEFT_SHIFT25 +\n    targetBit * LEFT_SHIFT24 +\n    opacityBits * LEFT_SHIFT17 +\n    targetBit * LEFT_SHIFT16 +\n    opacityBits * LEFT_SHIFT9 +\n    targetBit * LEFT_SHIFT8 +\n    opacityBits * LEFT_SHIFT1 +\n    targetBit\n  );\n}\n"]},"metadata":{},"sourceType":"module"}