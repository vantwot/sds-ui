{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCountryBoundaryLayer = void 0;\n\nvar path_layer_1 = require(\"../../layers/path-layer\");\n\nvar constants_1 = require(\"./constants\");\n\nvar createCountryBoundaryLayer = function createCountryBoundaryLayer(data, plotLayerConfig) {\n  var _a = plotLayerConfig || {},\n      visible = _a.visible,\n      minZoom = _a.minZoom,\n      maxZoom = _a.maxZoom,\n      _b = _a.zIndex,\n      zIndex = _b === void 0 ? 0 : _b;\n\n  var chinaBoundaryFeatures = data.features.filter(function (_a) {\n    var properties = _a.properties;\n    return ['coast', 'hkm', 'national'].includes(properties.type);\n  });\n  var disputeBoundaryFeatures = data.features.filter(function (_a) {\n    var properties = _a.properties;\n    return properties.type === 'dispute';\n  });\n  var chinaBoundaryLayer = new path_layer_1.PathLayer({\n    name: 'chinaBoundaryLayer',\n    visible: visible,\n    minZoom: minZoom,\n    maxZoom: maxZoom,\n    zIndex: zIndex + 0.1,\n    source: {\n      data: {\n        type: 'FeatureCollection',\n        features: chinaBoundaryFeatures\n      },\n      parser: {\n        type: 'geojson'\n      }\n    },\n    color: {\n      field: 'type',\n      value: function value(_a) {\n        var type = _a.type;\n        return constants_1.CHINA_BOUNDARY_STYLE[type].color;\n      }\n    },\n    size: {\n      field: 'type',\n      value: function value(_a) {\n        var type = _a.type;\n        return constants_1.CHINA_BOUNDARY_STYLE[type].width;\n      }\n    },\n    style: {\n      opacity: ['type', function (type) {\n        return constants_1.CHINA_BOUNDARY_STYLE[type].opacity;\n      }]\n    }\n  });\n  var chinaDisputeBoundaryLayer = new path_layer_1.PathLayer({\n    name: 'chinaDisputeBoundaryLayer',\n    visible: visible,\n    minZoom: minZoom,\n    maxZoom: maxZoom,\n    zIndex: zIndex + 0.1,\n    source: {\n      data: {\n        type: 'FeatureCollection',\n        features: disputeBoundaryFeatures\n      },\n      parser: {\n        type: 'geojson'\n      }\n    },\n    color: constants_1.CHINA_BOUNDARY_STYLE['dispute'].color,\n    size: constants_1.CHINA_BOUNDARY_STYLE['dispute'].width,\n    style: {\n      opacity: constants_1.CHINA_BOUNDARY_STYLE['dispute'].opacity,\n      lineType: 'dash',\n      dashArray: constants_1.CHINA_BOUNDARY_STYLE['dispute'].dashArray\n    }\n  });\n  return {\n    chinaBoundaryLayer: chinaBoundaryLayer,\n    chinaDisputeBoundaryLayer: chinaDisputeBoundaryLayer\n  };\n};\n\nexports.createCountryBoundaryLayer = createCountryBoundaryLayer;","map":{"version":3,"sources":["../../../../src/plots/choropleth/layer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createCountryBoundaryLayer = void 0;\nvar path_layer_1 = require(\"../../layers/path-layer\");\nvar constants_1 = require(\"./constants\");\nvar createCountryBoundaryLayer = function (data, plotLayerConfig) {\n    var _a = plotLayerConfig || {}, visible = _a.visible, minZoom = _a.minZoom, maxZoom = _a.maxZoom, _b = _a.zIndex, zIndex = _b === void 0 ? 0 : _b;\n    var chinaBoundaryFeatures = data.features.filter(function (_a) {\n        var properties = _a.properties;\n        return ['coast', 'hkm', 'national'].includes(properties.type);\n    });\n    var disputeBoundaryFeatures = data.features.filter(function (_a) {\n        var properties = _a.properties;\n        return properties.type === 'dispute';\n    });\n    var chinaBoundaryLayer = new path_layer_1.PathLayer({\n        name: 'chinaBoundaryLayer',\n        visible: visible,\n        minZoom: minZoom,\n        maxZoom: maxZoom,\n        zIndex: zIndex + 0.1,\n        source: {\n            data: { type: 'FeatureCollection', features: chinaBoundaryFeatures },\n            parser: { type: 'geojson' },\n        },\n        color: {\n            field: 'type',\n            value: function (_a) {\n                var type = _a.type;\n                return constants_1.CHINA_BOUNDARY_STYLE[type].color;\n            },\n        },\n        size: {\n            field: 'type',\n            value: function (_a) {\n                var type = _a.type;\n                return constants_1.CHINA_BOUNDARY_STYLE[type].width;\n            },\n        },\n        style: {\n            opacity: ['type', function (type) { return constants_1.CHINA_BOUNDARY_STYLE[type].opacity; }],\n        },\n    });\n    var chinaDisputeBoundaryLayer = new path_layer_1.PathLayer({\n        name: 'chinaDisputeBoundaryLayer',\n        visible: visible,\n        minZoom: minZoom,\n        maxZoom: maxZoom,\n        zIndex: zIndex + 0.1,\n        source: {\n            data: { type: 'FeatureCollection', features: disputeBoundaryFeatures },\n            parser: { type: 'geojson' },\n        },\n        color: constants_1.CHINA_BOUNDARY_STYLE['dispute'].color,\n        size: constants_1.CHINA_BOUNDARY_STYLE['dispute'].width,\n        style: {\n            opacity: constants_1.CHINA_BOUNDARY_STYLE['dispute'].opacity,\n            lineType: 'dash',\n            dashArray: constants_1.CHINA_BOUNDARY_STYLE['dispute'].dashArray,\n        },\n    });\n    return { chinaBoundaryLayer: chinaBoundaryLayer, chinaDisputeBoundaryLayer: chinaDisputeBoundaryLayer };\n};\nexports.createCountryBoundaryLayer = createCountryBoundaryLayer;\n//# sourceMappingURL=layer.js.map"]},"metadata":{},"sourceType":"script"}