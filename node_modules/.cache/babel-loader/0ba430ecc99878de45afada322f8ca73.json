{"ast":null,"code":"import _regeneratorRuntime from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { XFlowGraphCommands } from '@antv/xflow-core';\nimport { debounce } from 'lodash'; // 解决配置共享问题\n\nexport var globalProps = {\n  config: {}\n};\nexport var setProps = function setProps(props) {\n  globalProps.config = props;\n};\nexport var getProps = function getProps(key) {\n  var _a;\n\n  return (_a = globalProps.config) === null || _a === void 0 ? void 0 : _a[key];\n};\nvar graphInstance = new Map();\nvar appInstance = new Map();\nexport var setInstance = function setInstance(app) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var x6graph;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return app.getGraphInstance();\n\n          case 2:\n            x6graph = _context.sent;\n            graphInstance.set('x6graph', x6graph);\n            appInstance.set('app', app);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\nexport var getGraphInstance = function getGraphInstance() {\n  return graphInstance.get('x6graph');\n};\nexport var getAppInstance = function getAppInstance() {\n  return appInstance.get('app');\n};\nexport var getGraphData = function getGraphData() {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var app, data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            app = getAppInstance();\n            _context3.next = 3;\n            return app.executeCommand(XFlowGraphCommands.SAVE_GRAPH_DATA.id, {\n              saveGraphDataService: function saveGraphDataService(graphMeta, graphData) {\n                return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          data = graphData;\n\n                        case 1:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n              }\n            });\n\n          case 3:\n            return _context3.abrupt(\"return\", data);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n};\n/** 更新配置时通知上传执行保存 */\n\nexport var onConfigChange = debounce(function (config) {\n  var configChange = getProps('onConfigChange');\n\n  if (!configChange || typeof configChange !== 'function') {\n    return;\n  }\n\n  return configChange(Object.assign({\n    data: getGraphData()\n  }, config));\n}, 300, {\n  trailing: true\n});","map":{"version":3,"sources":["../../../src/flowchart-canvas/utils/util.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAS,kBAAT,QAAmC,kBAAnC;AAEA,SAAS,QAAT,QAAyB,QAAzB,C,CAEA;;AACA,OAAO,IAAM,WAAW,GAAG;AACzB,EAAA,MAAM,EAAE;AADiB,CAApB;AAIP,OAAO,IAAM,QAAQ,GAAG,SAAX,QAAW,CAAA,KAAK,EAAG;AAC9B,EAAA,WAAW,CAAC,MAAZ,GAAqB,KAArB;AACD,CAFM;AAGP,OAAO,IAAM,QAAQ,GAAG,SAAX,QAAW,CAAC,GAAD,EAAgB;;;AACtC,SAAO,CAAA,EAAA,GAAA,WAAW,CAAC,MAAZ,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAG,GAAH,CAAzB;AACD,CAFM;AAIP,IAAM,aAAa,GAAG,IAAI,GAAJ,EAAtB;AACA,IAAM,WAAW,GAAG,IAAI,GAAJ,EAApB;AAEA,OAAO,IAAM,WAAW,GAAG,SAAd,WAAc,CAAO,GAAP;AAAA,SAA6B,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACtC,mBAAM,GAAG,CAAC,gBAAJ,EAAN;;AADsC;AAChD,YAAA,OADgD;AAEtD,YAAA,aAAa,CAAC,GAAd,CAAkB,SAAlB,EAA6B,OAA7B;AACA,YAAA,WAAW,CAAC,GAAZ,CAAgB,KAAhB,EAAuB,GAAvB;;AAHsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EAA7B;AAAA,CAApB;AAMP,OAAO,IAAM,gBAAgB,GAAG,SAAnB,gBAAmB,GAAK;AACnC,SAAO,aAAa,CAAC,GAAd,CAAkB,SAAlB,CAAP;AACD,CAFM;AAIP,OAAO,IAAM,cAAc,GAAG,SAAjB,cAAiB,GAAK;AACjC,SAAO,WAAW,CAAC,GAAZ,CAAgB,KAAhB,CAAP;AACD,CAFM;AAIP,OAAO,IAAM,YAAY,GAAG,SAAf,YAAe;AAAA,SAAW,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/B,YAAA,GAD+B,GACzB,cAAc,EADW;AAAA;AAGrC,mBAAM,GAAG,CAAC,cAAJ,CAAmB,kBAAkB,CAAC,eAAnB,CAAmC,EAAtD,EAA0D;AAC9D,cAAA,oBAAoB,EAAE,8BAAO,SAAP,EAAkB,SAAlB;AAAA,uBAA+B,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AACnD,0BAAA,IAAI,GAAG,SAAP;;AADmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAA,EAA/B;AAAA;AADwC,aAA1D,CAAN;;AAHqC;AAAA,8CAQ9B,IAR8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EAAX;AAAA,CAArB;AAWP;;AACA,OAAO,IAAM,cAAc,GAAG,QAAQ,CACpC,UAAA,MAAM,EAAG;AACP,MAAM,YAAY,GAAG,QAAQ,CAAC,gBAAD,CAA7B;;AACA,MAAI,CAAC,YAAD,IAAiB,OAAO,YAAP,KAAwB,UAA7C,EAAyD;AACvD;AACD;;AACD,SAAO,YAAY,CAAA,MAAA,CAAA,MAAA,CAAA;AACjB,IAAA,IAAI,EAAE,YAAY;AADD,GAAA,EAEd,MAFc,CAAA,CAAnB;AAID,CAVmC,EAWpC,GAXoC,EAYpC;AACE,EAAA,QAAQ,EAAE;AADZ,CAZoC,CAA/B","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { XFlowGraphCommands } from '@antv/xflow-core';\nimport { debounce } from 'lodash';\n// 解决配置共享问题\nexport const globalProps = {\n    config: {},\n};\nexport const setProps = props => {\n    globalProps.config = props;\n};\nexport const getProps = (key) => {\n    var _a;\n    return (_a = globalProps.config) === null || _a === void 0 ? void 0 : _a[key];\n};\nconst graphInstance = new Map();\nconst appInstance = new Map();\nexport const setInstance = (app) => __awaiter(void 0, void 0, void 0, function* () {\n    const x6graph = yield app.getGraphInstance();\n    graphInstance.set('x6graph', x6graph);\n    appInstance.set('app', app);\n});\nexport const getGraphInstance = () => {\n    return graphInstance.get('x6graph');\n};\nexport const getAppInstance = () => {\n    return appInstance.get('app');\n};\nexport const getGraphData = () => __awaiter(void 0, void 0, void 0, function* () {\n    const app = getAppInstance();\n    let data;\n    yield app.executeCommand(XFlowGraphCommands.SAVE_GRAPH_DATA.id, {\n        saveGraphDataService: (graphMeta, graphData) => __awaiter(void 0, void 0, void 0, function* () {\n            data = graphData;\n        }),\n    });\n    return data;\n});\n/** 更新配置时通知上传执行保存 */\nexport const onConfigChange = debounce(config => {\n    const configChange = getProps('onConfigChange');\n    if (!configChange || typeof configChange !== 'function') {\n        return;\n    }\n    return configChange(Object.assign({ data: getGraphData() }, config));\n}, 300, {\n    trailing: true,\n});\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}