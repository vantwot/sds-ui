{"ast":null,"code":"export function round(num) {\n  let precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return Number.isInteger(num) ? num : +num.toFixed(precision);\n}\nexport function random(min, max) {\n  let mmin;\n  let mmax;\n\n  if (max == null) {\n    mmax = min == null ? 1 : min;\n    mmin = 0;\n  } else {\n    mmax = max;\n    mmin = min == null ? 0 : min;\n  }\n\n  if (mmax < mmin) {\n    const temp = mmin;\n    mmin = mmax;\n    mmax = temp;\n  }\n\n  return Math.floor(Math.random() * (mmax - mmin + 1) + mmin);\n}\nexport function clamp(value, min, max) {\n  if (Number.isNaN(value)) {\n    return NaN;\n  }\n\n  if (Number.isNaN(min) || Number.isNaN(max)) {\n    return 0;\n  }\n\n  return min < max ? value < min ? min : value > max ? max : value : value < max ? max : value > min ? min : value;\n}\nexport function snapToGrid(value, gridSize) {\n  return gridSize * Math.round(value / gridSize);\n}\nexport function containsPoint(rect, point) {\n  return point != null && rect != null && point.x >= rect.x && point.x <= rect.x + rect.width && point.y >= rect.y && point.y <= rect.y + rect.height;\n}\nexport function squaredLength(p1, p2) {\n  const dx = p1.x - p2.x;\n  const dy = p1.y - p2.y;\n  return dx * dx + dy * dy;\n}","map":{"version":3,"sources":["../../src/geometry/util.ts"],"names":[],"mappings":"AAGA,OAAM,SAAU,KAAV,CAAgB,GAAhB,EAA0C;AAAA,MAAb,SAAa,uEAAD,CAAC;AAC9C,SAAO,MAAM,CAAC,SAAP,CAAiB,GAAjB,IAAwB,GAAxB,GAA8B,CAAC,GAAG,CAAC,OAAJ,CAAY,SAAZ,CAAtC;AACD;AAKD,OAAM,SAAU,MAAV,CAAiB,GAAjB,EAA+B,GAA/B,EAA2C;AAC/C,MAAI,IAAJ;AACA,MAAI,IAAJ;;AAEA,MAAI,GAAG,IAAI,IAAX,EAAiB;AACf,IAAA,IAAI,GAAG,GAAG,IAAI,IAAP,GAAc,CAAd,GAAkB,GAAzB;AACA,IAAA,IAAI,GAAG,CAAP;AACD,GAHD,MAGO;AACL,IAAA,IAAI,GAAG,GAAP;AACA,IAAA,IAAI,GAAG,GAAG,IAAI,IAAP,GAAc,CAAd,GAAkB,GAAzB;AACD;;AAED,MAAI,IAAI,GAAG,IAAX,EAAiB;AACf,UAAM,IAAI,GAAG,IAAb;AACA,IAAA,IAAI,GAAG,IAAP;AACA,IAAA,IAAI,GAAG,IAAP;AACD;;AAED,SAAO,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,MAAiB,IAAI,GAAG,IAAP,GAAc,CAA/B,IAAoC,IAA/C,CAAP;AACD;AAED,OAAM,SAAU,KAAV,CAAgB,KAAhB,EAA+B,GAA/B,EAA4C,GAA5C,EAAuD;AAC3D,MAAI,MAAM,CAAC,KAAP,CAAa,KAAb,CAAJ,EAAyB;AACvB,WAAO,GAAP;AACD;;AAED,MAAI,MAAM,CAAC,KAAP,CAAa,GAAb,KAAqB,MAAM,CAAC,KAAP,CAAa,GAAb,CAAzB,EAA4C;AAC1C,WAAO,CAAP;AACD;;AAED,SAAO,GAAG,GAAG,GAAN,GACH,KAAK,GAAG,GAAR,GACE,GADF,GAEE,KAAK,GAAG,GAAR,GACA,GADA,GAEA,KALC,GAMH,KAAK,GAAG,GAAR,GACA,GADA,GAEA,KAAK,GAAG,GAAR,GACA,GADA,GAEA,KAVJ;AAWD;AAED,OAAM,SAAU,UAAV,CAAqB,KAArB,EAAoC,QAApC,EAAoD;AACxD,SAAO,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,QAAnB,CAAlB;AACD;AAED,OAAM,SAAU,aAAV,CACJ,IADI,EAEJ,KAFI,EAEkB;AAEtB,SACE,KAAK,IAAI,IAAT,IACA,IAAI,IAAI,IADR,IAEA,KAAK,CAAC,CAAN,IAAW,IAAI,CAAC,CAFhB,IAGA,KAAK,CAAC,CAAN,IAAW,IAAI,CAAC,CAAL,GAAS,IAAI,CAAC,KAHzB,IAIA,KAAK,CAAC,CAAN,IAAW,IAAI,CAAC,CAJhB,IAKA,KAAK,CAAC,CAAN,IAAW,IAAI,CAAC,CAAL,GAAS,IAAI,CAAC,MAN3B;AAQD;AAED,OAAM,SAAU,aAAV,CAAwB,EAAxB,EAA6C,EAA7C,EAAgE;AACpE,QAAM,EAAE,GAAG,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAArB;AACA,QAAM,EAAE,GAAG,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAArB;AACA,SAAO,EAAE,GAAG,EAAL,GAAU,EAAE,GAAG,EAAtB;AACD","sourceRoot":"","sourcesContent":["export function round(num, precision = 0) {\n    return Number.isInteger(num) ? num : +num.toFixed(precision);\n}\nexport function random(min, max) {\n    let mmin;\n    let mmax;\n    if (max == null) {\n        mmax = min == null ? 1 : min;\n        mmin = 0;\n    }\n    else {\n        mmax = max;\n        mmin = min == null ? 0 : min;\n    }\n    if (mmax < mmin) {\n        const temp = mmin;\n        mmin = mmax;\n        mmax = temp;\n    }\n    return Math.floor(Math.random() * (mmax - mmin + 1) + mmin);\n}\nexport function clamp(value, min, max) {\n    if (Number.isNaN(value)) {\n        return NaN;\n    }\n    if (Number.isNaN(min) || Number.isNaN(max)) {\n        return 0;\n    }\n    return min < max\n        ? value < min\n            ? min\n            : value > max\n                ? max\n                : value\n        : value < max\n            ? max\n            : value > min\n                ? min\n                : value;\n}\nexport function snapToGrid(value, gridSize) {\n    return gridSize * Math.round(value / gridSize);\n}\nexport function containsPoint(rect, point) {\n    return (point != null &&\n        rect != null &&\n        point.x >= rect.x &&\n        point.x <= rect.x + rect.width &&\n        point.y >= rect.y &&\n        point.y <= rect.y + rect.height);\n}\nexport function squaredLength(p1, p2) {\n    const dx = p1.x - p2.x;\n    const dy = p1.y - p2.y;\n    return dx * dx + dy * dy;\n}\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}