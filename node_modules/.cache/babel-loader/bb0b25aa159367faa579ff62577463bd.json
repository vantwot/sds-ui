{"ast":null,"code":"import React from 'react';\nimport { Empty, Spin } from 'antd';\nimport { SchemaForm } from './schema-form';\nimport { makeControlMap, xflowDefaultControls } from './schema-form/control-map/index';\nexport const PanelBody = props => {\n  const {\n    schema = {\n      tabs: []\n    },\n    triggerUpdate,\n    onFieldsChange,\n    afterUpdatingCb,\n    defaultControlRender,\n    loading,\n    controlMapService,\n    defaultControls = []\n  } = props;\n  const controlMapCache = React.useMemo(() => {\n    const controlMap = makeControlMap([...xflowDefaultControls, ...defaultControls]);\n\n    if (controlMapService) {\n      controlMapService(controlMap);\n    }\n\n    return controlMap;\n  }, [controlMapService, defaultControls]);\n\n  if (loading) {\n    return React.createElement(\"div\", {\n      className: `${props.prefixClz}-body`,\n      style: Object.assign(Object.assign({}, props.style), {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      })\n    }, React.createElement(Spin, {\n      spinning: true\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    className: `${props.prefixClz}-body`,\n    style: props.style\n  }, schema.tabs.length > 0 && React.createElement(SchemaForm, {\n    schema: schema,\n    onFieldsChange: onFieldsChange,\n    controlMap: controlMapCache,\n    defaultControlRender: defaultControlRender,\n    afterUpdatingCb: afterUpdatingCb,\n    triggerUpdate: triggerUpdate\n  }), schema.tabs.length === 0 && React.createElement(Empty, {\n    style: {\n      paddingTop: '64px'\n    }\n  }));\n};","map":{"version":3,"sources":["../../src/canvas-json-schema-form/panel-body.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,KAAT,EAAgB,IAAhB,QAA4B,MAA5B;AAUA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,cAAT,EAAyB,oBAAzB,QAAqD,iCAArD;AAeA,OAAO,MAAM,SAAS,GAAyB,KAAK,IAAG;AACrD,QAAM;AACJ,IAAA,MAAM,GAAG;AAAE,MAAA,IAAI,EAAE;AAAR,KADL;AAEJ,IAAA,aAFI;AAGJ,IAAA,cAHI;AAIJ,IAAA,eAJI;AAKJ,IAAA,oBALI;AAMJ,IAAA,OANI;AAOJ,IAAA,iBAPI;AAQJ,IAAA,eAAe,GAAG;AARd,MASF,KATJ;AAWA,QAAM,eAAe,GAAG,KAAK,CAAC,OAAN,CAAc,MAAK;AACzC,UAAM,UAAU,GAAG,cAAc,CAAC,CAAC,GAAG,oBAAJ,EAA0B,GAAG,eAA7B,CAAD,CAAjC;;AACA,QAAI,iBAAJ,EAAuB;AACrB,MAAA,iBAAiB,CAAC,UAAD,CAAjB;AACD;;AACD,WAAO,UAAP;AACD,GANuB,EAMrB,CAAC,iBAAD,EAAoB,eAApB,CANqB,CAAxB;;AAQA,MAAI,OAAJ,EAAa;AACX,WACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,MAAA,SAAS,EAAE,GAAG,KAAK,CAAC,SAAS,OAD/B;AAEE,MAAA,KAAK,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,KAAK,CAAC,KAAb,CAAA,EAAkB;AAAE,QAAA,OAAO,EAAE,MAAX;AAAmB,QAAA,cAAc,EAAE,QAAnC;AAA6C,QAAA,UAAU,EAAE;AAAzD,OAAlB;AAFP,KAAA,EAIE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;AAAC,MAAA,QAAQ,EAAA;AAAT,KAAL,CAJF,CADF;AAQD;;AACD,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,GAAG,KAAK,CAAC,SAAS,OAAlC;AAA2C,IAAA,KAAK,EAAE,KAAK,CAAC;AAAxD,GAAA,EACG,MAAM,CAAC,IAAP,CAAY,MAAZ,GAAqB,CAArB,IACC,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AACT,IAAA,MAAM,EAAE,MADC;AAET,IAAA,cAAc,EAAE,cAFP;AAGT,IAAA,UAAU,EAAE,eAHH;AAIT,IAAA,oBAAoB,EAAE,oBAJb;AAKT,IAAA,eAAe,EAAE,eALR;AAMT,IAAA,aAAa,EAAE;AANN,GAAX,CAFJ,EAWG,MAAM,CAAC,IAAP,CAAY,MAAZ,KAAuB,CAAvB,IAA4B,KAAA,CAAA,aAAA,CAAC,KAAD,EAAM;AAAC,IAAA,KAAK,EAAE;AAAE,MAAA,UAAU,EAAE;AAAd;AAAR,GAAN,CAX/B,CADF;AAeD,CA7CM","sourceRoot":"","sourcesContent":["import React from 'react';\nimport { Empty, Spin } from 'antd';\nimport { SchemaForm } from './schema-form';\nimport { makeControlMap, xflowDefaultControls } from './schema-form/control-map/index';\nexport const PanelBody = props => {\n    const { schema = { tabs: [] }, triggerUpdate, onFieldsChange, afterUpdatingCb, defaultControlRender, loading, controlMapService, defaultControls = [], } = props;\n    const controlMapCache = React.useMemo(() => {\n        const controlMap = makeControlMap([...xflowDefaultControls, ...defaultControls]);\n        if (controlMapService) {\n            controlMapService(controlMap);\n        }\n        return controlMap;\n    }, [controlMapService, defaultControls]);\n    if (loading) {\n        return (React.createElement(\"div\", { className: `${props.prefixClz}-body`, style: Object.assign(Object.assign({}, props.style), { display: 'flex', justifyContent: 'center', alignItems: 'center' }) },\n            React.createElement(Spin, { spinning: true })));\n    }\n    return (React.createElement(\"div\", { className: `${props.prefixClz}-body`, style: props.style },\n        schema.tabs.length > 0 && (React.createElement(SchemaForm, { schema: schema, onFieldsChange: onFieldsChange, controlMap: controlMapCache, defaultControlRender: defaultControlRender, afterUpdatingCb: afterUpdatingCb, triggerUpdate: triggerUpdate })),\n        schema.tabs.length === 0 && React.createElement(Empty, { style: { paddingTop: '64px' } })));\n};\n//# sourceMappingURL=panel-body.js.map"]},"metadata":{},"sourceType":"module"}