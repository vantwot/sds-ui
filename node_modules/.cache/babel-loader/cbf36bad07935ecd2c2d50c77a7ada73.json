{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { mat4, vec3 } from 'gl-matrix';\n\nvar Viewport = function () {\n  function Viewport() {\n    _classCallCheck(this, Viewport);\n\n    _defineProperty(this, \"xzReg\", -Math.PI * 0.6);\n\n    _defineProperty(this, \"yReg\", Math.PI * 0.2);\n\n    _defineProperty(this, \"earthCameraRadius\", 200);\n\n    _defineProperty(this, \"earthCameraZoom\", 1);\n\n    _defineProperty(this, \"cameraPosition\", vec3.create());\n\n    _defineProperty(this, \"viewport\", void 0);\n\n    _defineProperty(this, \"projectionMatrix\", mat4.create());\n\n    _defineProperty(this, \"modelMatrix\", mat4.create());\n\n    _defineProperty(this, \"viewMatrix\", mat4.create());\n\n    _defineProperty(this, \"viewProjectionMatrix\", mat4.create());\n\n    _defineProperty(this, \"ViewProjectionMatrixUncentered\", mat4.create());\n\n    _defineProperty(this, \"viewUncenteredMatrix\", mat4.create());\n  }\n\n  _createClass(Viewport, [{\n    key: \"syncWithMapCamera\",\n    value: function syncWithMapCamera(mapCamera) {\n      var _mapCamera$viewportHe = mapCamera.viewportHeight,\n          viewportHeight = _mapCamera$viewportHe === void 0 ? 1 : _mapCamera$viewportHe,\n          _mapCamera$viewportWi = mapCamera.viewportWidth,\n          viewportWidth = _mapCamera$viewportWi === void 0 ? 1 : _mapCamera$viewportWi;\n      var aspect = viewportWidth / viewportHeight;\n      var near = 0.1;\n      var far = 10000;\n      var fov = 20;\n      mat4.perspective(this.projectionMatrix, fov, aspect, near, far);\n      var x = this.earthCameraRadius * Math.cos(this.xzReg);\n      var z = this.earthCameraRadius * Math.sin(this.xzReg);\n      var y = this.earthCameraRadius * Math.sin(this.yReg);\n      this.cameraPosition = vec3.fromValues(x, y, z);\n      vec3.normalize(this.cameraPosition, this.cameraPosition);\n      vec3.multiply(this.cameraPosition, this.cameraPosition, vec3.fromValues(this.earthCameraRadius, this.earthCameraRadius, this.earthCameraRadius));\n      vec3.scale(this.cameraPosition, this.cameraPosition, this.earthCameraZoom);\n      var crossY = vec3.create();\n      vec3.cross(crossY, this.cameraPosition, vec3.fromValues(0, 1, 0));\n      var up = vec3.fromValues(0, 1, 0);\n      vec3.cross(up, crossY, this.cameraPosition);\n      var target = vec3.fromValues(0, 0, 0);\n      mat4.lookAt(this.viewMatrix, this.cameraPosition, target, up);\n      this.viewUncenteredMatrix = mat4.clone(this.viewMatrix);\n      mat4.multiply(this.viewProjectionMatrix, this.projectionMatrix, this.viewMatrix);\n      mat4.multiply(this.ViewProjectionMatrixUncentered, this.projectionMatrix, this.viewMatrix);\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(r) {\n      this.xzReg += r * Math.min(this.earthCameraZoom * this.earthCameraZoom, 1);\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(r) {\n      this.yReg += r * Math.min(this.earthCameraZoom * this.earthCameraZoom, 1);\n    }\n  }, {\n    key: \"scaleZoom\",\n    value: function scaleZoom(z) {\n      this.earthCameraZoom += z;\n      this.earthCameraZoom = Math.max(this.earthCameraZoom, 0.6);\n    }\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      return 4;\n    }\n  }, {\n    key: \"getZoomScale\",\n    value: function getZoomScale() {\n      return Math.pow(2, this.getZoom());\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      return [0, 0];\n    }\n  }, {\n    key: \"getProjectionMatrix\",\n    value: function getProjectionMatrix() {\n      return this.projectionMatrix;\n    }\n  }, {\n    key: \"getModelMatrix\",\n    value: function getModelMatrix() {\n      return this.modelMatrix;\n    }\n  }, {\n    key: \"getViewMatrix\",\n    value: function getViewMatrix() {\n      return this.viewMatrix;\n    }\n  }, {\n    key: \"getViewMatrixUncentered\",\n    value: function getViewMatrixUncentered() {\n      return this.viewMatrix;\n    }\n  }, {\n    key: \"getViewProjectionMatrix\",\n    value: function getViewProjectionMatrix() {\n      return this.viewProjectionMatrix;\n    }\n  }, {\n    key: \"getViewProjectionMatrixUncentered\",\n    value: function getViewProjectionMatrixUncentered() {\n      return this.viewProjectionMatrix;\n    }\n  }, {\n    key: \"getFocalDistance\",\n    value: function getFocalDistance() {\n      return 1;\n    }\n  }, {\n    key: \"projectFlat\",\n    value: function projectFlat(lngLat, scale) {\n      return this.viewport.projectFlat(lngLat, scale);\n    }\n  }]);\n\n  return Viewport;\n}();\n\nexport { Viewport as default };","map":{"version":3,"sources":["../../src/earth/Viewport.ts"],"names":["Viewport","Math","vec3","mat4","viewportHeight","viewportWidth","mapCamera","aspect","near","far","fov","x","z","y","crossY","up","target","r"],"mappings":"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","sourcesContent":["import { IMapCamera, IViewport } from '@antv/l7-core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport WebMercatorViewport from 'viewport-mercator-project';\n\nexport interface IEarthCamera {\n  viewportHeight: number;\n  viewportWidth: number;\n}\n\nexport default class Viewport implements IViewport {\n  // TODO: 初始化相机的姿态 看向地球\n  private xzReg: number = -Math.PI * 0.6;\n  private yReg: number = Math.PI * 0.2;\n  // 默认的地球相机半径、地球相机缩放层级\n  private earthCameraRadius: number = 200;\n  private earthCameraZoom: number = 1;\n\n  private cameraPosition: vec3 = vec3.create();\n\n  private viewport: WebMercatorViewport;\n\n  private projectionMatrix: mat4 = mat4.create();\n  private modelMatrix: mat4 = mat4.create();\n  private viewMatrix: mat4 = mat4.create();\n  private viewProjectionMatrix: mat4 = mat4.create();\n  private ViewProjectionMatrixUncentered: mat4 = mat4.create();\n  private viewUncenteredMatrix: mat4 = mat4.create();\n\n  public syncWithMapCamera(mapCamera: Partial<IEarthCamera>) {\n    const { viewportHeight = 1, viewportWidth = 1 } = mapCamera;\n    const aspect = viewportWidth / viewportHeight;\n    const near = 0.1;\n    const far = 10000;\n    const fov = 20;\n\n    // 计算透视投影矩阵 projectionMatrix\n    mat4.perspective(this.projectionMatrix, fov, aspect, near, far);\n    // 计算相机矩阵 viewMatrix\n    const x = this.earthCameraRadius * Math.cos(this.xzReg);\n    const z = this.earthCameraRadius * Math.sin(this.xzReg);\n    const y = this.earthCameraRadius * Math.sin(this.yReg);\n\n    this.cameraPosition = vec3.fromValues(x, y, z);\n    vec3.normalize(this.cameraPosition, this.cameraPosition);\n    vec3.multiply(\n      this.cameraPosition,\n      this.cameraPosition,\n      vec3.fromValues(\n        this.earthCameraRadius,\n        this.earthCameraRadius,\n        this.earthCameraRadius,\n      ),\n    );\n\n    vec3.scale(this.cameraPosition, this.cameraPosition, this.earthCameraZoom);\n\n    const crossY = vec3.create();\n    vec3.cross(crossY, this.cameraPosition, vec3.fromValues(0, 1, 0));\n\n    const up = vec3.fromValues(0, 1, 0);\n    vec3.cross(up, crossY, this.cameraPosition);\n\n    const target = vec3.fromValues(0, 0, 0);\n    mat4.lookAt(this.viewMatrix, this.cameraPosition, target, up);\n    this.viewUncenteredMatrix = mat4.clone(this.viewMatrix);\n\n    mat4.multiply(\n      this.viewProjectionMatrix,\n      this.projectionMatrix,\n      this.viewMatrix,\n    );\n    mat4.multiply(\n      this.ViewProjectionMatrixUncentered,\n      this.projectionMatrix,\n      this.viewMatrix,\n    );\n  }\n\n  /**\n   * 旋转方法 Y 轴\n   * @param r\n   */\n  public rotateY(r: number) {\n    this.xzReg += r * Math.min(this.earthCameraZoom * this.earthCameraZoom, 1);\n  }\n\n  /**\n   * 旋转方法 X 轴\n   * @param r\n   */\n  public rotateX(r: number) {\n    this.yReg += r * Math.min(this.earthCameraZoom * this.earthCameraZoom, 1);\n  }\n\n  /**\n   * 缩放方法\n   * @param z\n   */\n  public scaleZoom(z: number) {\n    this.earthCameraZoom += z;\n    this.earthCameraZoom = Math.max(this.earthCameraZoom, 0.6);\n  }\n\n  public getZoom(): number {\n    return 4;\n  }\n\n  public getZoomScale(): number {\n    return Math.pow(2, this.getZoom());\n  }\n\n  public getCenter(): [number, number] {\n    return [0, 0];\n  }\n\n  public getProjectionMatrix(): number[] {\n    return this.projectionMatrix as number[];\n  }\n\n  public getModelMatrix(): number[] {\n    return this.modelMatrix as number[];\n  }\n\n  public getViewMatrix(): number[] {\n    return this.viewMatrix as number[];\n  }\n\n  public getViewMatrixUncentered(): number[] {\n    return this.viewMatrix as number[];\n  }\n  public getViewProjectionMatrix(): number[] {\n    return this.viewProjectionMatrix as number[];\n  }\n\n  public getViewProjectionMatrixUncentered(): number[] {\n    return this.viewProjectionMatrix as number[];\n  }\n  public getFocalDistance() {\n    return 1;\n  }\n\n  public projectFlat(\n    lngLat: [number, number],\n    scale?: number | undefined,\n  ): [number, number] {\n    return this.viewport.projectFlat(lngLat, scale);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}