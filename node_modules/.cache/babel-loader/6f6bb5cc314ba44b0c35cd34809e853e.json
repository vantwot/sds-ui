{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Plot = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar map_1 = require(\"../map\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar text_layer_1 = require(\"../../layers/text-layer\");\n\nvar types_1 = require(\"../../types\");\n\nvar source_1 = require(\"../../adaptor/source\");\n\nvar util_1 = require(\"@antv/util\");\n\nvar DEFAULT_OPTIONS = {\n  autoFit: false\n};\n\nvar Plot =\n/** @class */\nfunction (_super) {\n  (0, tslib_1.__extends)(Plot, _super);\n\n  function Plot(container, options) {\n    var _this = this;\n\n    if (typeof container === 'string' || container instanceof Element) {\n      if (options === undefined) {\n        throw new Error('options is undefined');\n      }\n\n      _this = _super.call(this, options) || this;\n      _this.container = _this.createContainer(container);\n      _this.theme = _this.createTheme();\n      _this.scene = _this.createScene();\n\n      _this.registerResources();\n\n      _this.initLayers();\n    } else {\n      _this = _super.call(this, container) || this;\n    }\n\n    return _this;\n  }\n  /**\n   * 初始化图层\n   */\n\n\n  Plot.prototype.initLayers = function () {\n    this.source = this.createSource();\n    this.render();\n    this.inited = true;\n  };\n  /**\n   * 初始化图层事件\n   */\n\n\n  Plot.prototype.initLayersEvent = function () {//\n  };\n  /**\n   * 获取默认配置\n   */\n\n\n  Plot.prototype.getDefaultOptions = function () {\n    return Plot.DefaultOptions;\n  };\n  /**\n   * 创建 source 实例\n   */\n\n\n  Plot.prototype.createSource = function () {\n    var _a = this.options.source,\n        data = _a.data,\n        aggregation = _a.aggregation,\n        sourceCFG = (0, tslib_1.__rest)(_a, [\"data\", \"aggregation\"]);\n    aggregation && source_1.MappingSource.aggregation(sourceCFG, aggregation);\n    var source = new types_1.Source(data, sourceCFG);\n    return source;\n  };\n  /**\n   * 创建数据标签图层\n   */\n\n\n  Plot.prototype.createLabelLayer = function (source, label, plotLayerConfig) {\n    var _a = plotLayerConfig || {},\n        visible = _a.visible,\n        minZoom = _a.minZoom,\n        maxZoom = _a.maxZoom,\n        _b = _a.zIndex,\n        zIndex = _b === void 0 ? 0 : _b;\n\n    var textLayer = new text_layer_1.TextLayer((0, tslib_1.__assign)({\n      name: 'labelLayer',\n      visible: visible,\n      minZoom: minZoom,\n      maxZoom: maxZoom,\n      zIndex: zIndex + 0.1,\n      source: source\n    }, label));\n    return textLayer;\n  };\n  /**\n   * 渲染\n   */\n\n\n  Plot.prototype.render = function () {\n    var layerGroup = this.createLayers(this.source);\n\n    if (this.inited) {\n      this.layerGroup.removeAllLayer();\n      layerGroup.addTo(this.scene);\n      this.layerGroup = layerGroup;\n      this.updateComponents();\n    } else {\n      this.layerGroup = layerGroup;\n      this.onLayersLoaded();\n      layerGroup.addTo(this.scene);\n    }\n\n    this.initLayersEvent();\n  };\n  /**\n   * 图表图层加载成功\n   */\n\n\n  Plot.prototype.onLayersLoaded = function () {\n    var _this = this;\n\n    var onLoaded = function () {\n      _this.initComponents();\n\n      _this.loaded = true;\n\n      _this.emit('loaded');\n    };\n\n    if (this.scene['sceneService'].loaded) {\n      this.sceneLoaded = true;\n      this.layersLoaded && onLoaded();\n    } else {\n      this.scene.once('loaded', function () {\n        _this.sceneLoaded = true;\n        _this.layersLoaded && onLoaded();\n      });\n    }\n\n    if (this.layerGroup.isEmpty()) {\n      this.layersLoaded = true;\n    } else {\n      this.layerGroup.once('inited-all', function () {\n        _this.layersLoaded = true;\n        _this.sceneLoaded && onLoaded();\n      });\n    }\n  };\n  /**\n   * 挂载到容器\n   */\n\n\n  Plot.prototype.attachToScene = function (scene, theme) {\n    this.scene = scene;\n    this.theme = theme;\n    this.initLayers();\n  };\n  /**\n   * 更新: 更新配置且重新渲染\n   */\n\n\n  Plot.prototype.update = function (options) {\n    this.updateOption(options);\n\n    if (options.map && !(0, util_1.isEqual)(this.lastOptions.map, this.options.map)) {\n      this.updateMap(options.map);\n    }\n\n    if (options.source && !(0, util_1.isEqual)(this.lastOptions.source, this.options.source)) {\n      var _a = options.source,\n          data = _a.data,\n          sourceConfig = (0, tslib_1.__rest)(_a, [\"data\"]);\n      this.changeData(data, sourceConfig);\n    }\n\n    this.render();\n  };\n  /**\n   * 更新: 更新数据\n   */\n\n\n  Plot.prototype.changeData = function (data, cfg) {\n    this.options.source = (0, utils_1.deepAssign)({}, this.options.source, (0, tslib_1.__assign)({\n      data: data\n    }, cfg));\n    var _a = this.options.source,\n        aggregation = _a.aggregation,\n        sourceCFG = (0, tslib_1.__rest)(_a, [\"aggregation\"]);\n    aggregation && source_1.MappingSource.aggregation(sourceCFG, aggregation);\n    this.source.setData(this.options.source.data, sourceCFG); // 更新 legend\n\n    if (this.options.legend) {\n      this.updateLegendControl(this.options.legend);\n    }\n  };\n  /**\n   * 默认的 options 配置项\n   */\n\n\n  Plot.DefaultOptions = DEFAULT_OPTIONS;\n  /**\n   * 地图图表类型\n   */\n\n  Plot.PlotType = types_1.PlotType;\n  return Plot;\n}(map_1.Map);\n\nexports.Plot = Plot;","map":{"version":3,"sources":["../../../../src/core/plot/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Plot = void 0;\nvar tslib_1 = require(\"tslib\");\nvar map_1 = require(\"../map\");\nvar utils_1 = require(\"../../utils\");\nvar text_layer_1 = require(\"../../layers/text-layer\");\nvar types_1 = require(\"../../types\");\nvar source_1 = require(\"../../adaptor/source\");\nvar util_1 = require(\"@antv/util\");\nvar DEFAULT_OPTIONS = {\n    autoFit: false,\n};\nvar Plot = /** @class */ (function (_super) {\n    (0, tslib_1.__extends)(Plot, _super);\n    function Plot(container, options) {\n        var _this = this;\n        if (typeof container === 'string' || container instanceof Element) {\n            if (options === undefined) {\n                throw new Error('options is undefined');\n            }\n            _this = _super.call(this, options) || this;\n            _this.container = _this.createContainer(container);\n            _this.theme = _this.createTheme();\n            _this.scene = _this.createScene();\n            _this.registerResources();\n            _this.initLayers();\n        }\n        else {\n            _this = _super.call(this, container) || this;\n        }\n        return _this;\n    }\n    /**\n     * 初始化图层\n     */\n    Plot.prototype.initLayers = function () {\n        this.source = this.createSource();\n        this.render();\n        this.inited = true;\n    };\n    /**\n     * 初始化图层事件\n     */\n    Plot.prototype.initLayersEvent = function () {\n        //\n    };\n    /**\n     * 获取默认配置\n     */\n    Plot.prototype.getDefaultOptions = function () {\n        return Plot.DefaultOptions;\n    };\n    /**\n     * 创建 source 实例\n     */\n    Plot.prototype.createSource = function () {\n        var _a = this.options.source, data = _a.data, aggregation = _a.aggregation, sourceCFG = (0, tslib_1.__rest)(_a, [\"data\", \"aggregation\"]);\n        aggregation && source_1.MappingSource.aggregation(sourceCFG, aggregation);\n        var source = new types_1.Source(data, sourceCFG);\n        return source;\n    };\n    /**\n     * 创建数据标签图层\n     */\n    Plot.prototype.createLabelLayer = function (source, label, plotLayerConfig) {\n        var _a = plotLayerConfig || {}, visible = _a.visible, minZoom = _a.minZoom, maxZoom = _a.maxZoom, _b = _a.zIndex, zIndex = _b === void 0 ? 0 : _b;\n        var textLayer = new text_layer_1.TextLayer((0, tslib_1.__assign)({ name: 'labelLayer', visible: visible, minZoom: minZoom, maxZoom: maxZoom, zIndex: zIndex + 0.1, source: source }, label));\n        return textLayer;\n    };\n    /**\n     * 渲染\n     */\n    Plot.prototype.render = function () {\n        var layerGroup = this.createLayers(this.source);\n        if (this.inited) {\n            this.layerGroup.removeAllLayer();\n            layerGroup.addTo(this.scene);\n            this.layerGroup = layerGroup;\n            this.updateComponents();\n        }\n        else {\n            this.layerGroup = layerGroup;\n            this.onLayersLoaded();\n            layerGroup.addTo(this.scene);\n        }\n        this.initLayersEvent();\n    };\n    /**\n     * 图表图层加载成功\n     */\n    Plot.prototype.onLayersLoaded = function () {\n        var _this = this;\n        var onLoaded = function () {\n            _this.initComponents();\n            _this.loaded = true;\n            _this.emit('loaded');\n        };\n        if (this.scene['sceneService'].loaded) {\n            this.sceneLoaded = true;\n            this.layersLoaded && onLoaded();\n        }\n        else {\n            this.scene.once('loaded', function () {\n                _this.sceneLoaded = true;\n                _this.layersLoaded && onLoaded();\n            });\n        }\n        if (this.layerGroup.isEmpty()) {\n            this.layersLoaded = true;\n        }\n        else {\n            this.layerGroup.once('inited-all', function () {\n                _this.layersLoaded = true;\n                _this.sceneLoaded && onLoaded();\n            });\n        }\n    };\n    /**\n     * 挂载到容器\n     */\n    Plot.prototype.attachToScene = function (scene, theme) {\n        this.scene = scene;\n        this.theme = theme;\n        this.initLayers();\n    };\n    /**\n     * 更新: 更新配置且重新渲染\n     */\n    Plot.prototype.update = function (options) {\n        this.updateOption(options);\n        if (options.map && !(0, util_1.isEqual)(this.lastOptions.map, this.options.map)) {\n            this.updateMap(options.map);\n        }\n        if (options.source && !(0, util_1.isEqual)(this.lastOptions.source, this.options.source)) {\n            var _a = options.source, data = _a.data, sourceConfig = (0, tslib_1.__rest)(_a, [\"data\"]);\n            this.changeData(data, sourceConfig);\n        }\n        this.render();\n    };\n    /**\n     * 更新: 更新数据\n     */\n    Plot.prototype.changeData = function (data, cfg) {\n        this.options.source = (0, utils_1.deepAssign)({}, this.options.source, (0, tslib_1.__assign)({ data: data }, cfg));\n        var _a = this.options.source, aggregation = _a.aggregation, sourceCFG = (0, tslib_1.__rest)(_a, [\"aggregation\"]);\n        aggregation && source_1.MappingSource.aggregation(sourceCFG, aggregation);\n        this.source.setData(this.options.source.data, sourceCFG);\n        // 更新 legend\n        if (this.options.legend) {\n            this.updateLegendControl(this.options.legend);\n        }\n    };\n    /**\n     * 默认的 options 配置项\n     */\n    Plot.DefaultOptions = DEFAULT_OPTIONS;\n    /**\n     * 地图图表类型\n     */\n    Plot.PlotType = types_1.PlotType;\n    return Plot;\n}(map_1.Map));\nexports.Plot = Plot;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}