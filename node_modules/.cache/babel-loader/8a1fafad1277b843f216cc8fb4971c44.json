{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _isNumber from \"lodash/isNumber\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { gl } from '@antv/l7-core';\nimport BaseModel from '../../core/BaseModel';\nimport { polygonTriangulation } from '../../core/triangulation';\nvar polygon_frag = \"uniform float u_opacity: 1.0;\\nvarying vec4 v_Color;\\nvarying mat4 styleMappingMat; // \\u4F20\\u9012\\u4ECE\\u7247\\u5143\\u4E2D\\u4F20\\u9012\\u7684\\u6620\\u5C04\\u6570\\u636E\\n\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  float opacity = styleMappingMat[0][0];\\n  gl_FragColor = v_Color;\\n  // gl_FragColor.a *= u_opacity;\\n  gl_FragColor.a *= opacity;\\n  gl_FragColor = filterColor(gl_FragColor);\\n}\\n\";\nvar polygon_vert = \"attribute vec4 a_Color;\\nattribute vec3 a_Position;\\nattribute vec3 a_Normal;\\nattribute float a_Size;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\n\\nvarying vec4 v_Color;\\nuniform float u_opacity: 1.0;\\nvarying mat4 styleMappingMat; // \\u7528\\u4E8E\\u5C06\\u5728\\u9876\\u70B9\\u7740\\u8272\\u5668\\u4E2D\\u8BA1\\u7B97\\u597D\\u7684\\u6837\\u5F0F\\u503C\\u4F20\\u9012\\u7ED9\\u7247\\u5143\\n\\n#pragma include \\\"styleMapping\\\"\\n#pragma include \\\"styleMappingCalOpacity\\\"\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\nstyleMappingMat = mat4(\\n    0.0, 0.0, 0.0, 0.0, // opacity - strokeOpacity - strokeWidth - empty\\n    0.0, 0.0, 0.0, 0.0, // strokeR - strokeG - strokeB - strokeA\\n    0.0, 0.0, 0.0, 0.0, // offsets[0] - offsets[1]\\n    0.0, 0.0, 0.0, 0.0\\n  );\\n\\n  float rowCount = u_cellTypeLayout[0][0];    // \\u5F53\\u524D\\u7684\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u884C\\n  float columnCount = u_cellTypeLayout[0][1]; // \\u5F53\\u770B\\u5230\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u5217\\n  float columnWidth = 1.0/columnCount;  // \\u5217\\u5BBD\\n  float rowHeight = 1.0/rowCount;       // \\u884C\\u9AD8\\n  float cellCount = calCellCount(); // opacity - strokeOpacity - strokeWidth - stroke - offsets\\n  float id = a_vertexId; // \\u7B2Cn\\u4E2A\\u9876\\u70B9\\n  float cellCurrentRow = floor(id * cellCount / columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u884C\\n  float cellCurrentColumn = mod(id * cellCount, columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u5217\\n  \\n  // cell \\u56FA\\u5B9A\\u987A\\u5E8F opacity -> strokeOpacity -> strokeWidth -> stroke ... \\n  // \\u6309\\u987A\\u5E8F\\u4ECE cell \\u4E2D\\u53D6\\u503C\\u3001\\u82E5\\u6CA1\\u6709\\u5219\\u81EA\\u52A8\\u5F80\\u4E0B\\u53D6\\u503C\\n  float textureOffset = 0.0; // \\u5728 cell \\u4E2D\\u53D6\\u503C\\u7684\\u504F\\u79FB\\u91CF\\n\\n  vec2 opacityAndOffset = calOpacityAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\\n  styleMappingMat[0][0] = opacityAndOffset.r;\\n  textureOffset = opacityAndOffset.g;\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n\\n  v_Color = a_Color;\\n  vec4 project_pos = project_position(vec4(a_Position, 1.0));\\n  // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\\n\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n    gl_Position = u_Mvp * (vec4(project_pos.xyz, 1.0));\\n  } else {\\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\\n  }\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\\n\";\n\nvar FillModel = function (_BaseModel) {\n  _inherits(FillModel, _BaseModel);\n\n  var _super = _createSuper(FillModel);\n\n  function FillModel() {\n    _classCallCheck(this, FillModel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FillModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          _ref$opacity = _ref.opacity,\n          opacity = _ref$opacity === void 0 ? 1 : _ref$opacity;\n\n      if (this.dataTextureTest && this.dataTextureNeedUpdate({\n        opacity: opacity\n      })) {\n        this.judgeStyleAttributes({\n          opacity: opacity\n        });\n        var encodeData = this.layer.getEncodedData();\n\n        var _this$calDataFrame = this.calDataFrame(this.cellLength, encodeData, this.cellProperties),\n            data = _this$calDataFrame.data,\n            width = _this$calDataFrame.width,\n            height = _this$calDataFrame.height;\n\n        this.rowCount = height;\n        this.dataTexture = this.cellLength > 0 && data.length > 0 ? this.createTexture2D({\n          flipY: true,\n          data: data,\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: width,\n          height: height\n        }) : this.createTexture2D({\n          flipY: true,\n          data: [1],\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: 1,\n          height: 1\n        });\n      }\n\n      return {\n        u_dataTexture: this.dataTexture,\n        u_cellTypeLayout: this.getCellTypeLayout(),\n        u_opacity: _isNumber(opacity) ? opacity : 1.0\n      };\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      return this.buildModels();\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      return [this.layer.buildLayerModel({\n        moduleName: 'polygon',\n        vertexShader: polygon_vert,\n        fragmentShader: polygon_frag,\n        triangulation: polygonTriangulation,\n        blend: this.getBlend(),\n        depth: {\n          enable: false\n        }\n      })];\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$dataTexture;\n\n      (_this$dataTexture = this.dataTexture) === null || _this$dataTexture === void 0 ? void 0 : _this$dataTexture.destroy();\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {}\n  }]);\n\n  return FillModel;\n}(BaseModel);\n\nexport { FillModel as default };","map":{"version":3,"sources":["../../../src/polygon/models/fill.ts"],"names":["FillModel","BaseModel","opacity","encodeData","data","width","height","flipY","format","gl","type","u_dataTexture","u_cellTypeLayout","u_opacity","moduleName","vertexShader","fragmentShader","triangulation","blend","depth","enable"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,EAAA,QAAA,eAAA;AAaA,OAAA,SAAA,MAAA,sBAAA;AACA,SAAA,oBAAA,QAAA,0BAAA;;;;IAOqBA,S;;;;;;;;;;;;;WACnB,SAAA,YAAA,GAAsB;AACpB,UAAA,IAAA,GAEI,KAAA,KAAA,CAFJ,cAEI,EAFJ;AAAA,UAAA,YAAA,GAAA,IAAA,CAAA,OAAA;AAAA,UACEE,OADF,GAAA,YAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,YAAA;;AAGA,UAAI,KAAA,eAAA,IAAwB,KAAA,qBAAA,CAA2B;AAAEA,QAAAA,OAAO,EAAPA;AAAF,OAA3B,CAA5B,EAAqE;AACnE,aAAA,oBAAA,CAA0B;AAAEA,UAAAA,OAAO,EAAPA;AAAF,SAA1B;AACA,YAAMC,UAAU,GAAG,KAAA,KAAA,CAAnB,cAAmB,EAAnB;;AACA,YAAA,kBAAA,GAAgC,KAAA,YAAA,CAC9B,KAD8B,UAAA,EAAA,UAAA,EAG9B,KAHF,cAAgC,CAAhC;AAAA,YAAQC,IAAR,GAAA,kBAAA,CAAA,IAAA;AAAA,YAAcC,KAAd,GAAA,kBAAA,CAAA,KAAA;AAAA,YAAqBC,MAArB,GAAA,kBAAA,CAAA,MAAA;;AAKA,aAAA,QAAA,GAAA,MAAA;AAEA,aAAA,WAAA,GACE,KAAA,UAAA,GAAA,CAAA,IAAuBF,IAAI,CAAJA,MAAAA,GAAvB,CAAA,GACI,KAAA,eAAA,CAAqB;AACnBG,UAAAA,KAAK,EADc,IAAA;AAEnBH,UAAAA,IAAI,EAFe,IAAA;AAGnBI,UAAAA,MAAM,EAAEC,EAAE,CAHS,SAAA;AAInBC,UAAAA,IAAI,EAAED,EAAE,CAJW,KAAA;AAKnBJ,UAAAA,KAAK,EALc,KAAA;AAMnBC,UAAAA,MAAM,EAANA;AANmB,SAArB,CADJ,GASI,KAAA,eAAA,CAAqB;AACnBC,UAAAA,KAAK,EADc,IAAA;AAEnBH,UAAAA,IAAI,EAAE,CAFa,CAEb,CAFa;AAGnBI,UAAAA,MAAM,EAAEC,EAAE,CAHS,SAAA;AAInBC,UAAAA,IAAI,EAAED,EAAE,CAJW,KAAA;AAKnBJ,UAAAA,KAAK,EALc,CAAA;AAMnBC,UAAAA,MAAM,EAAE;AANW,SAArB,CAVN;AAkBD;;AACD,aAAO;AACLK,QAAAA,aAAa,EAAE,KADV,WAAA;AAELC,QAAAA,gBAAgB,EAAE,KAFb,iBAEa,EAFb;AAILC,QAAAA,SAAS,EAAE,SAAA,CAAA,OAAA,CAAA,GAAA,OAAA,GAA8B;AAJpC,OAAP;AAMD;;;WAED,SAAA,UAAA,GAA8B;AAC5B,aAAO,KAAP,WAAO,EAAP;AACD;;;WAED,SAAA,WAAA,GAA+B;AAC7B,aAAO,CACL,KAAA,KAAA,CAAA,eAAA,CAA2B;AACzBC,QAAAA,UAAU,EADe,SAAA;AAEzBC,QAAAA,YAAY,EAFa,YAAA;AAGzBC,QAAAA,cAAc,EAHW,YAAA;AAIzBC,QAAAA,aAAa,EAJY,oBAAA;AAKzBC,QAAAA,KAAK,EAAE,KALkB,QAKlB,EALkB;AAMzBC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV;AANkB,OAA3B,CADK,CAAP;AAUD;;;WAED,SAAA,WAAA,GAAqB;AAAA,UAAA,iBAAA;;AACnB,OAAA,iBAAA,GAAA,KAAA,WAAA,MAAA,IAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAA,OAAA,EAAA;AACD;;;WAED,SAAA,yBAAA,GAAsC,CAErC;;;;EAjEoCnB,S;;SAAlBD,S","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  ILayer,\n  ILayerModel,\n  ILayerPlugin,\n  IModel,\n  IStyleAttributeService,\n  lazyInject,\n  TYPES,\n} from '@antv/l7-core';\nimport { isNumber } from 'lodash';\nimport BaseModel, { styleSingle } from '../../core/BaseModel';\nimport { polygonTriangulation } from '../../core/triangulation';\nimport polygon_frag from '../shaders/polygon_frag.glsl';\nimport polygon_vert from '../shaders/polygon_vert.glsl';\n\ninterface IPolygonLayerStyleOptions {\n  opacity: styleSingle;\n}\nexport default class FillModel extends BaseModel {\n  public getUninforms() {\n    const {\n      opacity = 1,\n    } = this.layer.getLayerConfig() as IPolygonLayerStyleOptions;\n    if (this.dataTextureTest && this.dataTextureNeedUpdate({ opacity })) {\n      this.judgeStyleAttributes({ opacity });\n      const encodeData = this.layer.getEncodedData();\n      const { data, width, height } = this.calDataFrame(\n        this.cellLength,\n        encodeData,\n        this.cellProperties,\n      );\n      this.rowCount = height; // 当前数据纹理有多少行\n\n      this.dataTexture =\n        this.cellLength > 0 && data.length > 0\n          ? this.createTexture2D({\n              flipY: true,\n              data,\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width,\n              height,\n            })\n          : this.createTexture2D({\n              flipY: true,\n              data: [1],\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width: 1,\n              height: 1,\n            });\n    }\n    return {\n      u_dataTexture: this.dataTexture, // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]\n      u_cellTypeLayout: this.getCellTypeLayout(),\n      // u_opacity: opacity,\n      u_opacity: isNumber(opacity) ? opacity : 1.0,\n    };\n  }\n\n  public initModels(): IModel[] {\n    return this.buildModels();\n  }\n\n  public buildModels(): IModel[] {\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'polygon',\n        vertexShader: polygon_vert,\n        fragmentShader: polygon_frag,\n        triangulation: polygonTriangulation,\n        blend: this.getBlend(),\n        depth: { enable: false },\n      }),\n    ];\n  }\n\n  public clearModels() {\n    this.dataTexture?.destroy();\n  }\n\n  protected registerBuiltinAttributes() {\n    // point layer size;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}