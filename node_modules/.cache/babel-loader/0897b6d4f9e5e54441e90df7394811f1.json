{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _merge from \"lodash/merge\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { TYPES } from '@antv/l7-core';\nimport { bindAll, boundsContains, DOM, padBounds, Satistics } from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\nimport Supercluster from 'supercluster/dist/supercluster';\nimport Marker from './marker';\n\nvar MarkerLayer = function (_EventEmitter) {\n  _inherits(MarkerLayer, _EventEmitter);\n\n  var _super = _createSuper(MarkerLayer);\n\n  function MarkerLayer(option) {\n    var _this$markerLayerOpti;\n\n    var _this;\n\n    _classCallCheck(this, MarkerLayer);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"markers\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"markerLayerOption\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"clusterIndex\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"points\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"clusterMarkers\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"mapsService\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"scene\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"zoom\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"bbox\", void 0);\n\n    _this.markerLayerOption = _merge(_this.getDefault(), option);\n    bindAll(['update'], _assertThisInitialized(_this));\n    _this.zoom = ((_this$markerLayerOpti = _this.markerLayerOption.clusterOption) === null || _this$markerLayerOpti === void 0 ? void 0 : _this$markerLayerOpti.zoom) || -99;\n    return _this;\n  }\n\n  _createClass(MarkerLayer, [{\n    key: \"getDefault\",\n    value: function getDefault() {\n      return {\n        cluster: false,\n        clusterOption: {\n          radius: 80,\n          maxZoom: 20,\n          minZoom: 0,\n          zoom: -99,\n          style: {},\n          className: ''\n        }\n      };\n    }\n  }, {\n    key: \"addTo\",\n    value: function addTo(scene) {\n      this.scene = scene;\n      this.mapsService = scene.get(TYPES.IMapService);\n\n      if (this.markerLayerOption.cluster) {\n        this.initCluster();\n        this.update();\n        this.mapsService.on('camerachange', this.update);\n        this.mapsService.on('viewchange', this.update);\n      }\n\n      this.addMarkers();\n      return this;\n    }\n  }, {\n    key: \"addMarker\",\n    value: function addMarker(marker) {\n      var cluster = this.markerLayerOption.cluster;\n\n      if (cluster) {\n        this.addPoint(marker, this.markers.length);\n      }\n\n      this.markers.push(marker);\n    }\n  }, {\n    key: \"removeMarker\",\n    value: function removeMarker(marker) {\n      this.markers.indexOf(marker);\n      var markerIndex = this.markers.indexOf(marker);\n\n      if (markerIndex > -1) {\n        this.markers.splice(markerIndex, 1);\n      }\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.markers.map(function (m) {\n        m.getElement().style.opacity = '0';\n      });\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.markers.map(function (m) {\n        m.getElement().style.opacity = '1';\n      });\n    }\n  }, {\n    key: \"getMarkers\",\n    value: function getMarkers() {\n      var cluster = this.markerLayerOption.cluster;\n      return cluster ? this.clusterMarkers : this.markers;\n    }\n  }, {\n    key: \"addMarkers\",\n    value: function addMarkers() {\n      var _this2 = this;\n\n      this.getMarkers().forEach(function (marker) {\n        marker.addTo(_this2.scene);\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.markers.forEach(function (marker) {\n        marker.remove();\n      });\n      this.clusterMarkers.forEach(function (clusterMarker) {\n        clusterMarker.remove();\n      });\n      this.mapsService.off('camerachange', this.update);\n      this.markers = [];\n      this.clusterMarkers = [];\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.clear();\n      this.removeAllListeners();\n    }\n  }, {\n    key: \"addPoint\",\n    value: function addPoint(marker, id) {\n      var _marker$getLnglat = marker.getLnglat(),\n          lng = _marker$getLnglat.lng,\n          lat = _marker$getLnglat.lat;\n\n      var feature = {\n        geometry: {\n          type: 'Point',\n          coordinates: [lng, lat]\n        },\n        properties: _objectSpread(_objectSpread({}, marker.getExtData()), {}, {\n          marker_id: id\n        })\n      };\n      this.points.push(feature);\n    }\n  }, {\n    key: \"initCluster\",\n    value: function initCluster() {\n      if (!this.markerLayerOption.cluster) {\n        return;\n      }\n\n      var _ref = this.markerLayerOption.clusterOption,\n          radius = _ref.radius,\n          _ref$minZoom = _ref.minZoom,\n          minZoom = _ref$minZoom === void 0 ? 0 : _ref$minZoom,\n          maxZoom = _ref.maxZoom;\n      this.clusterIndex = new Supercluster({\n        radius: radius,\n        minZoom: minZoom,\n        maxZoom: maxZoom\n      });\n      this.clusterIndex.load(this.points);\n    }\n  }, {\n    key: \"getClusterMarker\",\n    value: function getClusterMarker(viewBounds, zoom) {\n      var _this3 = this;\n\n      var viewBBox = viewBounds[0].concat(viewBounds[1]);\n      var clusterPoint = this.clusterIndex.getClusters(viewBBox, zoom);\n      this.clusterMarkers.forEach(function (marker) {\n        marker.remove();\n      });\n      this.clusterMarkers = [];\n      clusterPoint.forEach(function (feature) {\n        var _feature$properties;\n\n        var _this3$markerLayerOpt = _this3.markerLayerOption.clusterOption,\n            field = _this3$markerLayerOpt.field,\n            method = _this3$markerLayerOpt.method;\n\n        if (feature.properties && (_feature$properties = feature.properties) !== null && _feature$properties !== void 0 && _feature$properties.cluster_id) {\n          var _feature$properties2;\n\n          var clusterData = _this3.getLeaves((_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.cluster_id);\n\n          feature.properties.clusterData = clusterData;\n\n          if (field && method) {\n            var columnData = clusterData === null || clusterData === void 0 ? void 0 : clusterData.map(function (item) {\n              var data = _defineProperty({}, field, item.properties[field]);\n\n              return data;\n            });\n            var column = Satistics.getColumn(columnData, field);\n            var stat = Satistics.getSatByColumn(method, column);\n            var fieldName = 'point_' + method;\n            feature.properties[fieldName] = stat.toFixed(2);\n          }\n        }\n\n        var marker = _this3.clusterMarker(feature);\n\n        _this3.clusterMarkers.push(marker);\n\n        marker.addTo(_this3.scene);\n      });\n    }\n  }, {\n    key: \"getLeaves\",\n    value: function getLeaves(clusterId) {\n      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      if (!clusterId) {\n        return null;\n      }\n\n      return this.clusterIndex.getLeaves(clusterId, limit, offset);\n    }\n  }, {\n    key: \"clusterMarker\",\n    value: function clusterMarker(feature) {\n      var clusterOption = this.markerLayerOption.clusterOption;\n      var _ref2 = clusterOption,\n          _ref2$element = _ref2.element,\n          element = _ref2$element === void 0 ? this.generateElement.bind(this) : _ref2$element;\n      var marker = new Marker({\n        element: element(feature)\n      }).setLnglat({\n        lng: feature.geometry.coordinates[0],\n        lat: feature.geometry.coordinates[1]\n      });\n      return marker;\n    }\n  }, {\n    key: \"normalMarker\",\n    value: function normalMarker(feature) {\n      var marker_id = feature.properties.marker_id;\n      return this.markers[marker_id];\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var zoom = this.mapsService.getZoom();\n      var bbox = this.mapsService.getBounds();\n\n      if (!this.bbox || Math.abs(zoom - this.zoom) >= 1 || !boundsContains(this.bbox, bbox)) {\n        this.bbox = padBounds(bbox, 0.5);\n        this.zoom = Math.floor(zoom);\n        this.getClusterMarker(this.bbox, this.zoom);\n      }\n    }\n  }, {\n    key: \"generateElement\",\n    value: function generateElement(feature) {\n      var el = DOM.create('div', 'l7-marker-cluster');\n      var label = DOM.create('div', '', el);\n      var span = DOM.create('span', '', label);\n      var _this$markerLayerOpti2 = this.markerLayerOption.clusterOption,\n          field = _this$markerLayerOpti2.field,\n          method = _this$markerLayerOpti2.method;\n      feature.properties.point_count = feature.properties.point_count || 1;\n      var text = field && method ? feature.properties['point_' + method] || feature.properties[field] : feature.properties.point_count;\n      span.textContent = text;\n      return el;\n    }\n  }]);\n\n  return MarkerLayer;\n}(EventEmitter);\n\nexport { MarkerLayer as default };","map":{"version":3,"sources":["../src/markerlayer.ts"],"names":["MarkerLayer","EventEmitter","bindAll","cluster","clusterOption","radius","maxZoom","minZoom","zoom","style","className","scene","TYPES","markerIndex","m","marker","clusterMarker","lng","lat","feature","geometry","type","coordinates","properties","marker_id","id","viewBBox","viewBounds","clusterPoint","field","method","clusterData","columnData","data","item","column","Satistics","stat","fieldName","limit","Infinity","offset","element","bbox","Math","boundsContains","padBounds","el","DOM","label","span","text"],"mappings":"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","sourcesContent":["import { IMapService, IMarker, TYPES } from '@antv/l7-core';\nimport {\n  bindAll,\n  boundsContains,\n  DOM,\n  IBounds,\n  padBounds,\n  Satistics,\n} from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\nimport { Container } from 'inversify';\nimport { merge } from 'lodash';\n// @ts-ignore\n// tslint:disable-next-line:no-submodule-imports\nimport Supercluster from 'supercluster/dist/supercluster';\nimport Marker from './marker';\ntype CallBack = (...args: any[]) => any;\ninterface IMarkerStyleOption {\n  element?: CallBack;\n  style: { [key: string]: any } | CallBack;\n  className: string;\n  field?: string;\n  method?: 'sum' | 'max' | 'min' | 'mean';\n  radius: number;\n  maxZoom: number;\n  minZoom: number;\n  zoom: number;\n}\n\ninterface IMarkerLayerOption {\n  cluster: boolean;\n  clusterOption: Partial<IMarkerStyleOption>;\n}\n\ninterface IPointFeature {\n  geometry: {\n    type: 'Point';\n    coordinates: [number, number];\n  };\n  properties: any;\n}\nexport default class MarkerLayer extends EventEmitter {\n  private markers: IMarker[] = [];\n  private markerLayerOption: IMarkerLayerOption;\n  private clusterIndex: Supercluster;\n  private points: IPointFeature[] = [];\n  private clusterMarkers: IMarker[] = [];\n  private mapsService: IMapService<unknown>;\n  private scene: Container;\n  private zoom: number;\n  private bbox: IBounds;\n\n  constructor(option?: Partial<IMarkerLayerOption>) {\n    super();\n    this.markerLayerOption = merge(this.getDefault(), option);\n    bindAll(['update'], this);\n    this.zoom = this.markerLayerOption.clusterOption?.zoom || -99;\n  }\n  public getDefault() {\n    return {\n      cluster: false,\n      clusterOption: {\n        radius: 80,\n        maxZoom: 20,\n        minZoom: 0,\n        zoom: -99,\n        style: {},\n        className: '',\n      },\n    };\n  }\n  public addTo(scene: Container) {\n    // this.remove();\n    this.scene = scene;\n    this.mapsService = scene.get<IMapService>(TYPES.IMapService);\n    if (this.markerLayerOption.cluster) {\n      this.initCluster();\n      this.update();\n      // 地图视野变化时，重新计算视野内的聚合点。\n      this.mapsService.on('camerachange', this.update); // amap1.x 更新事件\n      this.mapsService.on('viewchange', this.update); // amap2.0 更新事件\n    }\n    this.addMarkers();\n    return this;\n  }\n  public addMarker(marker: IMarker) {\n    const cluster = this.markerLayerOption.cluster;\n    if (cluster) {\n      this.addPoint(marker, this.markers.length);\n    }\n    this.markers.push(marker);\n  }\n\n  public removeMarker(marker: IMarker) {\n    this.markers.indexOf(marker);\n    const markerIndex = this.markers.indexOf(marker);\n    if (markerIndex > -1) {\n      this.markers.splice(markerIndex, 1);\n    }\n  }\n\n  /**\n   * 隐藏 marker 在每个 marker 上单独修改属性而不是在 markerContainer 上修改（在 markerContainer 修改会有用户在场景加载完之前调用失败的问题）\n   */\n  public hide() {\n    this.markers.map((m) => {\n      m.getElement().style.opacity = '0';\n    });\n  }\n\n  /**\n   * 显示 marker\n   */\n  public show() {\n    this.markers.map((m) => {\n      m.getElement().style.opacity = '1';\n    });\n  }\n\n  public getMarkers() {\n    const cluster = this.markerLayerOption.cluster;\n    return cluster ? this.clusterMarkers : this.markers;\n  }\n\n  public addMarkers() {\n    this.getMarkers().forEach((marker: IMarker) => {\n      marker.addTo(this.scene);\n    });\n  }\n  public clear() {\n    this.markers.forEach((marker: IMarker) => {\n      marker.remove();\n    });\n    this.clusterMarkers.forEach((clusterMarker: IMarker) => {\n      clusterMarker.remove();\n    });\n    this.mapsService.off('camerachange', this.update);\n    this.markers = [];\n    this.clusterMarkers = [];\n  }\n\n  public destroy() {\n    this.clear();\n    this.removeAllListeners();\n  }\n\n  private addPoint(marker: IMarker, id: number) {\n    const { lng, lat } = marker.getLnglat();\n    const feature: IPointFeature = {\n      geometry: {\n        type: 'Point',\n        coordinates: [lng, lat],\n      },\n      properties: {\n        ...marker.getExtData(),\n        marker_id: id,\n      },\n    };\n    this.points.push(feature);\n  }\n\n  private initCluster() {\n    if (!this.markerLayerOption.cluster) {\n      return;\n    }\n    const { radius, minZoom = 0, maxZoom } = this.markerLayerOption\n      .clusterOption as IMarkerStyleOption;\n    this.clusterIndex = new Supercluster({\n      radius,\n      minZoom,\n      maxZoom,\n    });\n    // @ts-ignore\n    this.clusterIndex.load(this.points);\n  }\n\n  private getClusterMarker(viewBounds: IBounds, zoom: number) {\n    const viewBBox = viewBounds[0].concat(viewBounds[1]);\n    const clusterPoint = this.clusterIndex.getClusters(viewBBox, zoom);\n    this.clusterMarkers.forEach((marker: IMarker) => {\n      marker.remove();\n    });\n    this.clusterMarkers = [];\n    clusterPoint.forEach((feature: any) => {\n      const { field, method } = this.markerLayerOption.clusterOption;\n      // 处理聚合数据\n      if (feature.properties && feature.properties?.cluster_id) {\n        const clusterData = this.getLeaves(feature.properties?.cluster_id);\n        feature.properties.clusterData = clusterData;\n        if (field && method) {\n          const columnData = clusterData?.map((item: any) => {\n            const data = {\n              [field]: item.properties[field],\n            };\n            return data;\n          });\n          const column = Satistics.getColumn(columnData as any, field);\n          const stat = Satistics.getSatByColumn(method, column);\n          const fieldName = 'point_' + method;\n          feature.properties[fieldName] = stat.toFixed(2);\n        }\n      }\n      const marker = this.clusterMarker(feature);\n      this.clusterMarkers.push(marker);\n      marker.addTo(this.scene);\n    });\n  }\n  private getLeaves(\n    clusterId: number,\n    limit: number = Infinity,\n    offset: number = 0,\n  ) {\n    if (!clusterId) {\n      return null;\n    }\n    return this.clusterIndex.getLeaves(clusterId, limit, offset);\n  }\n  private clusterMarker(feature: any) {\n    const clusterOption = this.markerLayerOption.clusterOption;\n\n    const {\n      element = this.generateElement.bind(this),\n    } = clusterOption as IMarkerStyleOption;\n    const marker = new Marker({\n      element: element(feature),\n    }).setLnglat({\n      lng: feature.geometry.coordinates[0],\n      lat: feature.geometry.coordinates[1],\n    });\n    return marker;\n  }\n  private normalMarker(feature: any) {\n    const marker_id = feature.properties.marker_id;\n    return this.markers[marker_id];\n  }\n\n  private update() {\n    const zoom = this.mapsService.getZoom();\n    const bbox = this.mapsService.getBounds();\n    if (\n      !this.bbox ||\n      Math.abs(zoom - this.zoom) >= 1 ||\n      !boundsContains(this.bbox, bbox)\n    ) {\n      this.bbox = padBounds(bbox, 0.5);\n      this.zoom = Math.floor(zoom);\n      this.getClusterMarker(this.bbox, this.zoom);\n    }\n  }\n\n  private generateElement(feature: any) {\n    const el = DOM.create('div', 'l7-marker-cluster');\n    const label = DOM.create('div', '', el);\n    const span = DOM.create('span', '', label);\n    const { field, method } = this.markerLayerOption.clusterOption;\n    feature.properties.point_count = feature.properties.point_count || 1;\n\n    const text =\n      field && method\n        ? feature.properties['point_' + method] || feature.properties[field]\n        : feature.properties.point_count;\n    span.textContent = text;\n    return el;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}