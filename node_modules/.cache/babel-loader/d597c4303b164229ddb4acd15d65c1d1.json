{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGroupCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { XFlowNodeCommands } from '../constant';\nexport var NsDelGroup;\n\n(function (NsDelGroup) {\n  /** Command: 用于注册named factory */\n  NsDelGroup.command = XFlowGroupCommands.DEL_GROUP;\n  /** hookName */\n\n  NsDelGroup.hookKey = 'delGroup';\n})(NsDelGroup || (NsDelGroup = {}));\n\nlet DelGroupCommand =\n/** 创建节点命令 */\nclass DelGroupCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      const result = yield hooks.delGroup.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const graph = yield ctx.getX6Graph();\n        const {\n          nodeConfig,\n          commandService,\n          deleteService: deleteGroupService\n        } = handlerArgs;\n        const {\n          id\n        } = nodeConfig;\n        const node = graph.getCellById(id);\n\n        if (deleteGroupService) {\n          const canDel = yield deleteGroupService(handlerArgs);\n          if (!canDel) return {\n            err: 'service rejected'\n          };\n        }\n\n        if (!node) {\n          return {\n            err: 'target node is not exist'\n          };\n        } // 不是Group的节点不能解散\n\n\n        if (node.getProp('isGroup') !== true) {\n          return {\n            err: 'target node is not group'\n          };\n        }\n\n        const {\n          isCollapsed\n        } = node.getData();\n\n        if (isCollapsed) {\n          yield commandService.executeCommand(XFlowGroupCommands.COLLAPSE_GROUP.id, {\n            nodeId: node.id,\n            isCollapsed: false,\n            collapsedSize: {\n              width: 0,\n              height: 0\n            }\n          });\n        }\n\n        const childrens = node.getChildren();\n\n        if (childrens) {\n          childrens.forEach(child => {\n            node.unembed(child);\n            child.prop('group', '');\n            child.setData(Object.assign(Object.assign({}, child.getData()), {\n              group: ''\n            }));\n          });\n        }\n\n        yield commandService.executeCommand(XFlowNodeCommands.DEL_NODE.id, {\n          nodeConfig\n        });\n        /** add undo: delete node */\n\n        ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n          commandService.executeCommand(XFlowGroupCommands.ADD_GROUP.id, {\n            nodeConfig\n          });\n        })));\n        return {\n          err: null\n        };\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], DelGroupCommand.prototype, \"contextProvider\", void 0);\n\nDelGroupCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsDelGroup.command.id\n  }\n})\n/** 创建节点命令 */\n], DelGroupCommand);\nexport { DelGroupCommand };","map":{"version":3,"sources":["../../../src/command-contributions/group/group-del.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGroupCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { XFlowNodeCommands } from '../constant';\nexport var NsDelGroup;\n(function (NsDelGroup) {\n    /** Command: 用于注册named factory */\n    NsDelGroup.command = XFlowGroupCommands.DEL_GROUP;\n    /** hookName */\n    NsDelGroup.hookKey = 'delGroup';\n})(NsDelGroup || (NsDelGroup = {}));\nlet DelGroupCommand = \n/** 创建节点命令 */\nclass DelGroupCommand {\n    constructor() {\n        /** 执行Cmd */\n        this.execute = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            const { args, hooks: runtimeHook } = ctx.getArgs();\n            const hooks = ctx.getHooks();\n            const result = yield hooks.delGroup.call(args, (handlerArgs) => __awaiter(this, void 0, void 0, function* () {\n                const graph = yield ctx.getX6Graph();\n                const { nodeConfig, commandService, deleteService: deleteGroupService } = handlerArgs;\n                const { id } = nodeConfig;\n                const node = graph.getCellById(id);\n                if (deleteGroupService) {\n                    const canDel = yield deleteGroupService(handlerArgs);\n                    if (!canDel)\n                        return { err: 'service rejected' };\n                }\n                if (!node) {\n                    return { err: 'target node is not exist' };\n                }\n                // 不是Group的节点不能解散\n                if (node.getProp('isGroup') !== true) {\n                    return { err: 'target node is not group' };\n                }\n                const { isCollapsed } = node.getData();\n                if (isCollapsed) {\n                    yield commandService.executeCommand(XFlowGroupCommands.COLLAPSE_GROUP.id, {\n                        nodeId: node.id,\n                        isCollapsed: false,\n                        collapsedSize: { width: 0, height: 0 },\n                    });\n                }\n                const childrens = node.getChildren();\n                if (childrens) {\n                    childrens.forEach(child => {\n                        node.unembed(child);\n                        child.prop('group', '');\n                        child.setData(Object.assign(Object.assign({}, child.getData()), { group: '' }));\n                    });\n                }\n                yield commandService.executeCommand(XFlowNodeCommands.DEL_NODE.id, {\n                    nodeConfig,\n                });\n                /** add undo: delete node */\n                ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n                    commandService.executeCommand(XFlowGroupCommands.ADD_GROUP.id, {\n                        nodeConfig,\n                    });\n                })));\n                return { err: null };\n            }), runtimeHook);\n            ctx.setResult(result);\n            return this;\n        });\n        /** undo cmd */\n        this.undo = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            if (this.isUndoable()) {\n                ctx.undo();\n            }\n            return this;\n        });\n        /** redo cmd */\n        this.redo = () => __awaiter(this, void 0, void 0, function* () {\n            if (!this.isUndoable()) {\n                yield this.execute();\n            }\n            return this;\n        });\n    }\n    isUndoable() {\n        const ctx = this.contextProvider();\n        return ctx.isUndoable();\n    }\n};\n__decorate([\n    inject(ICommandContextProvider),\n    __metadata(\"design:type\", Object)\n], DelGroupCommand.prototype, \"contextProvider\", void 0);\nDelGroupCommand = __decorate([\n    injectable({\n        token: { token: ICommandHandler, named: NsDelGroup.command.id },\n    })\n    /** 创建节点命令 */\n], DelGroupCommand);\nexport { DelGroupCommand };\n//# sourceMappingURL=group-del.js.map"]},"metadata":{},"sourceType":"module"}