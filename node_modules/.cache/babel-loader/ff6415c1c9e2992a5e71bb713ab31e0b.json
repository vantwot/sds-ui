{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar tslib_1 = require(\"tslib\");\n\nvar base_1 = require(\"./base\");\n\nvar crs_1 = require(\"./geo/crs\");\n\nvar lng_lat_1 = require(\"./geo/geometry/lng-lat\");\n\nvar point_1 = require(\"./geo/geometry/point\");\n\nvar Geo =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Geo, _super);\n\n  function Geo(cfg) {\n    var _this = _super.call(this, tslib_1.__assign({\n      projection: 'EPSG3857',\n      zoom: 7,\n      mapCenter: [116.400146, 39.926588]\n    }, cfg)) || this;\n\n    _this.type = 'geo';\n    _this.isGeo = true;\n    cfg.center ? _this.center = cfg.center : _this.center = _this.mapCenter;\n\n    _this._init();\n\n    return _this;\n  }\n\n  Geo.prototype._init = function () {\n    var start = this.start;\n    var end = this.end;\n    this.center = lng_lat_1.toLngLat(this.center);\n    this.width = Math.abs(end.x - start.x);\n    this.height = Math.abs(end.y - start.y);\n    this.crs = crs_1.getCRS(this.projection);\n  };\n\n  Geo.prototype.getZoom = function () {\n    return this.zoom;\n  };\n\n  Geo.prototype.setZoom = function (zoom) {\n    this.zoom = zoom;\n  };\n\n  Geo.prototype.setCenter = function (center) {\n    this.center = lng_lat_1.toLngLat(center);\n  };\n\n  Geo.prototype.getCenter = function () {\n    return this.center;\n  };\n  /**\n   * 经纬度坐标转画布坐标 统一和其他坐标系传入方式 coordControls使用\n   * @param point\n   */\n\n\n  Geo.prototype.convertPoint = function (point) {\n    var lngLat = [point.x, point.y];\n    var ll = this.project(lng_lat_1.toLngLat(lngLat), this.zoom).round();\n    var origin = this.getPixelOrigin();\n    var resPoint = ll.subtract(origin);\n    return {\n      x: resPoint.x,\n      y: resPoint.y\n    };\n  };\n  /**\n   * 画布坐标转经纬坐标 统一和其他坐标系传入方式\n   * @param point\n   */\n\n\n  Geo.prototype.invertPoint = function (point) {\n    var newPoint = point_1.toPoint(point);\n    var origin = this.getPixelOrigin();\n    var px = newPoint.add(origin);\n    var lnglat = this.unproject(px, this.zoom);\n    return {\n      x: lnglat.lng,\n      y: lnglat.lat\n    };\n  };\n  /**\n  * 画布坐标转经纬坐标 同convertPoint 对用户使用\n  * @param point\n  */\n\n\n  Geo.prototype.layerPointToLatLng = function (point) {\n    var origin = this.getPixelOrigin();\n    var ll = point.add(origin);\n    return this.unproject(ll, this.zoom);\n  };\n  /**\n  * 经纬度坐标转画布坐标 同 invertPoint 对用户使用\n  * @param lngLat\n  */\n\n\n  Geo.prototype.latLngToLayerPoint = function (lngLat) {\n    var ll = this.project(lng_lat_1.toLngLat(lngLat), this.zoom).round();\n    var origin = this.getPixelOrigin();\n    return ll.subtract(origin);\n  }; // 计算地图中心点像素坐标\n\n\n  Geo.prototype.getPixelOrigin = function () {\n    var halfWidth = this.width / 2;\n    var halfHeight = this.height / 2;\n    return this.crs.lngLatToPoint(lng_lat_1.toLngLat(this.center), this.zoom).subtract({\n      y: halfHeight,\n      x: halfWidth\n    });\n  };\n  /**\n   * 经纬度坐标转地图像素坐标\n   * @param lnglat\n   * @param zoom\n   */\n\n\n  Geo.prototype.project = function (lnglat, zoom) {\n    var newZoom = zoom === undefined ? this.zoom : zoom;\n    return this.crs.lngLatToPoint(lng_lat_1.toLngLat(lnglat), newZoom);\n  };\n  /**\n   * 地图像素坐标转经纬度\n   * @param point\n   * @param zoom\n   */\n\n\n  Geo.prototype.unproject = function (point, zoom) {\n    var newZoom = zoom === undefined ? this.zoom : zoom;\n    return this.crs.pointToLngLat(point_1.toPoint(point), newZoom);\n  };\n\n  Geo.prototype.distance = function (lnglat1, lnglat2) {\n    return this.crs.distance(lng_lat_1.toLngLat(lnglat1), lng_lat_1.toLngLat(lnglat2));\n  };\n\n  return Geo;\n}(base_1[\"default\"]);\n\nexports[\"default\"] = Geo;","map":{"version":3,"sources":["../src/geo.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAGA,IAAA,GAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAiC,EAAA,OAAA,CAAA,SAAA,CAAA,GAAA,EAAA,MAAA;;AAI/B,WAAA,GAAA,CAAY,GAAZ,EAAyB;AAAzB,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,OAAA,CAAA,QAAA,CAAA;AACE,MAAA,UAAU,EAAC,UADb;AAEE,MAAA,IAAI,EAAC,CAFP;AAGE,MAAA,SAAS,EAAC,CAAC,UAAD,EAAa,SAAb;AAHZ,KAAA,EAIK,GAJL,CAAA,KAKE,IANJ;;AAFA,IAAA,KAAA,CAAA,IAAA,GAAc,KAAd;AACA,IAAA,KAAA,CAAA,KAAA,GAAgB,IAAhB;AAQE,IAAA,GAAG,CAAC,MAAJ,GAAa,KAAI,CAAC,MAAL,GAAc,GAAG,CAAC,MAA/B,GAAwC,KAAI,CAAC,MAAL,GAAc,KAAI,CAAC,SAA3D;;AACA,IAAA,KAAI,CAAC,KAAL;;;AACD;;AACD,EAAA,GAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,QAAM,KAAK,GAAgB,KAAK,KAAhC;AACA,QAAM,GAAG,GAAgB,KAAK,GAA9B;AACA,SAAK,MAAL,GAAc,SAAA,CAAA,QAAA,CAAS,KAAK,MAAd,CAAd;AACA,SAAK,KAAL,GAAa,IAAI,CAAC,GAAL,CAAS,GAAG,CAAC,CAAJ,GAAQ,KAAK,CAAC,CAAvB,CAAb;AACA,SAAK,MAAL,GAAc,IAAI,CAAC,GAAL,CAAS,GAAG,CAAC,CAAJ,GAAQ,KAAK,CAAC,CAAvB,CAAd;AACA,SAAK,GAAL,GAAW,KAAA,CAAA,MAAA,CAAO,KAAK,UAAZ,CAAX;AAED,GARD;;AASA,EAAA,GAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,WAAO,KAAK,IAAZ;AACD,GAFD;;AAGA,EAAA,GAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,IAAR,EAAoB;AAClB,SAAK,IAAL,GAAY,IAAZ;AACD,GAFD;;AAGA,EAAA,GAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,MAAV,EAAkC;AAChC,SAAK,MAAL,GAAc,SAAA,CAAA,QAAA,CAAS,MAAT,CAAd;AACD,GAFD;;AAGA,EAAA,GAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACE,WAAO,KAAK,MAAZ;AACD,GAFD;AAGA;;;AAGG;;;AACH,EAAA,GAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,KAAb,EAA4B;AAC1B,QAAM,MAAM,GAAqB,CAAE,KAAK,CAAC,CAAR,EAAW,KAAK,CAAC,CAAjB,CAAjC;AACA,QAAM,EAAE,GAAG,KAAK,OAAL,CAAa,SAAA,CAAA,QAAA,CAAS,MAAT,CAAb,EAA+B,KAAK,IAApC,EAA0C,KAA1C,EAAX;AACA,QAAM,MAAM,GAAG,KAAK,cAAL,EAAf;AACA,QAAM,QAAQ,GAAG,EAAE,CAAC,QAAH,CAAY,MAAZ,CAAjB;AACA,WAAO;AAAE,MAAA,CAAC,EAAC,QAAQ,CAAC,CAAb;AAAgB,MAAA,CAAC,EAAE,QAAQ,CAAC;AAA5B,KAAP;AACD,GAND;AAOA;;;AAGG;;;AACH,EAAA,GAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,KAAZ,EAA4B;AAC1B,QAAM,QAAQ,GAAG,OAAA,CAAA,OAAA,CAAQ,KAAR,CAAjB;AACA,QAAM,MAAM,GAAG,KAAK,cAAL,EAAf;AACA,QAAM,EAAE,GAAG,QAAQ,CAAC,GAAT,CAAa,MAAb,CAAX;AACA,QAAM,MAAM,GAAG,KAAK,SAAL,CAAe,EAAf,EAAmB,KAAK,IAAxB,CAAf;AACA,WAAQ;AAAE,MAAA,CAAC,EAAC,MAAM,CAAC,GAAX;AAAgB,MAAA,CAAC,EAAE,MAAM,CAAC;AAA1B,KAAR;AACD,GAND;AAOC;;;AAGE;;;AACH,EAAA,GAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,KAAnB,EAA+B;AAC7B,QAAM,MAAM,GAAG,KAAK,cAAL,EAAf;AACA,QAAM,EAAE,GAAG,KAAK,CAAC,GAAN,CAAU,MAAV,CAAX;AACA,WAAO,KAAK,SAAL,CAAe,EAAf,EAAmB,KAAK,IAAxB,CAAP;AACD,GAJD;AAKC;;;AAGE;;;AACH,EAAA,GAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,MAAnB,EAA2C;AACzC,QAAM,EAAE,GAAG,KAAK,OAAL,CAAa,SAAA,CAAA,QAAA,CAAS,MAAT,CAAb,EAA+B,KAAK,IAApC,EAA0C,KAA1C,EAAX;AACA,QAAM,MAAM,GAAG,KAAK,cAAL,EAAf;AACA,WAAO,EAAE,CAAC,QAAH,CAAY,MAAZ,CAAP;AACD,GAJD,CAtEF,CA2EE;;;AACA,EAAA,GAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACE,QAAM,SAAS,GAAG,KAAK,KAAL,GAAa,CAA/B;AACA,QAAM,UAAU,GAAG,KAAK,MAAL,GAAc,CAAjC;AACA,WAAO,KAAK,GAAL,CACJ,aADI,CACU,SAAA,CAAA,QAAA,CAAS,KAAK,MAAd,CADV,EACiC,KAAK,IADtC,EAEJ,QAFI,CAEK;AAAE,MAAA,CAAC,EAAE,UAAL;AAAiB,MAAA,CAAC,EAAE;AAApB,KAFL,CAAP;AAGD,GAND;AAOA;;;;AAIG;;;AACH,EAAA,GAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,MAAR,EAAkC,IAAlC,EAA+C;AAC7C,QAAM,OAAO,GAAG,IAAI,KAAK,SAAT,GAAqB,KAAK,IAA1B,GAAiC,IAAjD;AACA,WAAO,KAAK,GAAL,CAAS,aAAT,CAAuB,SAAA,CAAA,QAAA,CAAS,MAAT,CAAvB,EAAyC,OAAzC,CAAP;AACD,GAHD;AAIA;;;;AAIG;;;AACH,EAAA,GAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,KAAV,EAAwB,IAAxB,EAAqC;AACnC,QAAM,OAAO,GAAG,IAAI,KAAK,SAAT,GAAqB,KAAK,IAA1B,GAAiC,IAAjD;AACA,WAAO,KAAK,GAAL,CAAS,aAAT,CAAuB,OAAA,CAAA,OAAA,CAAQ,KAAR,CAAvB,EAAuC,OAAvC,CAAP;AACD,GAHD;;AAIA,EAAA,GAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,OAAT,EAAoC,OAApC,EAA6D;AAC3D,WAAO,KAAK,GAAL,CAAS,QAAT,CAAkB,SAAA,CAAA,QAAA,CAAS,OAAT,CAAlB,EAAqC,SAAA,CAAA,QAAA,CAAS,OAAT,CAArC,CAAP;AACD,GAFD;;AAGF,SAAA,GAAA;AAAC,CAxGD,CAAiC,MAAA,CAAA,SAAA,CAAjC,CAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar tslib_1 = require(\"tslib\");\nvar base_1 = require(\"./base\");\nvar crs_1 = require(\"./geo/crs\");\nvar lng_lat_1 = require(\"./geo/geometry/lng-lat\");\nvar point_1 = require(\"./geo/geometry/point\");\nvar Geo = /** @class */ (function (_super) {\n    tslib_1.__extends(Geo, _super);\n    function Geo(cfg) {\n        var _this = _super.call(this, tslib_1.__assign({ projection: 'EPSG3857', zoom: 7, mapCenter: [116.400146, 39.926588] }, cfg)) || this;\n        _this.type = 'geo';\n        _this.isGeo = true;\n        cfg.center ? _this.center = cfg.center : _this.center = _this.mapCenter;\n        _this._init();\n        return _this;\n    }\n    Geo.prototype._init = function () {\n        var start = this.start;\n        var end = this.end;\n        this.center = lng_lat_1.toLngLat(this.center);\n        this.width = Math.abs(end.x - start.x);\n        this.height = Math.abs(end.y - start.y);\n        this.crs = crs_1.getCRS(this.projection);\n    };\n    Geo.prototype.getZoom = function () {\n        return this.zoom;\n    };\n    Geo.prototype.setZoom = function (zoom) {\n        this.zoom = zoom;\n    };\n    Geo.prototype.setCenter = function (center) {\n        this.center = lng_lat_1.toLngLat(center);\n    };\n    Geo.prototype.getCenter = function () {\n        return this.center;\n    };\n    /**\n     * 经纬度坐标转画布坐标 统一和其他坐标系传入方式 coordControls使用\n     * @param point\n     */\n    Geo.prototype.convertPoint = function (point) {\n        var lngLat = [point.x, point.y];\n        var ll = this.project(lng_lat_1.toLngLat(lngLat), this.zoom).round();\n        var origin = this.getPixelOrigin();\n        var resPoint = ll.subtract(origin);\n        return { x: resPoint.x, y: resPoint.y };\n    };\n    /**\n     * 画布坐标转经纬坐标 统一和其他坐标系传入方式\n     * @param point\n     */\n    Geo.prototype.invertPoint = function (point) {\n        var newPoint = point_1.toPoint(point);\n        var origin = this.getPixelOrigin();\n        var px = newPoint.add(origin);\n        var lnglat = this.unproject(px, this.zoom);\n        return { x: lnglat.lng, y: lnglat.lat };\n    };\n    /**\n    * 画布坐标转经纬坐标 同convertPoint 对用户使用\n    * @param point\n    */\n    Geo.prototype.layerPointToLatLng = function (point) {\n        var origin = this.getPixelOrigin();\n        var ll = point.add(origin);\n        return this.unproject(ll, this.zoom);\n    };\n    /**\n    * 经纬度坐标转画布坐标 同 invertPoint 对用户使用\n    * @param lngLat\n    */\n    Geo.prototype.latLngToLayerPoint = function (lngLat) {\n        var ll = this.project(lng_lat_1.toLngLat(lngLat), this.zoom).round();\n        var origin = this.getPixelOrigin();\n        return ll.subtract(origin);\n    };\n    // 计算地图中心点像素坐标\n    Geo.prototype.getPixelOrigin = function () {\n        var halfWidth = this.width / 2;\n        var halfHeight = this.height / 2;\n        return this.crs\n            .lngLatToPoint(lng_lat_1.toLngLat(this.center), this.zoom)\n            .subtract({ y: halfHeight, x: halfWidth });\n    };\n    /**\n     * 经纬度坐标转地图像素坐标\n     * @param lnglat\n     * @param zoom\n     */\n    Geo.prototype.project = function (lnglat, zoom) {\n        var newZoom = zoom === undefined ? this.zoom : zoom;\n        return this.crs.lngLatToPoint(lng_lat_1.toLngLat(lnglat), newZoom);\n    };\n    /**\n     * 地图像素坐标转经纬度\n     * @param point\n     * @param zoom\n     */\n    Geo.prototype.unproject = function (point, zoom) {\n        var newZoom = zoom === undefined ? this.zoom : zoom;\n        return this.crs.pointToLngLat(point_1.toPoint(point), newZoom);\n    };\n    Geo.prototype.distance = function (lnglat1, lnglat2) {\n        return this.crs.distance(lng_lat_1.toLngLat(lnglat1), lng_lat_1.toLngLat(lnglat2));\n    };\n    return Geo;\n}(base_1[\"default\"]));\nexports[\"default\"] = Geo;\n//# sourceMappingURL=geo.js.map"]},"metadata":{},"sourceType":"script"}