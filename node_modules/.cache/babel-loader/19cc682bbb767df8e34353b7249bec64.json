{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _adjacentMatrix = _interopRequireDefault(require(\"./adjacent-matrix\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar floydWarshall = function floydWarshall(graphData, directed) {\n  var adjacentMatrix = (0, _adjacentMatrix.default)(graphData, directed);\n  var dist = [];\n  var size = adjacentMatrix.length;\n\n  for (var i = 0; i < size; i += 1) {\n    dist[i] = [];\n\n    for (var j = 0; j < size; j += 1) {\n      if (i === j) {\n        dist[i][j] = 0;\n      } else if (adjacentMatrix[i][j] === 0 || !adjacentMatrix[i][j]) {\n        dist[i][j] = Infinity;\n      } else {\n        dist[i][j] = adjacentMatrix[i][j];\n      }\n    }\n  } // floyd\n\n\n  for (var k = 0; k < size; k += 1) {\n    for (var i = 0; i < size; i += 1) {\n      for (var j = 0; j < size; j += 1) {\n        if (dist[i][j] > dist[i][k] + dist[k][j]) {\n          dist[i][j] = dist[i][k] + dist[k][j];\n        }\n      }\n    }\n  }\n\n  return dist;\n};\n\nvar _default = floydWarshall;\nexports.default = _default;","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/@antv/algorithm/lib/floydWarshall.js"],"names":["Object","defineProperty","exports","value","default","_adjacentMatrix","_interopRequireDefault","require","obj","__esModule","floydWarshall","graphData","directed","adjacentMatrix","dist","size","length","i","j","Infinity","k","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,eAAe,GAAGC,sBAAsB,CAACC,OAAO,CAAC,mBAAD,CAAR,CAA5C;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEJ,IAAAA,OAAO,EAAEI;AAAX,GAArC;AAAwD;;AAE/F,IAAIE,aAAa,GAAG,SAASA,aAAT,CAAuBC,SAAvB,EAAkCC,QAAlC,EAA4C;AAC9D,MAAIC,cAAc,GAAG,CAAC,GAAGR,eAAe,CAACD,OAApB,EAA6BO,SAA7B,EAAwCC,QAAxC,CAArB;AACA,MAAIE,IAAI,GAAG,EAAX;AACA,MAAIC,IAAI,GAAGF,cAAc,CAACG,MAA1B;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAApB,EAA0BE,CAAC,IAAI,CAA/B,EAAkC;AAChCH,IAAAA,IAAI,CAACG,CAAD,CAAJ,GAAU,EAAV;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,IAAI,CAA/B,EAAkC;AAChC,UAAID,CAAC,KAAKC,CAAV,EAAa;AACXJ,QAAAA,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,IAAa,CAAb;AACD,OAFD,MAEO,IAAIL,cAAc,CAACI,CAAD,CAAd,CAAkBC,CAAlB,MAAyB,CAAzB,IAA8B,CAACL,cAAc,CAACI,CAAD,CAAd,CAAkBC,CAAlB,CAAnC,EAAyD;AAC9DJ,QAAAA,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,IAAaC,QAAb;AACD,OAFM,MAEA;AACLL,QAAAA,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,IAAaL,cAAc,CAACI,CAAD,CAAd,CAAkBC,CAAlB,CAAb;AACD;AACF;AACF,GAjB6D,CAiB5D;;;AAGF,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAApB,EAA0BK,CAAC,IAAI,CAA/B,EAAkC;AAChC,SAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAApB,EAA0BE,CAAC,IAAI,CAA/B,EAAkC;AAChC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,IAAI,CAA/B,EAAkC;AAChC,YAAIJ,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,IAAaJ,IAAI,CAACG,CAAD,CAAJ,CAAQG,CAAR,IAAaN,IAAI,CAACM,CAAD,CAAJ,CAAQF,CAAR,CAA9B,EAA0C;AACxCJ,UAAAA,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,IAAaJ,IAAI,CAACG,CAAD,CAAJ,CAAQG,CAAR,IAAaN,IAAI,CAACM,CAAD,CAAJ,CAAQF,CAAR,CAA1B;AACD;AACF;AACF;AACF;;AAED,SAAOJ,IAAP;AACD,CA/BD;;AAiCA,IAAIO,QAAQ,GAAGX,aAAf;AACAR,OAAO,CAACE,OAAR,GAAkBiB,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _adjacentMatrix = _interopRequireDefault(require(\"./adjacent-matrix\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar floydWarshall = function floydWarshall(graphData, directed) {\n  var adjacentMatrix = (0, _adjacentMatrix.default)(graphData, directed);\n  var dist = [];\n  var size = adjacentMatrix.length;\n\n  for (var i = 0; i < size; i += 1) {\n    dist[i] = [];\n\n    for (var j = 0; j < size; j += 1) {\n      if (i === j) {\n        dist[i][j] = 0;\n      } else if (adjacentMatrix[i][j] === 0 || !adjacentMatrix[i][j]) {\n        dist[i][j] = Infinity;\n      } else {\n        dist[i][j] = adjacentMatrix[i][j];\n      }\n    }\n  } // floyd\n\n\n  for (var k = 0; k < size; k += 1) {\n    for (var i = 0; i < size; i += 1) {\n      for (var j = 0; j < size; j += 1) {\n        if (dist[i][j] > dist[i][k] + dist[k][j]) {\n          dist[i][j] = dist[i][k] + dist[k][j];\n        }\n      }\n    }\n  }\n\n  return dist;\n};\n\nvar _default = floydWarshall;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}