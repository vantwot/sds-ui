{"ast":null,"code":"import _toConsumableArray from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { round } from '../util';\n\nfunction rotate(x, y, rad) {\n  return {\n    x: x * Math.cos(rad) - y * Math.sin(rad),\n    y: x * Math.sin(rad) + y * Math.cos(rad)\n  };\n}\n\nfunction q2c(x1, y1, ax, ay, x2, y2) {\n  var v13 = 1 / 3;\n  var v23 = 2 / 3;\n  return [v13 * x1 + v23 * ax, v13 * y1 + v23 * ay, v13 * x2 + v23 * ax, v13 * y2 + v23 * ay, x2, y2];\n}\n\nfunction a2c(x1, y1, rx, ry, angle, largeArcFlag, sweepFlag, x2, y2, recursive) {\n  // for more information of where this math came from visit:\n  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n  var v120 = Math.PI * 120 / 180;\n  var rad = Math.PI / 180 * (+angle || 0);\n  var res = [];\n  var xy;\n  var f1;\n  var f2;\n  var cx;\n  var cy;\n\n  if (!recursive) {\n    xy = rotate(x1, y1, -rad);\n    x1 = xy.x; // eslint-disable-line\n\n    y1 = xy.y; // eslint-disable-line\n\n    xy = rotate(x2, y2, -rad);\n    x2 = xy.x; // eslint-disable-line\n\n    y2 = xy.y; // eslint-disable-line\n\n    var x = (x1 - x2) / 2;\n    var y = (y1 - y2) / 2;\n    var h = x * x / (rx * rx) + y * y / (ry * ry);\n\n    if (h > 1) {\n      h = Math.sqrt(h);\n      rx = h * rx; // eslint-disable-line\n\n      ry = h * ry; // eslint-disable-line\n    }\n\n    var rx2 = rx * rx;\n    var ry2 = ry * ry;\n    var k = (largeArcFlag === sweepFlag ? -1 : 1) * Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)));\n    cx = k * rx * y / ry + (x1 + x2) / 2;\n    cy = k * -ry * x / rx + (y1 + y2) / 2;\n    f1 = Math.asin((y1 - cy) / ry);\n    f2 = Math.asin((y2 - cy) / ry);\n    f1 = x1 < cx ? Math.PI - f1 : f1;\n    f2 = x2 < cx ? Math.PI - f2 : f2;\n\n    if (f1 < 0) {\n      f1 = Math.PI * 2 + f1;\n    }\n\n    if (f2 < 0) {\n      f2 = Math.PI * 2 + f2;\n    }\n\n    if (sweepFlag && f1 > f2) {\n      f1 -= Math.PI * 2;\n    }\n\n    if (!sweepFlag && f2 > f1) {\n      f2 -= Math.PI * 2;\n    }\n  } else {\n    f1 = recursive[0];\n    f2 = recursive[1];\n    cx = recursive[2];\n    cy = recursive[3];\n  }\n\n  var df = f2 - f1;\n\n  if (Math.abs(df) > v120) {\n    var f2old = f2;\n    var x2old = x2;\n    var y2old = y2;\n    f2 = f1 + v120 * (sweepFlag && f2 > f1 ? 1 : -1);\n    x2 = cx + rx * Math.cos(f2); // eslint-disable-line\n\n    y2 = cy + ry * Math.sin(f2); // eslint-disable-line\n\n    res = a2c(x2, y2, rx, ry, angle, 0, sweepFlag, x2old, y2old, [f2, f2old, cx, cy]);\n  }\n\n  df = f2 - f1;\n  var c1 = Math.cos(f1);\n  var s1 = Math.sin(f1);\n  var c2 = Math.cos(f2);\n  var s2 = Math.sin(f2);\n  var t = Math.tan(df / 4);\n  var hx = 4 / 3 * (rx * t);\n  var hy = 4 / 3 * (ry * t);\n  var m1 = [x1, y1];\n  var m2 = [x1 + hx * s1, y1 - hy * c1];\n  var m3 = [x2 + hx * s2, y2 - hy * c2];\n  var m4 = [x2, y2];\n  m2[0] = 2 * m1[0] - m2[0];\n  m2[1] = 2 * m1[1] - m2[1];\n\n  if (recursive) {\n    return [m2, m3, m4].concat(res);\n  }\n\n  {\n    res = [m2, m3, m4].concat(res).join().split(',');\n    var newres = [];\n    var ii = res.length;\n\n    for (var i = 0; i < ii; i += 1) {\n      newres[i] = i % 2 ? rotate(+res[i - 1], +res[i], rad).y : rotate(+res[i], +res[i + 1], rad).x;\n    }\n\n    return newres;\n  }\n}\n\nfunction parse(pathData) {\n  if (!pathData) {\n    return null;\n  }\n\n  var spaces = \"\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\"; // https://regexper.com/#%28%5Ba-z%5D%29%5B%5Cs%2C%5D*%28%28-%3F%5Cd*%5C.%3F%5C%5Cd*%28%3F%3Ae%5B%5C-%2B%5D%3F%5Cd%2B%29%3F%5B%5Cs%5D*%2C%3F%5B%5Cs%5D*%29%2B%29\n\n  var segmentReg = new RegExp(\"([a-z])[\".concat(spaces, \",]*((-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?[\").concat(spaces, \"]*,?[\").concat(spaces, \"]*)+)\"), // eslint-disable-line\n  'ig'); // https://regexper.com/#%28-%3F%5Cd*%5C.%3F%5Cd*%28%3F%3Ae%5B%5C-%2B%5D%3F%5Cd%2B%29%3F%29%5B%5Cs%5D*%2C%3F%5B%5Cs%5D*\n\n  var commandParamReg = new RegExp( // eslint-disable-next-line\n  \"(-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?)[\".concat(spaces, \"]*,?[\").concat(spaces, \"]*\"), 'ig');\n  var paramsCount = {\n    a: 7,\n    c: 6,\n    h: 1,\n    l: 2,\n    m: 2,\n    q: 4,\n    s: 4,\n    t: 2,\n    v: 1,\n    z: 0\n  };\n  var segmetns = [];\n  pathData.replace(segmentReg, function (input, cmd, args) {\n    var params = [];\n    var command = cmd.toLowerCase();\n    args.replace(commandParamReg, function (a, b) {\n      if (b) {\n        params.push(+b);\n      }\n\n      return a;\n    });\n\n    if (command === 'm' && params.length > 2) {\n      segmetns.push([cmd].concat(_toConsumableArray(params.splice(0, 2))));\n      command = 'l';\n      cmd = cmd === 'm' ? 'l' : 'L'; // eslint-disable-line\n    }\n\n    var count = paramsCount[command];\n\n    while (params.length >= count) {\n      segmetns.push([cmd].concat(_toConsumableArray(params.splice(0, count))));\n\n      if (!count) {\n        break;\n      }\n    }\n\n    return input;\n  });\n  return segmetns;\n}\n\nfunction abs(pathString) {\n  var pathArray = parse(pathString); // if invalid string, return 'M 0 0'\n\n  if (!pathArray || !pathArray.length) {\n    return [['M', 0, 0]];\n  }\n\n  var x = 0;\n  var y = 0;\n  var mx = 0;\n  var my = 0;\n  var segments = [];\n\n  for (var i = 0, ii = pathArray.length; i < ii; i += 1) {\n    var r = [];\n    segments.push(r);\n    var segment = pathArray[i];\n    var command = segment[0];\n\n    if (command !== command.toUpperCase()) {\n      r[0] = command.toUpperCase();\n\n      switch (r[0]) {\n        case 'A':\n          r[1] = segment[1];\n          r[2] = segment[2];\n          r[3] = segment[3];\n          r[4] = segment[4];\n          r[5] = segment[5];\n          r[6] = +segment[6] + x;\n          r[7] = +segment[7] + y;\n          break;\n\n        case 'V':\n          r[1] = +segment[1] + y;\n          break;\n\n        case 'H':\n          r[1] = +segment[1] + x;\n          break;\n\n        case 'M':\n          mx = +segment[1] + x;\n          my = +segment[2] + y;\n\n          for (var j = 1, jj = segment.length; j < jj; j += 1) {\n            r[j] = +segment[j] + (j % 2 ? x : y);\n          }\n\n          break;\n\n        default:\n          for (var _j = 1, _jj = segment.length; _j < _jj; _j += 1) {\n            r[_j] = +segment[_j] + (_j % 2 ? x : y);\n          }\n\n          break;\n      }\n    } else {\n      for (var _j2 = 0, _jj2 = segment.length; _j2 < _jj2; _j2 += 1) {\n        r[_j2] = segment[_j2];\n      }\n    }\n\n    switch (r[0]) {\n      case 'Z':\n        x = +mx;\n        y = +my;\n        break;\n\n      case 'H':\n        x = r[1];\n        break;\n\n      case 'V':\n        y = r[1];\n        break;\n\n      case 'M':\n        mx = r[r.length - 2];\n        my = r[r.length - 1];\n        x = r[r.length - 2];\n        y = r[r.length - 1];\n        break;\n\n      default:\n        x = r[r.length - 2];\n        y = r[r.length - 1];\n        break;\n    }\n  }\n\n  return segments;\n}\n\nfunction normalize(path) {\n  var pathArray = abs(path);\n  var attrs = {\n    x: 0,\n    y: 0,\n    bx: 0,\n    by: 0,\n    X: 0,\n    Y: 0,\n    qx: null,\n    qy: null\n  };\n\n  function processPath(path, d, pcom) {\n    var nx;\n    var ny;\n\n    if (!path) {\n      return ['C', d.x, d.y, d.x, d.y, d.x, d.y];\n    }\n\n    if (!(path[0] in {\n      T: 1,\n      Q: 1\n    })) {\n      d.qx = null;\n      d.qy = null;\n    }\n\n    switch (path[0]) {\n      case 'M':\n        d.X = path[1];\n        d.Y = path[2];\n        break;\n\n      case 'A':\n        if (parseFloat(path[1]) === 0 || parseFloat(path[2]) === 0) {\n          // https://www.w3.org/TR/SVG/paths.html#ArcOutOfRangeParameters\n          // \"If either rx or ry is 0, then this arc is treated as a\n          // straight line segment (a \"lineto\") joining the endpoints.\"\n          return ['L', path[6], path[7]];\n        }\n\n        return ['C'].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n\n      case 'S':\n        if (pcom === 'C' || pcom === 'S') {\n          // In 'S' case we have to take into account, if the previous command is C/S.\n          nx = d.x * 2 - d.bx; // And reflect the previous\n\n          ny = d.y * 2 - d.by; // command's control point relative to the current point.\n        } else {\n          // or some else or nothing\n          nx = d.x;\n          ny = d.y;\n        }\n\n        return ['C', nx, ny].concat(path.slice(1));\n\n      case 'T':\n        if (pcom === 'Q' || pcom === 'T') {\n          // In 'T' case we have to take into account, if the previous command is Q/T.\n          d.qx = d.x * 2 - d.qx; // And make a reflection similar\n\n          d.qy = d.y * 2 - d.qy; // to case 'S'.\n        } else {\n          // or something else or nothing\n          d.qx = d.x;\n          d.qy = d.y;\n        }\n\n        return ['C'].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n\n      case 'Q':\n        d.qx = path[1];\n        d.qy = path[2];\n        return ['C'].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n\n      case 'H':\n        return ['L'].concat(path[1], d.y);\n\n      case 'V':\n        return ['L'].concat(d.x, path[1]);\n\n      case 'L':\n        break;\n\n      case 'Z':\n        break;\n\n      default:\n        break;\n    }\n\n    return path;\n  }\n\n  function fixArc(pp, i) {\n    if (pp[i].length > 7) {\n      pp[i].shift();\n      var pi = pp[i];\n\n      while (pi.length) {\n        // if created multiple 'C's, their original seg is saved\n        commands[i] = 'A';\n        i += 1; // eslint-disable-line\n\n        pp.splice(i, 0, ['C'].concat(pi.splice(0, 6)));\n      }\n\n      pp.splice(i, 1);\n      ii = pathArray.length;\n    }\n  }\n\n  var commands = []; // path commands of original path p\n\n  var prevCommand = ''; // holder for previous path command of original path\n\n  var ii = pathArray.length;\n\n  for (var i = 0; i < ii; i += 1) {\n    var command = ''; // temporary holder for original path command\n\n    if (pathArray[i]) {\n      command = pathArray[i][0]; // save current path command\n    }\n\n    if (command !== 'C') {\n      // C is not saved yet, because it may be result of conversion\n      commands[i] = command; // Save current path command\n\n      if (i > 0) {\n        prevCommand = commands[i - 1]; // Get previous path command pcom\n      }\n    } // Previous path command is inputted to processPath\n\n\n    pathArray[i] = processPath(pathArray[i], attrs, prevCommand);\n\n    if (commands[i] !== 'A' && command === 'C') {\n      commands[i] = 'C'; // 'A' is the only command\n    } // which may produce multiple 'C's\n    // so we have to make sure that 'C' is also 'C' in original path\n\n\n    fixArc(pathArray, i); // fixArc adds also the right amount of 'A's to pcoms\n\n    var seg = pathArray[i];\n    var seglen = seg.length;\n    attrs.x = seg[seglen - 2];\n    attrs.y = seg[seglen - 1];\n    attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;\n    attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;\n  } // make sure normalized path data string starts with an M segment\n\n\n  if (!pathArray[0][0] || pathArray[0][0] !== 'M') {\n    pathArray.unshift(['M', 0, 0]);\n  }\n\n  return pathArray;\n}\n/**\n * Converts provided SVG path data string into a normalized path data string.\n *\n * The normalization uses a restricted subset of path commands; all segments\n * are translated into lineto, curveto, moveto, and closepath segments.\n *\n * Relative path commands are changed into their absolute counterparts,\n * and chaining of coordinates is disallowed.\n *\n * The function will always return a valid path data string; if an input\n * string cannot be normalized, 'M 0 0' is returned.\n */\n\n\nexport function normalizePathData(pathData) {\n  return normalize(pathData).map(function (segment) {\n    return segment.map(function (item) {\n      return typeof item === 'string' ? item : round(item, 2);\n    });\n  }).join(',').split(',').join(' ');\n}","map":{"version":3,"sources":["../../../src/geometry/path/normalize.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { round } from '../util';\nfunction rotate(x, y, rad) {\n    return {\n        x: x * Math.cos(rad) - y * Math.sin(rad),\n        y: x * Math.sin(rad) + y * Math.cos(rad),\n    };\n}\nfunction q2c(x1, y1, ax, ay, x2, y2) {\n    const v13 = 1 / 3;\n    const v23 = 2 / 3;\n    return [\n        v13 * x1 + v23 * ax,\n        v13 * y1 + v23 * ay,\n        v13 * x2 + v23 * ax,\n        v13 * y2 + v23 * ay,\n        x2,\n        y2,\n    ];\n}\nfunction a2c(x1, y1, rx, ry, angle, largeArcFlag, sweepFlag, x2, y2, recursive) {\n    // for more information of where this math came from visit:\n    // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n    const v120 = (Math.PI * 120) / 180;\n    const rad = (Math.PI / 180) * (+angle || 0);\n    let res = [];\n    let xy;\n    let f1;\n    let f2;\n    let cx;\n    let cy;\n    if (!recursive) {\n        xy = rotate(x1, y1, -rad);\n        x1 = xy.x; // eslint-disable-line\n        y1 = xy.y; // eslint-disable-line\n        xy = rotate(x2, y2, -rad);\n        x2 = xy.x; // eslint-disable-line\n        y2 = xy.y; // eslint-disable-line\n        const x = (x1 - x2) / 2;\n        const y = (y1 - y2) / 2;\n        let h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n        if (h > 1) {\n            h = Math.sqrt(h);\n            rx = h * rx; // eslint-disable-line\n            ry = h * ry; // eslint-disable-line\n        }\n        const rx2 = rx * rx;\n        const ry2 = ry * ry;\n        const k = (largeArcFlag === sweepFlag ? -1 : 1) *\n            Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)));\n        cx = (k * rx * y) / ry + (x1 + x2) / 2;\n        cy = (k * -ry * x) / rx + (y1 + y2) / 2;\n        f1 = Math.asin((y1 - cy) / ry);\n        f2 = Math.asin((y2 - cy) / ry);\n        f1 = x1 < cx ? Math.PI - f1 : f1;\n        f2 = x2 < cx ? Math.PI - f2 : f2;\n        if (f1 < 0) {\n            f1 = Math.PI * 2 + f1;\n        }\n        if (f2 < 0) {\n            f2 = Math.PI * 2 + f2;\n        }\n        if (sweepFlag && f1 > f2) {\n            f1 -= Math.PI * 2;\n        }\n        if (!sweepFlag && f2 > f1) {\n            f2 -= Math.PI * 2;\n        }\n    }\n    else {\n        f1 = recursive[0];\n        f2 = recursive[1];\n        cx = recursive[2];\n        cy = recursive[3];\n    }\n    let df = f2 - f1;\n    if (Math.abs(df) > v120) {\n        const f2old = f2;\n        const x2old = x2;\n        const y2old = y2;\n        f2 = f1 + v120 * (sweepFlag && f2 > f1 ? 1 : -1);\n        x2 = cx + rx * Math.cos(f2); // eslint-disable-line\n        y2 = cy + ry * Math.sin(f2); // eslint-disable-line\n        res = a2c(x2, y2, rx, ry, angle, 0, sweepFlag, x2old, y2old, [\n            f2,\n            f2old,\n            cx,\n            cy,\n        ]);\n    }\n    df = f2 - f1;\n    const c1 = Math.cos(f1);\n    const s1 = Math.sin(f1);\n    const c2 = Math.cos(f2);\n    const s2 = Math.sin(f2);\n    const t = Math.tan(df / 4);\n    const hx = (4 / 3) * (rx * t);\n    const hy = (4 / 3) * (ry * t);\n    const m1 = [x1, y1];\n    const m2 = [x1 + hx * s1, y1 - hy * c1];\n    const m3 = [x2 + hx * s2, y2 - hy * c2];\n    const m4 = [x2, y2];\n    m2[0] = 2 * m1[0] - m2[0];\n    m2[1] = 2 * m1[1] - m2[1];\n    if (recursive) {\n        return [m2, m3, m4].concat(res);\n    }\n    {\n        res = [m2, m3, m4].concat(res).join().split(',');\n        const newres = [];\n        const ii = res.length;\n        for (let i = 0; i < ii; i += 1) {\n            newres[i] =\n                i % 2\n                    ? rotate(+res[i - 1], +res[i], rad).y\n                    : rotate(+res[i], +res[i + 1], rad).x;\n        }\n        return newres;\n    }\n}\nfunction parse(pathData) {\n    if (!pathData) {\n        return null;\n    }\n    const spaces = '\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029';\n    // https://regexper.com/#%28%5Ba-z%5D%29%5B%5Cs%2C%5D*%28%28-%3F%5Cd*%5C.%3F%5C%5Cd*%28%3F%3Ae%5B%5C-%2B%5D%3F%5Cd%2B%29%3F%5B%5Cs%5D*%2C%3F%5B%5Cs%5D*%29%2B%29\n    const segmentReg = new RegExp(`([a-z])[${spaces},]*((-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?[${spaces}]*,?[${spaces}]*)+)`, // eslint-disable-line\n    'ig');\n    // https://regexper.com/#%28-%3F%5Cd*%5C.%3F%5Cd*%28%3F%3Ae%5B%5C-%2B%5D%3F%5Cd%2B%29%3F%29%5B%5Cs%5D*%2C%3F%5B%5Cs%5D*\n    const commandParamReg = new RegExp(\n    // eslint-disable-next-line\n    `(-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?)[${spaces}]*,?[${spaces}]*`, 'ig');\n    const paramsCount = {\n        a: 7,\n        c: 6,\n        h: 1,\n        l: 2,\n        m: 2,\n        q: 4,\n        s: 4,\n        t: 2,\n        v: 1,\n        z: 0,\n    };\n    const segmetns = [];\n    pathData.replace(segmentReg, (input, cmd, args) => {\n        const params = [];\n        let command = cmd.toLowerCase();\n        args.replace(commandParamReg, (a, b) => {\n            if (b) {\n                params.push(+b);\n            }\n            return a;\n        });\n        if (command === 'm' && params.length > 2) {\n            segmetns.push([cmd, ...params.splice(0, 2)]);\n            command = 'l';\n            cmd = cmd === 'm' ? 'l' : 'L'; // eslint-disable-line\n        }\n        const count = paramsCount[command];\n        while (params.length >= count) {\n            segmetns.push([cmd, ...params.splice(0, count)]);\n            if (!count) {\n                break;\n            }\n        }\n        return input;\n    });\n    return segmetns;\n}\nfunction abs(pathString) {\n    const pathArray = parse(pathString);\n    // if invalid string, return 'M 0 0'\n    if (!pathArray || !pathArray.length) {\n        return [['M', 0, 0]];\n    }\n    let x = 0;\n    let y = 0;\n    let mx = 0;\n    let my = 0;\n    const segments = [];\n    for (let i = 0, ii = pathArray.length; i < ii; i += 1) {\n        const r = [];\n        segments.push(r);\n        const segment = pathArray[i];\n        const command = segment[0];\n        if (command !== command.toUpperCase()) {\n            r[0] = command.toUpperCase();\n            switch (r[0]) {\n                case 'A':\n                    r[1] = segment[1];\n                    r[2] = segment[2];\n                    r[3] = segment[3];\n                    r[4] = segment[4];\n                    r[5] = segment[5];\n                    r[6] = +segment[6] + x;\n                    r[7] = +segment[7] + y;\n                    break;\n                case 'V':\n                    r[1] = +segment[1] + y;\n                    break;\n                case 'H':\n                    r[1] = +segment[1] + x;\n                    break;\n                case 'M':\n                    mx = +segment[1] + x;\n                    my = +segment[2] + y;\n                    for (let j = 1, jj = segment.length; j < jj; j += 1) {\n                        r[j] = +segment[j] + (j % 2 ? x : y);\n                    }\n                    break;\n                default:\n                    for (let j = 1, jj = segment.length; j < jj; j += 1) {\n                        r[j] = +segment[j] + (j % 2 ? x : y);\n                    }\n                    break;\n            }\n        }\n        else {\n            for (let j = 0, jj = segment.length; j < jj; j += 1) {\n                r[j] = segment[j];\n            }\n        }\n        switch (r[0]) {\n            case 'Z':\n                x = +mx;\n                y = +my;\n                break;\n            case 'H':\n                x = r[1];\n                break;\n            case 'V':\n                y = r[1];\n                break;\n            case 'M':\n                mx = r[r.length - 2];\n                my = r[r.length - 1];\n                x = r[r.length - 2];\n                y = r[r.length - 1];\n                break;\n            default:\n                x = r[r.length - 2];\n                y = r[r.length - 1];\n                break;\n        }\n    }\n    return segments;\n}\nfunction normalize(path) {\n    const pathArray = abs(path);\n    const attrs = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null };\n    function processPath(path, d, pcom) {\n        let nx;\n        let ny;\n        if (!path) {\n            return ['C', d.x, d.y, d.x, d.y, d.x, d.y];\n        }\n        if (!(path[0] in { T: 1, Q: 1 })) {\n            d.qx = null;\n            d.qy = null;\n        }\n        switch (path[0]) {\n            case 'M':\n                d.X = path[1];\n                d.Y = path[2];\n                break;\n            case 'A':\n                if (parseFloat(path[1]) === 0 || parseFloat(path[2]) === 0) {\n                    // https://www.w3.org/TR/SVG/paths.html#ArcOutOfRangeParameters\n                    // \"If either rx or ry is 0, then this arc is treated as a\n                    // straight line segment (a \"lineto\") joining the endpoints.\"\n                    return ['L', path[6], path[7]];\n                }\n                return ['C'].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n            case 'S':\n                if (pcom === 'C' || pcom === 'S') {\n                    // In 'S' case we have to take into account, if the previous command is C/S.\n                    nx = d.x * 2 - d.bx; // And reflect the previous\n                    ny = d.y * 2 - d.by; // command's control point relative to the current point.\n                }\n                else {\n                    // or some else or nothing\n                    nx = d.x;\n                    ny = d.y;\n                }\n                return ['C', nx, ny].concat(path.slice(1));\n            case 'T':\n                if (pcom === 'Q' || pcom === 'T') {\n                    // In 'T' case we have to take into account, if the previous command is Q/T.\n                    d.qx = d.x * 2 - d.qx; // And make a reflection similar\n                    d.qy = d.y * 2 - d.qy; // to case 'S'.\n                }\n                else {\n                    // or something else or nothing\n                    d.qx = d.x;\n                    d.qy = d.y;\n                }\n                return ['C'].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n            case 'Q':\n                d.qx = path[1];\n                d.qy = path[2];\n                return ['C'].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n            case 'H':\n                return ['L'].concat(path[1], d.y);\n            case 'V':\n                return ['L'].concat(d.x, path[1]);\n            case 'L':\n                break;\n            case 'Z':\n                break;\n            default:\n                break;\n        }\n        return path;\n    }\n    function fixArc(pp, i) {\n        if (pp[i].length > 7) {\n            pp[i].shift();\n            const pi = pp[i];\n            while (pi.length) {\n                // if created multiple 'C's, their original seg is saved\n                commands[i] = 'A';\n                i += 1; // eslint-disable-line\n                pp.splice(i, 0, ['C'].concat(pi.splice(0, 6)));\n            }\n            pp.splice(i, 1);\n            ii = pathArray.length;\n        }\n    }\n    const commands = []; // path commands of original path p\n    let prevCommand = ''; // holder for previous path command of original path\n    let ii = pathArray.length;\n    for (let i = 0; i < ii; i += 1) {\n        let command = ''; // temporary holder for original path command\n        if (pathArray[i]) {\n            command = pathArray[i][0]; // save current path command\n        }\n        if (command !== 'C') {\n            // C is not saved yet, because it may be result of conversion\n            commands[i] = command; // Save current path command\n            if (i > 0) {\n                prevCommand = commands[i - 1]; // Get previous path command pcom\n            }\n        }\n        // Previous path command is inputted to processPath\n        pathArray[i] = processPath(pathArray[i], attrs, prevCommand);\n        if (commands[i] !== 'A' && command === 'C') {\n            commands[i] = 'C'; // 'A' is the only command\n        }\n        // which may produce multiple 'C's\n        // so we have to make sure that 'C' is also 'C' in original path\n        fixArc(pathArray, i); // fixArc adds also the right amount of 'A's to pcoms\n        const seg = pathArray[i];\n        const seglen = seg.length;\n        attrs.x = seg[seglen - 2];\n        attrs.y = seg[seglen - 1];\n        attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;\n        attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;\n    }\n    // make sure normalized path data string starts with an M segment\n    if (!pathArray[0][0] || pathArray[0][0] !== 'M') {\n        pathArray.unshift(['M', 0, 0]);\n    }\n    return pathArray;\n}\n/**\n * Converts provided SVG path data string into a normalized path data string.\n *\n * The normalization uses a restricted subset of path commands; all segments\n * are translated into lineto, curveto, moveto, and closepath segments.\n *\n * Relative path commands are changed into their absolute counterparts,\n * and chaining of coordinates is disallowed.\n *\n * The function will always return a valid path data string; if an input\n * string cannot be normalized, 'M 0 0' is returned.\n */\nexport function normalizePathData(pathData) {\n    return normalize(pathData)\n        .map((segment) => segment.map((item) => (typeof item === 'string' ? item : round(item, 2))))\n        .join(',')\n        .split(',')\n        .join(' ');\n}\n//# sourceMappingURL=normalize.js.map"]},"metadata":{},"sourceType":"module"}