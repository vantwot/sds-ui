{"ast":null,"code":"var shapeUpdateList = [['circle', 'cylinder'], ['square', 'cylinder'], ['triangle', 'cylinder'], ['pentagon', 'cylinder'], ['hexagon', 'cylinder'], ['octogon', 'cylinder'], ['hexagram', 'cylinder'], ['rhombus', 'cylinder'], ['vesica', 'cylinder']];\nexport function updateShape(layer, lastShape, currentShape) {\n  if (typeof lastShape === 'string' && typeof currentShape === 'string' && lastShape !== currentShape) {\n    shapeUpdateList.map(function (shapes) {\n      if (shapes.includes(lastShape) && shapes.includes(currentShape)) {\n        layer.dataState.dataSourceNeedUpdate = true;\n      }\n    });\n  }\n}","map":{"version":3,"sources":["../../src/utils/updateShape.ts"],"names":["shapeUpdateList","lastShape","shapes","layer"],"mappings":"AAGA,IAAMA,eAAe,GAAG,CAEtB,CAAA,QAAA,EAFsB,UAEtB,CAFsB,EAGtB,CAAA,QAAA,EAHsB,UAGtB,CAHsB,EAItB,CAAA,UAAA,EAJsB,UAItB,CAJsB,EAKtB,CAAA,UAAA,EALsB,UAKtB,CALsB,EAMtB,CAAA,SAAA,EANsB,UAMtB,CANsB,EAOtB,CAAA,SAAA,EAPsB,UAOtB,CAPsB,EAQtB,CAAA,UAAA,EARsB,UAQtB,CARsB,EAStB,CAAA,SAAA,EATsB,UAStB,CATsB,EAUtB,CAAA,QAAA,EAVF,UAUE,CAVsB,CAAxB;AAYA,OAAO,SAAA,WAAA,CAAA,KAAA,EAAA,SAAA,EAAA,YAAA,EAIC;AACN,MACE,OAAA,SAAA,KAAA,QAAA,IACA,OAAA,YAAA,KADA,QAAA,IAEAC,SAAS,KAHX,YAAA,EAIE;AACAD,IAAAA,eAAe,CAAfA,GAAAA,CAAoB,UAAA,MAAA,EAAY;AAC9B,UAAIE,MAAM,CAANA,QAAAA,CAAAA,SAAAA,KAA8BA,MAAM,CAANA,QAAAA,CAAlC,YAAkCA,CAAlC,EAAiE;AAE/DC,QAAAA,KAAK,CAALA,SAAAA,CAAAA,oBAAAA,GAAAA,IAAAA;AACD;AAJHH,KAAAA;AAMD;AACF","sourcesContent":["import { ILayer, StyleAttributeField } from '@antv/l7-core';\n// TODO: shapeUpdateList 存储一系列的 shape 类型\n// 当这一系列的 shape 相互切换的时候需要重构 layer 的 model (顶点数据集)\nconst shapeUpdateList = [\n  // PointLayer\n  ['circle', 'cylinder'],\n  ['square', 'cylinder'],\n  ['triangle', 'cylinder'],\n  ['pentagon', 'cylinder'],\n  ['hexagon', 'cylinder'],\n  ['octogon', 'cylinder'],\n  ['hexagram', 'cylinder'],\n  ['rhombus', 'cylinder'],\n  ['vesica', 'cylinder'],\n];\nexport function updateShape(\n  layer: ILayer,\n  lastShape: StyleAttributeField | undefined,\n  currentShape: StyleAttributeField | undefined,\n): void {\n  if (\n    typeof lastShape === 'string' &&\n    typeof currentShape === 'string' &&\n    lastShape !== currentShape\n  ) {\n    shapeUpdateList.map((shapes) => {\n      if (shapes.includes(lastShape) && shapes.includes(currentShape)) {\n        // TODO: dataSourceNeedUpdate 借用数据更新时更新 layer model 的工作流\n        layer.dataState.dataSourceNeedUpdate = true;\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}