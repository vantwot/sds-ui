{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { XFlowGroupCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE } from '../../constants';\nexport var NsCollapseGroup;\n\n(function (NsCollapseGroup) {\n  NsCollapseGroup.command = XFlowGroupCommands.COLLAPSE_GROUP;\n  NsCollapseGroup.hookKey = 'collapseGroup';\n})(NsCollapseGroup || (NsCollapseGroup = {}));\n\nlet CollapseGroupCommand =\n/** 添加子节点命令 */\nclass CollapseGroupCommand {\n  constructor() {\n    this.toggleVisible = (cells, visible, graph) => {\n      cells.forEach(cell => {\n        const view = graph.findViewByCell(cell).container;\n        view.style.visibility = visible ? 'visible' : 'hidden';\n      });\n    };\n\n    this.toggleCollapse = (groupNode, graph, args) => {\n      const childrens = groupNode.getChildren().filter(n => n.isNode());\n      const groupData = groupNode.getData();\n      const {\n        isCollapsed,\n        gap = 0\n      } = args;\n\n      if (isCollapsed) {\n        const collapsedSize = args.collapsedSize || groupData.groupCollapsedSize || XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE;\n        groupNode.prop('previousSize', groupNode.size());\n        groupNode.size(collapsedSize);\n      } else {\n        groupNode.size(groupNode.prop('previousSize'));\n      }\n\n      if (childrens) {\n        childrens.forEach(item => {\n          const position = groupNode.position();\n          const innerEdges = graph.getConnectedEdges(item).filter(edge => {\n            const sourceNode = edge.getSourceNode();\n            const targetNode = edge.getTargetNode();\n            return childrens.includes(sourceNode) && childrens.includes(targetNode);\n          });\n\n          if (isCollapsed) {\n            this.toggleVisible([item, ...innerEdges], false, graph);\n            item.prop('previousSize', item.size());\n            item.prop('previousRelativePosition', item.position({\n              relative: true\n            }));\n            item.position(position.x + gap, position.y + gap);\n            const size = groupNode.size();\n            item.size({\n              width: size.width - gap * 2,\n              height: size.height - gap * 2\n            });\n          } else {\n            this.toggleVisible([item, ...innerEdges], true, graph);\n            const pos = item.prop('previousRelativePosition');\n            const size = item.prop('previousSize');\n            item.position(pos.x, pos.y, {\n              relative: true\n            });\n            item.size(size);\n          }\n        });\n      }\n\n      groupNode.prop('isCollapsed', isCollapsed);\n      groupNode.setData(Object.assign(Object.assign({}, groupNode.getData()), {\n        isCollapsed\n      }));\n    };\n\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.collapseGroup.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const x6Graph = yield this.ctx.getX6Graph();\n        const node = x6Graph.getCellById(args.nodeId);\n        const {\n          toggleService\n        } = handlerArgs;\n\n        if (toggleService) {\n          const canToggle = yield toggleService(handlerArgs);\n          if (!canToggle) return {\n            err: 'service rejected'\n          };\n        }\n\n        if (node) {\n          this.toggleCollapse(node, x6Graph, args);\n          this.ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n            if (node) {\n              this.toggleCollapse(node, x6Graph, Object.assign(args, {\n                isCollapsed: !args.isCollapsed\n              }));\n            }\n          })));\n        }\n\n        return {\n          err: null\n        };\n      }), runtimeHook);\n      this.ctx.setResult(result);\n      return this;\n    });\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.ctx.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], CollapseGroupCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], CollapseGroupCommand.prototype, \"init\", null);\n\nCollapseGroupCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsCollapseGroup.command.id\n  }\n})\n/** 添加子节点命令 */\n], CollapseGroupCommand);\nexport { CollapseGroupCommand };","map":{"version":3,"sources":["../../../src/command-contributions/group/group-toggle-collapse.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,MAAT,EAAiB,UAAjB,EAA6B,aAA7B,QAAkD,cAAlD;AAMA,SAAS,kBAAT,QAAmC,aAAnC;AACA,SAAS,UAAT,QAA2B,yBAA3B;AACA,SAAS,eAAT,EAA0B,uBAA1B,QAAyD,yBAAzD;AACA,SAAS,kCAAT,QAAmD,iBAAnD;AAQA,OAAM,IAAW,eAAX;;AAAN,CAAA,UAAiB,eAAjB,EAAgC;AACjB,EAAA,eAAA,CAAA,OAAA,GAAU,kBAAkB,CAAC,cAA7B;AACA,EAAA,eAAA,CAAA,OAAA,GAAU,eAAV;AAuBd,CAzBD,EAAiB,eAAe,KAAf,eAAe,GAAA,EAAA,CAAhC;;AA+BA,IAAa,oBAAoB;AADjC;AACA,MAAa,oBAAb,CAAiC;AAAjC,EAAA,WAAA,GAAA;AAUE,SAAA,aAAA,GAAgB,CAAC,KAAD,EAAgB,OAAhB,EAAkC,KAAlC,KAAkD;AAChE,MAAA,KAAK,CAAC,OAAN,CAAc,IAAI,IAAG;AACnB,cAAM,IAAI,GAAG,KAAK,CAAC,cAAN,CAAqB,IAArB,EAA2B,SAAxC;AACA,QAAA,IAAI,CAAC,KAAL,CAAW,UAAX,GAAwB,OAAO,GAAG,SAAH,GAAe,QAA9C;AACD,OAHD;AAID,KALD;;AAOA,SAAA,cAAA,GAAiB,CAAC,SAAD,EAAoB,KAApB,EAAkC,IAAlC,KAAiE;AAChF,YAAM,SAAS,GAAG,SAAS,CAAC,WAAV,GAAwB,MAAxB,CAA+B,CAAC,IAAI,CAAC,CAAC,MAAF,EAApC,CAAlB;AACA,YAAM,SAAS,GAAG,SAAS,CAAC,OAAV,EAAlB;AACA,YAAM;AAAE,QAAA,WAAF;AAAe,QAAA,GAAG,GAAG;AAArB,UAA2B,IAAjC;;AACA,UAAI,WAAJ,EAAiB;AACf,cAAM,aAAa,GACjB,IAAI,CAAC,aAAL,IAAsB,SAAS,CAAC,kBAAhC,IAAsD,kCADxD;AAEA,QAAA,SAAS,CAAC,IAAV,CAAe,cAAf,EAA+B,SAAS,CAAC,IAAV,EAA/B;AACA,QAAA,SAAS,CAAC,IAAV,CAAe,aAAf;AACD,OALD,MAKO;AACL,QAAA,SAAS,CAAC,IAAV,CAAe,SAAS,CAAC,IAAV,CAAe,cAAf,CAAf;AACD;;AAED,UAAI,SAAJ,EAAe;AACb,QAAA,SAAS,CAAC,OAAV,CAAkB,IAAI,IAAG;AACvB,gBAAM,QAAQ,GAAG,SAAS,CAAC,QAAV,EAAjB;AACA,gBAAM,UAAU,GAAG,KAAK,CAAC,iBAAN,CAAwB,IAAxB,EAA8B,MAA9B,CAAqC,IAAI,IAAG;AAC7D,kBAAM,UAAU,GAAG,IAAI,CAAC,aAAL,EAAnB;AACA,kBAAM,UAAU,GAAG,IAAI,CAAC,aAAL,EAAnB;AACA,mBAAO,SAAS,CAAC,QAAV,CAAmB,UAAnB,KAAkC,SAAS,CAAC,QAAV,CAAmB,UAAnB,CAAzC;AACD,WAJkB,CAAnB;;AAKA,cAAI,WAAJ,EAAiB;AACf,iBAAK,aAAL,CAAmB,CAAC,IAAD,EAAO,GAAG,UAAV,CAAnB,EAA0C,KAA1C,EAAiD,KAAjD;AACA,YAAA,IAAI,CAAC,IAAL,CAAU,cAAV,EAA0B,IAAI,CAAC,IAAL,EAA1B;AACA,YAAA,IAAI,CAAC,IAAL,CAAU,0BAAV,EAAsC,IAAI,CAAC,QAAL,CAAc;AAAE,cAAA,QAAQ,EAAE;AAAZ,aAAd,CAAtC;AACA,YAAA,IAAI,CAAC,QAAL,CAAc,QAAQ,CAAC,CAAT,GAAa,GAA3B,EAAgC,QAAQ,CAAC,CAAT,GAAa,GAA7C;AACA,kBAAM,IAAI,GAAG,SAAS,CAAC,IAAV,EAAb;AACA,YAAA,IAAI,CAAC,IAAL,CAAU;AACR,cAAA,KAAK,EAAE,IAAI,CAAC,KAAL,GAAa,GAAG,GAAG,CADlB;AAER,cAAA,MAAM,EAAE,IAAI,CAAC,MAAL,GAAc,GAAG,GAAG;AAFpB,aAAV;AAID,WAVD,MAUO;AACL,iBAAK,aAAL,CAAmB,CAAC,IAAD,EAAO,GAAG,UAAV,CAAnB,EAA0C,IAA1C,EAAgD,KAAhD;AACA,kBAAM,GAAG,GAAG,IAAI,CAAC,IAAL,CAAU,0BAAV,CAAZ;AACA,kBAAM,IAAI,GAAG,IAAI,CAAC,IAAL,CAAU,cAAV,CAAb;AACA,YAAA,IAAI,CAAC,QAAL,CAAc,GAAG,CAAC,CAAlB,EAAqB,GAAG,CAAC,CAAzB,EAA4B;AAAE,cAAA,QAAQ,EAAE;AAAZ,aAA5B;AACA,YAAA,IAAI,CAAC,IAAL,CAAU,IAAV;AACD;AACF,SAxBD;AAyBD;;AAED,MAAA,SAAS,CAAC,IAAV,CAAe,aAAf,EAA8B,WAA9B;AACA,MAAA,SAAS,CAAC,OAAV,CAAiB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACZ,SAAS,CAAC,OAAV,EADY,CAAA,EACO;AACtB,QAAA;AADsB,OADP,CAAjB;AAID,KA9CD;;AAgDA,SAAA,OAAA,GAAU,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACnB,YAAM;AAAE,QAAA,IAAF;AAAQ,QAAA,KAAK,EAAE;AAAf,UAA+B,KAAK,GAAL,CAAS,OAAT,EAArC;AACA,YAAM,KAAK,GAAG,KAAK,GAAL,CAAS,QAAT,EAAd;AAEA,YAAM,MAAM,GAAG,MAAM,KAAK,CAAC,aAAN,CAAoB,IAApB,CACnB,IADmB,EAEb,WAAN,IAAoB,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAClB,cAAM,OAAO,GAAG,MAAM,KAAK,GAAL,CAAS,UAAT,EAAtB;AACA,cAAM,IAAI,GAAG,OAAO,CAAC,WAAR,CAAoB,IAAI,CAAC,MAAzB,CAAb;AACA,cAAM;AAAE,UAAA;AAAF,YAAoB,WAA1B;;AAEA,YAAI,aAAJ,EAAmB;AACjB,gBAAM,SAAS,GAAG,MAAM,aAAa,CAAC,WAAD,CAArC;AACA,cAAI,CAAC,SAAL,EAAgB,OAAO;AAAE,YAAA,GAAG,EAAE;AAAP,WAAP;AACjB;;AAED,YAAI,IAAJ,EAAU;AACR,eAAK,cAAL,CAAoB,IAApB,EAA0B,OAA1B,EAAmC,IAAnC;AACA,eAAK,GAAL,CAAS,OAAT,CACE,UAAU,CAAC,MAAX,CAAkB,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC3B,gBAAI,IAAJ,EAAU;AACR,mBAAK,cAAL,CACE,IADF,EAEE,OAFF,EAGE,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB;AAAE,gBAAA,WAAW,EAAE,CAAC,IAAI,CAAC;AAArB,eAApB,CAHF;AAKD;AACF,WAR4B,CAA7B,CADF;AAWD;;AAED,eAAO;AAAE,UAAA,GAAG,EAAE;AAAP,SAAP;AACD,OA1BmB,CAFD,EA6BnB,WA7BmB,CAArB;AA+BA,WAAK,GAAL,CAAS,SAAT,CAAmB,MAAnB;AAEA,aAAO,IAAP;AACD,KAtCoB,CAArB;;AAwCA,SAAA,IAAA,GAAO,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAChB,WAAK,GAAL,CAAS,IAAT;AACA,aAAO,IAAP;AACD,KAHiB,CAAlB;;AAKA,SAAA,IAAA,GAAO,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAChB,UAAI,CAAC,KAAK,GAAL,CAAS,UAAd,EAA0B;AACxB,cAAM,KAAK,OAAL,EAAN;AACD;;AACD,aAAO,IAAP;AACD,KALiB,CAAlB;AAUD;;AAlHC,EAAA,IAAI,GAAA;AACF,SAAK,GAAL,GAAW,KAAK,eAAL,EAAX;AACD;;AA6GD,EAAA,UAAU,GAAA;AACR,WAAO,KAAK,GAAL,CAAS,UAAT,EAAP;AACD;;AAvH8B,CAAjC;;AACmC,UAAA,CAAA,CAAhC,MAAM,CAAC,uBAAD,CAA0B,E,iCAAA,CAAA,E,8BAAA,E,iBAAA,E,KAA4C,CAA5C,CAAA;;AAKjC,UAAA,CAAA,CADC,aAAa,EACd,E,mCAAA,E,mCAAA,E,uCAAA,CAAA,E,8BAAA,E,MAAA,EAEC,IAFD,CAAA;;AANW,oBAAoB,GAAA,UAAA,CAAA,CAJhC,UAAU,CAAC;AACV,EAAA,KAAK,EAAE;AAAE,IAAA,KAAK,EAAE,eAAT;AAA0B,IAAA,KAAK,EAAE,eAAe,CAAC,OAAhB,CAAwB;AAAzD;AADG,CAAD;AAGX;AACiC,CAAA,EAApB,oBAAoB,CAApB;SAAA,oB","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { XFlowGroupCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE } from '../../constants';\nexport var NsCollapseGroup;\n(function (NsCollapseGroup) {\n    NsCollapseGroup.command = XFlowGroupCommands.COLLAPSE_GROUP;\n    NsCollapseGroup.hookKey = 'collapseGroup';\n})(NsCollapseGroup || (NsCollapseGroup = {}));\nlet CollapseGroupCommand = \n/** 添加子节点命令 */\nclass CollapseGroupCommand {\n    constructor() {\n        this.toggleVisible = (cells, visible, graph) => {\n            cells.forEach(cell => {\n                const view = graph.findViewByCell(cell).container;\n                view.style.visibility = visible ? 'visible' : 'hidden';\n            });\n        };\n        this.toggleCollapse = (groupNode, graph, args) => {\n            const childrens = groupNode.getChildren().filter(n => n.isNode());\n            const groupData = groupNode.getData();\n            const { isCollapsed, gap = 0 } = args;\n            if (isCollapsed) {\n                const collapsedSize = args.collapsedSize || groupData.groupCollapsedSize || XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE;\n                groupNode.prop('previousSize', groupNode.size());\n                groupNode.size(collapsedSize);\n            }\n            else {\n                groupNode.size(groupNode.prop('previousSize'));\n            }\n            if (childrens) {\n                childrens.forEach(item => {\n                    const position = groupNode.position();\n                    const innerEdges = graph.getConnectedEdges(item).filter(edge => {\n                        const sourceNode = edge.getSourceNode();\n                        const targetNode = edge.getTargetNode();\n                        return childrens.includes(sourceNode) && childrens.includes(targetNode);\n                    });\n                    if (isCollapsed) {\n                        this.toggleVisible([item, ...innerEdges], false, graph);\n                        item.prop('previousSize', item.size());\n                        item.prop('previousRelativePosition', item.position({ relative: true }));\n                        item.position(position.x + gap, position.y + gap);\n                        const size = groupNode.size();\n                        item.size({\n                            width: size.width - gap * 2,\n                            height: size.height - gap * 2,\n                        });\n                    }\n                    else {\n                        this.toggleVisible([item, ...innerEdges], true, graph);\n                        const pos = item.prop('previousRelativePosition');\n                        const size = item.prop('previousSize');\n                        item.position(pos.x, pos.y, { relative: true });\n                        item.size(size);\n                    }\n                });\n            }\n            groupNode.prop('isCollapsed', isCollapsed);\n            groupNode.setData(Object.assign(Object.assign({}, groupNode.getData()), { isCollapsed }));\n        };\n        this.execute = () => __awaiter(this, void 0, void 0, function* () {\n            const { args, hooks: runtimeHook } = this.ctx.getArgs();\n            const hooks = this.ctx.getHooks();\n            const result = yield hooks.collapseGroup.call(args, (handlerArgs) => __awaiter(this, void 0, void 0, function* () {\n                const x6Graph = yield this.ctx.getX6Graph();\n                const node = x6Graph.getCellById(args.nodeId);\n                const { toggleService } = handlerArgs;\n                if (toggleService) {\n                    const canToggle = yield toggleService(handlerArgs);\n                    if (!canToggle)\n                        return { err: 'service rejected' };\n                }\n                if (node) {\n                    this.toggleCollapse(node, x6Graph, args);\n                    this.ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n                        if (node) {\n                            this.toggleCollapse(node, x6Graph, Object.assign(args, { isCollapsed: !args.isCollapsed }));\n                        }\n                    })));\n                }\n                return { err: null };\n            }), runtimeHook);\n            this.ctx.setResult(result);\n            return this;\n        });\n        this.undo = () => __awaiter(this, void 0, void 0, function* () {\n            this.ctx.undo();\n            return this;\n        });\n        this.redo = () => __awaiter(this, void 0, void 0, function* () {\n            if (!this.ctx.isUndoable) {\n                yield this.execute();\n            }\n            return this;\n        });\n    }\n    init() {\n        this.ctx = this.contextProvider();\n    }\n    isUndoable() {\n        return this.ctx.isUndoable();\n    }\n};\n__decorate([\n    inject(ICommandContextProvider),\n    __metadata(\"design:type\", Object)\n], CollapseGroupCommand.prototype, \"contextProvider\", void 0);\n__decorate([\n    postConstruct(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], CollapseGroupCommand.prototype, \"init\", null);\nCollapseGroupCommand = __decorate([\n    injectable({\n        token: { token: ICommandHandler, named: NsCollapseGroup.command.id },\n    })\n    /** 添加子节点命令 */\n], CollapseGroupCommand);\nexport { CollapseGroupCommand };\n//# sourceMappingURL=group-toggle-collapse.js.map"]},"metadata":{},"sourceType":"module"}