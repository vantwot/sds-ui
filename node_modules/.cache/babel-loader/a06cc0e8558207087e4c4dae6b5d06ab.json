{"ast":null,"code":"import { ObjectExt, Dom } from '../util';\nimport { Timing, Interp } from '../common';\nexport class Animation {\n  constructor(cell) {\n    this.cell = cell;\n    this.ids = {};\n    this.cache = {};\n  }\n\n  get() {\n    return Object.keys(this.ids);\n  }\n\n  start(path, targetValue) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let delim = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '/';\n    const startValue = this.cell.getPropByPath(path);\n    const localOptions = ObjectExt.defaults(options, Animation.defaultOptions);\n    const timing = this.getTiming(localOptions.timing);\n    const interpolate = this.getInterp(localOptions.interp, startValue, targetValue);\n    let startTime = 0;\n    const key = Array.isArray(path) ? path.join(delim) : path;\n    const paths = Array.isArray(path) ? path : path.split(delim);\n\n    const iterate = () => {\n      const now = new Date().getTime();\n\n      if (startTime === 0) {\n        startTime = now;\n      }\n\n      const elaspe = now - startTime;\n      let progress = elaspe / localOptions.duration;\n\n      if (progress < 1) {\n        this.ids[key] = Dom.requestAnimationFrame(iterate);\n      } else {\n        progress = 1;\n      }\n\n      const currentValue = interpolate(timing(progress));\n      this.cell.setPropByPath(paths, currentValue);\n\n      if (options.progress) {\n        options.progress(Object.assign({\n          progress,\n          currentValue\n        }, this.getArgs(key)));\n      }\n\n      if (progress === 1) {\n        // TODO: remove in the next major version\n        this.cell.notify('transition:end', this.getArgs(key));\n        this.cell.notify('transition:complete', this.getArgs(key));\n        options.complete && options.complete(this.getArgs(key));\n        this.cell.notify('transition:finish', this.getArgs(key));\n        options.finish && options.finish(this.getArgs(key));\n        this.clean(key);\n      }\n    };\n\n    setTimeout(() => {\n      this.stop(path, undefined, delim);\n      this.cache[key] = {\n        startValue,\n        targetValue,\n        options: localOptions\n      };\n      this.ids[key] = Dom.requestAnimationFrame(iterate); // TODO: remove in the next major version\n\n      this.cell.notify('transition:begin', this.getArgs(key));\n      this.cell.notify('transition:start', this.getArgs(key));\n      options.start && options.start(this.getArgs(key));\n    }, options.delay);\n    return this.stop.bind(this, path, delim, options);\n  }\n\n  stop(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let delim = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '/';\n    const paths = Array.isArray(path) ? path : path.split(delim);\n    Object.keys(this.ids).filter(key => ObjectExt.isEqual(paths, key.split(delim).slice(0, paths.length))).forEach(key => {\n      Dom.cancelAnimationFrame(this.ids[key]);\n      const data = this.cache[key];\n      const commonArgs = this.getArgs(key);\n      const localOptions = Object.assign(Object.assign({}, data.options), options);\n      const jumpedToEnd = localOptions.jumpedToEnd;\n\n      if (jumpedToEnd && data.targetValue != null) {\n        this.cell.setPropByPath(key, data.targetValue);\n        this.cell.notify('transition:end', Object.assign({}, commonArgs));\n        this.cell.notify('transition:complete', Object.assign({}, commonArgs));\n        localOptions.complete && localOptions.complete(Object.assign({}, commonArgs));\n      }\n\n      const stopArgs = Object.assign({\n        jumpedToEnd\n      }, commonArgs);\n      this.cell.notify('transition:stop', Object.assign({}, stopArgs));\n      localOptions.stop && localOptions.stop(Object.assign({}, stopArgs));\n      this.cell.notify('transition:finish', Object.assign({}, commonArgs));\n      localOptions.finish && localOptions.finish(Object.assign({}, commonArgs));\n      this.clean(key);\n    });\n    return this;\n  }\n\n  clean(key) {\n    delete this.ids[key];\n    delete this.cache[key];\n  }\n\n  getTiming(timing) {\n    return typeof timing === 'string' ? Timing[timing] : timing;\n  }\n\n  getInterp(interp, startValue, targetValue) {\n    if (interp) {\n      return interp(startValue, targetValue);\n    }\n\n    if (typeof targetValue === 'number') {\n      return Interp.number(startValue, targetValue);\n    }\n\n    if (typeof targetValue === 'string') {\n      if (targetValue[0] === '#') {\n        return Interp.color(startValue, targetValue);\n      }\n\n      return Interp.unit(startValue, targetValue);\n    }\n\n    return Interp.object(startValue, targetValue);\n  }\n\n  getArgs(key) {\n    const data = this.cache[key];\n    return {\n      path: key,\n      startValue: data.startValue,\n      targetValue: data.targetValue,\n      cell: this.cell\n    };\n  }\n\n}\n\n(function (Animation) {\n  Animation.defaultOptions = {\n    delay: 10,\n    duration: 100,\n    timing: 'linear'\n  };\n})(Animation || (Animation = {}));","map":{"version":3,"sources":["../../src/model/animation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { ObjectExt, Dom } from '../util';\nimport { Timing, Interp } from '../common';\nexport class Animation {\n    constructor(cell) {\n        this.cell = cell;\n        this.ids = {};\n        this.cache = {};\n    }\n    get() {\n        return Object.keys(this.ids);\n    }\n    start(path, targetValue, options = {}, delim = '/') {\n        const startValue = this.cell.getPropByPath(path);\n        const localOptions = ObjectExt.defaults(options, Animation.defaultOptions);\n        const timing = this.getTiming(localOptions.timing);\n        const interpolate = this.getInterp(localOptions.interp, startValue, targetValue);\n        let startTime = 0;\n        const key = Array.isArray(path) ? path.join(delim) : path;\n        const paths = Array.isArray(path) ? path : path.split(delim);\n        const iterate = () => {\n            const now = new Date().getTime();\n            if (startTime === 0) {\n                startTime = now;\n            }\n            const elaspe = now - startTime;\n            let progress = elaspe / localOptions.duration;\n            if (progress < 1) {\n                this.ids[key] = Dom.requestAnimationFrame(iterate);\n            }\n            else {\n                progress = 1;\n            }\n            const currentValue = interpolate(timing(progress));\n            this.cell.setPropByPath(paths, currentValue);\n            if (options.progress) {\n                options.progress(Object.assign({ progress, currentValue }, this.getArgs(key)));\n            }\n            if (progress === 1) {\n                // TODO: remove in the next major version\n                this.cell.notify('transition:end', this.getArgs(key));\n                this.cell.notify('transition:complete', this.getArgs(key));\n                options.complete && options.complete(this.getArgs(key));\n                this.cell.notify('transition:finish', this.getArgs(key));\n                options.finish && options.finish(this.getArgs(key));\n                this.clean(key);\n            }\n        };\n        setTimeout(() => {\n            this.stop(path, undefined, delim);\n            this.cache[key] = { startValue, targetValue, options: localOptions };\n            this.ids[key] = Dom.requestAnimationFrame(iterate);\n            // TODO: remove in the next major version\n            this.cell.notify('transition:begin', this.getArgs(key));\n            this.cell.notify('transition:start', this.getArgs(key));\n            options.start && options.start(this.getArgs(key));\n        }, options.delay);\n        return this.stop.bind(this, path, delim, options);\n    }\n    stop(path, options = {}, delim = '/') {\n        const paths = Array.isArray(path) ? path : path.split(delim);\n        Object.keys(this.ids)\n            .filter((key) => ObjectExt.isEqual(paths, key.split(delim).slice(0, paths.length)))\n            .forEach((key) => {\n            Dom.cancelAnimationFrame(this.ids[key]);\n            const data = this.cache[key];\n            const commonArgs = this.getArgs(key);\n            const localOptions = Object.assign(Object.assign({}, data.options), options);\n            const jumpedToEnd = localOptions.jumpedToEnd;\n            if (jumpedToEnd && data.targetValue != null) {\n                this.cell.setPropByPath(key, data.targetValue);\n                this.cell.notify('transition:end', Object.assign({}, commonArgs));\n                this.cell.notify('transition:complete', Object.assign({}, commonArgs));\n                localOptions.complete && localOptions.complete(Object.assign({}, commonArgs));\n            }\n            const stopArgs = Object.assign({ jumpedToEnd }, commonArgs);\n            this.cell.notify('transition:stop', Object.assign({}, stopArgs));\n            localOptions.stop && localOptions.stop(Object.assign({}, stopArgs));\n            this.cell.notify('transition:finish', Object.assign({}, commonArgs));\n            localOptions.finish && localOptions.finish(Object.assign({}, commonArgs));\n            this.clean(key);\n        });\n        return this;\n    }\n    clean(key) {\n        delete this.ids[key];\n        delete this.cache[key];\n    }\n    getTiming(timing) {\n        return typeof timing === 'string' ? Timing[timing] : timing;\n    }\n    getInterp(interp, startValue, targetValue) {\n        if (interp) {\n            return interp(startValue, targetValue);\n        }\n        if (typeof targetValue === 'number') {\n            return Interp.number(startValue, targetValue);\n        }\n        if (typeof targetValue === 'string') {\n            if (targetValue[0] === '#') {\n                return Interp.color(startValue, targetValue);\n            }\n            return Interp.unit(startValue, targetValue);\n        }\n        return Interp.object(startValue, targetValue);\n    }\n    getArgs(key) {\n        const data = this.cache[key];\n        return {\n            path: key,\n            startValue: data.startValue,\n            targetValue: data.targetValue,\n            cell: this.cell,\n        };\n    }\n}\n(function (Animation) {\n    Animation.defaultOptions = {\n        delay: 10,\n        duration: 100,\n        timing: 'linear',\n    };\n})(Animation || (Animation = {}));\n//# sourceMappingURL=animation.js.map"]},"metadata":{},"sourceType":"module"}