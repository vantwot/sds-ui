{"ast":null,"code":"import _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport addEventListener from 'rc-util/lib/Dom/addEventListener';\nimport { requestAnimationFrame, cancelAnimationFrame } from './animationFrame';\nexport var MouseMoveTracker = /*#__PURE__*/function () {\n  function MouseMoveTracker(options) {\n    var _this = this;\n\n    _classCallCheck(this, MouseMoveTracker);\n\n    this.onMouseMove = function (e) {\n      var x = e.clientX;\n      var y = e.clientY;\n      _this.deltaX += x - _this.clientX;\n      _this.deltaY += y - _this.clientY;\n\n      if (_this.animationFrameID == null) {\n        _this.animationFrameID = requestAnimationFrame(_this.triggerOnMouseMoveCallback);\n      }\n\n      _this.clientX = x;\n      _this.clientY = y;\n      e.preventDefault();\n    };\n\n    this.onMouseUp = function () {\n      if (_this.animationFrameID) {\n        cancelAnimationFrame(_this.animationFrameID);\n\n        _this.triggerOnMouseMoveCallback();\n      }\n\n      _this.triggerOnMouseMoveEndCallback(false);\n    };\n\n    this.triggerOnMouseMoveCallback = function () {\n      _this.animationFrameID = null;\n\n      _this.onMouseMoveCallback(_this.deltaX, _this.deltaY, {\n        clientX: _this.clientX,\n        clientY: _this.clientY\n      });\n\n      _this.deltaX = 0;\n      _this.deltaY = 0;\n    };\n\n    this.triggerOnMouseMoveEndCallback = function (cancel) {\n      _this.onMouseMoveEndCallback(cancel);\n    };\n\n    this.elem = options.elem || document.documentElement;\n    this.onMouseMoveCallback = options.onMouseMove;\n    this.onMouseMoveEndCallback = options.onMouseMoveEnd;\n    this.animationFrameID = null;\n  }\n\n  _createClass(MouseMoveTracker, [{\n    key: \"capture\",\n    value: function capture(e) {\n      if (!this.captured) {\n        this.removeMouseMoveEvent = addEventListener(this.elem, 'mousemove', this.onMouseMove).remove;\n        this.removeMouseUpEvent = addEventListener(this.elem, 'mouseup', this.onMouseUp).remove;\n      }\n\n      this.captured = true;\n\n      if (!this.dragging) {\n        this.clientX = e.clientX;\n        this.clientY = e.clientY;\n        this.deltaX = 0;\n        this.deltaY = 0;\n        this.dragging = true;\n      }\n\n      e.preventDefault();\n    }\n  }, {\n    key: \"release\",\n    value: function release() {\n      if (this.captured) {\n        if (this.removeMouseMoveEvent != null) {\n          this.removeMouseMoveEvent();\n          this.removeMouseMoveEvent = null;\n        }\n\n        if (this.removeMouseUpEvent != null) {\n          this.removeMouseUpEvent();\n          this.removeMouseUpEvent = null;\n        }\n      }\n\n      this.captured = false;\n\n      if (this.dragging) {\n        this.dragging = false;\n        this.clientX = 0;\n        this.clientY = 0;\n        this.deltaX = 0;\n        this.deltaY = 0;\n      }\n    }\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return this.dragging;\n    }\n  }]);\n\n  return MouseMoveTracker;\n}();","map":{"version":3,"sources":["../../../src/util/dom/MouseMoveTracker.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import addEventListener from 'rc-util/lib/Dom/addEventListener';\nimport { requestAnimationFrame, cancelAnimationFrame } from './animationFrame';\nexport class MouseMoveTracker {\n    constructor(options) {\n        this.onMouseMove = (e) => {\n            const x = e.clientX;\n            const y = e.clientY;\n            this.deltaX += x - this.clientX;\n            this.deltaY += y - this.clientY;\n            if (this.animationFrameID == null) {\n                this.animationFrameID = requestAnimationFrame(this.triggerOnMouseMoveCallback);\n            }\n            this.clientX = x;\n            this.clientY = y;\n            e.preventDefault();\n        };\n        this.onMouseUp = () => {\n            if (this.animationFrameID) {\n                cancelAnimationFrame(this.animationFrameID);\n                this.triggerOnMouseMoveCallback();\n            }\n            this.triggerOnMouseMoveEndCallback(false);\n        };\n        this.triggerOnMouseMoveCallback = () => {\n            this.animationFrameID = null;\n            this.onMouseMoveCallback(this.deltaX, this.deltaY, {\n                clientX: this.clientX,\n                clientY: this.clientY,\n            });\n            this.deltaX = 0;\n            this.deltaY = 0;\n        };\n        this.triggerOnMouseMoveEndCallback = (cancel) => {\n            this.onMouseMoveEndCallback(cancel);\n        };\n        this.elem = options.elem || document.documentElement;\n        this.onMouseMoveCallback = options.onMouseMove;\n        this.onMouseMoveEndCallback = options.onMouseMoveEnd;\n        this.animationFrameID = null;\n    }\n    capture(e) {\n        if (!this.captured) {\n            this.removeMouseMoveEvent = addEventListener(this.elem, 'mousemove', this.onMouseMove).remove;\n            this.removeMouseUpEvent = addEventListener(this.elem, 'mouseup', this.onMouseUp).remove;\n        }\n        this.captured = true;\n        if (!this.dragging) {\n            this.clientX = e.clientX;\n            this.clientY = e.clientY;\n            this.deltaX = 0;\n            this.deltaY = 0;\n            this.dragging = true;\n        }\n        e.preventDefault();\n    }\n    release() {\n        if (this.captured) {\n            if (this.removeMouseMoveEvent != null) {\n                this.removeMouseMoveEvent();\n                this.removeMouseMoveEvent = null;\n            }\n            if (this.removeMouseUpEvent != null) {\n                this.removeMouseUpEvent();\n                this.removeMouseUpEvent = null;\n            }\n        }\n        this.captured = false;\n        if (this.dragging) {\n            this.dragging = false;\n            this.clientX = 0;\n            this.clientY = 0;\n            this.deltaX = 0;\n            this.deltaY = 0;\n        }\n    }\n    isDragging() {\n        return this.dragging;\n    }\n}\n//# sourceMappingURL=MouseMoveTracker.js.map"]},"metadata":{},"sourceType":"module"}