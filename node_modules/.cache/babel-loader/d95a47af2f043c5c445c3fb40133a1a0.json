{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;\n\nimport { $window, rgb2arr } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../types';\nimport Clock from '../../utils/clock';\nvar LayerService = (_dec = injectable(), _dec2 = inject(TYPES.IRendererService), _dec3 = inject(TYPES.IMapService), _dec4 = inject(TYPES.IGlobalConfigService), _dec(_class = (_class2 = function () {\n  function LayerService() {\n    _classCallCheck(this, LayerService);\n\n    _defineProperty(this, \"clock\", new Clock());\n\n    _defineProperty(this, \"alreadyInRendering\", false);\n\n    _defineProperty(this, \"layers\", []);\n\n    _defineProperty(this, \"layerList\", []);\n\n    _defineProperty(this, \"layerRenderID\", void 0);\n\n    _defineProperty(this, \"sceneInited\", false);\n\n    _defineProperty(this, \"animateInstanceCount\", 0);\n\n    _initializerDefineProperty(this, \"renderService\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"mapService\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"configService\", _descriptor3, this);\n  }\n\n  _createClass(LayerService, [{\n    key: \"add\",\n    value: function add(layer) {\n      if (this.sceneInited) {\n        layer.init();\n      }\n\n      this.layers.push(layer);\n      this.updateLayerRenderList();\n    }\n  }, {\n    key: \"initLayers\",\n    value: function initLayers() {\n      this.sceneInited = true;\n      this.layers.forEach(function (layer) {\n        if (!layer.inited) {\n          layer.init();\n        }\n      });\n      this.updateLayerRenderList();\n    }\n  }, {\n    key: \"getLayers\",\n    value: function getLayers() {\n      return this.layers;\n    }\n  }, {\n    key: \"getLayer\",\n    value: function getLayer(id) {\n      return this.layers.find(function (layer) {\n        return layer.id === id;\n      });\n    }\n  }, {\n    key: \"getLayerByName\",\n    value: function getLayerByName(name) {\n      return this.layers.find(function (layer) {\n        return layer.name === name;\n      });\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(layer, parentLayer) {\n      if (parentLayer) {\n        var layerIndex = parentLayer.layerChildren.indexOf(layer);\n\n        if (layerIndex > -1) {\n          parentLayer.layerChildren.splice(layerIndex, 1);\n        }\n      } else {\n        var _layerIndex = this.layers.indexOf(layer);\n\n        if (_layerIndex > -1) {\n          this.layers.splice(_layerIndex, 1);\n        }\n      }\n\n      this.updateLayerRenderList();\n      layer.destroy();\n      this.renderLayers();\n    }\n  }, {\n    key: \"removeAllLayers\",\n    value: function removeAllLayers() {\n      this.destroy();\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      if (this.alreadyInRendering) {\n        return;\n      }\n\n      this.alreadyInRendering = true;\n      this.clear();\n      this.layerList.forEach(function (layer) {\n        layer.hooks.beforeRenderData.call();\n        layer.hooks.beforeRender.call();\n        layer.render();\n        layer.hooks.afterRender.call();\n      });\n      this.alreadyInRendering = false;\n    }\n  }, {\n    key: \"updateLayerRenderList\",\n    value: function updateLayerRenderList() {\n      var _this = this;\n\n      this.layerList = [];\n      this.layers.filter(function (layer) {\n        return layer.inited;\n      }).filter(function (layer) {\n        return layer.isVisible();\n      }).forEach(function (layer) {\n        _this.layerList.push(layer);\n\n        layer.layerChildren.filter(function (childlayer) {\n          return childlayer.inited;\n        }).filter(function (childlayer) {\n          return childlayer.isVisible();\n        }).forEach(function (childlayer) {\n          _this.layerList.push(childlayer);\n        });\n      });\n      this.layerList.sort(function (pre, next) {\n        return pre.zIndex - next.zIndex;\n      });\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.layers.forEach(function (layer) {\n        if (layer.layerChildren) {\n          layer.layerChildren.forEach(function (child) {\n            return child.destroy();\n          });\n          layer.layerChildren = [];\n        }\n\n        layer.destroy();\n      });\n      this.layers = [];\n      this.layerList = [];\n      this.renderLayers();\n    }\n  }, {\n    key: \"startAnimate\",\n    value: function startAnimate() {\n      if (this.animateInstanceCount++ === 0) {\n        this.clock.start();\n        this.runRender();\n      }\n    }\n  }, {\n    key: \"stopAnimate\",\n    value: function stopAnimate() {\n      if (--this.animateInstanceCount === 0) {\n        this.stopRender();\n        this.clock.stop();\n      }\n    }\n  }, {\n    key: \"getOESTextureFloat\",\n    value: function getOESTextureFloat() {\n      return this.renderService.extensionObject.OES_texture_float;\n    }\n  }, {\n    key: \"isMapDragging\",\n    value: function isMapDragging() {\n      return this.mapService.dragging;\n    }\n  }, {\n    key: \"runRender\",\n    value: function runRender() {\n      this.renderLayers();\n      this.layerRenderID = $window.requestAnimationFrame(this.runRender.bind(this));\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var color = rgb2arr(this.mapService.bgColor);\n      this.renderService.clear({\n        color: color,\n        depth: 1,\n        stencil: 0,\n        framebuffer: null\n      });\n    }\n  }, {\n    key: \"stopRender\",\n    value: function stopRender() {\n      $window.cancelAnimationFrame(this.layerRenderID);\n    }\n  }]);\n\n  return LayerService;\n}(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"renderService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"mapService\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"configService\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexport { LayerService as default };","map":{"version":3,"sources":["../../../src/services/layer/LayerService.ts"],"names":["injectable","LayerService","inject","TYPES","layer","layerIndex","parentLayer","childlayer","pre","next","child","$window","color","rgb2arr","depth","stencil","framebuffer"],"mappings":"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","sourcesContent":["import { $window, rgb2arr } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { ILayer } from '../..';\nimport { TYPES } from '../../types';\nimport Clock from '../../utils/clock';\nimport { IGlobalConfigService } from '../config/IConfigService';\nimport { IMapService } from '../map/IMapService';\nimport { IRendererService } from '../renderer/IRendererService';\nimport { ILayerModel, ILayerService } from './ILayerService';\n\n@injectable()\nexport default class LayerService implements ILayerService {\n  public clock = new Clock();\n\n  public alreadyInRendering: boolean = false;\n\n  private layers: ILayer[] = [];\n\n  private layerList: ILayer[] = [];\n\n  private layerRenderID: number;\n\n  private sceneInited: boolean = false;\n\n  private animateInstanceCount: number = 0;\n\n  @inject(TYPES.IRendererService)\n  private readonly renderService: IRendererService;\n\n  @inject(TYPES.IMapService)\n  private readonly mapService: IMapService;\n\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  public add(layer: ILayer) {\n    if (this.sceneInited) {\n      layer.init();\n    }\n    this.layers.push(layer);\n    this.updateLayerRenderList();\n  }\n\n  public initLayers() {\n    this.sceneInited = true;\n    this.layers.forEach((layer) => {\n      if (!layer.inited) {\n        layer.init();\n      }\n    });\n    this.updateLayerRenderList();\n  }\n\n  public getLayers(): ILayer[] {\n    return this.layers;\n  }\n\n  public getLayer(id: string): ILayer | undefined {\n    return this.layers.find((layer) => layer.id === id);\n  }\n\n  public getLayerByName(name: string): ILayer | undefined {\n    return this.layers.find((layer) => layer.name === name);\n  }\n\n  public remove(layer: ILayer, parentLayer?: ILayer): void {\n    // Tip: layer.layerChildren 当 layer 存在子图层的情况\n    if (parentLayer) {\n      const layerIndex = parentLayer.layerChildren.indexOf(layer);\n      if (layerIndex > -1) {\n        parentLayer.layerChildren.splice(layerIndex, 1);\n      }\n    } else {\n      const layerIndex = this.layers.indexOf(layer);\n      if (layerIndex > -1) {\n        this.layers.splice(layerIndex, 1);\n      }\n    }\n    this.updateLayerRenderList();\n    layer.destroy();\n    this.renderLayers();\n  }\n\n  public removeAllLayers() {\n    this.destroy();\n  }\n\n  public renderLayers() {\n    if (this.alreadyInRendering) {\n      return;\n    }\n    this.alreadyInRendering = true;\n    this.clear();\n\n    this.layerList.forEach((layer) => {\n      layer.hooks.beforeRenderData.call();\n      layer.hooks.beforeRender.call();\n      layer.render();\n      layer.hooks.afterRender.call();\n    });\n    this.alreadyInRendering = false;\n  }\n\n  public updateLayerRenderList() {\n    // TODO: 每次更新都是从 layers 重新构建\n    this.layerList = [];\n    this.layers\n      .filter((layer) => layer.inited)\n      .filter((layer) => layer.isVisible())\n      .forEach((layer) => {\n        this.layerList.push(layer);\n\n        // Tip: 渲染 layer 的子图层 默认 layerChildren 为空数组 表示没有子图层 目前只有 ImageTileLayer 有子图层\n        layer.layerChildren\n          .filter((childlayer) => childlayer.inited)\n          .filter((childlayer) => childlayer.isVisible())\n          .forEach((childlayer) => {\n            this.layerList.push(childlayer);\n          });\n      });\n\n    // 根据 zIndex 对渲染顺序进行排序\n    this.layerList.sort((pre: ILayer, next: ILayer) => {\n      return pre.zIndex - next.zIndex;\n    });\n  }\n\n  public destroy() {\n    this.layers.forEach((layer) => {\n      // Tip: layer.layerChildren 当 layer 存在子图层的情况\n      if (layer.layerChildren) {\n        layer.layerChildren.forEach((child) => child.destroy());\n        layer.layerChildren = [];\n      }\n      layer.destroy();\n    });\n    this.layers = [];\n    this.layerList = [];\n    this.renderLayers();\n  }\n\n  public startAnimate() {\n    if (this.animateInstanceCount++ === 0) {\n      this.clock.start();\n      this.runRender();\n    }\n  }\n\n  public stopAnimate() {\n    if (--this.animateInstanceCount === 0) {\n      this.stopRender();\n      this.clock.stop();\n    }\n  }\n\n  public getOESTextureFloat() {\n    return this.renderService.extensionObject.OES_texture_float;\n  }\n\n  // TODO: 判断地图是否正在被拖动\n  public isMapDragging() {\n    return this.mapService.dragging;\n  }\n\n  private runRender() {\n    this.renderLayers();\n    this.layerRenderID = $window.requestAnimationFrame(\n      this.runRender.bind(this),\n    );\n  }\n\n  private clear() {\n    const color = rgb2arr(this.mapService.bgColor) as [\n      number,\n      number,\n      number,\n      number,\n    ];\n    this.renderService.clear({\n      color,\n      depth: 1,\n      stencil: 0,\n      framebuffer: null,\n    });\n  }\n\n  private stopRender() {\n    $window.cancelAnimationFrame(this.layerRenderID);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}