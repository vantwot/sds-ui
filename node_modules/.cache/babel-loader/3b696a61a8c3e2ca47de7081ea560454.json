{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport React from 'react';\nimport { useXFlowApp, DisposableCollection, createComponentModel } from '@antv/xflow-core';\nimport { XFlowModelCommands, Disposable, MODELS } from '@antv/xflow-core';\nexport var NsJsonSchemaFormModel;\n\n(function (NsJsonSchemaFormModel) {\n  NsJsonSchemaFormModel.id = 'XFLOW_JSON_SCHEMA_FORM';\n\n  NsJsonSchemaFormModel.useModel = model => __awaiter(this, void 0, void 0, function* () {\n    return model.awaitModel(NsJsonSchemaFormModel.id);\n  });\n})(NsJsonSchemaFormModel || (NsJsonSchemaFormModel = {}));\n/** 方便其他组件执行Command改变Panel内部状态 */\n\n\nexport const executeJsonSchemaFormCommand = (cmds, updateModel) => {\n  cmds.executeCommand(XFlowModelCommands.UPDATE_MODEL.id, {\n    getModel: modelService => __awaiter(void 0, void 0, void 0, function* () {\n      return NsJsonSchemaFormModel.useModel(modelService);\n    }),\n    updateModel: updateModel\n  });\n};\nexport const useJsonSchemaFormModel = props => {\n  const app = useXFlowApp();\n  const {\n    commandService,\n    modelService\n  } = app;\n  const {\n    formSchemaService\n  } = props;\n  const [state, setState, model, isModelReady] = createComponentModel({\n    schema: {\n      tabs: []\n    },\n    targetType: null,\n    targetData: null,\n    targetCell: null,\n    loading: false\n  });\n  /** 注册全局的model */\n\n  React.useEffect(() => {\n    if (!app || !app.modelService) {\n      return;\n    }\n\n    const toDispose = new DisposableCollection();\n    const deferredModel = app.modelService.findDeferredModel(NsJsonSchemaFormModel.id);\n\n    if (!deferredModel) {\n      const d = app.modelService.registerModel({\n        id: NsJsonSchemaFormModel.id,\n        modelFactory: () => model,\n\n        /** 监听SELECTED_CELL的变化 */\n        watchChange: (self, modelSerccie) => __awaiter(void 0, void 0, void 0, function* () {\n          const selectedCellModel = yield MODELS.SELECTED_CELL.getModel(modelSerccie);\n          const nodeDisposable = selectedCellModel.watch(cell => __awaiter(void 0, void 0, void 0, function* () {\n            const updateState = (targetCell, type) => __awaiter(void 0, void 0, void 0, function* () {\n              self.setValue(m => {\n                m.loading = true;\n                m.schema = {\n                  tabs: []\n                };\n                m.targetType = null;\n                m.targetData = null;\n                m.targetCell = null;\n              });\n              const targetData = targetCell ? targetCell.getData() : null;\n\n              if (!formSchemaService) {\n                return;\n              }\n\n              const schema = yield formSchemaService({\n                commandService,\n                modelService,\n                targetData,\n                cell: targetCell,\n                targetType: type\n              });\n              self.setValue({\n                loading: false,\n                schema: schema,\n                targetType: type,\n                targetCell: targetCell,\n                targetData: targetData\n              });\n            });\n\n            const getCellType = targetCell => {\n              if (!targetCell) {\n                return 'canvas';\n              } else if (targetCell.isNode && targetCell.isNode() && targetCell.getProp('isGroup')) {\n                return 'group';\n              } else if (targetCell.isNode && targetCell.isNode()) {\n                return 'node';\n              } else if (targetCell.isEdge && targetCell.isEdge()) {\n                return 'edge';\n              } else {\n                return 'canvas';\n              }\n            };\n\n            const targetCellType = getCellType(cell);\n\n            if ((props.targetType || ['node', 'canvas']).includes(targetCellType)) {\n              yield updateState(cell, targetCellType);\n            }\n          }));\n          return Disposable.create(() => {\n            nodeDisposable.dispose();\n            toDispose.push(nodeDisposable);\n          });\n        })\n      });\n      toDispose.push(d);\n    }\n\n    return () => {\n      toDispose.dispose();\n    };\n    /* eslint-disable-next-line  */\n  }, []);\n  return {\n    commandService,\n    modelService,\n    state,\n    setState,\n    model,\n    isModelReady\n  };\n};","map":{"version":3,"sources":["../../src/canvas-json-schema-form/service.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport React from 'react';\nimport { useXFlowApp, DisposableCollection, createComponentModel } from '@antv/xflow-core';\nimport { XFlowModelCommands, Disposable, MODELS } from '@antv/xflow-core';\nexport var NsJsonSchemaFormModel;\n(function (NsJsonSchemaFormModel) {\n    NsJsonSchemaFormModel.id = 'XFLOW_JSON_SCHEMA_FORM';\n    NsJsonSchemaFormModel.useModel = (model) => __awaiter(this, void 0, void 0, function* () {\n        return model.awaitModel(NsJsonSchemaFormModel.id);\n    });\n})(NsJsonSchemaFormModel || (NsJsonSchemaFormModel = {}));\n/** 方便其他组件执行Command改变Panel内部状态 */\nexport const executeJsonSchemaFormCommand = (cmds, updateModel) => {\n    cmds.executeCommand(XFlowModelCommands.UPDATE_MODEL.id, {\n        getModel: (modelService) => __awaiter(void 0, void 0, void 0, function* () {\n            return NsJsonSchemaFormModel.useModel(modelService);\n        }),\n        updateModel: updateModel,\n    });\n};\nexport const useJsonSchemaFormModel = (props) => {\n    const app = useXFlowApp();\n    const { commandService, modelService } = app;\n    const { formSchemaService } = props;\n    const [state, setState, model, isModelReady] = createComponentModel({\n        schema: { tabs: [] },\n        targetType: null,\n        targetData: null,\n        targetCell: null,\n        loading: false,\n    });\n    /** 注册全局的model */\n    React.useEffect(() => {\n        if (!app || !app.modelService) {\n            return;\n        }\n        const toDispose = new DisposableCollection();\n        const deferredModel = app.modelService.findDeferredModel(NsJsonSchemaFormModel.id);\n        if (!deferredModel) {\n            const d = app.modelService.registerModel({\n                id: NsJsonSchemaFormModel.id,\n                modelFactory: () => model,\n                /** 监听SELECTED_CELL的变化 */\n                watchChange: (self, modelSerccie) => __awaiter(void 0, void 0, void 0, function* () {\n                    const selectedCellModel = yield MODELS.SELECTED_CELL.getModel(modelSerccie);\n                    const nodeDisposable = selectedCellModel.watch((cell) => __awaiter(void 0, void 0, void 0, function* () {\n                        const updateState = (targetCell, type) => __awaiter(void 0, void 0, void 0, function* () {\n                            self.setValue(m => {\n                                m.loading = true;\n                                m.schema = { tabs: [] };\n                                m.targetType = null;\n                                m.targetData = null;\n                                m.targetCell = null;\n                            });\n                            const targetData = targetCell ? targetCell.getData() : null;\n                            if (!formSchemaService) {\n                                return;\n                            }\n                            const schema = yield formSchemaService({\n                                commandService,\n                                modelService,\n                                targetData,\n                                cell: targetCell,\n                                targetType: type,\n                            });\n                            self.setValue({\n                                loading: false,\n                                schema: schema,\n                                targetType: type,\n                                targetCell: targetCell,\n                                targetData: targetData,\n                            });\n                        });\n                        const getCellType = (targetCell) => {\n                            if (!targetCell) {\n                                return 'canvas';\n                            }\n                            else if (targetCell.isNode &&\n                                targetCell.isNode() &&\n                                targetCell.getProp('isGroup')) {\n                                return 'group';\n                            }\n                            else if (targetCell.isNode && targetCell.isNode()) {\n                                return 'node';\n                            }\n                            else if (targetCell.isEdge && targetCell.isEdge()) {\n                                return 'edge';\n                            }\n                            else {\n                                return 'canvas';\n                            }\n                        };\n                        const targetCellType = getCellType(cell);\n                        if ((props.targetType || ['node', 'canvas']).includes(targetCellType)) {\n                            yield updateState(cell, targetCellType);\n                        }\n                    }));\n                    return Disposable.create(() => {\n                        nodeDisposable.dispose();\n                        toDispose.push(nodeDisposable);\n                    });\n                }),\n            });\n            toDispose.push(d);\n        }\n        return () => {\n            toDispose.dispose();\n        };\n        /* eslint-disable-next-line  */\n    }, []);\n    return { commandService, modelService, state, setState, model, isModelReady };\n};\n//# sourceMappingURL=service.js.map"]},"metadata":{},"sourceType":"module"}