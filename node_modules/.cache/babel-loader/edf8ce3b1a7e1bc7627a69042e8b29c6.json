{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Base } from '../base';\nimport { Point } from '../../geometry';\nimport { ObjectExt } from '../../util';\nexport class Poly extends Base {\n  get points() {\n    return this.getPoints();\n  }\n\n  set points(pts) {\n    this.setPoints(pts);\n  }\n\n  getPoints() {\n    return this.getAttrByPath('body/refPoints');\n  }\n\n  setPoints(points, options) {\n    if (points == null) {\n      this.removePoints();\n    } else {\n      this.setAttrByPath('body/refPoints', Poly.pointsToString(points), options);\n    }\n\n    return this;\n  }\n\n  removePoints() {\n    this.removeAttrByPath('body/refPoints');\n    return this;\n  }\n\n}\n\n(function (Poly) {\n  function pointsToString(points) {\n    return typeof points === 'string' ? points : points.map(p => {\n      if (Array.isArray(p)) {\n        return p.join(',');\n      }\n\n      if (Point.isPointLike(p)) {\n        return `${p.x}, ${p.y}`;\n      }\n\n      return '';\n    }).join(' ');\n  }\n\n  Poly.pointsToString = pointsToString;\n  Poly.config({\n    propHooks(metadata) {\n      const {\n        points\n      } = metadata,\n            others = __rest(metadata, [\"points\"]);\n\n      if (points) {\n        const data = pointsToString(points);\n\n        if (data) {\n          ObjectExt.setByPath(others, 'attrs/body/refPoints', data);\n        }\n      }\n\n      return others;\n    }\n\n  });\n})(Poly || (Poly = {}));","map":{"version":3,"sources":["../../../src/shape/standard/poly.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,SAAS,IAAT,QAAqB,SAArB;AACA,SAAS,KAAT,QAAsB,gBAAtB;AAEA,SAAS,SAAT,QAA0B,YAA1B;AAEA,OAAM,MAAO,IAAP,SAAoB,IAApB,CAAwB;AAClB,MAAN,MAAM,GAAA;AACR,WAAO,KAAK,SAAL,EAAP;AACD;;AAES,MAAN,MAAM,CAAC,GAAD,EAA+B;AACvC,SAAK,SAAL,CAAe,GAAf;AACD;;AAED,EAAA,SAAS,GAAA;AACP,WAAO,KAAK,aAAL,CAA2B,gBAA3B,CAAP;AACD;;AAED,EAAA,SAAS,CACP,MADO,EAEP,OAFO,EAEkB;AAEzB,QAAI,MAAM,IAAI,IAAd,EAAoB;AAClB,WAAK,YAAL;AACD,KAFD,MAEO;AACL,WAAK,aAAL,CAAmB,gBAAnB,EAAqC,IAAI,CAAC,cAAL,CAAoB,MAApB,CAArC,EAAkE,OAAlE;AACD;;AAED,WAAO,IAAP;AACD;;AAED,EAAA,YAAY,GAAA;AACV,SAAK,gBAAL,CAAsB,gBAAtB;AACA,WAAO,IAAP;AACD;;AA7B2B;;AAgC9B,CAAA,UAAiB,IAAjB,EAAqB;AACnB,WAAgB,cAAhB,CACE,MADF,EACwD;AAEtD,WAAO,OAAO,MAAP,KAAkB,QAAlB,GACH,MADG,GAEF,MAA4B,CAC1B,GADF,CACO,CAAD,IAAM;AACT,UAAI,KAAK,CAAC,OAAN,CAAc,CAAd,CAAJ,EAAsB;AACpB,eAAO,CAAC,CAAC,IAAF,CAAO,GAAP,CAAP;AACD;;AACD,UAAI,KAAK,CAAC,WAAN,CAAkB,CAAlB,CAAJ,EAA0B;AACxB,eAAO,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAArB;AACD;;AACD,aAAO,EAAP;AACD,KATF,EAUE,IAVF,CAUO,GAVP,CAFL;AAaD;;AAhBe,EAAA,IAAA,CAAA,cAAA,GAAc,cAAd;AAkBhB,EAAA,IAAI,CAAC,MAAL,CAAY;AACV,IAAA,SAAS,CAAC,QAAD,EAAS;AAChB,YAAM;AAAE,QAAA;AAAF,UAAwB,QAA9B;AAAA,YAAmB,MAAM,GAAA,MAAA,CAAK,QAAL,EAAnB,CAAA,QAAA,CAAmB,CAAzB;;AACA,UAAI,MAAJ,EAAY;AACV,cAAM,IAAI,GAAG,cAAc,CAAC,MAAD,CAA3B;;AACA,YAAI,IAAJ,EAAU;AACR,UAAA,SAAS,CAAC,SAAV,CAAoB,MAApB,EAA4B,sBAA5B,EAAoD,IAApD;AACD;AACF;;AACD,aAAO,MAAP;AACD;;AAVS,GAAZ;AAYD,CA/BD,EAAiB,IAAI,KAAJ,IAAI,GAAA,EAAA,CAArB","sourceRoot":"","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { Base } from '../base';\nimport { Point } from '../../geometry';\nimport { ObjectExt } from '../../util';\nexport class Poly extends Base {\n    get points() {\n        return this.getPoints();\n    }\n    set points(pts) {\n        this.setPoints(pts);\n    }\n    getPoints() {\n        return this.getAttrByPath('body/refPoints');\n    }\n    setPoints(points, options) {\n        if (points == null) {\n            this.removePoints();\n        }\n        else {\n            this.setAttrByPath('body/refPoints', Poly.pointsToString(points), options);\n        }\n        return this;\n    }\n    removePoints() {\n        this.removeAttrByPath('body/refPoints');\n        return this;\n    }\n}\n(function (Poly) {\n    function pointsToString(points) {\n        return typeof points === 'string'\n            ? points\n            : points\n                .map((p) => {\n                if (Array.isArray(p)) {\n                    return p.join(',');\n                }\n                if (Point.isPointLike(p)) {\n                    return `${p.x}, ${p.y}`;\n                }\n                return '';\n            })\n                .join(' ');\n    }\n    Poly.pointsToString = pointsToString;\n    Poly.config({\n        propHooks(metadata) {\n            const { points } = metadata, others = __rest(metadata, [\"points\"]);\n            if (points) {\n                const data = pointsToString(points);\n                if (data) {\n                    ObjectExt.setByPath(others, 'attrs/body/refPoints', data);\n                }\n            }\n            return others;\n        },\n    });\n})(Poly || (Poly = {}));\n//# sourceMappingURL=poly.js.map"]},"metadata":{},"sourceType":"module"}