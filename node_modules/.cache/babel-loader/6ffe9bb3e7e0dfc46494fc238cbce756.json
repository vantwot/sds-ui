{"ast":null,"code":"import _regeneratorRuntime from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { inject, injectable } from 'mana-syringe';\nimport { HookHub } from '@antv/xflow-hook';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands, XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsDelNode;\n\n(function (NsDelNode) {\n  /** Command: 用于注册named factory */\n  NsDelNode.command = XFlowNodeCommands.DEL_NODE;\n  /** hook name */\n\n  NsDelNode.hookKey = 'delNode';\n  /** 创建 hook */\n\n  NsDelNode.createHook = function () {\n    return new HookHub();\n  };\n})(NsDelNode || (NsDelNode = {}));\n\nvar DelNodeCommand =\n/*#__PURE__*/\n\n/** 创建节点命令 */\nfunction () {\n  function DelNodeCommand() {\n    var _this = this;\n\n    _classCallCheck(this, DelNodeCommand);\n\n    /** 执行Cmd */\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var ctx, _ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                ctx = this.contextProvider();\n                _ctx$getArgs = ctx.getArgs(), args = _ctx$getArgs.args, runtimeHook = _ctx$getArgs.hooks;\n                hooks = ctx.getHooks();\n                _context3.next = 5;\n                return hooks.delNode.call(args, function (handlerArgs) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var _this3 = this;\n\n                    var commandService, deleteNodeService, graph, canDel, nodeId, nodeCell, edges, nodeConfig;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            commandService = handlerArgs.commandService, deleteNodeService = handlerArgs.deleteNodeService;\n                            _context2.next = 3;\n                            return ctx.getX6Graph();\n\n                          case 3:\n                            graph = _context2.sent;\n\n                            if (!deleteNodeService) {\n                              _context2.next = 10;\n                              break;\n                            }\n\n                            _context2.next = 7;\n                            return deleteNodeService(handlerArgs);\n\n                          case 7:\n                            canDel = _context2.sent;\n\n                            if (canDel) {\n                              _context2.next = 10;\n                              break;\n                            }\n\n                            return _context2.abrupt(\"return\", {\n                              err: ' service rejected'\n                            });\n\n                          case 10:\n                            nodeId = (handlerArgs.x6Node || handlerArgs.nodeConfig).id;\n                            nodeCell = graph.getCellById(nodeId);\n\n                            if (!(nodeCell && nodeCell.isNode())) {\n                              _context2.next = 20;\n                              break;\n                            }\n\n                            /** 先清理连线 */\n                            edges = [].concat(_toConsumableArray(graph.getIncomingEdges(nodeCell) || []), _toConsumableArray(graph.getOutgoingEdges(nodeCell) || []));\n                            _context2.next = 16;\n                            return Promise.all(edges.map(function (edge) {\n                              return commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, {\n                                x6Edge: edge\n                              });\n                            }));\n\n                          case 16:\n                            /** 再清理节点 */\n                            nodeConfig = nodeCell.getData();\n                            nodeCell.remove();\n                            /** add undo: delete node */\n\n                            /** add undo: delete node */\n                            ctx.addUndo(Disposable.create(function () {\n                              return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                  while (1) {\n                                    switch (_context.prev = _context.next) {\n                                      case 0:\n                                        _context.next = 2;\n                                        return commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n                                          nodeConfig: nodeConfig\n                                        });\n\n                                      case 2:\n                                      case \"end\":\n                                        return _context.stop();\n                                    }\n                                  }\n                                }, _callee);\n                              }));\n                            }));\n                            return _context2.abrupt(\"return\", {\n                              err: null,\n                              nodeConfig: nodeConfig\n                            });\n\n                          case 20:\n                            return _context2.abrupt(\"return\", {\n                              err: 'node is not exist'\n                            });\n\n                          case 21:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n                }, runtimeHook);\n\n              case 5:\n                result = _context3.sent;\n                ctx.setResult(result);\n                return _context3.abrupt(\"return\", this);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n    /** undo cmd */\n\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var ctx;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.isUndoable()) {\n                  ctx = this.contextProvider();\n                  ctx.undo();\n                }\n\n                return _context4.abrupt(\"return\", this);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n    /** redo cmd */\n\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this.isUndoable()) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                _context5.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context5.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    };\n  }\n\n  _createClass(DelNodeCommand, [{\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      var ctx = this.contextProvider();\n      return ctx.isUndoable();\n    }\n  }]);\n\n  return DelNodeCommand;\n}();\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], DelNodeCommand.prototype, \"contextProvider\", void 0);\n\nDelNodeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsDelNode.command.id\n  }\n})\n/** 创建节点命令 */\n], DelNodeCommand);\nexport { DelNodeCommand };","map":{"version":3,"sources":["../../../src/command-contributions/node/node-del.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { inject, injectable } from 'mana-syringe';\nimport { HookHub } from '@antv/xflow-hook';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands, XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsDelNode;\n(function (NsDelNode) {\n    /** Command: 用于注册named factory */\n    NsDelNode.command = XFlowNodeCommands.DEL_NODE;\n    /** hook name */\n    NsDelNode.hookKey = 'delNode';\n    /** 创建 hook */\n    NsDelNode.createHook = () => {\n        return new HookHub();\n    };\n})(NsDelNode || (NsDelNode = {}));\nlet DelNodeCommand = \n/** 创建节点命令 */\nclass DelNodeCommand {\n    constructor() {\n        /** 执行Cmd */\n        this.execute = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            const { args, hooks: runtimeHook } = ctx.getArgs();\n            const hooks = ctx.getHooks();\n            const result = yield hooks.delNode.call(args, (handlerArgs) => __awaiter(this, void 0, void 0, function* () {\n                const { commandService, deleteNodeService } = handlerArgs;\n                const graph = yield ctx.getX6Graph();\n                if (deleteNodeService) {\n                    const canDel = yield deleteNodeService(handlerArgs);\n                    if (!canDel)\n                        return { err: ' service rejected' };\n                }\n                const nodeId = (handlerArgs.x6Node || handlerArgs.nodeConfig).id;\n                const nodeCell = graph.getCellById(nodeId);\n                if (nodeCell && nodeCell.isNode()) {\n                    /** 先清理连线 */\n                    const edges = [\n                        ...(graph.getIncomingEdges(nodeCell) || []),\n                        ...(graph.getOutgoingEdges(nodeCell) || []),\n                    ];\n                    yield Promise.all(edges.map(edge => {\n                        return commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, {\n                            x6Edge: edge,\n                        });\n                    }));\n                    /** 再清理节点 */\n                    const nodeConfig = nodeCell.getData();\n                    nodeCell.remove();\n                    /** add undo: delete node */\n                    ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n                        yield commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n                            nodeConfig,\n                        });\n                        // TODO: 支持线和节点的undo\n                        // 通过 sequence mapping 出新的port id\n                        // const nodeCtx = nodeCmd.contextProvider()\n                        // const { nodeCell } = nodeCtx.getResult()\n                        // edgeCmds.forEach(async cmd => {\n                        //   const c = cmd.contextProvider()\n                        //   const { edgeConfig } = c.getResult()\n                        // })\n                    })));\n                    return { err: null, nodeConfig };\n                }\n                return { err: 'node is not exist' };\n            }), runtimeHook);\n            ctx.setResult(result);\n            return this;\n        });\n        /** undo cmd */\n        this.undo = () => __awaiter(this, void 0, void 0, function* () {\n            if (this.isUndoable()) {\n                const ctx = this.contextProvider();\n                ctx.undo();\n            }\n            return this;\n        });\n        /** redo cmd */\n        this.redo = () => __awaiter(this, void 0, void 0, function* () {\n            if (!this.isUndoable()) {\n                yield this.execute();\n            }\n            return this;\n        });\n    }\n    isUndoable() {\n        const ctx = this.contextProvider();\n        return ctx.isUndoable();\n    }\n};\n__decorate([\n    inject(ICommandContextProvider),\n    __metadata(\"design:type\", Object)\n], DelNodeCommand.prototype, \"contextProvider\", void 0);\nDelNodeCommand = __decorate([\n    injectable({\n        token: { token: ICommandHandler, named: NsDelNode.command.id },\n    })\n    /** 创建节点命令 */\n], DelNodeCommand);\nexport { DelNodeCommand };\n//# sourceMappingURL=node-del.js.map"]},"metadata":{},"sourceType":"module"}