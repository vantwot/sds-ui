{"ast":null,"code":"import _defineProperty from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Util } from '../../global';\nimport { Rectangle, Angle } from '../../geometry';\nimport { ObjectExt, StringExt, FunctionExt } from '../../util';\nimport { Cell } from '../../model/cell';\nimport { Collection } from '../../model/collection';\nimport { View } from '../../view/view';\nimport { notify } from '../transform/util';\nimport { Handle } from '../common';\nexport var Selection = /*#__PURE__*/function (_View) {\n  _inherits(Selection, _View);\n\n  var _super = _createSuper(Selection);\n\n  function Selection(options) {\n    var _this;\n\n    _classCallCheck(this, Selection);\n\n    _this = _super.call(this);\n    _this.options = ObjectExt.merge({}, Private.defaultOptions, options);\n\n    if (_this.options.model) {\n      _this.options.collection = _this.options.model.collection;\n    }\n\n    if (_this.options.collection) {\n      _this.collection = _this.options.collection;\n    } else {\n      _this.collection = new Collection([], {\n        comparator: Private.depthComparator\n      });\n      _this.options.collection = _this.collection;\n    }\n\n    _this.boxCount = 0;\n\n    _this.createContainer();\n\n    _this.initHandles();\n\n    _this.startListening();\n\n    return _this;\n  }\n\n  _createClass(Selection, [{\n    key: \"graph\",\n    get: function get() {\n      return this.options.graph;\n    }\n  }, {\n    key: \"boxClassName\",\n    get: function get() {\n      return this.prefixClassName(Private.classNames.box);\n    }\n  }, {\n    key: \"$boxes\",\n    get: function get() {\n      return this.$container.children(\".\".concat(this.boxClassName));\n    }\n  }, {\n    key: \"handleOptions\",\n    get: function get() {\n      return this.options;\n    }\n  }, {\n    key: \"startListening\",\n    value: function startListening() {\n      var _this$delegateEvents;\n\n      var graph = this.graph;\n      var collection = this.collection;\n      this.delegateEvents((_this$delegateEvents = {}, _defineProperty(_this$delegateEvents, \"mousedown .\".concat(this.boxClassName), 'onSelectionBoxMouseDown'), _defineProperty(_this$delegateEvents, \"touchstart .\".concat(this.boxClassName), 'onSelectionBoxMouseDown'), _this$delegateEvents), true);\n      graph.on('scale', this.onGraphTransformed, this);\n      graph.on('translate', this.onGraphTransformed, this);\n      graph.model.on('updated', this.onModelUpdated, this);\n      collection.on('added', this.onCellAdded, this);\n      collection.on('removed', this.onCellRemoved, this);\n      collection.on('reseted', this.onReseted, this);\n      collection.on('updated', this.onCollectionUpdated, this);\n      collection.on('node:change:position', this.onNodePositionChanged, this);\n      collection.on('cell:changed', this.onCellChanged, this);\n    }\n  }, {\n    key: \"stopListening\",\n    value: function stopListening() {\n      var graph = this.graph;\n      var collection = this.collection;\n      this.undelegateEvents();\n      graph.off('scale', this.onGraphTransformed, this);\n      graph.off('translate', this.onGraphTransformed, this);\n      graph.model.off('updated', this.onModelUpdated, this);\n      collection.off('added', this.onCellAdded, this);\n      collection.off('removed', this.onCellRemoved, this);\n      collection.off('reseted', this.onReseted, this);\n      collection.off('updated', this.onCollectionUpdated, this);\n      collection.off('node:change:position', this.onNodePositionChanged, this);\n      collection.off('cell:changed', this.onCellChanged, this);\n    }\n  }, {\n    key: \"onRemove\",\n    value: function onRemove() {\n      this.stopListening();\n    }\n  }, {\n    key: \"onGraphTransformed\",\n    value: function onGraphTransformed() {\n      this.updateSelectionBoxes({\n        async: false\n      });\n    }\n  }, {\n    key: \"onCellChanged\",\n    value: function onCellChanged() {\n      this.updateSelectionBoxes();\n    }\n  }, {\n    key: \"onNodePositionChanged\",\n    value: function onNodePositionChanged(_ref) {\n      var node = _ref.node,\n          options = _ref.options;\n      var _this$options = this.options,\n          showNodeSelectionBox = _this$options.showNodeSelectionBox,\n          pointerEvents = _this$options.pointerEvents;\n      var ui = options.ui,\n          selection = options.selection;\n      var allowTranslating = !this.translating;\n      /* Scenarios where this method is not called:\n       * 1. ShowNodeSelection is true or ponterEvents is none\n       * 2. Avoid circular calls with the selection tag\n       */\n\n      allowTranslating = allowTranslating && (showNodeSelectionBox !== true || pointerEvents === 'none');\n      allowTranslating = allowTranslating && ui && !selection;\n\n      if (allowTranslating) {\n        this.translating = true;\n        var current = node.position();\n        var previous = node.previous('position');\n        var dx = current.x - previous.x;\n        var dy = current.y - previous.y;\n\n        if (dx !== 0 || dy !== 0) {\n          this.translateSelectedNodes(dx, dy, node, options);\n        }\n\n        this.translating = false;\n      }\n    }\n  }, {\n    key: \"onModelUpdated\",\n    value: function onModelUpdated(_ref2) {\n      var removed = _ref2.removed;\n\n      if (removed && removed.length) {\n        this.unselect(removed);\n      }\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.length <= 0;\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(cell) {\n      return this.collection.has(cell);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.collection.length;\n    }\n  }, {\n    key: \"cells\",\n    get: function get() {\n      return this.collection.toArray();\n    }\n  }, {\n    key: \"select\",\n    value: function select(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      options.dryrun = true;\n      var items = this.filter(Array.isArray(cells) ? cells : [cells]);\n      this.collection.add(items, options);\n      return this;\n    }\n  }, {\n    key: \"unselect\",\n    value: function unselect(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // dryrun to prevent cell be removed from graph\n      options.dryrun = true;\n      this.collection.remove(Array.isArray(cells) ? cells : [cells], options);\n      return this;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (cells) {\n        if (options.batch) {\n          var filterCells = this.filter(Array.isArray(cells) ? cells : [cells]);\n          this.collection.reset(filterCells, Object.assign(Object.assign({}, options), {\n            ui: true\n          }));\n          return this;\n        }\n\n        var prev = this.cells;\n        var next = this.filter(Array.isArray(cells) ? cells : [cells]);\n        var prevMap = {};\n        var nextMap = {};\n        prev.forEach(function (cell) {\n          return prevMap[cell.id] = cell;\n        });\n        next.forEach(function (cell) {\n          return nextMap[cell.id] = cell;\n        });\n        var added = [];\n        var removed = [];\n        next.forEach(function (cell) {\n          if (!prevMap[cell.id]) {\n            added.push(cell);\n          }\n        });\n        prev.forEach(function (cell) {\n          if (!nextMap[cell.id]) {\n            removed.push(cell);\n          }\n        });\n\n        if (removed.length) {\n          this.unselect(removed, Object.assign(Object.assign({}, options), {\n            ui: true\n          }));\n        }\n\n        if (added.length) {\n          this.select(added, Object.assign(Object.assign({}, options), {\n            ui: true\n          }));\n        }\n\n        if (removed.length === 0 && added.length === 0) {\n          this.updateContainer();\n        }\n\n        return this;\n      }\n\n      return this.clean(options);\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (this.length) {\n        if (options.batch === false) {\n          this.unselect(this.cells, options);\n        } else {\n          this.collection.reset([], Object.assign(Object.assign({}, options), {\n            ui: true\n          }));\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setFilter\",\n    value: function setFilter(filter) {\n      this.options.filter = filter;\n    }\n  }, {\n    key: \"setContent\",\n    value: function setContent(content) {\n      this.options.content = content;\n    }\n  }, {\n    key: \"startSelecting\",\n    value: function startSelecting(evt) {\n      // Flow: startSelecting => adjustSelection => stopSelecting\n      evt = this.normalizeEvent(evt); // eslint-disable-line\n\n      this.clean();\n      var x;\n      var y;\n      var graphContainer = this.graph.container;\n\n      if (evt.offsetX != null && evt.offsetY != null && graphContainer.contains(evt.target)) {\n        x = evt.offsetX;\n        y = evt.offsetY;\n      } else {\n        var offset = this.$(graphContainer).offset();\n        var scrollLeft = graphContainer.scrollLeft;\n        var scrollTop = graphContainer.scrollTop;\n        x = evt.clientX - offset.left + window.pageXOffset + scrollLeft;\n        y = evt.clientY - offset.top + window.pageYOffset + scrollTop;\n      }\n\n      this.$container.css({\n        top: y,\n        left: x,\n        width: 1,\n        height: 1\n      });\n      this.setEventData(evt, {\n        action: 'selecting',\n        clientX: evt.clientX,\n        clientY: evt.clientY,\n        offsetX: x,\n        offsetY: y,\n        scrollerX: 0,\n        scrollerY: 0\n      });\n      this.delegateDocumentEvents(Private.documentEvents, evt.data);\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(cells) {\n      var _this2 = this;\n\n      var filter = this.options.filter;\n\n      if (Array.isArray(filter)) {\n        return cells.filter(function (cell) {\n          return !filter.includes(cell) && !filter.includes(cell.shape);\n        });\n      }\n\n      if (typeof filter === 'function') {\n        return cells.filter(function (cell) {\n          return FunctionExt.call(filter, _this2.graph, cell);\n        });\n      }\n\n      return cells;\n    }\n  }, {\n    key: \"stopSelecting\",\n    value: function stopSelecting(evt) {\n      var graph = this.graph;\n      var eventData = this.getEventData(evt);\n      var action = eventData.action;\n\n      switch (action) {\n        case 'selecting':\n          {\n            var width = this.$container.width();\n            var height = this.$container.height();\n            var offset = this.$container.offset();\n            var origin = graph.pageToLocal(offset.left, offset.top);\n            var scale = graph.transform.getScale();\n            width /= scale.sx;\n            height /= scale.sy;\n            var rect = new Rectangle(origin.x, origin.y, width, height);\n            var cells = this.getCellViewsInArea(rect).map(function (view) {\n              return view.cell;\n            });\n            this.reset(cells, {\n              batch: true\n            });\n            this.hideRubberband();\n            break;\n          }\n\n        case 'translating':\n          {\n            var client = graph.snapToGrid(evt.clientX, evt.clientY);\n\n            if (!this.options.following) {\n              var data = eventData;\n              this.updateSelectedNodesPosition({\n                dx: data.clientX - data.originX,\n                dy: data.clientY - data.originY\n              });\n            }\n\n            this.graph.model.stopBatch('move-selection');\n            this.notifyBoxEvent('box:mouseup', evt, client.x, client.y);\n            break;\n          }\n\n        default:\n          {\n            this.clean();\n            break;\n          }\n      }\n    }\n  }, {\n    key: \"onMouseUp\",\n    value: function onMouseUp(evt) {\n      var action = this.getEventData(evt).action;\n\n      if (action) {\n        this.stopSelecting(evt);\n        this.undelegateDocumentEvents();\n      }\n    }\n  }, {\n    key: \"onSelectionBoxMouseDown\",\n    value: function onSelectionBoxMouseDown(evt) {\n      if (!this.options.following) {\n        evt.stopPropagation();\n      }\n\n      var e = this.normalizeEvent(evt);\n\n      if (this.options.movable) {\n        this.startTranslating(e);\n      }\n\n      var activeView = this.getCellViewFromElem(e.target);\n      this.setEventData(e, {\n        activeView: activeView\n      });\n      var client = this.graph.snapToGrid(e.clientX, e.clientY);\n      this.notifyBoxEvent('box:mousedown', e, client.x, client.y);\n      this.delegateDocumentEvents(Private.documentEvents, e.data);\n    }\n  }, {\n    key: \"startTranslating\",\n    value: function startTranslating(evt) {\n      this.graph.model.startBatch('move-selection');\n      var client = this.graph.snapToGrid(evt.clientX, evt.clientY);\n      this.setEventData(evt, {\n        action: 'translating',\n        clientX: client.x,\n        clientY: client.y,\n        originX: client.x,\n        originY: client.y\n      });\n    }\n  }, {\n    key: \"getSelectionOffset\",\n    value: function getSelectionOffset(client, data) {\n      var dx = client.x - data.clientX;\n      var dy = client.y - data.clientY;\n      var restrict = this.graph.hook.getRestrictArea();\n\n      if (restrict) {\n        var cells = this.collection.toArray();\n        var totalBBox = Cell.getCellsBBox(cells, {\n          deep: true\n        }) || Rectangle.create();\n        var minDx = restrict.x - totalBBox.x;\n        var minDy = restrict.y - totalBBox.y;\n        var maxDx = restrict.x + restrict.width - (totalBBox.x + totalBBox.width);\n        var maxDy = restrict.y + restrict.height - (totalBBox.y + totalBBox.height);\n\n        if (dx < minDx) {\n          dx = minDx;\n        }\n\n        if (dy < minDy) {\n          dy = minDy;\n        }\n\n        if (maxDx < dx) {\n          dx = maxDx;\n        }\n\n        if (maxDy < dy) {\n          dy = maxDy;\n        }\n\n        if (!this.options.following) {\n          var offsetX = client.x - data.originX;\n          var offsetY = client.y - data.originY;\n          dx = offsetX <= minDx || offsetX >= maxDx ? 0 : dx;\n          dy = offsetY <= minDy || offsetY >= maxDy ? 0 : dy;\n        }\n      }\n\n      return {\n        dx: dx,\n        dy: dy\n      };\n    }\n  }, {\n    key: \"updateSelectedNodesPosition\",\n    value: function updateSelectedNodesPosition(offset) {\n      var dx = offset.dx,\n          dy = offset.dy;\n\n      if (dx || dy) {\n        if (this.translateSelectedNodes(dx, dy), this.boxesUpdated) {\n          if (this.collection.length > 1) {\n            this.updateSelectionBoxes();\n          }\n        } else {\n          var scale = this.graph.transform.getScale();\n          this.$boxes.add(this.$selectionContainer).css({\n            left: \"+=\".concat(dx * scale.sx),\n            top: \"+=\".concat(dy * scale.sy)\n          });\n        }\n      }\n    }\n  }, {\n    key: \"autoScrollGraph\",\n    value: function autoScrollGraph(x, y) {\n      var scroller = this.graph.scroller.widget;\n\n      if (scroller) {\n        return scroller.autoScroll(x, y);\n      }\n\n      return {\n        scrollerX: 0,\n        scrollerY: 0\n      };\n    }\n  }, {\n    key: \"adjustSelection\",\n    value: function adjustSelection(evt) {\n      var e = this.normalizeEvent(evt);\n      var eventData = this.getEventData(e);\n      var action = eventData.action;\n\n      switch (action) {\n        case 'selecting':\n          {\n            var data = eventData;\n\n            if (data.moving !== true) {\n              this.$container.appendTo(this.graph.container);\n              this.showRubberband();\n              data.moving = true;\n            }\n\n            var _this$autoScrollGraph = this.autoScrollGraph(e.clientX, e.clientY),\n                scrollerX = _this$autoScrollGraph.scrollerX,\n                scrollerY = _this$autoScrollGraph.scrollerY;\n\n            data.scrollerX += scrollerX;\n            data.scrollerY += scrollerY;\n            var dx = e.clientX - data.clientX + data.scrollerX;\n            var dy = e.clientY - data.clientY + data.scrollerY;\n            var left = parseInt(this.$container.css('left'), 10);\n            var top = parseInt(this.$container.css('top'), 10);\n            this.$container.css({\n              left: dx < 0 ? data.offsetX + dx : left,\n              top: dy < 0 ? data.offsetY + dy : top,\n              width: Math.abs(dx),\n              height: Math.abs(dy)\n            });\n            break;\n          }\n\n        case 'translating':\n          {\n            var client = this.graph.snapToGrid(e.clientX, e.clientY);\n            var _data = eventData;\n            var offset = this.getSelectionOffset(client, _data);\n\n            if (this.options.following) {\n              this.updateSelectedNodesPosition(offset);\n            } else {\n              this.updateContainerPosition(offset);\n            }\n\n            if (offset.dx) {\n              _data.clientX = client.x;\n            }\n\n            if (offset.dy) {\n              _data.clientY = client.y;\n            }\n\n            this.notifyBoxEvent('box:mousemove', evt, client.x, client.y);\n            break;\n          }\n\n        default:\n          break;\n      }\n\n      this.boxesUpdated = false;\n    }\n  }, {\n    key: \"translateSelectedNodes\",\n    value: function translateSelectedNodes(dx, dy, exclude, otherOptions) {\n      var _this3 = this;\n\n      var map = {};\n      var excluded = [];\n\n      if (exclude) {\n        map[exclude.id] = true;\n      }\n\n      this.collection.toArray().forEach(function (cell) {\n        cell.getDescendants({\n          deep: true\n        }).forEach(function (child) {\n          map[child.id] = true;\n        });\n      });\n\n      if (otherOptions && otherOptions.translateBy) {\n        var currentCell = this.graph.getCellById(otherOptions.translateBy);\n\n        if (currentCell) {\n          map[currentCell.id] = true;\n          currentCell.getDescendants({\n            deep: true\n          }).forEach(function (child) {\n            map[child.id] = true;\n          });\n          excluded.push(currentCell);\n        }\n      }\n\n      this.collection.toArray().forEach(function (cell) {\n        if (!map[cell.id]) {\n          var options = Object.assign(Object.assign({}, otherOptions), {\n            selection: _this3.cid,\n            exclude: excluded\n          });\n          cell.translate(dx, dy, options);\n\n          _this3.graph.model.getConnectedEdges(cell).forEach(function (edge) {\n            if (!map[edge.id]) {\n              edge.translate(dx, dy, options);\n              map[edge.id] = true;\n            }\n          });\n        }\n      });\n    }\n  }, {\n    key: \"getCellViewsInArea\",\n    value: function getCellViewsInArea(rect) {\n      var graph = this.graph;\n      var options = {\n        strict: this.options.strict\n      };\n      var views = [];\n\n      if (this.options.rubberNode) {\n        if (this.options.useCellGeometry) {\n          views = views.concat(graph.model.getNodesInArea(rect, options).map(function (node) {\n            return graph.renderer.findViewByCell(node);\n          }).filter(function (view) {\n            return view != null;\n          }));\n        } else {\n          views = views.concat(graph.renderer.findViewsInArea(rect, options));\n        }\n      }\n\n      if (this.options.rubberEdge) {\n        if (this.options.useCellGeometry) {\n          views = views.concat(graph.model.getEdgesInArea(rect, options).map(function (edge) {\n            return graph.renderer.findViewByCell(edge);\n          }).filter(function (view) {\n            return view != null;\n          }));\n        } else {\n          views = views.concat(graph.renderer.findEdgeViewsInArea(rect, options));\n        }\n      }\n\n      return views;\n    }\n  }, {\n    key: \"notifyBoxEvent\",\n    value: function notifyBoxEvent(name, e, x, y) {\n      var data = this.getEventData(e);\n      var view = data.activeView;\n      this.trigger(name, {\n        e: e,\n        view: view,\n        x: x,\n        y: y,\n        cell: view.cell\n      });\n    }\n  }, {\n    key: \"getSelectedClassName\",\n    value: function getSelectedClassName(cell) {\n      return this.prefixClassName(\"\".concat(cell.isNode() ? 'node' : 'edge', \"-selected\"));\n    }\n  }, {\n    key: \"addCellSelectedClassName\",\n    value: function addCellSelectedClassName(cell) {\n      var view = this.graph.renderer.findViewByCell(cell);\n\n      if (view) {\n        view.addClass(this.getSelectedClassName(cell));\n      }\n    }\n  }, {\n    key: \"removeCellUnSelectedClassName\",\n    value: function removeCellUnSelectedClassName(cell) {\n      var view = this.graph.renderer.findViewByCell(cell);\n\n      if (view) {\n        view.removeClass(this.getSelectedClassName(cell));\n      }\n    }\n  }, {\n    key: \"destroySelectionBox\",\n    value: function destroySelectionBox(cell) {\n      this.removeCellUnSelectedClassName(cell);\n\n      if (this.canShowSelectionBox(cell)) {\n        this.$container.find(\"[data-cell-id=\\\"\".concat(cell.id, \"\\\"]\")).remove();\n\n        if (this.$boxes.length === 0) {\n          this.hide();\n        }\n\n        this.boxCount = Math.max(0, this.boxCount - 1);\n      }\n    }\n  }, {\n    key: \"destroyAllSelectionBoxes\",\n    value: function destroyAllSelectionBoxes(cells) {\n      var _this4 = this;\n\n      cells.forEach(function (cell) {\n        return _this4.removeCellUnSelectedClassName(cell);\n      });\n      this.hide();\n      this.$boxes.remove();\n      this.boxCount = 0;\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.$container.removeClass(this.prefixClassName(Private.classNames.rubberband)).removeClass(this.prefixClassName(Private.classNames.selected));\n    }\n  }, {\n    key: \"showRubberband\",\n    value: function showRubberband() {\n      this.$container.addClass(this.prefixClassName(Private.classNames.rubberband));\n    }\n  }, {\n    key: \"hideRubberband\",\n    value: function hideRubberband() {\n      this.$container.removeClass(this.prefixClassName(Private.classNames.rubberband));\n    }\n  }, {\n    key: \"showSelected\",\n    value: function showSelected() {\n      this.$container.removeAttr('style').addClass(this.prefixClassName(Private.classNames.selected));\n    }\n  }, {\n    key: \"createContainer\",\n    value: function createContainer() {\n      this.container = document.createElement('div');\n      this.$container = this.$(this.container);\n      this.$container.addClass(this.prefixClassName(Private.classNames.root));\n\n      if (this.options.className) {\n        this.$container.addClass(this.options.className);\n      }\n\n      this.$selectionContainer = this.$('<div/>').addClass(this.prefixClassName(Private.classNames.inner));\n      this.$selectionContent = this.$('<div/>').addClass(this.prefixClassName(Private.classNames.content));\n      this.$selectionContainer.append(this.$selectionContent);\n      this.$selectionContainer.attr('data-selection-length', this.collection.length);\n      this.$container.prepend(this.$selectionContainer);\n      this.$handleContainer = this.$selectionContainer;\n    }\n  }, {\n    key: \"updateContainerPosition\",\n    value: function updateContainerPosition(offset) {\n      if (offset.dx || offset.dy) {\n        this.$selectionContainer.css({\n          left: \"+=\".concat(offset.dx),\n          top: \"+=\".concat(offset.dy)\n        });\n      }\n    }\n  }, {\n    key: \"updateContainer\",\n    value: function updateContainer() {\n      var _this5 = this;\n\n      var origin = {\n        x: Infinity,\n        y: Infinity\n      };\n      var corner = {\n        x: 0,\n        y: 0\n      };\n      var cells = this.collection.toArray().filter(function (cell) {\n        return _this5.canShowSelectionBox(cell);\n      });\n      cells.forEach(function (cell) {\n        var view = _this5.graph.renderer.findViewByCell(cell);\n\n        if (view) {\n          var bbox = view.getBBox({\n            useCellGeometry: _this5.options.useCellGeometry\n          });\n          origin.x = Math.min(origin.x, bbox.x);\n          origin.y = Math.min(origin.y, bbox.y);\n          corner.x = Math.max(corner.x, bbox.x + bbox.width);\n          corner.y = Math.max(corner.y, bbox.y + bbox.height);\n        }\n      });\n      this.$selectionContainer.css({\n        position: 'absolute',\n        pointerEvents: 'none',\n        left: origin.x,\n        top: origin.y,\n        width: corner.x - origin.x,\n        height: corner.y - origin.y\n      }).attr('data-selection-length', this.collection.length);\n      var boxContent = this.options.content;\n\n      if (boxContent) {\n        if (typeof boxContent === 'function') {\n          var content = FunctionExt.call(boxContent, this.graph, this, this.$selectionContent[0]);\n\n          if (content) {\n            this.$selectionContent.html(content);\n          }\n        } else {\n          this.$selectionContent.html(boxContent);\n        }\n      }\n\n      if (this.collection.length > 0 && !this.container.parentNode) {\n        this.$container.appendTo(this.graph.container);\n      } else if (this.collection.length <= 0 && this.container.parentNode) {\n        this.container.parentNode.removeChild(this.container);\n      }\n    }\n  }, {\n    key: \"canShowSelectionBox\",\n    value: function canShowSelectionBox(cell) {\n      return cell.isNode() && this.options.showNodeSelectionBox === true || cell.isEdge() && this.options.showEdgeSelectionBox === true;\n    }\n  }, {\n    key: \"createSelectionBox\",\n    value: function createSelectionBox(cell) {\n      this.addCellSelectedClassName(cell);\n\n      if (this.canShowSelectionBox(cell)) {\n        var view = this.graph.renderer.findViewByCell(cell);\n\n        if (view) {\n          var bbox = view.getBBox({\n            useCellGeometry: this.options.useCellGeometry\n          });\n          var className = this.boxClassName;\n          this.$('<div/>').addClass(className).addClass(\"\".concat(className, \"-\").concat(cell.isNode() ? 'node' : 'edge')).attr('data-cell-id', cell.id).css({\n            position: 'absolute',\n            left: bbox.x,\n            top: bbox.y,\n            width: bbox.width,\n            height: bbox.height,\n            pointerEvents: this.options.pointerEvents || 'auto'\n          }).appendTo(this.container);\n          this.showSelected();\n          this.boxCount += 1;\n        }\n      }\n    }\n  }, {\n    key: \"updateSelectionBoxes\",\n    value: function updateSelectionBoxes() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (this.collection.length > 0) {\n        this.boxesUpdated = true;\n        this.graph.renderer.requestViewUpdate(this, 1, 2, options);\n      }\n    }\n  }, {\n    key: \"confirmUpdate\",\n    value: function confirmUpdate() {\n      var _this6 = this;\n\n      if (this.boxCount) {\n        this.hide();\n        this.$boxes.each(function (_, elem) {\n          var cellId = _this6.$(elem).remove().attr('data-cell-id');\n\n          var cell = _this6.collection.get(cellId);\n\n          if (cell) {\n            _this6.createSelectionBox(cell);\n          }\n        });\n        this.updateContainer();\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"getCellViewFromElem\",\n    value: function getCellViewFromElem(elem) {\n      var id = elem.getAttribute('data-cell-id');\n\n      if (id) {\n        var cell = this.collection.get(id);\n\n        if (cell) {\n          return this.graph.renderer.findViewByCell(cell);\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"onCellRemoved\",\n    value: function onCellRemoved(_ref3) {\n      var cell = _ref3.cell;\n      this.destroySelectionBox(cell);\n      this.updateContainer();\n    }\n  }, {\n    key: \"onReseted\",\n    value: function onReseted(_ref4) {\n      var _this7 = this;\n\n      var previous = _ref4.previous,\n          current = _ref4.current;\n      this.destroyAllSelectionBoxes(previous);\n      current.forEach(function (cell) {\n        _this7.listenCellRemoveEvent(cell);\n\n        _this7.createSelectionBox(cell);\n      });\n      this.updateContainer();\n    }\n  }, {\n    key: \"onCellAdded\",\n    value: function onCellAdded(_ref5) {\n      var cell = _ref5.cell;\n      // The collection do not known the cell was removed when cell was\n      // removed by interaction(such as, by \"delete\" shortcut), so we should\n      // manually listen to cell's remove evnet.\n      this.listenCellRemoveEvent(cell);\n      this.createSelectionBox(cell);\n      this.updateContainer();\n    }\n  }, {\n    key: \"listenCellRemoveEvent\",\n    value: function listenCellRemoveEvent(cell) {\n      cell.off('removed', this.onCellRemoved, this);\n      cell.on('removed', this.onCellRemoved, this);\n    }\n  }, {\n    key: \"onCollectionUpdated\",\n    value: function onCollectionUpdated(_ref6) {\n      var _this8 = this;\n\n      var added = _ref6.added,\n          removed = _ref6.removed,\n          options = _ref6.options;\n      added.forEach(function (cell) {\n        _this8.trigger('cell:selected', {\n          cell: cell,\n          options: options\n        });\n\n        _this8.graph.trigger('cell:selected', {\n          cell: cell,\n          options: options\n        });\n\n        if (cell.isNode()) {\n          _this8.trigger('node:selected', {\n            cell: cell,\n            options: options,\n            node: cell\n          });\n\n          _this8.graph.trigger('node:selected', {\n            cell: cell,\n            options: options,\n            node: cell\n          });\n        } else if (cell.isEdge()) {\n          _this8.trigger('edge:selected', {\n            cell: cell,\n            options: options,\n            edge: cell\n          });\n\n          _this8.graph.trigger('edge:selected', {\n            cell: cell,\n            options: options,\n            edge: cell\n          });\n        }\n      });\n      removed.forEach(function (cell) {\n        _this8.trigger('cell:unselected', {\n          cell: cell,\n          options: options\n        });\n\n        _this8.graph.trigger('cell:unselected', {\n          cell: cell,\n          options: options\n        });\n\n        if (cell.isNode()) {\n          _this8.trigger('node:unselected', {\n            cell: cell,\n            options: options,\n            node: cell\n          });\n\n          _this8.graph.trigger('node:unselected', {\n            cell: cell,\n            options: options,\n            node: cell\n          });\n        } else if (cell.isEdge()) {\n          _this8.trigger('edge:unselected', {\n            cell: cell,\n            options: options,\n            edge: cell\n          });\n\n          _this8.graph.trigger('edge:unselected', {\n            cell: cell,\n            options: options,\n            edge: cell\n          });\n        }\n      });\n      var args = {\n        added: added,\n        removed: removed,\n        options: options,\n        selected: this.cells\n      };\n      this.trigger('selection:changed', args);\n      this.graph.trigger('selection:changed', args);\n    } // #region handle\n\n  }, {\n    key: \"deleteSelectedCells\",\n    value: function deleteSelectedCells() {\n      var cells = this.collection.toArray();\n      this.clean();\n      this.graph.model.removeCells(cells, {\n        selection: this.cid\n      });\n    }\n  }, {\n    key: \"startRotate\",\n    value: function startRotate(_ref7) {\n      var e = _ref7.e;\n      var cells = this.collection.toArray();\n      var center = Cell.getCellsBBox(cells).getCenter();\n      var client = this.graph.snapToGrid(e.clientX, e.clientY);\n      var angles = cells.reduce(function (memo, cell) {\n        memo[cell.id] = Angle.normalize(cell.getAngle());\n        return memo;\n      }, {});\n      this.setEventData(e, {\n        center: center,\n        angles: angles,\n        start: client.theta(center)\n      });\n    }\n  }, {\n    key: \"doRotate\",\n    value: function doRotate(_ref8) {\n      var _this9 = this;\n\n      var e = _ref8.e;\n      var data = this.getEventData(e);\n      var grid = this.graph.options.rotating.grid;\n      var gridSize = typeof grid === 'function' ? FunctionExt.call(grid, this.graph, null) : grid;\n      var client = this.graph.snapToGrid(e.clientX, e.clientY);\n      var delta = data.start - client.theta(data.center);\n\n      if (!data.rotated) {\n        data.rotated = true;\n      }\n\n      if (Math.abs(delta) > 0.001) {\n        this.collection.toArray().forEach(function (node) {\n          var angle = Util.snapToGrid(data.angles[node.id] + delta, gridSize || 15);\n          node.rotate(angle, {\n            absolute: true,\n            center: data.center,\n            selection: _this9.cid\n          });\n        });\n        this.updateSelectionBoxes();\n      }\n    }\n  }, {\n    key: \"stopRotate\",\n    value: function stopRotate(_ref9) {\n      var _this10 = this;\n\n      var e = _ref9.e;\n      var data = this.getEventData(e);\n\n      if (data.rotated) {\n        data.rotated = false;\n        this.collection.toArray().forEach(function (node) {\n          notify('node:rotated', e, _this10.graph.findViewByCell(node));\n        });\n      }\n    }\n  }, {\n    key: \"startResize\",\n    value: function startResize(_ref10) {\n      var e = _ref10.e;\n      var gridSize = this.graph.getGridSize();\n      var cells = this.collection.toArray();\n      var bbox = Cell.getCellsBBox(cells);\n      var bboxes = cells.map(function (cell) {\n        return cell.getBBox();\n      });\n      var maxWidth = bboxes.reduce(function (maxWidth, bbox) {\n        return bbox.width < maxWidth ? bbox.width : maxWidth;\n      }, Infinity);\n      var maxHeight = bboxes.reduce(function (maxHeight, bbox) {\n        return bbox.height < maxHeight ? bbox.height : maxHeight;\n      }, Infinity);\n      this.setEventData(e, {\n        bbox: bbox,\n        cells: this.graph.model.getSubGraph(cells),\n        minWidth: gridSize * bbox.width / maxWidth,\n        minHeight: gridSize * bbox.height / maxHeight\n      });\n    }\n  }, {\n    key: \"doResize\",\n    value: function doResize(_ref11) {\n      var e = _ref11.e,\n          dx = _ref11.dx,\n          dy = _ref11.dy;\n      var data = this.eventData(e);\n      var bbox = data.bbox;\n      var width = bbox.width;\n      var height = bbox.height;\n      var newWidth = Math.max(width + dx, data.minWidth);\n      var newHeight = Math.max(height + dy, data.minHeight);\n\n      if (!data.resized) {\n        data.resized = true;\n      }\n\n      if (Math.abs(width - newWidth) > 0.001 || Math.abs(height - newHeight) > 0.001) {\n        this.graph.model.resizeCells(newWidth, newHeight, data.cells, {\n          selection: this.cid\n        });\n        bbox.width = newWidth;\n        bbox.height = newHeight;\n        this.updateSelectionBoxes();\n      }\n    }\n  }, {\n    key: \"stopResize\",\n    value: function stopResize(_ref12) {\n      var _this11 = this;\n\n      var e = _ref12.e;\n      var data = this.eventData(e);\n\n      if (data.resized) {\n        data.resized = false;\n        this.collection.toArray().forEach(function (node) {\n          notify('node:resized', e, _this11.graph.findViewByCell(node));\n        });\n      }\n    } // #endregion\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.clean();\n      this.remove();\n    }\n  }]);\n\n  return Selection;\n}(View);\n\n__decorate([View.dispose()], Selection.prototype, \"dispose\", null);\n\nObjectExt.applyMixins(Selection, Handle); // private\n// -------\n\nvar Private;\n\n(function (Private) {\n  var base = 'widget-selection';\n  Private.classNames = {\n    root: base,\n    inner: \"\".concat(base, \"-inner\"),\n    box: \"\".concat(base, \"-box\"),\n    content: \"\".concat(base, \"-content\"),\n    rubberband: \"\".concat(base, \"-rubberband\"),\n    selected: \"\".concat(base, \"-selected\")\n  };\n  Private.documentEvents = {\n    mousemove: 'adjustSelection',\n    touchmove: 'adjustSelection',\n    mouseup: 'onMouseUp',\n    touchend: 'onMouseUp',\n    touchcancel: 'onMouseUp'\n  };\n  Private.defaultOptions = {\n    movable: true,\n    following: true,\n    strict: false,\n    useCellGeometry: false,\n    content: function content(selection) {\n      return StringExt.template('<%= length %> node<%= length > 1 ? \"s\":\"\" %> selected.')({\n        length: selection.length\n      });\n    },\n    handles: [{\n      name: 'remove',\n      position: 'nw',\n      events: {\n        mousedown: 'deleteSelectedCells'\n      }\n    }, {\n      name: 'rotate',\n      position: 'sw',\n      events: {\n        mousedown: 'startRotate',\n        mousemove: 'doRotate',\n        mouseup: 'stopRotate'\n      }\n    }, {\n      name: 'resize',\n      position: 'se',\n      events: {\n        mousedown: 'startResize',\n        mousemove: 'doResize',\n        mouseup: 'stopResize'\n      }\n    }]\n  };\n\n  function depthComparator(cell) {\n    return cell.getAncestors().length;\n  }\n\n  Private.depthComparator = depthComparator;\n})(Private || (Private = {}));","map":{"version":3,"sources":["../../../src/addon/selection/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Util } from '../../global';\nimport { Rectangle, Angle } from '../../geometry';\nimport { ObjectExt, StringExt, FunctionExt } from '../../util';\nimport { Cell } from '../../model/cell';\nimport { Collection } from '../../model/collection';\nimport { View } from '../../view/view';\nimport { notify } from '../transform/util';\nimport { Handle } from '../common';\nexport class Selection extends View {\n    constructor(options) {\n        super();\n        this.options = ObjectExt.merge({}, Private.defaultOptions, options);\n        if (this.options.model) {\n            this.options.collection = this.options.model.collection;\n        }\n        if (this.options.collection) {\n            this.collection = this.options.collection;\n        }\n        else {\n            this.collection = new Collection([], {\n                comparator: Private.depthComparator,\n            });\n            this.options.collection = this.collection;\n        }\n        this.boxCount = 0;\n        this.createContainer();\n        this.initHandles();\n        this.startListening();\n    }\n    get graph() {\n        return this.options.graph;\n    }\n    get boxClassName() {\n        return this.prefixClassName(Private.classNames.box);\n    }\n    get $boxes() {\n        return this.$container.children(`.${this.boxClassName}`);\n    }\n    get handleOptions() {\n        return this.options;\n    }\n    startListening() {\n        const graph = this.graph;\n        const collection = this.collection;\n        this.delegateEvents({\n            [`mousedown .${this.boxClassName}`]: 'onSelectionBoxMouseDown',\n            [`touchstart .${this.boxClassName}`]: 'onSelectionBoxMouseDown',\n        }, true);\n        graph.on('scale', this.onGraphTransformed, this);\n        graph.on('translate', this.onGraphTransformed, this);\n        graph.model.on('updated', this.onModelUpdated, this);\n        collection.on('added', this.onCellAdded, this);\n        collection.on('removed', this.onCellRemoved, this);\n        collection.on('reseted', this.onReseted, this);\n        collection.on('updated', this.onCollectionUpdated, this);\n        collection.on('node:change:position', this.onNodePositionChanged, this);\n        collection.on('cell:changed', this.onCellChanged, this);\n    }\n    stopListening() {\n        const graph = this.graph;\n        const collection = this.collection;\n        this.undelegateEvents();\n        graph.off('scale', this.onGraphTransformed, this);\n        graph.off('translate', this.onGraphTransformed, this);\n        graph.model.off('updated', this.onModelUpdated, this);\n        collection.off('added', this.onCellAdded, this);\n        collection.off('removed', this.onCellRemoved, this);\n        collection.off('reseted', this.onReseted, this);\n        collection.off('updated', this.onCollectionUpdated, this);\n        collection.off('node:change:position', this.onNodePositionChanged, this);\n        collection.off('cell:changed', this.onCellChanged, this);\n    }\n    onRemove() {\n        this.stopListening();\n    }\n    onGraphTransformed() {\n        this.updateSelectionBoxes({ async: false });\n    }\n    onCellChanged() {\n        this.updateSelectionBoxes();\n    }\n    onNodePositionChanged({ node, options, }) {\n        const { showNodeSelectionBox, pointerEvents } = this.options;\n        const { ui, selection } = options;\n        let allowTranslating = !this.translating;\n        /* Scenarios where this method is not called:\n         * 1. ShowNodeSelection is true or ponterEvents is none\n         * 2. Avoid circular calls with the selection tag\n         */\n        allowTranslating =\n            allowTranslating &&\n                (showNodeSelectionBox !== true || pointerEvents === 'none');\n        allowTranslating = allowTranslating && ui && !selection;\n        if (allowTranslating) {\n            this.translating = true;\n            const current = node.position();\n            const previous = node.previous('position');\n            const dx = current.x - previous.x;\n            const dy = current.y - previous.y;\n            if (dx !== 0 || dy !== 0) {\n                this.translateSelectedNodes(dx, dy, node, options);\n            }\n            this.translating = false;\n        }\n    }\n    onModelUpdated({ removed }) {\n        if (removed && removed.length) {\n            this.unselect(removed);\n        }\n    }\n    isEmpty() {\n        return this.length <= 0;\n    }\n    isSelected(cell) {\n        return this.collection.has(cell);\n    }\n    get length() {\n        return this.collection.length;\n    }\n    get cells() {\n        return this.collection.toArray();\n    }\n    select(cells, options = {}) {\n        options.dryrun = true;\n        const items = this.filter(Array.isArray(cells) ? cells : [cells]);\n        this.collection.add(items, options);\n        return this;\n    }\n    unselect(cells, options = {}) {\n        // dryrun to prevent cell be removed from graph\n        options.dryrun = true;\n        this.collection.remove(Array.isArray(cells) ? cells : [cells], options);\n        return this;\n    }\n    reset(cells, options = {}) {\n        if (cells) {\n            if (options.batch) {\n                const filterCells = this.filter(Array.isArray(cells) ? cells : [cells]);\n                this.collection.reset(filterCells, Object.assign(Object.assign({}, options), { ui: true }));\n                return this;\n            }\n            const prev = this.cells;\n            const next = this.filter(Array.isArray(cells) ? cells : [cells]);\n            const prevMap = {};\n            const nextMap = {};\n            prev.forEach((cell) => (prevMap[cell.id] = cell));\n            next.forEach((cell) => (nextMap[cell.id] = cell));\n            const added = [];\n            const removed = [];\n            next.forEach((cell) => {\n                if (!prevMap[cell.id]) {\n                    added.push(cell);\n                }\n            });\n            prev.forEach((cell) => {\n                if (!nextMap[cell.id]) {\n                    removed.push(cell);\n                }\n            });\n            if (removed.length) {\n                this.unselect(removed, Object.assign(Object.assign({}, options), { ui: true }));\n            }\n            if (added.length) {\n                this.select(added, Object.assign(Object.assign({}, options), { ui: true }));\n            }\n            if (removed.length === 0 && added.length === 0) {\n                this.updateContainer();\n            }\n            return this;\n        }\n        return this.clean(options);\n    }\n    clean(options = {}) {\n        if (this.length) {\n            if (options.batch === false) {\n                this.unselect(this.cells, options);\n            }\n            else {\n                this.collection.reset([], Object.assign(Object.assign({}, options), { ui: true }));\n            }\n        }\n        return this;\n    }\n    setFilter(filter) {\n        this.options.filter = filter;\n    }\n    setContent(content) {\n        this.options.content = content;\n    }\n    startSelecting(evt) {\n        // Flow: startSelecting => adjustSelection => stopSelecting\n        evt = this.normalizeEvent(evt); // eslint-disable-line\n        this.clean();\n        let x;\n        let y;\n        const graphContainer = this.graph.container;\n        if (evt.offsetX != null &&\n            evt.offsetY != null &&\n            graphContainer.contains(evt.target)) {\n            x = evt.offsetX;\n            y = evt.offsetY;\n        }\n        else {\n            const offset = this.$(graphContainer).offset();\n            const scrollLeft = graphContainer.scrollLeft;\n            const scrollTop = graphContainer.scrollTop;\n            x = evt.clientX - offset.left + window.pageXOffset + scrollLeft;\n            y = evt.clientY - offset.top + window.pageYOffset + scrollTop;\n        }\n        this.$container.css({\n            top: y,\n            left: x,\n            width: 1,\n            height: 1,\n        });\n        this.setEventData(evt, {\n            action: 'selecting',\n            clientX: evt.clientX,\n            clientY: evt.clientY,\n            offsetX: x,\n            offsetY: y,\n            scrollerX: 0,\n            scrollerY: 0,\n        });\n        this.delegateDocumentEvents(Private.documentEvents, evt.data);\n    }\n    filter(cells) {\n        const filter = this.options.filter;\n        if (Array.isArray(filter)) {\n            return cells.filter((cell) => !filter.includes(cell) && !filter.includes(cell.shape));\n        }\n        if (typeof filter === 'function') {\n            return cells.filter((cell) => FunctionExt.call(filter, this.graph, cell));\n        }\n        return cells;\n    }\n    stopSelecting(evt) {\n        const graph = this.graph;\n        const eventData = this.getEventData(evt);\n        const action = eventData.action;\n        switch (action) {\n            case 'selecting': {\n                let width = this.$container.width();\n                let height = this.$container.height();\n                const offset = this.$container.offset();\n                const origin = graph.pageToLocal(offset.left, offset.top);\n                const scale = graph.transform.getScale();\n                width /= scale.sx;\n                height /= scale.sy;\n                const rect = new Rectangle(origin.x, origin.y, width, height);\n                const cells = this.getCellViewsInArea(rect).map((view) => view.cell);\n                this.reset(cells, { batch: true });\n                this.hideRubberband();\n                break;\n            }\n            case 'translating': {\n                const client = graph.snapToGrid(evt.clientX, evt.clientY);\n                if (!this.options.following) {\n                    const data = eventData;\n                    this.updateSelectedNodesPosition({\n                        dx: data.clientX - data.originX,\n                        dy: data.clientY - data.originY,\n                    });\n                }\n                this.graph.model.stopBatch('move-selection');\n                this.notifyBoxEvent('box:mouseup', evt, client.x, client.y);\n                break;\n            }\n            default: {\n                this.clean();\n                break;\n            }\n        }\n    }\n    onMouseUp(evt) {\n        const action = this.getEventData(evt).action;\n        if (action) {\n            this.stopSelecting(evt);\n            this.undelegateDocumentEvents();\n        }\n    }\n    onSelectionBoxMouseDown(evt) {\n        if (!this.options.following) {\n            evt.stopPropagation();\n        }\n        const e = this.normalizeEvent(evt);\n        if (this.options.movable) {\n            this.startTranslating(e);\n        }\n        const activeView = this.getCellViewFromElem(e.target);\n        this.setEventData(e, { activeView });\n        const client = this.graph.snapToGrid(e.clientX, e.clientY);\n        this.notifyBoxEvent('box:mousedown', e, client.x, client.y);\n        this.delegateDocumentEvents(Private.documentEvents, e.data);\n    }\n    startTranslating(evt) {\n        this.graph.model.startBatch('move-selection');\n        const client = this.graph.snapToGrid(evt.clientX, evt.clientY);\n        this.setEventData(evt, {\n            action: 'translating',\n            clientX: client.x,\n            clientY: client.y,\n            originX: client.x,\n            originY: client.y,\n        });\n    }\n    getSelectionOffset(client, data) {\n        let dx = client.x - data.clientX;\n        let dy = client.y - data.clientY;\n        const restrict = this.graph.hook.getRestrictArea();\n        if (restrict) {\n            const cells = this.collection.toArray();\n            const totalBBox = Cell.getCellsBBox(cells, { deep: true }) || Rectangle.create();\n            const minDx = restrict.x - totalBBox.x;\n            const minDy = restrict.y - totalBBox.y;\n            const maxDx = restrict.x + restrict.width - (totalBBox.x + totalBBox.width);\n            const maxDy = restrict.y + restrict.height - (totalBBox.y + totalBBox.height);\n            if (dx < minDx) {\n                dx = minDx;\n            }\n            if (dy < minDy) {\n                dy = minDy;\n            }\n            if (maxDx < dx) {\n                dx = maxDx;\n            }\n            if (maxDy < dy) {\n                dy = maxDy;\n            }\n            if (!this.options.following) {\n                const offsetX = client.x - data.originX;\n                const offsetY = client.y - data.originY;\n                dx = offsetX <= minDx || offsetX >= maxDx ? 0 : dx;\n                dy = offsetY <= minDy || offsetY >= maxDy ? 0 : dy;\n            }\n        }\n        return {\n            dx,\n            dy,\n        };\n    }\n    updateSelectedNodesPosition(offset) {\n        const { dx, dy } = offset;\n        if (dx || dy) {\n            if ((this.translateSelectedNodes(dx, dy), this.boxesUpdated)) {\n                if (this.collection.length > 1) {\n                    this.updateSelectionBoxes();\n                }\n            }\n            else {\n                const scale = this.graph.transform.getScale();\n                this.$boxes.add(this.$selectionContainer).css({\n                    left: `+=${dx * scale.sx}`,\n                    top: `+=${dy * scale.sy}`,\n                });\n            }\n        }\n    }\n    autoScrollGraph(x, y) {\n        const scroller = this.graph.scroller.widget;\n        if (scroller) {\n            return scroller.autoScroll(x, y);\n        }\n        return { scrollerX: 0, scrollerY: 0 };\n    }\n    adjustSelection(evt) {\n        const e = this.normalizeEvent(evt);\n        const eventData = this.getEventData(e);\n        const action = eventData.action;\n        switch (action) {\n            case 'selecting': {\n                const data = eventData;\n                if (data.moving !== true) {\n                    this.$container.appendTo(this.graph.container);\n                    this.showRubberband();\n                    data.moving = true;\n                }\n                const { scrollerX, scrollerY } = this.autoScrollGraph(e.clientX, e.clientY);\n                data.scrollerX += scrollerX;\n                data.scrollerY += scrollerY;\n                const dx = e.clientX - data.clientX + data.scrollerX;\n                const dy = e.clientY - data.clientY + data.scrollerY;\n                const left = parseInt(this.$container.css('left'), 10);\n                const top = parseInt(this.$container.css('top'), 10);\n                this.$container.css({\n                    left: dx < 0 ? data.offsetX + dx : left,\n                    top: dy < 0 ? data.offsetY + dy : top,\n                    width: Math.abs(dx),\n                    height: Math.abs(dy),\n                });\n                break;\n            }\n            case 'translating': {\n                const client = this.graph.snapToGrid(e.clientX, e.clientY);\n                const data = eventData;\n                const offset = this.getSelectionOffset(client, data);\n                if (this.options.following) {\n                    this.updateSelectedNodesPosition(offset);\n                }\n                else {\n                    this.updateContainerPosition(offset);\n                }\n                if (offset.dx) {\n                    data.clientX = client.x;\n                }\n                if (offset.dy) {\n                    data.clientY = client.y;\n                }\n                this.notifyBoxEvent('box:mousemove', evt, client.x, client.y);\n                break;\n            }\n            default:\n                break;\n        }\n        this.boxesUpdated = false;\n    }\n    translateSelectedNodes(dx, dy, exclude, otherOptions) {\n        const map = {};\n        const excluded = [];\n        if (exclude) {\n            map[exclude.id] = true;\n        }\n        this.collection.toArray().forEach((cell) => {\n            cell.getDescendants({ deep: true }).forEach((child) => {\n                map[child.id] = true;\n            });\n        });\n        if (otherOptions && otherOptions.translateBy) {\n            const currentCell = this.graph.getCellById(otherOptions.translateBy);\n            if (currentCell) {\n                map[currentCell.id] = true;\n                currentCell.getDescendants({ deep: true }).forEach((child) => {\n                    map[child.id] = true;\n                });\n                excluded.push(currentCell);\n            }\n        }\n        this.collection.toArray().forEach((cell) => {\n            if (!map[cell.id]) {\n                const options = Object.assign(Object.assign({}, otherOptions), { selection: this.cid, exclude: excluded });\n                cell.translate(dx, dy, options);\n                this.graph.model.getConnectedEdges(cell).forEach((edge) => {\n                    if (!map[edge.id]) {\n                        edge.translate(dx, dy, options);\n                        map[edge.id] = true;\n                    }\n                });\n            }\n        });\n    }\n    getCellViewsInArea(rect) {\n        const graph = this.graph;\n        const options = {\n            strict: this.options.strict,\n        };\n        let views = [];\n        if (this.options.rubberNode) {\n            if (this.options.useCellGeometry) {\n                views = views.concat(graph.model\n                    .getNodesInArea(rect, options)\n                    .map((node) => graph.renderer.findViewByCell(node))\n                    .filter((view) => view != null));\n            }\n            else {\n                views = views.concat(graph.renderer.findViewsInArea(rect, options));\n            }\n        }\n        if (this.options.rubberEdge) {\n            if (this.options.useCellGeometry) {\n                views = views.concat(graph.model\n                    .getEdgesInArea(rect, options)\n                    .map((edge) => graph.renderer.findViewByCell(edge))\n                    .filter((view) => view != null));\n            }\n            else {\n                views = views.concat(graph.renderer.findEdgeViewsInArea(rect, options));\n            }\n        }\n        return views;\n    }\n    notifyBoxEvent(name, e, x, y) {\n        const data = this.getEventData(e);\n        const view = data.activeView;\n        this.trigger(name, { e, view, x, y, cell: view.cell });\n    }\n    getSelectedClassName(cell) {\n        return this.prefixClassName(`${cell.isNode() ? 'node' : 'edge'}-selected`);\n    }\n    addCellSelectedClassName(cell) {\n        const view = this.graph.renderer.findViewByCell(cell);\n        if (view) {\n            view.addClass(this.getSelectedClassName(cell));\n        }\n    }\n    removeCellUnSelectedClassName(cell) {\n        const view = this.graph.renderer.findViewByCell(cell);\n        if (view) {\n            view.removeClass(this.getSelectedClassName(cell));\n        }\n    }\n    destroySelectionBox(cell) {\n        this.removeCellUnSelectedClassName(cell);\n        if (this.canShowSelectionBox(cell)) {\n            this.$container.find(`[data-cell-id=\"${cell.id}\"]`).remove();\n            if (this.$boxes.length === 0) {\n                this.hide();\n            }\n            this.boxCount = Math.max(0, this.boxCount - 1);\n        }\n    }\n    destroyAllSelectionBoxes(cells) {\n        cells.forEach((cell) => this.removeCellUnSelectedClassName(cell));\n        this.hide();\n        this.$boxes.remove();\n        this.boxCount = 0;\n    }\n    hide() {\n        this.$container\n            .removeClass(this.prefixClassName(Private.classNames.rubberband))\n            .removeClass(this.prefixClassName(Private.classNames.selected));\n    }\n    showRubberband() {\n        this.$container.addClass(this.prefixClassName(Private.classNames.rubberband));\n    }\n    hideRubberband() {\n        this.$container.removeClass(this.prefixClassName(Private.classNames.rubberband));\n    }\n    showSelected() {\n        this.$container\n            .removeAttr('style')\n            .addClass(this.prefixClassName(Private.classNames.selected));\n    }\n    createContainer() {\n        this.container = document.createElement('div');\n        this.$container = this.$(this.container);\n        this.$container.addClass(this.prefixClassName(Private.classNames.root));\n        if (this.options.className) {\n            this.$container.addClass(this.options.className);\n        }\n        this.$selectionContainer = this.$('<div/>').addClass(this.prefixClassName(Private.classNames.inner));\n        this.$selectionContent = this.$('<div/>').addClass(this.prefixClassName(Private.classNames.content));\n        this.$selectionContainer.append(this.$selectionContent);\n        this.$selectionContainer.attr('data-selection-length', this.collection.length);\n        this.$container.prepend(this.$selectionContainer);\n        this.$handleContainer = this.$selectionContainer;\n    }\n    updateContainerPosition(offset) {\n        if (offset.dx || offset.dy) {\n            this.$selectionContainer.css({\n                left: `+=${offset.dx}`,\n                top: `+=${offset.dy}`,\n            });\n        }\n    }\n    updateContainer() {\n        const origin = { x: Infinity, y: Infinity };\n        const corner = { x: 0, y: 0 };\n        const cells = this.collection\n            .toArray()\n            .filter((cell) => this.canShowSelectionBox(cell));\n        cells.forEach((cell) => {\n            const view = this.graph.renderer.findViewByCell(cell);\n            if (view) {\n                const bbox = view.getBBox({\n                    useCellGeometry: this.options.useCellGeometry,\n                });\n                origin.x = Math.min(origin.x, bbox.x);\n                origin.y = Math.min(origin.y, bbox.y);\n                corner.x = Math.max(corner.x, bbox.x + bbox.width);\n                corner.y = Math.max(corner.y, bbox.y + bbox.height);\n            }\n        });\n        this.$selectionContainer\n            .css({\n            position: 'absolute',\n            pointerEvents: 'none',\n            left: origin.x,\n            top: origin.y,\n            width: corner.x - origin.x,\n            height: corner.y - origin.y,\n        })\n            .attr('data-selection-length', this.collection.length);\n        const boxContent = this.options.content;\n        if (boxContent) {\n            if (typeof boxContent === 'function') {\n                const content = FunctionExt.call(boxContent, this.graph, this, this.$selectionContent[0]);\n                if (content) {\n                    this.$selectionContent.html(content);\n                }\n            }\n            else {\n                this.$selectionContent.html(boxContent);\n            }\n        }\n        if (this.collection.length > 0 && !this.container.parentNode) {\n            this.$container.appendTo(this.graph.container);\n        }\n        else if (this.collection.length <= 0 && this.container.parentNode) {\n            this.container.parentNode.removeChild(this.container);\n        }\n    }\n    canShowSelectionBox(cell) {\n        return ((cell.isNode() && this.options.showNodeSelectionBox === true) ||\n            (cell.isEdge() && this.options.showEdgeSelectionBox === true));\n    }\n    createSelectionBox(cell) {\n        this.addCellSelectedClassName(cell);\n        if (this.canShowSelectionBox(cell)) {\n            const view = this.graph.renderer.findViewByCell(cell);\n            if (view) {\n                const bbox = view.getBBox({\n                    useCellGeometry: this.options.useCellGeometry,\n                });\n                const className = this.boxClassName;\n                this.$('<div/>')\n                    .addClass(className)\n                    .addClass(`${className}-${cell.isNode() ? 'node' : 'edge'}`)\n                    .attr('data-cell-id', cell.id)\n                    .css({\n                    position: 'absolute',\n                    left: bbox.x,\n                    top: bbox.y,\n                    width: bbox.width,\n                    height: bbox.height,\n                    pointerEvents: this.options.pointerEvents || 'auto',\n                })\n                    .appendTo(this.container);\n                this.showSelected();\n                this.boxCount += 1;\n            }\n        }\n    }\n    updateSelectionBoxes(options = {}) {\n        if (this.collection.length > 0) {\n            this.boxesUpdated = true;\n            this.graph.renderer.requestViewUpdate(this, 1, 2, options);\n        }\n    }\n    confirmUpdate() {\n        if (this.boxCount) {\n            this.hide();\n            this.$boxes.each((_, elem) => {\n                const cellId = this.$(elem).remove().attr('data-cell-id');\n                const cell = this.collection.get(cellId);\n                if (cell) {\n                    this.createSelectionBox(cell);\n                }\n            });\n            this.updateContainer();\n        }\n        return 0;\n    }\n    getCellViewFromElem(elem) {\n        const id = elem.getAttribute('data-cell-id');\n        if (id) {\n            const cell = this.collection.get(id);\n            if (cell) {\n                return this.graph.renderer.findViewByCell(cell);\n            }\n        }\n        return null;\n    }\n    onCellRemoved({ cell }) {\n        this.destroySelectionBox(cell);\n        this.updateContainer();\n    }\n    onReseted({ previous, current }) {\n        this.destroyAllSelectionBoxes(previous);\n        current.forEach((cell) => {\n            this.listenCellRemoveEvent(cell);\n            this.createSelectionBox(cell);\n        });\n        this.updateContainer();\n    }\n    onCellAdded({ cell }) {\n        // The collection do not known the cell was removed when cell was\n        // removed by interaction(such as, by \"delete\" shortcut), so we should\n        // manually listen to cell's remove evnet.\n        this.listenCellRemoveEvent(cell);\n        this.createSelectionBox(cell);\n        this.updateContainer();\n    }\n    listenCellRemoveEvent(cell) {\n        cell.off('removed', this.onCellRemoved, this);\n        cell.on('removed', this.onCellRemoved, this);\n    }\n    onCollectionUpdated({ added, removed, options, }) {\n        added.forEach((cell) => {\n            this.trigger('cell:selected', { cell, options });\n            this.graph.trigger('cell:selected', { cell, options });\n            if (cell.isNode()) {\n                this.trigger('node:selected', { cell, options, node: cell });\n                this.graph.trigger('node:selected', { cell, options, node: cell });\n            }\n            else if (cell.isEdge()) {\n                this.trigger('edge:selected', { cell, options, edge: cell });\n                this.graph.trigger('edge:selected', { cell, options, edge: cell });\n            }\n        });\n        removed.forEach((cell) => {\n            this.trigger('cell:unselected', { cell, options });\n            this.graph.trigger('cell:unselected', { cell, options });\n            if (cell.isNode()) {\n                this.trigger('node:unselected', { cell, options, node: cell });\n                this.graph.trigger('node:unselected', { cell, options, node: cell });\n            }\n            else if (cell.isEdge()) {\n                this.trigger('edge:unselected', { cell, options, edge: cell });\n                this.graph.trigger('edge:unselected', { cell, options, edge: cell });\n            }\n        });\n        const args = {\n            added,\n            removed,\n            options,\n            selected: this.cells,\n        };\n        this.trigger('selection:changed', args);\n        this.graph.trigger('selection:changed', args);\n    }\n    // #region handle\n    deleteSelectedCells() {\n        const cells = this.collection.toArray();\n        this.clean();\n        this.graph.model.removeCells(cells, { selection: this.cid });\n    }\n    startRotate({ e }) {\n        const cells = this.collection.toArray();\n        const center = Cell.getCellsBBox(cells).getCenter();\n        const client = this.graph.snapToGrid(e.clientX, e.clientY);\n        const angles = cells.reduce((memo, cell) => {\n            memo[cell.id] = Angle.normalize(cell.getAngle());\n            return memo;\n        }, {});\n        this.setEventData(e, {\n            center,\n            angles,\n            start: client.theta(center),\n        });\n    }\n    doRotate({ e }) {\n        const data = this.getEventData(e);\n        const grid = this.graph.options.rotating.grid;\n        const gridSize = typeof grid === 'function'\n            ? FunctionExt.call(grid, this.graph, null)\n            : grid;\n        const client = this.graph.snapToGrid(e.clientX, e.clientY);\n        const delta = data.start - client.theta(data.center);\n        if (!data.rotated) {\n            data.rotated = true;\n        }\n        if (Math.abs(delta) > 0.001) {\n            this.collection.toArray().forEach((node) => {\n                const angle = Util.snapToGrid(data.angles[node.id] + delta, gridSize || 15);\n                node.rotate(angle, {\n                    absolute: true,\n                    center: data.center,\n                    selection: this.cid,\n                });\n            });\n            this.updateSelectionBoxes();\n        }\n    }\n    stopRotate({ e }) {\n        const data = this.getEventData(e);\n        if (data.rotated) {\n            data.rotated = false;\n            this.collection.toArray().forEach((node) => {\n                notify('node:rotated', e, this.graph.findViewByCell(node));\n            });\n        }\n    }\n    startResize({ e }) {\n        const gridSize = this.graph.getGridSize();\n        const cells = this.collection.toArray();\n        const bbox = Cell.getCellsBBox(cells);\n        const bboxes = cells.map((cell) => cell.getBBox());\n        const maxWidth = bboxes.reduce((maxWidth, bbox) => {\n            return bbox.width < maxWidth ? bbox.width : maxWidth;\n        }, Infinity);\n        const maxHeight = bboxes.reduce((maxHeight, bbox) => {\n            return bbox.height < maxHeight ? bbox.height : maxHeight;\n        }, Infinity);\n        this.setEventData(e, {\n            bbox,\n            cells: this.graph.model.getSubGraph(cells),\n            minWidth: (gridSize * bbox.width) / maxWidth,\n            minHeight: (gridSize * bbox.height) / maxHeight,\n        });\n    }\n    doResize({ e, dx, dy }) {\n        const data = this.eventData(e);\n        const bbox = data.bbox;\n        const width = bbox.width;\n        const height = bbox.height;\n        const newWidth = Math.max(width + dx, data.minWidth);\n        const newHeight = Math.max(height + dy, data.minHeight);\n        if (!data.resized) {\n            data.resized = true;\n        }\n        if (Math.abs(width - newWidth) > 0.001 ||\n            Math.abs(height - newHeight) > 0.001) {\n            this.graph.model.resizeCells(newWidth, newHeight, data.cells, {\n                selection: this.cid,\n            });\n            bbox.width = newWidth;\n            bbox.height = newHeight;\n            this.updateSelectionBoxes();\n        }\n    }\n    stopResize({ e }) {\n        const data = this.eventData(e);\n        if (data.resized) {\n            data.resized = false;\n            this.collection.toArray().forEach((node) => {\n                notify('node:resized', e, this.graph.findViewByCell(node));\n            });\n        }\n    }\n    // #endregion\n    dispose() {\n        this.clean();\n        this.remove();\n    }\n}\n__decorate([\n    View.dispose()\n], Selection.prototype, \"dispose\", null);\nObjectExt.applyMixins(Selection, Handle);\n// private\n// -------\nvar Private;\n(function (Private) {\n    const base = 'widget-selection';\n    Private.classNames = {\n        root: base,\n        inner: `${base}-inner`,\n        box: `${base}-box`,\n        content: `${base}-content`,\n        rubberband: `${base}-rubberband`,\n        selected: `${base}-selected`,\n    };\n    Private.documentEvents = {\n        mousemove: 'adjustSelection',\n        touchmove: 'adjustSelection',\n        mouseup: 'onMouseUp',\n        touchend: 'onMouseUp',\n        touchcancel: 'onMouseUp',\n    };\n    Private.defaultOptions = {\n        movable: true,\n        following: true,\n        strict: false,\n        useCellGeometry: false,\n        content(selection) {\n            return StringExt.template('<%= length %> node<%= length > 1 ? \"s\":\"\" %> selected.')({ length: selection.length });\n        },\n        handles: [\n            {\n                name: 'remove',\n                position: 'nw',\n                events: {\n                    mousedown: 'deleteSelectedCells',\n                },\n            },\n            {\n                name: 'rotate',\n                position: 'sw',\n                events: {\n                    mousedown: 'startRotate',\n                    mousemove: 'doRotate',\n                    mouseup: 'stopRotate',\n                },\n            },\n            {\n                name: 'resize',\n                position: 'se',\n                events: {\n                    mousedown: 'startResize',\n                    mousemove: 'doResize',\n                    mouseup: 'stopResize',\n                },\n            },\n        ],\n    };\n    function depthComparator(cell) {\n        return cell.getAncestors().length;\n    }\n    Private.depthComparator = depthComparator;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}