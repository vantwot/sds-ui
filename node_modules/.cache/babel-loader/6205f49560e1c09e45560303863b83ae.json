{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _class2, _descriptor;\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { $window, isMini } from '@antv/l7-utils';\nimport EventEmitter from 'eventemitter3';\nimport { inject, injectable } from 'inversify';\nimport Hammer from 'l7hammerjs';\nimport 'reflect-metadata';\nimport { TYPES } from '../../types';\nimport { InteractionEvent } from './IInteractionService';\nvar DragEventMap = {\n  panstart: 'dragstart',\n  panmove: 'dragging',\n  panend: 'dragend',\n  pancancel: 'dragcancel'\n};\nvar InteractionService = (_dec = injectable(), _dec2 = inject(TYPES.IMapService), _dec(_class = (_class2 = function (_EventEmitter) {\n  _inherits(InteractionService, _EventEmitter);\n\n  var _super = _createSuper(InteractionService);\n\n  function InteractionService() {\n    var _this;\n\n    _classCallCheck(this, InteractionService);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _initializerDefineProperty(_assertThisInitialized(_this), \"mapService\", _descriptor, _assertThisInitialized(_this));\n\n    _defineProperty(_assertThisInitialized(_this), \"hammertime\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"lastClickTime\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"lastClickXY\", [-1, -1]);\n\n    _defineProperty(_assertThisInitialized(_this), \"clickTimer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"$containter\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onDrag\", function (target) {\n      var interactionTarget = _this.interactionEvent(target);\n\n      interactionTarget.type = DragEventMap[interactionTarget.type];\n\n      _this.emit(InteractionEvent.Drag, interactionTarget);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onHammer\", function (target) {\n      target.srcEvent.stopPropagation();\n\n      var interactionTarget = _this.interactionEvent(target);\n\n      _this.emit(InteractionEvent.Hover, interactionTarget);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouch\", function (target) {\n      var touch = target.touches[0];\n\n      _this.onHover({\n        x: touch.pageX,\n        y: touch.pageY,\n        type: 'touch'\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onHover\", function (event) {\n      var clientX = event.clientX,\n          clientY = event.clientY;\n      var x = clientX;\n      var y = clientY;\n      var type = event.type;\n\n      var $containter = _this.mapService.getMapContainer();\n\n      if ($containter) {\n        if (isMini) {\n          x = x - $containter.left - 0;\n          y = y - $containter.top - 0;\n        } else {\n          var _$containter$getBound = $containter.getBoundingClientRect(),\n              top = _$containter$getBound.top,\n              left = _$containter$getBound.left;\n\n          x = x - left - $containter.clientLeft;\n          y = y - top - $containter.clientTop;\n        }\n      }\n\n      var lngLat = _this.mapService.containerToLngLat([x, y]);\n\n      if (type === 'click') {\n        if (!isMini) {\n          if ('ontouchstart' in document.documentElement === true) {\n            return;\n          }\n        }\n\n        _this.isDoubleTap(x, y, lngLat);\n\n        return;\n      }\n\n      if (type === 'touch') {\n        _this.isDoubleTap(x, y, lngLat);\n\n        return;\n      }\n\n      if (type !== 'click' && type !== 'dblclick') {\n        _this.emit(InteractionEvent.Hover, {\n          x: x,\n          y: y,\n          lngLat: lngLat,\n          type: type,\n          target: event\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(InteractionService, [{\n    key: \"init\",\n    value: function init() {\n      this.addEventListenerOnMap();\n      this.$containter = this.mapService.getMapContainer();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.hammertime) {\n        this.hammertime.destroy();\n      }\n\n      this.removeEventListenerOnMap();\n      this.off(InteractionEvent.Hover);\n    }\n  }, {\n    key: \"triggerHover\",\n    value: function triggerHover(_ref) {\n      var x = _ref.x,\n          y = _ref.y;\n      this.emit(InteractionEvent.Hover, {\n        x: x,\n        y: y\n      });\n    }\n  }, {\n    key: \"triggerSelect\",\n    value: function triggerSelect(id) {\n      this.emit(InteractionEvent.Select, {\n        featureId: id\n      });\n    }\n  }, {\n    key: \"triggerActive\",\n    value: function triggerActive(id) {\n      this.emit(InteractionEvent.Active, {\n        featureId: id\n      });\n    }\n  }, {\n    key: \"handleMiniEvent\",\n    value: function handleMiniEvent(e) {\n      this.onHover({\n        clientX: e.touches[0].pageX,\n        clientY: e.touches[0].pageY,\n        type: 'touch'\n      });\n    }\n  }, {\n    key: \"addEventListenerOnMap\",\n    value: function addEventListenerOnMap() {\n      var $containter = this.mapService.getMapContainer();\n\n      if ($containter) {\n        if (isMini) {\n          $window.document.addEventListener('touchstart', this.handleMiniEvent.bind(this));\n        } else {\n          var hammertime = new Hammer.Manager($containter);\n          hammertime.add(new Hammer.Tap({\n            event: 'dblclick',\n            taps: 2\n          }));\n          hammertime.add(new Hammer.Tap({\n            event: 'click'\n          }));\n          hammertime.add(new Hammer.Pan({\n            threshold: 0,\n            pointers: 0\n          }));\n          hammertime.add(new Hammer.Press({}));\n          hammertime.on('dblclick click', this.onHammer);\n          hammertime.on('panstart panmove panend pancancel', this.onDrag);\n          $containter.addEventListener('mousemove', this.onHover);\n          $containter.addEventListener('mousedown', this.onHover, true);\n          $containter.addEventListener('mouseup', this.onHover);\n          $containter.addEventListener('contextmenu', this.onHover);\n          this.hammertime = hammertime;\n        }\n      }\n    }\n  }, {\n    key: \"removeEventListenerOnMap\",\n    value: function removeEventListenerOnMap() {\n      if (isMini) {\n        $window.document.removeEventListener('touchstart', this.handleMiniEvent.bind(this));\n      } else {\n        var $containter = this.mapService.getMapContainer();\n\n        if ($containter) {\n          $containter.removeEventListener('mousemove', this.onHover);\n          this.hammertime.off('panstart panmove panend pancancel', this.onDrag);\n          $containter.removeEventListener('mousedown', this.onHover);\n          $containter.removeEventListener('mouseup', this.onHover);\n          $containter.removeEventListener('contextmenu', this.onHover);\n        }\n      }\n    }\n  }, {\n    key: \"interactionEvent\",\n    value: function interactionEvent(target) {\n      var type = target.type,\n          pointerType = target.pointerType;\n      var clientX;\n      var clientY;\n\n      if (pointerType === 'touch') {\n        clientY = Math.floor(target.pointers[0].clientY);\n        clientX = Math.floor(target.pointers[0].clientX);\n      } else {\n        clientY = Math.floor(target.srcEvent.y);\n        clientX = Math.floor(target.srcEvent.x);\n      }\n\n      var $containter = this.mapService.getMapContainer();\n\n      if ($containter) {\n        var _$containter$getBound2 = $containter.getBoundingClientRect(),\n            top = _$containter$getBound2.top,\n            left = _$containter$getBound2.left;\n\n        clientX -= left;\n        clientY -= top;\n      }\n\n      var lngLat = this.mapService.containerToLngLat([clientX, clientY]);\n      return {\n        x: clientX,\n        y: clientY,\n        lngLat: lngLat,\n        type: type,\n        target: target.srcEvent\n      };\n    }\n  }, {\n    key: \"isDoubleTap\",\n    value: function isDoubleTap(x, y, lngLat) {\n      var _this2 = this;\n\n      var nowTime = new Date().getTime();\n      var type = 'click';\n\n      if (nowTime - this.lastClickTime < 400 && Math.abs(this.lastClickXY[0] - x) < 10 && Math.abs(this.lastClickXY[1] - y) < 10) {\n        this.lastClickTime = 0;\n        this.lastClickXY = [-1, -1];\n\n        if (this.clickTimer) {\n          clearTimeout(this.clickTimer);\n        }\n\n        type = 'dblclick';\n        this.emit(InteractionEvent.Hover, {\n          x: x,\n          y: y,\n          lngLat: lngLat,\n          type: type\n        });\n      } else {\n        this.lastClickTime = nowTime;\n        this.lastClickXY = [x, y];\n        this.clickTimer = setTimeout(function () {\n          type = 'click';\n\n          _this2.emit(InteractionEvent.Hover, {\n            x: x,\n            y: y,\n            lngLat: lngLat,\n            type: type\n          });\n        }, 400);\n      }\n    }\n  }]);\n\n  return InteractionService;\n}(EventEmitter), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"mapService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);\nexport { InteractionService as default };","map":{"version":3,"sources":["../../../src/services/interaction/InteractionService.ts"],"names":["DragEventMap","panstart","panmove","panend","pancancel","injectable","InteractionService","EventEmitter","inject","TYPES","InteractionEvent","x","y","featureId","id","clientX","e","clientY","type","$containter","$window","hammertime","Hammer","event","taps","threshold","pointers","interactionTarget","target","touch","pointerType","Math","top","left","lngLat","srcEvent","document","nowTime","clearTimeout","setTimeout"],"mappings":"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","sourcesContent":["import { $window, isMini } from '@antv/l7-utils';\nimport EventEmitter from 'eventemitter3';\nimport { inject, injectable } from 'inversify';\nimport Hammer from 'l7hammerjs'; // l7 - mini\nimport 'reflect-metadata';\n// @ts-ignore\nimport { TYPES } from '../../types';\nimport { ILngLat, IMapService } from '../map/IMapService';\nimport { IInteractionService, InteractionEvent } from './IInteractionService';\nconst DragEventMap: { [key: string]: string } = {\n  panstart: 'dragstart',\n  panmove: 'dragging',\n  panend: 'dragend',\n  pancancel: 'dragcancel',\n};\n/**\n * 由于目前 L7 与地图结合的方案为双 canvas 而非共享 WebGL Context，事件监听注册在地图底图上。\n * 除此之外，后续如果支持非地图场景，事件监听就需要注册在 L7 canvas 上。\n */\n@injectable()\nexport default class InteractionService extends EventEmitter\n  implements IInteractionService {\n  @inject(TYPES.IMapService)\n  private readonly mapService: IMapService;\n  // @ts-ignore\n  // private hammertime: HammerManager;\n  private hammertime: any;\n\n  private lastClickTime: number = 0;\n\n  private lastClickXY: number[] = [-1, -1];\n\n  private clickTimer: number;\n\n  private $containter: HTMLElement;\n\n  public init() {\n    // 注册事件在地图底图上\n    this.addEventListenerOnMap();\n    this.$containter = this.mapService.getMapContainer() as HTMLElement;\n  }\n\n  public destroy() {\n    if (this.hammertime) {\n      this.hammertime.destroy();\n    }\n    this.removeEventListenerOnMap();\n    this.off(InteractionEvent.Hover);\n  }\n\n  public triggerHover({ x, y }: { x: number; y: number }) {\n    this.emit(InteractionEvent.Hover, { x, y });\n  }\n  public triggerSelect(id: number): void {\n    this.emit(InteractionEvent.Select, { featureId: id });\n  }\n\n  public triggerActive(id: number): void {\n    this.emit(InteractionEvent.Active, { featureId: id });\n  }\n\n  public handleMiniEvent(e: any) {\n    // @ts-ignore\n    this.onHover({\n      clientX: e.touches[0].pageX,\n      clientY: e.touches[0].pageY,\n      type: 'touch',\n    });\n  }\n\n  private addEventListenerOnMap() {\n    const $containter = this.mapService.getMapContainer();\n    if ($containter) {\n      if (isMini) {\n        $window.document.addEventListener(\n          'touchstart',\n          this.handleMiniEvent.bind(this),\n        );\n      } else {\n        const hammertime = new Hammer.Manager($containter);\n        // $containter.addEventListener('mousemove', this.onHover);\n        // $containter.addEventListener('click', this.onHover);\n        hammertime.add(\n          new Hammer.Tap({\n            event: 'dblclick',\n            taps: 2,\n          }),\n        );\n        hammertime.add(\n          new Hammer.Tap({\n            event: 'click',\n          }),\n        );\n        hammertime.add(new Hammer.Pan({ threshold: 0, pointers: 0 }));\n        hammertime.add(new Hammer.Press({}));\n        // hammertime.get('pan').set({ direction: Hammer.DIRECTION_ALL });\n        // hammertime.get('pinch').set({ enable: true });\n        hammertime.on('dblclick click', this.onHammer);\n        hammertime.on('panstart panmove panend pancancel', this.onDrag);\n        // $containter.addEventListener('touchstart', this.onTouch);\n        $containter.addEventListener('mousemove', this.onHover);\n        // $containter.addEventListener('click', this.onHover);\n        $containter.addEventListener('mousedown', this.onHover, true);\n        $containter.addEventListener('mouseup', this.onHover);\n        $containter.addEventListener('contextmenu', this.onHover);\n        this.hammertime = hammertime;\n      }\n\n      // // TODO: 根据场景注册事件到 L7 canvas 上\n    }\n  }\n  private removeEventListenerOnMap() {\n    if (isMini) {\n      $window.document.removeEventListener(\n        'touchstart',\n        this.handleMiniEvent.bind(this),\n      );\n    } else {\n      const $containter = this.mapService.getMapContainer();\n      if ($containter) {\n        $containter.removeEventListener('mousemove', this.onHover);\n        // this.hammertime.off('dblclick click', this.onHammer);\n        this.hammertime.off('panstart panmove panend pancancel', this.onDrag);\n        // $containter.removeEventListener('touchstart', this.onTouch);\n        // $containter.removeEventListener('click', this.onHover);\n        $containter.removeEventListener('mousedown', this.onHover);\n        $containter.removeEventListener('mouseup', this.onHover);\n        // $containter.removeEventListener('dblclick', this.onHover);\n        $containter.removeEventListener('contextmenu', this.onHover);\n      }\n    }\n  }\n\n  private onDrag = (target: any) => {\n    const interactionTarget = this.interactionEvent(target);\n    interactionTarget.type = DragEventMap[interactionTarget.type];\n    this.emit(InteractionEvent.Drag, interactionTarget);\n  };\n\n  private onHammer = (target: any) => {\n    target.srcEvent.stopPropagation();\n    const interactionTarget = this.interactionEvent(target);\n    this.emit(InteractionEvent.Hover, interactionTarget);\n  };\n  private onTouch = (target: TouchEvent) => {\n    const touch = target.touches[0];\n    // @ts-ignore\n    this.onHover({\n      x: touch.pageX,\n      y: touch.pageY,\n      type: 'touch',\n    });\n  };\n\n  private interactionEvent(target: any) {\n    const { type, pointerType } = target;\n    let clientX;\n    let clientY;\n    if (pointerType === 'touch') {\n      clientY = Math.floor(target.pointers[0].clientY);\n      clientX = Math.floor(target.pointers[0].clientX);\n    } else {\n      clientY = Math.floor((target.srcEvent as MouseEvent).y);\n      clientX = Math.floor((target.srcEvent as MouseEvent).x);\n    }\n\n    const $containter = this.mapService.getMapContainer();\n    if ($containter) {\n      const { top, left } = $containter.getBoundingClientRect();\n      clientX -= left;\n      clientY -= top;\n    }\n    const lngLat = this.mapService.containerToLngLat([clientX, clientY]);\n    return { x: clientX, y: clientY, lngLat, type, target: target.srcEvent };\n  }\n  private onHover = (event: MouseEvent) => {\n    const { clientX, clientY } = event;\n    let x = clientX;\n    let y = clientY;\n    const type = event.type;\n    const $containter = this.mapService.getMapContainer();\n    if ($containter) {\n      if (isMini) {\n        // l7 - mini\n        // @ts-ignore\n        x = x - $containter.left - 0;\n        // @ts-ignore\n        y = y - $containter.top - 0;\n      } else {\n        const { top, left } = $containter.getBoundingClientRect();\n        x = x - left - $containter.clientLeft;\n        y = y - top - $containter.clientTop;\n      }\n    }\n    const lngLat = this.mapService.containerToLngLat([x, y]);\n\n    if (type === 'click') {\n      if (!isMini) {\n        // l7 - mini\n        if ('ontouchstart' in document.documentElement === true) {\n          return;\n        }\n      }\n      this.isDoubleTap(x, y, lngLat);\n      return;\n    }\n    if (type === 'touch') {\n      this.isDoubleTap(x, y, lngLat);\n      return;\n    }\n    if (type !== 'click' && type !== 'dblclick') {\n      this.emit(InteractionEvent.Hover, {\n        x,\n        y,\n        lngLat,\n        type,\n        target: event,\n      });\n    }\n  };\n\n  private isDoubleTap(x: number, y: number, lngLat: ILngLat) {\n    const nowTime = new Date().getTime();\n    let type = 'click';\n    if (\n      nowTime - this.lastClickTime < 400 &&\n      Math.abs(this.lastClickXY[0] - x) < 10 &&\n      Math.abs(this.lastClickXY[1] - y) < 10\n    ) {\n      this.lastClickTime = 0;\n      this.lastClickXY = [-1, -1];\n      if (this.clickTimer) {\n        clearTimeout(this.clickTimer);\n      }\n      type = 'dblclick';\n      this.emit(InteractionEvent.Hover, { x, y, lngLat, type });\n    } else {\n      this.lastClickTime = nowTime;\n      this.lastClickXY = [x, y];\n      // @ts-ignore\n      this.clickTimer = setTimeout(() => {\n        type = 'click';\n        this.emit(InteractionEvent.Hover, { x, y, lngLat, type });\n      }, 400);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}