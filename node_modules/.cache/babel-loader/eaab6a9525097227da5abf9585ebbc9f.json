{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.L7Plot = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar util_1 = require(\"@antv/util\");\n\nvar map_1 = require(\"../core/map\");\n\nvar utils_1 = require(\"../utils\");\n\nvar layer_group_1 = require(\"../core/layer/layer-group\");\n\nvar types_1 = require(\"./types\");\n\nvar DEFAULT_OPTIONS = {};\n\nvar L7Plot =\n/** @class */\nfunction (_super) {\n  (0, tslib_1.__extends)(L7Plot, _super);\n\n  function L7Plot(container, options) {\n    var _this = _super.call(this, options) || this;\n    /**\n     * 图表实例\n     */\n\n\n    _this.plots = [];\n    _this.container = _this.createContainer(container);\n    _this.theme = _this.createTheme();\n    _this.scene = _this.createScene();\n\n    _this.registerResources();\n\n    _this.render();\n\n    _this.inited = true;\n    return _this;\n  }\n  /**\n   * 获取默认配置\n   */\n\n\n  L7Plot.prototype.getDefaultOptions = function () {\n    return (0, utils_1.deepAssign)({}, map_1.Map.DefaultOptions, L7Plot.DefaultOptions);\n  };\n  /**\n   * 创建图层\n   */\n\n\n  L7Plot.prototype.createLayers = function () {\n    var layerGroup = new layer_group_1.LayerGroup([]);\n    var layers = this.options.layers || [];\n\n    for (var index = 0; index < layers.length; index++) {\n      var _a = layers[index],\n          type = _a.type,\n          options = (0, tslib_1.__rest)(_a, [\"type\"]);\n      var LayerClass = types_1.LAYERS_MAP[type];\n\n      if ((0, util_1.isUndefined)(LayerClass)) {\n        throw new Error(\"Don't exist \".concat(type, \" layer\"));\n      }\n\n      var layer = new LayerClass(options);\n      layerGroup.addLayer(layer);\n    }\n\n    return layerGroup;\n  };\n  /**\n   * 更新图层\n   */\n\n\n  L7Plot.prototype.updateLayers = function (layers) {//\n  };\n  /**\n   * 更新 Plot\n   */\n\n\n  L7Plot.prototype.updatePlots = function (plots) {//\n  };\n  /**\n   * 渲染\n   */\n\n\n  L7Plot.prototype.render = function () {\n    var layerGroup = this.createLayers();\n\n    if (this.inited) {\n      this.layerGroup.removeAllLayer();\n      layerGroup.addTo(this.scene);\n      this.layerGroup = layerGroup;\n      this.updateControls();\n    } else {\n      this.layerGroup = layerGroup;\n      this.onLayersLoaded();\n      layerGroup.addTo(this.scene);\n    }\n  };\n  /**\n   * 图层加载成功\n   */\n\n\n  L7Plot.prototype.onLayersLoaded = function () {\n    var _this = this;\n\n    var onLoaded = function () {\n      _this.renderPlots();\n\n      _this.initControls();\n\n      _this.loaded = true;\n\n      _this.emit('loaded');\n    };\n\n    if (this.scene['sceneService'].loaded) {\n      this.sceneLoaded = true;\n      this.layersLoaded && onLoaded();\n    } else {\n      this.scene.once('loaded', function () {\n        _this.sceneLoaded = true;\n        _this.layersLoaded && onLoaded();\n      });\n    }\n\n    if (this.layerGroup.isEmpty()) {\n      this.layersLoaded = true;\n    } else {\n      this.layerGroup.once('inited-all', function () {\n        _this.layersLoaded = true;\n        _this.sceneLoaded && onLoaded();\n      });\n    }\n  };\n  /**\n   * 渲染 plot\n   */\n\n\n  L7Plot.prototype.renderPlot = function (plot) {\n    var type = plot.type,\n        legend = plot.legend,\n        layerMenu = plot.layerMenu,\n        options = (0, tslib_1.__rest)(plot, [\"type\", \"legend\", \"layerMenu\"]);\n    var PlotClass = types_1.PLOTS_MAP[type];\n\n    if ((0, util_1.isUndefined)(PlotClass)) {\n      throw new Error(\"Don't exist \".concat(type, \" plot\"));\n    }\n\n    var plotInstance = new PlotClass(options);\n    plotInstance.attachToScene(this.scene, this.theme);\n    this.plots.push(plotInstance);\n  };\n  /**\n   * 渲染 plots\n   */\n\n\n  L7Plot.prototype.renderPlots = function () {\n    var plots = this.options.plots || [];\n\n    for (var index = 0; index < plots.length; index++) {\n      var plot = plots[index];\n      this.renderPlot(plot);\n    }\n  };\n  /**\n   * 添加图表\n   */\n\n\n  L7Plot.prototype.addPlot = function (plot) {\n    // TODO: duplicate plot\n    this.renderPlot(plot);\n  };\n  /**\n   * 默认的 options 配置项\n   */\n\n\n  L7Plot.DefaultOptions = DEFAULT_OPTIONS;\n  return L7Plot;\n}(map_1.Map);\n\nexports.L7Plot = L7Plot;","map":{"version":3,"sources":["../../../src/plot/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.L7Plot = void 0;\nvar tslib_1 = require(\"tslib\");\nvar util_1 = require(\"@antv/util\");\nvar map_1 = require(\"../core/map\");\nvar utils_1 = require(\"../utils\");\nvar layer_group_1 = require(\"../core/layer/layer-group\");\nvar types_1 = require(\"./types\");\nvar DEFAULT_OPTIONS = {};\nvar L7Plot = /** @class */ (function (_super) {\n    (0, tslib_1.__extends)(L7Plot, _super);\n    function L7Plot(container, options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * 图表实例\n         */\n        _this.plots = [];\n        _this.container = _this.createContainer(container);\n        _this.theme = _this.createTheme();\n        _this.scene = _this.createScene();\n        _this.registerResources();\n        _this.render();\n        _this.inited = true;\n        return _this;\n    }\n    /**\n     * 获取默认配置\n     */\n    L7Plot.prototype.getDefaultOptions = function () {\n        return (0, utils_1.deepAssign)({}, map_1.Map.DefaultOptions, L7Plot.DefaultOptions);\n    };\n    /**\n     * 创建图层\n     */\n    L7Plot.prototype.createLayers = function () {\n        var layerGroup = new layer_group_1.LayerGroup([]);\n        var layers = this.options.layers || [];\n        for (var index = 0; index < layers.length; index++) {\n            var _a = layers[index], type = _a.type, options = (0, tslib_1.__rest)(_a, [\"type\"]);\n            var LayerClass = types_1.LAYERS_MAP[type];\n            if ((0, util_1.isUndefined)(LayerClass)) {\n                throw new Error(\"Don't exist \".concat(type, \" layer\"));\n            }\n            var layer = new LayerClass(options);\n            layerGroup.addLayer(layer);\n        }\n        return layerGroup;\n    };\n    /**\n     * 更新图层\n     */\n    L7Plot.prototype.updateLayers = function (layers) {\n        //\n    };\n    /**\n     * 更新 Plot\n     */\n    L7Plot.prototype.updatePlots = function (plots) {\n        //\n    };\n    /**\n     * 渲染\n     */\n    L7Plot.prototype.render = function () {\n        var layerGroup = this.createLayers();\n        if (this.inited) {\n            this.layerGroup.removeAllLayer();\n            layerGroup.addTo(this.scene);\n            this.layerGroup = layerGroup;\n            this.updateControls();\n        }\n        else {\n            this.layerGroup = layerGroup;\n            this.onLayersLoaded();\n            layerGroup.addTo(this.scene);\n        }\n    };\n    /**\n     * 图层加载成功\n     */\n    L7Plot.prototype.onLayersLoaded = function () {\n        var _this = this;\n        var onLoaded = function () {\n            _this.renderPlots();\n            _this.initControls();\n            _this.loaded = true;\n            _this.emit('loaded');\n        };\n        if (this.scene['sceneService'].loaded) {\n            this.sceneLoaded = true;\n            this.layersLoaded && onLoaded();\n        }\n        else {\n            this.scene.once('loaded', function () {\n                _this.sceneLoaded = true;\n                _this.layersLoaded && onLoaded();\n            });\n        }\n        if (this.layerGroup.isEmpty()) {\n            this.layersLoaded = true;\n        }\n        else {\n            this.layerGroup.once('inited-all', function () {\n                _this.layersLoaded = true;\n                _this.sceneLoaded && onLoaded();\n            });\n        }\n    };\n    /**\n     * 渲染 plot\n     */\n    L7Plot.prototype.renderPlot = function (plot) {\n        var type = plot.type, legend = plot.legend, layerMenu = plot.layerMenu, options = (0, tslib_1.__rest)(plot, [\"type\", \"legend\", \"layerMenu\"]);\n        var PlotClass = types_1.PLOTS_MAP[type];\n        if ((0, util_1.isUndefined)(PlotClass)) {\n            throw new Error(\"Don't exist \".concat(type, \" plot\"));\n        }\n        var plotInstance = new PlotClass(options);\n        plotInstance.attachToScene(this.scene, this.theme);\n        this.plots.push(plotInstance);\n    };\n    /**\n     * 渲染 plots\n     */\n    L7Plot.prototype.renderPlots = function () {\n        var plots = this.options.plots || [];\n        for (var index = 0; index < plots.length; index++) {\n            var plot = plots[index];\n            this.renderPlot(plot);\n        }\n    };\n    /**\n     * 添加图表\n     */\n    L7Plot.prototype.addPlot = function (plot) {\n        // TODO: duplicate plot\n        this.renderPlot(plot);\n    };\n    /**\n     * 默认的 options 配置项\n     */\n    L7Plot.DefaultOptions = DEFAULT_OPTIONS;\n    return L7Plot;\n}(map_1.Map));\nexports.L7Plot = L7Plot;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}