{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { MapMouseEvent } from './events';\n\nvar BlockableMapEventHandler = function () {\n  function BlockableMapEventHandler(map) {\n    _classCallCheck(this, BlockableMapEventHandler);\n\n    _defineProperty(this, \"map\", void 0);\n\n    _defineProperty(this, \"delayContextMenu\", void 0);\n\n    _defineProperty(this, \"contextMenuEvent\", void 0);\n\n    this.map = map;\n  }\n\n  _createClass(BlockableMapEventHandler, [{\n    key: \"reset\",\n    value: function reset() {\n      this.delayContextMenu = false;\n      delete this.contextMenuEvent;\n    }\n  }, {\n    key: \"mousemove\",\n    value: function mousemove(e) {\n      this.map.emit(e.type, new MapMouseEvent(e.type, this.map, e));\n    }\n  }, {\n    key: \"mousedown\",\n    value: function mousedown() {\n      this.delayContextMenu = true;\n    }\n  }, {\n    key: \"mouseup\",\n    value: function mouseup() {\n      this.delayContextMenu = false;\n\n      if (this.contextMenuEvent) {\n        this.map.emit('contextmenu', new MapMouseEvent('contextmenu', this.map, this.contextMenuEvent));\n        delete this.contextMenuEvent;\n      }\n    }\n  }, {\n    key: \"contextmenu\",\n    value: function contextmenu(e) {\n      if (this.delayContextMenu) {\n        this.contextMenuEvent = e;\n      } else {\n        this.map.emit(e.type, new MapMouseEvent(e.type, this.map, e));\n      }\n\n      if (this.map.listeners('contextmenu')) {\n        e.preventDefault();\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return true;\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return false;\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      return true;\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      return false;\n    }\n  }]);\n\n  return BlockableMapEventHandler;\n}();\n\nexport { BlockableMapEventHandler as default };","map":{"version":3,"sources":["../../src/handler/blockable_map_event.ts"],"names":["BlockableMapEventHandler","e"],"mappings":";;;AAIA,SAAA,aAAA,QAAA,UAAA;;IACqBA,wB;AAKnB,WAAA,wBAAA,CAAA,GAAA,EAAiC;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,wBAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,KAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,kBAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,kBAAA,EAAA,KAAA,CAAA,CAAA;;AAC/B,SAAA,GAAA,GAAA,GAAA;AACD;;;;WAED,SAAA,KAAA,GAAe;AACb,WAAA,gBAAA,GAAA,KAAA;AAEA,aAAO,KAAP,gBAAA;AACD;;;WAED,SAAA,SAAA,CAAA,CAAA,EAAgC;AAE9B,WAAA,GAAA,CAAA,IAAA,CAAcC,CAAC,CAAf,IAAA,EAAsB,IAAA,aAAA,CAAkBA,CAAC,CAAnB,IAAA,EAA0B,KAA1B,GAAA,EAAtB,CAAsB,CAAtB;AACD;;;WAED,SAAA,SAAA,GAAmB;AACjB,WAAA,gBAAA,GAAA,IAAA;AACD;;;WAED,SAAA,OAAA,GAAiB;AACf,WAAA,gBAAA,GAAA,KAAA;;AACA,UAAI,KAAJ,gBAAA,EAA2B;AACzB,aAAA,GAAA,CAAA,IAAA,CAAA,aAAA,EAEE,IAAA,aAAA,CAAA,aAAA,EAAiC,KAAjC,GAAA,EAA2C,KAF7C,gBAEE,CAFF;AAKA,eAAO,KAAP,gBAAA;AACD;AACF;;;WACD,SAAA,WAAA,CAAA,CAAA,EAAkC;AAChC,UAAI,KAAJ,gBAAA,EAA2B;AAEzB,aAAA,gBAAA,GAAA,CAAA;AAFF,OAAA,MAGO;AAEL,aAAA,GAAA,CAAA,IAAA,CAAcA,CAAC,CAAf,IAAA,EAAsB,IAAA,aAAA,CAAkBA,CAAC,CAAnB,IAAA,EAA0B,KAA1B,GAAA,EAAtB,CAAsB,CAAtB;AACD;;AAGD,UAAI,KAAA,GAAA,CAAA,SAAA,CAAJ,aAAI,CAAJ,EAAuC;AACrCA,QAAAA,CAAC,CAADA,cAAAA;AACD;AACF;;;WAED,SAAA,SAAA,GAAmB;AACjB,aAAA,IAAA;AACD;;;WAED,SAAA,QAAA,GAAkB;AAChB,aAAA,KAAA;AACD;;;WACD,SAAA,MAAA,GAAgB;AACd,aAAA,IAAA;AACD;;;WACD,SAAA,OAAA,GAAiB;AACf,aAAA,KAAA;AACD;;;;;;SA9DkBD,wB","sourcesContent":["// @ts-ignore\nimport { EarthMap } from '../earthmap';\nimport Point from '../geo/point';\nimport { Map } from '../map';\nimport { MapMouseEvent, MapTouchEvent, MapWheelEvent } from './events';\nexport default class BlockableMapEventHandler {\n  private map: Map | EarthMap;\n  private delayContextMenu: boolean;\n  private contextMenuEvent: MouseEvent;\n\n  constructor(map: Map | EarthMap) {\n    this.map = map;\n  }\n\n  public reset() {\n    this.delayContextMenu = false;\n    // @ts-ignore\n    delete this.contextMenuEvent;\n  }\n\n  public mousemove(e: MouseEvent) {\n    // mousemove map events should not be fired when interaction handlers (pan, rotate, etc) are active\n    this.map.emit(e.type, new MapMouseEvent(e.type, this.map, e));\n  }\n\n  public mousedown() {\n    this.delayContextMenu = true;\n  }\n\n  public mouseup() {\n    this.delayContextMenu = false;\n    if (this.contextMenuEvent) {\n      this.map.emit(\n        'contextmenu',\n        new MapMouseEvent('contextmenu', this.map, this.contextMenuEvent),\n      );\n      // @ts-ignore\n      delete this.contextMenuEvent;\n    }\n  }\n  public contextmenu(e: MouseEvent) {\n    if (this.delayContextMenu) {\n      // Mac: contextmenu fired on mousedown; we save it until mouseup for consistency's sake\n      this.contextMenuEvent = e;\n    } else {\n      // Windows: contextmenu fired on mouseup, so fire event now\n      this.map.emit(e.type, new MapMouseEvent(e.type, this.map, e));\n    }\n\n    // prevent browser context menu when necessary\n    if (this.map.listeners('contextmenu')) {\n      e.preventDefault();\n    }\n  }\n\n  public isEnabled() {\n    return true;\n  }\n\n  public isActive() {\n    return false;\n  }\n  public enable() {\n    return true;\n  }\n  public disable() {\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}