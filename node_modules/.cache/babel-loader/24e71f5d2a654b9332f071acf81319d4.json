{"ast":null,"code":"/* eslint-disable jsx-a11y/click-events-have-key-events  */\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Popover } from 'antd';\nimport 'antd/es/popover/style/index.css';\nimport addEventListener from 'rc-util/lib/Dom/addEventListener';\nimport { SketchPicker } from 'react-color';\nexport class ColorPicker extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onDocumentClick = e => {\n      const target = e.target;\n\n      if (target === this.container || this.container.contains(target)) {\n        return;\n      }\n\n      this.setState({\n        active: false\n      });\n      this.unbindDocEvent();\n    };\n\n    this.handleChange = (value, event) => {\n      if (this.props.onChange) {\n        this.props.onChange(value, event);\n      }\n\n      this.setState({\n        active: false,\n        color: value.rgb\n      });\n      this.unbindDocEvent();\n    };\n\n    this.handleClick = e => {\n      e.stopPropagation();\n\n      if (this.state.active) {\n        this.setState({\n          active: false\n        });\n        this.unbindDocEvent();\n      } else {\n        this.setState({\n          active: true\n        });\n\n        if (!this.removeDocClickEvent) {\n          this.removeDocClickEvent = addEventListener(document.documentElement, 'click', this.onDocumentClick).remove;\n        }\n      }\n    };\n\n    this.refContainer = container => {\n      this.container = container;\n    };\n\n    this.state = {\n      active: false,\n      color: props.color\n    };\n  }\n\n  componentWillUnmount() {\n    this.unbindDocEvent();\n  }\n\n  unbindDocEvent() {\n    if (this.removeDocClickEvent) {\n      this.removeDocClickEvent();\n      this.removeDocClickEvent = null;\n    }\n  }\n\n  renderPicker() {\n    const _a = this.props,\n          {\n      prefixCls,\n      disabled,\n      style\n    } = _a,\n          props = __rest(_a, [\"prefixCls\", \"disabled\", \"style\"]);\n\n    return React.createElement(SketchPicker, Object.assign({\n      width: \"240px\"\n    }, props, {\n      onChange: this.handleChange\n    }));\n  }\n\n  render() {\n    const {\n      color\n    } = this.state;\n    const {\n      disabled,\n      overlayProps,\n      style\n    } = this.props;\n    const baseCls = `${this.props.prefixCls}-color-picker`;\n    const popoverProps = {};\n\n    if (disabled) {\n      popoverProps.visible = false;\n    } else {\n      popoverProps.visible = this.state.active;\n    }\n\n    const colorStr = typeof color === 'string' ? color : `rgba(${color.r},${color.g},${color.b},${color.a})`;\n    return React.createElement(Popover, Object.assign({\n      placement: \"topLeft\"\n    }, overlayProps, popoverProps, {\n      content: this.renderPicker(),\n      overlayClassName: `${baseCls}-overlay`\n    }), React.createElement(\"div\", {\n      style: style,\n      ref: this.refContainer,\n      onClick: this.handleClick,\n      className: classNames(baseCls, {\n        [`${baseCls}-disabled`]: disabled\n      })\n    }, React.createElement(\"div\", {\n      className: `${baseCls}-block`,\n      style: {\n        backgroundColor: disabled ? '#c4c4c4' : colorStr\n      }\n    })));\n  }\n\n}\n\n(function (ColorPicker) {\n  ColorPicker.defaultProps = {\n    prefixCls: 'x6',\n    color: '#1890FF'\n  };\n})(ColorPicker || (ColorPicker = {}));","map":{"version":3,"sources":["../../src/color-picker/index.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/* eslint-disable jsx-a11y/click-events-have-key-events  */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Popover } from 'antd';\nimport 'antd/es/popover/style/index.css';\nimport addEventListener from 'rc-util/lib/Dom/addEventListener';\nimport { SketchPicker, } from 'react-color';\nexport class ColorPicker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onDocumentClick = (e) => {\n            const target = e.target;\n            if (target === this.container || this.container.contains(target)) {\n                return;\n            }\n            this.setState({ active: false });\n            this.unbindDocEvent();\n        };\n        this.handleChange = (value, event) => {\n            if (this.props.onChange) {\n                this.props.onChange(value, event);\n            }\n            this.setState({\n                active: false,\n                color: value.rgb,\n            });\n            this.unbindDocEvent();\n        };\n        this.handleClick = (e) => {\n            e.stopPropagation();\n            if (this.state.active) {\n                this.setState({ active: false });\n                this.unbindDocEvent();\n            }\n            else {\n                this.setState({ active: true });\n                if (!this.removeDocClickEvent) {\n                    this.removeDocClickEvent = addEventListener(document.documentElement, 'click', this.onDocumentClick).remove;\n                }\n            }\n        };\n        this.refContainer = (container) => {\n            this.container = container;\n        };\n        this.state = {\n            active: false,\n            color: props.color,\n        };\n    }\n    componentWillUnmount() {\n        this.unbindDocEvent();\n    }\n    unbindDocEvent() {\n        if (this.removeDocClickEvent) {\n            this.removeDocClickEvent();\n            this.removeDocClickEvent = null;\n        }\n    }\n    renderPicker() {\n        const _a = this.props, { prefixCls, disabled, style } = _a, props = __rest(_a, [\"prefixCls\", \"disabled\", \"style\"]);\n        return (React.createElement(SketchPicker, Object.assign({ width: \"240px\" }, props, { onChange: this.handleChange })));\n    }\n    render() {\n        const { color } = this.state;\n        const { disabled, overlayProps, style } = this.props;\n        const baseCls = `${this.props.prefixCls}-color-picker`;\n        const popoverProps = {};\n        if (disabled) {\n            popoverProps.visible = false;\n        }\n        else {\n            popoverProps.visible = this.state.active;\n        }\n        const colorStr = typeof color === 'string'\n            ? color\n            : `rgba(${color.r},${color.g},${color.b},${color.a})`;\n        return (React.createElement(Popover, Object.assign({ placement: \"topLeft\" }, overlayProps, popoverProps, { content: this.renderPicker(), overlayClassName: `${baseCls}-overlay` }),\n            React.createElement(\"div\", { style: style, ref: this.refContainer, onClick: this.handleClick, className: classNames(baseCls, {\n                    [`${baseCls}-disabled`]: disabled,\n                }) },\n                React.createElement(\"div\", { className: `${baseCls}-block`, style: { backgroundColor: disabled ? '#c4c4c4' : colorStr } }))));\n    }\n}\n(function (ColorPicker) {\n    ColorPicker.defaultProps = {\n        prefixCls: 'x6',\n        color: '#1890FF',\n    };\n})(ColorPicker || (ColorPicker = {}));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}