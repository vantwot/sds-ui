{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Flow = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar util_1 = require(\"@antv/util\");\n\nvar plot_1 = require(\"../../core/plot\");\n\nvar constants_1 = require(\"./constants\");\n\nvar arc_layer_1 = require(\"../../layers/arc-layer\");\n\nvar dot_layer_1 = require(\"../../layers/dot-layer\");\n\nvar text_layer_1 = require(\"../../layers/text-layer\");\n\nvar layer_group_1 = require(\"../../core/layer/layer-group\");\n\nvar Flow =\n/** @class */\nfunction (_super) {\n  (0, tslib_1.__extends)(Flow, _super);\n\n  function Flow() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * 图表类型\n     */\n\n\n    _this.type = plot_1.Plot.PlotType.Flow;\n    return _this;\n  }\n  /**\n   * 获取默认配置\n   */\n\n\n  Flow.prototype.getDefaultOptions = function () {\n    return Flow.DefaultOptions;\n  };\n  /**\n   * 创建图层\n   */\n\n\n  Flow.prototype.createLayers = function (source) {\n    this.flowLayer = new arc_layer_1.ArcLayer((0, tslib_1.__assign)({\n      name: 'flowLayer',\n      source: source\n    }, (0, util_1.pick)(this.options, arc_layer_1.ArcLayer.LayerOptionsKeys)));\n    var layerGroup = new layer_group_1.LayerGroup([this.flowLayer]);\n\n    if (this.options.radiation) {\n      this.radiationLayer = this.createRadiationLayer(source);\n      layerGroup.addLayer(this.radiationLayer);\n    }\n\n    if (this.options.label) {\n      this.labelLayer = this.createLabelLayer(source, this.options.label);\n      layerGroup.addLayer(this.labelLayer);\n    }\n\n    return layerGroup;\n  };\n  /**\n   * 解析流向图起终点数据\n   */\n\n\n  Flow.prototype.parserPointData = function (source) {\n    // const pointMap = {};\n    var data = [];\n    source.data.dataArray.forEach(function (item) {\n      var coordinates = item.coordinates;\n\n      var _a = (0, tslib_1.__read)(coordinates, 2),\n          startPoint = _a[0],\n          endPoint = _a[1]; // if (isUndefined(pointMap[startPoint.toString()])) {\n      //   data.push({ ...item, coordinates: startPoint });\n      //   pointMap[startPoint.toString()] = true;\n      // }\n\n\n      data.push((0, tslib_1.__assign)((0, tslib_1.__assign)({}, item), {\n        coordinates: endPoint\n      }));\n    });\n    return data;\n  };\n  /**\n   * 创建辐射圈图层\n   */\n\n\n  Flow.prototype.createRadiationLayer = function (source) {\n    var _this = this;\n\n    var data = this.parserPointData(source);\n\n    var _a = this.options.radiation || {\n      size: 20\n    },\n        color = _a.color,\n        size = _a.size;\n\n    var radiationLayer = new dot_layer_1.DotLayer({\n      name: 'radiationLayer',\n      source: {\n        data: data,\n        parser: {\n          type: 'json',\n          coordinates: 'coordinates'\n        }\n      },\n      color: color,\n      size: size,\n      animate: true\n    });\n    source.on('update', function () {\n      var data = _this.parserPointData(_this.source);\n\n      radiationLayer.layer.setData(data);\n    });\n    return radiationLayer;\n  };\n  /**\n   * 创建数据标签图层\n   */\n\n\n  Flow.prototype.createLabelLayer = function (source, label) {\n    var _this = this;\n\n    var data = this.parserPointData(source);\n    var _a = this.options,\n        visible = _a.visible,\n        minZoom = _a.minZoom,\n        maxZoom = _a.maxZoom,\n        _b = _a.zIndex,\n        zIndex = _b === void 0 ? 0 : _b;\n    var labelLayer = new text_layer_1.TextLayer((0, tslib_1.__assign)({\n      name: 'labelLayer',\n      source: {\n        data: data,\n        parser: {\n          type: 'json',\n          coordinates: 'coordinates'\n        }\n      },\n      visible: visible,\n      minZoom: minZoom,\n      maxZoom: maxZoom,\n      zIndex: zIndex + 0.1\n    }, label));\n    source.on('update', function () {\n      var data = _this.parserPointData(_this.source);\n\n      labelLayer.layer.setData(data);\n    });\n    return labelLayer;\n  };\n  /**\n   * 更新图层\n   */\n\n\n  Flow.prototype.updateLayers = function (options) {\n    var flowLayerConfig = (0, util_1.pick)(options, arc_layer_1.ArcLayer.LayerOptionsKeys);\n    this.flowLayer.update(flowLayerConfig);\n\n    if (options.radiation) {\n      if (!this.radiationLayer) {\n        this.radiationLayer = this.createRadiationLayer(this.source);\n        this.layerGroup.addLayer(this.radiationLayer);\n      }\n    } else {\n      if (this.radiationLayer) {\n        this.layerGroup.removeLayer(this.radiationLayer);\n      }\n    }\n\n    if (options.label) {\n      if (this.labelLayer) {\n        this.labelLayer.update((0, tslib_1.__assign)({}, options.label));\n      } else {\n        this.labelLayer = this.createLabelLayer(this.source, options.label);\n        this.layerGroup.addLayer(this.labelLayer);\n      }\n    } else {\n      if (this.labelLayer) {\n        this.layerGroup.removeLayer(this.labelLayer);\n      }\n    }\n  };\n  /**\n   * 实现 legend 配置项\n   */\n\n\n  Flow.prototype.getLegendOptions = function () {\n    var colorLegendItems = this.flowLayer.getColorLegendItems();\n\n    if (colorLegendItems.length !== 0) {\n      return {\n        type: 'category',\n        items: colorLegendItems\n      };\n    }\n\n    return {};\n  };\n  /**\n   * 默认配置项\n   */\n\n\n  Flow.DefaultOptions = constants_1.DEFAULT_OPTIONS;\n  return Flow;\n}(plot_1.Plot);\n\nexports.Flow = Flow;","map":{"version":3,"sources":["../../../../src/plots/flow/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Flow = void 0;\nvar tslib_1 = require(\"tslib\");\nvar util_1 = require(\"@antv/util\");\nvar plot_1 = require(\"../../core/plot\");\nvar constants_1 = require(\"./constants\");\nvar arc_layer_1 = require(\"../../layers/arc-layer\");\nvar dot_layer_1 = require(\"../../layers/dot-layer\");\nvar text_layer_1 = require(\"../../layers/text-layer\");\nvar layer_group_1 = require(\"../../core/layer/layer-group\");\nvar Flow = /** @class */ (function (_super) {\n    (0, tslib_1.__extends)(Flow, _super);\n    function Flow() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * 图表类型\n         */\n        _this.type = plot_1.Plot.PlotType.Flow;\n        return _this;\n    }\n    /**\n     * 获取默认配置\n     */\n    Flow.prototype.getDefaultOptions = function () {\n        return Flow.DefaultOptions;\n    };\n    /**\n     * 创建图层\n     */\n    Flow.prototype.createLayers = function (source) {\n        this.flowLayer = new arc_layer_1.ArcLayer((0, tslib_1.__assign)({ name: 'flowLayer', source: source }, (0, util_1.pick)(this.options, arc_layer_1.ArcLayer.LayerOptionsKeys)));\n        var layerGroup = new layer_group_1.LayerGroup([this.flowLayer]);\n        if (this.options.radiation) {\n            this.radiationLayer = this.createRadiationLayer(source);\n            layerGroup.addLayer(this.radiationLayer);\n        }\n        if (this.options.label) {\n            this.labelLayer = this.createLabelLayer(source, this.options.label);\n            layerGroup.addLayer(this.labelLayer);\n        }\n        return layerGroup;\n    };\n    /**\n     * 解析流向图起终点数据\n     */\n    Flow.prototype.parserPointData = function (source) {\n        // const pointMap = {};\n        var data = [];\n        source.data.dataArray.forEach(function (item) {\n            var coordinates = item.coordinates;\n            var _a = (0, tslib_1.__read)(coordinates, 2), startPoint = _a[0], endPoint = _a[1];\n            // if (isUndefined(pointMap[startPoint.toString()])) {\n            //   data.push({ ...item, coordinates: startPoint });\n            //   pointMap[startPoint.toString()] = true;\n            // }\n            data.push((0, tslib_1.__assign)((0, tslib_1.__assign)({}, item), { coordinates: endPoint }));\n        });\n        return data;\n    };\n    /**\n     * 创建辐射圈图层\n     */\n    Flow.prototype.createRadiationLayer = function (source) {\n        var _this = this;\n        var data = this.parserPointData(source);\n        var _a = this.options.radiation || { size: 20 }, color = _a.color, size = _a.size;\n        var radiationLayer = new dot_layer_1.DotLayer({\n            name: 'radiationLayer',\n            source: {\n                data: data,\n                parser: { type: 'json', coordinates: 'coordinates' },\n            },\n            color: color,\n            size: size,\n            animate: true,\n        });\n        source.on('update', function () {\n            var data = _this.parserPointData(_this.source);\n            radiationLayer.layer.setData(data);\n        });\n        return radiationLayer;\n    };\n    /**\n     * 创建数据标签图层\n     */\n    Flow.prototype.createLabelLayer = function (source, label) {\n        var _this = this;\n        var data = this.parserPointData(source);\n        var _a = this.options, visible = _a.visible, minZoom = _a.minZoom, maxZoom = _a.maxZoom, _b = _a.zIndex, zIndex = _b === void 0 ? 0 : _b;\n        var labelLayer = new text_layer_1.TextLayer((0, tslib_1.__assign)({ name: 'labelLayer', source: {\n                data: data,\n                parser: { type: 'json', coordinates: 'coordinates' },\n            }, visible: visible, minZoom: minZoom, maxZoom: maxZoom, zIndex: zIndex + 0.1 }, label));\n        source.on('update', function () {\n            var data = _this.parserPointData(_this.source);\n            labelLayer.layer.setData(data);\n        });\n        return labelLayer;\n    };\n    /**\n     * 更新图层\n     */\n    Flow.prototype.updateLayers = function (options) {\n        var flowLayerConfig = (0, util_1.pick)(options, arc_layer_1.ArcLayer.LayerOptionsKeys);\n        this.flowLayer.update(flowLayerConfig);\n        if (options.radiation) {\n            if (!this.radiationLayer) {\n                this.radiationLayer = this.createRadiationLayer(this.source);\n                this.layerGroup.addLayer(this.radiationLayer);\n            }\n        }\n        else {\n            if (this.radiationLayer) {\n                this.layerGroup.removeLayer(this.radiationLayer);\n            }\n        }\n        if (options.label) {\n            if (this.labelLayer) {\n                this.labelLayer.update((0, tslib_1.__assign)({}, options.label));\n            }\n            else {\n                this.labelLayer = this.createLabelLayer(this.source, options.label);\n                this.layerGroup.addLayer(this.labelLayer);\n            }\n        }\n        else {\n            if (this.labelLayer) {\n                this.layerGroup.removeLayer(this.labelLayer);\n            }\n        }\n    };\n    /**\n     * 实现 legend 配置项\n     */\n    Flow.prototype.getLegendOptions = function () {\n        var colorLegendItems = this.flowLayer.getColorLegendItems();\n        if (colorLegendItems.length !== 0) {\n            return { type: 'category', items: colorLegendItems };\n        }\n        return {};\n    };\n    /**\n     * 默认配置项\n     */\n    Flow.DefaultOptions = constants_1.DEFAULT_OPTIONS;\n    return Flow;\n}(plot_1.Plot));\nexports.Flow = Flow;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}