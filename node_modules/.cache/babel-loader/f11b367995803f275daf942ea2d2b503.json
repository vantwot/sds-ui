{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n/**\n * @fileOverview the base class of Coordinate\n * @author sima.zhang\n */\n\nvar mat3_1 = require(\"./util/mat3\");\n\nvar vec3 = require(\"@antv/gl-matrix/lib/gl-matrix/vec3\");\n\nvar Coord =\n/** @class */\nfunction () {\n  function Coord(cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n\n    this.matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    this.isTransposed = false;\n    Object.assign(this, cfg);\n    this.init();\n  }\n\n  Coord.prototype.init = function () {\n    var start = this.start;\n    var end = this.end;\n    var center = {\n      x: (start.x + end.x) / 2,\n      y: (start.y + end.y) / 2\n    };\n    this.center = center;\n    this.width = Math.abs(end.x - start.x);\n    this.height = Math.abs(end.y - start.y);\n  };\n\n  Coord.prototype._swapDim = function (dim) {\n    var dimRange = this[dim];\n\n    if (dimRange) {\n      var tmp = dimRange.start;\n      dimRange.start = dimRange.end;\n      dimRange.end = tmp;\n    }\n  };\n\n  Coord.prototype.getCenter = function () {\n    return this.center;\n  };\n\n  Coord.prototype.getWidth = function () {\n    return this.width;\n  };\n\n  Coord.prototype.getHeight = function () {\n    return this.height;\n  };\n\n  Coord.prototype.convertDim = function (percent, dim) {\n    var _a = this[dim],\n        start = _a.start,\n        end = _a.end;\n    return start + percent * (end - start);\n  };\n\n  Coord.prototype.invertDim = function (value, dim) {\n    var _a = this[dim],\n        start = _a.start,\n        end = _a.end;\n    return (value - start) / (end - start);\n  };\n  /**\n   * 将归一化的坐标点数据转换为画布坐标\n   * @override\n   * @param  {Object} point 归一化的坐标点\n   * @return {Object}       返回画布坐标\n   */\n\n\n  Coord.prototype.convertPoint = function (point) {\n    return point;\n  };\n  /**\n   * 将画布坐标转换为归一化的坐标点数据\n   * @override\n   * @param  {Object} PointType 画布坐标点数据\n   * @return {Object}       归一化后的数据点\n   */\n\n\n  Coord.prototype.invertPoint = function (point) {\n    return point;\n  };\n  /**\n   * 将坐标点进行矩阵变换\n   * @param  {Number} x   对应 x 轴画布坐标\n   * @param  {Number} y   对应 y 轴画布坐标\n   * @param  {Number} tag 默认为 0，可取值 0, 1\n   * @return {Array}     返回变换后的三阶向量 [x, y, z]\n   */\n\n\n  Coord.prototype.applyMatrix = function (x, y, tag) {\n    if (tag === void 0) {\n      tag = 0;\n    }\n\n    var matrix = this.matrix;\n    var vector = [x, y, tag];\n    vec3.transformMat3(vector, vector, matrix);\n    return vector;\n  };\n  /**\n   * 将坐标点进行矩阵逆变换\n   * @param  {Number} x   对应 x 轴画布坐标\n   * @param  {Number} y   对应 y 轴画布坐标\n   * @param  {Number} tag 默认为 0，可取值 0, 1\n   * @return {Array}     返回矩阵逆变换后的三阶向量 [x, y, z]\n   */\n\n\n  Coord.prototype.invertMatrix = function (x, y, tag) {\n    if (tag === void 0) {\n      tag = 0;\n    }\n\n    var matrix = this.matrix;\n    var inversedMatrix = mat3_1[\"default\"].invert([], matrix);\n    var vector = [x, y, tag];\n    vec3.transformMat3(vector, vector, inversedMatrix);\n    return vector;\n  };\n  /**\n   * 将归一化的坐标点数据转换为画布坐标，并根据坐标系当前矩阵进行变换\n   * @param  {Object} point 归一化的坐标点\n   * @return {Object}       返回进行矩阵变换后的画布坐标\n   */\n\n\n  Coord.prototype.convert = function (point) {\n    var _a = this.convertPoint(point),\n        x = _a.x,\n        y = _a.y;\n\n    var vector = this.applyMatrix(x, y, 1);\n    return {\n      x: vector[0],\n      y: vector[1]\n    };\n  };\n  /**\n   * 将进行过矩阵变换画布坐标转换为归一化坐标\n   * @param  {Object} point 画布坐标\n   * @return {Object}       返回归一化的坐标点\n   */\n\n\n  Coord.prototype.invert = function (point) {\n    var vector = this.invertMatrix(point.x, point.y, 1);\n    return this.invertPoint({\n      x: vector[0],\n      y: vector[1]\n    });\n  };\n  /**\n   * 坐标系旋转变换\n   * @param  {Number} radian 旋转弧度\n   * @return {Object}        返回坐标系对象\n   */\n\n\n  Coord.prototype.rotate = function (radian) {\n    var matrix = this.matrix;\n    var center = this.center;\n    mat3_1[\"default\"].translate(matrix, matrix, [-center.x, -center.y]);\n    mat3_1[\"default\"].rotate(matrix, matrix, radian);\n    mat3_1[\"default\"].translate(matrix, matrix, [center.x, center.y]);\n    return this;\n  };\n  /**\n   * 坐标系反射变换\n   * @param  {String} dim 反射维度\n   * @return {Object}     返回坐标系对象\n   */\n\n\n  Coord.prototype.reflect = function (dim) {\n    switch (dim) {\n      case 'x':\n        this._swapDim('x');\n\n        break;\n\n      case 'y':\n        this._swapDim('y');\n\n        break;\n\n      default:\n        this._swapDim('y');\n\n    }\n\n    return this;\n  };\n  /**\n   * 坐标系比例变换\n   * @param  {Number} s1 x 方向缩放比例\n   * @param  {Number} s2 y 方向缩放比例\n   * @return {Object}    返回坐标系对象\n   */\n\n\n  Coord.prototype.scale = function (s1, s2) {\n    var matrix = this.matrix;\n    var center = this.center;\n    mat3_1[\"default\"].translate(matrix, matrix, [-center.x, -center.y]);\n    mat3_1[\"default\"].scale(matrix, matrix, [s1, s2]);\n    mat3_1[\"default\"].translate(matrix, matrix, [center.x, center.y]);\n    return this;\n  };\n  /**\n   * 坐标系平移变换\n   * @param  {Number} x x 方向平移像素\n   * @param  {Number} y y 方向平移像素\n   * @return {Object}   返回坐标系对象\n   */\n\n\n  Coord.prototype.translate = function (x, y) {\n    var matrix = this.matrix;\n    mat3_1[\"default\"].translate(matrix, matrix, [x, y]);\n    return this;\n  };\n  /**\n   * 将坐标系 x y 两个轴进行转置\n   * @return {Object} 返回坐标系对象\n   */\n\n\n  Coord.prototype.transpose = function () {\n    this.isTransposed = !this.isTransposed;\n    return this;\n  };\n\n  return Coord;\n}();\n\nexports[\"default\"] = Coord;","map":{"version":3,"sources":["../src/base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nexports.__esModule = true;\n/**\n * @fileOverview the base class of Coordinate\n * @author sima.zhang\n */\nvar mat3_1 = require(\"./util/mat3\");\nvar vec3 = require(\"@antv/gl-matrix/lib/gl-matrix/vec3\");\nvar Coord = /** @class */ (function () {\n    function Coord(cfg) {\n        if (cfg === void 0) { cfg = {}; }\n        this.matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n        this.isTransposed = false;\n        Object.assign(this, cfg);\n        this.init();\n    }\n    Coord.prototype.init = function () {\n        var start = this.start;\n        var end = this.end;\n        var center = {\n            x: (start.x + end.x) / 2,\n            y: (start.y + end.y) / 2\n        };\n        this.center = center;\n        this.width = Math.abs(end.x - start.x);\n        this.height = Math.abs(end.y - start.y);\n    };\n    Coord.prototype._swapDim = function (dim) {\n        var dimRange = this[dim];\n        if (dimRange) {\n            var tmp = dimRange.start;\n            dimRange.start = dimRange.end;\n            dimRange.end = tmp;\n        }\n    };\n    Coord.prototype.getCenter = function () {\n        return this.center;\n    };\n    Coord.prototype.getWidth = function () {\n        return this.width;\n    };\n    Coord.prototype.getHeight = function () {\n        return this.height;\n    };\n    Coord.prototype.convertDim = function (percent, dim) {\n        var _a = this[dim], start = _a.start, end = _a.end;\n        return start + percent * (end - start);\n    };\n    Coord.prototype.invertDim = function (value, dim) {\n        var _a = this[dim], start = _a.start, end = _a.end;\n        return (value - start) / (end - start);\n    };\n    /**\n     * 将归一化的坐标点数据转换为画布坐标\n     * @override\n     * @param  {Object} point 归一化的坐标点\n     * @return {Object}       返回画布坐标\n     */\n    Coord.prototype.convertPoint = function (point) {\n        return point;\n    };\n    /**\n     * 将画布坐标转换为归一化的坐标点数据\n     * @override\n     * @param  {Object} PointType 画布坐标点数据\n     * @return {Object}       归一化后的数据点\n     */\n    Coord.prototype.invertPoint = function (point) {\n        return point;\n    };\n    /**\n     * 将坐标点进行矩阵变换\n     * @param  {Number} x   对应 x 轴画布坐标\n     * @param  {Number} y   对应 y 轴画布坐标\n     * @param  {Number} tag 默认为 0，可取值 0, 1\n     * @return {Array}     返回变换后的三阶向量 [x, y, z]\n     */\n    Coord.prototype.applyMatrix = function (x, y, tag) {\n        if (tag === void 0) { tag = 0; }\n        var matrix = this.matrix;\n        var vector = [x, y, tag];\n        vec3.transformMat3(vector, vector, matrix);\n        return vector;\n    };\n    /**\n     * 将坐标点进行矩阵逆变换\n     * @param  {Number} x   对应 x 轴画布坐标\n     * @param  {Number} y   对应 y 轴画布坐标\n     * @param  {Number} tag 默认为 0，可取值 0, 1\n     * @return {Array}     返回矩阵逆变换后的三阶向量 [x, y, z]\n     */\n    Coord.prototype.invertMatrix = function (x, y, tag) {\n        if (tag === void 0) { tag = 0; }\n        var matrix = this.matrix;\n        var inversedMatrix = mat3_1[\"default\"].invert([], matrix);\n        var vector = [x, y, tag];\n        vec3.transformMat3(vector, vector, inversedMatrix);\n        return vector;\n    };\n    /**\n     * 将归一化的坐标点数据转换为画布坐标，并根据坐标系当前矩阵进行变换\n     * @param  {Object} point 归一化的坐标点\n     * @return {Object}       返回进行矩阵变换后的画布坐标\n     */\n    Coord.prototype.convert = function (point) {\n        var _a = this.convertPoint(point), x = _a.x, y = _a.y;\n        var vector = this.applyMatrix(x, y, 1);\n        return {\n            x: vector[0],\n            y: vector[1]\n        };\n    };\n    /**\n     * 将进行过矩阵变换画布坐标转换为归一化坐标\n     * @param  {Object} point 画布坐标\n     * @return {Object}       返回归一化的坐标点\n     */\n    Coord.prototype.invert = function (point) {\n        var vector = this.invertMatrix(point.x, point.y, 1);\n        return this.invertPoint({\n            x: vector[0],\n            y: vector[1]\n        });\n    };\n    /**\n     * 坐标系旋转变换\n     * @param  {Number} radian 旋转弧度\n     * @return {Object}        返回坐标系对象\n     */\n    Coord.prototype.rotate = function (radian) {\n        var matrix = this.matrix;\n        var center = this.center;\n        mat3_1[\"default\"].translate(matrix, matrix, [-center.x, -center.y]);\n        mat3_1[\"default\"].rotate(matrix, matrix, radian);\n        mat3_1[\"default\"].translate(matrix, matrix, [center.x, center.y]);\n        return this;\n    };\n    /**\n     * 坐标系反射变换\n     * @param  {String} dim 反射维度\n     * @return {Object}     返回坐标系对象\n     */\n    Coord.prototype.reflect = function (dim) {\n        switch (dim) {\n            case 'x':\n                this._swapDim('x');\n                break;\n            case 'y':\n                this._swapDim('y');\n                break;\n            default:\n                this._swapDim('y');\n        }\n        return this;\n    };\n    /**\n     * 坐标系比例变换\n     * @param  {Number} s1 x 方向缩放比例\n     * @param  {Number} s2 y 方向缩放比例\n     * @return {Object}    返回坐标系对象\n     */\n    Coord.prototype.scale = function (s1, s2) {\n        var matrix = this.matrix;\n        var center = this.center;\n        mat3_1[\"default\"].translate(matrix, matrix, [-center.x, -center.y]);\n        mat3_1[\"default\"].scale(matrix, matrix, [s1, s2]);\n        mat3_1[\"default\"].translate(matrix, matrix, [center.x, center.y]);\n        return this;\n    };\n    /**\n     * 坐标系平移变换\n     * @param  {Number} x x 方向平移像素\n     * @param  {Number} y y 方向平移像素\n     * @return {Object}   返回坐标系对象\n     */\n    Coord.prototype.translate = function (x, y) {\n        var matrix = this.matrix;\n        mat3_1[\"default\"].translate(matrix, matrix, [x, y]);\n        return this;\n    };\n    /**\n     * 将坐标系 x y 两个轴进行转置\n     * @return {Object} 返回坐标系对象\n     */\n    Coord.prototype.transpose = function () {\n        this.isTransposed = !this.isTransposed;\n        return this;\n    };\n    return Coord;\n}());\nexports[\"default\"] = Coord;\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"script"}