{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { $document } from '../document';\nimport { Event } from '../Event';\nimport { getCanvas } from '../register';\n\nvar PointerEvent = function (_Event) {\n  _inherits(PointerEvent, _Event);\n\n  var _super = _createSuper(PointerEvent);\n\n  function PointerEvent(type) {\n    var _this;\n\n    _classCallCheck(this, PointerEvent);\n\n    _this = _super.call(this, type);\n\n    _defineProperty(_assertThisInitialized(_this), \"buttons\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"which\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"pointerId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"bubbles\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"button\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"width\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"height\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"pressure\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"isPrimary\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"pointerType\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"altKey\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"ctrlKey\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"metaKey\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"shiftKey\", void 0);\n\n    _this.target = getCanvas();\n    _this.currentTarget = getCanvas();\n    return _this;\n  }\n\n  return PointerEvent;\n}(Event);\n\nvar CLONE_PROPS = ['bubbles', 'cancelable', 'view', 'detail', 'screenX', 'screenY', 'clientX', 'clientY', 'ctrlKey', 'altKey', 'shiftKey', 'metaKey', 'button', 'relatedTarget', 'pointerId', 'width', 'height', 'pressure', 'tiltX', 'tiltY', 'pointerType', 'hwTimestamp', 'isPrimary', 'pageX', 'pageY', 'timeStamp'];\nvar CLONE_DEFAULTS = [false, false, null, null, 0, 0, 0, 0, false, false, false, false, 0, null, 0, 0, 0, 0, 0, 0, 0, '', 0, false, 0, 0, 0];\nvar POINTER_TYPE = 'touch';\n\nfunction touchToPointer(type, touch, rawEvent) {\n  var e = new PointerEvent(type);\n\n  for (var i = 0; i < CLONE_PROPS.length; i++) {\n    var p = CLONE_PROPS[i];\n    e[p] = touch[p] || CLONE_DEFAULTS[i];\n  }\n\n  e.type = type;\n  e.target = getCanvas();\n  e.currentTarget = getCanvas();\n  e.buttons = typeToButtons(type);\n  e.which = e.buttons;\n  e.pointerId = (touch.identifier || 0) + 2;\n  e.bubbles = true;\n  e.cancelable = true;\n  e.button = 0;\n  e.width = (touch.radiusX || 0.5) * 2;\n  e.height = (touch.radiusY || 0.5) * 2;\n  e.pressure = touch.force || 0.5;\n  e.isPrimary = isPrimaryPointer(touch);\n  e.pointerType = POINTER_TYPE;\n  e.altKey = rawEvent.altKey;\n  e.ctrlKey = rawEvent.ctrlKey;\n  e.metaKey = rawEvent.metaKey;\n  e.shiftKey = rawEvent.shiftKey;\n\n  if (rawEvent.preventDefault) {\n    e.preventDefault = function () {\n      rawEvent.preventDefault();\n    };\n  }\n\n  return e;\n}\n\nfunction typeToButtons(type) {\n  var ret = 0;\n\n  if (type === 'touchstart' || type === 'touchmove' || type === 'pointerdown' || type === 'pointermove') {\n    ret = 1;\n  }\n\n  return ret;\n}\n\nvar firstPointer = null;\n\nfunction isPrimaryPointer(touch) {\n  return firstPointer === touch.identifier;\n}\n\nfunction setPrimaryPointer(touch) {\n  if (firstPointer === null) {\n    firstPointer = touch.identifier;\n  }\n}\n\nfunction removePrimaryPointer(touch) {\n  if (firstPointer === touch.identifier) {\n    firstPointer = null;\n  }\n}\n\nfunction eventHandlerFactory(type) {\n  return function (rawEvent) {\n    var changedTouches = rawEvent.changedTouches;\n\n    for (var i = 0; i < changedTouches.length; i++) {\n      var touch = changedTouches[i];\n\n      if (i === 0 && type === 'pointerdown') {\n        setPrimaryPointer(touch);\n      } else if (type === 'pointerup' || type === 'pointercancel') {\n        removePrimaryPointer(touch);\n      }\n\n      var event = touchToPointer(type, touch, rawEvent);\n      $document.dispatchEvent(event);\n    }\n  };\n}\n\nvar dispatchPointerDown = eventHandlerFactory('pointerdown');\nvar dispatchPointerMove = eventHandlerFactory('pointermove');\nvar dispatchPointerUp = eventHandlerFactory('pointerup');\nexport { dispatchPointerDown, dispatchPointerMove, dispatchPointerUp };","map":{"version":3,"sources":["../../../src/mini-adapter/EventIniter/PointerEvent.ts"],"names":["PointerEvent","Event","getCanvas","CLONE_PROPS","CLONE_DEFAULTS","POINTER_TYPE","e","i","p","touch","typeToButtons","isPrimaryPointer","rawEvent","ret","type","firstPointer","changedTouches","setPrimaryPointer","removePrimaryPointer","event","touchToPointer","$document","dispatchPointerDown","eventHandlerFactory","dispatchPointerMove","dispatchPointerUp"],"mappings":"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","sourcesContent":["// @ts-nocheck\n// tslint:disable\nimport { $document } from '../document';\nimport { Event } from '../Event';\nimport { getCanvas } from '../register';\n\nclass PointerEvent extends Event {\n  public buttons: number;\n  public which: number;\n\n  public pointerId: number;\n  public bubbles: boolean;\n  public button: number;\n  public width: number;\n  public height: number;\n  public pressure: number;\n  public isPrimary: boolean;\n  public pointerType: string;\n  public altKey: boolean;\n  public ctrlKey: boolean;\n  public metaKey: boolean;\n  public shiftKey: boolean;\n\n  constructor(type) {\n    super(type);\n\n    this.target = getCanvas();\n    this.currentTarget = getCanvas();\n  }\n}\n\nconst CLONE_PROPS = [\n  // MouseEvent\n  'bubbles',\n  'cancelable',\n  'view',\n  'detail',\n  'screenX',\n  'screenY',\n  'clientX',\n  'clientY',\n  'ctrlKey',\n  'altKey',\n  'shiftKey',\n  'metaKey',\n  'button',\n  'relatedTarget',\n\n  // PointerEvent\n  'pointerId',\n  'width',\n  'height',\n  'pressure',\n  'tiltX',\n  'tiltY',\n  'pointerType',\n  'hwTimestamp',\n  'isPrimary',\n\n  // event instance\n  'pageX',\n  'pageY',\n  'timeStamp',\n];\n\nconst CLONE_DEFAULTS = [\n  // MouseEvent\n  false,\n  false,\n  null,\n  null,\n  0,\n  0,\n  0,\n  0,\n  false,\n  false,\n  false,\n  false,\n  0,\n  null,\n\n  // DOM Level 3\n  0,\n\n  // PointerEvent\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  '',\n  0,\n  false,\n\n  // event instance\n  0,\n  0,\n  0,\n];\n\nconst POINTER_TYPE = 'touch';\n\nfunction touchToPointer(type, touch, rawEvent) {\n  const e = new PointerEvent(type);\n\n  for (let i = 0; i < CLONE_PROPS.length; i++) {\n    const p = CLONE_PROPS[i];\n    e[p] = touch[p] || CLONE_DEFAULTS[i];\n  }\n\n  e.type = type;\n  e.target = getCanvas();\n  e.currentTarget = getCanvas();\n  e.buttons = typeToButtons(type);\n  e.which = e.buttons;\n\n  e.pointerId = (touch.identifier || 0) + 2;\n  e.bubbles = true;\n  e.cancelable = true;\n  // e.detail = this.clickCount;\n  e.button = 0;\n\n  e.width = (touch.radiusX || 0.5) * 2;\n  e.height = (touch.radiusY || 0.5) * 2;\n  e.pressure = touch.force || 0.5;\n  e.isPrimary = isPrimaryPointer(touch);\n  e.pointerType = POINTER_TYPE;\n\n  // forward modifier keys\n  e.altKey = rawEvent.altKey;\n  e.ctrlKey = rawEvent.ctrlKey;\n  e.metaKey = rawEvent.metaKey;\n  e.shiftKey = rawEvent.shiftKey;\n\n  if (rawEvent.preventDefault) {\n    e.preventDefault = () => {\n      rawEvent.preventDefault();\n    };\n  }\n\n  return e;\n}\n\nfunction typeToButtons(type) {\n  let ret = 0;\n  if (\n    type === 'touchstart' ||\n    type === 'touchmove' ||\n    type === 'pointerdown' ||\n    type === 'pointermove'\n  ) {\n    ret = 1;\n  }\n  return ret;\n}\n\nlet firstPointer = null;\n\nfunction isPrimaryPointer(touch) {\n  return firstPointer === touch.identifier;\n}\n\nfunction setPrimaryPointer(touch) {\n  if (firstPointer === null) {\n    firstPointer = touch.identifier;\n  }\n}\n\nfunction removePrimaryPointer(touch) {\n  if (firstPointer === touch.identifier) {\n    firstPointer = null;\n  }\n}\n\nfunction eventHandlerFactory(type) {\n  return (rawEvent) => {\n    const changedTouches = rawEvent.changedTouches;\n\n    for (let i = 0; i < changedTouches.length; i++) {\n      const touch = changedTouches[i];\n\n      if (i === 0 && type === 'pointerdown') {\n        setPrimaryPointer(touch);\n      } else if (type === 'pointerup' || type === 'pointercancel') {\n        removePrimaryPointer(touch);\n      }\n\n      const event = touchToPointer(type, touch, rawEvent);\n      $document.dispatchEvent(event);\n    }\n  };\n}\n\nconst dispatchPointerDown = eventHandlerFactory('pointerdown');\nconst dispatchPointerMove = eventHandlerFactory('pointermove');\nconst dispatchPointerUp = eventHandlerFactory('pointerup');\nexport { dispatchPointerDown, dispatchPointerMove, dispatchPointerUp };\n"]},"metadata":{},"sourceType":"module"}