{"ast":null,"code":"import { Model } from '../model/model';\nexport function grid(cells) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var model = Model.isModel(cells) ? cells : new Model().resetCells(cells, {\n    sort: false,\n    dryrun: true\n  });\n  var nodes = model.getNodes();\n  var columns = options.columns || 1;\n  var rows = Math.ceil(nodes.length / columns);\n  var dx = options.dx || 0;\n  var dy = options.dy || 0;\n  var centre = options.center !== false;\n  var resizeToFit = options.resizeToFit === true;\n  var marginX = options.marginX || 0;\n  var marginY = options.marginY || 0;\n  var columnWidths = [];\n  var columnWidth = options.columnWidth;\n\n  if (columnWidth === 'compact') {\n    for (var j = 0; j < columns; j += 1) {\n      var items = GridLayout.getNodesInColumn(nodes, j, columns);\n      columnWidths.push(GridLayout.getMaxDim(items, 'width') + dx);\n    }\n  } else {\n    if (columnWidth == null || columnWidth === 'auto') {\n      columnWidth = GridLayout.getMaxDim(nodes, 'width') + dx;\n    }\n\n    for (var i = 0; i < columns; i += 1) {\n      columnWidths.push(columnWidth);\n    }\n  }\n\n  var columnLefts = GridLayout.accumulate(columnWidths, marginX);\n  var rowHeights = [];\n  var rowHeight = options.rowHeight;\n\n  if (rowHeight === 'compact') {\n    for (var _i = 0; _i < rows; _i += 1) {\n      var _items = GridLayout.getNodesInRow(nodes, _i, columns);\n\n      rowHeights.push(GridLayout.getMaxDim(_items, 'height') + dy);\n    }\n  } else {\n    if (rowHeight == null || rowHeight === 'auto') {\n      rowHeight = GridLayout.getMaxDim(nodes, 'height') + dy;\n    }\n\n    for (var _i2 = 0; _i2 < rows; _i2 += 1) {\n      rowHeights.push(rowHeight);\n    }\n  }\n\n  var rowTops = GridLayout.accumulate(rowHeights, marginY);\n  model.startBatch('layout');\n  nodes.forEach(function (node, index) {\n    var rowIndex = index % columns;\n    var columnIndex = Math.floor(index / columns);\n    var columnWidth = columnWidths[rowIndex];\n    var rowHeight = rowHeights[columnIndex];\n    var cx = 0;\n    var cy = 0;\n    var size = node.getSize();\n\n    if (resizeToFit) {\n      var width = columnWidth - 2 * dx;\n      var height = rowHeight - 2 * dy;\n      var calcHeight = size.height * (size.width ? width / size.width : 1);\n      var calcWidth = size.width * (size.height ? height / size.height : 1);\n\n      if (rowHeight < calcHeight) {\n        width = calcWidth;\n      } else {\n        height = calcHeight;\n      }\n\n      size = {\n        width: width,\n        height: height\n      };\n      node.setSize(size, options);\n    }\n\n    if (centre) {\n      cx = (columnWidth - size.width) / 2;\n      cy = (rowHeight - size.height) / 2;\n    }\n\n    node.position(columnLefts[rowIndex] + dx + cx, rowTops[columnIndex] + dy + cy, options);\n  });\n  model.stopBatch('layout');\n}\nvar GridLayout;\n\n(function (GridLayout) {\n  function getMaxDim(nodes, name) {\n    return nodes.reduce(function (memo, node) {\n      return Math.max(node.getSize()[name], memo);\n    }, 0);\n  }\n\n  GridLayout.getMaxDim = getMaxDim;\n\n  function getNodesInRow(nodes, rowIndex, columnCount) {\n    var res = [];\n\n    for (var i = columnCount * rowIndex, ii = i + columnCount; i < ii; i += 1) {\n      res.push(nodes[i]);\n    }\n\n    return res;\n  }\n\n  GridLayout.getNodesInRow = getNodesInRow;\n\n  function getNodesInColumn(nodes, columnIndex, columnCount) {\n    var res = [];\n\n    for (var i = columnIndex, ii = nodes.length; i < ii; i += columnCount) {\n      res.push(nodes[i]);\n    }\n\n    return res;\n  }\n\n  GridLayout.getNodesInColumn = getNodesInColumn;\n\n  function accumulate(items, start) {\n    return items.reduce(function (memo, item, i) {\n      memo.push(memo[i] + item);\n      return memo;\n    }, [start || 0]);\n  }\n\n  GridLayout.accumulate = accumulate;\n})(GridLayout || (GridLayout = {}));","map":{"version":3,"sources":["../../src/layout/grid.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Model } from '../model/model';\nexport function grid(cells, options = {}) {\n    const model = Model.isModel(cells)\n        ? cells\n        : new Model().resetCells(cells, {\n            sort: false,\n            dryrun: true,\n        });\n    const nodes = model.getNodes();\n    const columns = options.columns || 1;\n    const rows = Math.ceil(nodes.length / columns);\n    const dx = options.dx || 0;\n    const dy = options.dy || 0;\n    const centre = options.center !== false;\n    const resizeToFit = options.resizeToFit === true;\n    const marginX = options.marginX || 0;\n    const marginY = options.marginY || 0;\n    const columnWidths = [];\n    let columnWidth = options.columnWidth;\n    if (columnWidth === 'compact') {\n        for (let j = 0; j < columns; j += 1) {\n            const items = GridLayout.getNodesInColumn(nodes, j, columns);\n            columnWidths.push(GridLayout.getMaxDim(items, 'width') + dx);\n        }\n    }\n    else {\n        if (columnWidth == null || columnWidth === 'auto') {\n            columnWidth = GridLayout.getMaxDim(nodes, 'width') + dx;\n        }\n        for (let i = 0; i < columns; i += 1) {\n            columnWidths.push(columnWidth);\n        }\n    }\n    const columnLefts = GridLayout.accumulate(columnWidths, marginX);\n    const rowHeights = [];\n    let rowHeight = options.rowHeight;\n    if (rowHeight === 'compact') {\n        for (let i = 0; i < rows; i += 1) {\n            const items = GridLayout.getNodesInRow(nodes, i, columns);\n            rowHeights.push(GridLayout.getMaxDim(items, 'height') + dy);\n        }\n    }\n    else {\n        if (rowHeight == null || rowHeight === 'auto') {\n            rowHeight = GridLayout.getMaxDim(nodes, 'height') + dy;\n        }\n        for (let i = 0; i < rows; i += 1) {\n            rowHeights.push(rowHeight);\n        }\n    }\n    const rowTops = GridLayout.accumulate(rowHeights, marginY);\n    model.startBatch('layout');\n    nodes.forEach((node, index) => {\n        const rowIndex = index % columns;\n        const columnIndex = Math.floor(index / columns);\n        const columnWidth = columnWidths[rowIndex];\n        const rowHeight = rowHeights[columnIndex];\n        let cx = 0;\n        let cy = 0;\n        let size = node.getSize();\n        if (resizeToFit) {\n            let width = columnWidth - 2 * dx;\n            let height = rowHeight - 2 * dy;\n            const calcHeight = size.height * (size.width ? width / size.width : 1);\n            const calcWidth = size.width * (size.height ? height / size.height : 1);\n            if (rowHeight < calcHeight) {\n                width = calcWidth;\n            }\n            else {\n                height = calcHeight;\n            }\n            size = {\n                width,\n                height,\n            };\n            node.setSize(size, options);\n        }\n        if (centre) {\n            cx = (columnWidth - size.width) / 2;\n            cy = (rowHeight - size.height) / 2;\n        }\n        node.position(columnLefts[rowIndex] + dx + cx, rowTops[columnIndex] + dy + cy, options);\n    });\n    model.stopBatch('layout');\n}\nvar GridLayout;\n(function (GridLayout) {\n    function getMaxDim(nodes, name) {\n        return nodes.reduce((memo, node) => Math.max(node.getSize()[name], memo), 0);\n    }\n    GridLayout.getMaxDim = getMaxDim;\n    function getNodesInRow(nodes, rowIndex, columnCount) {\n        const res = [];\n        for (let i = columnCount * rowIndex, ii = i + columnCount; i < ii; i += 1) {\n            res.push(nodes[i]);\n        }\n        return res;\n    }\n    GridLayout.getNodesInRow = getNodesInRow;\n    function getNodesInColumn(nodes, columnIndex, columnCount) {\n        const res = [];\n        for (let i = columnIndex, ii = nodes.length; i < ii; i += columnCount) {\n            res.push(nodes[i]);\n        }\n        return res;\n    }\n    GridLayout.getNodesInColumn = getNodesInColumn;\n    function accumulate(items, start) {\n        return items.reduce((memo, item, i) => {\n            memo.push(memo[i] + item);\n            return memo;\n        }, [start || 0]);\n    }\n    GridLayout.accumulate = accumulate;\n})(GridLayout || (GridLayout = {}));\n//# sourceMappingURL=grid.js.map"]},"metadata":{},"sourceType":"module"}