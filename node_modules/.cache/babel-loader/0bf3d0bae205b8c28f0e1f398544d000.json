{"ast":null,"code":"import { debounce } from './util';\nexport function createSensor(element) {\n  var sensor = null;\n  var listeners = [];\n  var trigger = debounce(function () {\n    listeners.forEach(function (listener) {\n      listener(element);\n    });\n  });\n\n  var create = function create() {\n    var s = new ResizeObserver(trigger);\n    s.observe(element);\n    trigger();\n    return s;\n  };\n\n  var bind = function bind(listener) {\n    if (!sensor) {\n      sensor = create();\n    }\n\n    if (listeners.indexOf(listener) === -1) {\n      listeners.push(listener);\n    }\n  };\n\n  var destroy = function destroy() {\n    if (sensor) {\n      sensor.disconnect();\n      listeners = [];\n      sensor = null;\n    }\n  };\n\n  var unbind = function unbind(listener) {\n    var idx = listeners.indexOf(listener);\n\n    if (idx !== -1) {\n      listeners.splice(idx, 1);\n    } // no listener, and sensor is exist then destroy the sensor\n\n\n    if (listeners.length === 0 && sensor) {\n      destroy();\n    }\n  };\n\n  return {\n    element: element,\n    bind: bind,\n    destroy: destroy,\n    unbind: unbind\n  };\n}","map":{"version":3,"sources":["../../../../src/util/size-sensor/sensors/observer.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,QAAyB,QAAzB;AAGA,OAAM,SAAU,YAAV,CAAuB,OAAvB,EAAuC;AAC3C,MAAI,MAAM,GAA0B,IAApC;AACA,MAAI,SAAS,GAAe,EAA5B;AAEA,MAAM,OAAO,GAAG,QAAQ,CAAC,YAAK;AAC5B,IAAA,SAAS,CAAC,OAAV,CAAkB,UAAC,QAAD,EAAa;AAC7B,MAAA,QAAQ,CAAC,OAAD,CAAR;AACD,KAFD;AAGD,GAJuB,CAAxB;;AAMA,MAAM,MAAM,GAAG,SAAT,MAAS,GAAK;AAClB,QAAM,CAAC,GAAG,IAAI,cAAJ,CAAmB,OAAnB,CAAV;AACA,IAAA,CAAC,CAAC,OAAF,CAAU,OAAV;AACA,IAAA,OAAO;AACP,WAAO,CAAP;AACD,GALD;;AAOA,MAAM,IAAI,GAAG,SAAP,IAAO,CAAC,QAAD,EAAuB;AAClC,QAAI,CAAC,MAAL,EAAa;AACX,MAAA,MAAM,GAAG,MAAM,EAAf;AACD;;AAED,QAAI,SAAS,CAAC,OAAV,CAAkB,QAAlB,MAAgC,CAAC,CAArC,EAAwC;AACtC,MAAA,SAAS,CAAC,IAAV,CAAe,QAAf;AACD;AACF,GARD;;AAUA,MAAM,OAAO,GAAG,SAAV,OAAU,GAAK;AACnB,QAAI,MAAJ,EAAY;AACV,MAAA,MAAM,CAAC,UAAP;AACA,MAAA,SAAS,GAAG,EAAZ;AACA,MAAA,MAAM,GAAG,IAAT;AACD;AACF,GAND;;AAQA,MAAM,MAAM,GAAG,SAAT,MAAS,CAAC,QAAD,EAAuB;AACpC,QAAM,GAAG,GAAG,SAAS,CAAC,OAAV,CAAkB,QAAlB,CAAZ;;AACA,QAAI,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,MAAA,SAAS,CAAC,MAAV,CAAiB,GAAjB,EAAsB,CAAtB;AACD,KAJmC,CAMpC;;;AACA,QAAI,SAAS,CAAC,MAAV,KAAqB,CAArB,IAA0B,MAA9B,EAAsC;AACpC,MAAA,OAAO;AACR;AACF,GAVD;;AAYA,SAAO;AACL,IAAA,OAAO,EAAP,OADK;AAEL,IAAA,IAAI,EAAJ,IAFK;AAGL,IAAA,OAAO,EAAP,OAHK;AAIL,IAAA,MAAM,EAAN;AAJK,GAAP;AAMD","sourceRoot":"","sourcesContent":["import { debounce } from './util';\nexport function createSensor(element) {\n    let sensor = null;\n    let listeners = [];\n    const trigger = debounce(() => {\n        listeners.forEach((listener) => {\n            listener(element);\n        });\n    });\n    const create = () => {\n        const s = new ResizeObserver(trigger);\n        s.observe(element);\n        trigger();\n        return s;\n    };\n    const bind = (listener) => {\n        if (!sensor) {\n            sensor = create();\n        }\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    };\n    const destroy = () => {\n        if (sensor) {\n            sensor.disconnect();\n            listeners = [];\n            sensor = null;\n        }\n    };\n    const unbind = (listener) => {\n        const idx = listeners.indexOf(listener);\n        if (idx !== -1) {\n            listeners.splice(idx, 1);\n        }\n        // no listener, and sensor is exist then destroy the sensor\n        if (listeners.length === 0 && sensor) {\n            destroy();\n        }\n    };\n    return {\n        element,\n        bind,\n        destroy,\n        unbind,\n    };\n}\n//# sourceMappingURL=observer.js.map"]},"metadata":{},"sourceType":"module"}