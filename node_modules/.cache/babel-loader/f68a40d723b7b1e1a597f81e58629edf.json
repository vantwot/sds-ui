{"ast":null,"code":"import _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { PortLayout, PortLabelLayout } from '../registry';\nimport { ObjectExt } from '../util';\nimport { Point } from '../geometry';\nexport var PortManager = /*#__PURE__*/function () {\n  function PortManager(data) {\n    _classCallCheck(this, PortManager);\n\n    this.ports = [];\n    this.groups = {};\n    this.init(ObjectExt.cloneDeep(data));\n  }\n\n  _createClass(PortManager, [{\n    key: \"getPorts\",\n    value: function getPorts() {\n      return this.ports;\n    }\n  }, {\n    key: \"getGroup\",\n    value: function getGroup(groupName) {\n      return groupName != null ? this.groups[groupName] : null;\n    }\n  }, {\n    key: \"getPortsByGroup\",\n    value: function getPortsByGroup(groupName) {\n      return this.ports.filter(function (p) {\n        return p.group === groupName || p.group == null && groupName == null;\n      });\n    }\n  }, {\n    key: \"getPortsLayoutByGroup\",\n    value: function getPortsLayoutByGroup(groupName, elemBBox) {\n      var _this = this;\n\n      var ports = this.getPortsByGroup(groupName);\n      var group = groupName ? this.getGroup(groupName) : null;\n      var groupPosition = group ? group.position : null;\n      var groupPositionName = groupPosition ? groupPosition.name : null;\n      var layoutFn;\n\n      if (groupPositionName != null) {\n        var fn = PortLayout.registry.get(groupPositionName);\n\n        if (fn == null) {\n          return PortLayout.registry.onNotFound(groupPositionName);\n        }\n\n        layoutFn = fn;\n      } else {\n        layoutFn = PortLayout.presets.left;\n      }\n\n      var portsArgs = ports.map(function (port) {\n        return port && port.position && port.position.args || {};\n      });\n      var groupArgs = groupPosition && groupPosition.args || {};\n      var layouts = layoutFn(portsArgs, elemBBox, groupArgs);\n      return layouts.map(function (portLayout, index) {\n        var port = ports[index];\n        return {\n          portLayout: portLayout,\n          portId: port.id,\n          portSize: port.size,\n          portAttrs: port.attrs,\n          labelSize: port.label.size,\n          labelLayout: _this.getPortLabelLayout(port, Point.create(portLayout.position), elemBBox)\n        };\n      });\n    }\n  }, {\n    key: \"init\",\n    value: function init(data) {\n      var _this2 = this;\n\n      var groups = data.groups,\n          items = data.items;\n\n      if (groups != null) {\n        Object.keys(groups).forEach(function (key) {\n          _this2.groups[key] = _this2.parseGroup(groups[key]);\n        });\n      }\n\n      if (Array.isArray(items)) {\n        items.forEach(function (item) {\n          _this2.ports.push(_this2.parsePort(item));\n        });\n      }\n    }\n  }, {\n    key: \"parseGroup\",\n    value: function parseGroup(group) {\n      return Object.assign(Object.assign({}, group), {\n        label: this.getLabel(group, true),\n        position: this.getPortPosition(group.position, true)\n      });\n    }\n  }, {\n    key: \"parsePort\",\n    value: function parsePort(port) {\n      var result = Object.assign({}, port);\n      var group = this.getGroup(port.group) || {};\n      result.markup = result.markup || group.markup;\n      result.attrs = ObjectExt.merge({}, group.attrs, result.attrs);\n      result.position = this.createPosition(group, result);\n      result.label = ObjectExt.merge({}, group.label, this.getLabel(result));\n      result.zIndex = this.getZIndex(group, result);\n      result.size = Object.assign(Object.assign({}, group.size), result.size);\n      return result;\n    }\n  }, {\n    key: \"getZIndex\",\n    value: function getZIndex(group, port) {\n      if (typeof port.zIndex === 'number') {\n        return port.zIndex;\n      }\n\n      if (typeof group.zIndex === 'number' || group.zIndex === 'auto') {\n        return group.zIndex;\n      }\n\n      return 'auto';\n    }\n  }, {\n    key: \"createPosition\",\n    value: function createPosition(group, port) {\n      return ObjectExt.merge({\n        name: 'left',\n        args: {}\n      }, group.position, {\n        args: port.args\n      });\n    }\n  }, {\n    key: \"getPortPosition\",\n    value: function getPortPosition(position) {\n      var setDefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (position == null) {\n        if (setDefault) {\n          return {\n            name: 'left',\n            args: {}\n          };\n        }\n      } else {\n        if (typeof position === 'string') {\n          return {\n            name: position,\n            args: {}\n          };\n        }\n\n        if (Array.isArray(position)) {\n          return {\n            name: 'absolute',\n            args: {\n              x: position[0],\n              y: position[1]\n            }\n          };\n        }\n\n        if (typeof position === 'object') {\n          return position;\n        }\n      }\n\n      return {\n        args: {}\n      };\n    }\n  }, {\n    key: \"getPortLabelPosition\",\n    value: function getPortLabelPosition(position) {\n      var setDefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (position == null) {\n        if (setDefault) {\n          return {\n            name: 'left',\n            args: {}\n          };\n        }\n      } else {\n        if (typeof position === 'string') {\n          return {\n            name: position,\n            args: {}\n          };\n        }\n\n        if (typeof position === 'object') {\n          return position;\n        }\n      }\n\n      return {\n        args: {}\n      };\n    }\n  }, {\n    key: \"getLabel\",\n    value: function getLabel(item) {\n      var setDefaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var label = item.label || {};\n      label.position = this.getPortLabelPosition(label.position, setDefaults);\n      return label;\n    }\n  }, {\n    key: \"getPortLabelLayout\",\n    value: function getPortLabelLayout(port, portPosition, elemBBox) {\n      var name = port.label.position.name || 'left';\n      var args = port.label.position.args || {};\n      var layoutFn = PortLabelLayout.registry.get(name) || PortLabelLayout.presets.left;\n\n      if (layoutFn) {\n        return layoutFn(portPosition, elemBBox, args);\n      }\n\n      return null;\n    }\n  }]);\n\n  return PortManager;\n}();","map":{"version":3,"sources":["../../src/model/port.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { PortLayout, PortLabelLayout } from '../registry';\nimport { ObjectExt } from '../util';\nimport { Point } from '../geometry';\nexport class PortManager {\n    constructor(data) {\n        this.ports = [];\n        this.groups = {};\n        this.init(ObjectExt.cloneDeep(data));\n    }\n    getPorts() {\n        return this.ports;\n    }\n    getGroup(groupName) {\n        return groupName != null ? this.groups[groupName] : null;\n    }\n    getPortsByGroup(groupName) {\n        return this.ports.filter((p) => p.group === groupName || (p.group == null && groupName == null));\n    }\n    getPortsLayoutByGroup(groupName, elemBBox) {\n        const ports = this.getPortsByGroup(groupName);\n        const group = groupName ? this.getGroup(groupName) : null;\n        const groupPosition = group ? group.position : null;\n        const groupPositionName = groupPosition ? groupPosition.name : null;\n        let layoutFn;\n        if (groupPositionName != null) {\n            const fn = PortLayout.registry.get(groupPositionName);\n            if (fn == null) {\n                return PortLayout.registry.onNotFound(groupPositionName);\n            }\n            layoutFn = fn;\n        }\n        else {\n            layoutFn = PortLayout.presets.left;\n        }\n        const portsArgs = ports.map((port) => (port && port.position && port.position.args) || {});\n        const groupArgs = (groupPosition && groupPosition.args) || {};\n        const layouts = layoutFn(portsArgs, elemBBox, groupArgs);\n        return layouts.map((portLayout, index) => {\n            const port = ports[index];\n            return {\n                portLayout,\n                portId: port.id,\n                portSize: port.size,\n                portAttrs: port.attrs,\n                labelSize: port.label.size,\n                labelLayout: this.getPortLabelLayout(port, Point.create(portLayout.position), elemBBox),\n            };\n        });\n    }\n    init(data) {\n        const { groups, items } = data;\n        if (groups != null) {\n            Object.keys(groups).forEach((key) => {\n                this.groups[key] = this.parseGroup(groups[key]);\n            });\n        }\n        if (Array.isArray(items)) {\n            items.forEach((item) => {\n                this.ports.push(this.parsePort(item));\n            });\n        }\n    }\n    parseGroup(group) {\n        return Object.assign(Object.assign({}, group), { label: this.getLabel(group, true), position: this.getPortPosition(group.position, true) });\n    }\n    parsePort(port) {\n        const result = Object.assign({}, port);\n        const group = this.getGroup(port.group) || {};\n        result.markup = result.markup || group.markup;\n        result.attrs = ObjectExt.merge({}, group.attrs, result.attrs);\n        result.position = this.createPosition(group, result);\n        result.label = ObjectExt.merge({}, group.label, this.getLabel(result));\n        result.zIndex = this.getZIndex(group, result);\n        result.size = Object.assign(Object.assign({}, group.size), result.size);\n        return result;\n    }\n    getZIndex(group, port) {\n        if (typeof port.zIndex === 'number') {\n            return port.zIndex;\n        }\n        if (typeof group.zIndex === 'number' || group.zIndex === 'auto') {\n            return group.zIndex;\n        }\n        return 'auto';\n    }\n    createPosition(group, port) {\n        return ObjectExt.merge({\n            name: 'left',\n            args: {},\n        }, group.position, { args: port.args });\n    }\n    getPortPosition(position, setDefault = false) {\n        if (position == null) {\n            if (setDefault) {\n                return { name: 'left', args: {} };\n            }\n        }\n        else {\n            if (typeof position === 'string') {\n                return {\n                    name: position,\n                    args: {},\n                };\n            }\n            if (Array.isArray(position)) {\n                return {\n                    name: 'absolute',\n                    args: { x: position[0], y: position[1] },\n                };\n            }\n            if (typeof position === 'object') {\n                return position;\n            }\n        }\n        return { args: {} };\n    }\n    getPortLabelPosition(position, setDefault = false) {\n        if (position == null) {\n            if (setDefault) {\n                return { name: 'left', args: {} };\n            }\n        }\n        else {\n            if (typeof position === 'string') {\n                return {\n                    name: position,\n                    args: {},\n                };\n            }\n            if (typeof position === 'object') {\n                return position;\n            }\n        }\n        return { args: {} };\n    }\n    getLabel(item, setDefaults = false) {\n        const label = item.label || {};\n        label.position = this.getPortLabelPosition(label.position, setDefaults);\n        return label;\n    }\n    getPortLabelLayout(port, portPosition, elemBBox) {\n        const name = port.label.position.name || 'left';\n        const args = port.label.position.args || {};\n        const layoutFn = PortLabelLayout.registry.get(name) || PortLabelLayout.presets.left;\n        if (layoutFn) {\n            return layoutFn(portPosition, elemBBox, args);\n        }\n        return null;\n    }\n}\n//# sourceMappingURL=port.js.map"]},"metadata":{},"sourceType":"module"}