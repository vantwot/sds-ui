{"ast":null,"code":"import _isString from \"lodash/isString\";\nimport _isNumber from \"lodash/isNumber\";\nimport _isFunction from \"lodash/isFunction\";\nimport _isArray from \"lodash/isArray\";\nvar WIDTH = 1024;\n\nfunction registerStyleAttribute(fieldName, layer, field, values, updateOptions) {\n  layer.updateStyleAttribute(fieldName, field, values, updateOptions);\n}\n\nfunction handleStyleDataMapping(configToUpdate, layer) {\n  if (configToUpdate.opacity) {\n    handleStyleFloat('opacity', layer, configToUpdate.opacity);\n  }\n\n  if (configToUpdate.strokeWidth) {\n    handleStyleFloat('strokeWidth', layer, configToUpdate.strokeWidth);\n  }\n\n  if (configToUpdate.strokeOpacity) {\n    handleStyleFloat('strokeOpacity', layer, configToUpdate.strokeOpacity);\n  }\n\n  if (configToUpdate.stroke) {\n    handleStyleColor('stroke', layer, configToUpdate.stroke);\n  }\n\n  if (configToUpdate.offsets) {\n    handleStyleOffsets('offsets', layer, configToUpdate.offsets);\n  }\n\n  if (configToUpdate.textOffset) {\n    handleStyleOffsets('textOffset', layer, configToUpdate.textOffset);\n  }\n}\n\nfunction handleStyleFloat(fieldName, layer, styleFloat) {\n  if (_isString(styleFloat)) {\n    registerStyleAttribute(fieldName, layer, styleFloat, function (value) {\n      return value;\n    });\n  } else if (_isNumber(styleFloat)) {\n    registerStyleAttribute(fieldName, layer, [styleFloat], undefined);\n  } else if (_isArray(styleFloat) && styleFloat.length === 2) {\n    if (_isString(styleFloat[0]) && _isFunction(styleFloat[1])) {\n      registerStyleAttribute(fieldName, layer, styleFloat[0], styleFloat[1]);\n    } else if (_isString(styleFloat[0]) && _isArray(styleFloat[1]) && _isNumber(styleFloat[1][0]) && _isNumber(styleFloat[1][1])) {\n      registerStyleAttribute(fieldName, layer, styleFloat[0], styleFloat[1]);\n    } else {\n      registerStyleAttribute(fieldName, layer, [1.0], undefined);\n    }\n  } else {\n    registerStyleAttribute(fieldName, layer, [1.0], undefined);\n  }\n}\n\nfunction handleStyleOffsets(fieldName, layer, styleOffsets) {\n  if (_isString(styleOffsets)) {\n    registerStyleAttribute(fieldName, layer, styleOffsets, function (value) {\n      return value;\n    });\n  } else if (_isArray(styleOffsets) && styleOffsets.length === 2 && _isString(styleOffsets[0]) && _isFunction(styleOffsets[1])) {\n    registerStyleAttribute(fieldName, layer, styleOffsets[0], styleOffsets[1]);\n  } else if (_isArray(styleOffsets) && styleOffsets.length === 2 && _isNumber(styleOffsets[0]) && _isNumber(styleOffsets[1])) {\n    registerStyleAttribute(fieldName, layer, styleOffsets, undefined);\n  } else {\n    registerStyleAttribute(fieldName, layer, [0, 0], undefined);\n  }\n}\n\nfunction handleStyleColor(fieldName, layer, styleColor) {\n  if (_isString(styleColor)) {\n    registerStyleAttribute(fieldName, layer, styleColor, undefined);\n  } else if (_isArray(styleColor) && styleColor.length === 2) {\n    if (_isString(styleColor[0]) && _isFunction(styleColor[1])) {\n      registerStyleAttribute(fieldName, layer, styleColor[0], styleColor[1]);\n    } else if (_isString(styleColor[0]) && _isArray(styleColor[1]) && styleColor[1].length > 0) {\n      registerStyleAttribute(fieldName, layer, styleColor[0], styleColor[1]);\n    } else {\n      registerStyleAttribute(fieldName, layer, '#fff', undefined);\n    }\n  } else {\n    registerStyleAttribute(fieldName, layer, '#fff', undefined);\n  }\n}\n\nexport { handleStyleDataMapping, handleStyleFloat, handleStyleColor };","map":{"version":3,"sources":["../../src/utils/dataMappingStyle.ts"],"names":["WIDTH","layer","configToUpdate","handleStyleFloat","handleStyleColor","handleStyleOffsets","registerStyleAttribute","styleFloat","styleOffsets","styleColor"],"mappings":"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","sourcesContent":["import {\n  gl,\n  ILayer,\n  IStyleAttributeUpdateOptions,\n  ITexture2D,\n  StyleAttributeField,\n  StyleAttributeOption,\n} from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport { isArray, isFunction, isNumber, isString } from 'lodash';\n/**\n * 该文件中的工具方法主要用于对 style 中的属性进行 数据映射\n */\n\ninterface IConfigToUpdate {\n  opacity?: any;\n  strokeOpacity?: any;\n  stroke?: any;\n  strokeWidth?: any;\n  offsets?: any;\n  textOffset?: any;\n}\n\n// 画布默认的宽度\nconst WIDTH = 1024;\n\n/**\n * 当 style 中使用的 opacity 不是常数的时候根据数据进行映射\n * @param field\n * @param values\n * @param updateOptions\n */\nfunction registerStyleAttribute(\n  fieldName: string,\n  layer: ILayer,\n  field: StyleAttributeField,\n  values?: StyleAttributeOption,\n  updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n) {\n  layer.updateStyleAttribute(fieldName, field, values, updateOptions);\n}\n\n/**\n * 当样式发生变化时判断是否需要进行数据映射\n * @param configToUpdate\n * @param layer\n */\nfunction handleStyleDataMapping(configToUpdate: IConfigToUpdate, layer: any) {\n  if (configToUpdate.opacity) {\n    // 处理 style 中 opacity 属性的数据映射\n\n    handleStyleFloat('opacity', layer, configToUpdate.opacity);\n  }\n\n  if (configToUpdate.strokeWidth) {\n    // 处理 style 中 strokeWidth 属性的数据映射\n\n    handleStyleFloat('strokeWidth', layer, configToUpdate.strokeWidth);\n  }\n\n  if (configToUpdate.strokeOpacity) {\n    // 处理 style 中 strokeOpacity 属性的数据映射\n\n    handleStyleFloat('strokeOpacity', layer, configToUpdate.strokeOpacity);\n  }\n\n  if (configToUpdate.stroke) {\n    // 处理 style 中 stroke (strokeColor) 属性的数据映射\n    handleStyleColor('stroke', layer, configToUpdate.stroke);\n  }\n\n  if (configToUpdate.offsets) {\n    // 处理 style 中 offsets 属性的数据映射\n    handleStyleOffsets('offsets', layer, configToUpdate.offsets);\n  }\n\n  if (configToUpdate.textOffset) {\n    // 处理 style 中 textOffset 属性的数据映射\n    handleStyleOffsets('textOffset', layer, configToUpdate.textOffset);\n  }\n}\n\n/**\n * 根据传入参数 float 的类型和值做相应的操作\n */\nfunction handleStyleFloat(fieldName: string, layer: ILayer, styleFloat: any) {\n  if (isString(styleFloat)) {\n    // 如果传入的 styleFloat 是 string 类型，那么就认为其对应的是传入数据的字段\n    registerStyleAttribute(fieldName, layer, styleFloat, (value: any) => {\n      return value;\n    });\n  } else if (isNumber(styleFloat)) {\n    // 传入 number、默认值处理\n    registerStyleAttribute(fieldName, layer, [styleFloat], undefined);\n  } else if (isArray(styleFloat) && styleFloat.length === 2) {\n    // 传入的 styleFloat 是长度为 2 的数组\n    if (isString(styleFloat[0]) && isFunction(styleFloat[1])) {\n      // 字段回调函数 [string, callback]\n      registerStyleAttribute(fieldName, layer, styleFloat[0], styleFloat[1]);\n    } else if (\n      isString(styleFloat[0]) &&\n      isArray(styleFloat[1]) &&\n      isNumber(styleFloat[1][0]) &&\n      isNumber(styleFloat[1][1])\n    ) {\n      // 字段映射 [string, [start: number, end: number]]\n      registerStyleAttribute(fieldName, layer, styleFloat[0], styleFloat[1]);\n    } else {\n      // 兼容\n      registerStyleAttribute(fieldName, layer, [1.0], undefined);\n    }\n  } else {\n    // 兼容\n    registerStyleAttribute(fieldName, layer, [1.0], undefined);\n  }\n}\n/**\n * 根据传入参数 offsets 的类型和值做相应的操作\n * @param fieldName\n * @param layer\n * @param styleOffsets\n */\nfunction handleStyleOffsets(\n  fieldName: string,\n  layer: ILayer,\n  styleOffsets: any,\n) {\n  if (isString(styleOffsets)) {\n    // 如果传入的 styleOffsets 是 string 类型，那么就认为其对应的是传入数据的字段\n    registerStyleAttribute(fieldName, layer, styleOffsets, (value: any) => {\n      return value;\n    });\n  } else if (\n    isArray(styleOffsets) &&\n    styleOffsets.length === 2 &&\n    isString(styleOffsets[0]) &&\n    isFunction(styleOffsets[1])\n  ) {\n    // 字段回调函数 [string, callback]\n    registerStyleAttribute(fieldName, layer, styleOffsets[0], styleOffsets[1]);\n  } else if (\n    isArray(styleOffsets) &&\n    styleOffsets.length === 2 &&\n    isNumber(styleOffsets[0]) &&\n    isNumber(styleOffsets[1])\n  ) {\n    // 字段映射 [string, [start: number, end: number]]\n    registerStyleAttribute(fieldName, layer, styleOffsets, undefined);\n  } else {\n    // 兼容\n    registerStyleAttribute(fieldName, layer, [0, 0], undefined);\n  }\n}\n\n/**\n * 根据传入参数 stroke / color 的类型和值做相应的操作\n * @param fieldName\n * @param layer\n * @param styleColor\n */\nfunction handleStyleColor(fieldName: string, layer: ILayer, styleColor: any) {\n  if (isString(styleColor)) {\n    // 如果传入的 styleColor 是 string 类型，那么就认为其是颜色值\n    registerStyleAttribute(fieldName, layer, styleColor, undefined);\n  } else if (isArray(styleColor) && styleColor.length === 2) {\n    // 传入的 styleColor 是长度为 2 的数组\n    if (isString(styleColor[0]) && isFunction(styleColor[1])) {\n      // 字段回调函数 [string, callback]\n      registerStyleAttribute(fieldName, layer, styleColor[0], styleColor[1]);\n    } else if (\n      isString(styleColor[0]) &&\n      isArray(styleColor[1]) &&\n      styleColor[1].length > 0\n    ) {\n      // 字段映射 [string, [start: string, end: string]]\n      registerStyleAttribute(fieldName, layer, styleColor[0], styleColor[1]);\n    } else {\n      // 兼容\n      registerStyleAttribute(fieldName, layer, '#fff', undefined);\n    }\n  } else {\n    // 兼容\n    registerStyleAttribute(fieldName, layer, '#fff', undefined);\n  }\n}\n\nexport { handleStyleDataMapping, handleStyleFloat, handleStyleColor };\n"]},"metadata":{},"sourceType":"module"}