{"ast":null,"code":"import _toConsumableArray from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Basecoat } from '../common';\nimport { ObjectExt } from '../util';\nexport var Store = /*#__PURE__*/function (_Basecoat) {\n  _inherits(Store, _Basecoat);\n\n  var _super = _createSuper(Store);\n\n  function Store() {\n    var _this;\n\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Store);\n\n    _this = _super.call(this);\n    _this.pending = false;\n    _this.changing = false;\n    _this.data = {};\n\n    _this.mutate(ObjectExt.cloneDeep(data));\n\n    _this.changed = {};\n    return _this;\n  }\n\n  _createClass(Store, [{\n    key: \"mutate\",\n    value: function mutate(data) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var unset = options.unset === true;\n      var silent = options.silent === true;\n      var changes = [];\n      var changing = this.changing;\n      this.changing = true;\n\n      if (!changing) {\n        this.previous = ObjectExt.cloneDeep(this.data);\n        this.changed = {};\n      }\n\n      var current = this.data;\n      var previous = this.previous;\n      var changed = this.changed;\n      Object.keys(data).forEach(function (k) {\n        var key = k;\n        var newValue = data[key];\n\n        if (!ObjectExt.isEqual(current[key], newValue)) {\n          changes.push(key);\n        }\n\n        if (!ObjectExt.isEqual(previous[key], newValue)) {\n          changed[key] = newValue;\n        } else {\n          delete changed[key];\n        }\n\n        if (unset) {\n          delete current[key];\n        } else {\n          current[key] = newValue;\n        }\n      });\n\n      if (!silent && changes.length > 0) {\n        this.pending = true;\n        this.pendingOptions = options;\n        changes.forEach(function (key) {\n          _this2.emit('change:*', {\n            key: key,\n            options: options,\n            store: _this2,\n            current: current[key],\n            previous: previous[key]\n          });\n        });\n      }\n\n      if (changing) {\n        return this;\n      }\n\n      if (!silent) {\n        // Changes can be recursively nested within `\"change\"` events.\n        while (this.pending) {\n          this.pending = false;\n          this.emit('changed', {\n            current: current,\n            previous: previous,\n            store: this,\n            options: this.pendingOptions\n          });\n        }\n      }\n\n      this.pending = false;\n      this.changing = false;\n      this.pendingOptions = null;\n      return this;\n    }\n  }, {\n    key: \"get\",\n    value: function get(key, defaultValue) {\n      if (key == null) {\n        return this.data;\n      }\n\n      var ret = this.data[key];\n      return ret == null ? defaultValue : ret;\n    }\n  }, {\n    key: \"getPrevious\",\n    value: function getPrevious(key) {\n      if (this.previous) {\n        var ret = this.previous[key];\n        return ret == null ? undefined : ret;\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value, options) {\n      if (key != null) {\n        if (typeof key === 'object') {\n          this.mutate(key, value);\n        } else {\n          this.mutate(_defineProperty({}, key, value), options);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key, options) {\n      var empty = undefined;\n      var subset = {};\n      var opts;\n\n      if (typeof key === 'string') {\n        subset[key] = empty;\n        opts = options;\n      } else if (Array.isArray(key)) {\n        key.forEach(function (k) {\n          return subset[k] = empty;\n        });\n        opts = options;\n      } else {\n        // eslint-disable-next-line\n        for (var _key in this.data) {\n          subset[_key] = empty;\n        }\n\n        opts = key;\n      }\n\n      this.mutate(subset, Object.assign(Object.assign({}, opts), {\n        unset: true\n      }));\n      return this;\n    }\n  }, {\n    key: \"getByPath\",\n    value: function getByPath(path) {\n      return ObjectExt.getByPath(this.data, path, '/');\n    }\n  }, {\n    key: \"setByPath\",\n    value: function setByPath(path, value) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var delim = '/';\n      var pathArray = Array.isArray(path) ? _toConsumableArray(path) : path.split(delim);\n      var pathString = Array.isArray(path) ? path.join(delim) : path;\n      var property = pathArray[0];\n      var pathArrayLength = pathArray.length;\n      options.propertyPath = pathString;\n      options.propertyValue = value;\n      options.propertyPathArray = pathArray;\n\n      if (pathArrayLength === 1) {\n        this.set(property, value, options);\n      } else {\n        var update = {};\n        var diver = update;\n        var nextKey = property; // Initialize the nested object. Subobjects are either arrays or objects.\n        // An empty array is created if the sub-key is an integer. Otherwise, an\n        // empty object is created.\n\n        for (var i = 1; i < pathArrayLength; i += 1) {\n          var key = pathArray[i];\n          var isArrayIndex = Number.isFinite(Number(key));\n          diver = diver[nextKey] = isArrayIndex ? [] : {};\n          nextKey = key;\n        } // Fills update with the `value` on `path`.\n\n\n        ObjectExt.setByPath(update, pathArray, value, delim);\n        var data = ObjectExt.cloneDeep(this.data); // If rewrite mode enabled, we replace value referenced by path with the\n        // new one (we don't merge).\n\n        if (options.rewrite) {\n          ObjectExt.unsetByPath(data, path, delim);\n        }\n\n        var merged = ObjectExt.merge(data, update);\n        this.set(property, merged[property], options);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"removeByPath\",\n    value: function removeByPath(path, options) {\n      var keys = Array.isArray(path) ? path : path.split('/');\n      var key = keys[0];\n\n      if (keys.length === 1) {\n        this.remove(key, options);\n      } else {\n        var paths = keys.slice(1);\n        var prop = ObjectExt.cloneDeep(this.get(key));\n\n        if (prop) {\n          ObjectExt.unsetByPath(prop, paths);\n        }\n\n        this.set(key, prop, options);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"hasChanged\",\n    value: function hasChanged(key) {\n      if (key == null) {\n        return Object.keys(this.changed).length > 0;\n      }\n\n      return key in this.changed;\n    }\n    /**\n     * Returns an object containing all the data that have changed,\n     * or `null` if there are no changes. Useful for determining what\n     * parts of a view need to be updated.\n     */\n\n  }, {\n    key: \"getChanges\",\n    value: function getChanges(diff) {\n      if (diff == null) {\n        return this.hasChanged() ? ObjectExt.cloneDeep(this.changed) : null;\n      }\n\n      var old = this.changing ? this.previous : this.data;\n      var changed = {};\n      var hasChanged; // eslint-disable-next-line\n\n      for (var key in diff) {\n        var val = diff[key];\n\n        if (!ObjectExt.isEqual(old[key], val)) {\n          changed[key] = val;\n          hasChanged = true;\n        }\n      }\n\n      return hasChanged ? ObjectExt.cloneDeep(changed) : null;\n    }\n    /**\n     * Returns a copy of the store's `data` object.\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return ObjectExt.cloneDeep(this.data);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var constructor = this.constructor;\n      return new constructor(this.data);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.off();\n      this.data = {};\n      this.previous = {};\n      this.changed = {};\n      this.pending = false;\n      this.changing = false;\n      this.pendingOptions = null;\n      this.trigger('disposed', {\n        store: this\n      });\n    }\n  }]);\n\n  return Store;\n}(Basecoat);\n\n__decorate([Basecoat.dispose()], Store.prototype, \"dispose\", null);","map":{"version":3,"sources":["../../src/model/store.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Basecoat } from '../common';\nimport { ObjectExt } from '../util';\nexport class Store extends Basecoat {\n    constructor(data = {}) {\n        super();\n        this.pending = false;\n        this.changing = false;\n        this.data = {};\n        this.mutate(ObjectExt.cloneDeep(data));\n        this.changed = {};\n    }\n    mutate(data, options = {}) {\n        const unset = options.unset === true;\n        const silent = options.silent === true;\n        const changes = [];\n        const changing = this.changing;\n        this.changing = true;\n        if (!changing) {\n            this.previous = ObjectExt.cloneDeep(this.data);\n            this.changed = {};\n        }\n        const current = this.data;\n        const previous = this.previous;\n        const changed = this.changed;\n        Object.keys(data).forEach((k) => {\n            const key = k;\n            const newValue = data[key];\n            if (!ObjectExt.isEqual(current[key], newValue)) {\n                changes.push(key);\n            }\n            if (!ObjectExt.isEqual(previous[key], newValue)) {\n                changed[key] = newValue;\n            }\n            else {\n                delete changed[key];\n            }\n            if (unset) {\n                delete current[key];\n            }\n            else {\n                current[key] = newValue;\n            }\n        });\n        if (!silent && changes.length > 0) {\n            this.pending = true;\n            this.pendingOptions = options;\n            changes.forEach((key) => {\n                this.emit('change:*', {\n                    key,\n                    options,\n                    store: this,\n                    current: current[key],\n                    previous: previous[key],\n                });\n            });\n        }\n        if (changing) {\n            return this;\n        }\n        if (!silent) {\n            // Changes can be recursively nested within `\"change\"` events.\n            while (this.pending) {\n                this.pending = false;\n                this.emit('changed', {\n                    current,\n                    previous,\n                    store: this,\n                    options: this.pendingOptions,\n                });\n            }\n        }\n        this.pending = false;\n        this.changing = false;\n        this.pendingOptions = null;\n        return this;\n    }\n    get(key, defaultValue) {\n        if (key == null) {\n            return this.data;\n        }\n        const ret = this.data[key];\n        return ret == null ? defaultValue : ret;\n    }\n    getPrevious(key) {\n        if (this.previous) {\n            const ret = this.previous[key];\n            return ret == null ? undefined : ret;\n        }\n        return undefined;\n    }\n    set(key, value, options) {\n        if (key != null) {\n            if (typeof key === 'object') {\n                this.mutate(key, value);\n            }\n            else {\n                this.mutate({ [key]: value }, options);\n            }\n        }\n        return this;\n    }\n    remove(key, options) {\n        const empty = undefined;\n        const subset = {};\n        let opts;\n        if (typeof key === 'string') {\n            subset[key] = empty;\n            opts = options;\n        }\n        else if (Array.isArray(key)) {\n            key.forEach((k) => (subset[k] = empty));\n            opts = options;\n        }\n        else {\n            // eslint-disable-next-line\n            for (const key in this.data) {\n                subset[key] = empty;\n            }\n            opts = key;\n        }\n        this.mutate(subset, Object.assign(Object.assign({}, opts), { unset: true }));\n        return this;\n    }\n    getByPath(path) {\n        return ObjectExt.getByPath(this.data, path, '/');\n    }\n    setByPath(path, value, options = {}) {\n        const delim = '/';\n        const pathArray = Array.isArray(path) ? [...path] : path.split(delim);\n        const pathString = Array.isArray(path) ? path.join(delim) : path;\n        const property = pathArray[0];\n        const pathArrayLength = pathArray.length;\n        options.propertyPath = pathString;\n        options.propertyValue = value;\n        options.propertyPathArray = pathArray;\n        if (pathArrayLength === 1) {\n            this.set(property, value, options);\n        }\n        else {\n            const update = {};\n            let diver = update;\n            let nextKey = property;\n            // Initialize the nested object. Subobjects are either arrays or objects.\n            // An empty array is created if the sub-key is an integer. Otherwise, an\n            // empty object is created.\n            for (let i = 1; i < pathArrayLength; i += 1) {\n                const key = pathArray[i];\n                const isArrayIndex = Number.isFinite(Number(key));\n                diver = diver[nextKey] = isArrayIndex ? [] : {};\n                nextKey = key;\n            }\n            // Fills update with the `value` on `path`.\n            ObjectExt.setByPath(update, pathArray, value, delim);\n            const data = ObjectExt.cloneDeep(this.data);\n            // If rewrite mode enabled, we replace value referenced by path with the\n            // new one (we don't merge).\n            if (options.rewrite) {\n                ObjectExt.unsetByPath(data, path, delim);\n            }\n            const merged = ObjectExt.merge(data, update);\n            this.set(property, merged[property], options);\n        }\n        return this;\n    }\n    removeByPath(path, options) {\n        const keys = Array.isArray(path) ? path : path.split('/');\n        const key = keys[0];\n        if (keys.length === 1) {\n            this.remove(key, options);\n        }\n        else {\n            const paths = keys.slice(1);\n            const prop = ObjectExt.cloneDeep(this.get(key));\n            if (prop) {\n                ObjectExt.unsetByPath(prop, paths);\n            }\n            this.set(key, prop, options);\n        }\n        return this;\n    }\n    hasChanged(key) {\n        if (key == null) {\n            return Object.keys(this.changed).length > 0;\n        }\n        return key in this.changed;\n    }\n    /**\n     * Returns an object containing all the data that have changed,\n     * or `null` if there are no changes. Useful for determining what\n     * parts of a view need to be updated.\n     */\n    getChanges(diff) {\n        if (diff == null) {\n            return this.hasChanged() ? ObjectExt.cloneDeep(this.changed) : null;\n        }\n        const old = this.changing ? this.previous : this.data;\n        const changed = {};\n        let hasChanged;\n        // eslint-disable-next-line\n        for (const key in diff) {\n            const val = diff[key];\n            if (!ObjectExt.isEqual(old[key], val)) {\n                changed[key] = val;\n                hasChanged = true;\n            }\n        }\n        return hasChanged ? ObjectExt.cloneDeep(changed) : null;\n    }\n    /**\n     * Returns a copy of the store's `data` object.\n     */\n    toJSON() {\n        return ObjectExt.cloneDeep(this.data);\n    }\n    clone() {\n        const constructor = this.constructor;\n        return new constructor(this.data);\n    }\n    dispose() {\n        this.off();\n        this.data = {};\n        this.previous = {};\n        this.changed = {};\n        this.pending = false;\n        this.changing = false;\n        this.pendingOptions = null;\n        this.trigger('disposed', { store: this });\n    }\n}\n__decorate([\n    Basecoat.dispose()\n], Store.prototype, \"dispose\", null);\n//# sourceMappingURL=store.js.map"]},"metadata":{},"sourceType":"module"}