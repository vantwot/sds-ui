{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { inject, injectable } from 'mana-syringe';\nimport { HookHub } from '@antv/xflow-hook';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands, XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsDelNode;\n\n(function (NsDelNode) {\n  /** Command: 用于注册named factory */\n  NsDelNode.command = XFlowNodeCommands.DEL_NODE;\n  /** hook name */\n\n  NsDelNode.hookKey = 'delNode';\n  /** 创建 hook */\n\n  NsDelNode.createHook = () => {\n    return new HookHub();\n  };\n})(NsDelNode || (NsDelNode = {}));\n\nlet DelNodeCommand =\n/** 创建节点命令 */\nclass DelNodeCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      const result = yield hooks.delNode.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          commandService,\n          deleteNodeService\n        } = handlerArgs;\n        const graph = yield ctx.getX6Graph();\n\n        if (deleteNodeService) {\n          const canDel = yield deleteNodeService(handlerArgs);\n          if (!canDel) return {\n            err: ' service rejected'\n          };\n        }\n\n        const nodeId = (handlerArgs.x6Node || handlerArgs.nodeConfig).id;\n        const nodeCell = graph.getCellById(nodeId);\n\n        if (nodeCell && nodeCell.isNode()) {\n          /** 先清理连线 */\n          const edges = [...(graph.getIncomingEdges(nodeCell) || []), ...(graph.getOutgoingEdges(nodeCell) || [])];\n          yield Promise.all(edges.map(edge => {\n            return commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, {\n              x6Edge: edge\n            });\n          }));\n          /** 再清理节点 */\n\n          const nodeConfig = nodeCell.getData();\n          nodeCell.remove();\n          /** add undo: delete node */\n\n          ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n            yield commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n              nodeConfig\n            }); // TODO: 支持线和节点的undo\n            // 通过 sequence mapping 出新的port id\n            // const nodeCtx = nodeCmd.contextProvider()\n            // const { nodeCell } = nodeCtx.getResult()\n            // edgeCmds.forEach(async cmd => {\n            //   const c = cmd.contextProvider()\n            //   const { edgeConfig } = c.getResult()\n            // })\n          })));\n          return {\n            err: null,\n            nodeConfig\n          };\n        }\n\n        return {\n          err: 'node is not exist'\n        };\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      if (this.isUndoable()) {\n        const ctx = this.contextProvider();\n        ctx.undo();\n      }\n\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], DelNodeCommand.prototype, \"contextProvider\", void 0);\n\nDelNodeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsDelNode.command.id\n  }\n})\n/** 创建节点命令 */\n], DelNodeCommand);\nexport { DelNodeCommand };","map":{"version":3,"sources":["../../../src/command-contributions/node/node-del.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,MAAT,EAAiB,UAAjB,QAAmC,cAAnC;AACA,SAAS,OAAT,QAAwB,kBAAxB;AAIA,SAAS,eAAT,EAA0B,uBAA1B,QAAyD,yBAAzD;AACA,SAAS,iBAAT,EAA4B,iBAA5B,QAAqD,aAArD;AACA,SAAS,UAAT,QAA2B,yBAA3B;AAQA,OAAM,IAAW,SAAX;;AAAN,CAAA,UAAiB,SAAjB,EAA0B;AACxB;AACa,EAAA,SAAA,CAAA,OAAA,GAAU,iBAAiB,CAAC,QAA5B;AACb;;AACa,EAAA,SAAA,CAAA,OAAA,GAAU,SAAV;AACb;;AACa,EAAA,SAAA,CAAA,UAAA,GAAa,MAAK;AAC7B,WAAO,IAAI,OAAJ,EAAP;AACD,GAFY;AAsBd,CA5BD,EAAiB,SAAS,KAAT,SAAS,GAAA,EAAA,CAA1B;;AAkCA,IAAa,cAAc;AAD3B;AACA,MAAa,cAAb,CAA2B;AAA3B,EAAA,WAAA,GAAA;AAIE;AACA,SAAA,OAAA,GAAU,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACnB,YAAM,GAAG,GAAG,KAAK,eAAL,EAAZ;AACA,YAAM;AAAE,QAAA,IAAF;AAAQ,QAAA,KAAK,EAAE;AAAf,UAA+B,GAAG,CAAC,OAAJ,EAArC;AAEA,YAAM,KAAK,GAAG,GAAG,CAAC,QAAJ,EAAd;AAEA,YAAM,MAAM,GAAG,MAAM,KAAK,CAAC,OAAN,CAAc,IAAd,CACnB,IADmB,EAEb,WAAN,IAAoB,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAClB,cAAM;AAAE,UAAA,cAAF;AAAkB,UAAA;AAAlB,YAAwC,WAA9C;AACA,cAAM,KAAK,GAAG,MAAM,GAAG,CAAC,UAAJ,EAApB;;AAEA,YAAI,iBAAJ,EAAuB;AACrB,gBAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC,WAAD,CAAtC;AACA,cAAI,CAAC,MAAL,EAAa,OAAO;AAAE,YAAA,GAAG,EAAE;AAAP,WAAP;AACd;;AAED,cAAM,MAAM,GAAG,CAAC,WAAW,CAAC,MAAZ,IAAsB,WAAW,CAAC,UAAnC,EAA+C,EAA9D;AACA,cAAM,QAAQ,GAAG,KAAK,CAAC,WAAN,CAAkB,MAAlB,CAAjB;;AAEA,YAAI,QAAQ,IAAI,QAAQ,CAAC,MAAT,EAAhB,EAAmC;AACjC;AACA,gBAAM,KAAK,GAAG,CACZ,IAAI,KAAK,CAAC,gBAAN,CAAuB,QAAvB,KAAoC,EAAxC,CADY,EAEZ,IAAI,KAAK,CAAC,gBAAN,CAAuB,QAAvB,KAAoC,EAAxC,CAFY,CAAd;AAKA,gBAAM,OAAO,CAAC,GAAR,CACJ,KAAK,CAAC,GAAN,CAAU,IAAI,IAAG;AACf,mBAAO,cAAc,CAAC,cAAf,CAA8B,iBAAiB,CAAC,QAAlB,CAA2B,EAAzD,EAA6D;AAClE,cAAA,MAAM,EAAE;AAD0D,aAA7D,CAAP;AAGD,WAJD,CADI,CAAN;AAOA;;AACA,gBAAM,UAAU,GAAG,QAAQ,CAAC,OAAT,EAAnB;AACA,UAAA,QAAQ,CAAC,MAAT;AACA;;AACA,UAAA,GAAG,CAAC,OAAJ,CACE,UAAU,CAAC,MAAX,CAAkB,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC3B,kBAAM,cAAc,CAAC,cAAf,CAA8B,iBAAiB,CAAC,QAAlB,CAA2B,EAAzD,EAA6D;AACjE,cAAA;AADiE,aAA7D,CAAN,CAD2B,CAI3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,WAZ4B,CAA7B,CADF;AAeA,iBAAO;AAAE,YAAA,GAAG,EAAE,IAAP;AAAa,YAAA;AAAb,WAAP;AACD;;AACD,eAAO;AAAE,UAAA,GAAG,EAAE;AAAP,SAAP;AACD,OAhDmB,CAFD,EAmDnB,WAnDmB,CAArB;AAsDA,MAAA,GAAG,CAAC,SAAJ,CAAc,MAAd;AAEA,aAAO,IAAP;AACD,KA/DoB,CAArB;AAiEA;;;AACA,SAAA,IAAA,GAAO,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAChB,UAAI,KAAK,UAAL,EAAJ,EAAuB;AACrB,cAAM,GAAG,GAAG,KAAK,eAAL,EAAZ;AACA,QAAA,GAAG,CAAC,IAAJ;AACD;;AACD,aAAO,IAAP;AACD,KANiB,CAAlB;AAQA;;;AACA,SAAA,IAAA,GAAO,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAChB,UAAI,CAAC,KAAK,UAAL,EAAL,EAAwB;AACtB,cAAM,KAAK,OAAL,EAAN;AACD;;AACD,aAAO,IAAP;AACD,KALiB,CAAlB;AAWD;;AAJC,EAAA,UAAU,GAAA;AACR,UAAM,GAAG,GAAG,KAAK,eAAL,EAAZ;AACA,WAAO,GAAG,CAAC,UAAJ,EAAP;AACD;;AA1FwB,CAA3B;;AAEmC,UAAA,CAAA,CAAhC,MAAM,CAAC,uBAAD,CAA0B,E,iCAAA,CAAA,E,wBAAA,E,iBAAA,E,KAA4C,CAA5C,CAAA;;AAFtB,cAAc,GAAA,UAAA,CAAA,CAJ1B,UAAU,CAAC;AACV,EAAA,KAAK,EAAE;AAAE,IAAA,KAAK,EAAE,eAAT;AAA0B,IAAA,KAAK,EAAE,SAAS,CAAC,OAAV,CAAkB;AAAnD;AADG,CAAD;AAGX;AAC2B,CAAA,EAAd,cAAc,CAAd;SAAA,c","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { inject, injectable } from 'mana-syringe';\nimport { HookHub } from '@antv/xflow-hook';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands, XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsDelNode;\n(function (NsDelNode) {\n    /** Command: 用于注册named factory */\n    NsDelNode.command = XFlowNodeCommands.DEL_NODE;\n    /** hook name */\n    NsDelNode.hookKey = 'delNode';\n    /** 创建 hook */\n    NsDelNode.createHook = () => {\n        return new HookHub();\n    };\n})(NsDelNode || (NsDelNode = {}));\nlet DelNodeCommand = \n/** 创建节点命令 */\nclass DelNodeCommand {\n    constructor() {\n        /** 执行Cmd */\n        this.execute = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            const { args, hooks: runtimeHook } = ctx.getArgs();\n            const hooks = ctx.getHooks();\n            const result = yield hooks.delNode.call(args, (handlerArgs) => __awaiter(this, void 0, void 0, function* () {\n                const { commandService, deleteNodeService } = handlerArgs;\n                const graph = yield ctx.getX6Graph();\n                if (deleteNodeService) {\n                    const canDel = yield deleteNodeService(handlerArgs);\n                    if (!canDel)\n                        return { err: ' service rejected' };\n                }\n                const nodeId = (handlerArgs.x6Node || handlerArgs.nodeConfig).id;\n                const nodeCell = graph.getCellById(nodeId);\n                if (nodeCell && nodeCell.isNode()) {\n                    /** 先清理连线 */\n                    const edges = [\n                        ...(graph.getIncomingEdges(nodeCell) || []),\n                        ...(graph.getOutgoingEdges(nodeCell) || []),\n                    ];\n                    yield Promise.all(edges.map(edge => {\n                        return commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, {\n                            x6Edge: edge,\n                        });\n                    }));\n                    /** 再清理节点 */\n                    const nodeConfig = nodeCell.getData();\n                    nodeCell.remove();\n                    /** add undo: delete node */\n                    ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n                        yield commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n                            nodeConfig,\n                        });\n                        // TODO: 支持线和节点的undo\n                        // 通过 sequence mapping 出新的port id\n                        // const nodeCtx = nodeCmd.contextProvider()\n                        // const { nodeCell } = nodeCtx.getResult()\n                        // edgeCmds.forEach(async cmd => {\n                        //   const c = cmd.contextProvider()\n                        //   const { edgeConfig } = c.getResult()\n                        // })\n                    })));\n                    return { err: null, nodeConfig };\n                }\n                return { err: 'node is not exist' };\n            }), runtimeHook);\n            ctx.setResult(result);\n            return this;\n        });\n        /** undo cmd */\n        this.undo = () => __awaiter(this, void 0, void 0, function* () {\n            if (this.isUndoable()) {\n                const ctx = this.contextProvider();\n                ctx.undo();\n            }\n            return this;\n        });\n        /** redo cmd */\n        this.redo = () => __awaiter(this, void 0, void 0, function* () {\n            if (!this.isUndoable()) {\n                yield this.execute();\n            }\n            return this;\n        });\n    }\n    isUndoable() {\n        const ctx = this.contextProvider();\n        return ctx.isUndoable();\n    }\n};\n__decorate([\n    inject(ICommandContextProvider),\n    __metadata(\"design:type\", Object)\n], DelNodeCommand.prototype, \"contextProvider\", void 0);\nDelNodeCommand = __decorate([\n    injectable({\n        token: { token: ICommandHandler, named: NsDelNode.command.id },\n    })\n    /** 创建节点命令 */\n], DelNodeCommand);\nexport { DelNodeCommand };\n//# sourceMappingURL=node-del.js.map"]},"metadata":{},"sourceType":"module"}