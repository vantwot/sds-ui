{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _isNumber from \"lodash/isNumber\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport BaseModel from '../../core/BaseModel';\nimport { earthTriangulation } from '../../core/triangulation';\nvar atmoSphereFrag = \"\\nuniform float u_opacity;\\nuniform vec3 u_CameraPosition;\\n\\nvarying vec3 vVertexNormal;\\nvarying float v_offset;\\nvarying vec4 v_Color;\\nvoid main() {\\n    \\n    \\n    // float intensity = pow(0.5 + dot(normalize(vVertexNormal), normalize(u_CameraPosition)), 3.0);\\n    float intensity = pow(v_offset + dot(normalize(vVertexNormal), normalize(u_CameraPosition)), 3.0);\\n    // TODO: \\u53BB\\u9664\\u80CC\\u9762\\n    if(intensity > 1.0) intensity = 0.0;\\n\\n    gl_FragColor = vec4(v_Color.rgb, v_Color.a * intensity * u_opacity);\\n}\\n\";\nvar atmoSphereVert = \"\\nattribute vec3 a_Position;\\nattribute vec3 a_Normal;\\nattribute vec2 a_Uv;\\nattribute vec4 a_Color;\\nuniform vec3 u_CameraPosition;\\nvarying float v_CamreaDistance;\\n\\nuniform mat4 u_ViewProjectionMatrix;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_ViewMatrix;\\n\\nvarying vec3 vVertexNormal;\\nvarying vec4 v_Color;\\nvarying float v_offset;\\n\\nvoid main() {\\n    float EARTH_RADIUS = 100.0;\\n    \\n    v_Color = a_Color;\\n\\n    v_offset = min(((length(u_CameraPosition) - EARTH_RADIUS)/600.0) * 0.5 + 0.4, 1.0);\\n    vVertexNormal = a_Normal;\\n\\n    gl_Position = u_ViewProjectionMatrix * u_ModelMatrix * vec4(a_Position, 1.0);\\n}\\n\";\n\nvar EarthAtomSphereModel = function (_BaseModel) {\n  _inherits(EarthAtomSphereModel, _BaseModel);\n\n  var _super = _createSuper(EarthAtomSphereModel);\n\n  function EarthAtomSphereModel() {\n    _classCallCheck(this, EarthAtomSphereModel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(EarthAtomSphereModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          _ref$opacity = _ref.opacity,\n          opacity = _ref$opacity === void 0 ? 1 : _ref$opacity;\n\n      return {\n        u_opacity: _isNumber(opacity) ? opacity : 1.0\n      };\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      return this.buildModels();\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      return '';\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      this.layer.zIndex = -997;\n      return [this.layer.buildLayerModel({\n        moduleName: 'earthAtmoSphere',\n        vertexShader: atmoSphereVert,\n        fragmentShader: atmoSphereFrag,\n        triangulation: earthTriangulation,\n        depth: {\n          enable: false\n        },\n        blend: this.getBlend()\n      })];\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var _feature$size = feature.size,\n                size = _feature$size === void 0 ? 1 : _feature$size;\n            return Array.isArray(size) ? [size[0]] : [size];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'normal',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Normal',\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {\n            return normal;\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Uv',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[3], vertex[4]];\n          }\n        }\n      });\n    }\n  }]);\n\n  return EarthAtomSphereModel;\n}(BaseModel);\n\nexport { EarthAtomSphereModel as default };","map":{"version":3,"sources":["../../../src/earth/models/atmosphere.ts"],"names":["EarthAtomSphereModel","BaseModel","opacity","u_opacity","moduleName","vertexShader","fragmentShader","triangulation","depth","enable","blend","name","type","AttributeType","descriptor","buffer","usage","gl","data","FLOAT","size","update","feature","Array","vertex"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  IModel,\n  IModelUniform,\n} from '@antv/l7-core';\nimport { isNumber } from 'lodash';\n\nimport BaseModel from '../../core/BaseModel';\nimport { earthTriangulation } from '../../core/triangulation';\nimport atmoSphereFrag from '../shaders/atmosphere_frag.glsl';\nimport atmoSphereVert from '../shaders/atmosphere_vert.glsl';\ninterface IAtmoLayerStyleOptions {\n  opacity: number;\n}\n\nexport default class EarthAtomSphereModel extends BaseModel {\n  public getUninforms(): IModelUniform {\n    const {\n      opacity = 1,\n    } = this.layer.getLayerConfig() as IAtmoLayerStyleOptions;\n    return {\n      u_opacity: isNumber(opacity) ? opacity : 1.0,\n    };\n  }\n\n  public initModels(): IModel[] {\n    return this.buildModels();\n  }\n\n  public clearModels() {\n    return '';\n  }\n\n  public buildModels(): IModel[] {\n    // TODO: 调整图层的绘制顺序 地球大气层\n    this.layer.zIndex = -997;\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'earthAtmoSphere',\n        vertexShader: atmoSphereVert,\n        fragmentShader: atmoSphereFrag,\n        triangulation: earthTriangulation,\n        depth: {\n          enable: false,\n        },\n        blend: this.getBlend(),\n      }),\n    ];\n  }\n\n  protected registerBuiltinAttributes() {\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 1 } = feature;\n          return Array.isArray(size) ? [size[0]] : [size as number];\n        },\n      },\n    });\n\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'normal',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Normal',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n          normal: number[],\n        ) => {\n          return normal;\n        },\n      },\n    });\n\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[3], vertex[4]];\n        },\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}