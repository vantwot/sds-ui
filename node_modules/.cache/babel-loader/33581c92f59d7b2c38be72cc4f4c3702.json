{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar _dec, _class;\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { decodePickingColor, encodePickingColor, rgb2arr } from '@antv/l7-utils';\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nvar PickingStage = {\n  NONE: 0.0,\n  ENCODE: 1.0,\n  HIGHLIGHT: 2.0\n};\nvar PixelPickingPlugin = (_dec = injectable(), _dec(_class = function () {\n  function PixelPickingPlugin() {\n    _classCallCheck(this, PixelPickingPlugin);\n  }\n\n  _createClass(PixelPickingPlugin, [{\n    key: \"apply\",\n    value: function apply(layer, _ref) {\n      var rendererService = _ref.rendererService,\n          styleAttributeService = _ref.styleAttributeService;\n      layer.hooks.init.tap('PixelPickingPlugin', function () {\n        var _layer$getLayerConfig = layer.getLayerConfig(),\n            enablePicking = _layer$getLayerConfig.enablePicking;\n\n        styleAttributeService.registerStyleAttribute({\n          name: 'pickingColor',\n          type: AttributeType.Attribute,\n          descriptor: {\n            name: 'a_PickingColor',\n            buffer: {\n              data: [],\n              type: gl.FLOAT\n            },\n            size: 3,\n            update: function update(feature, featureIdx) {\n              var id = feature.id;\n              return enablePicking ? encodePickingColor(id) : [0, 0, 0];\n            }\n          }\n        });\n      });\n      layer.hooks.beforePickingEncode.tap('PixelPickingPlugin', function () {\n        var _layer$getLayerConfig2 = layer.getLayerConfig(),\n            enablePicking = _layer$getLayerConfig2.enablePicking;\n\n        if (enablePicking && layer.isVisible()) {\n          layer.models.forEach(function (model) {\n            return model.addUniforms({\n              u_PickingStage: PickingStage.ENCODE\n            });\n          });\n        }\n      });\n      layer.hooks.afterPickingEncode.tap('PixelPickingPlugin', function () {\n        var _layer$getLayerConfig3 = layer.getLayerConfig(),\n            enablePicking = _layer$getLayerConfig3.enablePicking;\n\n        if (enablePicking && layer.isVisible()) {\n          layer.models.forEach(function (model) {\n            return model.addUniforms({\n              u_PickingStage: PickingStage.HIGHLIGHT\n            });\n          });\n        }\n      });\n      layer.hooks.beforeHighlight.tap('PixelPickingPlugin', function (pickedColor) {\n        var _layer$getLayerConfig4 = layer.getLayerConfig(),\n            highlightColor = _layer$getLayerConfig4.highlightColor;\n\n        var highlightColorInArray = typeof highlightColor === 'string' ? rgb2arr(highlightColor) : highlightColor || [1, 0, 0, 1];\n        layer.updateLayerConfig({\n          pickedFeatureID: decodePickingColor(new Uint8Array(pickedColor))\n        });\n        layer.models.forEach(function (model) {\n          return model.addUniforms({\n            u_PickingStage: PickingStage.HIGHLIGHT,\n            u_PickingColor: pickedColor,\n            u_HighlightColor: highlightColorInArray.map(function (c) {\n              return c * 255;\n            })\n          });\n        });\n      });\n      layer.hooks.beforeSelect.tap('PixelPickingPlugin', function (pickedColor) {\n        var _layer$getLayerConfig5 = layer.getLayerConfig(),\n            selectColor = _layer$getLayerConfig5.selectColor;\n\n        var highlightColorInArray = typeof selectColor === 'string' ? rgb2arr(selectColor) : selectColor || [1, 0, 0, 1];\n        layer.updateLayerConfig({\n          pickedFeatureID: decodePickingColor(new Uint8Array(pickedColor))\n        });\n        layer.models.forEach(function (model) {\n          return model.addUniforms({\n            u_PickingStage: PickingStage.HIGHLIGHT,\n            u_PickingColor: pickedColor,\n            u_HighlightColor: highlightColorInArray.map(function (c) {\n              return c * 255;\n            })\n          });\n        });\n      });\n    }\n  }]);\n\n  return PixelPickingPlugin;\n}()) || _class);\nexport { PixelPickingPlugin as default };","map":{"version":3,"sources":["../../src/plugins/PixelPickingPlugin.ts"],"names":["PickingStage","NONE","ENCODE","HIGHLIGHT","injectable","PixelPickingPlugin","rendererService","styleAttributeService","layer","enablePicking","name","type","AttributeType","descriptor","buffer","data","gl","FLOAT","size","update","id","feature","encodePickingColor","u_PickingStage","highlightColor","highlightColorInArray","rgb2arr","pickedFeatureID","decodePickingColor","u_PickingColor","u_HighlightColor","c","selectColor"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  ILayer,\n  ILayerPlugin,\n  IRendererService,\n  IStyleAttributeService,\n} from '@antv/l7-core';\nimport {\n  decodePickingColor,\n  encodePickingColor,\n  rgb2arr,\n} from '@antv/l7-utils';\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\n\nconst PickingStage = {\n  NONE: 0.0,\n  ENCODE: 1.0,\n  HIGHLIGHT: 2.0,\n};\n\n@injectable()\nexport default class PixelPickingPlugin implements ILayerPlugin {\n  public apply(\n    layer: ILayer,\n    {\n      rendererService,\n      styleAttributeService,\n    }: {\n      rendererService: IRendererService;\n      styleAttributeService: IStyleAttributeService;\n    },\n  ) {\n    // TODO: 由于 Shader 目前无法根据是否开启拾取进行内容修改，因此即使不开启也需要生成 a_PickingColor\n    layer.hooks.init.tap('PixelPickingPlugin', () => {\n      const { enablePicking } = layer.getLayerConfig();\n      styleAttributeService.registerStyleAttribute({\n        name: 'pickingColor',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_PickingColor',\n          buffer: {\n            data: [],\n            type: gl.FLOAT,\n          },\n          size: 3,\n          // TODO: 固定 feature range 范围内的 pickingColor 都是固定的，可以生成 cache\n          update: (feature: IEncodeFeature, featureIdx: number) => {\n            // 只有开启拾取才需要 encode\n            const { id } = feature;\n            return enablePicking ? encodePickingColor(id as number) : [0, 0, 0];\n          },\n        },\n      });\n    });\n    // 必须要与 PixelPickingPass 结合使用，因此必须开启 multiPassRenderer\n    // if (layer.multiPassRenderer) {\n    layer.hooks.beforePickingEncode.tap('PixelPickingPlugin', () => {\n      const { enablePicking } = layer.getLayerConfig();\n      if (enablePicking && layer.isVisible()) {\n        layer.models.forEach((model) =>\n          model.addUniforms({\n            u_PickingStage: PickingStage.ENCODE,\n          }),\n        );\n      }\n    });\n\n    layer.hooks.afterPickingEncode.tap('PixelPickingPlugin', () => {\n      const { enablePicking } = layer.getLayerConfig();\n      // 区分选中高亮 和滑过高亮\n      if (enablePicking && layer.isVisible()) {\n        layer.models.forEach((model) =>\n          model.addUniforms({\n            u_PickingStage: PickingStage.HIGHLIGHT,\n          }),\n        );\n      }\n    });\n\n    layer.hooks.beforeHighlight.tap(\n      'PixelPickingPlugin',\n      (pickedColor: number[]) => {\n        const { highlightColor } = layer.getLayerConfig();\n        const highlightColorInArray =\n          typeof highlightColor === 'string'\n            ? rgb2arr(highlightColor)\n            : highlightColor || [1, 0, 0, 1];\n        layer.updateLayerConfig({\n          pickedFeatureID: decodePickingColor(new Uint8Array(pickedColor)),\n        });\n        layer.models.forEach((model) =>\n          model.addUniforms({\n            u_PickingStage: PickingStage.HIGHLIGHT,\n            u_PickingColor: pickedColor,\n            u_HighlightColor: highlightColorInArray.map((c) => c * 255),\n          }),\n        );\n      },\n    );\n\n    layer.hooks.beforeSelect.tap(\n      'PixelPickingPlugin',\n      (pickedColor: number[]) => {\n        const { selectColor } = layer.getLayerConfig();\n        const highlightColorInArray =\n          typeof selectColor === 'string'\n            ? rgb2arr(selectColor)\n            : selectColor || [1, 0, 0, 1];\n        layer.updateLayerConfig({\n          pickedFeatureID: decodePickingColor(new Uint8Array(pickedColor)),\n        });\n        layer.models.forEach((model) =>\n          model.addUniforms({\n            u_PickingStage: PickingStage.HIGHLIGHT,\n            u_PickingColor: pickedColor,\n            u_HighlightColor: highlightColorInArray.map((c) => c * 255),\n          }),\n        );\n      },\n    );\n    // }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}