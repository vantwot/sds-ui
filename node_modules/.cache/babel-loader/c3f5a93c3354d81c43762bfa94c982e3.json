{"ast":null,"code":"import { NumberExt } from '../../util';\n/**\n * Routes the edge always to/from a certain side\n */\n\nexport const oneSide = function (vertices, options, edgeView) {\n  const side = options.side || 'bottom';\n  const padding = NumberExt.normalizeSides(options.padding || 40);\n  const sourceBBox = edgeView.sourceBBox;\n  const targetBBox = edgeView.targetBBox;\n  const sourcePoint = sourceBBox.getCenter();\n  const targetPoint = targetBBox.getCenter();\n  let coord;\n  let dim;\n  let factor;\n\n  switch (side) {\n    case 'top':\n      factor = -1;\n      coord = 'y';\n      dim = 'height';\n      break;\n\n    case 'left':\n      factor = -1;\n      coord = 'x';\n      dim = 'width';\n      break;\n\n    case 'right':\n      factor = 1;\n      coord = 'x';\n      dim = 'width';\n      break;\n\n    case 'bottom':\n    default:\n      factor = 1;\n      coord = 'y';\n      dim = 'height';\n      break;\n  } // Move the points from the center of the element to outside of it.\n\n\n  sourcePoint[coord] += factor * (sourceBBox[dim] / 2 + padding[side]);\n  targetPoint[coord] += factor * (targetBBox[dim] / 2 + padding[side]); // Make edge orthogonal (at least the first and last vertex).\n\n  if (factor * (sourcePoint[coord] - targetPoint[coord]) > 0) {\n    targetPoint[coord] = sourcePoint[coord];\n  } else {\n    sourcePoint[coord] = targetPoint[coord];\n  }\n\n  return [sourcePoint.toJSON(), ...vertices, targetPoint.toJSON()];\n};","map":{"version":3,"sources":["../../../src/registry/router/oneside.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,YAA1B;AAQA;;AAEG;;AACH,OAAO,MAAM,OAAO,GAA4C,UAC9D,QAD8D,EAE9D,OAF8D,EAG9D,QAH8D,EAGtD;AAER,QAAM,IAAI,GAAG,OAAO,CAAC,IAAR,IAAgB,QAA7B;AACA,QAAM,OAAO,GAAG,SAAS,CAAC,cAAV,CAAyB,OAAO,CAAC,OAAR,IAAmB,EAA5C,CAAhB;AACA,QAAM,UAAU,GAAG,QAAQ,CAAC,UAA5B;AACA,QAAM,UAAU,GAAG,QAAQ,CAAC,UAA5B;AACA,QAAM,WAAW,GAAG,UAAU,CAAC,SAAX,EAApB;AACA,QAAM,WAAW,GAAG,UAAU,CAAC,SAAX,EAApB;AAEA,MAAI,KAAJ;AACA,MAAI,GAAJ;AACA,MAAI,MAAJ;;AAEA,UAAQ,IAAR;AACE,SAAK,KAAL;AACE,MAAA,MAAM,GAAG,CAAC,CAAV;AACA,MAAA,KAAK,GAAG,GAAR;AACA,MAAA,GAAG,GAAG,QAAN;AACA;;AACF,SAAK,MAAL;AACE,MAAA,MAAM,GAAG,CAAC,CAAV;AACA,MAAA,KAAK,GAAG,GAAR;AACA,MAAA,GAAG,GAAG,OAAN;AACA;;AACF,SAAK,OAAL;AACE,MAAA,MAAM,GAAG,CAAT;AACA,MAAA,KAAK,GAAG,GAAR;AACA,MAAA,GAAG,GAAG,OAAN;AACA;;AACF,SAAK,QAAL;AACA;AACE,MAAA,MAAM,GAAG,CAAT;AACA,MAAA,KAAK,GAAG,GAAR;AACA,MAAA,GAAG,GAAG,QAAN;AACA;AArBJ,GAbQ,CAqCR;;;AACA,EAAA,WAAW,CAAC,KAAD,CAAX,IAAsB,MAAM,IAAI,UAAU,CAAC,GAAD,CAAV,GAAkB,CAAlB,GAAsB,OAAO,CAAC,IAAD,CAAjC,CAA5B;AACA,EAAA,WAAW,CAAC,KAAD,CAAX,IAAsB,MAAM,IAAI,UAAU,CAAC,GAAD,CAAV,GAAkB,CAAlB,GAAsB,OAAO,CAAC,IAAD,CAAjC,CAA5B,CAvCQ,CAyCR;;AACA,MAAI,MAAM,IAAI,WAAW,CAAC,KAAD,CAAX,GAAqB,WAAW,CAAC,KAAD,CAApC,CAAN,GAAqD,CAAzD,EAA4D;AAC1D,IAAA,WAAW,CAAC,KAAD,CAAX,GAAqB,WAAW,CAAC,KAAD,CAAhC;AACD,GAFD,MAEO;AACL,IAAA,WAAW,CAAC,KAAD,CAAX,GAAqB,WAAW,CAAC,KAAD,CAAhC;AACD;;AAED,SAAO,CAAC,WAAW,CAAC,MAAZ,EAAD,EAAuB,GAAG,QAA1B,EAAoC,WAAW,CAAC,MAAZ,EAApC,CAAP;AACD,CApDM","sourceRoot":"","sourcesContent":["import { NumberExt } from '../../util';\n/**\n * Routes the edge always to/from a certain side\n */\nexport const oneSide = function (vertices, options, edgeView) {\n    const side = options.side || 'bottom';\n    const padding = NumberExt.normalizeSides(options.padding || 40);\n    const sourceBBox = edgeView.sourceBBox;\n    const targetBBox = edgeView.targetBBox;\n    const sourcePoint = sourceBBox.getCenter();\n    const targetPoint = targetBBox.getCenter();\n    let coord;\n    let dim;\n    let factor;\n    switch (side) {\n        case 'top':\n            factor = -1;\n            coord = 'y';\n            dim = 'height';\n            break;\n        case 'left':\n            factor = -1;\n            coord = 'x';\n            dim = 'width';\n            break;\n        case 'right':\n            factor = 1;\n            coord = 'x';\n            dim = 'width';\n            break;\n        case 'bottom':\n        default:\n            factor = 1;\n            coord = 'y';\n            dim = 'height';\n            break;\n    }\n    // Move the points from the center of the element to outside of it.\n    sourcePoint[coord] += factor * (sourceBBox[dim] / 2 + padding[side]);\n    targetPoint[coord] += factor * (targetBBox[dim] / 2 + padding[side]);\n    // Make edge orthogonal (at least the first and last vertex).\n    if (factor * (sourcePoint[coord] - targetPoint[coord]) > 0) {\n        targetPoint[coord] = sourcePoint[coord];\n    }\n    else {\n        sourcePoint[coord] = targetPoint[coord];\n    }\n    return [sourcePoint.toJSON(), ...vertices, targetPoint.toJSON()];\n};\n//# sourceMappingURL=oneside.js.map"]},"metadata":{},"sourceType":"module"}