{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport React from 'react';\nimport { RxModel, NsModel } from './rx-model';\n/** 判断model是否Mount */\n\nconst isRefMounted = ref => {\n  return ref && ref.current && ref.current.isMounted;\n};\n/** 用于判断model是否Mount */\n\n\nexport const useIsMountedRef = () => {\n  /** 记录当前组件的加载状态 */\n  const ref = React.useRef({\n    isMounted: true\n  });\n  React.useEffect(() => {\n    return () => {\n      ref.current.isMounted = false;\n    };\n  }, []);\n  return ref;\n};\n/** 判断model是否Mount */\n\nexport const useModel = model => {\n  /** 记录当前组件的加载状态 */\n  const ref = useIsMountedRef();\n  const [state, setState] = React.useState(model.getValue());\n  React.useEffect(() => {\n    const disposeable = model.watch(val => {\n      if (isRefMounted(ref)) {\n        setState(val);\n      }\n    });\n    return () => {\n      disposeable.dispose();\n    };\n    /* eslint-disable-next-line  */\n  }, [setState]);\n  const value = state;\n  const canRender = NsModel.isValidValue(value);\n  const setValue = React.useCallback(val => model.setValue(val), [model]);\n  return [value, setValue, canRender];\n};\n/** 在组件内部新建一个model */\n\nexport const createComponentModel = initialState => {\n  /* eslint-disable-next-line  */\n  const model = React.useMemo(() => new RxModel(initialState), []);\n  /** model 和 state 绑定触发view刷新 */\n\n  /* eslint-disable-next-line  */\n\n  const [modelValue, setModelValue, canRender] = useModel(model);\n  /** unMount时dispose */\n\n  /* eslint-disable-next-line  */\n\n  React.useEffect(() => {\n    return () => {\n      model.dispose();\n    };\n  }, [model]);\n  return [modelValue, setModelValue, model, canRender];\n};\n/**\n * useModelAsync：\n * watch model的值，\n * 把model的值通过useState和组件状态关联起来\n */\n\nexport const useModelAsync = args => {\n  const {\n    getModel,\n    initialState\n  } = args;\n  /** 记录当前组件的加载状态 */\n\n  const isMountedRef = useIsMountedRef();\n  const modelRef = React.useRef();\n  /** 订阅 model */\n\n  const [state, setState] = React.useState(initialState);\n  React.useEffect(() => {\n    let d;\n    getModel().then(model => __awaiter(void 0, void 0, void 0, function* () {\n      modelRef.current = model;\n      const newState = yield model.getValidValue();\n\n      if (!isMountedRef.current.isMounted) {\n        return;\n      }\n\n      setState(newState);\n      d = model.watch(val => {\n        if (isMountedRef.current.isMounted) {\n          setState(val);\n        }\n      });\n    }));\n    return () => {\n      if (d && d.dispose) {\n        d.dispose();\n      }\n    };\n    /* eslint-disable-next-line  */\n  }, []);\n  return [state, setState, modelRef.current];\n};","map":{"version":3,"sources":["../../src/common/rx-model-hook.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport React from 'react';\nimport { RxModel, NsModel } from './rx-model';\n/** 判断model是否Mount */\nconst isRefMounted = (ref) => {\n    return ref && ref.current && ref.current.isMounted;\n};\n/** 用于判断model是否Mount */\nexport const useIsMountedRef = () => {\n    /** 记录当前组件的加载状态 */\n    const ref = React.useRef({ isMounted: true });\n    React.useEffect(() => {\n        return () => {\n            ref.current.isMounted = false;\n        };\n    }, []);\n    return ref;\n};\n/** 判断model是否Mount */\nexport const useModel = (model) => {\n    /** 记录当前组件的加载状态 */\n    const ref = useIsMountedRef();\n    const [state, setState] = React.useState(model.getValue());\n    React.useEffect(() => {\n        const disposeable = model.watch(val => {\n            if (isRefMounted(ref)) {\n                setState(val);\n            }\n        });\n        return () => {\n            disposeable.dispose();\n        };\n        /* eslint-disable-next-line  */\n    }, [setState]);\n    const value = state;\n    const canRender = NsModel.isValidValue(value);\n    const setValue = React.useCallback(val => model.setValue(val), [model]);\n    return [value, setValue, canRender];\n};\n/** 在组件内部新建一个model */\nexport const createComponentModel = (initialState) => {\n    /* eslint-disable-next-line  */\n    const model = React.useMemo(() => new RxModel(initialState), []);\n    /** model 和 state 绑定触发view刷新 */\n    /* eslint-disable-next-line  */\n    const [modelValue, setModelValue, canRender] = useModel(model);\n    /** unMount时dispose */\n    /* eslint-disable-next-line  */\n    React.useEffect(() => {\n        return () => {\n            model.dispose();\n        };\n    }, [model]);\n    return [modelValue, setModelValue, model, canRender];\n};\n/**\n * useModelAsync：\n * watch model的值，\n * 把model的值通过useState和组件状态关联起来\n */\nexport const useModelAsync = (args) => {\n    const { getModel, initialState } = args;\n    /** 记录当前组件的加载状态 */\n    const isMountedRef = useIsMountedRef();\n    const modelRef = React.useRef();\n    /** 订阅 model */\n    const [state, setState] = React.useState(initialState);\n    React.useEffect(() => {\n        let d;\n        getModel().then((model) => __awaiter(void 0, void 0, void 0, function* () {\n            modelRef.current = model;\n            const newState = yield model.getValidValue();\n            if (!isMountedRef.current.isMounted) {\n                return;\n            }\n            setState(newState);\n            d = model.watch(val => {\n                if (isMountedRef.current.isMounted) {\n                    setState(val);\n                }\n            });\n        }));\n        return () => {\n            if (d && d.dispose) {\n                d.dispose();\n            }\n        };\n        /* eslint-disable-next-line  */\n    }, []);\n    return [state, setState, modelRef.current];\n};\n//# sourceMappingURL=rx-model-hook.js.map"]},"metadata":{},"sourceType":"module"}