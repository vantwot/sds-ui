{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { Logo } from '@antv/l7-component';\nimport { createLayerContainer, createSceneContainer, SceneEventList, TYPES } from '@antv/l7-core';\nimport { ReglRendererService } from '@antv/l7-renderer';\nimport { DOM, isMini } from '@antv/l7-utils';\n\nvar Scene = function () {\n  function Scene(config) {\n    _classCallCheck(this, Scene);\n\n    _defineProperty(this, \"sceneService\", void 0);\n\n    _defineProperty(this, \"mapService\", void 0);\n\n    _defineProperty(this, \"controlService\", void 0);\n\n    _defineProperty(this, \"layerService\", void 0);\n\n    _defineProperty(this, \"iconService\", void 0);\n\n    _defineProperty(this, \"markerService\", void 0);\n\n    _defineProperty(this, \"popupService\", void 0);\n\n    _defineProperty(this, \"fontService\", void 0);\n\n    _defineProperty(this, \"interactionService\", void 0);\n\n    _defineProperty(this, \"container\", void 0);\n\n    var id = config.id,\n        map = config.map,\n        canvas = config.canvas,\n        hasBaseMap = config.hasBaseMap;\n    var sceneContainer = createSceneContainer();\n    this.container = sceneContainer;\n    map.setContainer(sceneContainer, id, canvas, hasBaseMap);\n    sceneContainer.bind(TYPES.IRendererService).to(ReglRendererService).inSingletonScope();\n    this.sceneService = sceneContainer.get(TYPES.ISceneService);\n    this.mapService = sceneContainer.get(TYPES.IMapService);\n    this.iconService = sceneContainer.get(TYPES.IIconService);\n    this.fontService = sceneContainer.get(TYPES.IFontService);\n    this.controlService = sceneContainer.get(TYPES.IControlService);\n    this.layerService = sceneContainer.get(TYPES.ILayerService);\n    this.markerService = sceneContainer.get(TYPES.IMarkerService);\n    this.interactionService = sceneContainer.get(TYPES.IInteractionService);\n    this.popupService = sceneContainer.get(TYPES.IPopupService);\n\n    if (isMini) {\n      this.sceneService.initMiniScene(config);\n    } else {\n      this.initComponent(id);\n      this.sceneService.init(config);\n      this.initControl();\n    }\n  }\n\n  _createClass(Scene, [{\n    key: \"getServiceContainer\",\n    value: function getServiceContainer() {\n      return this.container;\n    }\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return this.mapService.getSize();\n    }\n  }, {\n    key: \"getMinZoom\",\n    value: function getMinZoom() {\n      return this.mapService.getMinZoom();\n    }\n  }, {\n    key: \"getMaxZoom\",\n    value: function getMaxZoom() {\n      return this.mapService.getMaxZoom();\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return this.mapService.getType();\n    }\n  }, {\n    key: \"getMapContainer\",\n    value: function getMapContainer() {\n      return this.mapService.getMapContainer();\n    }\n  }, {\n    key: \"getMapCanvasContainer\",\n    value: function getMapCanvasContainer() {\n      return this.mapService.getMapCanvasContainer();\n    }\n  }, {\n    key: \"getMapService\",\n    value: function getMapService() {\n      return this.mapService;\n    }\n  }, {\n    key: \"exportPng\",\n    value: function exportPng(type) {\n      return this.sceneService.exportPng(type);\n    }\n  }, {\n    key: \"exportMap\",\n    value: function exportMap(type) {\n      return this.sceneService.exportPng(type);\n    }\n  }, {\n    key: \"registerRenderService\",\n    value: function registerRenderService(render) {\n      var _this = this;\n\n      if (this.sceneService.loaded) {\n        var renderSerivce = new render(this);\n        renderSerivce.init();\n      } else {\n        this.on('loaded', function () {\n          var renderSerivce = new render(_this);\n          renderSerivce.init();\n        });\n      }\n    }\n  }, {\n    key: \"map\",\n    get: function get() {\n      return this.mapService.map;\n    }\n  }, {\n    key: \"setBgColor\",\n    value: function setBgColor(color) {\n      this.mapService.setBgColor(color);\n    }\n  }, {\n    key: \"addLayer\",\n    value: function addLayer(layer) {\n      var layerContainer = createLayerContainer(this.container);\n      layer.setContainer(layerContainer, this.container);\n      this.sceneService.addLayer(layer);\n    }\n  }, {\n    key: \"getLayers\",\n    value: function getLayers() {\n      return this.layerService.getLayers();\n    }\n  }, {\n    key: \"getLayer\",\n    value: function getLayer(id) {\n      return this.layerService.getLayer(id);\n    }\n  }, {\n    key: \"getLayerByName\",\n    value: function getLayerByName(name) {\n      return this.layerService.getLayerByName(name);\n    }\n  }, {\n    key: \"removeLayer\",\n    value: function removeLayer(layer, parentLayer) {\n      this.layerService.remove(layer, parentLayer);\n    }\n  }, {\n    key: \"removeAllLayer\",\n    value: function removeAllLayer() {\n      this.layerService.removeAllLayers();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.sceneService.render();\n    }\n  }, {\n    key: \"addIconFont\",\n    value: function addIconFont(name, fontUnicode) {\n      this.fontService.addIconFont(name, fontUnicode);\n    }\n  }, {\n    key: \"addIconFonts\",\n    value: function addIconFonts(options) {\n      var _this2 = this;\n\n      options.forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            name = _ref2[0],\n            fontUnicode = _ref2[1];\n\n        _this2.fontService.addIconFont(name, fontUnicode);\n      });\n    }\n  }, {\n    key: \"addFontFace\",\n    value: function addFontFace(fontFamily, fontPath) {\n      this.sceneService.addFontFace(fontFamily, fontPath);\n    }\n  }, {\n    key: \"addImage\",\n    value: function addImage(id, img) {\n      if (!isMini) {\n        this.iconService.addImage(id, img);\n      } else {\n        this.iconService.addImageMini(id, img, this.sceneService);\n      }\n    }\n  }, {\n    key: \"hasImage\",\n    value: function hasImage(id) {\n      return this.iconService.hasImage(id);\n    }\n  }, {\n    key: \"removeImage\",\n    value: function removeImage(id) {\n      this.iconService.removeImage(id);\n    }\n  }, {\n    key: \"addIconFontGlyphs\",\n    value: function addIconFontGlyphs(fontFamily, glyphs) {\n      this.fontService.addIconGlyphs(glyphs);\n    }\n  }, {\n    key: \"addControl\",\n    value: function addControl(ctr) {\n      this.controlService.addControl(ctr, this.container);\n    }\n  }, {\n    key: \"removeControl\",\n    value: function removeControl(ctr) {\n      this.controlService.removeControl(ctr);\n    }\n  }, {\n    key: \"getControlByName\",\n    value: function getControlByName(name) {\n      return this.controlService.getControlByName(name);\n    }\n  }, {\n    key: \"addMarker\",\n    value: function addMarker(marker) {\n      this.markerService.addMarker(marker);\n    }\n  }, {\n    key: \"addMarkerLayer\",\n    value: function addMarkerLayer(layer) {\n      this.markerService.addMarkerLayer(layer);\n    }\n  }, {\n    key: \"removeMarkerLayer\",\n    value: function removeMarkerLayer(layer) {\n      this.markerService.removeMarkerLayer(layer);\n    }\n  }, {\n    key: \"removeAllMakers\",\n    value: function removeAllMakers() {\n      this.markerService.removeAllMarkers();\n    }\n  }, {\n    key: \"addPopup\",\n    value: function addPopup(popup) {\n      this.popupService.addPopup(popup);\n    }\n  }, {\n    key: \"on\",\n    value: function on(type, handle) {\n      SceneEventList.indexOf(type) === -1 ? this.mapService.on(type, handle) : this.sceneService.on(type, handle);\n    }\n  }, {\n    key: \"once\",\n    value: function once(type, handle) {\n      SceneEventList.indexOf(type) === -1 ? this.mapService.once(type, handle) : this.sceneService.once(type, handle);\n    }\n  }, {\n    key: \"off\",\n    value: function off(type, handle) {\n      SceneEventList.indexOf(type) === -1 ? this.mapService.off(type, handle) : this.sceneService.off(type, handle);\n    }\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      return this.mapService.getZoom();\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(options) {\n      return this.mapService.getCenter(options);\n    }\n  }, {\n    key: \"setCenter\",\n    value: function setCenter(center, options) {\n      return this.mapService.setCenter(center, options);\n    }\n  }, {\n    key: \"getPitch\",\n    value: function getPitch() {\n      return this.mapService.getPitch();\n    }\n  }, {\n    key: \"setPitch\",\n    value: function setPitch(pitch) {\n      return this.mapService.setPitch(pitch);\n    }\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      return this.mapService.getRotation();\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      return this.mapService.getBounds();\n    }\n  }, {\n    key: \"setRotation\",\n    value: function setRotation(rotation) {\n      this.mapService.setRotation(rotation);\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      this.mapService.zoomIn();\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      this.mapService.zoomOut();\n    }\n  }, {\n    key: \"panTo\",\n    value: function panTo(p) {\n      this.mapService.panTo(p);\n    }\n  }, {\n    key: \"panBy\",\n    value: function panBy(x, y) {\n      this.mapService.panBy(x, y);\n    }\n  }, {\n    key: \"getContainer\",\n    value: function getContainer() {\n      return this.mapService.getContainer();\n    }\n  }, {\n    key: \"setZoom\",\n    value: function setZoom(zoom) {\n      this.mapService.setZoom(zoom);\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(bound, options) {\n      var _this$sceneService$ge = this.sceneService.getSceneConfig(),\n          fitBoundsOptions = _this$sceneService$ge.fitBoundsOptions,\n          animate = _this$sceneService$ge.animate;\n\n      this.mapService.fitBounds(bound, options || _objectSpread(_objectSpread({}, fitBoundsOptions), {}, {\n        animate: animate\n      }));\n    }\n  }, {\n    key: \"setZoomAndCenter\",\n    value: function setZoomAndCenter(zoom, center) {\n      this.mapService.setZoomAndCenter(zoom, center);\n    }\n  }, {\n    key: \"setMapStyle\",\n    value: function setMapStyle(style) {\n      this.mapService.setMapStyle(style);\n    }\n  }, {\n    key: \"setMapStatus\",\n    value: function setMapStatus(options) {\n      this.mapService.setMapStatus(options);\n    }\n  }, {\n    key: \"pixelToLngLat\",\n    value: function pixelToLngLat(pixel) {\n      return this.mapService.pixelToLngLat(pixel);\n    }\n  }, {\n    key: \"lngLatToPixel\",\n    value: function lngLatToPixel(lnglat) {\n      return this.mapService.lngLatToPixel(lnglat);\n    }\n  }, {\n    key: \"containerToLngLat\",\n    value: function containerToLngLat(pixel) {\n      return this.mapService.containerToLngLat(pixel);\n    }\n  }, {\n    key: \"lngLatToContainer\",\n    value: function lngLatToContainer(lnglat) {\n      return this.mapService.lngLatToContainer(lnglat);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.sceneService.destroy();\n    }\n  }, {\n    key: \"registerPostProcessingPass\",\n    value: function registerPostProcessingPass(constructor, name) {\n      this.container.bind(TYPES.IPostProcessingPass).to(constructor).whenTargetNamed(name);\n    }\n  }, {\n    key: \"initComponent\",\n    value: function initComponent(id) {\n      this.controlService.init({\n        container: DOM.getContainer(id)\n      }, this.container);\n      this.markerService.init(this.container);\n      this.popupService.init(this.container);\n    }\n  }, {\n    key: \"initControl\",\n    value: function initControl() {\n      var _this$sceneService$ge2 = this.sceneService.getSceneConfig(),\n          logoVisible = _this$sceneService$ge2.logoVisible,\n          logoPosition = _this$sceneService$ge2.logoPosition;\n\n      if (logoVisible) {\n        this.addControl(new Logo({\n          position: logoPosition\n        }));\n      }\n    }\n  }]);\n\n  return Scene;\n}();\n\nexport { Scene };","map":{"version":3,"sources":["../src/index.ts"],"names":["Scene","id","map","canvas","hasBaseMap","config","sceneContainer","createSceneContainer","TYPES","renderSerivce","layerContainer","createLayerContainer","layer","options","name","fontUnicode","SceneEventList","fitBoundsOptions","animate","container","DOM","logoVisible","logoPosition","position"],"mappings":"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","sourcesContent":["import { Logo } from '@antv/l7-component';\nimport {\n  Bounds,\n  createLayerContainer,\n  createSceneContainer,\n  ICameraOptions,\n  IControl,\n  IControlService,\n  IFontService,\n  IIconFontGlyph,\n  IIconService,\n  IImage,\n  IInteractionService,\n  ILayer,\n  ILayerService,\n  ILngLat,\n  IMapService,\n  IMarker,\n  IMarkerLayer,\n  IMarkerService,\n  IPoint,\n  IPopup,\n  IPopupService,\n  IPostProcessingPass,\n  IRendererService,\n  ISceneConfig,\n  ISceneService,\n  IStatusOptions,\n  Point,\n  SceneEventList,\n  TYPES,\n} from '@antv/l7-core';\nimport { ReglRendererService } from '@antv/l7-renderer';\nimport { DOM, isMini } from '@antv/l7-utils';\nimport { Container } from 'inversify';\nimport ILayerManager from './ILayerManager';\nimport IMapController from './IMapController';\nimport IPostProcessingPassPluggable from './IPostProcessingPassPluggable';\n\n/**\n * 暴露 Scene API\n *\n * @example\n * import { Scene } from 'l7/scene';\n * import { PointLayer } from 'l7/layers';\n *\n * const scene = new Scene();\n * const pointLayer = new PointLayer();\n * scene.addLayer(pointLayer);\n *\n */\nclass Scene\n  implements IPostProcessingPassPluggable, IMapController, ILayerManager {\n  private sceneService: ISceneService;\n  private mapService: IMapService<unknown>;\n  private controlService: IControlService;\n  private layerService: ILayerService;\n  private iconService: IIconService;\n  private markerService: IMarkerService;\n  private popupService: IPopupService;\n  private fontService: IFontService;\n  private interactionService: IInteractionService;\n  private container: Container;\n\n  public constructor(config: ISceneConfig) {\n    const { id, map, canvas, hasBaseMap } = config;\n    // 创建场景容器\n    const sceneContainer = createSceneContainer();\n    this.container = sceneContainer;\n    // 绑定地图服务\n    map.setContainer(sceneContainer, id, canvas, hasBaseMap);\n\n    // 绑定渲染引擎服务\n    sceneContainer\n      .bind<IRendererService>(TYPES.IRendererService)\n      .to(ReglRendererService)\n      .inSingletonScope();\n\n    // 依赖注入\n    this.sceneService = sceneContainer.get<ISceneService>(TYPES.ISceneService);\n    this.mapService = sceneContainer.get<IMapService<unknown>>(\n      TYPES.IMapService,\n    );\n    this.iconService = sceneContainer.get<IIconService>(TYPES.IIconService);\n    this.fontService = sceneContainer.get<IFontService>(TYPES.IFontService);\n    this.controlService = sceneContainer.get<IControlService>(\n      TYPES.IControlService,\n    );\n    this.layerService = sceneContainer.get<ILayerService>(TYPES.ILayerService);\n\n    this.markerService = sceneContainer.get<IMarkerService>(\n      TYPES.IMarkerService,\n    );\n    this.interactionService = sceneContainer.get<IInteractionService>(\n      TYPES.IInteractionService,\n    );\n    this.popupService = sceneContainer.get<IPopupService>(TYPES.IPopupService);\n\n    if (isMini) {\n      this.sceneService.initMiniScene(config);\n    } else {\n      this.initComponent(id);\n\n      // 初始化 scene\n      this.sceneService.init(config);\n      // TODO: 初始化组件\n\n      this.initControl();\n    }\n  }\n  public getServiceContainer(): Container {\n    return this.container;\n  }\n  public getSize(): [number, number] {\n    return this.mapService.getSize();\n  }\n  public getMinZoom(): number {\n    return this.mapService.getMinZoom();\n  }\n  public getMaxZoom(): number {\n    return this.mapService.getMaxZoom();\n  }\n  public getType(): string {\n    return this.mapService.getType();\n  }\n  public getMapContainer(): HTMLElement | null {\n    return this.mapService.getMapContainer();\n  }\n  public getMapCanvasContainer(): HTMLElement {\n    return this.mapService.getMapCanvasContainer() as HTMLElement;\n  }\n\n  public getMapService(): IMapService<unknown> {\n    return this.mapService;\n  }\n  public exportPng(type?: 'png' | 'jpg'): string {\n    return this.sceneService.exportPng(type);\n  }\n\n  public exportMap(type?: 'png' | 'jpg'): string {\n    return this.sceneService.exportPng(type);\n  }\n\n  public registerRenderService(render: any) {\n    if (this.sceneService.loaded) {\n      const renderSerivce = new render(this);\n      renderSerivce.init();\n    } else {\n      this.on('loaded', () => {\n        const renderSerivce = new render(this);\n        renderSerivce.init();\n      });\n    }\n  }\n\n  public get map() {\n    return this.mapService.map;\n  }\n\n  public setBgColor(color: string) {\n    this.mapService.setBgColor(color);\n  }\n\n  // layer 管理\n  public addLayer(layer: ILayer): void {\n    // 为当前图层创建一个容器\n    // TODO: 初始化的时候设置 容器\n    const layerContainer = createLayerContainer(this.container);\n    layer.setContainer(layerContainer, this.container);\n    this.sceneService.addLayer(layer);\n  }\n\n  public getLayers(): ILayer[] {\n    return this.layerService.getLayers();\n  }\n\n  public getLayer(id: string): ILayer | undefined {\n    return this.layerService.getLayer(id);\n  }\n\n  public getLayerByName(name: string): ILayer | undefined {\n    return this.layerService.getLayerByName(name);\n  }\n\n  public removeLayer(layer: ILayer, parentLayer?: ILayer): void {\n    this.layerService.remove(layer, parentLayer);\n  }\n\n  public removeAllLayer(): void {\n    this.layerService.removeAllLayers();\n  }\n\n  public render(): void {\n    this.sceneService.render();\n  }\n\n  // asset method\n  /**\n   * 为 layer/point/text 支持 iconfont 模式支持\n   * @param fontUnicode\n   * @param name\n   */\n  public addIconFont(name: string, fontUnicode: string): void {\n    this.fontService.addIconFont(name, fontUnicode);\n  }\n\n  public addIconFonts(options: string[][]): void {\n    options.forEach(([name, fontUnicode]) => {\n      this.fontService.addIconFont(name, fontUnicode);\n    });\n  }\n  /**\n   * 用户自定义添加第三方字体\n   * @param fontFamily\n   * @param fontPath\n   */\n  public addFontFace(fontFamily: string, fontPath: string): void {\n    this.sceneService.addFontFace(fontFamily, fontPath);\n  }\n\n  public addImage(id: string, img: IImage) {\n    if (!isMini) {\n      this.iconService.addImage(id, img);\n    } else {\n      this.iconService.addImageMini(id, img, this.sceneService);\n    }\n    // this.iconService.addImage(id, img);\n  }\n\n  public hasImage(id: string) {\n    return this.iconService.hasImage(id);\n  }\n\n  public removeImage(id: string) {\n    this.iconService.removeImage(id);\n  }\n\n  public addIconFontGlyphs(fontFamily: string, glyphs: IIconFontGlyph[]) {\n    this.fontService.addIconGlyphs(glyphs);\n  }\n\n  // map control method\n  public addControl(ctr: IControl) {\n    this.controlService.addControl(ctr, this.container);\n  }\n\n  public removeControl(ctr: IControl) {\n    this.controlService.removeControl(ctr);\n  }\n\n  public getControlByName(name: string) {\n    return this.controlService.getControlByName(name);\n  }\n\n  // marker\n  public addMarker(marker: IMarker) {\n    this.markerService.addMarker(marker);\n  }\n\n  public addMarkerLayer(layer: IMarkerLayer) {\n    this.markerService.addMarkerLayer(layer);\n  }\n\n  public removeMarkerLayer(layer: IMarkerLayer) {\n    this.markerService.removeMarkerLayer(layer);\n  }\n\n  public removeAllMakers() {\n    this.markerService.removeAllMarkers();\n  }\n\n  public addPopup(popup: IPopup) {\n    this.popupService.addPopup(popup);\n  }\n\n  public on(type: string, handle: (...args: any[]) => void): void {\n    SceneEventList.indexOf(type) === -1\n      ? this.mapService.on(type, handle)\n      : this.sceneService.on(type, handle);\n  }\n\n  public once(type: string, handle: (...args: any[]) => void): void {\n    SceneEventList.indexOf(type) === -1\n      ? this.mapService.once(type, handle)\n      : this.sceneService.once(type, handle);\n  }\n\n  public off(type: string, handle: (...args: any[]) => void): void {\n    SceneEventList.indexOf(type) === -1\n      ? this.mapService.off(type, handle)\n      : this.sceneService.off(type, handle);\n  }\n\n  // implements IMapController\n\n  public getZoom(): number {\n    return this.mapService.getZoom();\n  }\n\n  public getCenter(options?: ICameraOptions): ILngLat {\n    return this.mapService.getCenter(options);\n  }\n\n  public setCenter(center: [number, number], options?: ICameraOptions) {\n    return this.mapService.setCenter(center, options);\n  }\n\n  public getPitch(): number {\n    return this.mapService.getPitch();\n  }\n\n  public setPitch(pitch: number) {\n    return this.mapService.setPitch(pitch);\n  }\n\n  public getRotation(): number {\n    return this.mapService.getRotation();\n  }\n\n  public getBounds(): Bounds {\n    return this.mapService.getBounds();\n  }\n\n  public setRotation(rotation: number): void {\n    this.mapService.setRotation(rotation);\n  }\n  public zoomIn(): void {\n    this.mapService.zoomIn();\n  }\n\n  public zoomOut(): void {\n    this.mapService.zoomOut();\n  }\n\n  public panTo(p: Point): void {\n    this.mapService.panTo(p);\n  }\n\n  public panBy(x: number, y: number): void {\n    this.mapService.panBy(x, y);\n  }\n\n  public getContainer() {\n    return this.mapService.getContainer();\n  }\n  public setZoom(zoom: number): void {\n    this.mapService.setZoom(zoom);\n  }\n  public fitBounds(bound: Bounds, options?: unknown): void {\n    const { fitBoundsOptions, animate } = this.sceneService.getSceneConfig();\n    this.mapService.fitBounds(\n      bound,\n      // 选项优先级：用户传入，覆盖animate直接配置，覆盖Scene配置项传入\n      options || {\n        ...(fitBoundsOptions as object),\n        animate,\n      },\n    );\n  }\n\n  public setZoomAndCenter(zoom: number, center: Point): void {\n    this.mapService.setZoomAndCenter(zoom, center);\n  }\n\n  public setMapStyle(style: any): void {\n    this.mapService.setMapStyle(style);\n  }\n\n  public setMapStatus(options: Partial<IStatusOptions>) {\n    this.mapService.setMapStatus(options);\n  }\n\n  // conversion Method\n  public pixelToLngLat(pixel: Point): ILngLat {\n    return this.mapService.pixelToLngLat(pixel);\n  }\n\n  public lngLatToPixel(lnglat: Point): IPoint {\n    return this.mapService.lngLatToPixel(lnglat);\n  }\n\n  public containerToLngLat(pixel: Point): ILngLat {\n    return this.mapService.containerToLngLat(pixel);\n  }\n\n  public lngLatToContainer(lnglat: Point): IPoint {\n    return this.mapService.lngLatToContainer(lnglat);\n  }\n\n  public destroy() {\n    this.sceneService.destroy();\n    // TODO: 清理其他 Service 例如 IconService\n  }\n\n  public registerPostProcessingPass(\n    constructor: new (...args: any[]) => IPostProcessingPass<unknown>,\n    name: string,\n  ) {\n    this.container\n      .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n      .to(constructor)\n      .whenTargetNamed(name);\n  }\n\n  private initComponent(id: string | HTMLDivElement) {\n    this.controlService.init(\n      {\n        container: DOM.getContainer(id),\n      },\n      this.container,\n    );\n    this.markerService.init(this.container);\n    this.popupService.init(this.container);\n  }\n\n  private initControl() {\n    const { logoVisible, logoPosition } = this.sceneService.getSceneConfig();\n    if (logoVisible) {\n      this.addControl(new Logo({ position: logoPosition }));\n    }\n  }\n  // 资源管理\n}\n\nexport { Scene };\n"]},"metadata":{},"sourceType":"module"}