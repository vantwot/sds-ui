{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nexport function join(geoData, options) {\n  var sourceField = options.sourceField,\n      targetField = options.targetField,\n      data = options.data;\n  var dataObj = {};\n  data.forEach(function (element) {\n    dataObj[element[sourceField]] = element;\n  });\n  geoData.dataArray = geoData.dataArray.map(function (item) {\n    var joinName = item[targetField];\n    return _objectSpread(_objectSpread({}, item), dataObj[joinName]);\n  });\n  return geoData;\n}","map":{"version":3,"sources":["../../src/transform/join.ts"],"names":["sourceField","targetField","data","options","dataObj","element","geoData","joinName","item"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,OAAO,SAAA,IAAA,CAAA,OAAA,EAAA,OAAA,EAA0D;AAC/D,MAAQA,WAAR,GAA2CG,OAA3C,CAAA,WAAA;AAAA,MAAqBF,WAArB,GAA2CE,OAA3C,CAAA,WAAA;AAAA,MAAkCD,IAAlC,GAA2CC,OAA3C,CAAA,IAAA;AACA,MAAMC,OAA+B,GAArC,EAAA;AACAF,EAAAA,IAAI,CAAJA,OAAAA,CAAa,UAAA,OAAA,EAAqC;AAEhDE,IAAAA,OAAO,CAACC,OAAO,CAAfD,WAAe,CAAR,CAAPA,GAAAA,OAAAA;AAFFF,GAAAA;AAIAI,EAAAA,OAAO,CAAPA,SAAAA,GAAoB,OAAO,CAAP,SAAA,CAAA,GAAA,CAAsB,UAAA,IAAA,EAA0B;AAClE,QAAMC,QAAQ,GAAGC,IAAI,CAArB,WAAqB,CAArB;AACA,WAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,IAAA,CAAA,EAEKJ,OAAO,CAFZ,QAEY,CAFZ,CAAA;AAFFE,GAAoB,CAApBA;AAOA,SAAA,OAAA;AACD","sourcesContent":["import { IParseDataItem, IParserData } from '@antv/l7-core';\n\ninterface IJoinOption {\n  sourceField: string;\n  targetField: string;\n  data: any[];\n}\n\n/**\n *\n * @param data\n * @param options\n */\nexport function join(geoData: IParserData, options: IJoinOption) {\n  const { sourceField, targetField, data } = options;\n  const dataObj: { [key: string]: any } = {};\n  data.forEach((element: { [key: string]: any }) => {\n    // 属性数据\n    dataObj[element[sourceField]] = element;\n  });\n  geoData.dataArray = geoData.dataArray.map((item: IParseDataItem) => {\n    const joinName = item[targetField];\n    return {\n      ...item,\n      ...dataObj[joinName],\n    };\n  });\n  return geoData;\n}\n"]},"metadata":{},"sourceType":"module"}