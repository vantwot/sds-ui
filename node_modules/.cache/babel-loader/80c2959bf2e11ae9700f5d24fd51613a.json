{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { registerNode, BaseGlobal as Global } from '@antv/g6-core';\nimport { deepMix } from '@antv/util'; // 带有图标的圆，可用于拓扑图中\n\nregisterNode('circle', {\n  // 自定义节点时的配置\n  options: {\n    size: Global.defaultNode.size,\n    style: {\n      x: 0,\n      y: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize,\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    // 节点上左右上下四个方向上的链接circle配置\n    linkPoints: {\n      top: false,\n      right: false,\n      bottom: false,\n      left: false,\n      // circle的大小\n      size: Global.defaultNode.linkPoints.size,\n      lineWidth: Global.defaultNode.linkPoints.lineWidth,\n      fill: Global.defaultNode.linkPoints.fill,\n      stroke: Global.defaultNode.linkPoints.stroke\n    },\n    // 节点中icon配置\n    icon: {\n      // 是否显示icon，值为 false 则不渲染icon\n      show: false,\n      // icon的地址，字符串类型\n      img: 'https://gw.alipayobjects.com/zos/bmw-prod/5d015065-8505-4e7a-baec-976f81e3c41d.svg',\n      width: 20,\n      height: 20\n    },\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'circle',\n  // 文本位置\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var _a = (this.mergeStyle || this.getOptions(cfg)).icon,\n        defaultIcon = _a === void 0 ? {} : _a;\n    var style = this.getShapeStyle(cfg);\n    var icon = deepMix({}, defaultIcon, cfg.icon);\n    var name = this.type + \"-keyShape\";\n    var keyShape = group.addShape('circle', {\n      attrs: style,\n      className: name,\n      name: name,\n      draggable: true\n    });\n    group['shapeMap'][name] = keyShape;\n    var width = icon.width,\n        height = icon.height,\n        show = icon.show,\n        text = icon.text;\n\n    if (show) {\n      var iconName = this.type + \"-icon\";\n\n      if (text) {\n        group['shapeMap'][iconName] = group.addShape('text', {\n          attrs: __assign({\n            x: 0,\n            y: 0,\n            fontSize: 12,\n            fill: '#000',\n            stroke: '#000',\n            textBaseline: 'middle',\n            textAlign: 'center'\n          }, icon),\n          className: iconName,\n          name: iconName,\n          draggable: true\n        });\n      } else {\n        group['shapeMap'][iconName] = group.addShape('image', {\n          attrs: __assign({\n            x: -width / 2,\n            y: -height / 2\n          }, icon),\n          className: iconName,\n          name: iconName,\n          draggable: true\n        });\n      }\n    }\n\n    this.drawLinkPoints(cfg, group);\n    return keyShape;\n  },\n\n  /**\n   * 绘制节点上的LinkPoints\n   * @param {Object} cfg data数据配置项\n   * @param {Group} group Group实例\n   */\n  drawLinkPoints: function drawLinkPoints(cfg, group) {\n    var linkPoints = (this.mergeStyle || this.getOptions(cfg)).linkPoints;\n    if (!linkPoints) return;\n\n    var _a = linkPoints || {},\n        top = _a.top,\n        left = _a.left,\n        right = _a.right,\n        bottom = _a.bottom,\n        markSize = _a.size,\n        markR = _a.r,\n        markStyle = __rest(_a, [\"top\", \"left\", \"right\", \"bottom\", \"size\", \"r\"]);\n\n    var size = this.getSize(cfg);\n    var r = size[0] / 2;\n\n    if (left) {\n      // left circle\n      var name_1 = 'link-point-left';\n      group['shapeMap'][name_1] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: -r,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: name_1,\n        name: name_1,\n        isAnchorPoint: true\n      });\n    }\n\n    if (right) {\n      // right circle\n      var name_2 = 'link-point-right';\n      group['shapeMap'][name_2] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: r,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: name_2,\n        name: name_2,\n        isAnchorPoint: true\n      });\n    }\n\n    if (top) {\n      // top circle\n      var name_3 = 'link-point-top';\n      group['shapeMap'][name_3] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: -r,\n          r: markSize / 2 || markR || 5\n        }),\n        className: name_3,\n        name: name_3,\n        isAnchorPoint: true\n      });\n    }\n\n    if (bottom) {\n      // bottom circle\n      var name_4 = 'link-point-bottom';\n      group['shapeMap'][name_4] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: r,\n          r: markSize / 2 || markR || 5\n        }),\n        className: name_4,\n        name: name_4,\n        isAnchorPoint: true\n      });\n    }\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = deepMix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var r = size[0] / 2;\n\n    var styles = __assign({\n      x: 0,\n      y: 0,\n      r: r\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item, updateType) {\n    var group = item.getContainer();\n    var size = this.getSize(cfg); // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n    // const strokeStyle = {\n    //   stroke: cfg.color,\n    //   r: size[0] / 2,\n    // };\n    // // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n    // const keyShape = item.get('keyShape');\n    // TODO: performance\n    // const style = deepMix({}, keyShape.attr(), strokeStyle, cfg.style);\n    // const style = deepMix({}, keyShape.attr(), cfg.style);\n\n    var style = __assign({}, cfg.style);\n\n    if (cfg.style.stroke === undefined && cfg.color) {\n      style.stroke = cfg.color;\n    }\n\n    if (cfg.style.r === undefined && !isNaN(size[0])) {\n      style.r = size[0] / 2;\n    }\n\n    this.updateShape(cfg, item, style, true, updateType); // (this as any).updateShape(cfg, item, style, true, updateType);\n\n    this.updateLinkPoints(cfg, group);\n  }\n}, 'single-node');","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/@antv/g6-element/es/nodes/circle.js"],"names":["__assign","__rest","registerNode","BaseGlobal","Global","deepMix","options","size","defaultNode","style","x","y","stroke","fill","lineWidth","labelCfg","nodeLabel","fontSize","fontFamily","windowFontFamily","linkPoints","top","right","bottom","left","icon","show","img","width","height","stateStyles","nodeStateStyles","shapeType","labelPosition","drawShape","cfg","group","_a","mergeStyle","getOptions","defaultIcon","getShapeStyle","name","type","keyShape","addShape","attrs","className","draggable","text","iconName","textBaseline","textAlign","drawLinkPoints","markSize","markR","r","markStyle","getSize","name_1","isAnchorPoint","name_2","name_3","name_4","defaultStyle","strokeStyle","color","styles","update","item","updateType","getContainer","undefined","isNaN","updateShape","updateLinkPoints"],"mappings":"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","sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport { registerNode, BaseGlobal as Global } from '@antv/g6-core';\nimport { deepMix } from '@antv/util'; // 带有图标的圆，可用于拓扑图中\n\nregisterNode('circle', {\n  // 自定义节点时的配置\n  options: {\n    size: Global.defaultNode.size,\n    style: {\n      x: 0,\n      y: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize,\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    // 节点上左右上下四个方向上的链接circle配置\n    linkPoints: {\n      top: false,\n      right: false,\n      bottom: false,\n      left: false,\n      // circle的大小\n      size: Global.defaultNode.linkPoints.size,\n      lineWidth: Global.defaultNode.linkPoints.lineWidth,\n      fill: Global.defaultNode.linkPoints.fill,\n      stroke: Global.defaultNode.linkPoints.stroke\n    },\n    // 节点中icon配置\n    icon: {\n      // 是否显示icon，值为 false 则不渲染icon\n      show: false,\n      // icon的地址，字符串类型\n      img: 'https://gw.alipayobjects.com/zos/bmw-prod/5d015065-8505-4e7a-baec-976f81e3c41d.svg',\n      width: 20,\n      height: 20\n    },\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'circle',\n  // 文本位置\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var _a = (this.mergeStyle || this.getOptions(cfg)).icon,\n        defaultIcon = _a === void 0 ? {} : _a;\n    var style = this.getShapeStyle(cfg);\n    var icon = deepMix({}, defaultIcon, cfg.icon);\n    var name = this.type + \"-keyShape\";\n    var keyShape = group.addShape('circle', {\n      attrs: style,\n      className: name,\n      name: name,\n      draggable: true\n    });\n    group['shapeMap'][name] = keyShape;\n    var width = icon.width,\n        height = icon.height,\n        show = icon.show,\n        text = icon.text;\n\n    if (show) {\n      var iconName = this.type + \"-icon\";\n\n      if (text) {\n        group['shapeMap'][iconName] = group.addShape('text', {\n          attrs: __assign({\n            x: 0,\n            y: 0,\n            fontSize: 12,\n            fill: '#000',\n            stroke: '#000',\n            textBaseline: 'middle',\n            textAlign: 'center'\n          }, icon),\n          className: iconName,\n          name: iconName,\n          draggable: true\n        });\n      } else {\n        group['shapeMap'][iconName] = group.addShape('image', {\n          attrs: __assign({\n            x: -width / 2,\n            y: -height / 2\n          }, icon),\n          className: iconName,\n          name: iconName,\n          draggable: true\n        });\n      }\n    }\n\n    this.drawLinkPoints(cfg, group);\n    return keyShape;\n  },\n\n  /**\n   * 绘制节点上的LinkPoints\n   * @param {Object} cfg data数据配置项\n   * @param {Group} group Group实例\n   */\n  drawLinkPoints: function drawLinkPoints(cfg, group) {\n    var linkPoints = (this.mergeStyle || this.getOptions(cfg)).linkPoints;\n    if (!linkPoints) return;\n\n    var _a = linkPoints || {},\n        top = _a.top,\n        left = _a.left,\n        right = _a.right,\n        bottom = _a.bottom,\n        markSize = _a.size,\n        markR = _a.r,\n        markStyle = __rest(_a, [\"top\", \"left\", \"right\", \"bottom\", \"size\", \"r\"]);\n\n    var size = this.getSize(cfg);\n    var r = size[0] / 2;\n\n    if (left) {\n      // left circle\n      var name_1 = 'link-point-left';\n      group['shapeMap'][name_1] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: -r,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: name_1,\n        name: name_1,\n        isAnchorPoint: true\n      });\n    }\n\n    if (right) {\n      // right circle\n      var name_2 = 'link-point-right';\n      group['shapeMap'][name_2] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: r,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: name_2,\n        name: name_2,\n        isAnchorPoint: true\n      });\n    }\n\n    if (top) {\n      // top circle\n      var name_3 = 'link-point-top';\n      group['shapeMap'][name_3] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: -r,\n          r: markSize / 2 || markR || 5\n        }),\n        className: name_3,\n        name: name_3,\n        isAnchorPoint: true\n      });\n    }\n\n    if (bottom) {\n      // bottom circle\n      var name_4 = 'link-point-bottom';\n      group['shapeMap'][name_4] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: r,\n          r: markSize / 2 || markR || 5\n        }),\n        className: name_4,\n        name: name_4,\n        isAnchorPoint: true\n      });\n    }\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = deepMix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var r = size[0] / 2;\n\n    var styles = __assign({\n      x: 0,\n      y: 0,\n      r: r\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item, updateType) {\n    var group = item.getContainer();\n    var size = this.getSize(cfg); // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n    // const strokeStyle = {\n    //   stroke: cfg.color,\n    //   r: size[0] / 2,\n    // };\n    // // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n    // const keyShape = item.get('keyShape');\n    // TODO: performance\n    // const style = deepMix({}, keyShape.attr(), strokeStyle, cfg.style);\n    // const style = deepMix({}, keyShape.attr(), cfg.style);\n\n    var style = __assign({}, cfg.style);\n\n    if (cfg.style.stroke === undefined && cfg.color) {\n      style.stroke = cfg.color;\n    }\n\n    if (cfg.style.r === undefined && !isNaN(size[0])) {\n      style.r = size[0] / 2;\n    }\n\n    this.updateShape(cfg, item, style, true, updateType); // (this as any).updateShape(cfg, item, style, true, updateType);\n\n    this.updateLinkPoints(cfg, group);\n  }\n}, 'single-node');"]},"metadata":{},"sourceType":"module"}