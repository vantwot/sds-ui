{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { gl } from '@antv/l7-core';\nimport BaseModel from '../../core/BaseModel';\nimport { RasterImageTriangulation } from '../../core/triangulation';\nvar ImageTileFrag = \"precision mediump float;\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n\";\nvar ImageTileVert = \"precision highp float;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\nattribute vec3 a_Position;\\n#pragma include \\\"projection\\\"\\nvoid main() {\\n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\\n   if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n      gl_Position = u_Mvp * (vec4(project_pos.xy,0., 1.0));\\n   } else {\\n      gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy,0., 1.0));\\n   }\\n}\\n\";\nimport Tile from '../utils/Tile';\n\nvar ImageTileModel = function (_BaseModel) {\n  _inherits(ImageTileModel, _BaseModel);\n\n  var _super = _createSuper(ImageTileModel);\n\n  function ImageTileModel() {\n    var _this;\n\n    _classCallCheck(this, ImageTileModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"tileLayer\", void 0);\n\n    return _this;\n  }\n\n  _createClass(ImageTileModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      return {};\n    }\n  }, {\n    key: \"tile\",\n    value: function tile() {\n      var _this$mapService$getB = this.mapService.getBounds(),\n          _this$mapService$getB2 = _slicedToArray(_this$mapService$getB, 2),\n          WS = _this$mapService$getB2[0],\n          EN = _this$mapService$getB2[1];\n\n      var NE = {\n        lng: EN[0],\n        lat: EN[1]\n      };\n      var SW = {\n        lng: WS[0],\n        lat: WS[1]\n      };\n      this.tileLayer.calCurrentTiles({\n        NE: NE,\n        SW: SW,\n        tileCenter: this.mapService.getCenter(),\n        currentZoom: this.mapService.getZoom(),\n        minSourceZoom: this.mapService.getMinZoom(),\n        minZoom: this.mapService.getMinZoom(),\n        maxZoom: this.mapService.getMaxZoom()\n      });\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      var _this2 = this;\n\n      this.layer.zIndex = -999;\n\n      var _ref = this.layer.getLayerConfig(),\n          _ref$resolution = _ref.resolution,\n          resolution = _ref$resolution === void 0 ? 'low' : _ref$resolution,\n          _ref$maxSourceZoom = _ref.maxSourceZoom,\n          maxSourceZoom = _ref$maxSourceZoom === void 0 ? 17 : _ref$maxSourceZoom;\n\n      var source = this.layer.getSource();\n\n      if (source.data.tileurl) {\n        this.tileLayer = new Tile({\n          url: source.data.tileurl,\n          layerService: this.layerService,\n          layer: this.layer,\n          resolution: resolution,\n          maxSourceZoom: maxSourceZoom,\n          crstype: 'epsg3857'\n        });\n        this.tile();\n        var t = new Date().getTime();\n        this.mapService.on('mapchange', function () {\n          var newT = new Date().getTime();\n          var cutT = newT - t;\n          t = newT;\n\n          if (cutT < 16) {\n            return;\n          }\n\n          if (_this2.mapService.getZoom() < 2.0) {\n            return;\n          }\n\n          _this2.tile();\n        });\n      }\n\n      return [this.layer.buildLayerModel({\n        moduleName: 'ImageTileLayer',\n        vertexShader: ImageTileVert,\n        fragmentShader: ImageTileFrag,\n        triangulation: RasterImageTriangulation,\n        primitive: gl.TRIANGLES,\n        depth: {\n          enable: false\n        },\n        blend: this.getBlend()\n      })];\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      this.tileLayer.removeTiles();\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      return this.initModels();\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      return;\n    }\n  }]);\n\n  return ImageTileModel;\n}(BaseModel);\n\nexport { ImageTileModel as default };","map":{"version":3,"sources":["../../../src/imagetile/models/imagetile.ts"],"names":["ImageTileModel","BaseModel","WS","EN","NE","lng","lat","SW","tileCenter","currentZoom","minSourceZoom","minZoom","maxZoom","resolution","maxSourceZoom","source","url","layerService","layer","crstype","t","newT","cutT","moduleName","vertexShader","fragmentShader","triangulation","primitive","gl","depth","enable","blend"],"mappings":"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","sourcesContent":["import { gl, IModelUniform } from '@antv/l7-core';\nimport BaseModel from '../../core/BaseModel';\nimport { RasterImageTriangulation } from '../../core/triangulation';\nimport ImageTileFrag from './shaders/imagetile_frag.glsl';\nimport ImageTileVert from './shaders/imagetile_vert.glsl';\n\nimport Tile from '../utils/Tile';\n\ninterface IImageLayerStyleOptions {\n  resolution: string;\n  maxSourceZoom: number;\n}\n\nexport default class ImageTileModel extends BaseModel {\n  public tileLayer: any;\n  public getUninforms(): IModelUniform {\n    return {};\n  }\n\n  // 瓦片方法\n  public tile() {\n    const [WS, EN] = this.mapService.getBounds();\n    const NE = { lng: EN[0], lat: EN[1] };\n    const SW = { lng: WS[0], lat: WS[1] };\n    this.tileLayer.calCurrentTiles({\n      NE,\n      SW,\n      tileCenter: this.mapService.getCenter(),\n      currentZoom: this.mapService.getZoom(),\n      minSourceZoom: this.mapService.getMinZoom(),\n      minZoom: this.mapService.getMinZoom(),\n      maxZoom: this.mapService.getMaxZoom(),\n    });\n  }\n\n  public initModels() {\n    // TODO: 瓦片组件默认在最下层\n    this.layer.zIndex = -999;\n    const {\n      resolution = 'low',\n      maxSourceZoom = 17,\n    } = this.layer.getLayerConfig() as IImageLayerStyleOptions;\n    const source = this.layer.getSource();\n    // 当存在 url 的时候生效\n    if (source.data.tileurl) {\n      this.tileLayer = new Tile({\n        url: source.data.tileurl,\n        layerService: this.layerService,\n        layer: this.layer,\n        resolution,\n        maxSourceZoom,\n        // Tip: 当前为 default\n        crstype: 'epsg3857',\n      });\n\n      // TODO: 首次加载的时候请求瓦片\n      this.tile();\n\n      let t = new Date().getTime();\n      this.mapService.on('mapchange', () => {\n        const newT = new Date().getTime();\n        const cutT = newT - t;\n        t = newT;\n        // TODO: 限制刷新频率\n        if (cutT < 16) {\n          return;\n        }\n        // TODO: 瓦片地图最大层级为 2\n        if (this.mapService.getZoom() < 2.0) {\n          return;\n        }\n        this.tile();\n      });\n    }\n\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'ImageTileLayer',\n        vertexShader: ImageTileVert,\n        fragmentShader: ImageTileFrag,\n        triangulation: RasterImageTriangulation,\n        primitive: gl.TRIANGLES,\n        depth: { enable: false },\n        blend: this.getBlend(),\n      }),\n    ];\n  }\n\n  public clearModels() {\n    this.tileLayer.removeTiles();\n  }\n\n  public buildModels() {\n    return this.initModels();\n  }\n\n  protected registerBuiltinAttributes() {\n    return;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}