{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { mat4, vec4 } from 'gl-matrix';\nimport GridIndex from './grid-index';\n\nvar CollisionIndex = function () {\n  function CollisionIndex(width, height) {\n    _classCallCheck(this, CollisionIndex);\n\n    _defineProperty(this, \"width\", void 0);\n\n    _defineProperty(this, \"height\", void 0);\n\n    _defineProperty(this, \"grid\", void 0);\n\n    _defineProperty(this, \"viewportPadding\", 100);\n\n    _defineProperty(this, \"screenRightBoundary\", void 0);\n\n    _defineProperty(this, \"screenBottomBoundary\", void 0);\n\n    _defineProperty(this, \"gridRightBoundary\", void 0);\n\n    _defineProperty(this, \"gridBottomBoundary\", void 0);\n\n    this.width = width;\n    this.height = height;\n    this.viewportPadding = Math.max(width, height);\n    this.grid = new GridIndex(width + this.viewportPadding, height + this.viewportPadding, 25);\n    this.screenRightBoundary = width + this.viewportPadding;\n    this.screenBottomBoundary = height + this.viewportPadding;\n    this.gridRightBoundary = width + 2 * this.viewportPadding;\n    this.gridBottomBoundary = height + 2 * this.viewportPadding;\n  }\n\n  _createClass(CollisionIndex, [{\n    key: \"placeCollisionBox\",\n    value: function placeCollisionBox(collisionBox) {\n      var tlX = collisionBox.x1 + collisionBox.anchorPointX + this.viewportPadding;\n      var tlY = collisionBox.y1 + collisionBox.anchorPointY + this.viewportPadding;\n      var brX = collisionBox.x2 + collisionBox.anchorPointX + this.viewportPadding;\n      var brY = collisionBox.y2 + collisionBox.anchorPointY + this.viewportPadding;\n\n      if (!this.isInsideGrid(tlX, tlY, brX, brY) || this.grid.hitTest(tlX, tlY, brX, brY)) {\n        return {\n          box: []\n        };\n      }\n\n      return {\n        box: [tlX, tlY, brX, brY]\n      };\n    }\n  }, {\n    key: \"insertCollisionBox\",\n    value: function insertCollisionBox(box, featureIndex) {\n      var key = {\n        featureIndex: featureIndex\n      };\n      this.grid.insert(key, box[0], box[1], box[2], box[3]);\n    }\n  }, {\n    key: \"project\",\n    value: function project(mvpMatrix, x, y) {\n      var point = vec4.fromValues(x, y, 0, 1);\n      var out = vec4.create();\n      var mat = mat4.fromValues.apply(mat4, _toConsumableArray(mvpMatrix));\n      vec4.transformMat4(out, point, mat);\n      return {\n        x: (out[0] / out[3] + 1) / 2 * this.width + this.viewportPadding,\n        y: (-out[1] / out[3] + 1) / 2 * this.height + this.viewportPadding\n      };\n    }\n  }, {\n    key: \"isInsideGrid\",\n    value: function isInsideGrid(x1, y1, x2, y2) {\n      return x2 >= 0 && x1 < this.gridRightBoundary && y2 >= 0 && y1 < this.gridBottomBoundary;\n    }\n  }]);\n\n  return CollisionIndex;\n}();\n\nexport { CollisionIndex as default };","map":{"version":3,"sources":["../../src/utils/collision-index.ts"],"names":["CollisionIndex","Math","width","height","tlX","collisionBox","tlY","brX","brY","box","key","featureIndex","point","vec4","out","mat","mat4","x","y","viewportPadding","x2","x1","y2","y1"],"mappings":"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","sourcesContent":["export interface ICollisionBox {\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n  anchorPointX: number;\n  anchorPointY: number;\n}\n// @mapbox/grid-index 并没有类似 hitTest 的单纯获取碰撞检测结果的方法，query 将导致计算大量多余的包围盒结果，因此使用改良版\nimport { mat4, vec4 } from 'gl-matrix';\nimport GridIndex from './grid-index';\n/**\n * 基于网格实现文本避让，大幅提升包围盒碰撞检测效率\n * @see https://zhuanlan.zhihu.com/p/74373214\n */\nexport default class CollisionIndex {\n  private width: number;\n  private height: number;\n  private grid: GridIndex;\n  private viewportPadding: number = 100;\n  private screenRightBoundary: number;\n  private screenBottomBoundary: number;\n  private gridRightBoundary: number;\n  private gridBottomBoundary: number;\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n    this.viewportPadding = Math.max(width, height);\n    // 创建网格索引\n    this.grid = new GridIndex(\n      width + this.viewportPadding,\n      height + this.viewportPadding,\n      25,\n    );\n\n    this.screenRightBoundary = width + this.viewportPadding;\n    this.screenBottomBoundary = height + this.viewportPadding;\n    this.gridRightBoundary = width + 2 * this.viewportPadding;\n    this.gridBottomBoundary = height + 2 * this.viewportPadding;\n  }\n\n  public placeCollisionBox(collisionBox: ICollisionBox) {\n    // const projectedPoint = this.project(\n    //   mvpMatrix,\n    //   collisionBox.anchorPointX,\n    //   collisionBox.anchorPointY,\n    // );\n\n    const tlX =\n      collisionBox.x1 + collisionBox.anchorPointX + this.viewportPadding;\n    const tlY =\n      collisionBox.y1 + collisionBox.anchorPointY + this.viewportPadding;\n    const brX =\n      collisionBox.x2 + collisionBox.anchorPointX + this.viewportPadding;\n    const brY =\n      collisionBox.y2 + collisionBox.anchorPointY + this.viewportPadding;\n\n    if (\n      !this.isInsideGrid(tlX, tlY, brX, brY) ||\n      this.grid.hitTest(tlX, tlY, brX, brY)\n    ) {\n      return {\n        box: [],\n      };\n    }\n\n    return {\n      box: [tlX, tlY, brX, brY],\n    };\n  }\n\n  public insertCollisionBox(box: number[], featureIndex: number) {\n    const key = { featureIndex };\n    this.grid.insert(key, box[0], box[1], box[2], box[3]);\n  }\n\n  /**\n   * 后续碰撞检测都需要投影到 viewport 坐标系\n   * @param {THREE.Matrix4} mvpMatrix mvp矩阵\n   * @param {number} x P20 平面坐标X\n   * @param {number} y P20 平面坐标Y\n   * @return {Point} projectedPoint\n   */\n  public project(mvpMatrix: number[], x: number, y: number) {\n    const point = vec4.fromValues(x, y, 0, 1);\n    const out = vec4.create();\n    // @ts-ignore\n    const mat = mat4.fromValues(...mvpMatrix);\n    vec4.transformMat4(out, point, mat);\n    // GL 坐标系[-1, 1] -> viewport 坐标系[width, height]\n    return {\n      x: ((out[0] / out[3] + 1) / 2) * this.width + this.viewportPadding,\n      y: ((-out[1] / out[3] + 1) / 2) * this.height + this.viewportPadding,\n    };\n  }\n\n  /**\n   * 判断包围盒是否在整个网格内，需要加上 buffer\n   * @param {number} x1 x1\n   * @param {number} y1 y1\n   * @param {number} x2 x2\n   * @param {number} y2 y2\n   * @return {Point} isInside\n   */\n  public isInsideGrid(x1: number, y1: number, x2: number, y2: number) {\n    return (\n      x2 >= 0 &&\n      x1 < this.gridRightBoundary &&\n      y2 >= 0 &&\n      y1 < this.gridBottomBoundary\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}