{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { gl } from '@antv/l7-core';\nimport { colorSpaceMap, dataTypeMap, filterMap, formatMap, mipmapMap, wrapModeMap } from './constants';\n\nvar ReglTexture2D = function () {\n  function ReglTexture2D(reGl, options) {\n    _classCallCheck(this, ReglTexture2D);\n\n    _defineProperty(this, \"texture\", void 0);\n\n    _defineProperty(this, \"width\", void 0);\n\n    _defineProperty(this, \"height\", void 0);\n\n    var data = options.data,\n        _options$type = options.type,\n        type = _options$type === void 0 ? gl.UNSIGNED_BYTE : _options$type,\n        width = options.width,\n        height = options.height,\n        _options$flipY = options.flipY,\n        flipY = _options$flipY === void 0 ? false : _options$flipY,\n        _options$format = options.format,\n        format = _options$format === void 0 ? gl.RGBA : _options$format,\n        _options$mipmap = options.mipmap,\n        mipmap = _options$mipmap === void 0 ? false : _options$mipmap,\n        _options$wrapS = options.wrapS,\n        wrapS = _options$wrapS === void 0 ? gl.CLAMP_TO_EDGE : _options$wrapS,\n        _options$wrapT = options.wrapT,\n        wrapT = _options$wrapT === void 0 ? gl.CLAMP_TO_EDGE : _options$wrapT,\n        _options$aniso = options.aniso,\n        aniso = _options$aniso === void 0 ? 0 : _options$aniso,\n        _options$alignment = options.alignment,\n        alignment = _options$alignment === void 0 ? 1 : _options$alignment,\n        _options$premultiplyA = options.premultiplyAlpha,\n        premultiplyAlpha = _options$premultiplyA === void 0 ? false : _options$premultiplyA,\n        _options$mag = options.mag,\n        mag = _options$mag === void 0 ? gl.NEAREST : _options$mag,\n        _options$min = options.min,\n        min = _options$min === void 0 ? gl.NEAREST : _options$min,\n        _options$colorSpace = options.colorSpace,\n        colorSpace = _options$colorSpace === void 0 ? gl.BROWSER_DEFAULT_WEBGL : _options$colorSpace;\n    this.width = width;\n    this.height = height;\n    var textureOptions = {\n      width: width,\n      height: height,\n      type: dataTypeMap[type],\n      format: formatMap[format],\n      wrapS: wrapModeMap[wrapS],\n      wrapT: wrapModeMap[wrapT],\n      mag: filterMap[mag],\n      min: filterMap[min],\n      alignment: alignment,\n      flipY: flipY,\n      colorSpace: colorSpaceMap[colorSpace],\n      premultiplyAlpha: premultiplyAlpha,\n      aniso: aniso\n    };\n\n    if (data) {\n      textureOptions.data = data;\n    }\n\n    if (typeof mipmap === 'number') {\n      textureOptions.mipmap = mipmapMap[mipmap];\n    } else if (typeof mipmap === 'boolean') {\n      textureOptions.mipmap = mipmap;\n    }\n\n    this.texture = reGl.texture(textureOptions);\n  }\n\n  _createClass(ReglTexture2D, [{\n    key: \"get\",\n    value: function get() {\n      return this.texture;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.texture(props);\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      this.texture._texture.bind();\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(_ref) {\n      var width = _ref.width,\n          height = _ref.height;\n      this.texture.resize(width, height);\n      this.width = width;\n      this.height = height;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.texture.destroy();\n    }\n  }]);\n\n  return ReglTexture2D;\n}();\n\nexport { ReglTexture2D as default };","map":{"version":3,"sources":["../../src/regl/ReglTexture2D.ts"],"names":["ReglTexture2D","data","type","gl","width","height","flipY","format","mipmap","wrapS","wrapT","aniso","alignment","premultiplyAlpha","mag","min","colorSpace","options","textureOptions","dataTypeMap","formatMap","wrapModeMap","filterMap","colorSpaceMap","mipmapMap","reGl","props"],"mappings":"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","sourcesContent":["import { gl, ITexture2D, ITexture2DInitializationOptions } from '@antv/l7-core';\nimport regl from 'l7regl';\nimport {\n  colorSpaceMap,\n  dataTypeMap,\n  filterMap,\n  formatMap,\n  mipmapMap,\n  wrapModeMap,\n} from './constants';\n\n/**\n * adaptor for regl.Buffer\n * @see https://github.com/regl-project/regl/blob/gh-pages/API.md#buffers\n */\nexport default class ReglTexture2D implements ITexture2D {\n  private texture: regl.Texture2D;\n  private width: number;\n  private height: number;\n\n  constructor(reGl: regl.Regl, options: ITexture2DInitializationOptions) {\n    const {\n      data,\n      type = gl.UNSIGNED_BYTE,\n      width,\n      height,\n      flipY = false,\n      format = gl.RGBA,\n      mipmap = false,\n      wrapS = gl.CLAMP_TO_EDGE,\n      wrapT = gl.CLAMP_TO_EDGE,\n      aniso = 0,\n      alignment = 1,\n      premultiplyAlpha = false,\n      mag = gl.NEAREST,\n      min = gl.NEAREST,\n      colorSpace = gl.BROWSER_DEFAULT_WEBGL,\n    } = options;\n    this.width = width;\n    this.height = height;\n\n    const textureOptions: regl.Texture2DOptions = {\n      width,\n      height,\n      // @ts-ignore\n      type: dataTypeMap[type],\n      format: formatMap[format],\n      wrapS: wrapModeMap[wrapS],\n      wrapT: wrapModeMap[wrapT],\n      // @ts-ignore\n      mag: filterMap[mag],\n      min: filterMap[min],\n      alignment,\n      flipY,\n      colorSpace: colorSpaceMap[colorSpace],\n      premultiplyAlpha,\n      aniso,\n    };\n\n    if (data) {\n      textureOptions.data = data;\n    }\n\n    if (typeof mipmap === 'number') {\n      textureOptions.mipmap = mipmapMap[mipmap];\n    } else if (typeof mipmap === 'boolean') {\n      textureOptions.mipmap = mipmap;\n    }\n\n    this.texture = reGl.texture(textureOptions);\n  }\n\n  public get() {\n    return this.texture;\n  }\n  public update(props: regl.Texture2DOptions = {}) {\n    this.texture(props);\n  }\n\n  public bind() {\n    // @ts-ignore\n    this.texture._texture.bind();\n  }\n\n  public resize({ width, height }: { width: number; height: number }): void {\n    this.texture.resize(width, height);\n    this.width = width;\n    this.height = height;\n  }\n\n  public destroy() {\n    this.texture.destroy();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}