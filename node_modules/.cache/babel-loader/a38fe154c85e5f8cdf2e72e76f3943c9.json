{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Dom } from '../../util';\nimport { Point } from '../../geometry';\nimport { ToolsView } from '../../view/tool';\n\nclass Arrowhead extends ToolsView.ToolItem {\n  get type() {\n    return this.options.type;\n  }\n\n  get ratio() {\n    return this.options.ratio;\n  }\n\n  init() {\n    if (this.options.attrs) {\n      const _a = this.options.attrs,\n            {\n        class: className\n      } = _a,\n            attrs = __rest(_a, [\"class\"]);\n\n      this.setAttrs(attrs, this.container);\n\n      if (className) {\n        Dom.addClass(this.container, className);\n      }\n    }\n  }\n\n  onRender() {\n    Dom.addClass(this.container, this.prefixClassName(`edge-tool-${this.type}-arrowhead`));\n    this.update();\n  }\n\n  update() {\n    const ratio = this.ratio;\n    const edgeView = this.cellView;\n    const tangent = edgeView.getTangentAtRatio(ratio);\n    const position = tangent ? tangent.start : edgeView.getPointAtRatio(ratio);\n    const angle = tangent && tangent.vector().vectorAngle(new Point(1, 0)) || 0;\n\n    if (!position) {\n      return this;\n    }\n\n    const matrix = Dom.createSVGMatrix().translate(position.x, position.y).rotate(angle);\n    Dom.transform(this.container, matrix, {\n      absolute: true\n    });\n    return this;\n  }\n\n  onMouseDown(evt) {\n    if (this.guard(evt)) {\n      return;\n    }\n\n    evt.stopPropagation();\n    evt.preventDefault();\n    const edgeView = this.cellView;\n\n    if (edgeView.can('arrowheadMovable')) {\n      edgeView.cell.startBatch('move-arrowhead', {\n        ui: true,\n        toolId: this.cid\n      });\n      const coords = this.graph.snapToGrid(evt.clientX, evt.clientY);\n      const data = edgeView.prepareArrowheadDragging(this.type, {\n        x: coords.x,\n        y: coords.y,\n        options: {\n          toolId: this.cid\n        }\n      });\n      this.cellView.setEventData(evt, data);\n      this.delegateDocumentEvents(this.options.documentEvents, evt.data);\n      edgeView.graph.view.undelegateEvents();\n      this.container.style.pointerEvents = 'none';\n    }\n\n    this.focus();\n  }\n\n  onMouseMove(evt) {\n    const e = this.normalizeEvent(evt);\n    const coords = this.graph.snapToGrid(e.clientX, e.clientY);\n    this.cellView.onMouseMove(e, coords.x, coords.y);\n    this.update();\n  }\n\n  onMouseUp(evt) {\n    this.undelegateDocumentEvents();\n    const e = this.normalizeEvent(evt);\n    const edgeView = this.cellView;\n    const coords = this.graph.snapToGrid(e.clientX, e.clientY);\n    edgeView.onMouseUp(e, coords.x, coords.y);\n    this.graph.view.delegateEvents();\n    this.blur();\n    this.container.style.pointerEvents = '';\n    edgeView.cell.stopBatch('move-arrowhead', {\n      ui: true,\n      toolId: this.cid\n    });\n  }\n\n}\n\n(function (Arrowhead) {\n  Arrowhead.config({\n    tagName: 'path',\n    isSVGElement: true,\n    events: {\n      mousedown: 'onMouseDown',\n      touchstart: 'onMouseDown'\n    },\n    documentEvents: {\n      mousemove: 'onMouseMove',\n      touchmove: 'onMouseMove',\n      mouseup: 'onMouseUp',\n      touchend: 'onMouseUp',\n      touchcancel: 'onMouseUp'\n    }\n  });\n})(Arrowhead || (Arrowhead = {}));\n\nexport const SourceArrowhead = Arrowhead.define({\n  name: 'source-arrowhead',\n  type: 'source',\n  ratio: 0,\n  attrs: {\n    d: 'M 10 -8 -10 0 10 8 Z',\n    fill: '#333',\n    stroke: '#fff',\n    'stroke-width': 2,\n    cursor: 'move'\n  }\n});\nexport const TargetArrowhead = Arrowhead.define({\n  name: 'target-arrowhead',\n  type: 'target',\n  ratio: 1,\n  attrs: {\n    d: 'M -10 -8 10 0 -10 8 Z',\n    fill: '#333',\n    stroke: '#fff',\n    'stroke-width': 2,\n    cursor: 'move'\n  }\n});","map":{"version":3,"sources":["../../../src/registry/tool/arrowhead.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { Dom } from '../../util';\nimport { Point } from '../../geometry';\nimport { ToolsView } from '../../view/tool';\nclass Arrowhead extends ToolsView.ToolItem {\n    get type() {\n        return this.options.type;\n    }\n    get ratio() {\n        return this.options.ratio;\n    }\n    init() {\n        if (this.options.attrs) {\n            const _a = this.options.attrs, { class: className } = _a, attrs = __rest(_a, [\"class\"]);\n            this.setAttrs(attrs, this.container);\n            if (className) {\n                Dom.addClass(this.container, className);\n            }\n        }\n    }\n    onRender() {\n        Dom.addClass(this.container, this.prefixClassName(`edge-tool-${this.type}-arrowhead`));\n        this.update();\n    }\n    update() {\n        const ratio = this.ratio;\n        const edgeView = this.cellView;\n        const tangent = edgeView.getTangentAtRatio(ratio);\n        const position = tangent ? tangent.start : edgeView.getPointAtRatio(ratio);\n        const angle = (tangent && tangent.vector().vectorAngle(new Point(1, 0))) || 0;\n        if (!position) {\n            return this;\n        }\n        const matrix = Dom.createSVGMatrix()\n            .translate(position.x, position.y)\n            .rotate(angle);\n        Dom.transform(this.container, matrix, { absolute: true });\n        return this;\n    }\n    onMouseDown(evt) {\n        if (this.guard(evt)) {\n            return;\n        }\n        evt.stopPropagation();\n        evt.preventDefault();\n        const edgeView = this.cellView;\n        if (edgeView.can('arrowheadMovable')) {\n            edgeView.cell.startBatch('move-arrowhead', {\n                ui: true,\n                toolId: this.cid,\n            });\n            const coords = this.graph.snapToGrid(evt.clientX, evt.clientY);\n            const data = edgeView.prepareArrowheadDragging(this.type, {\n                x: coords.x,\n                y: coords.y,\n                options: {\n                    toolId: this.cid,\n                },\n            });\n            this.cellView.setEventData(evt, data);\n            this.delegateDocumentEvents(this.options.documentEvents, evt.data);\n            edgeView.graph.view.undelegateEvents();\n            this.container.style.pointerEvents = 'none';\n        }\n        this.focus();\n    }\n    onMouseMove(evt) {\n        const e = this.normalizeEvent(evt);\n        const coords = this.graph.snapToGrid(e.clientX, e.clientY);\n        this.cellView.onMouseMove(e, coords.x, coords.y);\n        this.update();\n    }\n    onMouseUp(evt) {\n        this.undelegateDocumentEvents();\n        const e = this.normalizeEvent(evt);\n        const edgeView = this.cellView;\n        const coords = this.graph.snapToGrid(e.clientX, e.clientY);\n        edgeView.onMouseUp(e, coords.x, coords.y);\n        this.graph.view.delegateEvents();\n        this.blur();\n        this.container.style.pointerEvents = '';\n        edgeView.cell.stopBatch('move-arrowhead', {\n            ui: true,\n            toolId: this.cid,\n        });\n    }\n}\n(function (Arrowhead) {\n    Arrowhead.config({\n        tagName: 'path',\n        isSVGElement: true,\n        events: {\n            mousedown: 'onMouseDown',\n            touchstart: 'onMouseDown',\n        },\n        documentEvents: {\n            mousemove: 'onMouseMove',\n            touchmove: 'onMouseMove',\n            mouseup: 'onMouseUp',\n            touchend: 'onMouseUp',\n            touchcancel: 'onMouseUp',\n        },\n    });\n})(Arrowhead || (Arrowhead = {}));\nexport const SourceArrowhead = Arrowhead.define({\n    name: 'source-arrowhead',\n    type: 'source',\n    ratio: 0,\n    attrs: {\n        d: 'M 10 -8 -10 0 10 8 Z',\n        fill: '#333',\n        stroke: '#fff',\n        'stroke-width': 2,\n        cursor: 'move',\n    },\n});\nexport const TargetArrowhead = Arrowhead.define({\n    name: 'target-arrowhead',\n    type: 'target',\n    ratio: 1,\n    attrs: {\n        d: 'M -10 -8 10 0 -10 8 Z',\n        fill: '#333',\n        stroke: '#fff',\n        'stroke-width': 2,\n        cursor: 'move',\n    },\n});\n//# sourceMappingURL=arrowhead.js.map"]},"metadata":{},"sourceType":"module"}