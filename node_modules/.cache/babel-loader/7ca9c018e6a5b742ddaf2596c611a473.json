{"ast":null,"code":"import _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Dom, ObjectExt, StringExt } from '../util';\nimport { NodeTool, EdgeTool } from '../registry/tool';\nimport { View } from './view';\nimport { CellView } from './cell';\nimport { Markup } from './markup';\nexport var ToolsView = /*#__PURE__*/function (_View, _Symbol$toStringTag) {\n  _inherits(ToolsView, _View);\n\n  var _super = _createSuper(ToolsView);\n\n  function ToolsView() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ToolsView);\n\n    _this = _super.call(this);\n    _this.svgContainer = _this.createContainer(true, options);\n    _this.htmlContainer = _this.createContainer(false, options);\n\n    _this.config(options);\n\n    return _this;\n  }\n\n  _createClass(ToolsView, [{\n    key: \"name\",\n    get: function get() {\n      return this.options.name;\n    }\n  }, {\n    key: \"graph\",\n    get: function get() {\n      return this.cellView.graph;\n    }\n  }, {\n    key: \"cell\",\n    get: function get() {\n      return this.cellView.cell;\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return ToolsView.toStringTag;\n    }\n  }, {\n    key: \"createContainer\",\n    value: function createContainer(svg, options) {\n      var container = svg ? View.createElement('g', true) : View.createElement('div', false);\n      Dom.addClass(container, this.prefixClassName('cell-tools'));\n\n      if (options.className) {\n        Dom.addClass(container, options.className);\n      }\n\n      return container;\n    }\n  }, {\n    key: \"config\",\n    value: function config(options) {\n      this.options = Object.assign(Object.assign({}, this.options), options);\n\n      if (!CellView.isCellView(options.view) || options.view === this.cellView) {\n        return this;\n      }\n\n      this.cellView = options.view;\n\n      if (this.cell.isEdge()) {\n        Dom.addClass(this.svgContainer, this.prefixClassName('edge-tools'));\n        Dom.addClass(this.htmlContainer, this.prefixClassName('edge-tools'));\n      } else if (this.cell.isNode()) {\n        Dom.addClass(this.svgContainer, this.prefixClassName('node-tools'));\n        Dom.addClass(this.htmlContainer, this.prefixClassName('node-tools'));\n      }\n\n      this.svgContainer.setAttribute('data-cell-id', this.cell.id);\n      this.htmlContainer.setAttribute('data-cell-id', this.cell.id);\n\n      if (this.name) {\n        this.svgContainer.setAttribute('data-tools-name', this.name);\n        this.htmlContainer.setAttribute('data-tools-name', this.name);\n      }\n\n      var tools = this.options.items;\n\n      if (!Array.isArray(tools)) {\n        return this;\n      }\n\n      this.tools = [];\n      var normalizedTools = [];\n      tools.forEach(function (meta) {\n        if (ToolsView.ToolItem.isToolItem(meta)) {\n          if (meta.name === 'vertices') {\n            normalizedTools.unshift(meta);\n          } else {\n            normalizedTools.push(meta);\n          }\n        } else {\n          var name = typeof meta === 'object' ? meta.name : meta;\n\n          if (name === 'vertices') {\n            normalizedTools.unshift(meta);\n          } else {\n            normalizedTools.push(meta);\n          }\n        }\n      });\n\n      for (var i = 0; i < normalizedTools.length; i += 1) {\n        var meta = normalizedTools[i];\n        var tool = void 0;\n\n        if (ToolsView.ToolItem.isToolItem(meta)) {\n          tool = meta;\n        } else {\n          var name = typeof meta === 'object' ? meta.name : meta;\n          var args = typeof meta === 'object' ? meta.args || {} : {};\n\n          if (name) {\n            if (this.cell.isNode()) {\n              var ctor = NodeTool.registry.get(name);\n\n              if (ctor) {\n                tool = new ctor(args); // eslint-disable-line\n              } else {\n                return NodeTool.registry.onNotFound(name);\n              }\n            } else if (this.cell.isEdge()) {\n              var _ctor = EdgeTool.registry.get(name);\n\n              if (_ctor) {\n                tool = new _ctor(args); // eslint-disable-line\n              } else {\n                return EdgeTool.registry.onNotFound(name);\n              }\n            }\n          }\n        }\n\n        if (tool) {\n          tool.config(this.cellView, this);\n          tool.render();\n          var container = tool.options.isSVGElement !== false ? this.svgContainer : this.htmlContainer;\n          container.appendChild(tool.container);\n          this.tools.push(tool);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var tools = this.tools;\n\n      if (tools) {\n        tools.forEach(function (tool) {\n          if (options.toolId !== tool.cid && tool.isVisible()) {\n            tool.update();\n          }\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"focus\",\n    value: function focus(focusedTool) {\n      var tools = this.tools;\n\n      if (tools) {\n        tools.forEach(function (tool) {\n          if (focusedTool === tool) {\n            tool.show();\n          } else {\n            tool.hide();\n          }\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"blur\",\n    value: function blur(blurredTool) {\n      var tools = this.tools;\n\n      if (tools) {\n        tools.forEach(function (tool) {\n          if (tool !== blurredTool && !tool.isVisible()) {\n            tool.show();\n            tool.update();\n          }\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      return this.focus(null);\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      return this.blur(null);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var tools = this.tools;\n\n      if (tools) {\n        tools.forEach(function (tool) {\n          return tool.remove();\n        });\n        this.tools = null;\n      }\n\n      Dom.remove(this.svgContainer);\n      Dom.remove(this.htmlContainer);\n      return _get(_getPrototypeOf(ToolsView.prototype), \"remove\", this).call(this);\n    }\n  }, {\n    key: \"mount\",\n    value: function mount() {\n      var tools = this.tools;\n      var cellView = this.cellView;\n\n      if (cellView && tools) {\n        var hasSVG = tools.some(function (tool) {\n          return tool.options.isSVGElement !== false;\n        });\n        var hasHTML = tools.some(function (tool) {\n          return tool.options.isSVGElement === false;\n        });\n\n        if (hasSVG) {\n          var parent = this.options.local ? cellView.container : cellView.graph.view.decorator;\n          parent.appendChild(this.svgContainer);\n        }\n\n        if (hasHTML) {\n          this.graph.container.appendChild(this.htmlContainer);\n        }\n      }\n\n      return this;\n    }\n  }]);\n\n  return ToolsView;\n}(View, Symbol.toStringTag);\n\n(function (ToolsView) {\n  ToolsView.toStringTag = \"X6.\".concat(ToolsView.name);\n\n  function isToolsView(instance) {\n    if (instance == null) {\n      return false;\n    }\n\n    if (instance instanceof ToolsView) {\n      return true;\n    }\n\n    var tag = instance[Symbol.toStringTag];\n    var view = instance;\n\n    if ((tag == null || tag === ToolsView.toStringTag) && view.graph != null && view.cell != null && typeof view.config === 'function' && typeof view.update === 'function' && typeof view.focus === 'function' && typeof view.blur === 'function' && typeof view.show === 'function' && typeof view.hide === 'function') {\n      return true;\n    }\n\n    return false;\n  }\n\n  ToolsView.isToolsView = isToolsView;\n})(ToolsView || (ToolsView = {}));\n\n(function (ToolsView) {\n  var ToolItem = /*#__PURE__*/function (_View2, _Symbol$toStringTag2) {\n    _inherits(ToolItem, _View2);\n\n    var _super2 = _createSuper(ToolItem);\n\n    function ToolItem() {\n      var _this2;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, ToolItem);\n\n      _this2 = _super2.call(this);\n      _this2.options = _this2.getOptions(options);\n      _this2.container = View.createElement(_this2.options.tagName || 'g', _this2.options.isSVGElement !== false);\n      Dom.addClass(_this2.container, _this2.prefixClassName('cell-tool'));\n\n      if (typeof _this2.options.className === 'string') {\n        Dom.addClass(_this2.container, _this2.options.className);\n      }\n\n      _this2.init();\n\n      return _this2;\n    }\n\n    _createClass(ToolItem, [{\n      key: \"graph\",\n      get: function get() {\n        return this.cellView.graph;\n      }\n    }, {\n      key: \"cell\",\n      get: function get() {\n        return this.cellView.cell;\n      }\n    }, {\n      key: \"name\",\n      get: function get() {\n        return this.options.name;\n      }\n    }, {\n      key: _Symbol$toStringTag2,\n      get: function get() {\n        return ToolItem.toStringTag;\n      }\n    }, {\n      key: \"init\",\n      value: function init() {}\n    }, {\n      key: \"getOptions\",\n      value: function getOptions(options) {\n        var ctor = this.constructor;\n        return ctor.getOptions(options);\n      }\n    }, {\n      key: \"delegateEvents\",\n      value: function delegateEvents() {\n        if (this.options.events) {\n          _get(_getPrototypeOf(ToolItem.prototype), \"delegateEvents\", this).call(this, this.options.events);\n        }\n\n        return this;\n      }\n    }, {\n      key: \"config\",\n      value: function config(view, toolsView) {\n        this.cellView = view;\n        this.parent = toolsView;\n        this.stamp(this.container);\n\n        if (this.cell.isEdge()) {\n          Dom.addClass(this.container, this.prefixClassName('edge-tool'));\n        } else if (this.cell.isNode()) {\n          Dom.addClass(this.container, this.prefixClassName('node-tool'));\n        }\n\n        if (this.name) {\n          this.container.setAttribute('data-tool-name', this.name);\n        }\n\n        this.delegateEvents();\n        return this;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        this.empty();\n        var markup = this.options.markup;\n\n        if (markup) {\n          var meta = Markup.isStringMarkup(markup) ? Markup.parseStringMarkup(markup) : Markup.parseJSONMarkup(markup);\n          this.container.appendChild(meta.fragment);\n          this.childNodes = meta.selectors;\n        }\n\n        this.onRender();\n        return this;\n      }\n    }, {\n      key: \"onRender\",\n      value: function onRender() {}\n    }, {\n      key: \"update\",\n      value: function update() {\n        return this;\n      }\n    }, {\n      key: \"stamp\",\n      value: function stamp() {\n        var elem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.container;\n\n        if (elem) {\n          elem.setAttribute('data-cell-id', this.cellView.cell.id);\n        }\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        this.container.style.display = '';\n        this.visible = true;\n        return this;\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.container.style.display = 'none';\n        this.visible = false;\n        return this;\n      }\n    }, {\n      key: \"isVisible\",\n      value: function isVisible() {\n        return this.visible;\n      }\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        var opacity = this.options.focusOpacity;\n\n        if (opacity != null && Number.isFinite(opacity)) {\n          this.container.style.opacity = \"\".concat(opacity);\n        }\n\n        this.parent.focus(this);\n        return this;\n      }\n    }, {\n      key: \"blur\",\n      value: function blur() {\n        this.container.style.opacity = '';\n        this.parent.blur(this);\n        return this;\n      }\n    }, {\n      key: \"guard\",\n      value: function guard(evt) {\n        if (this.graph == null || this.cellView == null) {\n          return true;\n        }\n\n        return this.graph.view.guard(evt, this.cellView);\n      }\n    }], [{\n      key: \"getDefaults\",\n      value: function getDefaults() {\n        return this.defaults;\n      }\n    }, {\n      key: \"config\",\n      value: function config(options) {\n        this.defaults = this.getOptions(options);\n      }\n    }, {\n      key: \"getOptions\",\n      value: function getOptions(options) {\n        return ObjectExt.merge(ObjectExt.cloneDeep(this.getDefaults()), options);\n      }\n    }]);\n\n    return ToolItem;\n  }(View, Symbol.toStringTag); // #region static\n\n\n  ToolItem.defaults = {\n    isSVGElement: true,\n    tagName: 'g'\n  };\n  ToolsView.ToolItem = ToolItem;\n\n  (function (ToolItem) {\n    var counter = 0;\n\n    function getClassName(name) {\n      if (name) {\n        return StringExt.pascalCase(name);\n      }\n\n      counter += 1;\n      return \"CustomTool\".concat(counter);\n    }\n\n    function define(options) {\n      var tool = ObjectExt.createClass(getClassName(options.name), this);\n      tool.config(options);\n      return tool;\n    }\n\n    ToolItem.define = define;\n  })(ToolItem = ToolsView.ToolItem || (ToolsView.ToolItem = {}));\n\n  (function (ToolItem) {\n    ToolItem.toStringTag = \"X6.\".concat(ToolItem.name);\n\n    function isToolItem(instance) {\n      if (instance == null) {\n        return false;\n      }\n\n      if (instance instanceof ToolItem) {\n        return true;\n      }\n\n      var tag = instance[Symbol.toStringTag];\n      var view = instance;\n\n      if ((tag == null || tag === ToolItem.toStringTag) && view.graph != null && view.cell != null && typeof view.config === 'function' && typeof view.update === 'function' && typeof view.focus === 'function' && typeof view.blur === 'function' && typeof view.show === 'function' && typeof view.hide === 'function' && typeof view.isVisible === 'function') {\n        return true;\n      }\n\n      return false;\n    }\n\n    ToolItem.isToolItem = isToolItem;\n  })(ToolItem = ToolsView.ToolItem || (ToolsView.ToolItem = {}));\n})(ToolsView || (ToolsView = {}));","map":{"version":3,"sources":["../../src/view/tool.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Dom, ObjectExt, StringExt } from '../util';\nimport { NodeTool, EdgeTool } from '../registry/tool';\nimport { View } from './view';\nimport { CellView } from './cell';\nimport { Markup } from './markup';\nexport class ToolsView extends View {\n    constructor(options = {}) {\n        super();\n        this.svgContainer = this.createContainer(true, options);\n        this.htmlContainer = this.createContainer(false, options);\n        this.config(options);\n    }\n    get name() {\n        return this.options.name;\n    }\n    get graph() {\n        return this.cellView.graph;\n    }\n    get cell() {\n        return this.cellView.cell;\n    }\n    get [Symbol.toStringTag]() {\n        return ToolsView.toStringTag;\n    }\n    createContainer(svg, options) {\n        const container = svg\n            ? View.createElement('g', true)\n            : View.createElement('div', false);\n        Dom.addClass(container, this.prefixClassName('cell-tools'));\n        if (options.className) {\n            Dom.addClass(container, options.className);\n        }\n        return container;\n    }\n    config(options) {\n        this.options = Object.assign(Object.assign({}, this.options), options);\n        if (!CellView.isCellView(options.view) || options.view === this.cellView) {\n            return this;\n        }\n        this.cellView = options.view;\n        if (this.cell.isEdge()) {\n            Dom.addClass(this.svgContainer, this.prefixClassName('edge-tools'));\n            Dom.addClass(this.htmlContainer, this.prefixClassName('edge-tools'));\n        }\n        else if (this.cell.isNode()) {\n            Dom.addClass(this.svgContainer, this.prefixClassName('node-tools'));\n            Dom.addClass(this.htmlContainer, this.prefixClassName('node-tools'));\n        }\n        this.svgContainer.setAttribute('data-cell-id', this.cell.id);\n        this.htmlContainer.setAttribute('data-cell-id', this.cell.id);\n        if (this.name) {\n            this.svgContainer.setAttribute('data-tools-name', this.name);\n            this.htmlContainer.setAttribute('data-tools-name', this.name);\n        }\n        const tools = this.options.items;\n        if (!Array.isArray(tools)) {\n            return this;\n        }\n        this.tools = [];\n        const normalizedTools = [];\n        tools.forEach((meta) => {\n            if (ToolsView.ToolItem.isToolItem(meta)) {\n                if (meta.name === 'vertices') {\n                    normalizedTools.unshift(meta);\n                }\n                else {\n                    normalizedTools.push(meta);\n                }\n            }\n            else {\n                const name = typeof meta === 'object' ? meta.name : meta;\n                if (name === 'vertices') {\n                    normalizedTools.unshift(meta);\n                }\n                else {\n                    normalizedTools.push(meta);\n                }\n            }\n        });\n        for (let i = 0; i < normalizedTools.length; i += 1) {\n            const meta = normalizedTools[i];\n            let tool;\n            if (ToolsView.ToolItem.isToolItem(meta)) {\n                tool = meta;\n            }\n            else {\n                const name = typeof meta === 'object' ? meta.name : meta;\n                const args = typeof meta === 'object' ? meta.args || {} : {};\n                if (name) {\n                    if (this.cell.isNode()) {\n                        const ctor = NodeTool.registry.get(name);\n                        if (ctor) {\n                            tool = new ctor(args); // eslint-disable-line\n                        }\n                        else {\n                            return NodeTool.registry.onNotFound(name);\n                        }\n                    }\n                    else if (this.cell.isEdge()) {\n                        const ctor = EdgeTool.registry.get(name);\n                        if (ctor) {\n                            tool = new ctor(args); // eslint-disable-line\n                        }\n                        else {\n                            return EdgeTool.registry.onNotFound(name);\n                        }\n                    }\n                }\n            }\n            if (tool) {\n                tool.config(this.cellView, this);\n                tool.render();\n                const container = tool.options.isSVGElement !== false\n                    ? this.svgContainer\n                    : this.htmlContainer;\n                container.appendChild(tool.container);\n                this.tools.push(tool);\n            }\n        }\n        return this;\n    }\n    update(options = {}) {\n        const tools = this.tools;\n        if (tools) {\n            tools.forEach((tool) => {\n                if (options.toolId !== tool.cid && tool.isVisible()) {\n                    tool.update();\n                }\n            });\n        }\n        return this;\n    }\n    focus(focusedTool) {\n        const tools = this.tools;\n        if (tools) {\n            tools.forEach((tool) => {\n                if (focusedTool === tool) {\n                    tool.show();\n                }\n                else {\n                    tool.hide();\n                }\n            });\n        }\n        return this;\n    }\n    blur(blurredTool) {\n        const tools = this.tools;\n        if (tools) {\n            tools.forEach((tool) => {\n                if (tool !== blurredTool && !tool.isVisible()) {\n                    tool.show();\n                    tool.update();\n                }\n            });\n        }\n        return this;\n    }\n    hide() {\n        return this.focus(null);\n    }\n    show() {\n        return this.blur(null);\n    }\n    remove() {\n        const tools = this.tools;\n        if (tools) {\n            tools.forEach((tool) => tool.remove());\n            this.tools = null;\n        }\n        Dom.remove(this.svgContainer);\n        Dom.remove(this.htmlContainer);\n        return super.remove();\n    }\n    mount() {\n        const tools = this.tools;\n        const cellView = this.cellView;\n        if (cellView && tools) {\n            const hasSVG = tools.some((tool) => tool.options.isSVGElement !== false);\n            const hasHTML = tools.some((tool) => tool.options.isSVGElement === false);\n            if (hasSVG) {\n                const parent = this.options.local\n                    ? cellView.container\n                    : cellView.graph.view.decorator;\n                parent.appendChild(this.svgContainer);\n            }\n            if (hasHTML) {\n                this.graph.container.appendChild(this.htmlContainer);\n            }\n        }\n        return this;\n    }\n}\n(function (ToolsView) {\n    ToolsView.toStringTag = `X6.${ToolsView.name}`;\n    function isToolsView(instance) {\n        if (instance == null) {\n            return false;\n        }\n        if (instance instanceof ToolsView) {\n            return true;\n        }\n        const tag = instance[Symbol.toStringTag];\n        const view = instance;\n        if ((tag == null || tag === ToolsView.toStringTag) &&\n            view.graph != null &&\n            view.cell != null &&\n            typeof view.config === 'function' &&\n            typeof view.update === 'function' &&\n            typeof view.focus === 'function' &&\n            typeof view.blur === 'function' &&\n            typeof view.show === 'function' &&\n            typeof view.hide === 'function') {\n            return true;\n        }\n        return false;\n    }\n    ToolsView.isToolsView = isToolsView;\n})(ToolsView || (ToolsView = {}));\n(function (ToolsView) {\n    class ToolItem extends View {\n        constructor(options = {}) {\n            super();\n            this.options = this.getOptions(options);\n            this.container = View.createElement(this.options.tagName || 'g', this.options.isSVGElement !== false);\n            Dom.addClass(this.container, this.prefixClassName('cell-tool'));\n            if (typeof this.options.className === 'string') {\n                Dom.addClass(this.container, this.options.className);\n            }\n            this.init();\n        }\n        static getDefaults() {\n            return this.defaults;\n        }\n        static config(options) {\n            this.defaults = this.getOptions(options);\n        }\n        static getOptions(options) {\n            return ObjectExt.merge(ObjectExt.cloneDeep(this.getDefaults()), options);\n        }\n        get graph() {\n            return this.cellView.graph;\n        }\n        get cell() {\n            return this.cellView.cell;\n        }\n        get name() {\n            return this.options.name;\n        }\n        get [Symbol.toStringTag]() {\n            return ToolItem.toStringTag;\n        }\n        init() { }\n        getOptions(options) {\n            const ctor = this.constructor;\n            return ctor.getOptions(options);\n        }\n        delegateEvents() {\n            if (this.options.events) {\n                super.delegateEvents(this.options.events);\n            }\n            return this;\n        }\n        config(view, toolsView) {\n            this.cellView = view;\n            this.parent = toolsView;\n            this.stamp(this.container);\n            if (this.cell.isEdge()) {\n                Dom.addClass(this.container, this.prefixClassName('edge-tool'));\n            }\n            else if (this.cell.isNode()) {\n                Dom.addClass(this.container, this.prefixClassName('node-tool'));\n            }\n            if (this.name) {\n                this.container.setAttribute('data-tool-name', this.name);\n            }\n            this.delegateEvents();\n            return this;\n        }\n        render() {\n            this.empty();\n            const markup = this.options.markup;\n            if (markup) {\n                const meta = Markup.isStringMarkup(markup)\n                    ? Markup.parseStringMarkup(markup)\n                    : Markup.parseJSONMarkup(markup);\n                this.container.appendChild(meta.fragment);\n                this.childNodes = meta.selectors;\n            }\n            this.onRender();\n            return this;\n        }\n        onRender() { }\n        update() {\n            return this;\n        }\n        stamp(elem = this.container) {\n            if (elem) {\n                elem.setAttribute('data-cell-id', this.cellView.cell.id);\n            }\n        }\n        show() {\n            this.container.style.display = '';\n            this.visible = true;\n            return this;\n        }\n        hide() {\n            this.container.style.display = 'none';\n            this.visible = false;\n            return this;\n        }\n        isVisible() {\n            return this.visible;\n        }\n        focus() {\n            const opacity = this.options.focusOpacity;\n            if (opacity != null && Number.isFinite(opacity)) {\n                this.container.style.opacity = `${opacity}`;\n            }\n            this.parent.focus(this);\n            return this;\n        }\n        blur() {\n            this.container.style.opacity = '';\n            this.parent.blur(this);\n            return this;\n        }\n        guard(evt) {\n            if (this.graph == null || this.cellView == null) {\n                return true;\n            }\n            return this.graph.view.guard(evt, this.cellView);\n        }\n    }\n    // #region static\n    ToolItem.defaults = {\n        isSVGElement: true,\n        tagName: 'g',\n    };\n    ToolsView.ToolItem = ToolItem;\n    (function (ToolItem) {\n        let counter = 0;\n        function getClassName(name) {\n            if (name) {\n                return StringExt.pascalCase(name);\n            }\n            counter += 1;\n            return `CustomTool${counter}`;\n        }\n        function define(options) {\n            const tool = ObjectExt.createClass(getClassName(options.name), this);\n            tool.config(options);\n            return tool;\n        }\n        ToolItem.define = define;\n    })(ToolItem = ToolsView.ToolItem || (ToolsView.ToolItem = {}));\n    (function (ToolItem) {\n        ToolItem.toStringTag = `X6.${ToolItem.name}`;\n        function isToolItem(instance) {\n            if (instance == null) {\n                return false;\n            }\n            if (instance instanceof ToolItem) {\n                return true;\n            }\n            const tag = instance[Symbol.toStringTag];\n            const view = instance;\n            if ((tag == null || tag === ToolItem.toStringTag) &&\n                view.graph != null &&\n                view.cell != null &&\n                typeof view.config === 'function' &&\n                typeof view.update === 'function' &&\n                typeof view.focus === 'function' &&\n                typeof view.blur === 'function' &&\n                typeof view.show === 'function' &&\n                typeof view.hide === 'function' &&\n                typeof view.isVisible === 'function') {\n                return true;\n            }\n            return false;\n        }\n        ToolItem.isToolItem = isToolItem;\n    })(ToolItem = ToolsView.ToolItem || (ToolsView.ToolItem = {}));\n})(ToolsView || (ToolsView = {}));\n//# sourceMappingURL=tool.js.map"]},"metadata":{},"sourceType":"module"}