{"ast":null,"code":"import JQuery from 'jquery';\nimport { ObjectExt, StringExt, Dom, Vector } from '../util'; // eslint-disable-next-line\n\nexport var Markup;\n\n(function (Markup) {\n  function isJSONMarkup(markup) {\n    return markup != null && !isStringMarkup(markup);\n  }\n\n  Markup.isJSONMarkup = isJSONMarkup;\n\n  function isStringMarkup(markup) {\n    return markup != null && typeof markup === 'string';\n  }\n\n  Markup.isStringMarkup = isStringMarkup;\n\n  function clone(markup) {\n    return markup == null || isStringMarkup(markup) ? markup : ObjectExt.cloneDeep(markup);\n  }\n\n  Markup.clone = clone;\n  /**\n   * Removes blank space in markup to prevent create empty text node.\n   */\n\n  function sanitize(markup) {\n    return `${markup}`.trim().replace(/[\\r|\\n]/g, ' ').replace(/>\\s+</g, '><');\n  }\n\n  Markup.sanitize = sanitize;\n\n  function parseStringMarkup(markup) {\n    const fragment = document.createDocumentFragment();\n    const groups = {};\n    const selectors = {};\n    const sanitized = sanitize(markup);\n    const nodes = StringExt.sanitizeHTML(sanitized, {\n      raw: true\n    });\n    nodes.forEach(node => {\n      fragment.appendChild(node);\n    });\n    return {\n      fragment,\n      selectors,\n      groups\n    };\n  }\n\n  Markup.parseStringMarkup = parseStringMarkup;\n\n  function parseJSONMarkup(markup) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      ns: Dom.ns.svg\n    };\n    const fragment = document.createDocumentFragment();\n    const groups = {};\n    const selectors = {};\n    const queue = [{\n      markup: Array.isArray(markup) ? markup : [markup],\n      parent: fragment,\n      ns: options.ns\n    }];\n\n    while (queue.length > 0) {\n      const item = queue.pop();\n      let ns = item.ns || Dom.ns.svg;\n      const defines = item.markup;\n      const parentNode = item.parent;\n      defines.forEach(define => {\n        // tagName\n        const tagName = define.tagName;\n\n        if (!tagName) {\n          throw new TypeError('Invalid tagName');\n        } // ns\n\n\n        if (define.ns) {\n          ns = define.ns;\n        }\n\n        const svg = ns === Dom.ns.svg;\n        const node = ns ? Dom.createElementNS(tagName, ns) : Dom.createElement(tagName); // attrs\n\n        const attrs = define.attrs;\n\n        if (attrs) {\n          if (svg) {\n            Dom.attr(node, Dom.kebablizeAttrs(attrs));\n          } else {\n            JQuery(node).attr(attrs);\n          }\n        } // style\n\n\n        const style = define.style;\n\n        if (style) {\n          JQuery(node).css(style);\n        } // classname\n\n\n        const className = define.className;\n\n        if (className != null) {\n          node.setAttribute('class', Array.isArray(className) ? className.join(' ') : className);\n        } // textContent\n\n\n        if (define.textContent) {\n          node.textContent = define.textContent;\n        } // selector\n\n\n        const selector = define.selector;\n\n        if (selector != null) {\n          if (selectors[selector]) {\n            throw new TypeError('Selector must be unique');\n          }\n\n          selectors[selector] = node;\n        } // group\n\n\n        if (define.groupSelector) {\n          let nodeGroups = define.groupSelector;\n\n          if (!Array.isArray(nodeGroups)) {\n            nodeGroups = [nodeGroups];\n          }\n\n          nodeGroups.forEach(name => {\n            if (!groups[name]) {\n              groups[name] = [];\n            }\n\n            groups[name].push(node);\n          });\n        }\n\n        parentNode.appendChild(node); // children\n\n        const children = define.children;\n\n        if (Array.isArray(children)) {\n          queue.push({\n            ns,\n            markup: children,\n            parent: node\n          });\n        }\n      });\n    }\n\n    Object.keys(groups).forEach(groupName => {\n      if (selectors[groupName]) {\n        throw new Error('Ambiguous group selector');\n      }\n\n      selectors[groupName] = groups[groupName];\n    });\n    return {\n      fragment,\n      selectors,\n      groups\n    };\n  }\n\n  Markup.parseJSONMarkup = parseJSONMarkup;\n\n  function createContainer(firstChild) {\n    return firstChild instanceof SVGElement ? Dom.createSvgElement('g') : Dom.createElement('div');\n  }\n\n  function renderMarkup(markup) {\n    if (isStringMarkup(markup)) {\n      const nodes = Vector.createVectors(markup);\n      const count = nodes.length;\n\n      if (count === 1) {\n        return {\n          elem: nodes[0].node\n        };\n      }\n\n      if (count > 1) {\n        const elem = createContainer(nodes[0].node);\n        nodes.forEach(node => {\n          elem.appendChild(node.node);\n        });\n        return {\n          elem\n        };\n      }\n\n      return {};\n    }\n\n    const result = parseJSONMarkup(markup);\n    const fragment = result.fragment;\n    let elem = null;\n\n    if (fragment.childNodes.length > 1) {\n      elem = createContainer(fragment.firstChild);\n      elem.appendChild(fragment);\n    } else {\n      elem = fragment.firstChild;\n    }\n\n    return {\n      elem,\n      selectors: result.selectors\n    };\n  }\n\n  Markup.renderMarkup = renderMarkup;\n\n  function parseLabelStringMarkup(markup) {\n    const children = Vector.createVectors(markup);\n    const fragment = document.createDocumentFragment();\n\n    for (let i = 0, n = children.length; i < n; i += 1) {\n      const currentChild = children[i].node;\n      fragment.appendChild(currentChild);\n    }\n\n    return {\n      fragment,\n      selectors: {}\n    };\n  }\n\n  Markup.parseLabelStringMarkup = parseLabelStringMarkup;\n})(Markup || (Markup = {})); // eslint-disable-next-line\n\n\n(function (Markup) {\n  function getSelector(elem, stop, prev) {\n    if (elem != null) {\n      let selector;\n      const tagName = elem.tagName.toLowerCase();\n\n      if (elem === stop) {\n        if (typeof prev === 'string') {\n          selector = `> ${tagName} > ${prev}`;\n        } else {\n          selector = `> ${tagName}`;\n        }\n\n        return selector;\n      }\n\n      const parent = elem.parentNode;\n\n      if (parent && parent.childNodes.length > 1) {\n        const nth = Dom.index(elem) + 1;\n        selector = `${tagName}:nth-child(${nth})`;\n      } else {\n        selector = tagName;\n      }\n\n      if (prev) {\n        selector += ` > ${prev}`;\n      }\n\n      return getSelector(elem.parentNode, stop, selector);\n    }\n\n    return prev;\n  }\n\n  Markup.getSelector = getSelector;\n\n  function parseNode(node, root, ns) {\n    if (node.nodeName === '#text') {\n      return null;\n    }\n\n    let selector = null;\n    let groupSelector = null; // let classNames: string | null = null\n\n    let attrs = null;\n    let isCSSSelector = false;\n    const markup = {\n      tagName: node.tagName\n    };\n\n    if (node.attributes) {\n      attrs = {};\n\n      for (let i = 0, l = node.attributes.length; i < l; i += 1) {\n        const attr = node.attributes[i];\n        const name = attr.nodeName;\n        const value = attr.nodeValue;\n\n        if (name === 'selector') {\n          selector = value;\n        } else if (name === 'groupSelector') {\n          groupSelector = value;\n        } else if (name === 'class') {\n          markup.attrs = {\n            class: value\n          };\n        } else {\n          attrs[name] = value;\n        }\n      }\n    }\n\n    if (selector == null) {\n      isCSSSelector = true;\n      selector = getSelector(node, root);\n    }\n\n    if (node.namespaceURI) {\n      markup.ns = node.namespaceURI;\n    }\n\n    if (markup.ns == null) {\n      if (['body', 'div', 'section', 'main', 'nav', 'footer', 'span', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ul', 'ol', 'dl', 'center', 'strong', 'pre', 'form', 'select', 'textarea', 'fieldset', 'marquee', 'bgsound', 'iframe', 'frameset'].includes(node.tagName)) {\n        markup.ns = Dom.ns.xhtml;\n      } else if (ns) {\n        markup.ns = ns;\n      }\n    }\n\n    if (selector) {\n      markup.selector = selector;\n    }\n\n    if (groupSelector != null) {\n      markup.groupSelector = groupSelector;\n    }\n\n    return {\n      markup,\n      attrs,\n      isCSSSelector\n    };\n  }\n\n  function xml2json(xml) {\n    const sanitized = Markup.sanitize(xml);\n    const doc = Dom.parseXML(sanitized, {\n      mimeType: 'image/svg+xml'\n    });\n    const nodes = Array.prototype.slice.call(doc.childNodes);\n    const attrMap = {};\n    const markupMap = new WeakMap();\n\n    const parse = (node, root, ns) => {\n      const data = parseNode(node, root, ns);\n\n      if (data == null) {\n        const parent = markupMap.get(node.parentNode);\n\n        if (parent && node.textContent) {\n          parent.textContent = node.textContent;\n        }\n      } else {\n        const {\n          markup,\n          attrs,\n          isCSSSelector\n        } = data;\n        markupMap.set(node, markup);\n\n        if (markup.selector && attrs != null) {\n          if (Object.keys(attrs).length) {\n            attrMap[markup.selector] = attrs;\n          }\n\n          if (isCSSSelector) {\n            delete markup.selector;\n          }\n        }\n\n        if (node.childNodes && node.childNodes.length > 0) {\n          for (let i = 0, l = node.childNodes.length; i < l; i += 1) {\n            const child = node.childNodes[i];\n            const childMarkup = parse(child, root, markup.ns);\n\n            if (childMarkup) {\n              if (markup.children == null) {\n                markup.children = [];\n              }\n\n              markup.children.push(childMarkup);\n            }\n          }\n        }\n\n        return markup;\n      }\n    };\n\n    const markup = nodes.map(node => parse(node, node)).filter(mk => mk != null);\n    return {\n      markup,\n      attrs: attrMap\n    };\n  }\n\n  Markup.xml2json = xml2json;\n})(Markup || (Markup = {})); // eslint-disable-next-line\n\n\n(function (Markup) {\n  function getPortContainerMarkup() {\n    return 'g';\n  }\n\n  Markup.getPortContainerMarkup = getPortContainerMarkup;\n\n  function getPortMarkup() {\n    return {\n      tagName: 'circle',\n      selector: 'circle',\n      attrs: {\n        r: 10,\n        fill: '#FFFFFF',\n        stroke: '#000000'\n      }\n    };\n  }\n\n  Markup.getPortMarkup = getPortMarkup;\n\n  function getPortLabelMarkup() {\n    return {\n      tagName: 'text',\n      selector: 'text',\n      attrs: {\n        fill: '#000000'\n      }\n    };\n  }\n\n  Markup.getPortLabelMarkup = getPortLabelMarkup;\n})(Markup || (Markup = {})); // eslint-disable-next-line\n\n\n(function (Markup) {\n  function getEdgeMarkup() {\n    return Markup.sanitize(`\n    <path class=\"connection\" stroke=\"black\" d=\"M 0 0 0 0\"/>\n    <path class=\"source-marker\" fill=\"black\" stroke=\"black\" d=\"M 0 0 0 0\"/>\n    <path class=\"target-marker\" fill=\"black\" stroke=\"black\" d=\"M 0 0 0 0\"/>\n    <path class=\"connection-wrap\" d=\"M 0 0 0 0\"/>\n    <g class=\"labels\"/>\n    <g class=\"vertices\"/>\n    <g class=\"arrowheads\"/>\n    <g class=\"tools\"/>\n  `);\n  }\n\n  Markup.getEdgeMarkup = getEdgeMarkup;\n\n  function getEdgeToolMarkup() {\n    return Markup.sanitize(`\n    <g class=\"edge-tool\">\n      <g class=\"tool-remove\" event=\"edge:remove\">\n        <circle r=\"11\" />\n        <path transform=\"scale(.8) translate(-16, -16)\" d=\"M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248z\" />\n        <title>Remove edge.</title>\n      </g>\n      <g class=\"tool-options\" event=\"edge:options\">\n        <circle r=\"11\" transform=\"translate(25)\"/>\n        <path fill=\"white\" transform=\"scale(.55) translate(29, -16)\" d=\"M31.229,17.736c0.064-0.571,0.104-1.148,0.104-1.736s-0.04-1.166-0.104-1.737l-4.377-1.557c-0.218-0.716-0.504-1.401-0.851-2.05l1.993-4.192c-0.725-0.91-1.549-1.734-2.458-2.459l-4.193,1.994c-0.647-0.347-1.334-0.632-2.049-0.849l-1.558-4.378C17.165,0.708,16.588,0.667,16,0.667s-1.166,0.041-1.737,0.105L12.707,5.15c-0.716,0.217-1.401,0.502-2.05,0.849L6.464,4.005C5.554,4.73,4.73,5.554,4.005,6.464l1.994,4.192c-0.347,0.648-0.632,1.334-0.849,2.05l-4.378,1.557C0.708,14.834,0.667,15.412,0.667,16s0.041,1.165,0.105,1.736l4.378,1.558c0.217,0.715,0.502,1.401,0.849,2.049l-1.994,4.193c0.725,0.909,1.549,1.733,2.459,2.458l4.192-1.993c0.648,0.347,1.334,0.633,2.05,0.851l1.557,4.377c0.571,0.064,1.148,0.104,1.737,0.104c0.588,0,1.165-0.04,1.736-0.104l1.558-4.377c0.715-0.218,1.399-0.504,2.049-0.851l4.193,1.993c0.909-0.725,1.733-1.549,2.458-2.458l-1.993-4.193c0.347-0.647,0.633-1.334,0.851-2.049L31.229,17.736zM16,20.871c-2.69,0-4.872-2.182-4.872-4.871c0-2.69,2.182-4.872,4.872-4.872c2.689,0,4.871,2.182,4.871,4.872C20.871,18.689,18.689,20.871,16,20.871z\"/>\n        <title>Edge options.</title>\n      </g>\n    </g>\n  `);\n  }\n\n  Markup.getEdgeToolMarkup = getEdgeToolMarkup;\n\n  function getEdgeVertexMarkup() {\n    return Markup.sanitize(`\n    <g class=\"vertex-group\" transform=\"translate(<%= x %>, <%= y %>)\">\n      <circle class=\"vertex\" data-index=\"<%= index %>\" r=\"10\" />\n      <path class=\"vertex-remove-area\" data-index=\"<%= index %>\" d=\"M16,5.333c-7.732,0-14,4.701-14,10.5c0,1.982,0.741,3.833,2.016,5.414L2,25.667l5.613-1.441c2.339,1.317,5.237,2.107,8.387,2.107c7.732,0,14-4.701,14-10.5C30,10.034,23.732,5.333,16,5.333z\" transform=\"translate(5, -33)\"/>\n      <path class=\"vertex-remove\" data-index=\"<%= index %>\" transform=\"scale(.8) translate(9.5, -37)\" d=\"M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248z\">\n      <title>Remove vertex.</title>\n      </path>\n    </g>\n  `);\n  }\n\n  Markup.getEdgeVertexMarkup = getEdgeVertexMarkup;\n\n  function getEdgeArrowheadMarkup() {\n    return Markup.sanitize(`\n    <g class=\"arrowhead-group arrowhead-group-<%= end %>\">\n      <path class=\"arrowhead\" data-terminal=\"<%= end %>\" d=\"M 26 0 L 0 13 L 26 26 z\" />\n    </g>\n  `);\n  }\n\n  Markup.getEdgeArrowheadMarkup = getEdgeArrowheadMarkup;\n})(Markup || (Markup = {})); // eslint-disable-next-line\n\n\n(function (Markup) {\n  function getForeignObjectMarkup() {\n    let bare = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return {\n      tagName: 'foreignObject',\n      selector: 'fo',\n      children: [{\n        ns: Dom.ns.xhtml,\n        tagName: 'body',\n        selector: 'foBody',\n        attrs: {\n          xmlns: Dom.ns.xhtml\n        },\n        style: {\n          width: '100%',\n          height: '100%',\n          background: 'transparent'\n        },\n        children: bare ? [] : [{\n          tagName: 'div',\n          selector: 'foContent',\n          style: {\n            width: '100%',\n            height: '100%'\n          }\n        }]\n      }]\n    };\n  }\n\n  Markup.getForeignObjectMarkup = getForeignObjectMarkup;\n})(Markup || (Markup = {}));","map":{"version":3,"sources":["../../src/view/markup.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import JQuery from 'jquery';\nimport { ObjectExt, StringExt, Dom, Vector } from '../util';\n// eslint-disable-next-line\nexport var Markup;\n(function (Markup) {\n    function isJSONMarkup(markup) {\n        return markup != null && !isStringMarkup(markup);\n    }\n    Markup.isJSONMarkup = isJSONMarkup;\n    function isStringMarkup(markup) {\n        return markup != null && typeof markup === 'string';\n    }\n    Markup.isStringMarkup = isStringMarkup;\n    function clone(markup) {\n        return markup == null || isStringMarkup(markup)\n            ? markup\n            : ObjectExt.cloneDeep(markup);\n    }\n    Markup.clone = clone;\n    /**\n     * Removes blank space in markup to prevent create empty text node.\n     */\n    function sanitize(markup) {\n        return `${markup}`\n            .trim()\n            .replace(/[\\r|\\n]/g, ' ')\n            .replace(/>\\s+</g, '><');\n    }\n    Markup.sanitize = sanitize;\n    function parseStringMarkup(markup) {\n        const fragment = document.createDocumentFragment();\n        const groups = {};\n        const selectors = {};\n        const sanitized = sanitize(markup);\n        const nodes = StringExt.sanitizeHTML(sanitized, { raw: true });\n        nodes.forEach((node) => {\n            fragment.appendChild(node);\n        });\n        return { fragment, selectors, groups };\n    }\n    Markup.parseStringMarkup = parseStringMarkup;\n    function parseJSONMarkup(markup, options = { ns: Dom.ns.svg }) {\n        const fragment = document.createDocumentFragment();\n        const groups = {};\n        const selectors = {};\n        const queue = [\n            {\n                markup: Array.isArray(markup) ? markup : [markup],\n                parent: fragment,\n                ns: options.ns,\n            },\n        ];\n        while (queue.length > 0) {\n            const item = queue.pop();\n            let ns = item.ns || Dom.ns.svg;\n            const defines = item.markup;\n            const parentNode = item.parent;\n            defines.forEach((define) => {\n                // tagName\n                const tagName = define.tagName;\n                if (!tagName) {\n                    throw new TypeError('Invalid tagName');\n                }\n                // ns\n                if (define.ns) {\n                    ns = define.ns;\n                }\n                const svg = ns === Dom.ns.svg;\n                const node = ns\n                    ? Dom.createElementNS(tagName, ns)\n                    : Dom.createElement(tagName);\n                // attrs\n                const attrs = define.attrs;\n                if (attrs) {\n                    if (svg) {\n                        Dom.attr(node, Dom.kebablizeAttrs(attrs));\n                    }\n                    else {\n                        JQuery(node).attr(attrs);\n                    }\n                }\n                // style\n                const style = define.style;\n                if (style) {\n                    JQuery(node).css(style);\n                }\n                // classname\n                const className = define.className;\n                if (className != null) {\n                    node.setAttribute('class', Array.isArray(className) ? className.join(' ') : className);\n                }\n                // textContent\n                if (define.textContent) {\n                    node.textContent = define.textContent;\n                }\n                // selector\n                const selector = define.selector;\n                if (selector != null) {\n                    if (selectors[selector]) {\n                        throw new TypeError('Selector must be unique');\n                    }\n                    selectors[selector] = node;\n                }\n                // group\n                if (define.groupSelector) {\n                    let nodeGroups = define.groupSelector;\n                    if (!Array.isArray(nodeGroups)) {\n                        nodeGroups = [nodeGroups];\n                    }\n                    nodeGroups.forEach((name) => {\n                        if (!groups[name]) {\n                            groups[name] = [];\n                        }\n                        groups[name].push(node);\n                    });\n                }\n                parentNode.appendChild(node);\n                // children\n                const children = define.children;\n                if (Array.isArray(children)) {\n                    queue.push({ ns, markup: children, parent: node });\n                }\n            });\n        }\n        Object.keys(groups).forEach((groupName) => {\n            if (selectors[groupName]) {\n                throw new Error('Ambiguous group selector');\n            }\n            selectors[groupName] = groups[groupName];\n        });\n        return { fragment, selectors, groups };\n    }\n    Markup.parseJSONMarkup = parseJSONMarkup;\n    function createContainer(firstChild) {\n        return firstChild instanceof SVGElement\n            ? Dom.createSvgElement('g')\n            : Dom.createElement('div');\n    }\n    function renderMarkup(markup) {\n        if (isStringMarkup(markup)) {\n            const nodes = Vector.createVectors(markup);\n            const count = nodes.length;\n            if (count === 1) {\n                return {\n                    elem: nodes[0].node,\n                };\n            }\n            if (count > 1) {\n                const elem = createContainer(nodes[0].node);\n                nodes.forEach((node) => {\n                    elem.appendChild(node.node);\n                });\n                return { elem };\n            }\n            return {};\n        }\n        const result = parseJSONMarkup(markup);\n        const fragment = result.fragment;\n        let elem = null;\n        if (fragment.childNodes.length > 1) {\n            elem = createContainer(fragment.firstChild);\n            elem.appendChild(fragment);\n        }\n        else {\n            elem = fragment.firstChild;\n        }\n        return { elem, selectors: result.selectors };\n    }\n    Markup.renderMarkup = renderMarkup;\n    function parseLabelStringMarkup(markup) {\n        const children = Vector.createVectors(markup);\n        const fragment = document.createDocumentFragment();\n        for (let i = 0, n = children.length; i < n; i += 1) {\n            const currentChild = children[i].node;\n            fragment.appendChild(currentChild);\n        }\n        return { fragment, selectors: {} };\n    }\n    Markup.parseLabelStringMarkup = parseLabelStringMarkup;\n})(Markup || (Markup = {}));\n// eslint-disable-next-line\n(function (Markup) {\n    function getSelector(elem, stop, prev) {\n        if (elem != null) {\n            let selector;\n            const tagName = elem.tagName.toLowerCase();\n            if (elem === stop) {\n                if (typeof prev === 'string') {\n                    selector = `> ${tagName} > ${prev}`;\n                }\n                else {\n                    selector = `> ${tagName}`;\n                }\n                return selector;\n            }\n            const parent = elem.parentNode;\n            if (parent && parent.childNodes.length > 1) {\n                const nth = Dom.index(elem) + 1;\n                selector = `${tagName}:nth-child(${nth})`;\n            }\n            else {\n                selector = tagName;\n            }\n            if (prev) {\n                selector += ` > ${prev}`;\n            }\n            return getSelector(elem.parentNode, stop, selector);\n        }\n        return prev;\n    }\n    Markup.getSelector = getSelector;\n    function parseNode(node, root, ns) {\n        if (node.nodeName === '#text') {\n            return null;\n        }\n        let selector = null;\n        let groupSelector = null;\n        // let classNames: string | null = null\n        let attrs = null;\n        let isCSSSelector = false;\n        const markup = {\n            tagName: node.tagName,\n        };\n        if (node.attributes) {\n            attrs = {};\n            for (let i = 0, l = node.attributes.length; i < l; i += 1) {\n                const attr = node.attributes[i];\n                const name = attr.nodeName;\n                const value = attr.nodeValue;\n                if (name === 'selector') {\n                    selector = value;\n                }\n                else if (name === 'groupSelector') {\n                    groupSelector = value;\n                }\n                else if (name === 'class') {\n                    markup.attrs = { class: value };\n                }\n                else {\n                    attrs[name] = value;\n                }\n            }\n        }\n        if (selector == null) {\n            isCSSSelector = true;\n            selector = getSelector(node, root);\n        }\n        if (node.namespaceURI) {\n            markup.ns = node.namespaceURI;\n        }\n        if (markup.ns == null) {\n            if ([\n                'body',\n                'div',\n                'section',\n                'main',\n                'nav',\n                'footer',\n                'span',\n                'p',\n                'h1',\n                'h2',\n                'h3',\n                'h4',\n                'h5',\n                'h6',\n                'ul',\n                'ol',\n                'dl',\n                'center',\n                'strong',\n                'pre',\n                'form',\n                'select',\n                'textarea',\n                'fieldset',\n                'marquee',\n                'bgsound',\n                'iframe',\n                'frameset',\n            ].includes(node.tagName)) {\n                markup.ns = Dom.ns.xhtml;\n            }\n            else if (ns) {\n                markup.ns = ns;\n            }\n        }\n        if (selector) {\n            markup.selector = selector;\n        }\n        if (groupSelector != null) {\n            markup.groupSelector = groupSelector;\n        }\n        return {\n            markup,\n            attrs,\n            isCSSSelector,\n        };\n    }\n    function xml2json(xml) {\n        const sanitized = Markup.sanitize(xml);\n        const doc = Dom.parseXML(sanitized, { mimeType: 'image/svg+xml' });\n        const nodes = Array.prototype.slice.call(doc.childNodes);\n        const attrMap = {};\n        const markupMap = new WeakMap();\n        const parse = (node, root, ns) => {\n            const data = parseNode(node, root, ns);\n            if (data == null) {\n                const parent = markupMap.get(node.parentNode);\n                if (parent && node.textContent) {\n                    parent.textContent = node.textContent;\n                }\n            }\n            else {\n                const { markup, attrs, isCSSSelector } = data;\n                markupMap.set(node, markup);\n                if (markup.selector && attrs != null) {\n                    if (Object.keys(attrs).length) {\n                        attrMap[markup.selector] = attrs;\n                    }\n                    if (isCSSSelector) {\n                        delete markup.selector;\n                    }\n                }\n                if (node.childNodes && node.childNodes.length > 0) {\n                    for (let i = 0, l = node.childNodes.length; i < l; i += 1) {\n                        const child = node.childNodes[i];\n                        const childMarkup = parse(child, root, markup.ns);\n                        if (childMarkup) {\n                            if (markup.children == null) {\n                                markup.children = [];\n                            }\n                            markup.children.push(childMarkup);\n                        }\n                    }\n                }\n                return markup;\n            }\n        };\n        const markup = nodes\n            .map((node) => parse(node, node))\n            .filter((mk) => mk != null);\n        return {\n            markup,\n            attrs: attrMap,\n        };\n    }\n    Markup.xml2json = xml2json;\n})(Markup || (Markup = {}));\n// eslint-disable-next-line\n(function (Markup) {\n    function getPortContainerMarkup() {\n        return 'g';\n    }\n    Markup.getPortContainerMarkup = getPortContainerMarkup;\n    function getPortMarkup() {\n        return {\n            tagName: 'circle',\n            selector: 'circle',\n            attrs: {\n                r: 10,\n                fill: '#FFFFFF',\n                stroke: '#000000',\n            },\n        };\n    }\n    Markup.getPortMarkup = getPortMarkup;\n    function getPortLabelMarkup() {\n        return {\n            tagName: 'text',\n            selector: 'text',\n            attrs: {\n                fill: '#000000',\n            },\n        };\n    }\n    Markup.getPortLabelMarkup = getPortLabelMarkup;\n})(Markup || (Markup = {}));\n// eslint-disable-next-line\n(function (Markup) {\n    function getEdgeMarkup() {\n        return Markup.sanitize(`\n    <path class=\"connection\" stroke=\"black\" d=\"M 0 0 0 0\"/>\n    <path class=\"source-marker\" fill=\"black\" stroke=\"black\" d=\"M 0 0 0 0\"/>\n    <path class=\"target-marker\" fill=\"black\" stroke=\"black\" d=\"M 0 0 0 0\"/>\n    <path class=\"connection-wrap\" d=\"M 0 0 0 0\"/>\n    <g class=\"labels\"/>\n    <g class=\"vertices\"/>\n    <g class=\"arrowheads\"/>\n    <g class=\"tools\"/>\n  `);\n    }\n    Markup.getEdgeMarkup = getEdgeMarkup;\n    function getEdgeToolMarkup() {\n        return Markup.sanitize(`\n    <g class=\"edge-tool\">\n      <g class=\"tool-remove\" event=\"edge:remove\">\n        <circle r=\"11\" />\n        <path transform=\"scale(.8) translate(-16, -16)\" d=\"M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248z\" />\n        <title>Remove edge.</title>\n      </g>\n      <g class=\"tool-options\" event=\"edge:options\">\n        <circle r=\"11\" transform=\"translate(25)\"/>\n        <path fill=\"white\" transform=\"scale(.55) translate(29, -16)\" d=\"M31.229,17.736c0.064-0.571,0.104-1.148,0.104-1.736s-0.04-1.166-0.104-1.737l-4.377-1.557c-0.218-0.716-0.504-1.401-0.851-2.05l1.993-4.192c-0.725-0.91-1.549-1.734-2.458-2.459l-4.193,1.994c-0.647-0.347-1.334-0.632-2.049-0.849l-1.558-4.378C17.165,0.708,16.588,0.667,16,0.667s-1.166,0.041-1.737,0.105L12.707,5.15c-0.716,0.217-1.401,0.502-2.05,0.849L6.464,4.005C5.554,4.73,4.73,5.554,4.005,6.464l1.994,4.192c-0.347,0.648-0.632,1.334-0.849,2.05l-4.378,1.557C0.708,14.834,0.667,15.412,0.667,16s0.041,1.165,0.105,1.736l4.378,1.558c0.217,0.715,0.502,1.401,0.849,2.049l-1.994,4.193c0.725,0.909,1.549,1.733,2.459,2.458l4.192-1.993c0.648,0.347,1.334,0.633,2.05,0.851l1.557,4.377c0.571,0.064,1.148,0.104,1.737,0.104c0.588,0,1.165-0.04,1.736-0.104l1.558-4.377c0.715-0.218,1.399-0.504,2.049-0.851l4.193,1.993c0.909-0.725,1.733-1.549,2.458-2.458l-1.993-4.193c0.347-0.647,0.633-1.334,0.851-2.049L31.229,17.736zM16,20.871c-2.69,0-4.872-2.182-4.872-4.871c0-2.69,2.182-4.872,4.872-4.872c2.689,0,4.871,2.182,4.871,4.872C20.871,18.689,18.689,20.871,16,20.871z\"/>\n        <title>Edge options.</title>\n      </g>\n    </g>\n  `);\n    }\n    Markup.getEdgeToolMarkup = getEdgeToolMarkup;\n    function getEdgeVertexMarkup() {\n        return Markup.sanitize(`\n    <g class=\"vertex-group\" transform=\"translate(<%= x %>, <%= y %>)\">\n      <circle class=\"vertex\" data-index=\"<%= index %>\" r=\"10\" />\n      <path class=\"vertex-remove-area\" data-index=\"<%= index %>\" d=\"M16,5.333c-7.732,0-14,4.701-14,10.5c0,1.982,0.741,3.833,2.016,5.414L2,25.667l5.613-1.441c2.339,1.317,5.237,2.107,8.387,2.107c7.732,0,14-4.701,14-10.5C30,10.034,23.732,5.333,16,5.333z\" transform=\"translate(5, -33)\"/>\n      <path class=\"vertex-remove\" data-index=\"<%= index %>\" transform=\"scale(.8) translate(9.5, -37)\" d=\"M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248z\">\n      <title>Remove vertex.</title>\n      </path>\n    </g>\n  `);\n    }\n    Markup.getEdgeVertexMarkup = getEdgeVertexMarkup;\n    function getEdgeArrowheadMarkup() {\n        return Markup.sanitize(`\n    <g class=\"arrowhead-group arrowhead-group-<%= end %>\">\n      <path class=\"arrowhead\" data-terminal=\"<%= end %>\" d=\"M 26 0 L 0 13 L 26 26 z\" />\n    </g>\n  `);\n    }\n    Markup.getEdgeArrowheadMarkup = getEdgeArrowheadMarkup;\n})(Markup || (Markup = {}));\n// eslint-disable-next-line\n(function (Markup) {\n    function getForeignObjectMarkup(bare = false) {\n        return {\n            tagName: 'foreignObject',\n            selector: 'fo',\n            children: [\n                {\n                    ns: Dom.ns.xhtml,\n                    tagName: 'body',\n                    selector: 'foBody',\n                    attrs: {\n                        xmlns: Dom.ns.xhtml,\n                    },\n                    style: {\n                        width: '100%',\n                        height: '100%',\n                        background: 'transparent',\n                    },\n                    children: bare\n                        ? []\n                        : [\n                            {\n                                tagName: 'div',\n                                selector: 'foContent',\n                                style: {\n                                    width: '100%',\n                                    height: '100%',\n                                },\n                            },\n                        ],\n                },\n            ],\n        };\n    }\n    Markup.getForeignObjectMarkup = getForeignObjectMarkup;\n})(Markup || (Markup = {}));\n//# sourceMappingURL=markup.js.map"]},"metadata":{},"sourceType":"module"}