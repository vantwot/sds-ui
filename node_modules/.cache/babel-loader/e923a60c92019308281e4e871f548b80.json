{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { XFlowNodeCommands, XFlowEdgeCommands } from '@antv/xflow-core';\nimport { get } from 'lodash';\nimport { onConfigChange, getGraphInstance } from './util';\n/** 节点移动时，实时更新位置信息，内置之后可去掉 */\n\nexport const movedNode = (e, cmds) => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    node\n  } = e;\n\n  if (!node) {\n    return;\n  }\n\n  const {\n    data\n  } = node; // 更新组内元素\n\n  if (data === null || data === void 0 ? void 0 : data.groupChildren) {\n    const x6Graph = getGraphInstance();\n    data === null || data === void 0 ? void 0 : data.groupChildren.forEach(id => __awaiter(void 0, void 0, void 0, function* () {\n      var _a;\n\n      const currentNode = x6Graph.getCellById(id);\n      const position = (_a = currentNode.getPosition) === null || _a === void 0 ? void 0 : _a.call(currentNode);\n\n      if (currentNode && position) {\n        yield cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n          nodeConfig: Object.assign(Object.assign(Object.assign({}, currentNode.data), position), currentNode.getSize())\n        });\n      }\n    }));\n  }\n\n  const nodeConfig = Object.assign(Object.assign(Object.assign({}, node.data), node.getPosition()), node.getSize());\n  yield cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n    nodeConfig\n  });\n  onConfigChange({\n    type: 'move:node',\n    config: nodeConfig\n  });\n});\n/** 修改节点大小 */\n\nexport const resizeNode = (e, cmds) => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    node\n  } = e;\n\n  if (!node) {\n    return;\n  }\n\n  const nodeConfig = Object.assign(Object.assign(Object.assign({}, node.data), node.getPosition()), node.size());\n  yield cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n    nodeConfig\n  });\n  onConfigChange({\n    type: 'resize:node',\n    config: nodeConfig\n  });\n});\n\nconst getContainer = e => {\n  var _a;\n\n  let currentNode = (_a = e === null || e === void 0 ? void 0 : e.e) === null || _a === void 0 ? void 0 : _a.currentTarget;\n\n  if (!currentNode) {\n    return document.getElementsByClassName('xflow-canvas-root');\n  }\n\n  let containter = null;\n\n  while (!containter) {\n    const current = currentNode.getElementsByClassName('xflow-canvas-root');\n\n    if ((current === null || current === void 0 ? void 0 : current.length) > 0) {\n      containter = current;\n    }\n\n    currentNode = currentNode.parentNode;\n  }\n\n  return containter;\n};\n/** 设置 ports visible */\n\n\nexport const changePortsVisible = (visible, e) => {\n  const containers = getContainer(e);\n  Array.from(containers).forEach(container => {\n    var _a, _b;\n\n    const ports = container.querySelectorAll('.x6-port-body');\n    const graph = getGraphInstance(); // 选中中节点时不展示链接桩\n\n    const isSelectedNode = (_b = (_a = graph.getSelectedCells()) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.isNode();\n\n    for (let i = 0, len = ports.length; i < len; i = i + 1) {\n      ports[i].style.visibility = !isSelectedNode && visible ? 'visible' : 'hidden';\n    }\n  });\n};\n/** 添加辅助工具 */\n\nexport const addTools = e => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    edge\n  } = e;\n\n  if (!edge) {\n    return;\n  }\n\n  edge.addTools('vertices', 'ondbclick');\n});\n/** 移除辅助工具 */\n\nexport const removeTools = (e, cmds) => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    edge\n  } = e;\n\n  if (!edge) {\n    return;\n  }\n\n  if (edge.hasTools('ondbclick')) {\n    cmds.executeCommand(XFlowEdgeCommands.UPDATE_EDGE.id, {\n      edgeConfig: Object.assign(Object.assign({}, get(edge, 'data')), {\n        vertices: edge.getVertices()\n      })\n    });\n    edge.removeTools();\n  }\n});","map":{"version":3,"sources":["../../../src/flowchart-canvas/utils/events.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { XFlowNodeCommands, XFlowEdgeCommands } from '@antv/xflow-core';\nimport { get } from 'lodash';\nimport { onConfigChange, getGraphInstance } from './util';\n/** 节点移动时，实时更新位置信息，内置之后可去掉 */\nexport const movedNode = (e, cmds) => __awaiter(void 0, void 0, void 0, function* () {\n    const { node } = e;\n    if (!node) {\n        return;\n    }\n    const { data } = node;\n    // 更新组内元素\n    if (data === null || data === void 0 ? void 0 : data.groupChildren) {\n        const x6Graph = getGraphInstance();\n        data === null || data === void 0 ? void 0 : data.groupChildren.forEach((id) => __awaiter(void 0, void 0, void 0, function* () {\n            var _a;\n            const currentNode = x6Graph.getCellById(id);\n            const position = (_a = currentNode.getPosition) === null || _a === void 0 ? void 0 : _a.call(currentNode);\n            if (currentNode && position) {\n                yield cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n                    nodeConfig: Object.assign(Object.assign(Object.assign({}, currentNode.data), position), currentNode.getSize()),\n                });\n            }\n        }));\n    }\n    const nodeConfig = Object.assign(Object.assign(Object.assign({}, node.data), node.getPosition()), node.getSize());\n    yield cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n        nodeConfig,\n    });\n    onConfigChange({ type: 'move:node', config: nodeConfig });\n});\n/** 修改节点大小 */\nexport const resizeNode = (e, cmds) => __awaiter(void 0, void 0, void 0, function* () {\n    const { node } = e;\n    if (!node) {\n        return;\n    }\n    const nodeConfig = Object.assign(Object.assign(Object.assign({}, node.data), node.getPosition()), node.size());\n    yield cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n        nodeConfig,\n    });\n    onConfigChange({ type: 'resize:node', config: nodeConfig });\n});\nconst getContainer = e => {\n    var _a;\n    let currentNode = (_a = e === null || e === void 0 ? void 0 : e.e) === null || _a === void 0 ? void 0 : _a.currentTarget;\n    if (!currentNode) {\n        return document.getElementsByClassName('xflow-canvas-root');\n    }\n    let containter = null;\n    while (!containter) {\n        const current = currentNode.getElementsByClassName('xflow-canvas-root');\n        if ((current === null || current === void 0 ? void 0 : current.length) > 0) {\n            containter = current;\n        }\n        currentNode = currentNode.parentNode;\n    }\n    return containter;\n};\n/** 设置 ports visible */\nexport const changePortsVisible = (visible, e) => {\n    const containers = getContainer(e);\n    Array.from(containers).forEach((container) => {\n        var _a, _b;\n        const ports = container.querySelectorAll('.x6-port-body');\n        const graph = getGraphInstance();\n        // 选中中节点时不展示链接桩\n        const isSelectedNode = (_b = (_a = graph.getSelectedCells()) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.isNode();\n        for (let i = 0, len = ports.length; i < len; i = i + 1) {\n            ports[i].style.visibility = !isSelectedNode && visible ? 'visible' : 'hidden';\n        }\n    });\n};\n/** 添加辅助工具 */\nexport const addTools = (e) => __awaiter(void 0, void 0, void 0, function* () {\n    const { edge } = e;\n    if (!edge) {\n        return;\n    }\n    edge.addTools('vertices', 'ondbclick');\n});\n/** 移除辅助工具 */\nexport const removeTools = (e, cmds) => __awaiter(void 0, void 0, void 0, function* () {\n    const { edge } = e;\n    if (!edge) {\n        return;\n    }\n    if (edge.hasTools('ondbclick')) {\n        cmds.executeCommand(XFlowEdgeCommands.UPDATE_EDGE.id, {\n            edgeConfig: Object.assign(Object.assign({}, get(edge, 'data')), { vertices: edge.getVertices() }),\n        });\n        edge.removeTools();\n    }\n});\n//# sourceMappingURL=events.js.map"]},"metadata":{},"sourceType":"module"}