{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar _dec, _class;\n\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nvar UpdateStyleAttributePlugin = (_dec = injectable(), _dec(_class = function () {\n  function UpdateStyleAttributePlugin() {\n    _classCallCheck(this, UpdateStyleAttributePlugin);\n  }\n\n  _createClass(UpdateStyleAttributePlugin, [{\n    key: \"apply\",\n    value: function apply(layer, _ref) {\n      var _this = this;\n\n      var styleAttributeService = _ref.styleAttributeService;\n      layer.hooks.init.tap('UpdateStyleAttributePlugin', function () {\n        _this.initStyleAttribute(layer, {\n          styleAttributeService: styleAttributeService\n        });\n      });\n      layer.hooks.beforeRender.tap('UpdateStyleAttributePlugin', function () {\n        if (layer.layerModelNeedUpdate) {\n          return;\n        }\n\n        _this.updateStyleAtrribute(layer, {\n          styleAttributeService: styleAttributeService\n        });\n      });\n    }\n  }, {\n    key: \"updateStyleAtrribute\",\n    value: function updateStyleAtrribute(layer, _ref2) {\n      var styleAttributeService = _ref2.styleAttributeService;\n      var attributes = styleAttributeService.getLayerStyleAttributes() || [];\n      var filter = styleAttributeService.getLayerStyleAttribute('filter');\n      var shape = styleAttributeService.getLayerStyleAttribute('shape');\n\n      if (filter && filter.needRegenerateVertices || shape && shape.needRegenerateVertices) {\n        layer.layerModelNeedUpdate = true;\n        attributes.forEach(function (attr) {\n          return attr.needRegenerateVertices = false;\n        });\n        return;\n      }\n\n      attributes.filter(function (attribute) {\n        return attribute.needRegenerateVertices;\n      }).forEach(function (attribute) {\n        styleAttributeService.updateAttributeByFeatureRange(attribute.name, layer.getEncodedData(), attribute.featureRange.startIndex, attribute.featureRange.endIndex);\n        attribute.needRegenerateVertices = false;\n      });\n    }\n  }, {\n    key: \"initStyleAttribute\",\n    value: function initStyleAttribute(layer, _ref3) {\n      var styleAttributeService = _ref3.styleAttributeService;\n      var attributes = styleAttributeService.getLayerStyleAttributes() || [];\n      attributes.filter(function (attribute) {\n        return attribute.needRegenerateVertices;\n      }).forEach(function (attribute) {\n        styleAttributeService.updateAttributeByFeatureRange(attribute.name, layer.getEncodedData(), attribute.featureRange.startIndex, attribute.featureRange.endIndex);\n        attribute.needRegenerateVertices = false;\n      });\n    }\n  }]);\n\n  return UpdateStyleAttributePlugin;\n}()) || _class);\nexport { UpdateStyleAttributePlugin as default };","map":{"version":3,"sources":["../../src/plugins/UpdateStyleAttributePlugin.ts"],"names":["injectable","UpdateStyleAttributePlugin","styleAttributeService","layer","attributes","filter","shape","attr","attribute"],"mappings":";;;;;AAMA,SAAA,UAAA,QAAA,WAAA;AACA,OAAA,kBAAA;IAMqBC,0B,WADpBD,UAAU,E;;;;;;;WAET,SAAA,KAAA,CAAA,KAAA,EAAA,IAAA,EAKE;AAAA,UAAA,KAAA,GAAA,IAAA;;AAAA,UAFEE,qBAEF,GAAA,IAAA,CAFEA,qBAEF;AACAC,MAAAA,KAAK,CAALA,KAAAA,CAAAA,IAAAA,CAAAA,GAAAA,CAAAA,4BAAAA,EAAmD,YAAM;AACvD,QAAA,KAAI,CAAJ,kBAAA,CAAA,KAAA,EAA+B;AAAED,UAAAA,qBAAqB,EAArBA;AAAF,SAA/B;AADFC,OAAAA;AASAA,MAAAA,KAAK,CAALA,KAAAA,CAAAA,YAAAA,CAAAA,GAAAA,CAAAA,4BAAAA,EAA2D,YAAM;AAC/D,YAAIA,KAAK,CAAT,oBAAA,EAAgC;AAC9B;AACD;;AACD,QAAA,KAAI,CAAJ,oBAAA,CAAA,KAAA,EAAiC;AAAED,UAAAA,qBAAqB,EAArBA;AAAF,SAAjC;AAJFC,OAAAA;AAMD;;;WACD,SAAA,oBAAA,CAAA,KAAA,EAAA,KAAA,EAKE;AAAA,UAFED,qBAEF,GAAA,KAAA,CAFEA,qBAEF;AACA,UAAME,UAAU,GAAGF,qBAAqB,CAArBA,uBAAAA,MAAnB,EAAA;AACA,UAAMG,MAAM,GAAGH,qBAAqB,CAArBA,sBAAAA,CAAf,QAAeA,CAAf;AACA,UAAMI,KAAK,GAAGJ,qBAAqB,CAArBA,sBAAAA,CAAd,OAAcA,CAAd;;AACA,UACGG,MAAM,IAAIA,MAAM,CAAjB,sBAACA,IACAC,KAAK,IAAIA,KAAK,CAFjB,sBAAA,EAGE;AACAH,QAAAA,KAAK,CAALA,oBAAAA,GAAAA,IAAAA;AACAC,QAAAA,UAAU,CAAVA,OAAAA,CAAmB,UAAA,IAAA,EAAA;AAAA,iBAAWG,IAAI,CAAJA,sBAAAA,GAAX,KAAA;AAAnBH,SAAAA;AACA;AACD;;AACDA,MAAAA,UAAU,CAAVA,MAAAA,CACU,UAAA,SAAA,EAAA;AAAA,eAAeI,SAAS,CAAxB,sBAAA;AADVJ,OAAAA,EAAAA,OAAAA,CAEW,UAAA,SAAA,EAAe;AAEtBF,QAAAA,qBAAqB,CAArBA,6BAAAA,CACEM,SAAS,CADXN,IAAAA,EAEEC,KAAK,CAFPD,cAEEC,EAFFD,EAGEM,SAAS,CAATA,YAAAA,CAHFN,UAAAA,EAIEM,SAAS,CAATA,YAAAA,CAJFN,QAAAA;AAMAM,QAAAA,SAAS,CAATA,sBAAAA,GAAAA,KAAAA;AAVJJ,OAAAA;AAYD;;;WAED,SAAA,kBAAA,CAAA,KAAA,EAAA,KAAA,EAKE;AAAA,UAFEF,qBAEF,GAAA,KAAA,CAFEA,qBAEF;AACA,UAAME,UAAU,GAAGF,qBAAqB,CAArBA,uBAAAA,MAAnB,EAAA;AACAE,MAAAA,UAAU,CAAVA,MAAAA,CACU,UAAA,SAAA,EAAA;AAAA,eAAeI,SAAS,CAAxB,sBAAA;AADVJ,OAAAA,EAAAA,OAAAA,CAEW,UAAA,SAAA,EAAe;AAEtBF,QAAAA,qBAAqB,CAArBA,6BAAAA,CACEM,SAAS,CADXN,IAAAA,EAEEC,KAAK,CAFPD,cAEEC,EAFFD,EAGEM,SAAS,CAATA,YAAAA,CAHFN,UAAAA,EAIEM,SAAS,CAATA,YAAAA,CAJFN,QAAAA;AAMAM,QAAAA,SAAS,CAATA,sBAAAA,GAAAA,KAAAA;AAVJJ,OAAAA;AAYD;;;;;SAzEkBH,0B","sourcesContent":["import {\n  ILayer,\n  ILayerPlugin,\n  IStyleAttributeService,\n  TYPES,\n} from '@antv/l7-core';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\n\n/**\n * 在初始化阶段完成属性的注册，以及首次根据 Layer 指定的三角化方法完成 indices 和 attribute 的创建\n */\n@injectable()\nexport default class UpdateStyleAttributePlugin implements ILayerPlugin {\n  public apply(\n    layer: ILayer,\n    {\n      styleAttributeService,\n    }: { styleAttributeService: IStyleAttributeService },\n  ) {\n    layer.hooks.init.tap('UpdateStyleAttributePlugin', () => {\n      this.initStyleAttribute(layer, { styleAttributeService });\n    });\n\n    // layer.hooks.beforeRenderData.tap('styleAttributeService', () => {\n    //   // layer.layerModelNeedUpdate = true;\n    //   return true;\n    // });\n\n    layer.hooks.beforeRender.tap('UpdateStyleAttributePlugin', () => {\n      if (layer.layerModelNeedUpdate) {\n        return;\n      }\n      this.updateStyleAtrribute(layer, { styleAttributeService });\n    });\n  }\n  private updateStyleAtrribute(\n    layer: ILayer,\n    {\n      styleAttributeService,\n    }: { styleAttributeService: IStyleAttributeService },\n  ) {\n    const attributes = styleAttributeService.getLayerStyleAttributes() || [];\n    const filter = styleAttributeService.getLayerStyleAttribute('filter');\n    const shape = styleAttributeService.getLayerStyleAttribute('shape');\n    if (\n      (filter && filter.needRegenerateVertices) ||\n      (shape && shape.needRegenerateVertices) // TODO:Shape 更新重新build\n    ) {\n      layer.layerModelNeedUpdate = true;\n      attributes.forEach((attr) => (attr.needRegenerateVertices = false));\n      return;\n    }\n    attributes\n      .filter((attribute) => attribute.needRegenerateVertices)\n      .forEach((attribute) => {\n        // 精确更新某个/某些 feature(s)，需要传入 featureIdx d\n        styleAttributeService.updateAttributeByFeatureRange(\n          attribute.name,\n          layer.getEncodedData(), // 获取经过 mapping 最新的数据\n          attribute.featureRange.startIndex,\n          attribute.featureRange.endIndex,\n        );\n        attribute.needRegenerateVertices = false;\n      });\n  }\n\n  private initStyleAttribute(\n    layer: ILayer,\n    {\n      styleAttributeService,\n    }: { styleAttributeService: IStyleAttributeService },\n  ) {\n    const attributes = styleAttributeService.getLayerStyleAttributes() || [];\n    attributes\n      .filter((attribute) => attribute.needRegenerateVertices)\n      .forEach((attribute) => {\n        // 精确更新某个/某些 feature(s)，需要传入 featureIdx d\n        styleAttributeService.updateAttributeByFeatureRange(\n          attribute.name,\n          layer.getEncodedData(), // 获取经过 mapping 最新的数据\n          attribute.featureRange.startIndex,\n          attribute.featureRange.endIndex,\n        );\n        attribute.needRegenerateVertices = false;\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}