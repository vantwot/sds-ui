{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nexport const defaultFormSchemaService = args => __awaiter(void 0, void 0, void 0, function* () {\n  var _a;\n\n  const {\n    targetType\n  } = args;\n  const isGroup = (_a = args.targetData) === null || _a === void 0 ? void 0 : _a.isGroup;\n  const groupSchema = {\n    tabs: [{\n      name: '设置',\n      groups: [{\n        name: 'groupName',\n        controls: [{\n          label: '分组名',\n          name: 'group-service',\n          shape: 'group-service',\n          placeholder: '分组名称'\n        }]\n      }]\n    }]\n  };\n  const nodeSchema = {\n    tabs: [{\n      name: '设置',\n      groups: [{\n        name: 'groupName',\n        controls: [{\n          label: '节点名',\n          name: 'node-service',\n          shape: 'node-service',\n          placeholder: '节点名称'\n        }]\n      }]\n    }]\n  };\n  const edgeSchema = {\n    tabs: [{\n      name: '设置',\n      groups: [{\n        name: 'groupName',\n        controls: [{\n          label: '边',\n          name: 'edge-service',\n          shape: 'edge-service',\n          placeholder: '边名称'\n        }]\n      }]\n    }]\n  };\n\n  if (isGroup) {\n    return groupSchema;\n  }\n\n  if (targetType === 'node') {\n    return nodeSchema;\n  }\n\n  if (targetType === 'edge') {\n    return edgeSchema;\n  }\n\n  return {\n    tabs: [{\n      name: '设置',\n      groups: [{\n        name: 'groupName',\n        controls: [{\n          label: '',\n          name: 'canvas-service',\n          shape: 'canvas-service'\n        }]\n      }]\n    }]\n  };\n});","map":{"version":3,"sources":["../../../src/flowchart-editor-panel/form-schema-service/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAO,MAAM,wBAAwB,GAA8C,IAAN,IAAa,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;;;AACxF,QAAM;AAAE,IAAA;AAAF,MAAiB,IAAvB;AACA,QAAM,OAAO,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,UAAL,MAAe,IAAf,IAAe,EAAA,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAe,EAAA,CAAE,OAAjC;AAEA,QAAM,WAAW,GAA6B;AAC5C,IAAA,IAAI,EAAE,CACJ;AACE,MAAA,IAAI,EAAE,IADR;AAEE,MAAA,MAAM,EAAE,CACN;AACE,QAAA,IAAI,EAAE,WADR;AAEE,QAAA,QAAQ,EAAE,CACR;AACE,UAAA,KAAK,EAAE,KADT;AAEE,UAAA,IAAI,EAAE,eAFR;AAGE,UAAA,KAAK,EAAE,eAHT;AAIE,UAAA,WAAW,EAAE;AAJf,SADQ;AAFZ,OADM;AAFV,KADI;AADsC,GAA9C;AAqBA,QAAM,UAAU,GAA6B;AAC3C,IAAA,IAAI,EAAE,CACJ;AACE,MAAA,IAAI,EAAE,IADR;AAEE,MAAA,MAAM,EAAE,CACN;AACE,QAAA,IAAI,EAAE,WADR;AAEE,QAAA,QAAQ,EAAE,CACR;AACE,UAAA,KAAK,EAAE,KADT;AAEE,UAAA,IAAI,EAAE,cAFR;AAGE,UAAA,KAAK,EAAE,cAHT;AAIE,UAAA,WAAW,EAAE;AAJf,SADQ;AAFZ,OADM;AAFV,KADI;AADqC,GAA7C;AAoBA,QAAM,UAAU,GAA6B;AAC3C,IAAA,IAAI,EAAE,CACJ;AACE,MAAA,IAAI,EAAE,IADR;AAEE,MAAA,MAAM,EAAE,CACN;AACE,QAAA,IAAI,EAAE,WADR;AAEE,QAAA,QAAQ,EAAE,CACR;AACE,UAAA,KAAK,EAAE,GADT;AAEE,UAAA,IAAI,EAAE,cAFR;AAGE,UAAA,KAAK,EAAE,cAHT;AAIE,UAAA,WAAW,EAAE;AAJf,SADQ;AAFZ,OADM;AAFV,KADI;AADqC,GAA7C;;AAqBA,MAAI,OAAJ,EAAa;AACX,WAAO,WAAP;AACD;;AAED,MAAI,UAAU,KAAK,MAAnB,EAA2B;AACzB,WAAO,UAAP;AACD;;AAED,MAAI,UAAU,KAAK,MAAnB,EAA2B;AACzB,WAAO,UAAP;AACD;;AACD,SAAO;AACL,IAAA,IAAI,EAAE,CACJ;AACE,MAAA,IAAI,EAAE,IADR;AAEE,MAAA,MAAM,EAAE,CACN;AACE,QAAA,IAAI,EAAE,WADR;AAEE,QAAA,QAAQ,EAAE,CACR;AACE,UAAA,KAAK,EAAE,EADT;AAEE,UAAA,IAAI,EAAE,gBAFR;AAGE,UAAA,KAAK,EAAE;AAHT,SADQ;AAFZ,OADM;AAFV,KADI;AADD,GAAP;AAmBD,CAhGyF,CAAnF","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport const defaultFormSchemaService = (args) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n    const { targetType } = args;\n    const isGroup = (_a = args.targetData) === null || _a === void 0 ? void 0 : _a.isGroup;\n    const groupSchema = {\n        tabs: [\n            {\n                name: '设置',\n                groups: [\n                    {\n                        name: 'groupName',\n                        controls: [\n                            {\n                                label: '分组名',\n                                name: 'group-service',\n                                shape: 'group-service',\n                                placeholder: '分组名称',\n                            },\n                        ],\n                    },\n                ],\n            },\n        ],\n    };\n    const nodeSchema = {\n        tabs: [\n            {\n                name: '设置',\n                groups: [\n                    {\n                        name: 'groupName',\n                        controls: [\n                            {\n                                label: '节点名',\n                                name: 'node-service',\n                                shape: 'node-service',\n                                placeholder: '节点名称',\n                            },\n                        ],\n                    },\n                ],\n            },\n        ],\n    };\n    const edgeSchema = {\n        tabs: [\n            {\n                name: '设置',\n                groups: [\n                    {\n                        name: 'groupName',\n                        controls: [\n                            {\n                                label: '边',\n                                name: 'edge-service',\n                                shape: 'edge-service',\n                                placeholder: '边名称',\n                            },\n                        ],\n                    },\n                ],\n            },\n        ],\n    };\n    if (isGroup) {\n        return groupSchema;\n    }\n    if (targetType === 'node') {\n        return nodeSchema;\n    }\n    if (targetType === 'edge') {\n        return edgeSchema;\n    }\n    return {\n        tabs: [\n            {\n                name: '设置',\n                groups: [\n                    {\n                        name: 'groupName',\n                        controls: [\n                            {\n                                label: '',\n                                name: 'canvas-service',\n                                shape: 'canvas-service',\n                            },\n                        ],\n                    },\n                ],\n            },\n        ],\n    };\n});\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}