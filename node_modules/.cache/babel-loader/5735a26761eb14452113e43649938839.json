{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer, useEffect, useState } from 'react';\nimport { get } from 'axios';\nconst initialState = {\n  isLoading: true,\n  isError: false,\n  data: []\n};\n\nconst dataFetchReducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return { ...state,\n        isLoading: true,\n        isError: false\n      };\n\n    case 'FETCH_SUCCESS':\n      return { ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload\n      };\n\n    case 'FETCH_FAILURE':\n      return { ...state,\n        isLoading: false,\n        isError: true\n      };\n\n    case 'FETCH_EMPTY':\n      return { ...state,\n        isLoading: false,\n        isError: false,\n        isEmpty: true\n      };\n\n    default:\n      throw new Error();\n  }\n};\n\nexport const APIRequest = initialUrl => {\n  _s();\n\n  const [url, setUrl] = useState(initialUrl);\n  const [state, dispatch] = useReducer(dataFetchReducer, initialState);\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({\n        type: 'FETCH_INIT'\n      });\n\n      try {\n        const result = await get(process.env.REACT_APP_API_URL + url);\n\n        if (!didCancel) {\n          if (result.status === 204) {\n            dispatch({\n              type: 'FETCH_EMPTY'\n            });\n          } else dispatch({\n            type: 'FETCH_SUCCESS',\n            payload: result.data\n          });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({\n            type: 'FETCH_FAILURE'\n          });\n        }\n      }\n    };\n\n    fetchData();\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n  return [state, setUrl];\n};\n\n_s(APIRequest, \"mEbuEEYX/TYtCvJ0Xj7GugW6FO0=\");\n\n_c = APIRequest;\n\nvar _c;\n\n$RefreshReg$(_c, \"APIRequest\");","map":{"version":3,"sources":["/home/manolo/sds-ui/src/apis/api.js"],"names":["useReducer","useEffect","useState","get","initialState","isLoading","isError","data","dataFetchReducer","state","action","type","payload","isEmpty","Error","APIRequest","initialUrl","url","setUrl","dispatch","didCancel","fetchData","result","process","env","REACT_APP_API_URL","status","error"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,SAASC,GAAT,QAAoB,OAApB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,IADQ;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,IAAI,EAAE;AAHa,CAArB;;AAMA,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,YAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELJ,QAAAA,SAAS,EAAE,IAFN;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAK,eAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELJ,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,OAAO,EAAE,KAHJ;AAILC,QAAAA,IAAI,EAAEG,MAAM,CAACE;AAJR,OAAP;;AAMF,SAAK,eAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELJ,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAK,aAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELJ,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,OAAO,EAAE,KAHJ;AAILO,QAAAA,OAAO,EAAE;AAJJ,OAAP;;AAMF;AACE,YAAM,IAAIC,KAAJ,EAAN;AA5BJ;AA8BD,CA/BD;;AAiCA,OAAO,MAAMC,UAAU,GAAIC,UAAD,IAAgB;AAAA;;AACxC,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBhB,QAAQ,CAACc,UAAD,CAA9B;AAEA,QAAM,CAACP,KAAD,EAAQU,QAAR,IAAoBnB,UAAU,CAACQ,gBAAD,EAAmBJ,YAAnB,CAApC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImB,SAAS,GAAG,KAAhB;;AAEA,UAAMC,SAAS,GAAG,YAAY;AAC5BF,MAAAA,QAAQ,CAAC;AAAER,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;;AAEA,UAAI;AACF,cAAMW,MAAM,GAAG,MAAMnB,GAAG,CAACoB,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAAgCR,GAAjC,CAAxB;;AAEA,YAAI,CAACG,SAAL,EAAgB;AACd,cAAIE,MAAM,CAACI,MAAP,KAAkB,GAAtB,EAA2B;AACzBP,YAAAA,QAAQ,CAAC;AAAER,cAAAA,IAAI,EAAE;AAAR,aAAD,CAAR;AACD,WAFD,MAEOQ,QAAQ,CAAC;AAAER,YAAAA,IAAI,EAAE,eAAR;AAAyBC,YAAAA,OAAO,EAAEU,MAAM,CAACf;AAAzC,WAAD,CAAR;AACR;AACF,OARD,CAQE,OAAOoB,KAAP,EAAc;AACd,YAAI,CAACP,SAAL,EAAgB;AACdD,UAAAA,QAAQ,CAAC;AAAER,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAR;AACD;AACF;AACF,KAhBD;;AAkBAU,IAAAA,SAAS;AAET,WAAO,MAAM;AACXD,MAAAA,SAAS,GAAG,IAAZ;AACD,KAFD;AAGD,GA1BQ,EA0BN,CAACH,GAAD,CA1BM,CAAT;AA4BA,SAAO,CAACR,KAAD,EAAQS,MAAR,CAAP;AACD,CAlCM;;GAAMH,U;;KAAAA,U","sourcesContent":["import { useReducer, useEffect, useState } from 'react';\nimport { get } from 'axios';\n\nconst initialState = {\n  isLoading: true,\n  isError: false,\n  data: [],\n};\n\nconst dataFetchReducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return {\n        ...state,\n        isLoading: true,\n        isError: false,\n      };\n    case 'FETCH_SUCCESS':\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload,\n      };\n    case 'FETCH_FAILURE':\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n      };\n    case 'FETCH_EMPTY':\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        isEmpty: true,\n      };\n    default:\n      throw new Error();\n  }\n};\n\nexport const APIRequest = (initialUrl) => {\n  const [url, setUrl] = useState(initialUrl);\n\n  const [state, dispatch] = useReducer(dataFetchReducer, initialState);\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({ type: 'FETCH_INIT' });\n\n      try {\n        const result = await get(process.env.REACT_APP_API_URL + url);\n\n        if (!didCancel) {\n          if (result.status === 204) {\n            dispatch({ type: 'FETCH_EMPTY' });\n          } else dispatch({ type: 'FETCH_SUCCESS', payload: result.data });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_FAILURE' });\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n\n  return [state, setUrl];\n};\n"]},"metadata":{},"sourceType":"module"}