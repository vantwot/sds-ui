{"ast":null,"code":"import _defineProperty from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Util } from '../../global/util';\nimport { Point } from '../../geometry';\nimport { View } from '../../view/view';\nimport { ToolsView } from '../../view/tool';\nexport var Vertices = /*#__PURE__*/function (_ToolsView$ToolItem) {\n  _inherits(Vertices, _ToolsView$ToolItem);\n\n  var _super = _createSuper(Vertices);\n\n  function Vertices() {\n    var _this;\n\n    _classCallCheck(this, Vertices);\n\n    _this = _super.apply(this, arguments);\n    _this.handles = [];\n    return _this;\n  }\n\n  _createClass(Vertices, [{\n    key: \"vertices\",\n    get: function get() {\n      return this.cellView.cell.getVertices();\n    }\n  }, {\n    key: \"onRender\",\n    value: function onRender() {\n      this.addClass(this.prefixClassName('edge-tool-vertices'));\n\n      if (this.options.addable) {\n        this.updatePath();\n      }\n\n      this.resetHandles();\n      this.renderHandles();\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var vertices = this.vertices;\n\n      if (vertices.length === this.handles.length) {\n        this.updateHandles();\n      } else {\n        this.resetHandles();\n        this.renderHandles();\n      }\n\n      if (this.options.addable) {\n        this.updatePath();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"resetHandles\",\n    value: function resetHandles() {\n      var _this2 = this;\n\n      var handles = this.handles;\n      this.handles = [];\n\n      if (handles) {\n        handles.forEach(function (handle) {\n          _this2.stopHandleListening(handle);\n\n          handle.remove();\n        });\n      }\n    }\n  }, {\n    key: \"renderHandles\",\n    value: function renderHandles() {\n      var _this3 = this;\n\n      var vertices = this.vertices;\n\n      for (var i = 0, l = vertices.length; i < l; i += 1) {\n        var vertex = vertices[i];\n        var createHandle = this.options.createHandle;\n        var processHandle = this.options.processHandle;\n        var handle = createHandle({\n          index: i,\n          graph: this.graph,\n          guard: function guard(evt) {\n            return _this3.guard(evt);\n          },\n          attrs: this.options.attrs || {}\n        });\n\n        if (processHandle) {\n          processHandle(handle);\n        }\n\n        this.graph.hook.onToolItemCreated({\n          name: 'vertices',\n          cell: this.cell,\n          view: this.cellView,\n          tool: handle\n        });\n        handle.updatePosition(vertex.x, vertex.y);\n        this.stamp(handle.container);\n        this.container.appendChild(handle.container);\n        this.handles.push(handle);\n        this.startHandleListening(handle);\n      }\n    }\n  }, {\n    key: \"updateHandles\",\n    value: function updateHandles() {\n      var vertices = this.vertices;\n\n      for (var i = 0, l = vertices.length; i < l; i += 1) {\n        var vertex = vertices[i];\n        var handle = this.handles[i];\n\n        if (handle) {\n          handle.updatePosition(vertex.x, vertex.y);\n        }\n      }\n    }\n  }, {\n    key: \"updatePath\",\n    value: function updatePath() {\n      var connection = this.childNodes.connection;\n\n      if (connection) {\n        connection.setAttribute('d', this.cellView.getConnectionPathData());\n      }\n    }\n  }, {\n    key: \"startHandleListening\",\n    value: function startHandleListening(handle) {\n      var edgeView = this.cellView;\n\n      if (edgeView.can('vertexMovable')) {\n        handle.on('change', this.onHandleChange, this);\n        handle.on('changing', this.onHandleChanging, this);\n        handle.on('changed', this.onHandleChanged, this);\n      }\n\n      if (edgeView.can('vertexDeletable')) {\n        handle.on('remove', this.onHandleRemove, this);\n      }\n    }\n  }, {\n    key: \"stopHandleListening\",\n    value: function stopHandleListening(handle) {\n      var edgeView = this.cellView;\n\n      if (edgeView.can('vertexMovable')) {\n        handle.off('change', this.onHandleChange, this);\n        handle.off('changing', this.onHandleChanging, this);\n        handle.off('changed', this.onHandleChanged, this);\n      }\n\n      if (edgeView.can('vertexDeletable')) {\n        handle.off('remove', this.onHandleRemove, this);\n      }\n    }\n  }, {\n    key: \"getNeighborPoints\",\n    value: function getNeighborPoints(index) {\n      var edgeView = this.cellView;\n      var vertices = this.vertices;\n      var prev = index > 0 ? vertices[index - 1] : edgeView.sourceAnchor;\n      var next = index < vertices.length - 1 ? vertices[index + 1] : edgeView.targetAnchor;\n      return {\n        prev: Point.create(prev),\n        next: Point.create(next)\n      };\n    }\n  }, {\n    key: \"getMouseEventArgs\",\n    value: function getMouseEventArgs(evt) {\n      var e = this.normalizeEvent(evt);\n\n      var _this$graph$snapToGri = this.graph.snapToGrid(e.clientX, e.clientY),\n          x = _this$graph$snapToGri.x,\n          y = _this$graph$snapToGri.y;\n\n      return {\n        e: e,\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"onHandleChange\",\n    value: function onHandleChange(_ref) {\n      var e = _ref.e;\n      this.focus();\n      var edgeView = this.cellView;\n      edgeView.cell.startBatch('move-vertex', {\n        ui: true,\n        toolId: this.cid\n      });\n\n      if (!this.options.stopPropagation) {\n        var _this$getMouseEventAr = this.getMouseEventArgs(e),\n            evt = _this$getMouseEventAr.e,\n            x = _this$getMouseEventAr.x,\n            y = _this$getMouseEventAr.y;\n\n        edgeView.notifyMouseDown(evt, x, y);\n      }\n    }\n  }, {\n    key: \"onHandleChanging\",\n    value: function onHandleChanging(_ref2) {\n      var handle = _ref2.handle,\n          e = _ref2.e;\n      var edgeView = this.cellView;\n      var index = handle.options.index;\n\n      var _this$getMouseEventAr2 = this.getMouseEventArgs(e),\n          evt = _this$getMouseEventAr2.e,\n          x = _this$getMouseEventAr2.x,\n          y = _this$getMouseEventAr2.y;\n\n      var vertex = {\n        x: x,\n        y: y\n      };\n      this.snapVertex(vertex, index);\n      edgeView.cell.setVertexAt(index, vertex, {\n        ui: true,\n        toolId: this.cid\n      });\n      handle.updatePosition(vertex.x, vertex.y);\n\n      if (!this.options.stopPropagation) {\n        edgeView.notifyMouseMove(evt, x, y);\n      }\n    }\n  }, {\n    key: \"onHandleChanged\",\n    value: function onHandleChanged(_ref3) {\n      var e = _ref3.e;\n      var options = this.options;\n      var edgeView = this.cellView;\n\n      if (options.addable) {\n        this.updatePath();\n      }\n\n      if (!options.removeRedundancies) {\n        return;\n      }\n\n      var verticesRemoved = edgeView.removeRedundantLinearVertices({\n        ui: true,\n        toolId: this.cid\n      });\n\n      if (verticesRemoved) {\n        this.render();\n      }\n\n      this.blur();\n      edgeView.cell.stopBatch('move-vertex', {\n        ui: true,\n        toolId: this.cid\n      });\n\n      if (this.eventData(e).vertexAdded) {\n        edgeView.cell.stopBatch('add-vertex', {\n          ui: true,\n          toolId: this.cid\n        });\n      }\n\n      var _this$getMouseEventAr3 = this.getMouseEventArgs(e),\n          evt = _this$getMouseEventAr3.e,\n          x = _this$getMouseEventAr3.x,\n          y = _this$getMouseEventAr3.y;\n\n      if (!this.options.stopPropagation) {\n        edgeView.notifyMouseUp(evt, x, y);\n      }\n\n      edgeView.checkMouseleave(evt);\n      options.onChanged && options.onChanged({\n        edge: edgeView.cell,\n        edgeView: edgeView\n      });\n    }\n  }, {\n    key: \"snapVertex\",\n    value: function snapVertex(vertex, index) {\n      var snapRadius = this.options.snapRadius || 0;\n\n      if (snapRadius > 0) {\n        var neighbors = this.getNeighborPoints(index);\n        var prev = neighbors.prev;\n        var next = neighbors.next;\n\n        if (Math.abs(vertex.x - prev.x) < snapRadius) {\n          vertex.x = prev.x;\n        } else if (Math.abs(vertex.x - next.x) < snapRadius) {\n          vertex.x = next.x;\n        }\n\n        if (Math.abs(vertex.y - prev.y) < snapRadius) {\n          vertex.y = neighbors.prev.y;\n        } else if (Math.abs(vertex.y - next.y) < snapRadius) {\n          vertex.y = next.y;\n        }\n      }\n    }\n  }, {\n    key: \"onHandleRemove\",\n    value: function onHandleRemove(_ref4) {\n      var handle = _ref4.handle,\n          e = _ref4.e;\n\n      if (this.options.removable) {\n        var index = handle.options.index;\n        var edgeView = this.cellView;\n        edgeView.cell.removeVertexAt(index, {\n          ui: true\n        });\n\n        if (this.options.addable) {\n          this.updatePath();\n        }\n\n        edgeView.checkMouseleave(this.normalizeEvent(e));\n      }\n    }\n  }, {\n    key: \"onPathMouseDown\",\n    value: function onPathMouseDown(evt) {\n      var edgeView = this.cellView;\n\n      if (this.guard(evt) || !this.options.addable || !edgeView.can('vertexAddable')) {\n        return;\n      }\n\n      evt.stopPropagation();\n      evt.preventDefault();\n      var e = this.normalizeEvent(evt);\n      var vertex = this.graph.snapToGrid(e.clientX, e.clientY).toJSON();\n      edgeView.cell.startBatch('add-vertex', {\n        ui: true,\n        toolId: this.cid\n      });\n      var index = edgeView.getVertexIndex(vertex.x, vertex.y);\n      this.snapVertex(vertex, index);\n      edgeView.cell.setVertexAt(index, vertex, {\n        ui: true,\n        toolId: this.cid\n      });\n      this.render();\n      var handle = this.handles[index];\n      this.eventData(e, {\n        vertexAdded: true\n      });\n      handle.onMouseDown(e);\n    }\n  }, {\n    key: \"onRemove\",\n    value: function onRemove() {\n      this.resetHandles();\n    }\n  }]);\n\n  return Vertices;\n}(ToolsView.ToolItem);\n\n(function (Vertices) {\n  var Handle = /*#__PURE__*/function (_View) {\n    _inherits(Handle, _View);\n\n    var _super2 = _createSuper(Handle);\n\n    function Handle(options) {\n      var _this4;\n\n      _classCallCheck(this, Handle);\n\n      _this4 = _super2.call(this);\n      _this4.options = options;\n\n      _this4.render();\n\n      _this4.delegateEvents({\n        mousedown: 'onMouseDown',\n        touchstart: 'onMouseDown',\n        dblclick: 'onDoubleClick'\n      });\n\n      return _this4;\n    }\n\n    _createClass(Handle, [{\n      key: \"graph\",\n      get: function get() {\n        return this.options.graph;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        this.container = View.createElement('circle', true);\n        var attrs = this.options.attrs;\n\n        if (typeof attrs === 'function') {\n          var defaults = Vertices.getDefaults();\n          this.setAttrs(Object.assign(Object.assign({}, defaults.attrs), attrs(this)));\n        } else {\n          this.setAttrs(attrs);\n        }\n\n        this.addClass(this.prefixClassName('edge-tool-vertex'));\n      }\n    }, {\n      key: \"updatePosition\",\n      value: function updatePosition(x, y) {\n        this.setAttrs({\n          cx: x,\n          cy: y\n        });\n      }\n    }, {\n      key: \"onMouseDown\",\n      value: function onMouseDown(evt) {\n        if (this.options.guard(evt)) {\n          return;\n        }\n\n        evt.stopPropagation();\n        evt.preventDefault();\n        this.graph.view.undelegateEvents();\n        this.delegateDocumentEvents({\n          mousemove: 'onMouseMove',\n          touchmove: 'onMouseMove',\n          mouseup: 'onMouseUp',\n          touchend: 'onMouseUp',\n          touchcancel: 'onMouseUp'\n        }, evt.data);\n        this.emit('change', {\n          e: evt,\n          handle: this\n        });\n      }\n    }, {\n      key: \"onMouseMove\",\n      value: function onMouseMove(evt) {\n        this.emit('changing', {\n          e: evt,\n          handle: this\n        });\n      }\n    }, {\n      key: \"onMouseUp\",\n      value: function onMouseUp(evt) {\n        this.emit('changed', {\n          e: evt,\n          handle: this\n        });\n        this.undelegateDocumentEvents();\n        this.graph.view.delegateEvents();\n      }\n    }, {\n      key: \"onDoubleClick\",\n      value: function onDoubleClick(evt) {\n        this.emit('remove', {\n          e: evt,\n          handle: this\n        });\n      }\n    }]);\n\n    return Handle;\n  }(View);\n\n  Vertices.Handle = Handle;\n})(Vertices || (Vertices = {}));\n\n(function (Vertices) {\n  var _events;\n\n  var pathClassName = Util.prefix('edge-tool-vertex-path');\n  Vertices.config({\n    name: 'vertices',\n    snapRadius: 20,\n    addable: true,\n    removable: true,\n    removeRedundancies: true,\n    stopPropagation: true,\n    attrs: {\n      r: 6,\n      fill: '#333',\n      stroke: '#fff',\n      cursor: 'move',\n      'stroke-width': 2\n    },\n    createHandle: function createHandle(options) {\n      return new Vertices.Handle(options);\n    },\n    markup: [{\n      tagName: 'path',\n      selector: 'connection',\n      className: pathClassName,\n      attrs: {\n        fill: 'none',\n        stroke: 'transparent',\n        'stroke-width': 10,\n        cursor: 'pointer'\n      }\n    }],\n    events: (_events = {}, _defineProperty(_events, \"mousedown .\".concat(pathClassName), 'onPathMouseDown'), _defineProperty(_events, \"touchstart .\".concat(pathClassName), 'onPathMouseDown'), _events)\n  });\n})(Vertices || (Vertices = {}));","map":{"version":3,"sources":["../../../src/registry/tool/vertices.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Util } from '../../global/util';\nimport { Point } from '../../geometry';\nimport { View } from '../../view/view';\nimport { ToolsView } from '../../view/tool';\nexport class Vertices extends ToolsView.ToolItem {\n    constructor() {\n        super(...arguments);\n        this.handles = [];\n    }\n    get vertices() {\n        return this.cellView.cell.getVertices();\n    }\n    onRender() {\n        this.addClass(this.prefixClassName('edge-tool-vertices'));\n        if (this.options.addable) {\n            this.updatePath();\n        }\n        this.resetHandles();\n        this.renderHandles();\n        return this;\n    }\n    update() {\n        const vertices = this.vertices;\n        if (vertices.length === this.handles.length) {\n            this.updateHandles();\n        }\n        else {\n            this.resetHandles();\n            this.renderHandles();\n        }\n        if (this.options.addable) {\n            this.updatePath();\n        }\n        return this;\n    }\n    resetHandles() {\n        const handles = this.handles;\n        this.handles = [];\n        if (handles) {\n            handles.forEach((handle) => {\n                this.stopHandleListening(handle);\n                handle.remove();\n            });\n        }\n    }\n    renderHandles() {\n        const vertices = this.vertices;\n        for (let i = 0, l = vertices.length; i < l; i += 1) {\n            const vertex = vertices[i];\n            const createHandle = this.options.createHandle;\n            const processHandle = this.options.processHandle;\n            const handle = createHandle({\n                index: i,\n                graph: this.graph,\n                guard: (evt) => this.guard(evt),\n                attrs: this.options.attrs || {},\n            });\n            if (processHandle) {\n                processHandle(handle);\n            }\n            this.graph.hook.onToolItemCreated({\n                name: 'vertices',\n                cell: this.cell,\n                view: this.cellView,\n                tool: handle,\n            });\n            handle.updatePosition(vertex.x, vertex.y);\n            this.stamp(handle.container);\n            this.container.appendChild(handle.container);\n            this.handles.push(handle);\n            this.startHandleListening(handle);\n        }\n    }\n    updateHandles() {\n        const vertices = this.vertices;\n        for (let i = 0, l = vertices.length; i < l; i += 1) {\n            const vertex = vertices[i];\n            const handle = this.handles[i];\n            if (handle) {\n                handle.updatePosition(vertex.x, vertex.y);\n            }\n        }\n    }\n    updatePath() {\n        const connection = this.childNodes.connection;\n        if (connection) {\n            connection.setAttribute('d', this.cellView.getConnectionPathData());\n        }\n    }\n    startHandleListening(handle) {\n        const edgeView = this.cellView;\n        if (edgeView.can('vertexMovable')) {\n            handle.on('change', this.onHandleChange, this);\n            handle.on('changing', this.onHandleChanging, this);\n            handle.on('changed', this.onHandleChanged, this);\n        }\n        if (edgeView.can('vertexDeletable')) {\n            handle.on('remove', this.onHandleRemove, this);\n        }\n    }\n    stopHandleListening(handle) {\n        const edgeView = this.cellView;\n        if (edgeView.can('vertexMovable')) {\n            handle.off('change', this.onHandleChange, this);\n            handle.off('changing', this.onHandleChanging, this);\n            handle.off('changed', this.onHandleChanged, this);\n        }\n        if (edgeView.can('vertexDeletable')) {\n            handle.off('remove', this.onHandleRemove, this);\n        }\n    }\n    getNeighborPoints(index) {\n        const edgeView = this.cellView;\n        const vertices = this.vertices;\n        const prev = index > 0 ? vertices[index - 1] : edgeView.sourceAnchor;\n        const next = index < vertices.length - 1 ? vertices[index + 1] : edgeView.targetAnchor;\n        return {\n            prev: Point.create(prev),\n            next: Point.create(next),\n        };\n    }\n    getMouseEventArgs(evt) {\n        const e = this.normalizeEvent(evt);\n        const { x, y } = this.graph.snapToGrid(e.clientX, e.clientY);\n        return { e, x, y };\n    }\n    onHandleChange({ e }) {\n        this.focus();\n        const edgeView = this.cellView;\n        edgeView.cell.startBatch('move-vertex', { ui: true, toolId: this.cid });\n        if (!this.options.stopPropagation) {\n            const { e: evt, x, y } = this.getMouseEventArgs(e);\n            edgeView.notifyMouseDown(evt, x, y);\n        }\n    }\n    onHandleChanging({ handle, e, }) {\n        const edgeView = this.cellView;\n        const index = handle.options.index;\n        const { e: evt, x, y } = this.getMouseEventArgs(e);\n        const vertex = { x, y };\n        this.snapVertex(vertex, index);\n        edgeView.cell.setVertexAt(index, vertex, { ui: true, toolId: this.cid });\n        handle.updatePosition(vertex.x, vertex.y);\n        if (!this.options.stopPropagation) {\n            edgeView.notifyMouseMove(evt, x, y);\n        }\n    }\n    onHandleChanged({ e }) {\n        const options = this.options;\n        const edgeView = this.cellView;\n        if (options.addable) {\n            this.updatePath();\n        }\n        if (!options.removeRedundancies) {\n            return;\n        }\n        const verticesRemoved = edgeView.removeRedundantLinearVertices({\n            ui: true,\n            toolId: this.cid,\n        });\n        if (verticesRemoved) {\n            this.render();\n        }\n        this.blur();\n        edgeView.cell.stopBatch('move-vertex', { ui: true, toolId: this.cid });\n        if (this.eventData(e).vertexAdded) {\n            edgeView.cell.stopBatch('add-vertex', { ui: true, toolId: this.cid });\n        }\n        const { e: evt, x, y } = this.getMouseEventArgs(e);\n        if (!this.options.stopPropagation) {\n            edgeView.notifyMouseUp(evt, x, y);\n        }\n        edgeView.checkMouseleave(evt);\n        options.onChanged && options.onChanged({ edge: edgeView.cell, edgeView });\n    }\n    snapVertex(vertex, index) {\n        const snapRadius = this.options.snapRadius || 0;\n        if (snapRadius > 0) {\n            const neighbors = this.getNeighborPoints(index);\n            const prev = neighbors.prev;\n            const next = neighbors.next;\n            if (Math.abs(vertex.x - prev.x) < snapRadius) {\n                vertex.x = prev.x;\n            }\n            else if (Math.abs(vertex.x - next.x) < snapRadius) {\n                vertex.x = next.x;\n            }\n            if (Math.abs(vertex.y - prev.y) < snapRadius) {\n                vertex.y = neighbors.prev.y;\n            }\n            else if (Math.abs(vertex.y - next.y) < snapRadius) {\n                vertex.y = next.y;\n            }\n        }\n    }\n    onHandleRemove({ handle, e }) {\n        if (this.options.removable) {\n            const index = handle.options.index;\n            const edgeView = this.cellView;\n            edgeView.cell.removeVertexAt(index, { ui: true });\n            if (this.options.addable) {\n                this.updatePath();\n            }\n            edgeView.checkMouseleave(this.normalizeEvent(e));\n        }\n    }\n    onPathMouseDown(evt) {\n        const edgeView = this.cellView;\n        if (this.guard(evt) ||\n            !this.options.addable ||\n            !edgeView.can('vertexAddable')) {\n            return;\n        }\n        evt.stopPropagation();\n        evt.preventDefault();\n        const e = this.normalizeEvent(evt);\n        const vertex = this.graph.snapToGrid(e.clientX, e.clientY).toJSON();\n        edgeView.cell.startBatch('add-vertex', { ui: true, toolId: this.cid });\n        const index = edgeView.getVertexIndex(vertex.x, vertex.y);\n        this.snapVertex(vertex, index);\n        edgeView.cell.setVertexAt(index, vertex, {\n            ui: true,\n            toolId: this.cid,\n        });\n        this.render();\n        const handle = this.handles[index];\n        this.eventData(e, { vertexAdded: true });\n        handle.onMouseDown(e);\n    }\n    onRemove() {\n        this.resetHandles();\n    }\n}\n(function (Vertices) {\n    class Handle extends View {\n        constructor(options) {\n            super();\n            this.options = options;\n            this.render();\n            this.delegateEvents({\n                mousedown: 'onMouseDown',\n                touchstart: 'onMouseDown',\n                dblclick: 'onDoubleClick',\n            });\n        }\n        get graph() {\n            return this.options.graph;\n        }\n        render() {\n            this.container = View.createElement('circle', true);\n            const attrs = this.options.attrs;\n            if (typeof attrs === 'function') {\n                const defaults = Vertices.getDefaults();\n                this.setAttrs(Object.assign(Object.assign({}, defaults.attrs), attrs(this)));\n            }\n            else {\n                this.setAttrs(attrs);\n            }\n            this.addClass(this.prefixClassName('edge-tool-vertex'));\n        }\n        updatePosition(x, y) {\n            this.setAttrs({ cx: x, cy: y });\n        }\n        onMouseDown(evt) {\n            if (this.options.guard(evt)) {\n                return;\n            }\n            evt.stopPropagation();\n            evt.preventDefault();\n            this.graph.view.undelegateEvents();\n            this.delegateDocumentEvents({\n                mousemove: 'onMouseMove',\n                touchmove: 'onMouseMove',\n                mouseup: 'onMouseUp',\n                touchend: 'onMouseUp',\n                touchcancel: 'onMouseUp',\n            }, evt.data);\n            this.emit('change', { e: evt, handle: this });\n        }\n        onMouseMove(evt) {\n            this.emit('changing', { e: evt, handle: this });\n        }\n        onMouseUp(evt) {\n            this.emit('changed', { e: evt, handle: this });\n            this.undelegateDocumentEvents();\n            this.graph.view.delegateEvents();\n        }\n        onDoubleClick(evt) {\n            this.emit('remove', { e: evt, handle: this });\n        }\n    }\n    Vertices.Handle = Handle;\n})(Vertices || (Vertices = {}));\n(function (Vertices) {\n    const pathClassName = Util.prefix('edge-tool-vertex-path');\n    Vertices.config({\n        name: 'vertices',\n        snapRadius: 20,\n        addable: true,\n        removable: true,\n        removeRedundancies: true,\n        stopPropagation: true,\n        attrs: {\n            r: 6,\n            fill: '#333',\n            stroke: '#fff',\n            cursor: 'move',\n            'stroke-width': 2,\n        },\n        createHandle: (options) => new Vertices.Handle(options),\n        markup: [\n            {\n                tagName: 'path',\n                selector: 'connection',\n                className: pathClassName,\n                attrs: {\n                    fill: 'none',\n                    stroke: 'transparent',\n                    'stroke-width': 10,\n                    cursor: 'pointer',\n                },\n            },\n        ],\n        events: {\n            [`mousedown .${pathClassName}`]: 'onPathMouseDown',\n            [`touchstart .${pathClassName}`]: 'onPathMouseDown',\n        },\n    });\n})(Vertices || (Vertices = {}));\n//# sourceMappingURL=vertices.js.map"]},"metadata":{},"sourceType":"module"}