{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport DOM from '../../utils/dom';\n\nvar TwoTouchHandler = function () {\n  function TwoTouchHandler() {\n    _classCallCheck(this, TwoTouchHandler);\n\n    _defineProperty(this, \"enabled\", void 0);\n\n    _defineProperty(this, \"active\", void 0);\n\n    _defineProperty(this, \"firstTwoTouches\", void 0);\n\n    _defineProperty(this, \"vector\", void 0);\n\n    _defineProperty(this, \"startVector\", void 0);\n\n    _defineProperty(this, \"aroundCenter\", void 0);\n\n    this.reset();\n  }\n\n  _createClass(TwoTouchHandler, [{\n    key: \"reset\",\n    value: function reset() {\n      this.active = false;\n      delete this.firstTwoTouches;\n    }\n  }, {\n    key: \"start\",\n    value: function start(points) {\n      return;\n    }\n  }, {\n    key: \"move\",\n    value: function move(points, pinchAround, e) {\n      return;\n    }\n  }, {\n    key: \"touchstart\",\n    value: function touchstart(e, points, mapTouches) {\n      if (this.firstTwoTouches || mapTouches.length < 2) {\n        return;\n      }\n\n      this.firstTwoTouches = [mapTouches[0].identifier, mapTouches[1].identifier];\n      this.start([points[0], points[1]]);\n    }\n  }, {\n    key: \"touchmove\",\n    value: function touchmove(e, points, mapTouches) {\n      if (!this.firstTwoTouches) {\n        return;\n      }\n\n      e.preventDefault();\n\n      var _this$firstTwoTouches = _slicedToArray(this.firstTwoTouches, 2),\n          idA = _this$firstTwoTouches[0],\n          idB = _this$firstTwoTouches[1];\n\n      var a = getTouchById(mapTouches, points, idA);\n      var b = getTouchById(mapTouches, points, idB);\n\n      if (!a || !b) {\n        return;\n      }\n\n      var pinchAround = this.aroundCenter ? null : a.add(b).div(2);\n      return this.move([a, b], pinchAround, e);\n    }\n  }, {\n    key: \"touchend\",\n    value: function touchend(e, points, mapTouches) {\n      if (!this.firstTwoTouches) {\n        return;\n      }\n\n      var _this$firstTwoTouches2 = _slicedToArray(this.firstTwoTouches, 2),\n          idA = _this$firstTwoTouches2[0],\n          idB = _this$firstTwoTouches2[1];\n\n      var a = getTouchById(mapTouches, points, idA);\n      var b = getTouchById(mapTouches, points, idB);\n\n      if (a && b) {\n        return;\n      }\n\n      if (this.active) {\n        DOM.suppressClick();\n      }\n\n      this.reset();\n    }\n  }, {\n    key: \"touchcancel\",\n    value: function touchcancel() {\n      this.reset();\n    }\n  }, {\n    key: \"enable\",\n    value: function enable(options) {\n      this.enabled = true;\n      this.aroundCenter = !!options && options.around === 'center';\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.enabled = false;\n      this.reset();\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.enabled;\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.active;\n    }\n  }]);\n\n  return TwoTouchHandler;\n}();\n\nexport { TwoTouchHandler as default };\n\nfunction getTouchById(mapTouches, points, identifier) {\n  for (var i = 0; i < mapTouches.length; i++) {\n    if (mapTouches[i].identifier === identifier) {\n      return points[i];\n    }\n  }\n}","map":{"version":3,"sources":["../../../src/handler/touch/two_touch.ts"],"names":["TwoTouchHandler","mapTouches","points","e","idA","idB","a","getTouchById","b","pinchAround","DOM","options","i"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport Point from '../../geo/point';\nimport DOM from '../../utils/dom';\n\nexport default class TwoTouchHandler {\n  protected enabled: boolean;\n  protected active: boolean;\n  protected firstTwoTouches: [number, number];\n  protected vector: Point;\n  protected startVector: Point;\n  protected aroundCenter: boolean;\n\n  constructor() {\n    this.reset();\n  }\n\n  public reset() {\n    this.active = false;\n    delete this.firstTwoTouches;\n  }\n  public start(points: [Point, Point]) {\n    return;\n  } // eslint-disable-line\n  public move(\n    points: [Point, Point],\n    pinchAround: Point | null,\n    e: TouchEvent,\n  ) {\n    return;\n  } // eslint-disable-line\n\n  public touchstart(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    // console.log(e.target, e.targetTouches.length ? e.targetTouches[0].target : null);\n    // log('touchstart', points, e.target.innerHTML, e.targetTouches.length ? e.targetTouches[0].target.innerHTML: undefined);\n    if (this.firstTwoTouches || mapTouches.length < 2) {\n      return;\n    }\n\n    this.firstTwoTouches = [mapTouches[0].identifier, mapTouches[1].identifier];\n\n    // implemented by child classes\n    this.start([points[0], points[1]]);\n  }\n\n  public touchmove(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    if (!this.firstTwoTouches) {\n      return;\n    }\n\n    e.preventDefault();\n\n    const [idA, idB] = this.firstTwoTouches;\n    const a = getTouchById(mapTouches, points, idA);\n    const b = getTouchById(mapTouches, points, idB);\n    if (!a || !b) {\n      return;\n    }\n    const pinchAround = this.aroundCenter ? null : a.add(b).div(2);\n\n    // implemented by child classes\n    return this.move([a, b], pinchAround, e);\n  }\n\n  public touchend(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    if (!this.firstTwoTouches) {\n      return;\n    }\n\n    const [idA, idB] = this.firstTwoTouches;\n    const a = getTouchById(mapTouches, points, idA);\n    const b = getTouchById(mapTouches, points, idB);\n    if (a && b) {\n      return;\n    }\n\n    if (this.active) {\n      DOM.suppressClick();\n    }\n\n    this.reset();\n  }\n\n  public touchcancel() {\n    this.reset();\n  }\n\n  public enable(options?: { around?: 'center' }) {\n    this.enabled = true;\n    this.aroundCenter = !!options && options.around === 'center';\n  }\n\n  public disable() {\n    this.enabled = false;\n    this.reset();\n  }\n\n  public isEnabled() {\n    return this.enabled;\n  }\n\n  public isActive() {\n    return this.active;\n  }\n}\n\nfunction getTouchById(\n  mapTouches: Touch[],\n  points: Point[],\n  identifier: number,\n) {\n  for (let i = 0; i < mapTouches.length; i++) {\n    if (mapTouches[i].identifier === identifier) {\n      return points[i];\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}