{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { mat4, vec3 } from 'gl-matrix';\nvar DEGREES_TO_RADIANS = Math.PI / 180;\n\nvar Viewport = function () {\n  function Viewport() {\n    _classCallCheck(this, Viewport);\n\n    _defineProperty(this, \"projectionMatrix\", mat4.create());\n\n    _defineProperty(this, \"viewMatrix\", mat4.create());\n\n    _defineProperty(this, \"viewProjectionMatrix\", mat4.create());\n\n    _defineProperty(this, \"ViewProjectionMatrixUncentered\", mat4.create());\n\n    _defineProperty(this, \"viewUncenteredMatrix\", mat4.create());\n\n    _defineProperty(this, \"zoom\", void 0);\n\n    _defineProperty(this, \"center\", void 0);\n  }\n\n  _createClass(Viewport, [{\n    key: \"syncWithMapCamera\",\n    value: function syncWithMapCamera(mapCamera) {\n      var _mapCamera$zoom = mapCamera.zoom,\n          zoom = _mapCamera$zoom === void 0 ? 1 : _mapCamera$zoom,\n          _mapCamera$pitch = mapCamera.pitch,\n          pitch = _mapCamera$pitch === void 0 ? 0 : _mapCamera$pitch,\n          _mapCamera$bearing = mapCamera.bearing,\n          bearing = _mapCamera$bearing === void 0 ? 0 : _mapCamera$bearing,\n          _mapCamera$center = mapCamera.center,\n          center = _mapCamera$center === void 0 ? [0, 0] : _mapCamera$center,\n          _mapCamera$offsetOrig = mapCamera.offsetOrigin,\n          offsetOrigin = _mapCamera$offsetOrig === void 0 ? [0, 0] : _mapCamera$offsetOrig,\n          _mapCamera$cameraHeig = mapCamera.cameraHeight,\n          cameraHeight = _mapCamera$cameraHeig === void 0 ? 1 : _mapCamera$cameraHeig,\n          _mapCamera$aspect = mapCamera.aspect,\n          aspect = _mapCamera$aspect === void 0 ? 1 : _mapCamera$aspect,\n          _mapCamera$near = mapCamera.near,\n          near = _mapCamera$near === void 0 ? 0.1 : _mapCamera$near,\n          _mapCamera$far = mapCamera.far,\n          far = _mapCamera$far === void 0 ? 1000 : _mapCamera$far,\n          _mapCamera$fov = mapCamera.fov,\n          fov = _mapCamera$fov === void 0 ? 0 : _mapCamera$fov;\n      this.zoom = zoom;\n      this.center = center;\n      var pitchInRadians = pitch * DEGREES_TO_RADIANS;\n      var rotationInRadians = (360 - bearing) * DEGREES_TO_RADIANS;\n      mat4.perspective(this.projectionMatrix, fov, aspect, near, far);\n      var eye = vec3.fromValues(cameraHeight * Math.sin(pitchInRadians) * Math.sin(rotationInRadians), -cameraHeight * Math.sin(pitchInRadians) * Math.cos(rotationInRadians), cameraHeight * Math.cos(pitchInRadians));\n      var up = vec3.fromValues(-Math.cos(pitchInRadians) * Math.sin(rotationInRadians), Math.cos(pitchInRadians) * Math.cos(rotationInRadians), Math.sin(pitchInRadians));\n      mat4.lookAt(this.viewMatrix, eye, vec3.fromValues(0, 0, 0), up);\n      this.viewUncenteredMatrix = mat4.clone(this.viewMatrix);\n      mat4.translate(this.viewMatrix, this.viewMatrix, vec3.fromValues(-offsetOrigin[0], offsetOrigin[1], 0));\n      mat4.multiply(this.viewProjectionMatrix, this.projectionMatrix, this.viewMatrix);\n      mat4.multiply(this.ViewProjectionMatrixUncentered, this.projectionMatrix, this.viewMatrix);\n    }\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      return this.zoom;\n    }\n  }, {\n    key: \"getZoomScale\",\n    value: function getZoomScale() {\n      return 524288;\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      var _this$center = _slicedToArray(this.center, 2),\n          lng = _this$center[0],\n          lat = _this$center[1];\n\n      return [lng, lat];\n    }\n  }, {\n    key: \"getProjectionMatrix\",\n    value: function getProjectionMatrix() {\n      return this.projectionMatrix;\n    }\n  }, {\n    key: \"getModelMatrix\",\n    value: function getModelMatrix() {\n      return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n    }\n  }, {\n    key: \"getViewMatrix\",\n    value: function getViewMatrix() {\n      return this.viewMatrix;\n    }\n  }, {\n    key: \"getViewMatrixUncentered\",\n    value: function getViewMatrixUncentered() {\n      return this.viewUncenteredMatrix;\n    }\n  }, {\n    key: \"getViewProjectionMatrix\",\n    value: function getViewProjectionMatrix() {\n      return this.viewProjectionMatrix;\n    }\n  }, {\n    key: \"getViewProjectionMatrixUncentered\",\n    value: function getViewProjectionMatrixUncentered() {\n      return this.ViewProjectionMatrixUncentered;\n    }\n  }, {\n    key: \"getFocalDistance\",\n    value: function getFocalDistance() {\n      return 1;\n    }\n  }, {\n    key: \"projectFlat\",\n    value: function projectFlat(lngLat, scale) {\n      var maxs = 85.0511287798;\n      var lat = Math.max(Math.min(maxs, lngLat[1]), -maxs);\n      var zoomScale = 256 << 20;\n      var d = Math.PI / 180;\n      var x = lngLat[0] * d;\n      var y = lat * d;\n      y = Math.log(Math.tan(Math.PI / 4 + y / 2));\n      var a = 0.5 / Math.PI;\n      var b = 0.5;\n      var c = -0.5 / Math.PI;\n      d = 0.5;\n      x = zoomScale * (a * x + b) - 215440491;\n      y = -(zoomScale * (c * y + d) - 106744817);\n      return [x, y];\n    }\n  }]);\n\n  return Viewport;\n}();\n\nexport { Viewport as default };","map":{"version":3,"sources":["../../src/amap/Viewport.ts"],"names":["DEGREES_TO_RADIANS","Math","Viewport","mat4","zoom","pitch","bearing","center","offsetOrigin","cameraHeight","aspect","near","far","fov","mapCamera","pitchInRadians","rotationInRadians","eye","vec3","up","lng","lat","maxs","lngLat","zoomScale","d","x","y","a","b","c"],"mappings":"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","sourcesContent":["import { IMapCamera, IViewport } from '@antv/l7-core';\nimport { mat4, vec3 } from 'gl-matrix';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nexport default class Viewport implements IViewport {\n  private projectionMatrix: mat4 = mat4.create();\n  private viewMatrix: mat4 = mat4.create();\n  private viewProjectionMatrix: mat4 = mat4.create();\n  private ViewProjectionMatrixUncentered: mat4 = mat4.create();\n  private viewUncenteredMatrix: mat4 = mat4.create();\n  private zoom: number;\n  private center: number[];\n\n  public syncWithMapCamera(mapCamera: Partial<IMapCamera>) {\n    const {\n      zoom = 1,\n      pitch = 0,\n      bearing = 0,\n      center = [0, 0],\n      offsetOrigin = [0, 0],\n      cameraHeight = 1,\n      aspect = 1,\n      near = 0.1,\n      far = 1000,\n      fov = 0,\n    } = mapCamera;\n    this.zoom = zoom;\n    this.center = center;\n\n    const pitchInRadians = pitch * DEGREES_TO_RADIANS;\n    const rotationInRadians = (360 - bearing) * DEGREES_TO_RADIANS;\n\n    // 计算透视投影矩阵 projectionMatrix\n    mat4.perspective(this.projectionMatrix, fov, aspect, near, far);\n    // 计算相机矩阵 viewMatrix\n    const eye = vec3.fromValues(\n      cameraHeight * Math.sin(pitchInRadians) * Math.sin(rotationInRadians),\n      -cameraHeight * Math.sin(pitchInRadians) * Math.cos(rotationInRadians),\n      cameraHeight * Math.cos(pitchInRadians),\n    );\n    const up = vec3.fromValues(\n      -Math.cos(pitchInRadians) * Math.sin(rotationInRadians),\n      Math.cos(pitchInRadians) * Math.cos(rotationInRadians),\n      Math.sin(pitchInRadians),\n    );\n    mat4.lookAt(this.viewMatrix, eye, vec3.fromValues(0, 0, 0), up);\n    this.viewUncenteredMatrix = mat4.clone(this.viewMatrix);\n\n    // 移动相机位置\n    mat4.translate(\n      this.viewMatrix,\n      this.viewMatrix,\n      vec3.fromValues(-offsetOrigin[0], offsetOrigin[1], 0),\n    );\n\n    mat4.multiply(\n      this.viewProjectionMatrix,\n      this.projectionMatrix,\n      this.viewMatrix,\n    );\n    mat4.multiply(\n      this.ViewProjectionMatrixUncentered,\n      this.projectionMatrix,\n      this.viewMatrix,\n    );\n  }\n\n  public getZoom(): number {\n    return this.zoom;\n  }\n\n  public getZoomScale(): number {\n    // 512 尺寸下的缩放：2 ^ 19\n    return 524288;\n  }\n\n  public getCenter(): [number, number] {\n    const [lng, lat] = this.center;\n    return [lng, lat];\n  }\n\n  public getProjectionMatrix(): number[] {\n    // @ts-ignore\n    return this.projectionMatrix;\n  }\n\n  public getModelMatrix(): number[] {\n    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n  }\n\n  public getViewMatrix(): number[] {\n    // @ts-ignore\n    return this.viewMatrix;\n  }\n\n  public getViewMatrixUncentered(): number[] {\n    // @ts-ignore\n    return this.viewUncenteredMatrix;\n  }\n  public getViewProjectionMatrix(): number[] {\n    // @ts-ignore\n    return this.viewProjectionMatrix;\n  }\n\n  public getViewProjectionMatrixUncentered(): number[] {\n    // @ts-ignore\n    return this.ViewProjectionMatrixUncentered;\n  }\n\n  public getFocalDistance() {\n    return 1;\n  }\n\n  /**\n   * P20 坐标系，固定 scale\n   */\n  public projectFlat(\n    lngLat: [number, number],\n    scale?: number | undefined,\n  ): [number, number] {\n    const maxs = 85.0511287798;\n    const lat = Math.max(Math.min(maxs, lngLat[1]), -maxs);\n    // tslint:disable-next-line:no-bitwise\n    const zoomScale = 256 << 20;\n    let d = Math.PI / 180;\n    let x = lngLat[0] * d;\n    let y = lat * d;\n    y = Math.log(Math.tan(Math.PI / 4 + y / 2));\n    const a = 0.5 / Math.PI;\n    const b = 0.5;\n    const c = -0.5 / Math.PI;\n    d = 0.5;\n    x = zoomScale * (a * x + b) - 215440491;\n    y = -(zoomScale * (c * y + d) - 106744817);\n    return [x, y];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}