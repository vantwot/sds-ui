{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LayerGroup = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar util_1 = require(\"@antv/util\");\n\nvar event_emitter_1 = (0, tslib_1.__importDefault)(require(\"@antv/event-emitter\"));\n\nvar LayerGroup =\n/** @class */\nfunction (_super) {\n  (0, tslib_1.__extends)(LayerGroup, _super);\n\n  function LayerGroup(layers, option) {\n    if (layers === void 0) {\n      layers = [];\n    }\n\n    if (option === void 0) {\n      option = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.name = option.name ? option.name : (0, util_1.uniqueId)('layerGroup');\n    _this.layers = layers;\n    return _this;\n  }\n  /**\n   * 图层组添加到地图上\n   */\n\n\n  LayerGroup.prototype.addTo = function (scene) {\n    var _this = this;\n\n    this.scene = scene;\n    var layerIndex = 0;\n    var layerLength = this.layers.length;\n    this.layers.forEach(function (layer) {\n      layer.once('inited', function (e) {\n        layerIndex++;\n\n        _this.emit('inited', e);\n\n        if (layerIndex === layerLength) {\n          _this.emit('inited-all');\n        }\n      });\n      layer.addTo(scene);\n    });\n  };\n  /**\n   * 图层组是否有该图层\n   */\n\n\n  LayerGroup.prototype.hasLayer = function (layer) {\n    return this.layers.some(function (itemLayer) {\n      return itemLayer === layer;\n    });\n  };\n  /**\n   * 增加图层\n   */\n\n\n  LayerGroup.prototype.addLayer = function (layer) {\n    var _this = this; // TODO: duplicate layer\n\n\n    this.layers.push(layer);\n\n    if (this.scene) {\n      layer.once('inited', function (e) {\n        return _this.emit('inited', e);\n      });\n      layer.addTo(this.scene);\n    }\n  };\n  /**\n   * 移除 layer 图层\n   */\n\n\n  LayerGroup.prototype.removeLayer = function (layer) {\n    var layerIndex = this.layers.findIndex(function (itemLayer) {\n      return itemLayer === layer;\n    });\n    if (layerIndex === -1) return false;\n    this.layers.splice(layerIndex, 1);\n\n    if (this.scene) {\n      layer.remove(this.scene);\n    }\n\n    return true;\n  };\n  /**\n   * 获取所有的地图图层\n   */\n\n\n  LayerGroup.prototype.getLayers = function () {\n    return this.layers;\n  };\n  /**\n   * 获取所有的带交互图层\n   */\n\n\n  LayerGroup.prototype.getInteractionLayers = function () {\n    return this.layers.filter(function (_a) {\n      var interaction = _a.interaction;\n      return interaction;\n    });\n  };\n  /**\n   * 根据图层 ID 获取图层对象\n   */\n\n\n  LayerGroup.prototype.getLayer = function (id) {\n    return this.layers.find(function (_a) {\n      var layer = _a.layer;\n      return layer.id === id;\n    });\n  };\n  /**\n   * 根据图层 name 获取图层对象\n   */\n\n\n  LayerGroup.prototype.getLayerByName = function (name) {\n    return this.layers.find(function (itemLayer) {\n      return itemLayer.name === name;\n    });\n  };\n  /**\n   * 移除所有的图层对象\n   */\n\n\n  LayerGroup.prototype.removeAllLayer = function () {\n    var _this = this;\n\n    this.layers.forEach(function (layer) {\n      if (_this.scene) {\n        layer.remove(_this.scene);\n      }\n    });\n    this.layers = [];\n  };\n  /**\n   * 是否图层组为空\n   */\n\n\n  LayerGroup.prototype.isEmpty = function () {\n    return this.layers.length === 0;\n  };\n\n  return LayerGroup;\n}(event_emitter_1.default);\n\nexports.LayerGroup = LayerGroup;","map":{"version":3,"sources":["../../../../src/core/layer/layer-group.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LayerGroup = void 0;\nvar tslib_1 = require(\"tslib\");\nvar util_1 = require(\"@antv/util\");\nvar event_emitter_1 = (0, tslib_1.__importDefault)(require(\"@antv/event-emitter\"));\nvar LayerGroup = /** @class */ (function (_super) {\n    (0, tslib_1.__extends)(LayerGroup, _super);\n    function LayerGroup(layers, option) {\n        if (layers === void 0) { layers = []; }\n        if (option === void 0) { option = {}; }\n        var _this = _super.call(this) || this;\n        _this.name = option.name ? option.name : (0, util_1.uniqueId)('layerGroup');\n        _this.layers = layers;\n        return _this;\n    }\n    /**\n     * 图层组添加到地图上\n     */\n    LayerGroup.prototype.addTo = function (scene) {\n        var _this = this;\n        this.scene = scene;\n        var layerIndex = 0;\n        var layerLength = this.layers.length;\n        this.layers.forEach(function (layer) {\n            layer.once('inited', function (e) {\n                layerIndex++;\n                _this.emit('inited', e);\n                if (layerIndex === layerLength) {\n                    _this.emit('inited-all');\n                }\n            });\n            layer.addTo(scene);\n        });\n    };\n    /**\n     * 图层组是否有该图层\n     */\n    LayerGroup.prototype.hasLayer = function (layer) {\n        return this.layers.some(function (itemLayer) { return itemLayer === layer; });\n    };\n    /**\n     * 增加图层\n     */\n    LayerGroup.prototype.addLayer = function (layer) {\n        var _this = this;\n        // TODO: duplicate layer\n        this.layers.push(layer);\n        if (this.scene) {\n            layer.once('inited', function (e) { return _this.emit('inited', e); });\n            layer.addTo(this.scene);\n        }\n    };\n    /**\n     * 移除 layer 图层\n     */\n    LayerGroup.prototype.removeLayer = function (layer) {\n        var layerIndex = this.layers.findIndex(function (itemLayer) { return itemLayer === layer; });\n        if (layerIndex === -1)\n            return false;\n        this.layers.splice(layerIndex, 1);\n        if (this.scene) {\n            layer.remove(this.scene);\n        }\n        return true;\n    };\n    /**\n     * 获取所有的地图图层\n     */\n    LayerGroup.prototype.getLayers = function () {\n        return this.layers;\n    };\n    /**\n     * 获取所有的带交互图层\n     */\n    LayerGroup.prototype.getInteractionLayers = function () {\n        return this.layers.filter(function (_a) {\n            var interaction = _a.interaction;\n            return interaction;\n        });\n    };\n    /**\n     * 根据图层 ID 获取图层对象\n     */\n    LayerGroup.prototype.getLayer = function (id) {\n        return this.layers.find(function (_a) {\n            var layer = _a.layer;\n            return layer.id === id;\n        });\n    };\n    /**\n     * 根据图层 name 获取图层对象\n     */\n    LayerGroup.prototype.getLayerByName = function (name) {\n        return this.layers.find(function (itemLayer) { return itemLayer.name === name; });\n    };\n    /**\n     * 移除所有的图层对象\n     */\n    LayerGroup.prototype.removeAllLayer = function () {\n        var _this = this;\n        this.layers.forEach(function (layer) {\n            if (_this.scene) {\n                layer.remove(_this.scene);\n            }\n        });\n        this.layers = [];\n    };\n    /**\n     * 是否图层组为空\n     */\n    LayerGroup.prototype.isEmpty = function () {\n        return this.layers.length === 0;\n    };\n    return LayerGroup;\n}(event_emitter_1.default));\nexports.LayerGroup = LayerGroup;\n//# sourceMappingURL=layer-group.js.map"]},"metadata":{},"sourceType":"script"}