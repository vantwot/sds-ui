{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DisposableCollection, Disposable } from '../common/disposable';\nimport { IFrontendApplicationContribution } from '../xflow-main/interface';\nimport { RxModel, NsModel } from '../common/rx-model';\nimport { Deferred } from '../common/deferred';\nimport { IGraphProvider } from '../xflow-main/graph/graph-provider';\nimport { IModelOptionProvider, IModelService, IModelContribution } from './interface';\nimport { contrib, Contribution, singleton, inject } from 'mana-syringe';\nlet ModelRegistry = class ModelRegistry {\n  constructor() {\n    /** disposables */\n    this.toDispose = new DisposableCollection();\n    /** Deferred Model Map */\n\n    this.deferredModelMap = new Map();\n    /**\n     * 注册model\n     * @param options IModelOptions<T>\n     */\n\n    this.registerModel = options => {\n      const {\n        id,\n        getInitialValue,\n        modelFactory\n      } = options;\n      const toDispose = new DisposableCollection();\n      const defer = this.ensureModel(id);\n\n      if (defer.isResolved) {\n        console.error(options, 'model has been registerd');\n        return;\n      }\n\n      const initialValue = getInitialValue ? getInitialValue() : NsModel.EMPTY_VALUE;\n      const model = modelFactory ? modelFactory() : new RxModel(initialValue);\n\n      if (NsModel.isValidValue(initialValue)) {\n        defer.resolve(model);\n      }\n\n      if (options.watchChange) {\n        /** 绑定watch事件 */\n        options.watchChange(model, this).then(d => {\n          /** createModel 后 resolve */\n          if (!defer.isResolved) {\n            defer.resolve(model);\n          }\n\n          this.toDispose.pushAll([d, toDispose]);\n          toDispose.push(d);\n        });\n      }\n\n      return toDispose;\n    };\n    /**\n     * 查找 model\n     * @param token: Token<T>\n     */\n\n\n    this.findDeferredModel = token => {\n      return this.deferredModelMap.get(token);\n    };\n    /**\n     *  消费Model: await model resolve\n     * @param token: Token<T>\n     */\n\n\n    this.awaitModel = token => {\n      const defer = this.ensureModel(token);\n      return defer.promise;\n    };\n    /**\n     * 注册 定义在IModelOptionProvider中的Model\n     */\n\n\n    this.registerRuntimeModel = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        modelRegisterFunc\n      } = yield this.modelOptionProvider.getOption();\n      const graphInstance = yield this.graphProvider.getGraphInstance();\n\n      if (modelRegisterFunc) {\n        modelRegisterFunc(this, graphInstance);\n      }\n    });\n    /**\n     * 确保调用时有可用的Model\n     * @param id ModelId\n     */\n\n\n    this.ensureModel = token => {\n      const existDeferred = this.deferredModelMap.get(token);\n\n      if (existDeferred) {\n        return existDeferred;\n      }\n      /** 注册ModelDeferred */\n\n\n      const newDeferred = new Deferred();\n      this.deferredModelMap.set(token, newDeferred);\n      this.toDispose.push(Disposable.create(() => this.deferredModelMap.delete(token)));\n      return newDeferred;\n    };\n  }\n  /** app启动时，收集Model扩展点的注册项 */\n\n\n  onStart() {\n    const contributions = this.contributionProvider.getContributions();\n\n    for (const contribution of contributions) {\n      contribution.registerModel(this);\n    }\n\n    this.registerRuntimeModel();\n  }\n  /** app停止的逻辑 */\n\n\n  onStop() {\n    this.toDispose.dispose();\n  }\n\n};\n\n__decorate([contrib(IModelContribution), __metadata(\"design:type\", Object)], ModelRegistry.prototype, \"contributionProvider\", void 0);\n\n__decorate([inject(IModelOptionProvider), __metadata(\"design:type\", Object)], ModelRegistry.prototype, \"modelOptionProvider\", void 0);\n\n__decorate([inject(IGraphProvider), __metadata(\"design:type\", Object)], ModelRegistry.prototype, \"graphProvider\", void 0);\n\nModelRegistry = __decorate([singleton({\n  contrib: [IFrontendApplicationContribution, IModelService]\n})], ModelRegistry);\nexport { ModelRegistry };","map":{"version":3,"sources":["../../src/model-service/model-registry.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DisposableCollection, Disposable } from '../common/disposable';\nimport { IFrontendApplicationContribution } from '../xflow-main/interface';\nimport { RxModel, NsModel } from '../common/rx-model';\nimport { Deferred } from '../common/deferred';\nimport { IGraphProvider } from '../xflow-main/graph/graph-provider';\nimport { IModelOptionProvider, IModelService, IModelContribution } from './interface';\nimport { contrib, Contribution, singleton, inject } from 'mana-syringe';\nlet ModelRegistry = class ModelRegistry {\n    constructor() {\n        /** disposables */\n        this.toDispose = new DisposableCollection();\n        /** Deferred Model Map */\n        this.deferredModelMap = new Map();\n        /**\n         * 注册model\n         * @param options IModelOptions<T>\n         */\n        this.registerModel = (options) => {\n            const { id, getInitialValue, modelFactory } = options;\n            const toDispose = new DisposableCollection();\n            const defer = this.ensureModel(id);\n            if (defer.isResolved) {\n                console.error(options, 'model has been registerd');\n                return;\n            }\n            const initialValue = getInitialValue ? getInitialValue() : NsModel.EMPTY_VALUE;\n            const model = modelFactory\n                ? modelFactory()\n                : new RxModel(initialValue);\n            if (NsModel.isValidValue(initialValue)) {\n                defer.resolve(model);\n            }\n            if (options.watchChange) {\n                /** 绑定watch事件 */\n                options.watchChange(model, this).then(d => {\n                    /** createModel 后 resolve */\n                    if (!defer.isResolved) {\n                        defer.resolve(model);\n                    }\n                    this.toDispose.pushAll([d, toDispose]);\n                    toDispose.push(d);\n                });\n            }\n            return toDispose;\n        };\n        /**\n         * 查找 model\n         * @param token: Token<T>\n         */\n        this.findDeferredModel = (token) => {\n            return this.deferredModelMap.get(token);\n        };\n        /**\n         *  消费Model: await model resolve\n         * @param token: Token<T>\n         */\n        this.awaitModel = (token) => {\n            const defer = this.ensureModel(token);\n            return defer.promise;\n        };\n        /**\n         * 注册 定义在IModelOptionProvider中的Model\n         */\n        this.registerRuntimeModel = () => __awaiter(this, void 0, void 0, function* () {\n            const { modelRegisterFunc } = yield this.modelOptionProvider.getOption();\n            const graphInstance = yield this.graphProvider.getGraphInstance();\n            if (modelRegisterFunc) {\n                modelRegisterFunc(this, graphInstance);\n            }\n        });\n        /**\n         * 确保调用时有可用的Model\n         * @param id ModelId\n         */\n        this.ensureModel = (token) => {\n            const existDeferred = this.deferredModelMap.get(token);\n            if (existDeferred) {\n                return existDeferred;\n            }\n            /** 注册ModelDeferred */\n            const newDeferred = new Deferred();\n            this.deferredModelMap.set(token, newDeferred);\n            this.toDispose.push(Disposable.create(() => this.deferredModelMap.delete(token)));\n            return newDeferred;\n        };\n    }\n    /** app启动时，收集Model扩展点的注册项 */\n    onStart() {\n        const contributions = this.contributionProvider.getContributions();\n        for (const contribution of contributions) {\n            contribution.registerModel(this);\n        }\n        this.registerRuntimeModel();\n    }\n    /** app停止的逻辑 */\n    onStop() {\n        this.toDispose.dispose();\n    }\n};\n__decorate([\n    contrib(IModelContribution),\n    __metadata(\"design:type\", Object)\n], ModelRegistry.prototype, \"contributionProvider\", void 0);\n__decorate([\n    inject(IModelOptionProvider),\n    __metadata(\"design:type\", Object)\n], ModelRegistry.prototype, \"modelOptionProvider\", void 0);\n__decorate([\n    inject(IGraphProvider),\n    __metadata(\"design:type\", Object)\n], ModelRegistry.prototype, \"graphProvider\", void 0);\nModelRegistry = __decorate([\n    singleton({ contrib: [IFrontendApplicationContribution, IModelService] })\n], ModelRegistry);\nexport { ModelRegistry };\n//# sourceMappingURL=model-registry.js.map"]},"metadata":{},"sourceType":"module"}