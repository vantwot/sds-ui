{"ast":null,"code":"import _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Line } from '../line';\nimport { Curve } from '../curve';\nimport { Point } from '../point';\nimport { LineTo } from './lineto';\nimport { Segment } from './segment';\nexport var MoveTo = /*#__PURE__*/function (_Segment) {\n  _inherits(MoveTo, _Segment);\n\n  var _super = _createSuper(MoveTo);\n\n  function MoveTo(x, y) {\n    var _this;\n\n    _classCallCheck(this, MoveTo);\n\n    _this = _super.call(this);\n    _this.isVisible = false;\n    _this.isSubpathStart = true;\n\n    if (Line.isLine(x) || Curve.isCurve(x)) {\n      _this.endPoint = x.end.clone().round(2);\n    } else {\n      _this.endPoint = Point.create(x, y).round(2);\n    }\n\n    return _this;\n  }\n\n  _createClass(MoveTo, [{\n    key: \"start\",\n    get: function get() {\n      throw new Error('Illegal access. Moveto segments should not need a start property.');\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return 'M';\n    }\n  }, {\n    key: \"bbox\",\n    value: function bbox() {\n      return null;\n    }\n  }, {\n    key: \"closestPoint\",\n    value: function closestPoint() {\n      return this.end.clone();\n    }\n  }, {\n    key: \"closestPointLength\",\n    value: function closestPointLength() {\n      return 0;\n    }\n  }, {\n    key: \"closestPointNormalizedLength\",\n    value: function closestPointNormalizedLength() {\n      return 0;\n    }\n  }, {\n    key: \"closestPointT\",\n    value: function closestPointT() {\n      return 1;\n    }\n  }, {\n    key: \"closestPointTangent\",\n    value: function closestPointTangent() {\n      return null;\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      return 0;\n    }\n  }, {\n    key: \"lengthAtT\",\n    value: function lengthAtT() {\n      return 0;\n    }\n  }, {\n    key: \"divideAt\",\n    value: function divideAt() {\n      return [this.clone(), this.clone()];\n    }\n  }, {\n    key: \"divideAtLength\",\n    value: function divideAtLength() {\n      return [this.clone(), this.clone()];\n    }\n  }, {\n    key: \"getSubdivisions\",\n    value: function getSubdivisions() {\n      return [];\n    }\n  }, {\n    key: \"pointAt\",\n    value: function pointAt() {\n      return this.end.clone();\n    }\n  }, {\n    key: \"pointAtLength\",\n    value: function pointAtLength() {\n      return this.end.clone();\n    }\n  }, {\n    key: \"pointAtT\",\n    value: function pointAtT() {\n      return this.end.clone();\n    }\n  }, {\n    key: \"tangentAt\",\n    value: function tangentAt() {\n      return null;\n    }\n  }, {\n    key: \"tangentAtLength\",\n    value: function tangentAtLength() {\n      return null;\n    }\n  }, {\n    key: \"tangentAtT\",\n    value: function tangentAtT() {\n      return null;\n    }\n  }, {\n    key: \"isDifferentiable\",\n    value: function isDifferentiable() {\n      return false;\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(sx, sy, origin) {\n      this.end.scale(sx, sy, origin);\n      return this;\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(angle, origin) {\n      this.end.rotate(angle, origin);\n      return this;\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(tx, ty) {\n      if (typeof tx === 'number') {\n        this.end.translate(tx, ty);\n      } else {\n        this.end.translate(tx);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new MoveTo(this.end);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(s) {\n      return this.type === s.type && this.end.equals(s.end);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        type: this.type,\n        end: this.end.toJSON()\n      };\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var end = this.end;\n      return \"\".concat(this.type, \" \").concat(end.x, \" \").concat(end.y);\n    }\n  }]);\n\n  return MoveTo;\n}(Segment);\n\n(function (MoveTo) {\n  function create() {\n    var len = arguments.length;\n    var arg0 = arguments.length <= 0 ? undefined : arguments[0]; // line provided\n\n    if (Line.isLine(arg0)) {\n      return new MoveTo(arg0);\n    } // curve provided\n\n\n    if (Curve.isCurve(arg0)) {\n      return new MoveTo(arg0);\n    } // points provided\n\n\n    if (Point.isPointLike(arg0)) {\n      if (len === 1) {\n        return new MoveTo(arg0);\n      } // this is a moveto-with-subsequent-poly-line segment\n\n\n      var _segments = []; // points come one by one\n\n      for (var i = 0; i < len; i += 1) {\n        if (i === 0) {\n          _segments.push(new MoveTo(i < 0 || arguments.length <= i ? undefined : arguments[i]));\n        } else {\n          _segments.push(new LineTo(i < 0 || arguments.length <= i ? undefined : arguments[i]));\n        }\n      }\n\n      return _segments;\n    } // coordinates provided\n\n\n    if (len === 2) {\n      return new MoveTo(+(arguments.length <= 0 ? undefined : arguments[0]), +(arguments.length <= 1 ? undefined : arguments[1]));\n    } // this is a moveto-with-subsequent-poly-line segment\n\n\n    var segments = [];\n\n    for (var _i = 0; _i < len; _i += 2) {\n      var x = +(_i < 0 || arguments.length <= _i ? undefined : arguments[_i]);\n      var y = +(_i + 1 < 0 || arguments.length <= _i + 1 ? undefined : arguments[_i + 1]);\n\n      if (_i === 0) {\n        segments.push(new MoveTo(x, y));\n      } else {\n        segments.push(new LineTo(x, y));\n      }\n    }\n\n    return segments;\n  }\n\n  MoveTo.create = create;\n})(MoveTo || (MoveTo = {}));","map":{"version":3,"sources":["../../../src/geometry/path/moveto.ts"],"names":[],"mappings":";;;;AAAA,SAAS,IAAT,QAAqB,SAArB;AACA,SAAS,KAAT,QAAsB,UAAtB;AACA,SAAS,KAAT,QAAsB,UAAtB;AACA,SAAS,MAAT,QAAuB,UAAvB;AACA,SAAS,OAAT,QAAwB,WAAxB;AAEA,WAAa,MAAb;AAAA;;AAAA;;AAKE,kBACE,CADF,EAEE,CAFF,EAEY;AAAA;;AAAA;;AAEV;AAEA,UAAK,SAAL,GAAiB,KAAjB;AACA,UAAK,cAAL,GAAsB,IAAtB;;AAEA,QAAI,IAAI,CAAC,MAAL,CAAY,CAAZ,KAAkB,KAAK,CAAC,OAAN,CAAc,CAAd,CAAtB,EAAwC;AACtC,YAAK,QAAL,GAAgB,CAAC,CAAC,GAAF,CAAM,KAAN,GAAc,KAAd,CAAoB,CAApB,CAAhB;AACD,KAFD,MAEO;AACL,YAAK,QAAL,GAAgB,KAAK,CAAC,MAAN,CAAa,CAAb,EAAgB,CAAhB,EAAmB,KAAnB,CAAyB,CAAzB,CAAhB;AACD;;AAXS;AAYX;;AAnBH;AAAA;AAAA,SAqBE,eAAS;AACP,YAAM,IAAI,KAAJ,CACJ,mEADI,CAAN;AAGD;AAzBH;AAAA;AAAA,SA2BE,eAAQ;AACN,aAAO,GAAP;AACD;AA7BH;AAAA;AAAA,WA+BE,gBAAI;AACF,aAAO,IAAP;AACD;AAjCH;AAAA;AAAA,WAmCE,wBAAY;AACV,aAAO,KAAK,GAAL,CAAS,KAAT,EAAP;AACD;AArCH;AAAA;AAAA,WAuCE,8BAAkB;AAChB,aAAO,CAAP;AACD;AAzCH;AAAA;AAAA,WA2CE,wCAA4B;AAC1B,aAAO,CAAP;AACD;AA7CH;AAAA;AAAA,WA+CE,yBAAa;AACX,aAAO,CAAP;AACD;AAjDH;AAAA;AAAA,WAmDE,+BAAmB;AACjB,aAAO,IAAP;AACD;AArDH;AAAA;AAAA,WAuDE,kBAAM;AACJ,aAAO,CAAP;AACD;AAzDH;AAAA;AAAA,WA2DE,qBAAS;AACP,aAAO,CAAP;AACD;AA7DH;AAAA;AAAA,WA+DE,oBAAQ;AACN,aAAO,CAAC,KAAK,KAAL,EAAD,EAAe,KAAK,KAAL,EAAf,CAAP;AACD;AAjEH;AAAA;AAAA,WAmEE,0BAAc;AACZ,aAAO,CAAC,KAAK,KAAL,EAAD,EAAe,KAAK,KAAL,EAAf,CAAP;AACD;AArEH;AAAA;AAAA,WAuEE,2BAAe;AACb,aAAO,EAAP;AACD;AAzEH;AAAA;AAAA,WA2EE,mBAAO;AACL,aAAO,KAAK,GAAL,CAAS,KAAT,EAAP;AACD;AA7EH;AAAA;AAAA,WA+EE,yBAAa;AACX,aAAO,KAAK,GAAL,CAAS,KAAT,EAAP;AACD;AAjFH;AAAA;AAAA,WAmFE,oBAAQ;AACN,aAAO,KAAK,GAAL,CAAS,KAAT,EAAP;AACD;AArFH;AAAA;AAAA,WAuFE,qBAAS;AACP,aAAO,IAAP;AACD;AAzFH;AAAA;AAAA,WA2FE,2BAAe;AACb,aAAO,IAAP;AACD;AA7FH;AAAA;AAAA,WA+FE,sBAAU;AACR,aAAO,IAAP;AACD;AAjGH;AAAA;AAAA,WAmGE,4BAAgB;AACd,aAAO,KAAP;AACD;AArGH;AAAA;AAAA,WAuGE,eAAM,EAAN,EAAkB,EAAlB,EAA8B,MAA9B,EAAwE;AACtE,WAAK,GAAL,CAAS,KAAT,CAAe,EAAf,EAAmB,EAAnB,EAAuB,MAAvB;AACA,aAAO,IAAP;AACD;AA1GH;AAAA;AAAA,WA4GE,gBAAO,KAAP,EAAsB,MAAtB,EAAgE;AAC9D,WAAK,GAAL,CAAS,MAAT,CAAgB,KAAhB,EAAuB,MAAvB;AACA,aAAO,IAAP;AACD;AA/GH;AAAA;AAAA,WAmHE,mBAAU,EAAV,EAA0D,EAA1D,EAAqE;AACnE,UAAI,OAAO,EAAP,KAAc,QAAlB,EAA4B;AAC1B,aAAK,GAAL,CAAS,SAAT,CAAmB,EAAnB,EAAuB,EAAvB;AACD,OAFD,MAEO;AACL,aAAK,GAAL,CAAS,SAAT,CAAmB,EAAnB;AACD;;AACD,aAAO,IAAP;AACD;AA1HH;AAAA;AAAA,WA4HE,iBAAK;AACH,aAAO,IAAI,MAAJ,CAAW,KAAK,GAAhB,CAAP;AACD;AA9HH;AAAA;AAAA,WAgIE,gBAAO,CAAP,EAAiB;AACf,aAAO,KAAK,IAAL,KAAc,CAAC,CAAC,IAAhB,IAAwB,KAAK,GAAL,CAAS,MAAT,CAAgB,CAAC,CAAC,GAAlB,CAA/B;AACD;AAlIH;AAAA;AAAA,WAoIE,kBAAM;AACJ,aAAO;AACL,QAAA,IAAI,EAAE,KAAK,IADN;AAEL,QAAA,GAAG,EAAE,KAAK,GAAL,CAAS,MAAT;AAFA,OAAP;AAID;AAzIH;AAAA;AAAA,WA2IE,qBAAS;AACP,UAAM,GAAG,GAAG,KAAK,GAAjB;AACA,uBAAU,KAAK,IAAf,cAAuB,GAAG,CAAC,CAA3B,cAAgC,GAAG,CAAC,CAApC;AACD;AA9IH;;AAAA;AAAA,EAA4B,OAA5B;;AAiJA,CAAA,UAAiB,MAAjB,EAAuB;AAUrB,WAAgB,MAAhB,GAAqC;AACnC,QAAM,GAAG,GAAG,UAAK,MAAjB;AACA,QAAM,IAAI,mDAAV,CAFmC,CAInC;;AACA,QAAI,IAAI,CAAC,MAAL,CAAY,IAAZ,CAAJ,EAAuB;AACrB,aAAO,IAAI,MAAJ,CAAW,IAAX,CAAP;AACD,KAPkC,CASnC;;;AACA,QAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACvB,aAAO,IAAI,MAAJ,CAAW,IAAX,CAAP;AACD,KAZkC,CAcnC;;;AACA,QAAI,KAAK,CAAC,WAAN,CAAkB,IAAlB,CAAJ,EAA6B;AAC3B,UAAI,GAAG,KAAK,CAAZ,EAAe;AACb,eAAO,IAAI,MAAJ,CAAW,IAAX,CAAP;AACD,OAH0B,CAK3B;;;AACA,UAAM,SAAQ,GAAc,EAA5B,CAN2B,CAO3B;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,CAAC,IAAI,CAA9B,EAAiC;AAC/B,YAAI,CAAC,KAAK,CAAV,EAAa;AACX,UAAA,SAAQ,CAAC,IAAT,CAAc,IAAI,MAAJ,CAAgB,CAAhB,4BAAgB,CAAhB,yBAAgB,CAAhB,EAAd;AACD,SAFD,MAEO;AACL,UAAA,SAAQ,CAAC,IAAT,CAAc,IAAI,MAAJ,CAAgB,CAAhB,4BAAgB,CAAhB,yBAAgB,CAAhB,EAAd;AACD;AACF;;AACD,aAAO,SAAP;AACD,KA/BkC,CAiCnC;;;AACA,QAAI,GAAG,KAAK,CAAZ,EAAe;AACb,aAAO,IAAI,MAAJ,CAAW,mDAAX,EAAqB,mDAArB,CAAP;AACD,KApCkC,CAsCnC;;;AACA,QAAM,QAAQ,GAAc,EAA5B;;AACA,SAAK,IAAI,EAAC,GAAG,CAAb,EAAgB,EAAC,GAAG,GAApB,EAAyB,EAAC,IAAI,CAA9B,EAAiC;AAC/B,UAAM,CAAC,GAAG,EAAM,EAAN,4BAAM,EAAN,yBAAM,EAAN,EAAV;AACA,UAAM,CAAC,GAAG,EAAM,EAAC,GAAG,CAAV,4BAAM,EAAC,GAAG,CAAV,yBAAM,EAAC,GAAG,CAAV,EAAV;;AACA,UAAI,EAAC,KAAK,CAAV,EAAa;AACX,QAAA,QAAQ,CAAC,IAAT,CAAc,IAAI,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAd;AACD,OAFD,MAEO;AACL,QAAA,QAAQ,CAAC,IAAT,CAAc,IAAI,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAd;AACD;AACF;;AACD,WAAO,QAAP;AACD;;AAlDe,EAAA,MAAA,CAAA,MAAA,GAAM,MAAN;AAmDjB,CA7DD,EAAiB,MAAM,KAAN,MAAM,GAAA,EAAA,CAAvB","sourceRoot":"","sourcesContent":["import { Line } from '../line';\nimport { Curve } from '../curve';\nimport { Point } from '../point';\nimport { LineTo } from './lineto';\nimport { Segment } from './segment';\nexport class MoveTo extends Segment {\n    constructor(x, y) {\n        super();\n        this.isVisible = false;\n        this.isSubpathStart = true;\n        if (Line.isLine(x) || Curve.isCurve(x)) {\n            this.endPoint = x.end.clone().round(2);\n        }\n        else {\n            this.endPoint = Point.create(x, y).round(2);\n        }\n    }\n    get start() {\n        throw new Error('Illegal access. Moveto segments should not need a start property.');\n    }\n    get type() {\n        return 'M';\n    }\n    bbox() {\n        return null;\n    }\n    closestPoint() {\n        return this.end.clone();\n    }\n    closestPointLength() {\n        return 0;\n    }\n    closestPointNormalizedLength() {\n        return 0;\n    }\n    closestPointT() {\n        return 1;\n    }\n    closestPointTangent() {\n        return null;\n    }\n    length() {\n        return 0;\n    }\n    lengthAtT() {\n        return 0;\n    }\n    divideAt() {\n        return [this.clone(), this.clone()];\n    }\n    divideAtLength() {\n        return [this.clone(), this.clone()];\n    }\n    getSubdivisions() {\n        return [];\n    }\n    pointAt() {\n        return this.end.clone();\n    }\n    pointAtLength() {\n        return this.end.clone();\n    }\n    pointAtT() {\n        return this.end.clone();\n    }\n    tangentAt() {\n        return null;\n    }\n    tangentAtLength() {\n        return null;\n    }\n    tangentAtT() {\n        return null;\n    }\n    isDifferentiable() {\n        return false;\n    }\n    scale(sx, sy, origin) {\n        this.end.scale(sx, sy, origin);\n        return this;\n    }\n    rotate(angle, origin) {\n        this.end.rotate(angle, origin);\n        return this;\n    }\n    translate(tx, ty) {\n        if (typeof tx === 'number') {\n            this.end.translate(tx, ty);\n        }\n        else {\n            this.end.translate(tx);\n        }\n        return this;\n    }\n    clone() {\n        return new MoveTo(this.end);\n    }\n    equals(s) {\n        return this.type === s.type && this.end.equals(s.end);\n    }\n    toJSON() {\n        return {\n            type: this.type,\n            end: this.end.toJSON(),\n        };\n    }\n    serialize() {\n        const end = this.end;\n        return `${this.type} ${end.x} ${end.y}`;\n    }\n}\n(function (MoveTo) {\n    function create(...args) {\n        const len = args.length;\n        const arg0 = args[0];\n        // line provided\n        if (Line.isLine(arg0)) {\n            return new MoveTo(arg0);\n        }\n        // curve provided\n        if (Curve.isCurve(arg0)) {\n            return new MoveTo(arg0);\n        }\n        // points provided\n        if (Point.isPointLike(arg0)) {\n            if (len === 1) {\n                return new MoveTo(arg0);\n            }\n            // this is a moveto-with-subsequent-poly-line segment\n            const segments = [];\n            // points come one by one\n            for (let i = 0; i < len; i += 1) {\n                if (i === 0) {\n                    segments.push(new MoveTo(args[i]));\n                }\n                else {\n                    segments.push(new LineTo(args[i]));\n                }\n            }\n            return segments;\n        }\n        // coordinates provided\n        if (len === 2) {\n            return new MoveTo(+args[0], +args[1]);\n        }\n        // this is a moveto-with-subsequent-poly-line segment\n        const segments = [];\n        for (let i = 0; i < len; i += 2) {\n            const x = +args[i];\n            const y = +args[i + 1];\n            if (i === 0) {\n                segments.push(new MoveTo(x, y));\n            }\n            else {\n                segments.push(new LineTo(x, y));\n            }\n        }\n        return segments;\n    }\n    MoveTo.create = create;\n})(MoveTo || (MoveTo = {}));\n//# sourceMappingURL=moveto.js.map"]},"metadata":{},"sourceType":"module"}