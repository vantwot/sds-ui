{"ast":null,"code":"import get from 'lodash/get'; // 根据依赖字段生成 FormItem 的 updater\n\nexport function makeUpdaterByDependencies(dependencies, setReasonField) {\n  return function (prevValues, currentValues) {\n    var hasFunctionDep = dependencies.some(function (dep) {\n      return typeof (dep === null || dep === void 0 ? void 0 : dep.condition) === 'function';\n    });\n\n    if (hasFunctionDep) {\n      if (typeof setReasonField === 'function') {\n        setReasonField(undefined); // 在更新规则是一个函数时，不依赖特定字段进行更新(即只要有字段的值更新了就更新，因为不知道函数内部依赖什么字段)\n      }\n\n      return true;\n    }\n\n    return dependencies.some(function (dep) {\n      var name = dep.name;\n\n      if (!name) {\n        // eslint-disable-next-line no-console\n        console.error(\"[Schema form]: A dependent name must be provided in the updater when the dependency condition is not a function.\");\n        return false;\n      }\n\n      var changed = get(prevValues, name) !== get(currentValues, name);\n\n      if (changed) {\n        if (typeof setReasonField === 'function') {\n          setReasonField(name);\n        }\n\n        return true;\n      }\n\n      return false;\n    });\n  };\n}\nexport function isEmptyParamValue(val) {\n  return val === '' || val === undefined;\n} // 根据依赖字段的值生成当前的 FormItem 的值\n\nexport function makeFormItemControlledProps(form, schema, reasonField) {\n  var getFieldValue = form.getFieldValue,\n      getFieldsValue = form.getFieldsValue;\n  var dependencies = schema.dependencies,\n      hidden = schema.hidden,\n      disabled = schema.disabled;\n  var isHidden = hidden;\n  var isDisabled = disabled; // 当依赖满足并且依赖被操作过时，最终状态会变成依赖指定的状态\n\n  dependencies === null || dependencies === void 0 ? void 0 : dependencies.forEach(function (dependency) {\n    var depName = dependency.name,\n        condition = dependency.condition,\n        targetHiden = dependency.hidden,\n        targetDisabled = dependency.disabled; // 在 condition 不是函数时，只检验造成更新的字段的变化\n\n    if (typeof condition !== 'function' && reasonField && depName !== reasonField) {\n      return;\n    }\n\n    var match = false;\n\n    if (typeof condition === 'function') {\n      var values = getFieldsValue();\n      match = !!condition(values);\n    } else {\n      if (!depName) {\n        // eslint-disable-next-line no-console\n        console.error(\"[Schema form]: A dependent name must be provided in the props genarator when the dependency condition is not a function.\");\n        return;\n      }\n\n      match = getFieldValue(depName) === condition;\n    }\n\n    if (match) {\n      if (targetHiden !== undefined) {\n        isHidden = targetHiden;\n      }\n\n      if (targetDisabled !== undefined) {\n        isDisabled = targetDisabled;\n      }\n    }\n  });\n  return {\n    hidden: isHidden,\n    disabled: isDisabled\n  };\n}","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/@ant-design/flowchart/es/components/canvas-json-schema-form/schema-form/common/form-item-wrapper/util.js"],"names":["get","makeUpdaterByDependencies","dependencies","setReasonField","prevValues","currentValues","hasFunctionDep","some","dep","condition","undefined","name","console","error","changed","isEmptyParamValue","val","makeFormItemControlledProps","form","schema","reasonField","getFieldValue","getFieldsValue","hidden","disabled","isHidden","isDisabled","forEach","dependency","depName","targetHiden","targetDisabled","match","values"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\n// 根据依赖字段生成 FormItem 的 updater\nexport function makeUpdaterByDependencies(dependencies, setReasonField) {\n    return function (prevValues, currentValues) {\n        var hasFunctionDep = dependencies.some(function (dep) { return typeof (dep === null || dep === void 0 ? void 0 : dep.condition) === 'function'; });\n        if (hasFunctionDep) {\n            if (typeof setReasonField === 'function') {\n                setReasonField(undefined); // 在更新规则是一个函数时，不依赖特定字段进行更新(即只要有字段的值更新了就更新，因为不知道函数内部依赖什么字段)\n            }\n            return true;\n        }\n        return dependencies.some(function (dep) {\n            var name = dep.name;\n            if (!name) {\n                // eslint-disable-next-line no-console\n                console.error(\"[Schema form]: A dependent name must be provided in the updater when the dependency condition is not a function.\");\n                return false;\n            }\n            var changed = get(prevValues, name) !== get(currentValues, name);\n            if (changed) {\n                if (typeof setReasonField === 'function') {\n                    setReasonField(name);\n                }\n                return true;\n            }\n            return false;\n        });\n    };\n}\nexport function isEmptyParamValue(val) {\n    return val === '' || val === undefined;\n}\n// 根据依赖字段的值生成当前的 FormItem 的值\nexport function makeFormItemControlledProps(form, schema, reasonField) {\n    var getFieldValue = form.getFieldValue, getFieldsValue = form.getFieldsValue;\n    var dependencies = schema.dependencies, hidden = schema.hidden, disabled = schema.disabled;\n    var isHidden = hidden;\n    var isDisabled = disabled;\n    // 当依赖满足并且依赖被操作过时，最终状态会变成依赖指定的状态\n    dependencies === null || dependencies === void 0 ? void 0 : dependencies.forEach(function (dependency) {\n        var depName = dependency.name, condition = dependency.condition, targetHiden = dependency.hidden, targetDisabled = dependency.disabled;\n        // 在 condition 不是函数时，只检验造成更新的字段的变化\n        if (typeof condition !== 'function' && reasonField && depName !== reasonField) {\n            return;\n        }\n        var match = false;\n        if (typeof condition === 'function') {\n            var values = getFieldsValue();\n            match = !!condition(values);\n        }\n        else {\n            if (!depName) {\n                // eslint-disable-next-line no-console\n                console.error(\"[Schema form]: A dependent name must be provided in the props genarator when the dependency condition is not a function.\");\n                return;\n            }\n            match = getFieldValue(depName) === condition;\n        }\n        if (match) {\n            if (targetHiden !== undefined) {\n                isHidden = targetHiden;\n            }\n            if (targetDisabled !== undefined) {\n                isDisabled = targetDisabled;\n            }\n        }\n    });\n    return {\n        hidden: isHidden,\n        disabled: isDisabled,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}