{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar _dec, _class;\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nvar RegisterStyleAttributePlugin = (_dec = injectable(), _dec(_class = function () {\n  function RegisterStyleAttributePlugin() {\n    _classCallCheck(this, RegisterStyleAttributePlugin);\n  }\n\n  _createClass(RegisterStyleAttributePlugin, [{\n    key: \"apply\",\n    value: function apply(layer, _ref) {\n      var _this = this;\n\n      var styleAttributeService = _ref.styleAttributeService;\n      layer.hooks.init.tap('RegisterStyleAttributePlugin', function () {\n        _this.registerBuiltinAttributes(styleAttributeService);\n      });\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes(styleAttributeService) {\n      styleAttributeService.registerStyleAttribute({\n        name: 'position',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Position',\n          buffer: {\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex) {\n            return vertex.length === 2 ? [vertex[0], vertex[1], 0] : [vertex[0], vertex[1], vertex[2]];\n          }\n        }\n      });\n      styleAttributeService.registerStyleAttribute({\n        name: 'filter',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'filter',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx) {\n            var filter = feature.filter;\n            return filter ? [1] : [0];\n          }\n        }\n      });\n      styleAttributeService.registerStyleAttribute({\n        name: 'color',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Color',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 4,\n          update: function update(feature, featureIdx) {\n            var color = feature.color;\n            return !color || !color.length ? [1, 1, 1, 1] : color;\n          }\n        }\n      });\n      styleAttributeService.registerStyleAttribute({\n        name: 'vertexId',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_vertexId',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [featureIdx];\n          }\n        }\n      });\n    }\n  }]);\n\n  return RegisterStyleAttributePlugin;\n}()) || _class);\nexport { RegisterStyleAttributePlugin as default };","map":{"version":3,"sources":["../../src/plugins/RegisterStyleAttributePlugin.ts"],"names":["injectable","RegisterStyleAttributePlugin","styleAttributeService","layer","name","type","AttributeType","descriptor","buffer","data","gl","FLOAT","size","update","vertex","usage","filter","feature","color"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  ILayer,\n  ILayerPlugin,\n  IStyleAttributeService,\n  TYPES,\n} from '@antv/l7-core';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\n\n/**\n * 在初始化阶段完成属性的注册，以及首次根据 Layer 指定的三角化方法完成 indices 和 attribute 的创建\n */\n@injectable()\nexport default class RegisterStyleAttributePlugin implements ILayerPlugin {\n  public apply(\n    layer: ILayer,\n    {\n      styleAttributeService,\n    }: { styleAttributeService: IStyleAttributeService },\n  ) {\n    layer.hooks.init.tap('RegisterStyleAttributePlugin', () => {\n      this.registerBuiltinAttributes(styleAttributeService);\n    });\n  }\n\n  private registerBuiltinAttributes(\n    styleAttributeService: IStyleAttributeService,\n  ) {\n    styleAttributeService.registerStyleAttribute({\n      name: 'position',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Position',\n        buffer: {\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n        ) => {\n          return vertex.length === 2\n            ? [vertex[0], vertex[1], 0]\n            : [vertex[0], vertex[1], vertex[2]];\n        },\n      },\n    });\n\n    styleAttributeService.registerStyleAttribute({\n      name: 'filter',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'filter',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (feature: IEncodeFeature, featureIdx: number) => {\n          const { filter } = feature;\n          return filter ? [1] : [0];\n        },\n      },\n    });\n    styleAttributeService.registerStyleAttribute({\n      name: 'color',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Color',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 4,\n        update: (feature: IEncodeFeature, featureIdx: number) => {\n          const { color } = feature;\n          return !color || !color.length ? [1, 1, 1, 1] : color;\n        },\n      },\n    });\n    styleAttributeService.registerStyleAttribute({\n      // 统一注册每个顶点的唯一编号（目前用于样式的数据映射计算使用）\n      name: 'vertexId',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_vertexId',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [featureIdx];\n        },\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}