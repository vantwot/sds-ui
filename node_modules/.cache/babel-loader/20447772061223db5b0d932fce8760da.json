{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each, isPlainObject, isString, isBoolean, mix, deepMix, clone } from '@antv/util';\nimport Shape from '../element/shape';\nimport { getBBox } from '../util/graphic';\nimport { translate } from '../util/math';\nimport { uniqueId } from '../util/base';\nvar CACHE_BBOX = 'bboxCache';\nvar CACHE_CANVAS_BBOX = 'bboxCanvasCache';\nvar ARROWS = ['startArrow', 'endArrow'];\n\nvar ItemBase =\n/** @class */\nfunction () {\n  function ItemBase(cfg) {\n    this._cfg = {};\n    this.destroyed = false;\n    var defaultCfg = {\n      /**\n       * id\n       * @type {string}\n       */\n      id: undefined,\n\n      /**\n       * 类型\n       * @type {string}\n       */\n      type: 'item',\n\n      /**\n       * data model\n       * @type {object}\n       */\n      model: {},\n\n      /**\n       * g group\n       * @type {G.Group}\n       */\n      group: undefined,\n\n      /**\n       * is open animate\n       * @type {boolean}\n       */\n      animate: false,\n\n      /**\n       * visible - not group visible\n       * @type {boolean}\n       */\n      visible: true,\n\n      /**\n       * locked - lock node\n       * @type {boolean}\n       */\n      locked: false,\n\n      /**\n       * capture event\n       * @type {boolean}\n       */\n      event: true,\n\n      /**\n       * key shape to calculate item's bbox\n       * @type object\n       */\n      keyShape: undefined,\n\n      /**\n       * item's states, such as selected or active\n       * @type Array\n       */\n      states: []\n    };\n    this._cfg = Object.assign(defaultCfg, this.getDefaultCfg(), cfg);\n    var model = this.get('model');\n    var id = model.id;\n    var itemType = this.get('type');\n\n    if (!id) {\n      id = uniqueId(itemType);\n      this.get('model').id = id;\n    }\n\n    this.set('id', id);\n    var group = cfg.group;\n\n    if (group) {\n      group.set('item', this);\n      group.set('id', id);\n    }\n\n    this.init();\n    this.draw();\n    var shapeType = model.shape || model.type || (itemType === 'edge' ? 'line' : 'circle');\n    var shapeFactory = this.get('shapeFactory');\n\n    if (shapeFactory && shapeFactory[shapeType]) {\n      var options = shapeFactory[shapeType].options; // merge the stateStyles from item and shape\n\n      if (options && options.stateStyles) {\n        var styles = this.get('styles') || model.stateStyles;\n        styles = deepMix({}, options.stateStyles, styles);\n        this.set('styles', styles);\n      }\n    }\n  }\n  /**\n   * 根据 keyshape 计算包围盒\n   */\n\n\n  ItemBase.prototype.calculateBBox = function () {\n    var keyShape = this.get('keyShape');\n    var group = this.get('group'); // 因为 group 可能会移动，所以必须通过父元素计算才能计算出正确的包围盒\n\n    var bbox = getBBox(keyShape, group);\n    bbox.x = bbox.minX;\n    bbox.y = bbox.minY;\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n    bbox.centerX = (bbox.minX + bbox.maxX) / 2;\n    bbox.centerY = (bbox.minY + bbox.maxY) / 2;\n    return bbox;\n  };\n  /**\n   * 根据 keyshape 计算包围盒\n   */\n\n\n  ItemBase.prototype.calculateCanvasBBox = function () {\n    var keyShape = this.get('keyShape');\n    var group = this.get('group'); // 因为 group 可能会移动，所以必须通过父元素计算才能计算出正确的包围盒\n\n    var bbox = getBBox(keyShape, group);\n    bbox.x = bbox.minX;\n    bbox.y = bbox.minY;\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n    bbox.centerX = (bbox.minX + bbox.maxX) / 2;\n    bbox.centerY = (bbox.minY + bbox.maxY) / 2;\n    return bbox;\n  };\n  /**\n   * draw shape\n   */\n\n\n  ItemBase.prototype.drawInner = function () {\n    var self = this;\n    var shapeFactory = self.get('shapeFactory');\n    var group = self.get('group');\n    var model = self.get('model');\n    group.clear();\n    var visible = model.visible;\n    if (visible !== undefined && !visible) self.changeVisibility(visible);\n\n    if (!shapeFactory) {\n      return;\n    }\n\n    self.updatePosition(model);\n    var cfg = self.getShapeCfg(model); // 可能会附加额外信息\n\n    var shapeType = cfg.type;\n    var keyShape = shapeFactory.draw(shapeType, cfg, group);\n\n    if (keyShape) {\n      self.set('keyShape', keyShape);\n      keyShape.set('isKeyShape', true);\n      keyShape.set('draggable', true);\n    }\n\n    this.setOriginStyle(); // 防止由于用户外部修改 model 中的 shape 导致 shape 不更新\n\n    this.set('currentShape', shapeType);\n    this.restoreStates(shapeFactory, shapeType);\n  };\n  /**\n   * 设置图元素原始样式\n   * @param keyShape 图元素 keyShape\n   * @param group Group 容器\n   */\n\n\n  ItemBase.prototype.setOriginStyle = function () {\n    var group = this.get('group');\n    var children = group.get('children');\n    var keyShape = this.getKeyShape();\n    var self = this;\n    var keyShapeName = keyShape.get('name');\n\n    if (!this.get('originStyle')) {\n      // 第一次 set originStyle，直接拿首次渲染所有图形的 attrs\n      var originStyles = {};\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        var shapeType = child.get('type');\n        var name_1 = child.get('name');\n\n        if (name_1 && name_1 !== keyShapeName) {\n          originStyles[name_1] = shapeType !== 'image' ? clone(child.attr()) : self.getShapeStyleByName(name_1); // The text's position and matrix is not allowed to be affected by states\n\n          if (shapeType === 'text' && originStyles[name_1]) {\n            delete originStyles[name_1].x;\n            delete originStyles[name_1].y;\n            delete originStyles[name_1].matrix;\n          }\n        } else {\n          var keyShapeStyle = self.getShapeStyleByName(); // 可优化，需要去除 child.attr 中其他 shape 名的对象\n\n          delete keyShapeStyle.path;\n          delete keyShapeStyle.matrix;\n\n          if (!keyShapeName) {\n            Object.assign(originStyles, keyShapeStyle);\n          } else {\n            // 若 keyShape 有 name 且 !name，这个图形不是 keyShape，给这个图形一个 name\n            if (!name_1) {\n              var shapeName = uniqueId('shape');\n              child.set('name', shapeName);\n              group['shapeMap'][shapeName] = child;\n              originStyles[shapeName] = shapeType !== 'image' ? clone(child.attr()) : self.getShapeStyleByName(name_1);\n            } else {\n              originStyles[keyShapeName] = keyShapeStyle;\n            }\n          }\n        }\n      }\n\n      self.set('originStyle', originStyles);\n    } else {\n      // 第二次 set originStyles，需要找到不是 stateStyles 的样式，更新到 originStyles 中\n      // 上一次设置的 originStyle，是初始的 shape attrs\n      var styles_1 = this.get('originStyle'); // let styles: ShapeStyle = {};\n\n      if (keyShapeName && !styles_1[keyShapeName]) styles_1[keyShapeName] = {}; // 获取当前状态样式\n\n      var currentStatesStyle_1 = this.getCurrentStatesStyle();\n\n      var _loop_1 = function _loop_1(i) {\n        var child = children[i];\n        var name_2 = child.get('name');\n        var shapeAttrs = child.attr();\n\n        if (name_2 && name_2 !== keyShapeName) {\n          // 有 name 的非 keyShape 图形\n          var shapeStateStyle_1 = currentStatesStyle_1[name_2];\n          if (!styles_1[name_2]) styles_1[name_2] = {};\n\n          if (shapeStateStyle_1) {\n            Object.keys(shapeAttrs).forEach(function (key) {\n              var value = shapeAttrs[key];\n              if (value !== shapeStateStyle_1[key]) styles_1[name_2][key] = value;\n            });\n          } else {\n            styles_1[name_2] = child.get('type') !== 'image' ? clone(shapeAttrs) : self.getShapeStyleByName(name_2);\n          }\n        } else {\n          var shapeAttrs_1 = child.attr();\n          var keyShapeStateStyles_1 = {};\n          Object.keys(currentStatesStyle_1).forEach(function (styleKey) {\n            var subStyle = currentStatesStyle_1[styleKey];\n\n            if (styleKey === keyShapeName || !isPlainObject(subStyle)) {\n              keyShapeStateStyles_1[styleKey] = subStyle;\n            }\n          });\n          Object.keys(shapeAttrs_1).forEach(function (key) {\n            var value = shapeAttrs_1[key]; // 如果是对象且不是 arrow，则是其他 shape 的样式\n            // if (isPlainObject(value) && ARROWS.indexOf(name) === -1) return;\n\n            if (keyShapeStateStyles_1[key] !== value) {\n              if (keyShapeName) styles_1[keyShapeName][key] = value;else styles_1[key] = value;\n            }\n          });\n        }\n      }; // 遍历当前所有图形的 attrs，找到不是 stateStyles 的样式更新到 originStyles 中\n\n\n      for (var i = 0; i < children.length; i++) {\n        _loop_1(i);\n      }\n\n      delete styles_1.path;\n      delete styles_1.matrix;\n      delete styles_1.x;\n      delete styles_1.y;\n\n      if (styles_1[keyShapeName]) {\n        delete styles_1[keyShapeName].x;\n        delete styles_1[keyShapeName].y;\n        delete styles_1[keyShapeName].matrix;\n        delete styles_1[keyShapeName].path;\n      }\n\n      self.set('originStyle', styles_1);\n    }\n  };\n  /**\n   * restore shape states\n   * @param shapeFactory\n   * @param shapeType\n   */\n\n\n  ItemBase.prototype.restoreStates = function (shapeFactory, shapeType) {\n    var self = this;\n    var states = self.get('states');\n    each(states, function (state) {\n      shapeFactory.setState(shapeType, state, true, self);\n    });\n  };\n\n  ItemBase.prototype.init = function () {\n    var shapeFactory = Shape.getFactory(this.get('type'));\n    this.set('shapeFactory', shapeFactory);\n  };\n  /**\n   * 获取属性\n   * @internal 仅内部类使用\n   * @param  {String} key 属性名\n   * @return {object | string | number} 属性值\n   */\n\n\n  ItemBase.prototype.get = function (key) {\n    return this._cfg[key];\n  };\n  /**\n   * 设置属性\n   * @internal 仅内部类使用\n   * @param {String|Object} key 属性名，也可以是对象\n   * @param {object | string | number} val 属性值\n   */\n\n\n  ItemBase.prototype.set = function (key, val) {\n    if (isPlainObject(key)) {\n      this._cfg = __assign(__assign({}, this._cfg), key);\n    } else {\n      this._cfg[key] = val;\n    }\n  };\n\n  ItemBase.prototype.getDefaultCfg = function () {\n    return {};\n  };\n  /**\n   * 更新/刷新等操作后，清除 cache\n   */\n\n\n  ItemBase.prototype.clearCache = function () {\n    this.set(CACHE_BBOX, null);\n    this.set(CACHE_CANVAS_BBOX, null);\n  };\n  /**\n   * 渲染前的逻辑，提供给子类复写\n   */\n\n\n  ItemBase.prototype.beforeDraw = function () {};\n  /**\n   * 渲染后的逻辑，提供给子类复写\n   */\n\n\n  ItemBase.prototype.afterDraw = function () {};\n  /**\n   * 更新后做一些工作\n   */\n\n\n  ItemBase.prototype.afterUpdate = function () {};\n  /**\n   * draw shape\n   */\n\n\n  ItemBase.prototype.draw = function () {\n    this.beforeDraw();\n    this.drawInner();\n    this.afterDraw();\n  };\n\n  ItemBase.prototype.getShapeStyleByName = function (name) {\n    var group = this.get('group');\n    var currentShape;\n\n    if (name) {\n      currentShape = group['shapeMap'][name]; // group.find((element) => element.get('name') === name) as IShapeBase;\n    } else {\n      currentShape = this.getKeyShape();\n    }\n\n    if (currentShape) {\n      var styles_2 = {};\n      each(currentShape.attr(), function (val, key) {\n        // 修改 img 通过 updateItem 实现\n        if (key !== 'img' || isString(val)) {\n          styles_2[key] = val;\n        }\n      });\n      return styles_2;\n    }\n\n    return {};\n  };\n\n  ItemBase.prototype.getShapeCfg = function (model, updateType) {\n    var styles = this.get('styles');\n\n    if (styles) {\n      // merge graph的item样式与数据模型中的样式\n      var newModel = model;\n      newModel.style = __assign(__assign({}, styles), model.style);\n      return newModel;\n    }\n\n    return model;\n  };\n  /**\n   * 获取指定状态的样式，去除了全局样式\n   * @param state 状态名称\n   */\n\n\n  ItemBase.prototype.getStateStyle = function (state) {\n    var styles = this.get('styles');\n    var stateStyle = styles && styles[state];\n    return stateStyle;\n  };\n  /**\n   * get keyshape style\n   */\n\n\n  ItemBase.prototype.getOriginStyle = function () {\n    return this.get('originStyle');\n  };\n\n  ItemBase.prototype.getCurrentStatesStyle = function () {\n    var self = this;\n    var styles = {};\n    var states = self.getStates();\n\n    if (!states || !states.length) {\n      return this.get('originStyle');\n    }\n\n    each(self.getStates(), function (state) {\n      styles = Object.assign(styles, self.getStateStyle(state));\n    });\n    return styles;\n  };\n  /**\n   * 更改元素状态， visible 不属于这个范畴\n   * @internal 仅提供内部类 graph 使用\n   * @param {String} state 状态名\n   * @param {Boolean} value 节点状态值\n   */\n\n\n  ItemBase.prototype.setState = function (state, value) {\n    var states = this.get('states');\n    var shapeFactory = this.get('shapeFactory');\n    var stateName = state;\n    var filterStateName = state;\n\n    if (isString(value)) {\n      stateName = state + \":\" + value;\n      filterStateName = state + \":\";\n    }\n\n    var newStates = states;\n\n    if (isBoolean(value)) {\n      var index = states.indexOf(filterStateName);\n\n      if (value) {\n        if (index > -1) {\n          return;\n        }\n\n        states.push(stateName);\n      } else if (index > -1) {\n        states.splice(index, 1);\n      }\n    } else if (isString(value)) {\n      // 过滤掉 states 中 filterStateName 相关的状态\n      var filterStates = states.filter(function (name) {\n        return name.includes(filterStateName);\n      });\n\n      if (filterStates.length > 0) {\n        this.clearStates(filterStates);\n      }\n\n      newStates = newStates.filter(function (name) {\n        return !name.includes(filterStateName);\n      });\n      newStates.push(stateName);\n      this.set('states', newStates);\n    }\n\n    if (shapeFactory) {\n      var model = this.get('model');\n      var type = model.type; // 调用 shape/shape.ts 中的 setState\n\n      shapeFactory.setState(type, state, value, this);\n    }\n  };\n  /**\n   * 清除指定的状态，如果参数为空，则不做任务处理\n   * @param states 状态名称\n   */\n\n\n  ItemBase.prototype.clearStates = function (states) {\n    var self = this;\n    var originStates = self.getStates();\n    var shapeFactory = self.get('shapeFactory');\n    var model = self.get('model');\n    var shape = model.type;\n\n    if (!states) {\n      states = originStates;\n    }\n\n    if (isString(states)) {\n      states = [states];\n    }\n\n    var newStates = originStates.filter(function (state) {\n      return states.indexOf(state) === -1;\n    });\n    self.set('states', newStates);\n    states.forEach(function (state) {\n      shapeFactory.setState(shape, state, false, self);\n    });\n  };\n  /**\n   * 节点的图形容器\n   * @return {G.Group} 图形容器\n   */\n\n\n  ItemBase.prototype.getContainer = function () {\n    return this.get('group');\n  };\n  /**\n   * 节点的关键形状，用于计算节点大小，连线截距等\n   * @return {IShapeBase} 关键形状\n   */\n\n\n  ItemBase.prototype.getKeyShape = function () {\n    return this.get('keyShape');\n  };\n  /**\n   * 节点数据模型\n   * @return {Object} 数据模型\n   */\n\n\n  ItemBase.prototype.getModel = function () {\n    return this.get('model');\n  };\n  /**\n   * 节点类型\n   * @return {string} 节点的类型\n   */\n\n\n  ItemBase.prototype.getType = function () {\n    return this.get('type');\n  };\n  /**\n   * 获取 Item 的ID\n   */\n\n\n  ItemBase.prototype.getID = function () {\n    return this.get('id');\n  };\n  /**\n   * 是否是 Item 对象，悬空边情况下进行判定\n   */\n\n\n  ItemBase.prototype.isItem = function () {\n    return true;\n  };\n  /**\n   * 获取当前元素的所有状态\n   * @return {Array} 元素的所有状态\n   */\n\n\n  ItemBase.prototype.getStates = function () {\n    return this.get('states');\n  };\n  /**\n   * 当前元素是否处于某状态\n   * @param {String} state 状态名\n   * @return {Boolean} 是否处于某状态\n   */\n\n\n  ItemBase.prototype.hasState = function (state) {\n    var states = this.getStates();\n    return states.indexOf(state) >= 0;\n  };\n  /**\n   * 刷新一般用于处理几种情况\n   * 1. item model 在外部被改变\n   * 2. 边的节点位置发生改变，需要重新计算边\n   *\n   * 因为数据从外部被修改无法判断一些属性是否被修改，直接走位置和 shape 的更新\n   */\n\n\n  ItemBase.prototype.refresh = function (updateType) {\n    var model = this.get('model'); // 更新元素位置\n\n    this.updatePosition(model); // 更新元素内容，样式\n\n    this.updateShape(updateType); // 做一些更新之后的操作\n\n    this.afterUpdate(); // 清除缓存\n\n    this.clearCache();\n  };\n\n  ItemBase.prototype.getUpdateType = function (cfg) {\n    return undefined;\n  };\n  /**\n   * 将更新应用到 model 上，刷新属性\n   * @internal 仅提供给 Graph 使用，外部直接调用 graph.update 接口\n   * @param  {Object} cfg       配置项，可以是增量信息\n   */\n\n\n  ItemBase.prototype.update = function (cfg, updateType) {\n    if (updateType === void 0) {\n      updateType = undefined;\n    }\n\n    var model = this.get('model'); // 仅仅移动位置时，既不更新，也不重绘\n\n    if (updateType === 'move') {\n      this.updatePosition(cfg);\n    } else {\n      var oriVisible = model.visible;\n      var cfgVisible = cfg.visible;\n      if (oriVisible !== cfgVisible && cfgVisible !== undefined) this.changeVisibility(cfgVisible);\n      var originPosition = {\n        x: model.x,\n        y: model.y\n      };\n      cfg.x = isNaN(+cfg.x) ? model.x : +cfg.x;\n      cfg.y = isNaN(+cfg.y) ? model.y : +cfg.y;\n      var styles = this.get('styles');\n\n      if (cfg.stateStyles) {\n        // 更新 item 时更新 this.get('styles') 中的值\n        var stateStyles = cfg.stateStyles;\n        mix(styles, stateStyles);\n        delete cfg.stateStyles;\n      } // 直接将更新合到原数据模型上，可以保证用户在外部修改源数据然后刷新时的样式符合期待。\n\n\n      Object.assign(model, cfg); // 如果 x,y 有变化，先重置位置\n\n      if (originPosition.x !== cfg.x || originPosition.y !== cfg.y) {\n        this.updatePosition(cfg);\n      }\n\n      this.updateShape(updateType);\n    }\n\n    this.afterUpdate();\n    this.clearCache();\n  };\n  /**\n   * 更新元素内容，样式\n   */\n\n\n  ItemBase.prototype.updateShape = function (updateType) {\n    var shapeFactory = this.get('shapeFactory');\n    var model = this.get('model');\n    var shape = model.type; // 判定是否允许更新\n    // 1. 注册的节点允许更新\n    // 2. 更新后的 shape 等于原先的 shape\n\n    if (shapeFactory.shouldUpdate(shape) && shape === this.get('currentShape')) {\n      var updateCfg = this.getShapeCfg(model, updateType);\n      shapeFactory.baseUpdate(shape, updateCfg, this, updateType); // 更新完以后重新设置原始样式\n\n      if (updateType !== 'move') this.setOriginStyle();\n    } else {\n      // 如果不满足上面两种状态，重新绘制\n      this.draw();\n    } // 更新后重置节点状态\n\n\n    this.restoreStates(shapeFactory, shape);\n  };\n  /**\n   * 更新位置，避免整体重绘\n   * @param {object} cfg 待更新数据\n   */\n\n\n  ItemBase.prototype.updatePosition = function (cfg) {\n    var model = this.get('model');\n    var x = isNaN(+cfg.x) ? +model.x : +cfg.x;\n    var y = isNaN(+cfg.y) ? +model.y : +cfg.y;\n    var group = this.get('group');\n\n    if (isNaN(x) || isNaN(y)) {\n      return false;\n    }\n\n    model.x = x;\n    model.y = y;\n    var matrix = group.getMatrix();\n    if (matrix && matrix[6] === x && matrix[7] === y) return false;\n    group.resetMatrix(); // G 4.0 element 中移除了矩阵相关方法，详见https://www.yuque.com/antv/blog/kxzk9g#4rMMV\n\n    translate(group, {\n      x: x,\n      y: y\n    });\n    this.clearCache(); // 位置更新后需要清除缓存\n\n    return true;\n  };\n  /**\n   * 获取 item 的包围盒，这个包围盒是相对于 item 自己，不会将 matrix 计算在内\n   * @return {Object} 包含 x,y,width,height, centerX, centerY\n   */\n\n\n  ItemBase.prototype.getBBox = function () {\n    // 计算 bbox 开销有些大，缓存\n    var bbox = this.get(CACHE_BBOX);\n\n    if (!bbox) {\n      bbox = this.calculateBBox();\n      this.set(CACHE_BBOX, bbox);\n    }\n\n    return bbox;\n  };\n  /**\n   * 获取 item 相对于画布的包围盒，会将从顶层到当前元素的 matrix 都计算在内\n   * @return {Object} 包含 x,y,width,height, centerX, centerY\n   */\n\n\n  ItemBase.prototype.getCanvasBBox = function () {\n    // 计算 bbox 开销有些大，缓存\n    var bbox = this.get(CACHE_CANVAS_BBOX);\n\n    if (!bbox) {\n      bbox = this.calculateCanvasBBox();\n      this.set(CACHE_CANVAS_BBOX, bbox);\n    }\n\n    return bbox;\n  };\n  /**\n   * 将元素放到最前面\n   */\n\n\n  ItemBase.prototype.toFront = function () {\n    var group = this.get('group');\n    group.toFront();\n  };\n  /**\n   * 将元素放到最后面\n   */\n\n\n  ItemBase.prototype.toBack = function () {\n    var group = this.get('group');\n    group.toBack();\n  };\n  /**\n   * 显示元素\n   */\n\n\n  ItemBase.prototype.show = function () {\n    this.changeVisibility(true);\n  };\n  /**\n   * 隐藏元素\n   */\n\n\n  ItemBase.prototype.hide = function () {\n    this.changeVisibility(false);\n  };\n  /**\n   * 更改是否显示\n   * @param  {Boolean} visible 是否显示\n   */\n\n\n  ItemBase.prototype.changeVisibility = function (visible) {\n    var group = this.get('group');\n\n    if (visible) {\n      group.show();\n    } else {\n      group.hide();\n    }\n\n    this.set('visible', visible);\n  };\n  /**\n   * 元素是否可见\n   * @return {Boolean} 返回该元素是否可见\n   */\n\n\n  ItemBase.prototype.isVisible = function () {\n    return this.get('visible');\n  };\n  /**\n   * 是否拾取及出发该元素的交互事件\n   * @param {Boolean} enable 标识位\n   */\n\n\n  ItemBase.prototype.enableCapture = function (enable) {\n    var group = this.get('group');\n\n    if (group) {\n      group.set('capture', enable);\n    }\n  };\n\n  ItemBase.prototype.destroy = function () {\n    if (!this.destroyed) {\n      var animate = this.get('animate');\n      var group = this.get('group');\n\n      if (animate) {\n        group.stopAnimate();\n      }\n\n      group['shapeMap'] = {};\n      this.clearCache();\n      group.remove();\n      this._cfg = null;\n      this.destroyed = true;\n    }\n  };\n\n  return ItemBase;\n}();\n\nexport default ItemBase;","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/@antv/g6-core/es/item/item.js"],"names":["__assign","each","isPlainObject","isString","isBoolean","mix","deepMix","clone","Shape","getBBox","translate","uniqueId","CACHE_BBOX","CACHE_CANVAS_BBOX","ARROWS","ItemBase","cfg","_cfg","destroyed","defaultCfg","id","undefined","type","model","group","animate","visible","locked","event","keyShape","states","Object","assign","getDefaultCfg","get","itemType","set","init","draw","shapeType","shape","shapeFactory","options","stateStyles","styles","prototype","calculateBBox","bbox","x","minX","y","minY","width","maxX","height","maxY","centerX","centerY","calculateCanvasBBox","drawInner","self","clear","changeVisibility","updatePosition","getShapeCfg","setOriginStyle","restoreStates","children","getKeyShape","keyShapeName","originStyles","i","length","child","name_1","attr","getShapeStyleByName","matrix","keyShapeStyle","path","shapeName","styles_1","currentStatesStyle_1","getCurrentStatesStyle","_loop_1","name_2","shapeAttrs","shapeStateStyle_1","keys","forEach","key","value","shapeAttrs_1","keyShapeStateStyles_1","styleKey","subStyle","state","setState","getFactory","val","clearCache","beforeDraw","afterDraw","afterUpdate","name","currentShape","styles_2","updateType","newModel","style","getStateStyle","stateStyle","getOriginStyle","getStates","stateName","filterStateName","newStates","index","indexOf","push","splice","filterStates","filter","includes","clearStates","originStates","getContainer","getModel","getType","getID","isItem","hasState","refresh","updateShape","getUpdateType","update","oriVisible","cfgVisible","originPosition","isNaN","shouldUpdate","updateCfg","baseUpdate","getMatrix","resetMatrix","getCanvasBBox","toFront","toBack","show","hide","isVisible","enableCapture","enable","destroy","stopAnimate","remove"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { each, isPlainObject, isString, isBoolean, mix, deepMix, clone } from '@antv/util';\nimport Shape from '../element/shape';\nimport { getBBox } from '../util/graphic';\nimport { translate } from '../util/math';\nimport { uniqueId } from '../util/base';\nvar CACHE_BBOX = 'bboxCache';\nvar CACHE_CANVAS_BBOX = 'bboxCanvasCache';\nvar ARROWS = ['startArrow', 'endArrow'];\n\nvar ItemBase =\n/** @class */\nfunction () {\n  function ItemBase(cfg) {\n    this._cfg = {};\n    this.destroyed = false;\n    var defaultCfg = {\n      /**\n       * id\n       * @type {string}\n       */\n      id: undefined,\n\n      /**\n       * 类型\n       * @type {string}\n       */\n      type: 'item',\n\n      /**\n       * data model\n       * @type {object}\n       */\n      model: {},\n\n      /**\n       * g group\n       * @type {G.Group}\n       */\n      group: undefined,\n\n      /**\n       * is open animate\n       * @type {boolean}\n       */\n      animate: false,\n\n      /**\n       * visible - not group visible\n       * @type {boolean}\n       */\n      visible: true,\n\n      /**\n       * locked - lock node\n       * @type {boolean}\n       */\n      locked: false,\n\n      /**\n       * capture event\n       * @type {boolean}\n       */\n      event: true,\n\n      /**\n       * key shape to calculate item's bbox\n       * @type object\n       */\n      keyShape: undefined,\n\n      /**\n       * item's states, such as selected or active\n       * @type Array\n       */\n      states: []\n    };\n    this._cfg = Object.assign(defaultCfg, this.getDefaultCfg(), cfg);\n    var model = this.get('model');\n    var id = model.id;\n    var itemType = this.get('type');\n\n    if (!id) {\n      id = uniqueId(itemType);\n      this.get('model').id = id;\n    }\n\n    this.set('id', id);\n    var group = cfg.group;\n\n    if (group) {\n      group.set('item', this);\n      group.set('id', id);\n    }\n\n    this.init();\n    this.draw();\n    var shapeType = model.shape || model.type || (itemType === 'edge' ? 'line' : 'circle');\n    var shapeFactory = this.get('shapeFactory');\n\n    if (shapeFactory && shapeFactory[shapeType]) {\n      var options = shapeFactory[shapeType].options; // merge the stateStyles from item and shape\n\n      if (options && options.stateStyles) {\n        var styles = this.get('styles') || model.stateStyles;\n        styles = deepMix({}, options.stateStyles, styles);\n        this.set('styles', styles);\n      }\n    }\n  }\n  /**\n   * 根据 keyshape 计算包围盒\n   */\n\n\n  ItemBase.prototype.calculateBBox = function () {\n    var keyShape = this.get('keyShape');\n    var group = this.get('group'); // 因为 group 可能会移动，所以必须通过父元素计算才能计算出正确的包围盒\n\n    var bbox = getBBox(keyShape, group);\n    bbox.x = bbox.minX;\n    bbox.y = bbox.minY;\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n    bbox.centerX = (bbox.minX + bbox.maxX) / 2;\n    bbox.centerY = (bbox.minY + bbox.maxY) / 2;\n    return bbox;\n  };\n  /**\n   * 根据 keyshape 计算包围盒\n   */\n\n\n  ItemBase.prototype.calculateCanvasBBox = function () {\n    var keyShape = this.get('keyShape');\n    var group = this.get('group'); // 因为 group 可能会移动，所以必须通过父元素计算才能计算出正确的包围盒\n\n    var bbox = getBBox(keyShape, group);\n    bbox.x = bbox.minX;\n    bbox.y = bbox.minY;\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n    bbox.centerX = (bbox.minX + bbox.maxX) / 2;\n    bbox.centerY = (bbox.minY + bbox.maxY) / 2;\n    return bbox;\n  };\n  /**\n   * draw shape\n   */\n\n\n  ItemBase.prototype.drawInner = function () {\n    var self = this;\n    var shapeFactory = self.get('shapeFactory');\n    var group = self.get('group');\n    var model = self.get('model');\n    group.clear();\n    var visible = model.visible;\n    if (visible !== undefined && !visible) self.changeVisibility(visible);\n\n    if (!shapeFactory) {\n      return;\n    }\n\n    self.updatePosition(model);\n    var cfg = self.getShapeCfg(model); // 可能会附加额外信息\n\n    var shapeType = cfg.type;\n    var keyShape = shapeFactory.draw(shapeType, cfg, group);\n\n    if (keyShape) {\n      self.set('keyShape', keyShape);\n      keyShape.set('isKeyShape', true);\n      keyShape.set('draggable', true);\n    }\n\n    this.setOriginStyle(); // 防止由于用户外部修改 model 中的 shape 导致 shape 不更新\n\n    this.set('currentShape', shapeType);\n    this.restoreStates(shapeFactory, shapeType);\n  };\n  /**\n   * 设置图元素原始样式\n   * @param keyShape 图元素 keyShape\n   * @param group Group 容器\n   */\n\n\n  ItemBase.prototype.setOriginStyle = function () {\n    var group = this.get('group');\n    var children = group.get('children');\n    var keyShape = this.getKeyShape();\n    var self = this;\n    var keyShapeName = keyShape.get('name');\n\n    if (!this.get('originStyle')) {\n      // 第一次 set originStyle，直接拿首次渲染所有图形的 attrs\n      var originStyles = {};\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        var shapeType = child.get('type');\n        var name_1 = child.get('name');\n\n        if (name_1 && name_1 !== keyShapeName) {\n          originStyles[name_1] = shapeType !== 'image' ? clone(child.attr()) : self.getShapeStyleByName(name_1); // The text's position and matrix is not allowed to be affected by states\n\n          if (shapeType === 'text' && originStyles[name_1]) {\n            delete originStyles[name_1].x;\n            delete originStyles[name_1].y;\n            delete originStyles[name_1].matrix;\n          }\n        } else {\n          var keyShapeStyle = self.getShapeStyleByName(); // 可优化，需要去除 child.attr 中其他 shape 名的对象\n\n          delete keyShapeStyle.path;\n          delete keyShapeStyle.matrix;\n\n          if (!keyShapeName) {\n            Object.assign(originStyles, keyShapeStyle);\n          } else {\n            // 若 keyShape 有 name 且 !name，这个图形不是 keyShape，给这个图形一个 name\n            if (!name_1) {\n              var shapeName = uniqueId('shape');\n              child.set('name', shapeName);\n              group['shapeMap'][shapeName] = child;\n              originStyles[shapeName] = shapeType !== 'image' ? clone(child.attr()) : self.getShapeStyleByName(name_1);\n            } else {\n              originStyles[keyShapeName] = keyShapeStyle;\n            }\n          }\n        }\n      }\n\n      self.set('originStyle', originStyles);\n    } else {\n      // 第二次 set originStyles，需要找到不是 stateStyles 的样式，更新到 originStyles 中\n      // 上一次设置的 originStyle，是初始的 shape attrs\n      var styles_1 = this.get('originStyle'); // let styles: ShapeStyle = {};\n\n      if (keyShapeName && !styles_1[keyShapeName]) styles_1[keyShapeName] = {}; // 获取当前状态样式\n\n      var currentStatesStyle_1 = this.getCurrentStatesStyle();\n\n      var _loop_1 = function _loop_1(i) {\n        var child = children[i];\n        var name_2 = child.get('name');\n        var shapeAttrs = child.attr();\n\n        if (name_2 && name_2 !== keyShapeName) {\n          // 有 name 的非 keyShape 图形\n          var shapeStateStyle_1 = currentStatesStyle_1[name_2];\n          if (!styles_1[name_2]) styles_1[name_2] = {};\n\n          if (shapeStateStyle_1) {\n            Object.keys(shapeAttrs).forEach(function (key) {\n              var value = shapeAttrs[key];\n              if (value !== shapeStateStyle_1[key]) styles_1[name_2][key] = value;\n            });\n          } else {\n            styles_1[name_2] = child.get('type') !== 'image' ? clone(shapeAttrs) : self.getShapeStyleByName(name_2);\n          }\n        } else {\n          var shapeAttrs_1 = child.attr();\n          var keyShapeStateStyles_1 = {};\n          Object.keys(currentStatesStyle_1).forEach(function (styleKey) {\n            var subStyle = currentStatesStyle_1[styleKey];\n\n            if (styleKey === keyShapeName || !isPlainObject(subStyle)) {\n              keyShapeStateStyles_1[styleKey] = subStyle;\n            }\n          });\n          Object.keys(shapeAttrs_1).forEach(function (key) {\n            var value = shapeAttrs_1[key]; // 如果是对象且不是 arrow，则是其他 shape 的样式\n            // if (isPlainObject(value) && ARROWS.indexOf(name) === -1) return;\n\n            if (keyShapeStateStyles_1[key] !== value) {\n              if (keyShapeName) styles_1[keyShapeName][key] = value;else styles_1[key] = value;\n            }\n          });\n        }\n      }; // 遍历当前所有图形的 attrs，找到不是 stateStyles 的样式更新到 originStyles 中\n\n\n      for (var i = 0; i < children.length; i++) {\n        _loop_1(i);\n      }\n\n      delete styles_1.path;\n      delete styles_1.matrix;\n      delete styles_1.x;\n      delete styles_1.y;\n\n      if (styles_1[keyShapeName]) {\n        delete styles_1[keyShapeName].x;\n        delete styles_1[keyShapeName].y;\n        delete styles_1[keyShapeName].matrix;\n        delete styles_1[keyShapeName].path;\n      }\n\n      self.set('originStyle', styles_1);\n    }\n  };\n  /**\n   * restore shape states\n   * @param shapeFactory\n   * @param shapeType\n   */\n\n\n  ItemBase.prototype.restoreStates = function (shapeFactory, shapeType) {\n    var self = this;\n    var states = self.get('states');\n    each(states, function (state) {\n      shapeFactory.setState(shapeType, state, true, self);\n    });\n  };\n\n  ItemBase.prototype.init = function () {\n    var shapeFactory = Shape.getFactory(this.get('type'));\n    this.set('shapeFactory', shapeFactory);\n  };\n  /**\n   * 获取属性\n   * @internal 仅内部类使用\n   * @param  {String} key 属性名\n   * @return {object | string | number} 属性值\n   */\n\n\n  ItemBase.prototype.get = function (key) {\n    return this._cfg[key];\n  };\n  /**\n   * 设置属性\n   * @internal 仅内部类使用\n   * @param {String|Object} key 属性名，也可以是对象\n   * @param {object | string | number} val 属性值\n   */\n\n\n  ItemBase.prototype.set = function (key, val) {\n    if (isPlainObject(key)) {\n      this._cfg = __assign(__assign({}, this._cfg), key);\n    } else {\n      this._cfg[key] = val;\n    }\n  };\n\n  ItemBase.prototype.getDefaultCfg = function () {\n    return {};\n  };\n  /**\n   * 更新/刷新等操作后，清除 cache\n   */\n\n\n  ItemBase.prototype.clearCache = function () {\n    this.set(CACHE_BBOX, null);\n    this.set(CACHE_CANVAS_BBOX, null);\n  };\n  /**\n   * 渲染前的逻辑，提供给子类复写\n   */\n\n\n  ItemBase.prototype.beforeDraw = function () {};\n  /**\n   * 渲染后的逻辑，提供给子类复写\n   */\n\n\n  ItemBase.prototype.afterDraw = function () {};\n  /**\n   * 更新后做一些工作\n   */\n\n\n  ItemBase.prototype.afterUpdate = function () {};\n  /**\n   * draw shape\n   */\n\n\n  ItemBase.prototype.draw = function () {\n    this.beforeDraw();\n    this.drawInner();\n    this.afterDraw();\n  };\n\n  ItemBase.prototype.getShapeStyleByName = function (name) {\n    var group = this.get('group');\n    var currentShape;\n\n    if (name) {\n      currentShape = group['shapeMap'][name]; // group.find((element) => element.get('name') === name) as IShapeBase;\n    } else {\n      currentShape = this.getKeyShape();\n    }\n\n    if (currentShape) {\n      var styles_2 = {};\n      each(currentShape.attr(), function (val, key) {\n        // 修改 img 通过 updateItem 实现\n        if (key !== 'img' || isString(val)) {\n          styles_2[key] = val;\n        }\n      });\n      return styles_2;\n    }\n\n    return {};\n  };\n\n  ItemBase.prototype.getShapeCfg = function (model, updateType) {\n    var styles = this.get('styles');\n\n    if (styles) {\n      // merge graph的item样式与数据模型中的样式\n      var newModel = model;\n      newModel.style = __assign(__assign({}, styles), model.style);\n      return newModel;\n    }\n\n    return model;\n  };\n  /**\n   * 获取指定状态的样式，去除了全局样式\n   * @param state 状态名称\n   */\n\n\n  ItemBase.prototype.getStateStyle = function (state) {\n    var styles = this.get('styles');\n    var stateStyle = styles && styles[state];\n    return stateStyle;\n  };\n  /**\n   * get keyshape style\n   */\n\n\n  ItemBase.prototype.getOriginStyle = function () {\n    return this.get('originStyle');\n  };\n\n  ItemBase.prototype.getCurrentStatesStyle = function () {\n    var self = this;\n    var styles = {};\n    var states = self.getStates();\n\n    if (!states || !states.length) {\n      return this.get('originStyle');\n    }\n\n    each(self.getStates(), function (state) {\n      styles = Object.assign(styles, self.getStateStyle(state));\n    });\n    return styles;\n  };\n  /**\n   * 更改元素状态， visible 不属于这个范畴\n   * @internal 仅提供内部类 graph 使用\n   * @param {String} state 状态名\n   * @param {Boolean} value 节点状态值\n   */\n\n\n  ItemBase.prototype.setState = function (state, value) {\n    var states = this.get('states');\n    var shapeFactory = this.get('shapeFactory');\n    var stateName = state;\n    var filterStateName = state;\n\n    if (isString(value)) {\n      stateName = state + \":\" + value;\n      filterStateName = state + \":\";\n    }\n\n    var newStates = states;\n\n    if (isBoolean(value)) {\n      var index = states.indexOf(filterStateName);\n\n      if (value) {\n        if (index > -1) {\n          return;\n        }\n\n        states.push(stateName);\n      } else if (index > -1) {\n        states.splice(index, 1);\n      }\n    } else if (isString(value)) {\n      // 过滤掉 states 中 filterStateName 相关的状态\n      var filterStates = states.filter(function (name) {\n        return name.includes(filterStateName);\n      });\n\n      if (filterStates.length > 0) {\n        this.clearStates(filterStates);\n      }\n\n      newStates = newStates.filter(function (name) {\n        return !name.includes(filterStateName);\n      });\n      newStates.push(stateName);\n      this.set('states', newStates);\n    }\n\n    if (shapeFactory) {\n      var model = this.get('model');\n      var type = model.type; // 调用 shape/shape.ts 中的 setState\n\n      shapeFactory.setState(type, state, value, this);\n    }\n  };\n  /**\n   * 清除指定的状态，如果参数为空，则不做任务处理\n   * @param states 状态名称\n   */\n\n\n  ItemBase.prototype.clearStates = function (states) {\n    var self = this;\n    var originStates = self.getStates();\n    var shapeFactory = self.get('shapeFactory');\n    var model = self.get('model');\n    var shape = model.type;\n\n    if (!states) {\n      states = originStates;\n    }\n\n    if (isString(states)) {\n      states = [states];\n    }\n\n    var newStates = originStates.filter(function (state) {\n      return states.indexOf(state) === -1;\n    });\n    self.set('states', newStates);\n    states.forEach(function (state) {\n      shapeFactory.setState(shape, state, false, self);\n    });\n  };\n  /**\n   * 节点的图形容器\n   * @return {G.Group} 图形容器\n   */\n\n\n  ItemBase.prototype.getContainer = function () {\n    return this.get('group');\n  };\n  /**\n   * 节点的关键形状，用于计算节点大小，连线截距等\n   * @return {IShapeBase} 关键形状\n   */\n\n\n  ItemBase.prototype.getKeyShape = function () {\n    return this.get('keyShape');\n  };\n  /**\n   * 节点数据模型\n   * @return {Object} 数据模型\n   */\n\n\n  ItemBase.prototype.getModel = function () {\n    return this.get('model');\n  };\n  /**\n   * 节点类型\n   * @return {string} 节点的类型\n   */\n\n\n  ItemBase.prototype.getType = function () {\n    return this.get('type');\n  };\n  /**\n   * 获取 Item 的ID\n   */\n\n\n  ItemBase.prototype.getID = function () {\n    return this.get('id');\n  };\n  /**\n   * 是否是 Item 对象，悬空边情况下进行判定\n   */\n\n\n  ItemBase.prototype.isItem = function () {\n    return true;\n  };\n  /**\n   * 获取当前元素的所有状态\n   * @return {Array} 元素的所有状态\n   */\n\n\n  ItemBase.prototype.getStates = function () {\n    return this.get('states');\n  };\n  /**\n   * 当前元素是否处于某状态\n   * @param {String} state 状态名\n   * @return {Boolean} 是否处于某状态\n   */\n\n\n  ItemBase.prototype.hasState = function (state) {\n    var states = this.getStates();\n    return states.indexOf(state) >= 0;\n  };\n  /**\n   * 刷新一般用于处理几种情况\n   * 1. item model 在外部被改变\n   * 2. 边的节点位置发生改变，需要重新计算边\n   *\n   * 因为数据从外部被修改无法判断一些属性是否被修改，直接走位置和 shape 的更新\n   */\n\n\n  ItemBase.prototype.refresh = function (updateType) {\n    var model = this.get('model'); // 更新元素位置\n\n    this.updatePosition(model); // 更新元素内容，样式\n\n    this.updateShape(updateType); // 做一些更新之后的操作\n\n    this.afterUpdate(); // 清除缓存\n\n    this.clearCache();\n  };\n\n  ItemBase.prototype.getUpdateType = function (cfg) {\n    return undefined;\n  };\n  /**\n   * 将更新应用到 model 上，刷新属性\n   * @internal 仅提供给 Graph 使用，外部直接调用 graph.update 接口\n   * @param  {Object} cfg       配置项，可以是增量信息\n   */\n\n\n  ItemBase.prototype.update = function (cfg, updateType) {\n    if (updateType === void 0) {\n      updateType = undefined;\n    }\n\n    var model = this.get('model'); // 仅仅移动位置时，既不更新，也不重绘\n\n    if (updateType === 'move') {\n      this.updatePosition(cfg);\n    } else {\n      var oriVisible = model.visible;\n      var cfgVisible = cfg.visible;\n      if (oriVisible !== cfgVisible && cfgVisible !== undefined) this.changeVisibility(cfgVisible);\n      var originPosition = {\n        x: model.x,\n        y: model.y\n      };\n      cfg.x = isNaN(+cfg.x) ? model.x : +cfg.x;\n      cfg.y = isNaN(+cfg.y) ? model.y : +cfg.y;\n      var styles = this.get('styles');\n\n      if (cfg.stateStyles) {\n        // 更新 item 时更新 this.get('styles') 中的值\n        var stateStyles = cfg.stateStyles;\n        mix(styles, stateStyles);\n        delete cfg.stateStyles;\n      } // 直接将更新合到原数据模型上，可以保证用户在外部修改源数据然后刷新时的样式符合期待。\n\n\n      Object.assign(model, cfg); // 如果 x,y 有变化，先重置位置\n\n      if (originPosition.x !== cfg.x || originPosition.y !== cfg.y) {\n        this.updatePosition(cfg);\n      }\n\n      this.updateShape(updateType);\n    }\n\n    this.afterUpdate();\n    this.clearCache();\n  };\n  /**\n   * 更新元素内容，样式\n   */\n\n\n  ItemBase.prototype.updateShape = function (updateType) {\n    var shapeFactory = this.get('shapeFactory');\n    var model = this.get('model');\n    var shape = model.type; // 判定是否允许更新\n    // 1. 注册的节点允许更新\n    // 2. 更新后的 shape 等于原先的 shape\n\n    if (shapeFactory.shouldUpdate(shape) && shape === this.get('currentShape')) {\n      var updateCfg = this.getShapeCfg(model, updateType);\n      shapeFactory.baseUpdate(shape, updateCfg, this, updateType); // 更新完以后重新设置原始样式\n\n      if (updateType !== 'move') this.setOriginStyle();\n    } else {\n      // 如果不满足上面两种状态，重新绘制\n      this.draw();\n    } // 更新后重置节点状态\n\n\n    this.restoreStates(shapeFactory, shape);\n  };\n  /**\n   * 更新位置，避免整体重绘\n   * @param {object} cfg 待更新数据\n   */\n\n\n  ItemBase.prototype.updatePosition = function (cfg) {\n    var model = this.get('model');\n    var x = isNaN(+cfg.x) ? +model.x : +cfg.x;\n    var y = isNaN(+cfg.y) ? +model.y : +cfg.y;\n    var group = this.get('group');\n\n    if (isNaN(x) || isNaN(y)) {\n      return false;\n    }\n\n    model.x = x;\n    model.y = y;\n    var matrix = group.getMatrix();\n    if (matrix && matrix[6] === x && matrix[7] === y) return false;\n    group.resetMatrix(); // G 4.0 element 中移除了矩阵相关方法，详见https://www.yuque.com/antv/blog/kxzk9g#4rMMV\n\n    translate(group, {\n      x: x,\n      y: y\n    });\n    this.clearCache(); // 位置更新后需要清除缓存\n\n    return true;\n  };\n  /**\n   * 获取 item 的包围盒，这个包围盒是相对于 item 自己，不会将 matrix 计算在内\n   * @return {Object} 包含 x,y,width,height, centerX, centerY\n   */\n\n\n  ItemBase.prototype.getBBox = function () {\n    // 计算 bbox 开销有些大，缓存\n    var bbox = this.get(CACHE_BBOX);\n\n    if (!bbox) {\n      bbox = this.calculateBBox();\n      this.set(CACHE_BBOX, bbox);\n    }\n\n    return bbox;\n  };\n  /**\n   * 获取 item 相对于画布的包围盒，会将从顶层到当前元素的 matrix 都计算在内\n   * @return {Object} 包含 x,y,width,height, centerX, centerY\n   */\n\n\n  ItemBase.prototype.getCanvasBBox = function () {\n    // 计算 bbox 开销有些大，缓存\n    var bbox = this.get(CACHE_CANVAS_BBOX);\n\n    if (!bbox) {\n      bbox = this.calculateCanvasBBox();\n      this.set(CACHE_CANVAS_BBOX, bbox);\n    }\n\n    return bbox;\n  };\n  /**\n   * 将元素放到最前面\n   */\n\n\n  ItemBase.prototype.toFront = function () {\n    var group = this.get('group');\n    group.toFront();\n  };\n  /**\n   * 将元素放到最后面\n   */\n\n\n  ItemBase.prototype.toBack = function () {\n    var group = this.get('group');\n    group.toBack();\n  };\n  /**\n   * 显示元素\n   */\n\n\n  ItemBase.prototype.show = function () {\n    this.changeVisibility(true);\n  };\n  /**\n   * 隐藏元素\n   */\n\n\n  ItemBase.prototype.hide = function () {\n    this.changeVisibility(false);\n  };\n  /**\n   * 更改是否显示\n   * @param  {Boolean} visible 是否显示\n   */\n\n\n  ItemBase.prototype.changeVisibility = function (visible) {\n    var group = this.get('group');\n\n    if (visible) {\n      group.show();\n    } else {\n      group.hide();\n    }\n\n    this.set('visible', visible);\n  };\n  /**\n   * 元素是否可见\n   * @return {Boolean} 返回该元素是否可见\n   */\n\n\n  ItemBase.prototype.isVisible = function () {\n    return this.get('visible');\n  };\n  /**\n   * 是否拾取及出发该元素的交互事件\n   * @param {Boolean} enable 标识位\n   */\n\n\n  ItemBase.prototype.enableCapture = function (enable) {\n    var group = this.get('group');\n\n    if (group) {\n      group.set('capture', enable);\n    }\n  };\n\n  ItemBase.prototype.destroy = function () {\n    if (!this.destroyed) {\n      var animate = this.get('animate');\n      var group = this.get('group');\n\n      if (animate) {\n        group.stopAnimate();\n      }\n\n      group['shapeMap'] = {};\n      this.clearCache();\n      group.remove();\n      this._cfg = null;\n      this.destroyed = true;\n    }\n  };\n\n  return ItemBase;\n}();\n\nexport default ItemBase;"]},"metadata":{},"sourceType":"module"}