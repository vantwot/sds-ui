{"ast":null,"code":"import { Point } from '../../geometry';\nimport { Dom, NumberExt, FunctionExt } from '../../util';\nimport { ToolsView } from '../../view/tool';\nimport * as Util from './util';\nexport class Button extends ToolsView.ToolItem {\n  onRender() {\n    Dom.addClass(this.container, this.prefixClassName('cell-tool-button'));\n    this.update();\n  }\n\n  update() {\n    this.updatePosition();\n    return this;\n  }\n\n  updatePosition() {\n    const view = this.cellView;\n    const matrix = view.cell.isEdge() ? this.getEdgeMatrix() : this.getNodeMatrix();\n    Dom.transform(this.container, matrix, {\n      absolute: true\n    });\n  }\n\n  getNodeMatrix() {\n    const view = this.cellView;\n    const options = this.options;\n    let {\n      x = 0,\n      y = 0\n    } = options;\n    const {\n      offset,\n      useCellGeometry,\n      rotate\n    } = options;\n    let bbox = Util.getViewBBox(view, useCellGeometry);\n    const angle = view.cell.getAngle();\n\n    if (!rotate) {\n      bbox = bbox.bbox(angle);\n    }\n\n    let offsetX = 0;\n    let offsetY = 0;\n\n    if (typeof offset === 'number') {\n      offsetX = offset;\n      offsetY = offset;\n    } else if (typeof offset === 'object') {\n      offsetX = offset.x;\n      offsetY = offset.y;\n    }\n\n    x = NumberExt.normalizePercentage(x, bbox.width);\n    y = NumberExt.normalizePercentage(y, bbox.height);\n    let matrix = Dom.createSVGMatrix().translate(bbox.x + bbox.width / 2, bbox.y + bbox.height / 2);\n\n    if (rotate) {\n      matrix = matrix.rotate(angle);\n    }\n\n    matrix = matrix.translate(x + offsetX - bbox.width / 2, y + offsetY - bbox.height / 2);\n    return matrix;\n  }\n\n  getEdgeMatrix() {\n    const view = this.cellView;\n    const options = this.options;\n    const {\n      offset = 0,\n      distance = 0,\n      rotate\n    } = options;\n    let tangent;\n    let position;\n    let angle;\n\n    if (NumberExt.isPercentage(distance)) {\n      tangent = view.getTangentAtRatio(parseFloat(distance) / 100);\n    } else {\n      tangent = view.getTangentAtLength(distance);\n    }\n\n    if (tangent) {\n      position = tangent.start;\n      angle = tangent.vector().vectorAngle(new Point(1, 0)) || 0;\n    } else {\n      position = view.getConnection().start;\n      angle = 0;\n    }\n\n    let matrix = Dom.createSVGMatrix().translate(position.x, position.y).rotate(angle);\n\n    if (typeof offset === 'object') {\n      matrix = matrix.translate(offset.x || 0, offset.y || 0);\n    } else {\n      matrix = matrix.translate(0, offset);\n    }\n\n    if (!rotate) {\n      matrix = matrix.rotate(-angle);\n    }\n\n    return matrix;\n  }\n\n  onMouseDown(e) {\n    if (this.guard(e)) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n    const onClick = this.options.onClick;\n\n    if (typeof onClick === 'function') {\n      FunctionExt.call(onClick, this.cellView, {\n        e,\n        view: this.cellView,\n        cell: this.cellView.cell,\n        btn: this\n      });\n    }\n  }\n\n}\n\n(function (Button) {\n  Button.config({\n    name: 'button',\n    events: {\n      mousedown: 'onMouseDown',\n      touchstart: 'onMouseDown'\n    }\n  });\n})(Button || (Button = {}));\n\n(function (Button) {\n  Button.Remove = Button.define({\n    name: 'button-remove',\n    markup: [{\n      tagName: 'circle',\n      selector: 'button',\n      attrs: {\n        r: 7,\n        fill: '#FF1D00',\n        cursor: 'pointer'\n      }\n    }, {\n      tagName: 'path',\n      selector: 'icon',\n      attrs: {\n        d: 'M -3 -3 3 3 M -3 3 3 -3',\n        fill: 'none',\n        stroke: '#FFFFFF',\n        'stroke-width': 2,\n        'pointer-events': 'none'\n      }\n    }],\n    distance: 60,\n    offset: 0,\n\n    onClick(_ref) {\n      let {\n        view,\n        btn\n      } = _ref;\n      btn.parent.remove();\n      view.cell.remove({\n        ui: true,\n        toolId: btn.cid\n      });\n    }\n\n  });\n})(Button || (Button = {}));","map":{"version":3,"sources":["../../../src/registry/tool/button.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Point } from '../../geometry';\nimport { Dom, NumberExt, FunctionExt } from '../../util';\nimport { ToolsView } from '../../view/tool';\nimport * as Util from './util';\nexport class Button extends ToolsView.ToolItem {\n    onRender() {\n        Dom.addClass(this.container, this.prefixClassName('cell-tool-button'));\n        this.update();\n    }\n    update() {\n        this.updatePosition();\n        return this;\n    }\n    updatePosition() {\n        const view = this.cellView;\n        const matrix = view.cell.isEdge()\n            ? this.getEdgeMatrix()\n            : this.getNodeMatrix();\n        Dom.transform(this.container, matrix, { absolute: true });\n    }\n    getNodeMatrix() {\n        const view = this.cellView;\n        const options = this.options;\n        let { x = 0, y = 0 } = options;\n        const { offset, useCellGeometry, rotate } = options;\n        let bbox = Util.getViewBBox(view, useCellGeometry);\n        const angle = view.cell.getAngle();\n        if (!rotate) {\n            bbox = bbox.bbox(angle);\n        }\n        let offsetX = 0;\n        let offsetY = 0;\n        if (typeof offset === 'number') {\n            offsetX = offset;\n            offsetY = offset;\n        }\n        else if (typeof offset === 'object') {\n            offsetX = offset.x;\n            offsetY = offset.y;\n        }\n        x = NumberExt.normalizePercentage(x, bbox.width);\n        y = NumberExt.normalizePercentage(y, bbox.height);\n        let matrix = Dom.createSVGMatrix().translate(bbox.x + bbox.width / 2, bbox.y + bbox.height / 2);\n        if (rotate) {\n            matrix = matrix.rotate(angle);\n        }\n        matrix = matrix.translate(x + offsetX - bbox.width / 2, y + offsetY - bbox.height / 2);\n        return matrix;\n    }\n    getEdgeMatrix() {\n        const view = this.cellView;\n        const options = this.options;\n        const { offset = 0, distance = 0, rotate } = options;\n        let tangent;\n        let position;\n        let angle;\n        if (NumberExt.isPercentage(distance)) {\n            tangent = view.getTangentAtRatio(parseFloat(distance) / 100);\n        }\n        else {\n            tangent = view.getTangentAtLength(distance);\n        }\n        if (tangent) {\n            position = tangent.start;\n            angle = tangent.vector().vectorAngle(new Point(1, 0)) || 0;\n        }\n        else {\n            position = view.getConnection().start;\n            angle = 0;\n        }\n        let matrix = Dom.createSVGMatrix()\n            .translate(position.x, position.y)\n            .rotate(angle);\n        if (typeof offset === 'object') {\n            matrix = matrix.translate(offset.x || 0, offset.y || 0);\n        }\n        else {\n            matrix = matrix.translate(0, offset);\n        }\n        if (!rotate) {\n            matrix = matrix.rotate(-angle);\n        }\n        return matrix;\n    }\n    onMouseDown(e) {\n        if (this.guard(e)) {\n            return;\n        }\n        e.stopPropagation();\n        e.preventDefault();\n        const onClick = this.options.onClick;\n        if (typeof onClick === 'function') {\n            FunctionExt.call(onClick, this.cellView, {\n                e,\n                view: this.cellView,\n                cell: this.cellView.cell,\n                btn: this,\n            });\n        }\n    }\n}\n(function (Button) {\n    Button.config({\n        name: 'button',\n        events: {\n            mousedown: 'onMouseDown',\n            touchstart: 'onMouseDown',\n        },\n    });\n})(Button || (Button = {}));\n(function (Button) {\n    Button.Remove = Button.define({\n        name: 'button-remove',\n        markup: [\n            {\n                tagName: 'circle',\n                selector: 'button',\n                attrs: {\n                    r: 7,\n                    fill: '#FF1D00',\n                    cursor: 'pointer',\n                },\n            },\n            {\n                tagName: 'path',\n                selector: 'icon',\n                attrs: {\n                    d: 'M -3 -3 3 3 M -3 3 3 -3',\n                    fill: 'none',\n                    stroke: '#FFFFFF',\n                    'stroke-width': 2,\n                    'pointer-events': 'none',\n                },\n            },\n        ],\n        distance: 60,\n        offset: 0,\n        onClick({ view, btn }) {\n            btn.parent.remove();\n            view.cell.remove({ ui: true, toolId: btn.cid });\n        },\n    });\n})(Button || (Button = {}));\n//# sourceMappingURL=button.js.map"]},"metadata":{},"sourceType":"module"}