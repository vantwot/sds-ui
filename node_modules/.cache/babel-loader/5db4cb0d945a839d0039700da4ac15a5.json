{"ast":null,"code":"const extendStatics = Object.setPrototypeOf || {\n  __proto__: []\n} instanceof Array && function (d, b) {\n  d.__proto__ = b; // eslint-disable-line no-proto\n} || function (d, b) {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const p in b) {\n    if (Object.prototype.hasOwnProperty.call(b, p)) {\n      d[p] = b[p];\n    }\n  }\n};\n/**\n * @see https://github.com/microsoft/TypeScript/blob/5c85febb0ce9d6088cbe9b09cb42f73f9ee8ea05/src/compiler/transformers/es2015.ts#L4309\n */\n// eslint-disable-next-line\n\n\nexport function inherit(cls, base) {\n  extendStatics(cls, base);\n\n  function tmp() {\n    this.constructor = cls;\n  }\n\n  cls.prototype = base === null ? Object.create(base) : (tmp.prototype = base.prototype, new tmp());\n}\n\nclass A {}\n\nconst isNativeClass = /^\\s*class\\s+/.test(`${A}`) || /^\\s*class\\s*\\{/.test(`${class {}}`);\n/**\n * Extends class with specified class name.\n */\n// eslint-disable-next-line\n\nexport function createClass(className, base) {\n  let cls;\n\n  if (isNativeClass) {\n    // eslint-disable-next-line no-new-func\n    cls = new Function('base', `return class ${className} extends base { }`)(base);\n  } else {\n    // eslint-disable-next-line no-new-func\n    cls = new Function('base', `return function ${className}() { return base.apply(this, arguments) }`)(base);\n    inherit(cls, base);\n  }\n\n  return cls;\n}","map":{"version":3,"sources":["../../../src/util/object/inherit.ts"],"names":[],"mappings":"AAAA,MAAM,aAAa,GACjB,MAAM,CAAC,cAAP,IACC;AAAE,EAAA,SAAS,EAAE;AAAb,aAA6B,KAA7B,IACC,UAAU,CAAV,EAAa,CAAb,EAAc;AACZ,EAAA,CAAC,CAAC,SAAF,GAAc,CAAd,CADY,CACI;AACjB,CAJH,IAKA,UAAU,CAAV,EAAa,CAAb,EAAc;AACZ;AACA,OAAK,MAAM,CAAX,IAAgB,CAAhB,EAAmB;AACjB,QAAI,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,CAArC,EAAwC,CAAxC,CAAJ,EAAgD;AAC9C,MAAA,CAAC,CAAC,CAAD,CAAD,GAAQ,CAAS,CAAC,CAAD,CAAjB;AACD;AACF;AACF,CAbH;AAeA;;AAEG;AACH;;;AACA,OAAM,SAAU,OAAV,CAAkB,GAAlB,EAAiC,IAAjC,EAA+C;AACnD,EAAA,aAAa,CAAC,GAAD,EAAM,IAAN,CAAb;;AACA,WAAS,GAAT,GAAY;AACV,SAAK,WAAL,GAAmB,GAAnB;AACD;;AACD,EAAA,GAAG,CAAC,SAAJ,GACE,IAAI,KAAK,IAAT,GACI,MAAM,CAAC,MAAP,CAAc,IAAd,CADJ,IAEM,GAAG,CAAC,SAAJ,GAAgB,IAAI,CAAC,SAAtB,EAAkC,IAAK,GAAL,EAFvC,CADF;AAID;;AAED,MAAM,CAAN,CAAO;;AACP,MAAM,aAAa,GACjB,eAAe,IAAf,CAAoB,GAAG,CAAC,EAAxB,KAA+B,iBAAiB,IAAjB,CAAsB,GAAG,MAAA,EAAQ,EAAjC,CADjC;AAGA;;AAEG;AACH;;AACA,OAAM,SAAU,WAAV,CAAyB,SAAzB,EAA4C,IAA5C,EAA0D;AAC9D,MAAI,GAAJ;;AACA,MAAI,aAAJ,EAAmB;AACjB;AACA,IAAA,GAAG,GAAG,IAAI,QAAJ,CAAa,MAAb,EAAqB,gBAAgB,SAAS,mBAA9C,EACJ,IADI,CAAN;AAGD,GALD,MAKO;AACL;AACA,IAAA,GAAG,GAAG,IAAI,QAAJ,CACJ,MADI,EAEJ,mBAAmB,SAAS,2CAFxB,EAGJ,IAHI,CAAN;AAIA,IAAA,OAAO,CAAC,GAAD,EAAM,IAAN,CAAP;AACD;;AAED,SAAO,GAAP;AACD","sourceRoot":"","sourcesContent":["const extendStatics = Object.setPrototypeOf ||\n    ({ __proto__: [] } instanceof Array &&\n        function (d, b) {\n            d.__proto__ = b; // eslint-disable-line no-proto\n        }) ||\n    function (d, b) {\n        // eslint-disable-next-line no-restricted-syntax\n        for (const p in b) {\n            if (Object.prototype.hasOwnProperty.call(b, p)) {\n                d[p] = b[p];\n            }\n        }\n    };\n/**\n * @see https://github.com/microsoft/TypeScript/blob/5c85febb0ce9d6088cbe9b09cb42f73f9ee8ea05/src/compiler/transformers/es2015.ts#L4309\n */\n// eslint-disable-next-line\nexport function inherit(cls, base) {\n    extendStatics(cls, base);\n    function tmp() {\n        this.constructor = cls;\n    }\n    cls.prototype =\n        base === null\n            ? Object.create(base)\n            : ((tmp.prototype = base.prototype), new tmp());\n}\nclass A {\n}\nconst isNativeClass = /^\\s*class\\s+/.test(`${A}`) || /^\\s*class\\s*\\{/.test(`${class {\n}}`);\n/**\n * Extends class with specified class name.\n */\n// eslint-disable-next-line\nexport function createClass(className, base) {\n    let cls;\n    if (isNativeClass) {\n        // eslint-disable-next-line no-new-func\n        cls = new Function('base', `return class ${className} extends base { }`)(base);\n    }\n    else {\n        // eslint-disable-next-line no-new-func\n        cls = new Function('base', `return function ${className}() { return base.apply(this, arguments) }`)(base);\n        inherit(cls, base);\n    }\n    return cls;\n}\n//# sourceMappingURL=inherit.js.map"]},"metadata":{},"sourceType":"module"}