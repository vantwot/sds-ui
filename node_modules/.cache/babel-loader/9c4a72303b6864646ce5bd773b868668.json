{"ast":null,"code":"import 'reflect-metadata';\n/** Application 扩展依赖 */\n\nimport { ICommandHandler, IGraphCommandFactory, ICommandContextProvider } from '../command/interface';\nimport { Module } from 'mana-syringe';\nimport { CmdContext } from './cmd-context';\nimport { registerCommandConfig } from './config';\nimport { registerXFlowCommandContribution } from './command-contribution';\nimport { GraphMappingHelper } from './mapping-service';\n/** 依赖扩展模块，必须要加载 */\n\nexport var createModule = function createModule(commandConfig) {\n  return Module(function (register) {\n    /** 注册 mapping helper */\n    register(GraphMappingHelper);\n    /** 注册 CommandConfig */\n\n    registerCommandConfig(register, commandConfig);\n    /** 注册 Command扩展 */\n\n    registerXFlowCommandContribution(register, commandConfig);\n    /** 注册 Context Clz */\n\n    register(CmdContext);\n    /** ICommandHandler 工厂 */\n\n    register(IGraphCommandFactory, {\n      useFactory: function useFactory(context) {\n        return function (commandId, args, hook) {\n          var child = context.container.createChild();\n          /** 实例化 Context */\n\n          var cmdContext = child.get(CmdContext);\n          /** 绑定 CommandContext 工厂类 */\n\n          child.register(ICommandContextProvider, {\n            useDynamic: function useDynamic() {\n              return function () {\n                return cmdContext;\n              };\n            }\n          });\n          /** 实例化CommandHandler */\n\n          var commandHandler = child.getNamed(ICommandHandler, commandId);\n          /** 设置参数 */\n\n          cmdContext.setArgs(args, hook);\n          /** 绑定关系 */\n\n          cmdContext.handlerInstance = commandHandler;\n          return commandHandler;\n        };\n      }\n    });\n  });\n};","map":{"version":3,"sources":["../../src/command-contributions/module.ts"],"names":[],"mappings":"AAAA,OAAO,kBAAP;AACA;;AACA,SACE,eADF,EAEE,oBAFF,EAGE,uBAHF,QAIO,sBAJP;AAKA,SAAS,MAAT,QAAuB,cAAvB;AACA,SAAS,UAAT,QAA2B,eAA3B;AAKA,SAAS,qBAAT,QAAsC,UAAtC;AACA,SAAS,gCAAT,QAAiD,wBAAjD;AACA,SAAS,kBAAT,QAAmC,mBAAnC;AAEA;;AACA,OAAO,IAAM,YAAY,GAAG,SAAf,YAAe,CAAC,aAAD,EAAiC;AAC3D,SAAO,MAAM,CAAC,UAAA,QAAQ,EAAG;AACvB;AACA,IAAA,QAAQ,CAAC,kBAAD,CAAR;AAEA;;AACA,IAAA,qBAAqB,CAAC,QAAD,EAAW,aAAX,CAArB;AAEA;;AACA,IAAA,gCAAgC,CAAC,QAAD,EAAW,aAAX,CAAhC;AAEA;;AACA,IAAA,QAAQ,CAAa,UAAb,CAAR;AAEA;;AACA,IAAA,QAAQ,CAAkB,oBAAlB,EAAwC;AAC9C,MAAA,UAAU,EAAE,oBAAA,OAAO,EAAG;AACpB,eAAO,UAAC,SAAD,EAAoB,IAApB,EAA+B,IAA/B,EAAqD;AAC1D,cAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,WAAlB,EAAd;AACA;;AACA,cAAM,UAAU,GAAG,KAAK,CAAC,GAAN,CAAsB,UAAtB,CAAnB;AACA;;AACA,UAAA,KAAK,CAAC,QAAN,CAAwC,uBAAxC,EAAiE;AAC/D,YAAA,UAAU,EAAE,sBAAK;AACf,qBAAO;AAAA,uBAAM,UAAN;AAAA,eAAP;AACD;AAH8D,WAAjE;AAKA;;AACA,cAAM,cAAc,GAAG,KAAK,CAAC,QAAN,CAAgC,eAAhC,EAAiD,SAAjD,CAAvB;AACA;;AACA,UAAA,UAAU,CAAC,OAAX,CAAmB,IAAnB,EAAyB,IAAzB;AACA;;AACA,UAAA,UAAU,CAAC,eAAX,GAA6B,cAA7B;AACA,iBAAO,cAAP;AACD,SAjBD;AAkBD;AApB6C,KAAxC,CAAR;AAsBD,GApCY,CAAb;AAqCD,CAtCM","sourceRoot":"","sourcesContent":["import 'reflect-metadata';\n/** Application 扩展依赖 */\nimport { ICommandHandler, IGraphCommandFactory, ICommandContextProvider, } from '../command/interface';\nimport { Module } from 'mana-syringe';\nimport { CmdContext } from './cmd-context';\nimport { registerCommandConfig } from './config';\nimport { registerXFlowCommandContribution } from './command-contribution';\nimport { GraphMappingHelper } from './mapping-service';\n/** 依赖扩展模块，必须要加载 */\nexport const createModule = (commandConfig) => {\n    return Module(register => {\n        /** 注册 mapping helper */\n        register(GraphMappingHelper);\n        /** 注册 CommandConfig */\n        registerCommandConfig(register, commandConfig);\n        /** 注册 Command扩展 */\n        registerXFlowCommandContribution(register, commandConfig);\n        /** 注册 Context Clz */\n        register(CmdContext);\n        /** ICommandHandler 工厂 */\n        register(IGraphCommandFactory, {\n            useFactory: context => {\n                return (commandId, args, hook) => {\n                    const child = context.container.createChild();\n                    /** 实例化 Context */\n                    const cmdContext = child.get(CmdContext);\n                    /** 绑定 CommandContext 工厂类 */\n                    child.register(ICommandContextProvider, {\n                        useDynamic: () => {\n                            return () => cmdContext;\n                        },\n                    });\n                    /** 实例化CommandHandler */\n                    const commandHandler = child.getNamed(ICommandHandler, commandId);\n                    /** 设置参数 */\n                    cmdContext.setArgs(args, hook);\n                    /** 绑定关系 */\n                    cmdContext.handlerInstance = commandHandler;\n                    return commandHandler;\n                };\n            },\n        });\n    });\n};\n//# sourceMappingURL=module.js.map"]},"metadata":{},"sourceType":"module"}