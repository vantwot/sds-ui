{"ast":null,"code":"import _slicedToArray from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport React from 'react';\nimport { Syringe } from 'mana-syringe';\nimport { Deferred } from '../../common/deferred';\nimport { MAX_ZOOM, MIN_ZOOM, XFLOW_DEFAULT_EDGE, XFLOW_DEFAULT_NODE, XFLOW_DEFAULT_GROUP_NODE } from '../../constants';\nimport { uuidv4 } from '../../common/uuid';\nimport { XFlowDefaultGroupNode } from './react-group-node';\nimport { XFlowDefaultNode } from './react-node';\nexport var NsGraphConfig;\n\n(function (NsGraphConfig) {\n  NsGraphConfig.CONFIG_TYPE = 'GraphConfig';\n  /** 默认的Node解析函数 */\n\n  NsGraphConfig.defaultNodeTypeParser = function (nodeConfig) {\n    return nodeConfig.renderKey;\n  };\n  /** 构造的Edge解析函数 */\n\n\n  NsGraphConfig.defaultEdgeTypeParser = function (edgeConfig) {\n    return edgeConfig.renderKey;\n  };\n  /** XFlow默认的React组件 */\n\n\n  NsGraphConfig.defaultNodeMapValue = [[XFLOW_DEFAULT_NODE, XFlowDefaultNode], [XFLOW_DEFAULT_GROUP_NODE, XFlowDefaultGroupNode]];\n})(NsGraphConfig || (NsGraphConfig = {}));\n\nexport var GraphConfig =\n/** 构造函数 */\nfunction GraphConfig() {\n  var _this = this;\n\n  _classCallCheck(this, GraphConfig);\n\n  /** 配置类型 */\n  this.CONFIG_TYPE = NsGraphConfig.CONFIG_TYPE;\n  /** 画布的属性 */\n\n  this.x6Options = new Deferred();\n  /** 画布的root节点 */\n\n  this.rootContainer = new Deferred();\n  /** 画布的dom节点 */\n\n  this.graphContainer = new Deferred();\n  /** 自定义节点 */\n\n  this.nodeRender = new Map(NsGraphConfig.defaultNodeMapValue);\n  /** 自定义边 */\n\n  this.edgeRender = new Map();\n  /** 解析node渲染类型的parser */\n\n  this.nodeTypeParser = NsGraphConfig.defaultNodeTypeParser;\n  /** 解析edge渲染类型的parser  */\n\n  this.edgeTypeParser = NsGraphConfig.defaultEdgeTypeParser;\n  /** 自定义事件 */\n\n  this.events = [];\n\n  this.mergeX6Config = function (config) {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var current;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.getX6Config();\n\n            case 2:\n              current = _context.sent;\n              return _context.abrupt(\"return\", Object.assign(current, config));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n  };\n\n  this.getX6Config = function () {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var config;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.x6Options.promise;\n\n            case 2:\n              config = _context2.sent;\n              return _context2.abrupt(\"return\", config);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n  };\n\n  this.setX6Config = function (options) {\n    var _a;\n\n    var defaultOptions = _this.getDefaultGraphOptions();\n\n    (_a = _this.x6Options) === null || _a === void 0 ? void 0 : _a.resolve(Object.assign(Object.assign({}, defaultOptions), options));\n  };\n\n  this.setRootContainer = function (ele) {\n    ele && (_this === null || _this === void 0 ? void 0 : _this.rootContainer.resolve(ele));\n  };\n\n  this.setGraphContainer = function (ele) {\n    var _a;\n\n    ele && ((_a = _this.graphContainer) === null || _a === void 0 ? void 0 : _a.resolve(ele));\n  };\n\n  this.setEvents = function (events) {\n    _this.events = events;\n  };\n\n  this.setDefaultNodeRender = function (component) {\n    _this.nodeRender.set(XFLOW_DEFAULT_NODE, component);\n  };\n\n  this.setDefaultEdgeRender = function (component) {\n    _this.edgeRender.set(XFLOW_DEFAULT_EDGE, component);\n  };\n\n  this.setNodeRender = function (renderKey, component) {\n    _this.nodeRender.set(renderKey, component);\n  };\n\n  this.setEdgeRender = function (renderKey, component) {\n    _this.edgeRender.set(renderKey, component);\n  };\n  /** 设置解析node render key的 parser */\n\n\n  this.setNodeTypeParser = function (parser) {\n    _this.nodeTypeParser = parser;\n  };\n  /** 设置解析edge render key的 parser */\n\n\n  this.setEdgeTypeParser = function (parser) {\n    _this.edgeTypeParser = parser;\n  };\n  /** 获取Graph参数 */\n\n\n  this.getConfig = function () {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var _yield$Promise$all, _yield$Promise$all2, rootContainer, graphContainer, x6Options, graphConfig;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return Promise.all([this.rootContainer.promise, this.graphContainer.promise, this.x6Options.promise]);\n\n            case 2:\n              _yield$Promise$all = _context3.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3);\n              rootContainer = _yield$Promise$all2[0];\n              graphContainer = _yield$Promise$all2[1];\n              x6Options = _yield$Promise$all2[2];\n              graphConfig = {\n                xflowInstanceId: this.xflowInstanceId,\n                graphId: this.graphId,\n                nodeViewId: this.graphId,\n                rootContainer: rootContainer,\n                graphContainer: graphContainer,\n                x6Options: x6Options,\n                events: this.events,\n                nodeRender: this.nodeRender,\n                edgeRender: this.edgeRender,\n                nodeTypeParser: this.nodeTypeParser,\n                edgeTypeParser: this.edgeTypeParser\n              };\n              return _context3.abrupt(\"return\", graphConfig);\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n  };\n\n  this.getDefaultGraphOptions = function () {\n    var defaultOptions = {\n      // 节点是否可旋转\n      rotating: false,\n      // 节点是否可调整大小\n      resizing: false,\n      // 节点连线规则配置（详细文档：https://X6.antv.vision/zh/docs/api/graph/interaction#connecting）\n      connecting: {\n        snap: true,\n        dangling: false,\n        highlight: false,\n        connectionPoint: 'rect',\n        router: {\n          name: 'er'\n        },\n        connector: {\n          name: 'rounded',\n          args: {\n            radius: 15\n          }\n        }\n      },\n      // 画布背景，支持颜色/图片/水印等（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/background）\n      background: {},\n      // 网格配置（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/grid）\n      grid: {\n        visible: true\n      },\n      // 点选/框选配置（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/selection）\n      selecting: {\n        strict: true,\n        enabled: true,\n        multiple: true,\n        selectCellOnMoved: true,\n        showNodeSelectionBox: false,\n        // 框选可以选中edge\n        rubberEdge: true,\n        // 框选可以选中node\n        rubberNode: true,\n        movable: true\n      },\n      // 对齐线配置，辅助移动节点排版（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/snapline）\n      snapline: {\n        enabled: false\n      },\n      // 撤销/重做能力（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/history）\n      history: {\n        enabled: false\n      },\n      // 剪切板，支持跨画布的复制/粘贴（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/clipboard）\n      clipboard: {\n        enabled: true,\n        useLocalStorage: true\n      },\n      // 使画布具备滚动、平移、居中、缩放等能力（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/scroller）\n      scroller: {\n        enabled: false\n      },\n      // 滚轮缩放 （详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/mousewheel）\n      mousewheel: {\n        enabled: true,\n        minScale: MIN_ZOOM,\n        maxScale: MAX_ZOOM,\n        factor: 1.1,\n        modifiers: ['ctrl', 'meta']\n      },\n\n      /** 普通画布, 支持拖拽平移 */\n      panning: {\n        enabled: true\n      },\n\n      /** 缩放参数 */\n      scaling: {\n        min: MIN_ZOOM,\n        max: MAX_ZOOM\n      },\n\n      /** keyboad */\n      keyboard: {\n        enabled: true\n      },\n\n      /** 定制节点和边的交互行为 */\n      interacting: {\n        /** 节点默认可以被移动 */\n        nodeMovable: true,\n\n        /** 边上标签默认不可以被移动 */\n        edgeLabelMovable: false\n      },\n      async: false\n    };\n    return defaultOptions;\n  };\n\n  this.dispose = function () {\n    // TODO: 统一看下defer的销毁\n    _this.rootContainer = new Deferred();\n    _this.graphContainer = new Deferred();\n    _this.x6Options = new Deferred();\n  };\n\n  this.graphId = uuidv4();\n};\nexport var IGraphOptionProvider = Symbol('IGraphOptionProvider');\nexport var registerGraphConfig = function registerGraphConfig(register, graphConfig) {\n  register(IGraphOptionProvider, {\n    lifecycle: Syringe.Lifecycle.singleton,\n    useDynamic: function useDynamic() {\n      return {\n        getOptions: function getOptions() {\n          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n            return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    return _context4.abrupt(\"return\", graphConfig.getConfig());\n\n                  case 1:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4);\n          }));\n        }\n      };\n    }\n  });\n};\nexport var createGraphConfig = function createGraphConfig(addOptions) {\n  return function (props) {\n    /** bridge config and props */\n    var propsContainer = React.useMemo(function () {\n      return {\n        getValue: function getValue() {\n          return {};\n        }\n      };\n    }, []);\n\n    propsContainer.getValue = function () {\n      return props;\n    };\n\n    var graphConfig = React.useMemo(function () {\n      var config = new GraphConfig();\n      addOptions(config, propsContainer);\n      return config;\n    }, [propsContainer]);\n    return graphConfig;\n  };\n};","map":{"version":3,"sources":["../../../src/xflow-main/graph/config.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport React from 'react';\nimport { Syringe } from 'mana-syringe';\nimport { Deferred } from '../../common/deferred';\nimport { MAX_ZOOM, MIN_ZOOM, XFLOW_DEFAULT_EDGE, XFLOW_DEFAULT_NODE, XFLOW_DEFAULT_GROUP_NODE, } from '../../constants';\nimport { uuidv4 } from '../../common/uuid';\nimport { XFlowDefaultGroupNode } from './react-group-node';\nimport { XFlowDefaultNode } from './react-node';\nexport var NsGraphConfig;\n(function (NsGraphConfig) {\n    NsGraphConfig.CONFIG_TYPE = 'GraphConfig';\n    /** 默认的Node解析函数 */\n    NsGraphConfig.defaultNodeTypeParser = (nodeConfig) => nodeConfig.renderKey;\n    /** 构造的Edge解析函数 */\n    NsGraphConfig.defaultEdgeTypeParser = (edgeConfig) => edgeConfig.renderKey;\n    /** XFlow默认的React组件 */\n    NsGraphConfig.defaultNodeMapValue = [\n        [XFLOW_DEFAULT_NODE, XFlowDefaultNode],\n        [XFLOW_DEFAULT_GROUP_NODE, XFlowDefaultGroupNode],\n    ];\n})(NsGraphConfig || (NsGraphConfig = {}));\nexport class GraphConfig {\n    /** 构造函数 */\n    constructor() {\n        /** 配置类型 */\n        this.CONFIG_TYPE = NsGraphConfig.CONFIG_TYPE;\n        /** 画布的属性 */\n        this.x6Options = new Deferred();\n        /** 画布的root节点 */\n        this.rootContainer = new Deferred();\n        /** 画布的dom节点 */\n        this.graphContainer = new Deferred();\n        /** 自定义节点 */\n        this.nodeRender = new Map(NsGraphConfig.defaultNodeMapValue);\n        /** 自定义边 */\n        this.edgeRender = new Map();\n        /** 解析node渲染类型的parser */\n        this.nodeTypeParser = NsGraphConfig.defaultNodeTypeParser;\n        /** 解析edge渲染类型的parser  */\n        this.edgeTypeParser = NsGraphConfig.defaultEdgeTypeParser;\n        /** 自定义事件 */\n        this.events = [];\n        this.mergeX6Config = (config) => __awaiter(this, void 0, void 0, function* () {\n            const current = yield this.getX6Config();\n            return Object.assign(current, config);\n        });\n        this.getX6Config = () => __awaiter(this, void 0, void 0, function* () {\n            const config = yield this.x6Options.promise;\n            return config;\n        });\n        this.setX6Config = (options) => {\n            var _a;\n            const defaultOptions = this.getDefaultGraphOptions();\n            (_a = this.x6Options) === null || _a === void 0 ? void 0 : _a.resolve(Object.assign(Object.assign({}, defaultOptions), options));\n        };\n        this.setRootContainer = (ele) => {\n            ele && (this === null || this === void 0 ? void 0 : this.rootContainer.resolve(ele));\n        };\n        this.setGraphContainer = (ele) => {\n            var _a;\n            ele && ((_a = this.graphContainer) === null || _a === void 0 ? void 0 : _a.resolve(ele));\n        };\n        this.setEvents = (events) => {\n            this.events = events;\n        };\n        this.setDefaultNodeRender = (component) => {\n            this.nodeRender.set(XFLOW_DEFAULT_NODE, component);\n        };\n        this.setDefaultEdgeRender = (component) => {\n            this.edgeRender.set(XFLOW_DEFAULT_EDGE, component);\n        };\n        this.setNodeRender = (renderKey, component) => {\n            this.nodeRender.set(renderKey, component);\n        };\n        this.setEdgeRender = (renderKey, component) => {\n            this.edgeRender.set(renderKey, component);\n        };\n        /** 设置解析node render key的 parser */\n        this.setNodeTypeParser = (parser) => {\n            this.nodeTypeParser = parser;\n        };\n        /** 设置解析edge render key的 parser */\n        this.setEdgeTypeParser = (parser) => {\n            this.edgeTypeParser = parser;\n        };\n        /** 获取Graph参数 */\n        this.getConfig = () => __awaiter(this, void 0, void 0, function* () {\n            const [rootContainer, graphContainer, x6Options] = yield Promise.all([\n                this.rootContainer.promise,\n                this.graphContainer.promise,\n                this.x6Options.promise,\n            ]);\n            const graphConfig = {\n                xflowInstanceId: this.xflowInstanceId,\n                graphId: this.graphId,\n                nodeViewId: this.graphId,\n                rootContainer,\n                graphContainer,\n                x6Options,\n                events: this.events,\n                nodeRender: this.nodeRender,\n                edgeRender: this.edgeRender,\n                nodeTypeParser: this.nodeTypeParser,\n                edgeTypeParser: this.edgeTypeParser,\n            };\n            return graphConfig;\n        });\n        this.getDefaultGraphOptions = () => {\n            const defaultOptions = {\n                // 节点是否可旋转\n                rotating: false,\n                // 节点是否可调整大小\n                resizing: false,\n                // 节点连线规则配置（详细文档：https://X6.antv.vision/zh/docs/api/graph/interaction#connecting）\n                connecting: {\n                    snap: true,\n                    dangling: false,\n                    highlight: false,\n                    connectionPoint: 'rect',\n                    router: { name: 'er' },\n                    connector: {\n                        name: 'rounded',\n                        args: {\n                            radius: 15,\n                        },\n                    },\n                },\n                // 画布背景，支持颜色/图片/水印等（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/background）\n                background: {},\n                // 网格配置（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/grid）\n                grid: {\n                    visible: true,\n                },\n                // 点选/框选配置（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/selection）\n                selecting: {\n                    strict: true,\n                    enabled: true,\n                    multiple: true,\n                    selectCellOnMoved: true,\n                    showNodeSelectionBox: false,\n                    // 框选可以选中edge\n                    rubberEdge: true,\n                    // 框选可以选中node\n                    rubberNode: true,\n                    movable: true,\n                },\n                // 对齐线配置，辅助移动节点排版（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/snapline）\n                snapline: {\n                    enabled: false,\n                },\n                // 撤销/重做能力（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/history）\n                history: {\n                    enabled: false,\n                },\n                // 剪切板，支持跨画布的复制/粘贴（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/clipboard）\n                clipboard: {\n                    enabled: true,\n                    useLocalStorage: true,\n                },\n                // 使画布具备滚动、平移、居中、缩放等能力（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/scroller）\n                scroller: {\n                    enabled: false,\n                },\n                // 滚轮缩放 （详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/mousewheel）\n                mousewheel: {\n                    enabled: true,\n                    minScale: MIN_ZOOM,\n                    maxScale: MAX_ZOOM,\n                    factor: 1.1,\n                    modifiers: ['ctrl', 'meta'],\n                },\n                /** 普通画布, 支持拖拽平移 */\n                panning: {\n                    enabled: true,\n                },\n                /** 缩放参数 */\n                scaling: {\n                    min: MIN_ZOOM,\n                    max: MAX_ZOOM,\n                },\n                /** keyboad */\n                keyboard: {\n                    enabled: true,\n                },\n                /** 定制节点和边的交互行为 */\n                interacting: {\n                    /** 节点默认可以被移动 */\n                    nodeMovable: true,\n                    /** 边上标签默认不可以被移动 */\n                    edgeLabelMovable: false,\n                },\n                async: false,\n            };\n            return defaultOptions;\n        };\n        this.dispose = () => {\n            // TODO: 统一看下defer的销毁\n            this.rootContainer = new Deferred();\n            this.graphContainer = new Deferred();\n            this.x6Options = new Deferred();\n        };\n        this.graphId = uuidv4();\n    }\n}\nexport const IGraphOptionProvider = Symbol('IGraphOptionProvider');\nexport const registerGraphConfig = (register, graphConfig) => {\n    register(IGraphOptionProvider, {\n        lifecycle: Syringe.Lifecycle.singleton,\n        useDynamic: () => {\n            return {\n                getOptions: () => __awaiter(void 0, void 0, void 0, function* () {\n                    return graphConfig.getConfig();\n                }),\n            };\n        },\n    });\n};\nexport const createGraphConfig = (addOptions) => (props) => {\n    /** bridge config and props */\n    const propsContainer = React.useMemo(() => ({ getValue: () => ({}) }), []);\n    propsContainer.getValue = () => props;\n    const graphConfig = React.useMemo(() => {\n        const config = new GraphConfig();\n        addOptions(config, propsContainer);\n        return config;\n    }, [propsContainer]);\n    return graphConfig;\n};\n//# sourceMappingURL=config.js.map"]},"metadata":{},"sourceType":"module"}