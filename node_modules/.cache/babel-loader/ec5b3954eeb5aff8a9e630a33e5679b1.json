{"ast":null,"code":"import { Platform, StringExt, ObjectExt, Dom } from '../../util';\nimport { Node } from '../../model';\nimport { NodeView } from '../../view';\nimport { getName } from './util';\nconst contentSelector = '.text-block-content';\nconst registryName = getName('text-block');\nexport class TextBlock extends Node {\n  get content() {\n    return this.getContent();\n  }\n\n  set content(val) {\n    this.setContent(val);\n  }\n\n  getContent() {\n    return this.store.get('content', '');\n  }\n\n  setContent(content) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.store.set('content', content, options);\n  }\n\n  setup() {\n    super.setup();\n    this.store.on('change:*', metadata => {\n      const key = metadata.key;\n\n      if (key === 'content') {\n        this.updateContent(this.getContent());\n      } else if (key === 'size') {\n        this.updateSize(this.getSize());\n      }\n    });\n    this.updateSize(this.getSize());\n    this.updateContent(this.getContent());\n  }\n\n  updateSize(size) {\n    if (Platform.SUPPORT_FOREIGNOBJECT) {\n      this.setAttrs({\n        foreignObject: Object.assign({}, size),\n        [contentSelector]: {\n          style: Object.assign({}, size)\n        }\n      });\n    }\n  }\n\n  updateContent(content) {\n    if (Platform.SUPPORT_FOREIGNOBJECT) {\n      this.setAttrs({\n        [contentSelector]: {\n          html: content ? StringExt.sanitizeHTML(content) : ''\n        }\n      });\n    } else {\n      this.setAttrs({\n        [contentSelector]: {\n          text: content\n        }\n      });\n    }\n  }\n\n}\n\n(function (TextBlock) {\n  TextBlock.config({\n    type: registryName,\n    view: registryName,\n    markup: ['<g class=\"rotatable\">', '<g class=\"scalable\"><rect/></g>', Platform.SUPPORT_FOREIGNOBJECT ? [`<foreignObject>`, `<body xmlns=\"http://www.w3.org/1999/xhtml\">`, `<div class=\"${contentSelector.substr(1)}\" />`, `</body>`, `</foreignObject>`].join('') : `<text class=\"${contentSelector.substr(1)}\"/>`, '</g>'].join(''),\n    attrs: {\n      '.': {\n        fill: '#ffffff',\n        stroke: 'none'\n      },\n      rect: {\n        fill: '#ffffff',\n        stroke: '#000000',\n        width: 80,\n        height: 100\n      },\n      text: {\n        fill: '#000000',\n        fontSize: 14,\n        fontFamily: 'Arial, helvetica, sans-serif'\n      },\n      body: {\n        style: {\n          background: 'transparent',\n          position: 'static',\n          margin: 0,\n          padding: 0\n        }\n      },\n      foreignObject: {\n        style: {\n          overflow: 'hidden'\n        }\n      },\n      [contentSelector]: {\n        refX: 0.5,\n        refY: 0.5,\n        yAlign: 'middle',\n        xAlign: 'middle',\n        style: {\n          textAlign: 'center',\n          verticalAlign: 'middle',\n          display: 'table-cell',\n          padding: '0 5px',\n          margin: 0\n        }\n      }\n    }\n  });\n  Node.registry.register(registryName, TextBlock);\n})(TextBlock || (TextBlock = {}));\n\n(function (TextBlock) {\n  const contentAction = 'content';\n\n  class View extends NodeView {\n    confirmUpdate(flag) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      let ret = super.confirmUpdate(flag, options);\n\n      if (this.hasAction(ret, contentAction)) {\n        this.updateContent();\n        ret = this.removeAction(ret, contentAction);\n      }\n\n      return ret;\n    }\n\n    update(partialAttrs) {\n      if (Platform.SUPPORT_FOREIGNOBJECT) {\n        super.update(partialAttrs);\n      } else {\n        const node = this.cell;\n        const attrs = Object.assign({}, partialAttrs || node.getAttrs());\n        delete attrs[contentSelector];\n        super.update(attrs);\n\n        if (!partialAttrs || ObjectExt.has(partialAttrs, contentSelector)) {\n          this.updateContent(partialAttrs);\n        }\n      }\n    }\n\n    updateContent(partialAttrs) {\n      if (Platform.SUPPORT_FOREIGNOBJECT) {\n        super.update(partialAttrs);\n      } else {\n        const node = this.cell;\n        const textAttrs = (partialAttrs || node.getAttrs())[contentSelector]; // Break the text to fit the node size taking into\n        // account the attributes set on the node.\n\n        const text = Dom.breakText(node.getContent(), node.getSize(), textAttrs, {\n          svgDocument: this.graph.view.svg\n        });\n        const attrs = {\n          [contentSelector]: ObjectExt.merge({}, textAttrs, {\n            text\n          })\n        };\n        super.update(attrs);\n      }\n    }\n\n  }\n\n  TextBlock.View = View;\n\n  (function (View) {\n    View.config({\n      bootstrap: ['render', contentAction],\n      actions: Platform.SUPPORT_FOREIGNOBJECT ? {} : {\n        size: contentAction,\n        content: contentAction\n      }\n    });\n    NodeView.registry.register(registryName, View);\n  })(View = TextBlock.View || (TextBlock.View = {}));\n})(TextBlock || (TextBlock = {}));","map":{"version":3,"sources":["../../../src/shape/basic/text-block.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Platform, StringExt, ObjectExt, Dom } from '../../util';\nimport { Node } from '../../model';\nimport { NodeView } from '../../view';\nimport { getName } from './util';\nconst contentSelector = '.text-block-content';\nconst registryName = getName('text-block');\nexport class TextBlock extends Node {\n    get content() {\n        return this.getContent();\n    }\n    set content(val) {\n        this.setContent(val);\n    }\n    getContent() {\n        return this.store.get('content', '');\n    }\n    setContent(content, options = {}) {\n        this.store.set('content', content, options);\n    }\n    setup() {\n        super.setup();\n        this.store.on('change:*', (metadata) => {\n            const key = metadata.key;\n            if (key === 'content') {\n                this.updateContent(this.getContent());\n            }\n            else if (key === 'size') {\n                this.updateSize(this.getSize());\n            }\n        });\n        this.updateSize(this.getSize());\n        this.updateContent(this.getContent());\n    }\n    updateSize(size) {\n        if (Platform.SUPPORT_FOREIGNOBJECT) {\n            this.setAttrs({\n                foreignObject: Object.assign({}, size),\n                [contentSelector]: {\n                    style: Object.assign({}, size),\n                },\n            });\n        }\n    }\n    updateContent(content) {\n        if (Platform.SUPPORT_FOREIGNOBJECT) {\n            this.setAttrs({\n                [contentSelector]: {\n                    html: content ? StringExt.sanitizeHTML(content) : '',\n                },\n            });\n        }\n        else {\n            this.setAttrs({\n                [contentSelector]: {\n                    text: content,\n                },\n            });\n        }\n    }\n}\n(function (TextBlock) {\n    TextBlock.config({\n        type: registryName,\n        view: registryName,\n        markup: [\n            '<g class=\"rotatable\">',\n            '<g class=\"scalable\"><rect/></g>',\n            Platform.SUPPORT_FOREIGNOBJECT\n                ? [\n                    `<foreignObject>`,\n                    `<body xmlns=\"http://www.w3.org/1999/xhtml\">`,\n                    `<div class=\"${contentSelector.substr(1)}\" />`,\n                    `</body>`,\n                    `</foreignObject>`,\n                ].join('')\n                : `<text class=\"${contentSelector.substr(1)}\"/>`,\n            '</g>',\n        ].join(''),\n        attrs: {\n            '.': {\n                fill: '#ffffff',\n                stroke: 'none',\n            },\n            rect: {\n                fill: '#ffffff',\n                stroke: '#000000',\n                width: 80,\n                height: 100,\n            },\n            text: {\n                fill: '#000000',\n                fontSize: 14,\n                fontFamily: 'Arial, helvetica, sans-serif',\n            },\n            body: {\n                style: {\n                    background: 'transparent',\n                    position: 'static',\n                    margin: 0,\n                    padding: 0,\n                },\n            },\n            foreignObject: {\n                style: {\n                    overflow: 'hidden',\n                },\n            },\n            [contentSelector]: {\n                refX: 0.5,\n                refY: 0.5,\n                yAlign: 'middle',\n                xAlign: 'middle',\n                style: {\n                    textAlign: 'center',\n                    verticalAlign: 'middle',\n                    display: 'table-cell',\n                    padding: '0 5px',\n                    margin: 0,\n                },\n            },\n        },\n    });\n    Node.registry.register(registryName, TextBlock);\n})(TextBlock || (TextBlock = {}));\n(function (TextBlock) {\n    const contentAction = 'content';\n    class View extends NodeView {\n        confirmUpdate(flag, options = {}) {\n            let ret = super.confirmUpdate(flag, options);\n            if (this.hasAction(ret, contentAction)) {\n                this.updateContent();\n                ret = this.removeAction(ret, contentAction);\n            }\n            return ret;\n        }\n        update(partialAttrs) {\n            if (Platform.SUPPORT_FOREIGNOBJECT) {\n                super.update(partialAttrs);\n            }\n            else {\n                const node = this.cell;\n                const attrs = Object.assign({}, (partialAttrs || node.getAttrs()));\n                delete attrs[contentSelector];\n                super.update(attrs);\n                if (!partialAttrs || ObjectExt.has(partialAttrs, contentSelector)) {\n                    this.updateContent(partialAttrs);\n                }\n            }\n        }\n        updateContent(partialAttrs) {\n            if (Platform.SUPPORT_FOREIGNOBJECT) {\n                super.update(partialAttrs);\n            }\n            else {\n                const node = this.cell;\n                const textAttrs = (partialAttrs || node.getAttrs())[contentSelector];\n                // Break the text to fit the node size taking into\n                // account the attributes set on the node.\n                const text = Dom.breakText(node.getContent(), node.getSize(), textAttrs, {\n                    svgDocument: this.graph.view.svg,\n                });\n                const attrs = {\n                    [contentSelector]: ObjectExt.merge({}, textAttrs, { text }),\n                };\n                super.update(attrs);\n            }\n        }\n    }\n    TextBlock.View = View;\n    (function (View) {\n        View.config({\n            bootstrap: ['render', contentAction],\n            actions: Platform.SUPPORT_FOREIGNOBJECT\n                ? {}\n                : {\n                    size: contentAction,\n                    content: contentAction,\n                },\n        });\n        NodeView.registry.register(registryName, View);\n    })(View = TextBlock.View || (TextBlock.View = {}));\n})(TextBlock || (TextBlock = {}));\n//# sourceMappingURL=text-block.js.map"]},"metadata":{},"sourceType":"module"}