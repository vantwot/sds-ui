{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _isNumber from \"lodash/isNumber\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { boundsContains, padBounds } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport CollisionIndex from '../../utils/collision-index';\nimport { calculateCentroid } from '../../utils/geo';\nimport { getGlyphQuads, shapeText } from '../../utils/symbol-layout';\nvar textFrag = \"#define SDF_PX 8.0\\n#define EDGE_GAMMA 0.105\\n#define FONT_SIZE 48.0\\nuniform sampler2D u_sdf_map;\\nuniform float u_gamma_scale : 0.5;\\n// uniform float u_font_size : 24.0;\\nuniform float u_opacity : 1.0;\\nuniform vec4 u_stroke_color : [0, 0, 0, 1];\\nuniform float u_stroke_width : 2.0;\\nuniform float u_halo_blur : 0.5;\\nuniform float u_DevicePixelRatio;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_uv;\\nvarying float v_gamma_scale;\\nvarying float v_fontScale;\\n\\nvarying mat4 styleMappingMat; // \\u4F20\\u9012\\u4ECE\\u7247\\u5143\\u4E2D\\u4F20\\u9012\\u7684\\u6620\\u5C04\\u6570\\u636E\\n\\n#pragma include \\\"picking\\\"\\nvoid main() {\\n  // get style data mapping\\n  float opacity = styleMappingMat[0][0];\\n  float strokeWidth = styleMappingMat[0][2];\\n  vec4 textrueStroke = vec4(\\n    styleMappingMat[1][0],\\n    styleMappingMat[1][1],\\n    styleMappingMat[1][2],\\n    styleMappingMat[1][3]\\n  );\\n\\n  // get sdf from atlas\\n  float dist = texture2D(u_sdf_map, v_uv).a;\\n\\n  // float fontScale = u_font_size / FONT_SIZE;\\n\\n  // lowp float buff = (6.0 - u_stroke_width / v_fontScale) / SDF_PX;\\n  lowp float buff = (6.0 - strokeWidth / v_fontScale) / SDF_PX;\\n  highp float gamma = (u_halo_blur * 1.19 / SDF_PX + EDGE_GAMMA) / (v_fontScale * u_gamma_scale) / 1.0;\\n\\n  highp float gamma_scaled = gamma * v_gamma_scale;\\n\\n  highp float alpha = smoothstep(buff - gamma_scaled, buff + gamma_scaled, dist);\\n  // gl_FragColor = mix(vec4(v_color.rgb, v_color.a * u_opacity), vec4(u_stroke_color.rgb, u_stroke_color.a * u_opacity), smoothstep(0., 0.5, 1. - dist));\\n  gl_FragColor = mix(vec4(v_color.rgb, v_color.a * opacity), vec4(textrueStroke.rgb, textrueStroke.a * opacity), smoothstep(0., 0.5, 1. - dist));\\n  gl_FragColor.a= gl_FragColor.a * alpha;\\n  gl_FragColor = filterColor(gl_FragColor);\\n}\\n\";\nvar textVert = \"#define SDF_PX 8.0\\n#define EDGE_GAMMA 0.105\\n#define FONT_SIZE 24.0\\nattribute vec3 a_Position;\\nattribute vec2 a_tex;\\nattribute vec2 a_textOffsets;\\nattribute vec4 a_Color;\\nattribute float a_Size;\\nattribute float a_Rotate;\\n\\nuniform vec2 u_sdf_map_size;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\n\\nvarying vec2 v_uv;\\nvarying float v_gamma_scale;\\nvarying vec4 v_color;\\nvarying float v_fontScale;\\n\\nvarying mat4 styleMappingMat; // \\u7528\\u4E8E\\u5C06\\u5728\\u9876\\u70B9\\u7740\\u8272\\u5668\\u4E2D\\u8BA1\\u7B97\\u597D\\u7684\\u6837\\u5F0F\\u503C\\u4F20\\u9012\\u7ED9\\u7247\\u5143\\n\\nuniform float u_opacity : 1;\\nuniform float u_stroke_width : 2;\\nuniform vec4 u_stroke_color : [0.0, 0.0, 0.0, 0.0];\\n\\n#pragma include \\\"styleMapping\\\"\\n#pragma include \\\"styleMappingCalOpacity\\\"\\n#pragma include \\\"styleMappingCalStrokeWidth\\\"\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n   styleMappingMat = mat4(\\n    0.0, 0.0, 0.0, 0.0, // opacity - strokeOpacity - strokeWidth - empty\\n    0.0, 0.0, 0.0, 0.0, // strokeR - strokeG - strokeB - strokeA\\n    0.0, 0.0, 0.0, 0.0, // offsets[0] - offsets[1]\\n    0.0, 0.0, 0.0, 0.0\\n  );\\n\\n  float rowCount = u_cellTypeLayout[0][0];    // \\u5F53\\u524D\\u7684\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u884C\\n  float columnCount = u_cellTypeLayout[0][1]; // \\u5F53\\u770B\\u5230\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u5217\\n  float columnWidth = 1.0/columnCount;  // \\u5217\\u5BBD\\n  float rowHeight = 1.0/rowCount;       // \\u884C\\u9AD8\\n  float cellCount = calCellCount(); // opacity - strokeOpacity - strokeWidth - stroke - offsets\\n  float id = a_vertexId; // \\u7B2Cn\\u4E2A\\u9876\\u70B9\\n  float cellCurrentRow = floor(id * cellCount / columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u884C\\n  float cellCurrentColumn = mod(id * cellCount, columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u5217\\n  \\n  // cell \\u56FA\\u5B9A\\u987A\\u5E8F opacity -> strokeOpacity -> strokeWidth -> stroke ... \\n  // \\u6309\\u987A\\u5E8F\\u4ECE cell \\u4E2D\\u53D6\\u503C\\u3001\\u82E5\\u6CA1\\u6709\\u5219\\u81EA\\u52A8\\u5F80\\u4E0B\\u53D6\\u503C\\n  float textureOffset = 0.0; // \\u5728 cell \\u4E2D\\u53D6\\u503C\\u7684\\u504F\\u79FB\\u91CF\\n\\n  vec2 opacityAndOffset = calOpacityAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\\n  styleMappingMat[0][0] = opacityAndOffset.r;\\n  textureOffset = opacityAndOffset.g;\\n\\n   vec2 strokeWidthAndOffset = calStrokeWidthAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\\n  styleMappingMat[0][2] = strokeWidthAndOffset.r;\\n  textureOffset = strokeWidthAndOffset.g;\\n\\n  vec4 textrueStroke = vec4(-1.0, -1.0, -1.0, -1.0);\\n  if(hasStroke()) {\\n    vec2 valueRPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    styleMappingMat[1][0] = pos2value(valueRPos, columnWidth, rowHeight); // R\\n    textureOffset += 1.0;\\n\\n    vec2 valueGPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    styleMappingMat[1][1] = pos2value(valueGPos, columnWidth, rowHeight); // G\\n    textureOffset += 1.0;\\n\\n    vec2 valueBPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    styleMappingMat[1][2] = pos2value(valueBPos, columnWidth, rowHeight); // B\\n    textureOffset += 1.0;\\n\\n    vec2 valueAPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    styleMappingMat[1][3] = pos2value(valueAPos, columnWidth, rowHeight); // A\\n    textureOffset += 1.0;\\n  } else {\\n    if(u_stroke_color == vec4(0.0)) {\\n      styleMappingMat[1][0] = v_color.r;\\n      styleMappingMat[1][1] = v_color.g;\\n      styleMappingMat[1][2] = v_color.b;\\n      styleMappingMat[1][3] = v_color.a;\\n    } else {\\n      styleMappingMat[1][0] = u_stroke_color.r;\\n      styleMappingMat[1][1] = u_stroke_color.g;\\n      styleMappingMat[1][2] = u_stroke_color.b;\\n      styleMappingMat[1][3] = u_stroke_color.a;\\n    }\\n  }\\n  \\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n\\n  v_color = a_Color;\\n  v_uv = a_tex / u_sdf_map_size;\\n\\n  // \\u6587\\u672C\\u7F29\\u653E\\u6BD4\\u4F8B\\n  float fontScale = a_Size / FONT_SIZE;\\n  v_fontScale = fontScale;\\n\\n  vec4 project_pos = project_position(vec4(a_Position, 1.0));\\n  // vec4 projected_position  = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\\n\\n  highp float angle_sin = sin(a_Rotate);\\n  highp float angle_cos = cos(a_Rotate);\\n  mat2 rotation_matrix = mat2(angle_cos, -1.0 * angle_sin, angle_sin, angle_cos);\\n  \\n  // gl_Position = vec4(projected_position.xy / projected_position.w + rotation_matrix * a_textOffsets * fontScale / u_ViewportSize * 2.0 * u_DevicePixelRatio, 0.0, 1.0);\\n\\n  vec4 projected_position;\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n   projected_position  = u_Mvp * (vec4(a_Position.xyz, 1.0));\\n  } else { // else\\n   projected_position  = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\\n  }\\n\\n  gl_Position = vec4(projected_position.xy / projected_position.w + rotation_matrix * a_textOffsets * fontScale / u_ViewportSize * 2.0 * u_DevicePixelRatio, 0.0, 1.0);\\n  v_gamma_scale = gl_Position.w;\\n  setPickingColor(a_PickingColor);\\n\\n}\\n\";\nexport function TextTriangulation(feature) {\n  var that = this;\n  var id = feature.id;\n  var vertices = [];\n  var indices = [];\n\n  if (!that.glyphInfoMap || !that.glyphInfoMap[id]) {\n    return {\n      vertices: [],\n      indices: [],\n      size: 7\n    };\n  }\n\n  var centroid = that.glyphInfoMap[id].centroid;\n  var coord = centroid.length === 2 ? [centroid[0], centroid[1], 0] : centroid;\n  that.glyphInfoMap[id].glyphQuads.forEach(function (quad, index) {\n    vertices.push.apply(vertices, _toConsumableArray(coord).concat([quad.tex.x, quad.tex.y + quad.tex.height, quad.tl.x, quad.tl.y], _toConsumableArray(coord), [quad.tex.x + quad.tex.width, quad.tex.y + quad.tex.height, quad.tr.x, quad.tr.y], _toConsumableArray(coord), [quad.tex.x + quad.tex.width, quad.tex.y, quad.br.x, quad.br.y], _toConsumableArray(coord), [quad.tex.x, quad.tex.y, quad.bl.x, quad.bl.y]));\n    indices.push(0 + index * 4, 1 + index * 4, 2 + index * 4, 2 + index * 4, 3 + index * 4, 0 + index * 4);\n  });\n  return {\n    vertices: vertices,\n    indices: indices,\n    size: 7\n  };\n}\n\nvar TextModel = function (_BaseModel) {\n  _inherits(TextModel, _BaseModel);\n\n  var _super = _createSuper(TextModel);\n\n  function TextModel() {\n    var _this;\n\n    _classCallCheck(this, TextModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"glyphInfo\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"glyphInfoMap\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"texture\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"currentZoom\", -1);\n\n    _defineProperty(_assertThisInitialized(_this), \"extent\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"textureHeight\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"textCount\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"preTextStyle\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"buildModels\", function () {\n      _this.initGlyph();\n\n      _this.updateTexture();\n\n      _this.filterGlyphs();\n\n      _this.reBuildModel();\n\n      return [_this.layer.buildLayerModel({\n        moduleName: 'pointText',\n        vertexShader: textVert,\n        fragmentShader: textFrag,\n        triangulation: TextTriangulation.bind(_assertThisInitialized(_this)),\n        depth: {\n          enable: false\n        },\n        blend: _this.getBlend()\n      })];\n    });\n\n    return _this;\n  }\n\n  _createClass(TextModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          _ref$opacity = _ref.opacity,\n          opacity = _ref$opacity === void 0 ? 1.0 : _ref$opacity,\n          _ref$stroke = _ref.stroke,\n          stroke = _ref$stroke === void 0 ? '#fff' : _ref$stroke,\n          _ref$strokeWidth = _ref.strokeWidth,\n          strokeWidth = _ref$strokeWidth === void 0 ? 0 : _ref$strokeWidth,\n          _ref$textAnchor = _ref.textAnchor,\n          textAnchor = _ref$textAnchor === void 0 ? 'center' : _ref$textAnchor,\n          _ref$textAllowOverlap = _ref.textAllowOverlap,\n          textAllowOverlap = _ref$textAllowOverlap === void 0 ? false : _ref$textAllowOverlap,\n          _ref$halo = _ref.halo,\n          halo = _ref$halo === void 0 ? 0.5 : _ref$halo,\n          _ref$gamma = _ref.gamma,\n          gamma = _ref$gamma === void 0 ? 2.0 : _ref$gamma;\n\n      var _this$fontService = this.fontService,\n          canvas = _this$fontService.canvas,\n          mapping = _this$fontService.mapping;\n\n      if (Object.keys(mapping).length !== this.textCount) {\n        this.updateTexture();\n        this.textCount = Object.keys(mapping).length;\n      }\n\n      this.preTextStyle = {\n        textAnchor: textAnchor,\n        textAllowOverlap: textAllowOverlap\n      };\n\n      if (this.dataTextureTest && this.dataTextureNeedUpdate({\n        opacity: opacity,\n        strokeWidth: strokeWidth,\n        stroke: stroke\n      })) {\n        this.judgeStyleAttributes({\n          opacity: opacity,\n          strokeWidth: strokeWidth,\n          stroke: stroke\n        });\n        var encodeData = this.layer.getEncodedData();\n\n        var _this$calDataFrame = this.calDataFrame(this.cellLength, encodeData, this.cellProperties),\n            data = _this$calDataFrame.data,\n            width = _this$calDataFrame.width,\n            height = _this$calDataFrame.height;\n\n        this.rowCount = height;\n        this.dataTexture = this.cellLength > 0 && data.length > 0 ? this.createTexture2D({\n          flipY: true,\n          data: data,\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: width,\n          height: height\n        }) : this.createTexture2D({\n          flipY: true,\n          data: [1],\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: 1,\n          height: 1\n        });\n      }\n\n      return {\n        u_dataTexture: this.dataTexture,\n        u_cellTypeLayout: this.getCellTypeLayout(),\n        u_opacity: _isNumber(opacity) ? opacity : 1.0,\n        u_stroke_width: _isNumber(strokeWidth) ? strokeWidth : 0.0,\n        u_stroke_color: this.getStrokeColor(stroke),\n        u_sdf_map: this.texture,\n        u_halo_blur: halo,\n        u_gamma_scale: gamma,\n        u_sdf_map_size: [canvas.width, canvas.height]\n      };\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      this.layer.on('remapping', this.buildModels);\n      this.extent = this.textExtent();\n\n      var _ref2 = this.layer.getLayerConfig(),\n          _ref2$textAnchor = _ref2.textAnchor,\n          textAnchor = _ref2$textAnchor === void 0 ? 'center' : _ref2$textAnchor,\n          _ref2$textAllowOverla = _ref2.textAllowOverlap,\n          textAllowOverlap = _ref2$textAllowOverla === void 0 ? true : _ref2$textAllowOverla;\n\n      this.preTextStyle = {\n        textAnchor: textAnchor,\n        textAllowOverlap: textAllowOverlap\n      };\n      return this.buildModels();\n    }\n  }, {\n    key: \"needUpdate\",\n    value: function needUpdate() {\n      var _ref3 = this.layer.getLayerConfig(),\n          _ref3$textAllowOverla = _ref3.textAllowOverlap,\n          textAllowOverlap = _ref3$textAllowOverla === void 0 ? false : _ref3$textAllowOverla;\n\n      var zoom = this.mapService.getZoom();\n      var extent = this.mapService.getBounds();\n      var flag = boundsContains(this.extent, extent);\n\n      if (!textAllowOverlap && (Math.abs(this.currentZoom - zoom) > 1 || !flag) || textAllowOverlap !== this.preTextStyle.textAllowOverlap) {\n        this.reBuildModel();\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$dataTexture;\n\n      (_this$dataTexture = this.dataTexture) === null || _this$dataTexture === void 0 ? void 0 : _this$dataTexture.destroy();\n      this.layer.off('remapping', this.buildModels);\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'rotate',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Rotate',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var _feature$rotate = feature.rotate,\n                rotate = _feature$rotate === void 0 ? 0 : _feature$rotate;\n            return Array.isArray(rotate) ? [rotate[0]] : [rotate];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'textOffsets',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_textOffsets',\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[5], vertex[6]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var _feature$size = feature.size,\n                size = _feature$size === void 0 ? 12 : _feature$size;\n            return Array.isArray(size) ? [size[0]] : [size];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'textUv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_tex',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[3], vertex[4]];\n          }\n        }\n      });\n    }\n  }, {\n    key: \"textExtent\",\n    value: function textExtent() {\n      var bounds = this.mapService.getBounds();\n      return padBounds(bounds, 0.5);\n    }\n  }, {\n    key: \"initTextFont\",\n    value: function initTextFont() {\n      var _ref4 = this.layer.getLayerConfig(),\n          _ref4$fontWeight = _ref4.fontWeight,\n          fontWeight = _ref4$fontWeight === void 0 ? '400' : _ref4$fontWeight,\n          _ref4$fontFamily = _ref4.fontFamily,\n          fontFamily = _ref4$fontFamily === void 0 ? 'sans-serif' : _ref4$fontFamily;\n\n      var data = this.layer.getEncodedData();\n      var characterSet = [];\n      data.forEach(function (item) {\n        var _item$shape = item.shape,\n            shape = _item$shape === void 0 ? '' : _item$shape;\n        shape = shape.toString();\n\n        var _iterator = _createForOfIteratorHelper(shape),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var char = _step.value;\n\n            if (characterSet.indexOf(char) === -1) {\n              characterSet.push(char);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      });\n      this.fontService.setFontOptions({\n        characterSet: characterSet,\n        fontWeight: fontWeight,\n        fontFamily: fontFamily,\n        iconfont: false\n      });\n    }\n  }, {\n    key: \"initIconFontTex\",\n    value: function initIconFontTex() {\n      var _ref5 = this.layer.getLayerConfig(),\n          _ref5$fontWeight = _ref5.fontWeight,\n          fontWeight = _ref5$fontWeight === void 0 ? '400' : _ref5$fontWeight,\n          _ref5$fontFamily = _ref5.fontFamily,\n          fontFamily = _ref5$fontFamily === void 0 ? 'sans-serif' : _ref5$fontFamily;\n\n      var data = this.layer.getEncodedData();\n      var characterSet = [];\n      data.forEach(function (item) {\n        var _item$shape2 = item.shape,\n            shape = _item$shape2 === void 0 ? '' : _item$shape2;\n        shape = \"\".concat(shape);\n\n        if (characterSet.indexOf(shape) === -1) {\n          characterSet.push(shape);\n        }\n      });\n      this.fontService.setFontOptions({\n        characterSet: characterSet,\n        fontWeight: fontWeight,\n        fontFamily: fontFamily,\n        iconfont: true\n      });\n    }\n  }, {\n    key: \"generateGlyphLayout\",\n    value: function generateGlyphLayout(iconfont) {\n      var _this2 = this;\n\n      var mapping = this.fontService.mapping;\n\n      var _ref6 = this.layer.getLayerConfig(),\n          _ref6$spacing = _ref6.spacing,\n          spacing = _ref6$spacing === void 0 ? 2 : _ref6$spacing,\n          _ref6$textAnchor = _ref6.textAnchor,\n          textAnchor = _ref6$textAnchor === void 0 ? 'center' : _ref6$textAnchor;\n\n      var data = this.layer.getEncodedData();\n      this.glyphInfo = data.map(function (feature) {\n        var _feature$shape = feature.shape,\n            shape = _feature$shape === void 0 ? '' : _feature$shape,\n            id = feature.id,\n            _feature$size2 = feature.size,\n            size = _feature$size2 === void 0 ? 1 : _feature$size2,\n            _feature$textOffset = feature.textOffset,\n            textOffset = _feature$textOffset === void 0 ? [0, 0] : _feature$textOffset;\n        var shaping = shapeText(shape.toString(), mapping, size, textAnchor, 'left', spacing, textOffset, iconfont);\n        var glyphQuads = getGlyphQuads(shaping, textOffset, false);\n        feature.shaping = shaping;\n        feature.glyphQuads = glyphQuads;\n        feature.centroid = calculateCentroid(feature.coordinates);\n        feature.originCentroid = feature.version === 'GAODE2.x' ? calculateCentroid(feature.originCoordinates) : feature.originCentroid = feature.centroid;\n        _this2.glyphInfoMap[id] = {\n          shaping: shaping,\n          glyphQuads: glyphQuads,\n          centroid: calculateCentroid(feature.coordinates)\n        };\n        return feature;\n      });\n    }\n  }, {\n    key: \"filterGlyphs\",\n    value: function filterGlyphs() {\n      var _this3 = this;\n\n      var _ref7 = this.layer.getLayerConfig(),\n          _ref7$padding = _ref7.padding,\n          padding = _ref7$padding === void 0 ? [4, 4] : _ref7$padding,\n          _ref7$textAllowOverla = _ref7.textAllowOverlap,\n          textAllowOverlap = _ref7$textAllowOverla === void 0 ? false : _ref7$textAllowOverla;\n\n      if (textAllowOverlap) {\n        return;\n      }\n\n      this.glyphInfoMap = {};\n      this.currentZoom = this.mapService.getZoom();\n      this.extent = this.textExtent();\n\n      var _this$rendererService = this.rendererService.getViewportSize(),\n          width = _this$rendererService.width,\n          height = _this$rendererService.height;\n\n      var collisionIndex = new CollisionIndex(width, height);\n      var filterData = this.glyphInfo.filter(function (feature) {\n        var shaping = feature.shaping,\n            _feature$id = feature.id,\n            id = _feature$id === void 0 ? 0 : _feature$id;\n        var centroid = feature.version === 'GAODE2.x' ? feature.originCentroid : feature.centroid;\n        var size = feature.size;\n        var fontScale = size / 24;\n\n        var pixels = _this3.mapService.lngLatToContainer(centroid);\n\n        var _collisionIndex$place = collisionIndex.placeCollisionBox({\n          x1: shaping.left * fontScale - padding[0],\n          x2: shaping.right * fontScale + padding[0],\n          y1: shaping.top * fontScale - padding[1],\n          y2: shaping.bottom * fontScale + padding[1],\n          anchorPointX: pixels.x,\n          anchorPointY: pixels.y\n        }),\n            box = _collisionIndex$place.box;\n\n        if (box && box.length) {\n          collisionIndex.insertCollisionBox(box, id);\n          return true;\n        } else {\n          return false;\n        }\n      });\n      filterData.forEach(function (item) {\n        _this3.glyphInfoMap[item.id] = item;\n      });\n    }\n  }, {\n    key: \"initGlyph\",\n    value: function initGlyph() {\n      var _this$layer$getLayerC = this.layer.getLayerConfig(),\n          _this$layer$getLayerC2 = _this$layer$getLayerC.iconfont,\n          iconfont = _this$layer$getLayerC2 === void 0 ? false : _this$layer$getLayerC2;\n\n      iconfont ? this.initIconFontTex() : this.initTextFont();\n      this.generateGlyphLayout(iconfont);\n    }\n  }, {\n    key: \"updateTexture\",\n    value: function updateTexture() {\n      var createTexture2D = this.rendererService.createTexture2D;\n      var canvas = this.fontService.canvas;\n      this.textureHeight = canvas.height;\n\n      if (this.texture) {\n        this.texture.destroy();\n      }\n\n      this.texture = createTexture2D({\n        data: canvas,\n        mag: gl.LINEAR,\n        min: gl.LINEAR,\n        width: canvas.width,\n        height: canvas.height\n      });\n    }\n  }, {\n    key: \"reBuildModel\",\n    value: function reBuildModel() {\n      this.filterGlyphs();\n      this.layer.models = [this.layer.buildLayerModel({\n        moduleName: 'pointText',\n        vertexShader: textVert,\n        fragmentShader: textFrag,\n        triangulation: TextTriangulation.bind(this),\n        depth: {\n          enable: false\n        },\n        blend: this.getBlend()\n      })];\n    }\n  }]);\n\n  return TextModel;\n}(BaseModel);\n\nexport { TextModel as default };","map":{"version":3,"sources":["../../../src/point/models/text.ts"],"names":["that","id","feature","vertices","indices","size","centroid","coord","quad","index","TextModel","BaseModel","opacity","stroke","strokeWidth","textAnchor","textAllowOverlap","halo","gamma","canvas","mapping","Object","encodeData","data","width","height","flipY","format","gl","type","u_dataTexture","u_cellTypeLayout","u_opacity","u_stroke_width","u_stroke_color","u_sdf_map","u_halo_blur","u_gamma_scale","u_sdf_map_size","moduleName","vertexShader","fragmentShader","triangulation","TextTriangulation","depth","enable","blend","zoom","extent","flag","boundsContains","Math","name","AttributeType","descriptor","buffer","usage","FLOAT","update","rotate","Array","vertex","bounds","padBounds","fontWeight","fontFamily","characterSet","shape","item","char","iconfont","spacing","textOffset","shaping","shapeText","glyphQuads","getGlyphQuads","calculateCentroid","padding","collisionIndex","filterData","fontScale","pixels","box","x1","x2","y1","y2","anchorPointX","anchorPointY","y","createTexture2D","mag","min"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  BlendType,\n  gl,\n  IEncodeFeature,\n  ILayer,\n  ILayerConfig,\n  IModel,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\nimport { boundsContains, padBounds, rgb2arr } from '@antv/l7-utils';\nimport { isNumber, isString } from 'lodash';\nimport BaseModel, {\n  styleColor,\n  styleOffset,\n  styleSingle,\n} from '../../core/BaseModel';\nimport CollisionIndex from '../../utils/collision-index';\nimport { calculateCentroid } from '../../utils/geo';\nimport {\n  anchorType,\n  getGlyphQuads,\n  IGlyphQuad,\n  shapeText,\n} from '../../utils/symbol-layout';\nimport textFrag from '../shaders/text_frag.glsl';\nimport textVert from '../shaders/text_vert.glsl';\ninterface IPointTextLayerStyleOptions {\n  opacity: styleSingle;\n  strokeWidth: styleSingle;\n  stroke: styleColor;\n  textOffset: [number, number];\n\n  textAnchor: anchorType;\n  spacing: number;\n  padding: [number, number];\n  halo: number;\n  gamma: number;\n  fontWeight: string;\n  fontFamily: string;\n  textAllowOverlap: boolean;\n}\nexport function TextTriangulation(feature: IEncodeFeature) {\n  // @ts-ignore\n  const that = this as TextModel;\n  const id = feature.id as number;\n  const vertices: number[] = [];\n  const indices: number[] = [];\n\n  if (!that.glyphInfoMap || !that.glyphInfoMap[id]) {\n    return {\n      vertices: [], // [ x, y, z, tex.x,tex.y, offset.x. offset.y]\n      indices: [],\n      size: 7,\n    };\n  }\n  const centroid = that.glyphInfoMap[id].centroid as number[]; // 计算中心点\n  const coord =\n    centroid.length === 2 ? [centroid[0], centroid[1], 0] : centroid;\n  that.glyphInfoMap[id].glyphQuads.forEach(\n    (quad: IGlyphQuad, index: number) => {\n      vertices.push(\n        ...coord,\n        quad.tex.x,\n        quad.tex.y + quad.tex.height,\n        quad.tl.x,\n        quad.tl.y,\n        ...coord,\n        quad.tex.x + quad.tex.width,\n        quad.tex.y + quad.tex.height,\n        quad.tr.x,\n        quad.tr.y,\n        ...coord,\n        quad.tex.x + quad.tex.width,\n        quad.tex.y,\n        quad.br.x,\n        quad.br.y,\n        ...coord,\n        quad.tex.x,\n        quad.tex.y,\n        quad.bl.x,\n        quad.bl.y,\n      );\n      indices.push(\n        0 + index * 4,\n        1 + index * 4,\n        2 + index * 4,\n        2 + index * 4,\n        3 + index * 4,\n        0 + index * 4,\n      );\n    },\n  );\n  return {\n    vertices, // [ x, y, z, tex.x,tex.y, offset.x. offset.y]\n    indices,\n    size: 7,\n  };\n}\n\nexport default class TextModel extends BaseModel {\n  public glyphInfo: IEncodeFeature[];\n  public glyphInfoMap: {\n    [key: string]: {\n      shaping: any;\n      glyphQuads: IGlyphQuad[];\n      centroid: number[];\n    };\n  } = {};\n  private texture: ITexture2D;\n  private currentZoom: number = -1;\n  private extent: [[number, number], [number, number]];\n  private textureHeight: number = 0;\n  private textCount: number = 0;\n  private preTextStyle: Partial<IPointTextLayerStyleOptions> = {};\n  public getUninforms(): IModelUniform {\n    const {\n      opacity = 1.0,\n      stroke = '#fff',\n      strokeWidth = 0,\n      textAnchor = 'center',\n      textAllowOverlap = false,\n      halo = 0.5,\n      gamma = 2.0,\n    } = this.layer.getLayerConfig() as IPointTextLayerStyleOptions;\n    const { canvas, mapping } = this.fontService;\n    if (Object.keys(mapping).length !== this.textCount) {\n      this.updateTexture();\n      this.textCount = Object.keys(mapping).length;\n    }\n    this.preTextStyle = {\n      textAnchor,\n      textAllowOverlap,\n    };\n\n    if (\n      this.dataTextureTest &&\n      this.dataTextureNeedUpdate({\n        opacity,\n        strokeWidth,\n        stroke,\n      })\n    ) {\n      this.judgeStyleAttributes({\n        opacity,\n        strokeWidth,\n        stroke,\n      });\n\n      const encodeData = this.layer.getEncodedData();\n      const { data, width, height } = this.calDataFrame(\n        this.cellLength,\n        encodeData,\n        this.cellProperties,\n      );\n      this.rowCount = height; // 当前数据纹理有多少行\n\n      this.dataTexture =\n        this.cellLength > 0 && data.length > 0\n          ? this.createTexture2D({\n              flipY: true,\n              data,\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width,\n              height,\n            })\n          : this.createTexture2D({\n              flipY: true,\n              data: [1],\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width: 1,\n              height: 1,\n            });\n    }\n\n    return {\n      u_dataTexture: this.dataTexture, // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]\n      u_cellTypeLayout: this.getCellTypeLayout(),\n\n      u_opacity: isNumber(opacity) ? opacity : 1.0,\n      u_stroke_width: isNumber(strokeWidth) ? strokeWidth : 0.0,\n      u_stroke_color: this.getStrokeColor(stroke),\n\n      u_sdf_map: this.texture,\n      u_halo_blur: halo,\n      u_gamma_scale: gamma,\n      u_sdf_map_size: [canvas.width, canvas.height],\n    };\n  }\n\n  public initModels(): IModel[] {\n    this.layer.on('remapping', this.buildModels);\n    this.extent = this.textExtent();\n    const {\n      textAnchor = 'center',\n      textAllowOverlap = true,\n    } = this.layer.getLayerConfig() as IPointTextLayerStyleOptions;\n    this.preTextStyle = {\n      textAnchor,\n      textAllowOverlap,\n    };\n    return this.buildModels();\n  }\n\n  public buildModels = () => {\n    this.initGlyph();\n    this.updateTexture();\n    this.filterGlyphs();\n    this.reBuildModel();\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'pointText',\n        vertexShader: textVert,\n        fragmentShader: textFrag,\n        triangulation: TextTriangulation.bind(this),\n        depth: { enable: false },\n        blend: this.getBlend(),\n      }),\n    ];\n  };\n  public needUpdate() {\n    const {\n      textAllowOverlap = false,\n    } = this.layer.getLayerConfig() as IPointTextLayerStyleOptions;\n    // textAllowOverlap 发生改变\n    const zoom = this.mapService.getZoom();\n    const extent = this.mapService.getBounds();\n    const flag = boundsContains(this.extent, extent);\n    // 文本不能压盖则进行过滤\n    if (\n      (!textAllowOverlap && (Math.abs(this.currentZoom - zoom) > 1 || !flag)) ||\n      textAllowOverlap !== this.preTextStyle.textAllowOverlap\n    ) {\n      this.reBuildModel();\n      return true;\n    }\n    return false;\n  }\n\n  public clearModels() {\n    this.dataTexture?.destroy();\n    this.layer.off('remapping', this.buildModels);\n  }\n  protected registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'rotate',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Rotate',\n        buffer: {\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { rotate = 0 } = feature;\n          return Array.isArray(rotate) ? [rotate[0]] : [rotate as number];\n        },\n      },\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'textOffsets',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_textOffsets',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          // console.log([vertex[5], vertex[6]])\n          return [vertex[5], vertex[6]];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 12 } = feature;\n          return Array.isArray(size) ? [size[0]] : [size as number];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'textUv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_tex',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[3], vertex[4]];\n        },\n      },\n    });\n  }\n  private textExtent(): [[number, number], [number, number]] {\n    const bounds = this.mapService.getBounds();\n    return padBounds(bounds, 0.5);\n  }\n  /**\n   * 生成文字纹理（生成文字纹理字典）\n   */\n  private initTextFont() {\n    const {\n      fontWeight = '400',\n      fontFamily = 'sans-serif',\n    } = this.layer.getLayerConfig() as IPointTextLayerStyleOptions;\n    const data = this.layer.getEncodedData();\n    const characterSet: string[] = [];\n    data.forEach((item: IEncodeFeature) => {\n      let { shape = '' } = item;\n      shape = shape.toString();\n      for (const char of shape) {\n        // 去重\n        if (characterSet.indexOf(char) === -1) {\n          characterSet.push(char);\n        }\n      }\n    });\n    this.fontService.setFontOptions({\n      characterSet,\n      fontWeight,\n      fontFamily,\n      iconfont: false,\n    });\n  }\n\n  /**\n   * 生成 iconfont 纹理字典\n   */\n  private initIconFontTex() {\n    const {\n      fontWeight = '400',\n      fontFamily = 'sans-serif',\n    } = this.layer.getLayerConfig() as IPointTextLayerStyleOptions;\n    const data = this.layer.getEncodedData();\n    const characterSet: string[] = [];\n    data.forEach((item: IEncodeFeature) => {\n      let { shape = '' } = item;\n      shape = `${shape}`;\n      if (characterSet.indexOf(shape) === -1) {\n        characterSet.push(shape);\n      }\n    });\n    this.fontService.setFontOptions({\n      characterSet,\n      fontWeight,\n      fontFamily,\n      iconfont: true,\n    });\n  }\n\n  /**\n   * 生成文字布局（对照文字纹理字典提取对应文字的位置很好信息）\n   */\n  private generateGlyphLayout(iconfont: boolean) {\n    // TODO:更新文字布局\n    const { mapping } = this.fontService;\n    const {\n      spacing = 2,\n      textAnchor = 'center',\n      // textOffset,\n    } = this.layer.getLayerConfig() as IPointTextLayerStyleOptions;\n    const data = this.layer.getEncodedData();\n\n    this.glyphInfo = data.map((feature: IEncodeFeature) => {\n      const { shape = '', id, size = 1, textOffset = [0, 0] } = feature;\n\n      const shaping = shapeText(\n        shape.toString(),\n        mapping,\n        // @ts-ignore\n        size,\n        textAnchor,\n        'left',\n        spacing,\n        textOffset,\n        iconfont,\n      );\n      const glyphQuads = getGlyphQuads(shaping, textOffset, false);\n      feature.shaping = shaping;\n      feature.glyphQuads = glyphQuads;\n      // feature.centroid = calculteCentroid(coordinates);\n\n      feature.centroid = calculateCentroid(feature.coordinates);\n\n      // 此时地图高德2.0 originCentroid == centroid\n      feature.originCentroid =\n        feature.version === 'GAODE2.x'\n          ? calculateCentroid(feature.originCoordinates)\n          : (feature.originCentroid = feature.centroid);\n\n      this.glyphInfoMap[id as number] = {\n        shaping,\n        glyphQuads,\n        centroid: calculateCentroid(feature.coordinates),\n      };\n      return feature;\n    });\n  }\n  /**\n   * 文字避让 depend on originCentorid\n   */\n  private filterGlyphs() {\n    const {\n      padding = [4, 4],\n      textAllowOverlap = false,\n    } = this.layer.getLayerConfig() as IPointTextLayerStyleOptions;\n    if (textAllowOverlap) {\n      // 如果允许文本覆盖\n      // this.layer.setEncodedData(this.glyphInfo);\n      return;\n    }\n    this.glyphInfoMap = {};\n    this.currentZoom = this.mapService.getZoom();\n    this.extent = this.textExtent();\n    const { width, height } = this.rendererService.getViewportSize();\n    const collisionIndex = new CollisionIndex(width, height);\n    const filterData = this.glyphInfo.filter((feature: IEncodeFeature) => {\n      const { shaping, id = 0 } = feature;\n      // const centroid = feature.centroid as [number, number];\n      // const centroid = feature.originCentroid as [number, number];\n      const centroid = (feature.version === 'GAODE2.x'\n        ? feature.originCentroid\n        : feature.centroid) as [number, number];\n      const size = feature.size as number;\n      const fontScale: number = size / 24;\n      const pixels = this.mapService.lngLatToContainer(centroid);\n      const { box } = collisionIndex.placeCollisionBox({\n        x1: shaping.left * fontScale - padding[0],\n        x2: shaping.right * fontScale + padding[0],\n        y1: shaping.top * fontScale - padding[1],\n        y2: shaping.bottom * fontScale + padding[1],\n        anchorPointX: pixels.x,\n        anchorPointY: pixels.y,\n      });\n      if (box && box.length) {\n        // TODO：featureIndex\n        collisionIndex.insertCollisionBox(box, id);\n        return true;\n      } else {\n        return false;\n      }\n    });\n    filterData.forEach((item) => {\n      // @ts-ignore\n      this.glyphInfoMap[item.id as number] = item;\n    });\n    // this.layer.setEncodedData(filterData);\n  }\n  /**\n   * 初始化文字布局\n   */\n  private initGlyph() {\n    const { iconfont = false } = this.layer.getLayerConfig();\n    // 1.生成文字纹理（或是生成 iconfont）\n    iconfont ? this.initIconFontTex() : this.initTextFont();\n    // this.initTextFont();\n\n    // 2.生成文字布局\n    this.generateGlyphLayout(iconfont);\n  }\n  /**\n   * 更新文字纹理\n   */\n  private updateTexture() {\n    const { createTexture2D } = this.rendererService;\n    const { canvas } = this.fontService;\n    this.textureHeight = canvas.height;\n    if (this.texture) {\n      this.texture.destroy();\n    }\n\n    this.texture = createTexture2D({\n      data: canvas,\n      mag: gl.LINEAR,\n      min: gl.LINEAR,\n      width: canvas.width,\n      height: canvas.height,\n    });\n  }\n\n  private reBuildModel() {\n    this.filterGlyphs();\n    this.layer.models = [\n      this.layer.buildLayerModel({\n        moduleName: 'pointText',\n        vertexShader: textVert,\n        fragmentShader: textFrag,\n        triangulation: TextTriangulation.bind(this),\n        depth: { enable: false },\n        blend: this.getBlend(),\n      }),\n    ];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}