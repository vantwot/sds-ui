{"ast":null,"code":"import _slicedToArray from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport React from 'react';\nimport { createComponentModel, Disposable, MODELS, useXFlowApp } from '@antv/xflow-core';\nimport { nodeService } from './utils';\nexport var NsPanelData;\n\n(function (NsPanelData) {\n  NsPanelData.id = 'NODE_PANEL_DATA';\n})(NsPanelData || (NsPanelData = {}));\n/** 节点查找 */\n\n\nvar DefaultsearchService = function DefaultsearchService() {\n  var nodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keyword = arguments.length > 1 ? arguments[1] : undefined;\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var list;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            list = nodeList.filter(function (i) {\n              var _a, _b;\n\n              return i.isDirectory || ((_a = i.label) === null || _a === void 0 ? void 0 : _a.includes(keyword)) || ((_b = i.name) === null || _b === void 0 ? void 0 : _b.includes(keyword));\n            });\n            return _context.abrupt(\"return\", list);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\n\nexport var usePanelData = function usePanelData(props) {\n  var registerNode = props.registerNode,\n      _props$searchService = props.searchService,\n      searchService = _props$searchService === void 0 ? DefaultsearchService : _props$searchService;\n\n  var _ref = registerNode !== null && registerNode !== void 0 ? registerNode : {},\n      nodes = _ref.nodes;\n\n  var _useXFlowApp = useXFlowApp(),\n      modelService = _useXFlowApp.modelService;\n  /** 使用model */\n\n\n  var _createComponentModel = createComponentModel({\n    searchList: [],\n    nodeList: [],\n    defaultExpandAll: false,\n    keyword: ''\n  }),\n      _createComponentModel2 = _slicedToArray(_createComponentModel, 3),\n      state = _createComponentModel2[0],\n      setState = _createComponentModel2[1],\n      panelModel = _createComponentModel2[2];\n  /** 注册成为全局状态，方便其他组件联动 */\n\n\n  React.useEffect(function () {\n    if (modelService.findDeferredModel(NsPanelData.id)) {\n      return;\n    }\n\n    modelService.registerModel({\n      id: NsPanelData.id,\n      modelFactory: function modelFactory() {\n        return panelModel;\n      },\n      watchChange: function watchChange(self) {\n        return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n          var graphMetaModel, fetch, graphMetaDisposable;\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return MODELS.GRAPH_META.getModel(modelService);\n\n                case 2:\n                  graphMetaModel = _context4.sent;\n\n                  //useContext(MODELS.GRAPH_META.id)\n                  fetch = function fetch() {\n                    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                      var listData;\n                      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              _context2.next = 2;\n                              return nodeService(nodes);\n\n                            case 2:\n                              listData = _context2.sent;\n                              return _context2.abrupt(\"return\", {\n                                listData: listData\n                              });\n\n                            case 4:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2);\n                    }));\n                  };\n\n                  graphMetaDisposable = graphMetaModel.watch(function () {\n                    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                      var data;\n                      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              _context3.next = 2;\n                              return fetch();\n\n                            case 2:\n                              data = _context3.sent;\n                              self.setValue({\n                                nodeList: data.listData,\n                                defaultExpandAll: false,\n                                keyword: '',\n                                searchList: []\n                              });\n\n                            case 4:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, _callee3);\n                    }));\n                  });\n                  return _context4.abrupt(\"return\", Disposable.create(function () {\n                    graphMetaDisposable.dispose();\n                  }));\n\n                case 6:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n      }\n    });\n    /* eslint-disable-next-line  */\n  }, []);\n  /** 搜索 */\n\n  var onKeywordChange = React.useCallback(function (keyword) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var list;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (searchService) {\n                _context5.next = 2;\n                break;\n              }\n\n              return _context5.abrupt(\"return\");\n\n            case 2:\n              if (!keyword) {\n                _context5.next = 9;\n                break;\n              }\n\n              _context5.next = 5;\n              return searchService(state.nodeList, keyword);\n\n            case 5:\n              list = _context5.sent;\n              setState(function (modelState) {\n                modelState.keyword = keyword;\n                modelState.searchList = list;\n              });\n              _context5.next = 10;\n              break;\n\n            case 9:\n              setState(function (modelState) {\n                modelState.keyword = '';\n                modelState.searchList = [];\n              });\n\n            case 10:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n  }, [searchService, state.nodeList, setState]);\n  return {\n    state: state,\n    setState: setState,\n    onKeywordChange: onKeywordChange\n  };\n};","map":{"version":3,"sources":["../../src/flowchart-node-panel/service.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,oBAAT,EAA+B,UAA/B,EAA2C,MAA3C,EAAmD,WAAnD,QAAsE,kBAAtE;AAEA,SAAS,WAAT,QAA4B,SAA5B;AAEA,OAAM,IAAW,WAAX;;AAAN,CAAA,UAAiB,WAAjB,EAA4B;AACb,EAAA,WAAA,CAAA,EAAA,GAAK,iBAAL;AAOd,CARD,EAAiB,WAAW,KAAX,WAAW,GAAA,EAAA,CAA5B;AAUA;;;AACA,IAAM,oBAAoB,GAAG,SAAvB,oBAAuB;AAAA,MAAO,QAAP,uEAAkB,EAAlB;AAAA,MAAsB,OAAtB;AAAA,SAAyC,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9D,YAAA,IAD8D,GACvD,QAAQ,CAAC,MAAT,CACX,UAAA,CAAC,EAAG;AAAA,kBAAA,EAAA,EAAA,EAAA;;AAAC,qBAAA,CAAC,CAAC,WAAF,KAAiB,CAAA,EAAA,GAAA,CAAC,CAAC,KAAF,MAAO,IAAP,IAAO,EAAA,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAO,EAAA,CAAE,QAAF,CAAW,OAAX,CAAxB,MAA+C,CAAA,EAAA,GAAA,CAAC,CAAC,IAAF,MAAM,IAAN,IAAM,EAAA,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAM,EAAA,CAAE,QAAF,CAAW,OAAX,CAArD,CAAA;AAAwE,aADlE,CADuD;AAAA,6CAI7D,IAJ6D;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EAAzC;AAAA,CAA7B;;AAOA,OAAO,IAAM,YAAY,GAAG,SAAf,YAAe,CAAC,KAAD,EAAkB;AAC5C,MAAQ,YAAR,GAA+D,KAA/D,CAAQ,YAAR;AAAA,6BAA+D,KAA/D,CAAsB,aAAtB;AAAA,MAAsB,aAAtB,qCAAsC,oBAAtC;;AACA,aAAkB,YAAY,KAAA,IAAZ,IAAA,YAAY,KAAA,KAAA,CAAZ,GAAA,YAAA,GAAgB,EAAlC;AAAA,MAAQ,KAAR,QAAQ,KAAR;;AACA,qBAAyB,WAAW,EAApC;AAAA,MAAQ,YAAR,gBAAQ,YAAR;AAEA;;;AACA,8BAAsC,oBAAoB,CAAqB;AAC7E,IAAA,UAAU,EAAE,EADiE;AAE7E,IAAA,QAAQ,EAAE,EAFmE;AAG7E,IAAA,gBAAgB,EAAE,KAH2D;AAI7E,IAAA,OAAO,EAAE;AAJoE,GAArB,CAA1D;AAAA;AAAA,MAAO,KAAP;AAAA,MAAc,QAAd;AAAA,MAAwB,UAAxB;AAOA;;;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAK;AACnB,QAAI,YAAY,CAAC,iBAAb,CAA+B,WAAW,CAAC,EAA3C,CAAJ,EAAoD;AAClD;AACD;;AAED,IAAA,YAAY,CAAC,aAAb,CAA+C;AAC7C,MAAA,EAAE,EAAE,WAAW,CAAC,EAD6B;AAE7C,MAAA,YAAY,EAAE;AAAA,eAAM,UAAN;AAAA,OAF+B;AAG7C,MAAA,WAAW,EAAE,qBAAM,IAAN;AAAA,eAAa,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,yBAAM,MAAM,CAAC,UAAP,CAAkB,QAAlB,CAA2B,YAA3B,CAAN;;AADC;AAClB,kBAAA,cADkB;;AAC8C;AAChE,kBAAA,KAFkB,GAEV,SAAR,KAAQ;AAAA,2BAAW,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACN,qCAAM,WAAW,CAAC,KAAD,CAAjB;;AADM;AACjB,8BAAA,QADiB;AAAA,gEAEhB;AAAE,gCAAA,QAAQ,EAAR;AAAF,+BAFgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAA,EAAX;AAAA,mBAFU;;AAOlB,kBAAA,mBAPkB,GAOI,cAAc,CAAC,KAAf,CAAqB;AAAA,2BAAW,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7C,qCAAM,KAAK,EAAX;;AAD6C;AACpD,8BAAA,IADoD;AAE1D,8BAAA,IAAI,CAAC,QAAL,CAAc;AACZ,gCAAA,QAAQ,EAAE,IAAI,CAAC,QADH;AAEZ,gCAAA,gBAAgB,EAAE,KAFN;AAGZ,gCAAA,OAAO,EAAE,EAHG;AAIZ,gCAAA,UAAU,EAAE;AAJA,+BAAd;;AAF0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAA,EAAX;AAAA,mBAArB,CAPJ;AAAA,oDAiBjB,UAAU,CAAC,MAAX,CAAkB,YAAK;AAC5B,oBAAA,mBAAmB,CAAC,OAApB;AACD,mBAFM,CAjBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAA,EAAb;AAAA;AAHgC,KAA/C;AA0BA;AACD,GAhCD,EAgCG,EAhCH;AAkCA;;AACA,MAAM,eAAe,GAAG,KAAK,CAAC,WAAN,CACtB,UAAO,OAAP;AAAA,WAA0B,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACnB,aADmB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,mBAIpB,OAJoB;AAAA;AAAA;AAAA;;AAAA;AAMT,qBAAM,aAAa,CAAC,KAAK,CAAC,QAAP,EAAiB,OAAjB,CAAnB;;AANS;AAMhB,cAAA,IANgB;AAOtB,cAAA,QAAQ,CAAC,UAAA,UAAU,EAAG;AACpB,gBAAA,UAAU,CAAC,OAAX,GAAqB,OAArB;AACA,gBAAA,UAAU,CAAC,UAAX,GAAwB,IAAxB;AACD,eAHO,CAAR;AAPsB;AAAA;;AAAA;AAYtB,cAAA,QAAQ,CAAC,UAAA,UAAU,EAAG;AACpB,gBAAA,UAAU,CAAC,OAAX,GAAqB,EAArB;AACA,gBAAA,UAAU,CAAC,UAAX,GAAwB,EAAxB;AACD,eAHO,CAAR;;AAZsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAA,EAA1B;AAAA,GADsB,EAmBtB,CAAC,aAAD,EAAgB,KAAK,CAAC,QAAtB,EAAgC,QAAhC,CAnBsB,CAAxB;AAsBA,SAAO;AACL,IAAA,KAAK,EAAL,KADK;AAEL,IAAA,QAAQ,EAAR,QAFK;AAGL,IAAA,eAAe,EAAf;AAHK,GAAP;AAKD,CA5EM","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport React from 'react';\nimport { createComponentModel, Disposable, MODELS, useXFlowApp } from '@antv/xflow-core';\nimport { nodeService } from './utils';\nexport var NsPanelData;\n(function (NsPanelData) {\n    NsPanelData.id = 'NODE_PANEL_DATA';\n})(NsPanelData || (NsPanelData = {}));\n/** 节点查找 */\nconst DefaultsearchService = (nodeList = [], keyword) => __awaiter(void 0, void 0, void 0, function* () {\n    const list = nodeList.filter(i => { var _a, _b; return i.isDirectory || ((_a = i.label) === null || _a === void 0 ? void 0 : _a.includes(keyword)) || ((_b = i.name) === null || _b === void 0 ? void 0 : _b.includes(keyword)); });\n    return list;\n});\nexport const usePanelData = (props) => {\n    const { registerNode, searchService = DefaultsearchService } = props;\n    const { nodes } = registerNode !== null && registerNode !== void 0 ? registerNode : {};\n    const { modelService } = useXFlowApp();\n    /** 使用model */\n    const [state, setState, panelModel] = createComponentModel({\n        searchList: [],\n        nodeList: [],\n        defaultExpandAll: false,\n        keyword: '',\n    });\n    /** 注册成为全局状态，方便其他组件联动 */\n    React.useEffect(() => {\n        if (modelService.findDeferredModel(NsPanelData.id)) {\n            return;\n        }\n        modelService.registerModel({\n            id: NsPanelData.id,\n            modelFactory: () => panelModel,\n            watchChange: (self) => __awaiter(void 0, void 0, void 0, function* () {\n                const graphMetaModel = yield MODELS.GRAPH_META.getModel(modelService); //useContext(MODELS.GRAPH_META.id)\n                const fetch = () => __awaiter(void 0, void 0, void 0, function* () {\n                    const listData = yield nodeService(nodes);\n                    return { listData };\n                });\n                const graphMetaDisposable = graphMetaModel.watch(() => __awaiter(void 0, void 0, void 0, function* () {\n                    const data = yield fetch();\n                    self.setValue({\n                        nodeList: data.listData,\n                        defaultExpandAll: false,\n                        keyword: '',\n                        searchList: [],\n                    });\n                }));\n                return Disposable.create(() => {\n                    graphMetaDisposable.dispose();\n                });\n            }),\n        });\n        /* eslint-disable-next-line  */\n    }, []);\n    /** 搜索 */\n    const onKeywordChange = React.useCallback((keyword) => __awaiter(void 0, void 0, void 0, function* () {\n        if (!searchService) {\n            return;\n        }\n        if (keyword) {\n            // @ts-ignore\n            const list = yield searchService(state.nodeList, keyword);\n            setState(modelState => {\n                modelState.keyword = keyword;\n                modelState.searchList = list;\n            });\n        }\n        else {\n            setState(modelState => {\n                modelState.keyword = '';\n                modelState.searchList = [];\n            });\n        }\n    }), [searchService, state.nodeList, setState]);\n    return {\n        state,\n        setState,\n        onKeywordChange,\n    };\n};\n//# sourceMappingURL=service.js.map"]},"metadata":{},"sourceType":"module"}