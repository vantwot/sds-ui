{"ast":null,"code":"import { StringInput } from './string-input';\nimport { Checkbox } from './checkbox';\nimport { TextArea } from './text-area';\nimport { Select } from './select';\nimport { Datetime } from './datetime';\nimport { Float } from './float';\nimport { Log } from '../../../../util';\nexport var xflowDefaultControls = [['input', StringInput], ['checkbox', Checkbox], ['textArea', TextArea], ['select', Select], ['datetime', Datetime], ['float', Float]];\nexport var makeControlMap = function (controls) {\n  var controlMap = new Map();\n  controls.forEach(function (item) {\n    var key = item[0],\n        control = item[1];\n    var uuid = key.toLowerCase();\n\n    if (controlMap.has(uuid)) {\n      Log.error(\"\".concat(key, \" is duplicated in controlMap:\"), controlMap);\n    }\n\n    controlMap.set(uuid, control);\n  });\n  return controlMap;\n};\nexport var getControlFromMap = function (key, controlMap, defaultControl) {\n  if (controlMap.has(key)) {\n    return controlMap.get(key);\n  }\n\n  var uuid = key.toLowerCase();\n\n  if (controlMap.has(uuid)) {\n    return controlMap.get(uuid);\n  }\n\n  Log.warn(\"\".concat(key, \" is not exist in controlmap, fallback to defaultControl\"));\n  return defaultControl;\n};","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/@ant-design/flowchart/es/components/canvas-json-schema-form/schema-form/control-map/index.js"],"names":["StringInput","Checkbox","TextArea","Select","Datetime","Float","Log","xflowDefaultControls","makeControlMap","controls","controlMap","Map","forEach","item","key","control","uuid","toLowerCase","has","error","concat","set","getControlFromMap","defaultControl","get","warn"],"mappings":"AAAA,SAASA,WAAT,QAA4B,gBAA5B;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,GAAT,QAAoB,kBAApB;AACA,OAAO,IAAIC,oBAAoB,GAAG,CAC9B,CAAC,OAAD,EAAUP,WAAV,CAD8B,EAE9B,CAAC,UAAD,EAAaC,QAAb,CAF8B,EAG9B,CAAC,UAAD,EAAaC,QAAb,CAH8B,EAI9B,CAAC,QAAD,EAAWC,MAAX,CAJ8B,EAK9B,CAAC,UAAD,EAAaC,QAAb,CAL8B,EAM9B,CAAC,OAAD,EAAUC,KAAV,CAN8B,CAA3B;AAQP,OAAO,IAAIG,cAAc,GAAG,UAAUC,QAAV,EAAoB;AAC5C,MAAIC,UAAU,GAAG,IAAIC,GAAJ,EAAjB;AACAF,EAAAA,QAAQ,CAACG,OAAT,CAAiB,UAAUC,IAAV,EAAgB;AAC7B,QAAIC,GAAG,GAAGD,IAAI,CAAC,CAAD,CAAd;AAAA,QAAmBE,OAAO,GAAGF,IAAI,CAAC,CAAD,CAAjC;AACA,QAAIG,IAAI,GAAGF,GAAG,CAACG,WAAJ,EAAX;;AACA,QAAIP,UAAU,CAACQ,GAAX,CAAeF,IAAf,CAAJ,EAA0B;AACtBV,MAAAA,GAAG,CAACa,KAAJ,CAAU,GAAGC,MAAH,CAAUN,GAAV,EAAe,+BAAf,CAAV,EAA2DJ,UAA3D;AACH;;AACDA,IAAAA,UAAU,CAACW,GAAX,CAAeL,IAAf,EAAqBD,OAArB;AACH,GAPD;AAQA,SAAOL,UAAP;AACH,CAXM;AAYP,OAAO,IAAIY,iBAAiB,GAAG,UAAUR,GAAV,EAAeJ,UAAf,EAA2Ba,cAA3B,EAA2C;AACtE,MAAIb,UAAU,CAACQ,GAAX,CAAeJ,GAAf,CAAJ,EAAyB;AACrB,WAAOJ,UAAU,CAACc,GAAX,CAAeV,GAAf,CAAP;AACH;;AACD,MAAIE,IAAI,GAAGF,GAAG,CAACG,WAAJ,EAAX;;AACA,MAAIP,UAAU,CAACQ,GAAX,CAAeF,IAAf,CAAJ,EAA0B;AACtB,WAAON,UAAU,CAACc,GAAX,CAAeR,IAAf,CAAP;AACH;;AACDV,EAAAA,GAAG,CAACmB,IAAJ,CAAS,GAAGL,MAAH,CAAUN,GAAV,EAAe,yDAAf,CAAT;AACA,SAAOS,cAAP;AACH,CAVM","sourcesContent":["import { StringInput } from './string-input';\nimport { Checkbox } from './checkbox';\nimport { TextArea } from './text-area';\nimport { Select } from './select';\nimport { Datetime } from './datetime';\nimport { Float } from './float';\nimport { Log } from '../../../../util';\nexport var xflowDefaultControls = [\n    ['input', StringInput],\n    ['checkbox', Checkbox],\n    ['textArea', TextArea],\n    ['select', Select],\n    ['datetime', Datetime],\n    ['float', Float],\n];\nexport var makeControlMap = function (controls) {\n    var controlMap = new Map();\n    controls.forEach(function (item) {\n        var key = item[0], control = item[1];\n        var uuid = key.toLowerCase();\n        if (controlMap.has(uuid)) {\n            Log.error(\"\".concat(key, \" is duplicated in controlMap:\"), controlMap);\n        }\n        controlMap.set(uuid, control);\n    });\n    return controlMap;\n};\nexport var getControlFromMap = function (key, controlMap, defaultControl) {\n    if (controlMap.has(key)) {\n        return controlMap.get(key);\n    }\n    var uuid = key.toLowerCase();\n    if (controlMap.has(uuid)) {\n        return controlMap.get(uuid);\n    }\n    Log.warn(\"\".concat(key, \" is not exist in controlmap, fallback to defaultControl\"));\n    return defaultControl;\n};\n"]},"metadata":{},"sourceType":"module"}