{"ast":null,"code":"import _regeneratorRuntime from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsDelEdge;\n\n(function (NsDelEdge) {\n  /** Command: 用于注册named factory */\n  NsDelEdge.command = XFlowEdgeCommands.DEL_EDGE;\n  /** hookName */\n\n  NsDelEdge.hookKey = 'delEdge';\n  var ErrEnum;\n\n  (function (ErrEnum) {\n    ErrEnum[\"EDGE_NOT_EXIST\"] = \"edge is not exist\";\n    ErrEnum[\"EDGE_INVALID_CELL\"] = \"this is not a valid cell\";\n    ErrEnum[\"X6_DELETE_FAILED\"] = \"x6 throw err when call delete edge\";\n    ErrEnum[\"SERVICE_REJECT\"] = \"service reject to delete\";\n  })(ErrEnum = NsDelEdge.ErrEnum || (NsDelEdge.ErrEnum = {}));\n})(NsDelEdge || (NsDelEdge = {}));\n\nvar DelEdgeCommand =\n/*#__PURE__*/\n\n/** 创建节点命令 */\nfunction () {\n  function DelEdgeCommand() {\n    var _this = this;\n\n    _classCallCheck(this, DelEdgeCommand);\n\n    /** 执行Cmd */\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var _this$ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$ctx$getArgs = this.ctx.getArgs(), args = _this$ctx$getArgs.args, runtimeHook = _this$ctx$getArgs.hooks;\n                hooks = this.ctx.getHooks();\n                _context2.next = 4;\n                return hooks.delEdge.call(\n                /** 执行 hooks pipeline处理args */\n                args,\n                /** 执行 callback */\n                function (handlerArgs) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                    var edgeConfig, x6Edge, deleteEdgeService, commandService, edgeCell, isEdge, canDelete, targetCell, sourceCell, sourcePortId, targetPortId, source, target, undo;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            edgeConfig = handlerArgs.edgeConfig, x6Edge = handlerArgs.x6Edge, deleteEdgeService = handlerArgs.deleteEdgeService, commandService = handlerArgs.commandService;\n                            edgeCell = x6Edge;\n                            /** 没有edgeCell时查找cell */\n\n                            if (edgeCell) {\n                              _context.next = 9;\n                              break;\n                            }\n\n                            _context.next = 5;\n                            return this.findEdgeById(edgeConfig);\n\n                          case 5:\n                            edgeCell = _context.sent;\n\n                            if (edgeCell) {\n                              _context.next = 9;\n                              break;\n                            }\n\n                            console.error(NsDelEdge.ErrEnum.EDGE_NOT_EXIST, edgeConfig);\n                            return _context.abrupt(\"return\", {\n                              err: NsDelEdge.ErrEnum.EDGE_NOT_EXIST\n                            });\n\n                          case 9:\n                            isEdge = edgeCell && edgeCell.isEdge();\n\n                            if (isEdge) {\n                              _context.next = 13;\n                              break;\n                            }\n\n                            console.error(NsDelEdge.ErrEnum.EDGE_NOT_EXIST, edgeCell);\n                            return _context.abrupt(\"return\", {\n                              err: NsDelEdge.ErrEnum.EDGE_NOT_EXIST\n                            });\n\n                          case 13:\n                            if (!deleteEdgeService) {\n                              _context.next = 19;\n                              break;\n                            }\n\n                            _context.next = 16;\n                            return deleteEdgeService(handlerArgs);\n\n                          case 16:\n                            canDelete = _context.sent;\n\n                            if (canDelete) {\n                              _context.next = 19;\n                              break;\n                            }\n\n                            return _context.abrupt(\"return\", {\n                              err: NsDelEdge.ErrEnum.SERVICE_REJECT\n                            });\n\n                          case 19:\n                            _context.prev = 19;\n                            targetCell = edgeCell.getTargetCell();\n                            sourceCell = edgeCell.getSourceCell();\n                            sourcePortId = edgeCell.getSourcePortId();\n                            targetPortId = edgeCell.getTargetPortId();\n                            source = sourceCell.id;\n                            target = targetCell.id;\n                            /** 执行remove */\n\n                            /** 执行remove */\n                            edgeCell.remove();\n                            /** 创建 undo */\n\n                            /** 创建 undo */\n                            undo = Disposable.create(function () {\n                              commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n                                edgeConfig: {\n                                  source: source,\n                                  target: target,\n                                  sourcePortId: sourcePortId,\n                                  targetPortId: targetPortId\n                                }\n                              });\n                            });\n                            /** add undo */\n\n                            /** add undo */\n                            this.ctx.addUndo(undo);\n                            return _context.abrupt(\"return\", {\n                              err: null,\n                              edgeConfig: {\n                                source: source,\n                                target: target,\n                                sourcePortId: sourcePortId,\n                                targetPortId: targetPortId\n                              },\n                              targetCell: targetCell,\n                              sourceCell: sourceCell,\n                              sourcePortId: sourcePortId,\n                              targetPortId: targetPortId\n                            });\n\n                          case 32:\n                            _context.prev = 32;\n                            _context.t0 = _context[\"catch\"](19);\n                            console.error(NsDelEdge.ErrEnum.X6_DELETE_FAILED, _context.t0);\n                            return _context.abrupt(\"return\", {\n                              err: NsDelEdge.ErrEnum.X6_DELETE_FAILED\n                            });\n\n                          case 36:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this, [[19, 32]]);\n                  }));\n                }, runtimeHook);\n\n              case 4:\n                result = _context2.sent;\n                this.ctx.setResult(result);\n                return _context2.abrupt(\"return\", this);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    };\n\n    this.findEdgeById = function (edge) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var graph, cell;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.ctx.getX6Graph();\n\n              case 2:\n                graph = _context3.sent;\n                cell = graph.getCellById(edge.id);\n                return _context3.abrupt(\"return\", cell);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n    /** undo cmd */\n\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.ctx.undo();\n                return _context4.abrupt(\"return\", this);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n    /** redo cmd */\n\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this.isUndoable) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                _context5.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context5.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    };\n  }\n\n  _createClass(DelEdgeCommand, [{\n    key: \"init\",\n    value: function init() {\n      this.ctx = this.contextProvider();\n    }\n  }, {\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      return this.ctx.isUndoable();\n    }\n  }]);\n\n  return DelEdgeCommand;\n}();\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], DelEdgeCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], DelEdgeCommand.prototype, \"init\", null);\n\nDelEdgeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsDelEdge.command.id\n  }\n})\n/** 创建节点命令 */\n], DelEdgeCommand);\nexport { DelEdgeCommand };","map":{"version":3,"sources":["../../../src/command-contributions/edge/edge-del.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsDelEdge;\n(function (NsDelEdge) {\n    /** Command: 用于注册named factory */\n    NsDelEdge.command = XFlowEdgeCommands.DEL_EDGE;\n    /** hookName */\n    NsDelEdge.hookKey = 'delEdge';\n    let ErrEnum;\n    (function (ErrEnum) {\n        ErrEnum[\"EDGE_NOT_EXIST\"] = \"edge is not exist\";\n        ErrEnum[\"EDGE_INVALID_CELL\"] = \"this is not a valid cell\";\n        ErrEnum[\"X6_DELETE_FAILED\"] = \"x6 throw err when call delete edge\";\n        ErrEnum[\"SERVICE_REJECT\"] = \"service reject to delete\";\n    })(ErrEnum = NsDelEdge.ErrEnum || (NsDelEdge.ErrEnum = {}));\n})(NsDelEdge || (NsDelEdge = {}));\nlet DelEdgeCommand = \n/** 创建节点命令 */\nclass DelEdgeCommand {\n    constructor() {\n        /** 执行Cmd */\n        this.execute = () => __awaiter(this, void 0, void 0, function* () {\n            const { args, hooks: runtimeHook } = this.ctx.getArgs();\n            const hooks = this.ctx.getHooks();\n            const result = yield hooks.delEdge.call(\n            /** 执行 hooks pipeline处理args */\n            args, \n            /** 执行 callback */\n            (handlerArgs) => __awaiter(this, void 0, void 0, function* () {\n                const { edgeConfig, x6Edge, deleteEdgeService, commandService } = handlerArgs;\n                let edgeCell = x6Edge;\n                /** 没有edgeCell时查找cell */\n                if (!edgeCell) {\n                    edgeCell = yield this.findEdgeById(edgeConfig);\n                    if (!edgeCell) {\n                        console.error(NsDelEdge.ErrEnum.EDGE_NOT_EXIST, edgeConfig);\n                        return { err: NsDelEdge.ErrEnum.EDGE_NOT_EXIST };\n                    }\n                }\n                const isEdge = edgeCell && edgeCell.isEdge();\n                if (!isEdge) {\n                    console.error(NsDelEdge.ErrEnum.EDGE_NOT_EXIST, edgeCell);\n                    return { err: NsDelEdge.ErrEnum.EDGE_NOT_EXIST };\n                }\n                if (deleteEdgeService) {\n                    /** 需要请求接口 */\n                    const canDelete = yield deleteEdgeService(handlerArgs);\n                    if (!canDelete) {\n                        return { err: NsDelEdge.ErrEnum.SERVICE_REJECT };\n                    }\n                }\n                try {\n                    const targetCell = edgeCell.getTargetCell();\n                    const sourceCell = edgeCell.getSourceCell();\n                    const sourcePortId = edgeCell.getSourcePortId();\n                    const targetPortId = edgeCell.getTargetPortId();\n                    const source = sourceCell.id;\n                    const target = targetCell.id;\n                    /** 执行remove */\n                    edgeCell.remove();\n                    /** 创建 undo */\n                    const undo = Disposable.create(() => {\n                        commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n                            edgeConfig: { source, target, sourcePortId, targetPortId },\n                        });\n                    });\n                    /** add undo */\n                    this.ctx.addUndo(undo);\n                    return {\n                        err: null,\n                        edgeConfig: { source, target, sourcePortId, targetPortId },\n                        targetCell,\n                        sourceCell,\n                        sourcePortId,\n                        targetPortId,\n                    };\n                }\n                catch (error) {\n                    console.error(NsDelEdge.ErrEnum.X6_DELETE_FAILED, error);\n                    return { err: NsDelEdge.ErrEnum.X6_DELETE_FAILED };\n                }\n            }), runtimeHook);\n            this.ctx.setResult(result);\n            return this;\n        });\n        this.findEdgeById = (edge) => __awaiter(this, void 0, void 0, function* () {\n            const graph = yield this.ctx.getX6Graph();\n            const cell = graph.getCellById(edge.id);\n            return cell;\n        });\n        /** undo cmd */\n        this.undo = () => __awaiter(this, void 0, void 0, function* () {\n            this.ctx.undo();\n            return this;\n        });\n        /** redo cmd */\n        this.redo = () => __awaiter(this, void 0, void 0, function* () {\n            if (!this.isUndoable) {\n                yield this.execute();\n            }\n            return this;\n        });\n    }\n    init() {\n        this.ctx = this.contextProvider();\n    }\n    isUndoable() {\n        return this.ctx.isUndoable();\n    }\n};\n__decorate([\n    inject(ICommandContextProvider),\n    __metadata(\"design:type\", Object)\n], DelEdgeCommand.prototype, \"contextProvider\", void 0);\n__decorate([\n    postConstruct(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], DelEdgeCommand.prototype, \"init\", null);\nDelEdgeCommand = __decorate([\n    injectable({\n        token: { token: ICommandHandler, named: NsDelEdge.command.id },\n    })\n    /** 创建节点命令 */\n], DelEdgeCommand);\nexport { DelEdgeCommand };\n//# sourceMappingURL=edge-del.js.map"]},"metadata":{},"sourceType":"module"}