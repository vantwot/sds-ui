{"ast":null,"code":"import _slicedToArray from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport React from 'react';\nimport { useXFlowApp, DisposableCollection, createComponentModel } from '@antv/xflow-core';\nimport { XFlowModelCommands, Disposable, MODELS } from '@antv/xflow-core';\nexport var NsJsonSchemaFormModel;\n\n(function (NsJsonSchemaFormModel) {\n  var _this = this;\n\n  NsJsonSchemaFormModel.id = 'XFLOW_JSON_SCHEMA_FORM';\n\n  NsJsonSchemaFormModel.useModel = function (model) {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", model.awaitModel(NsJsonSchemaFormModel.id));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  };\n})(NsJsonSchemaFormModel || (NsJsonSchemaFormModel = {}));\n/** 方便其他组件执行Command改变Panel内部状态 */\n\n\nexport var executeJsonSchemaFormCommand = function executeJsonSchemaFormCommand(cmds, updateModel) {\n  cmds.executeCommand(XFlowModelCommands.UPDATE_MODEL.id, {\n    getModel: function getModel(modelService) {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", NsJsonSchemaFormModel.useModel(modelService));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    },\n    updateModel: updateModel\n  });\n};\nexport var useJsonSchemaFormModel = function useJsonSchemaFormModel(props) {\n  var app = useXFlowApp();\n  var commandService = app.commandService,\n      modelService = app.modelService;\n  var formSchemaService = props.formSchemaService;\n\n  var _createComponentModel = createComponentModel({\n    schema: {\n      tabs: []\n    },\n    targetType: null,\n    targetData: null,\n    targetCell: null,\n    loading: false\n  }),\n      _createComponentModel2 = _slicedToArray(_createComponentModel, 4),\n      state = _createComponentModel2[0],\n      setState = _createComponentModel2[1],\n      model = _createComponentModel2[2],\n      isModelReady = _createComponentModel2[3];\n  /** 注册全局的model */\n\n\n  React.useEffect(function () {\n    if (!app || !app.modelService) {\n      return;\n    }\n\n    var toDispose = new DisposableCollection();\n    var deferredModel = app.modelService.findDeferredModel(NsJsonSchemaFormModel.id);\n\n    if (!deferredModel) {\n      var d = app.modelService.registerModel({\n        id: NsJsonSchemaFormModel.id,\n        modelFactory: function modelFactory() {\n          return model;\n        },\n\n        /** 监听SELECTED_CELL的变化 */\n        watchChange: function watchChange(self, modelSerccie) {\n          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n            var selectedCellModel, nodeDisposable;\n            return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.next = 2;\n                    return MODELS.SELECTED_CELL.getModel(modelSerccie);\n\n                  case 2:\n                    selectedCellModel = _context5.sent;\n                    nodeDisposable = selectedCellModel.watch(function (cell) {\n                      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                        var updateState, getCellType, targetCellType;\n                        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                          while (1) {\n                            switch (_context4.prev = _context4.next) {\n                              case 0:\n                                updateState = function updateState(targetCell, type) {\n                                  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                                    var targetData, schema;\n                                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                                      while (1) {\n                                        switch (_context3.prev = _context3.next) {\n                                          case 0:\n                                            self.setValue(function (m) {\n                                              m.loading = true;\n                                              m.schema = {\n                                                tabs: []\n                                              };\n                                              m.targetType = null;\n                                              m.targetData = null;\n                                              m.targetCell = null;\n                                            });\n                                            targetData = targetCell ? targetCell.getData() : null;\n\n                                            if (formSchemaService) {\n                                              _context3.next = 4;\n                                              break;\n                                            }\n\n                                            return _context3.abrupt(\"return\");\n\n                                          case 4:\n                                            _context3.next = 6;\n                                            return formSchemaService({\n                                              commandService: commandService,\n                                              modelService: modelService,\n                                              targetData: targetData,\n                                              cell: targetCell,\n                                              targetType: type\n                                            });\n\n                                          case 6:\n                                            schema = _context3.sent;\n                                            self.setValue({\n                                              loading: false,\n                                              schema: schema,\n                                              targetType: type,\n                                              targetCell: targetCell,\n                                              targetData: targetData\n                                            });\n\n                                          case 8:\n                                          case \"end\":\n                                            return _context3.stop();\n                                        }\n                                      }\n                                    }, _callee3);\n                                  }));\n                                };\n\n                                getCellType = function getCellType(targetCell) {\n                                  if (!targetCell) {\n                                    return 'canvas';\n                                  } else if (targetCell.isNode && targetCell.isNode() && targetCell.getProp('isGroup')) {\n                                    return 'group';\n                                  } else if (targetCell.isNode && targetCell.isNode()) {\n                                    return 'node';\n                                  } else if (targetCell.isEdge && targetCell.isEdge()) {\n                                    return 'edge';\n                                  } else {\n                                    return 'canvas';\n                                  }\n                                };\n\n                                targetCellType = getCellType(cell);\n\n                                if (!(props.targetType || ['node', 'canvas']).includes(targetCellType)) {\n                                  _context4.next = 6;\n                                  break;\n                                }\n\n                                _context4.next = 6;\n                                return updateState(cell, targetCellType);\n\n                              case 6:\n                              case \"end\":\n                                return _context4.stop();\n                            }\n                          }\n                        }, _callee4);\n                      }));\n                    });\n                    return _context5.abrupt(\"return\", Disposable.create(function () {\n                      nodeDisposable.dispose();\n                      toDispose.push(nodeDisposable);\n                    }));\n\n                  case 5:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee5);\n          }));\n        }\n      });\n      toDispose.push(d);\n    }\n\n    return function () {\n      toDispose.dispose();\n    };\n    /* eslint-disable-next-line  */\n  }, []);\n  return {\n    commandService: commandService,\n    modelService: modelService,\n    state: state,\n    setState: setState,\n    model: model,\n    isModelReady: isModelReady\n  };\n};","map":{"version":3,"sources":["../../src/canvas-json-schema-form/service.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport React from 'react';\nimport { useXFlowApp, DisposableCollection, createComponentModel } from '@antv/xflow-core';\nimport { XFlowModelCommands, Disposable, MODELS } from '@antv/xflow-core';\nexport var NsJsonSchemaFormModel;\n(function (NsJsonSchemaFormModel) {\n    NsJsonSchemaFormModel.id = 'XFLOW_JSON_SCHEMA_FORM';\n    NsJsonSchemaFormModel.useModel = (model) => __awaiter(this, void 0, void 0, function* () {\n        return model.awaitModel(NsJsonSchemaFormModel.id);\n    });\n})(NsJsonSchemaFormModel || (NsJsonSchemaFormModel = {}));\n/** 方便其他组件执行Command改变Panel内部状态 */\nexport const executeJsonSchemaFormCommand = (cmds, updateModel) => {\n    cmds.executeCommand(XFlowModelCommands.UPDATE_MODEL.id, {\n        getModel: (modelService) => __awaiter(void 0, void 0, void 0, function* () {\n            return NsJsonSchemaFormModel.useModel(modelService);\n        }),\n        updateModel: updateModel,\n    });\n};\nexport const useJsonSchemaFormModel = (props) => {\n    const app = useXFlowApp();\n    const { commandService, modelService } = app;\n    const { formSchemaService } = props;\n    const [state, setState, model, isModelReady] = createComponentModel({\n        schema: { tabs: [] },\n        targetType: null,\n        targetData: null,\n        targetCell: null,\n        loading: false,\n    });\n    /** 注册全局的model */\n    React.useEffect(() => {\n        if (!app || !app.modelService) {\n            return;\n        }\n        const toDispose = new DisposableCollection();\n        const deferredModel = app.modelService.findDeferredModel(NsJsonSchemaFormModel.id);\n        if (!deferredModel) {\n            const d = app.modelService.registerModel({\n                id: NsJsonSchemaFormModel.id,\n                modelFactory: () => model,\n                /** 监听SELECTED_CELL的变化 */\n                watchChange: (self, modelSerccie) => __awaiter(void 0, void 0, void 0, function* () {\n                    const selectedCellModel = yield MODELS.SELECTED_CELL.getModel(modelSerccie);\n                    const nodeDisposable = selectedCellModel.watch((cell) => __awaiter(void 0, void 0, void 0, function* () {\n                        const updateState = (targetCell, type) => __awaiter(void 0, void 0, void 0, function* () {\n                            self.setValue(m => {\n                                m.loading = true;\n                                m.schema = { tabs: [] };\n                                m.targetType = null;\n                                m.targetData = null;\n                                m.targetCell = null;\n                            });\n                            const targetData = targetCell ? targetCell.getData() : null;\n                            if (!formSchemaService) {\n                                return;\n                            }\n                            const schema = yield formSchemaService({\n                                commandService,\n                                modelService,\n                                targetData,\n                                cell: targetCell,\n                                targetType: type,\n                            });\n                            self.setValue({\n                                loading: false,\n                                schema: schema,\n                                targetType: type,\n                                targetCell: targetCell,\n                                targetData: targetData,\n                            });\n                        });\n                        const getCellType = (targetCell) => {\n                            if (!targetCell) {\n                                return 'canvas';\n                            }\n                            else if (targetCell.isNode &&\n                                targetCell.isNode() &&\n                                targetCell.getProp('isGroup')) {\n                                return 'group';\n                            }\n                            else if (targetCell.isNode && targetCell.isNode()) {\n                                return 'node';\n                            }\n                            else if (targetCell.isEdge && targetCell.isEdge()) {\n                                return 'edge';\n                            }\n                            else {\n                                return 'canvas';\n                            }\n                        };\n                        const targetCellType = getCellType(cell);\n                        if ((props.targetType || ['node', 'canvas']).includes(targetCellType)) {\n                            yield updateState(cell, targetCellType);\n                        }\n                    }));\n                    return Disposable.create(() => {\n                        nodeDisposable.dispose();\n                        toDispose.push(nodeDisposable);\n                    });\n                }),\n            });\n            toDispose.push(d);\n        }\n        return () => {\n            toDispose.dispose();\n        };\n        /* eslint-disable-next-line  */\n    }, []);\n    return { commandService, modelService, state, setState, model, isModelReady };\n};\n//# sourceMappingURL=service.js.map"]},"metadata":{},"sourceType":"module"}