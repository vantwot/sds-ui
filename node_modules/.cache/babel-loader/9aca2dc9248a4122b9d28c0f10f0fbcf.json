{"ast":null,"code":"import _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Dom, FunctionExt } from '../../util';\nimport { Point } from '../../geometry';\nimport { ToolsView } from '../../view/tool';\nimport * as Util from './util';\n\nvar Anchor = /*#__PURE__*/function (_ToolsView$ToolItem) {\n  _inherits(Anchor, _ToolsView$ToolItem);\n\n  var _super = _createSuper(Anchor);\n\n  function Anchor() {\n    _classCallCheck(this, Anchor);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Anchor, [{\n    key: \"type\",\n    get: function get() {\n      return this.options.type;\n    }\n  }, {\n    key: \"onRender\",\n    value: function onRender() {\n      Dom.addClass(this.container, this.prefixClassName(\"edge-tool-\".concat(this.type, \"-anchor\")));\n      this.toggleArea(false);\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var type = this.type;\n      var edgeView = this.cellView;\n      var terminalView = edgeView.getTerminalView(type);\n\n      if (terminalView) {\n        this.updateAnchor();\n        this.updateArea();\n        this.container.style.display = '';\n      } else {\n        this.container.style.display = 'none';\n      }\n\n      return this;\n    }\n  }, {\n    key: \"updateAnchor\",\n    value: function updateAnchor() {\n      var childNodes = this.childNodes;\n\n      if (!childNodes) {\n        return;\n      }\n\n      var anchorNode = childNodes.anchor;\n\n      if (!anchorNode) {\n        return;\n      }\n\n      var type = this.type;\n      var edgeView = this.cellView;\n      var options = this.options;\n      var position = edgeView.getTerminalAnchor(type);\n      var customAnchor = edgeView.cell.prop([type, 'anchor']);\n      anchorNode.setAttribute('transform', \"translate(\".concat(position.x, \", \").concat(position.y, \")\"));\n      var anchorAttrs = customAnchor ? options.customAnchorAttrs : options.defaultAnchorAttrs;\n\n      if (anchorAttrs) {\n        Object.keys(anchorAttrs).forEach(function (attrName) {\n          anchorNode.setAttribute(attrName, anchorAttrs[attrName]);\n        });\n      }\n    }\n  }, {\n    key: \"updateArea\",\n    value: function updateArea() {\n      var childNodes = this.childNodes;\n\n      if (!childNodes) {\n        return;\n      }\n\n      var areaNode = childNodes.area;\n\n      if (!areaNode) {\n        return;\n      }\n\n      var type = this.type;\n      var edgeView = this.cellView;\n      var terminalView = edgeView.getTerminalView(type);\n\n      if (terminalView) {\n        var terminalCell = terminalView.cell;\n        var magnet = edgeView.getTerminalMagnet(type);\n        var padding = this.options.areaPadding || 0;\n\n        if (!Number.isFinite(padding)) {\n          padding = 0;\n        }\n\n        var bbox;\n        var angle;\n        var center;\n\n        if (terminalView.isEdgeElement(magnet)) {\n          bbox = terminalView.getBBox();\n          angle = 0;\n          center = bbox.getCenter();\n        } else {\n          bbox = terminalView.getUnrotatedBBoxOfElement(magnet);\n          angle = terminalCell.getAngle();\n          center = bbox.getCenter();\n\n          if (angle) {\n            center.rotate(-angle, terminalCell.getBBox().getCenter());\n          }\n        }\n\n        bbox.inflate(padding);\n        Dom.attr(areaNode, {\n          x: -bbox.width / 2,\n          y: -bbox.height / 2,\n          width: bbox.width,\n          height: bbox.height,\n          transform: \"translate(\".concat(center.x, \", \").concat(center.y, \") rotate(\").concat(angle, \")\")\n        });\n      }\n    }\n  }, {\n    key: \"toggleArea\",\n    value: function toggleArea(visible) {\n      if (this.childNodes) {\n        var elem = this.childNodes.area;\n\n        if (elem) {\n          elem.style.display = visible ? '' : 'none';\n        }\n      }\n    }\n  }, {\n    key: \"onMouseDown\",\n    value: function onMouseDown(evt) {\n      if (this.guard(evt)) {\n        return;\n      }\n\n      evt.stopPropagation();\n      evt.preventDefault();\n      this.graph.view.undelegateEvents();\n\n      if (this.options.documentEvents) {\n        this.delegateDocumentEvents(this.options.documentEvents);\n      }\n\n      this.focus();\n      this.toggleArea(this.options.restrictArea);\n      this.cell.startBatch('move-anchor', {\n        ui: true,\n        toolId: this.cid\n      });\n    }\n  }, {\n    key: \"resetAnchor\",\n    value: function resetAnchor(anchor) {\n      var type = this.type;\n      var cell = this.cell;\n\n      if (anchor) {\n        cell.prop([type, 'anchor'], anchor, {\n          rewrite: true,\n          ui: true,\n          toolId: this.cid\n        });\n      } else {\n        cell.removeProp([type, 'anchor'], {\n          ui: true,\n          toolId: this.cid\n        });\n      }\n    }\n  }, {\n    key: \"onMouseMove\",\n    value: function onMouseMove(evt) {\n      var terminalType = this.type;\n      var edgeView = this.cellView;\n      var terminalView = edgeView.getTerminalView(terminalType);\n\n      if (terminalView == null) {\n        return;\n      }\n\n      var e = this.normalizeEvent(evt);\n      var terminalCell = terminalView.cell;\n      var terminalMagnet = edgeView.getTerminalMagnet(terminalType);\n      var coords = this.graph.clientToLocal(e.clientX, e.clientY);\n      var snapFn = this.options.snap;\n\n      if (typeof snapFn === 'function') {\n        var tmp = FunctionExt.call(snapFn, edgeView, coords, terminalView, terminalMagnet, terminalType, edgeView, this);\n        coords = Point.create(tmp);\n      }\n\n      if (this.options.restrictArea) {\n        if (terminalView.isEdgeElement(terminalMagnet)) {\n          var pointAtConnection = terminalView.getClosestPoint(coords);\n\n          if (pointAtConnection) {\n            coords = pointAtConnection;\n          }\n        } else {\n          var bbox = terminalView.getUnrotatedBBoxOfElement(terminalMagnet);\n          var angle = terminalCell.getAngle();\n          var origin = terminalCell.getBBox().getCenter();\n          var rotatedCoords = coords.clone().rotate(angle, origin);\n\n          if (!bbox.containsPoint(rotatedCoords)) {\n            coords = bbox.getNearestPointToPoint(rotatedCoords).rotate(-angle, origin);\n          }\n        }\n      }\n\n      var anchor;\n      var anchorFn = this.options.anchor;\n\n      if (typeof anchorFn === 'function') {\n        anchor = FunctionExt.call(anchorFn, edgeView, coords, terminalView, terminalMagnet, terminalType, edgeView, this);\n      }\n\n      this.resetAnchor(anchor);\n      this.update();\n    } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"onMouseUp\",\n    value: function onMouseUp(evt) {\n      this.graph.view.delegateEvents();\n      this.undelegateDocumentEvents();\n      this.blur();\n      this.toggleArea(false);\n      var edgeView = this.cellView;\n\n      if (this.options.removeRedundancies) {\n        edgeView.removeRedundantLinearVertices({\n          ui: true,\n          toolId: this.cid\n        });\n      }\n\n      this.cell.stopBatch('move-anchor', {\n        ui: true,\n        toolId: this.cid\n      });\n    }\n  }, {\n    key: \"onDblClick\",\n    value: function onDblClick() {\n      var anchor = this.options.resetAnchor;\n\n      if (anchor) {\n        this.resetAnchor(anchor === true ? undefined : anchor);\n      }\n\n      this.update();\n    }\n  }]);\n\n  return Anchor;\n}(ToolsView.ToolItem);\n\n(function (Anchor) {\n  Anchor.config({\n    tagName: 'g',\n    markup: [{\n      tagName: 'circle',\n      selector: 'anchor',\n      attrs: {\n        cursor: 'pointer'\n      }\n    }, {\n      tagName: 'rect',\n      selector: 'area',\n      attrs: {\n        'pointer-events': 'none',\n        fill: 'none',\n        stroke: '#33334F',\n        'stroke-dasharray': '2,4',\n        rx: 5,\n        ry: 5\n      }\n    }],\n    events: {\n      mousedown: 'onMouseDown',\n      touchstart: 'onMouseDown',\n      dblclick: 'onDblClick'\n    },\n    documentEvents: {\n      mousemove: 'onMouseMove',\n      touchmove: 'onMouseMove',\n      mouseup: 'onMouseUp',\n      touchend: 'onMouseUp',\n      touchcancel: 'onMouseUp'\n    },\n    customAnchorAttrs: {\n      'stroke-width': 4,\n      stroke: '#33334F',\n      fill: '#FFFFFF',\n      r: 5\n    },\n    defaultAnchorAttrs: {\n      'stroke-width': 2,\n      stroke: '#FFFFFF',\n      fill: '#33334F',\n      r: 6\n    },\n    areaPadding: 6,\n    snapRadius: 10,\n    resetAnchor: true,\n    restrictArea: true,\n    removeRedundancies: true,\n    anchor: Util.getAnchor,\n    snap: function snap(pos, terminalView, terminalMagnet, terminalType, edgeView, toolView) {\n      var snapRadius = toolView.options.snapRadius || 0;\n      var isSource = terminalType === 'source';\n      var refIndex = isSource ? 0 : -1;\n      var ref = this.cell.getVertexAt(refIndex) || this.getTerminalAnchor(isSource ? 'target' : 'source');\n\n      if (ref) {\n        if (Math.abs(ref.x - pos.x) < snapRadius) pos.x = ref.x;\n        if (Math.abs(ref.y - pos.y) < snapRadius) pos.y = ref.y;\n      }\n\n      return pos;\n    }\n  });\n})(Anchor || (Anchor = {}));\n\nexport var SourceAnchor = Anchor.define({\n  name: 'source-anchor',\n  type: 'source'\n});\nexport var TargetAnchor = Anchor.define({\n  name: 'target-anchor',\n  type: 'target'\n});","map":{"version":3,"sources":["../../../src/registry/tool/anchor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Dom, FunctionExt } from '../../util';\nimport { Point } from '../../geometry';\nimport { ToolsView } from '../../view/tool';\nimport * as Util from './util';\nclass Anchor extends ToolsView.ToolItem {\n    get type() {\n        return this.options.type;\n    }\n    onRender() {\n        Dom.addClass(this.container, this.prefixClassName(`edge-tool-${this.type}-anchor`));\n        this.toggleArea(false);\n        this.update();\n    }\n    update() {\n        const type = this.type;\n        const edgeView = this.cellView;\n        const terminalView = edgeView.getTerminalView(type);\n        if (terminalView) {\n            this.updateAnchor();\n            this.updateArea();\n            this.container.style.display = '';\n        }\n        else {\n            this.container.style.display = 'none';\n        }\n        return this;\n    }\n    updateAnchor() {\n        const childNodes = this.childNodes;\n        if (!childNodes) {\n            return;\n        }\n        const anchorNode = childNodes.anchor;\n        if (!anchorNode) {\n            return;\n        }\n        const type = this.type;\n        const edgeView = this.cellView;\n        const options = this.options;\n        const position = edgeView.getTerminalAnchor(type);\n        const customAnchor = edgeView.cell.prop([type, 'anchor']);\n        anchorNode.setAttribute('transform', `translate(${position.x}, ${position.y})`);\n        const anchorAttrs = customAnchor\n            ? options.customAnchorAttrs\n            : options.defaultAnchorAttrs;\n        if (anchorAttrs) {\n            Object.keys(anchorAttrs).forEach((attrName) => {\n                anchorNode.setAttribute(attrName, anchorAttrs[attrName]);\n            });\n        }\n    }\n    updateArea() {\n        const childNodes = this.childNodes;\n        if (!childNodes) {\n            return;\n        }\n        const areaNode = childNodes.area;\n        if (!areaNode) {\n            return;\n        }\n        const type = this.type;\n        const edgeView = this.cellView;\n        const terminalView = edgeView.getTerminalView(type);\n        if (terminalView) {\n            const terminalCell = terminalView.cell;\n            const magnet = edgeView.getTerminalMagnet(type);\n            let padding = this.options.areaPadding || 0;\n            if (!Number.isFinite(padding)) {\n                padding = 0;\n            }\n            let bbox;\n            let angle;\n            let center;\n            if (terminalView.isEdgeElement(magnet)) {\n                bbox = terminalView.getBBox();\n                angle = 0;\n                center = bbox.getCenter();\n            }\n            else {\n                bbox = terminalView.getUnrotatedBBoxOfElement(magnet);\n                angle = terminalCell.getAngle();\n                center = bbox.getCenter();\n                if (angle) {\n                    center.rotate(-angle, terminalCell.getBBox().getCenter());\n                }\n            }\n            bbox.inflate(padding);\n            Dom.attr(areaNode, {\n                x: -bbox.width / 2,\n                y: -bbox.height / 2,\n                width: bbox.width,\n                height: bbox.height,\n                transform: `translate(${center.x}, ${center.y}) rotate(${angle})`,\n            });\n        }\n    }\n    toggleArea(visible) {\n        if (this.childNodes) {\n            const elem = this.childNodes.area;\n            if (elem) {\n                elem.style.display = visible ? '' : 'none';\n            }\n        }\n    }\n    onMouseDown(evt) {\n        if (this.guard(evt)) {\n            return;\n        }\n        evt.stopPropagation();\n        evt.preventDefault();\n        this.graph.view.undelegateEvents();\n        if (this.options.documentEvents) {\n            this.delegateDocumentEvents(this.options.documentEvents);\n        }\n        this.focus();\n        this.toggleArea(this.options.restrictArea);\n        this.cell.startBatch('move-anchor', {\n            ui: true,\n            toolId: this.cid,\n        });\n    }\n    resetAnchor(anchor) {\n        const type = this.type;\n        const cell = this.cell;\n        if (anchor) {\n            cell.prop([type, 'anchor'], anchor, {\n                rewrite: true,\n                ui: true,\n                toolId: this.cid,\n            });\n        }\n        else {\n            cell.removeProp([type, 'anchor'], {\n                ui: true,\n                toolId: this.cid,\n            });\n        }\n    }\n    onMouseMove(evt) {\n        const terminalType = this.type;\n        const edgeView = this.cellView;\n        const terminalView = edgeView.getTerminalView(terminalType);\n        if (terminalView == null) {\n            return;\n        }\n        const e = this.normalizeEvent(evt);\n        const terminalCell = terminalView.cell;\n        const terminalMagnet = edgeView.getTerminalMagnet(terminalType);\n        let coords = this.graph.clientToLocal(e.clientX, e.clientY);\n        const snapFn = this.options.snap;\n        if (typeof snapFn === 'function') {\n            const tmp = FunctionExt.call(snapFn, edgeView, coords, terminalView, terminalMagnet, terminalType, edgeView, this);\n            coords = Point.create(tmp);\n        }\n        if (this.options.restrictArea) {\n            if (terminalView.isEdgeElement(terminalMagnet)) {\n                const pointAtConnection = terminalView.getClosestPoint(coords);\n                if (pointAtConnection) {\n                    coords = pointAtConnection;\n                }\n            }\n            else {\n                const bbox = terminalView.getUnrotatedBBoxOfElement(terminalMagnet);\n                const angle = terminalCell.getAngle();\n                const origin = terminalCell.getBBox().getCenter();\n                const rotatedCoords = coords.clone().rotate(angle, origin);\n                if (!bbox.containsPoint(rotatedCoords)) {\n                    coords = bbox\n                        .getNearestPointToPoint(rotatedCoords)\n                        .rotate(-angle, origin);\n                }\n            }\n        }\n        let anchor;\n        const anchorFn = this.options.anchor;\n        if (typeof anchorFn === 'function') {\n            anchor = FunctionExt.call(anchorFn, edgeView, coords, terminalView, terminalMagnet, terminalType, edgeView, this);\n        }\n        this.resetAnchor(anchor);\n        this.update();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMouseUp(evt) {\n        this.graph.view.delegateEvents();\n        this.undelegateDocumentEvents();\n        this.blur();\n        this.toggleArea(false);\n        const edgeView = this.cellView;\n        if (this.options.removeRedundancies) {\n            edgeView.removeRedundantLinearVertices({ ui: true, toolId: this.cid });\n        }\n        this.cell.stopBatch('move-anchor', { ui: true, toolId: this.cid });\n    }\n    onDblClick() {\n        const anchor = this.options.resetAnchor;\n        if (anchor) {\n            this.resetAnchor(anchor === true ? undefined : anchor);\n        }\n        this.update();\n    }\n}\n(function (Anchor) {\n    Anchor.config({\n        tagName: 'g',\n        markup: [\n            {\n                tagName: 'circle',\n                selector: 'anchor',\n                attrs: {\n                    cursor: 'pointer',\n                },\n            },\n            {\n                tagName: 'rect',\n                selector: 'area',\n                attrs: {\n                    'pointer-events': 'none',\n                    fill: 'none',\n                    stroke: '#33334F',\n                    'stroke-dasharray': '2,4',\n                    rx: 5,\n                    ry: 5,\n                },\n            },\n        ],\n        events: {\n            mousedown: 'onMouseDown',\n            touchstart: 'onMouseDown',\n            dblclick: 'onDblClick',\n        },\n        documentEvents: {\n            mousemove: 'onMouseMove',\n            touchmove: 'onMouseMove',\n            mouseup: 'onMouseUp',\n            touchend: 'onMouseUp',\n            touchcancel: 'onMouseUp',\n        },\n        customAnchorAttrs: {\n            'stroke-width': 4,\n            stroke: '#33334F',\n            fill: '#FFFFFF',\n            r: 5,\n        },\n        defaultAnchorAttrs: {\n            'stroke-width': 2,\n            stroke: '#FFFFFF',\n            fill: '#33334F',\n            r: 6,\n        },\n        areaPadding: 6,\n        snapRadius: 10,\n        resetAnchor: true,\n        restrictArea: true,\n        removeRedundancies: true,\n        anchor: Util.getAnchor,\n        snap(pos, terminalView, terminalMagnet, terminalType, edgeView, toolView) {\n            const snapRadius = toolView.options.snapRadius || 0;\n            const isSource = terminalType === 'source';\n            const refIndex = isSource ? 0 : -1;\n            const ref = this.cell.getVertexAt(refIndex) ||\n                this.getTerminalAnchor(isSource ? 'target' : 'source');\n            if (ref) {\n                if (Math.abs(ref.x - pos.x) < snapRadius)\n                    pos.x = ref.x;\n                if (Math.abs(ref.y - pos.y) < snapRadius)\n                    pos.y = ref.y;\n            }\n            return pos;\n        },\n    });\n})(Anchor || (Anchor = {}));\nexport const SourceAnchor = Anchor.define({\n    name: 'source-anchor',\n    type: 'source',\n});\nexport const TargetAnchor = Anchor.define({\n    name: 'target-anchor',\n    type: 'target',\n});\n//# sourceMappingURL=anchor.js.map"]},"metadata":{},"sourceType":"module"}