{"ast":null,"code":"import React from 'react';\nimport { useXflowPrefixCls } from '@antv/xflow-core';\nimport { WorkspacePanel } from '../base-panel';\nimport { NodePanelBody } from './panel-body';\nimport { NodePanelHeader } from './panel-header';\nimport { NodePanelFooter } from './panel-footer';\nimport { usePanelLyaoutStyle } from './utils';\nimport { useTreePanelData, NsNodeTreePanelModel } from './service';\nimport * as NsNodeTreePanel from './interface';\n\nvar NodeTreePanelMain = function NodeTreePanelMain(props) {\n  var _usePanelLyaoutStyle = usePanelLyaoutStyle(props),\n      headerStyle = _usePanelLyaoutStyle.headerStyle,\n      bodyStyle = _usePanelLyaoutStyle.bodyStyle,\n      footerStyle = _usePanelLyaoutStyle.footerStyle;\n\n  var _useTreePanelData = useTreePanelData(props),\n      state = _useTreePanelData.state,\n      onFolderExpand = _useTreePanelData.onFolderExpand,\n      onKeywordChange = _useTreePanelData.onKeywordChange;\n\n  return React.createElement(React.Fragment, null, React.createElement(NodePanelHeader, Object.assign({}, props, {\n    state: state,\n    style: headerStyle,\n    onKeywordChange: onKeywordChange\n  })), React.createElement(NodePanelBody, Object.assign({}, props, {\n    state: state,\n    style: bodyStyle,\n    onFolderExpand: onFolderExpand\n  })), React.createElement(NodePanelFooter, Object.assign({}, props, {\n    state: state,\n    style: footerStyle\n  })));\n};\n\nvar NodeTreePanel = function NodeTreePanel(props) {\n  var prefixClz = useXflowPrefixCls('node-dnd-panel');\n  return React.createElement(WorkspacePanel, Object.assign({}, props, {\n    className: prefixClz\n  }), React.createElement(NodeTreePanelMain, Object.assign({}, props, {\n    prefixClz: prefixClz\n  })));\n};\n\nexport { NodeTreePanel, NsNodeTreePanelModel, NsNodeTreePanel };","map":{"version":3,"sources":["../../src/canvas-node-tree-panel/index.tsx"],"names":[],"mappings":"AACA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,iBAAT,QAAkC,kBAAlC;AACA,SAAS,cAAT,QAA+B,eAA/B;AACA,SAAS,aAAT,QAA8B,cAA9B;AACA,SAAS,eAAT,QAAgC,gBAAhC;AACA,SAAS,eAAT,QAAgC,gBAAhC;AACA,SAAS,mBAAT,QAAoC,SAApC;AACA,SAAS,gBAAT,EAA2B,oBAA3B,QAAuD,WAAvD;AACA,OAAO,KAAK,eAAZ,MAAiC,aAAjC;;AAEA,IAAM,iBAAiB,GAAqB,SAAtC,iBAAsC,CAAA,KAAK,EAAG;AAClD,6BAAgD,mBAAmB,CAAC,KAAD,CAAnE;AAAA,MAAQ,WAAR,wBAAQ,WAAR;AAAA,MAAqB,SAArB,wBAAqB,SAArB;AAAA,MAAgC,WAAhC,wBAAgC,WAAhC;;AACA,0BAAmD,gBAAgB,CAAC,KAAD,CAAnE;AAAA,MAAQ,KAAR,qBAAQ,KAAR;AAAA,MAAe,cAAf,qBAAe,cAAf;AAAA,MAA+B,eAA/B,qBAA+B,eAA/B;;AAEA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAC,eAAD,EAAgB,MAAA,CAAA,MAAA,CAAA,EAAA,EACV,KADU,EACL;AACT,IAAA,KAAK,EAAE,KADE;AAET,IAAA,KAAK,EAAE,WAFE;AAGT,IAAA,eAAe,EAAE;AAHR,GADK,CAAhB,CADF,EAOE,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,EAAU;AAAE,IAAA,KAAK,EAAE,KAAT;AAAgB,IAAA,KAAK,EAAE,SAAvB;AAAkC,IAAA,cAAc,EAAE;AAAlD,GAAV,CAAd,CAPF,EAQE,KAAA,CAAA,aAAA,CAAC,eAAD,EAAgB,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,EAAU;AAAE,IAAA,KAAK,EAAE,KAAT;AAAgB,IAAA,KAAK,EAAE;AAAvB,GAAV,CAAhB,CARF,CADF;AAYD,CAhBD;;AAkBA,IAAM,aAAa,GAAqB,SAAlC,aAAkC,CAAA,KAAK,EAAG;AAC9C,MAAM,SAAS,GAAG,iBAAiB,CAAC,gBAAD,CAAnC;AACA,SACE,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,EAAU;AAAE,IAAA,SAAS,EAAE;AAAb,GAAV,CAAf,EACE,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAkB,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,EAAU;AAAE,IAAA,SAAS,EAAE;AAAb,GAAV,CAAlB,CADF,CADF;AAKD,CAPD;;AASA,SAAS,aAAT,EAAwB,oBAAxB,EAA8C,eAA9C","sourceRoot":"","sourcesContent":["import React from 'react';\nimport { useXflowPrefixCls } from '@antv/xflow-core';\nimport { WorkspacePanel } from '../base-panel';\nimport { NodePanelBody } from './panel-body';\nimport { NodePanelHeader } from './panel-header';\nimport { NodePanelFooter } from './panel-footer';\nimport { usePanelLyaoutStyle } from './utils';\nimport { useTreePanelData, NsNodeTreePanelModel } from './service';\nimport * as NsNodeTreePanel from './interface';\nconst NodeTreePanelMain = props => {\n    const { headerStyle, bodyStyle, footerStyle } = usePanelLyaoutStyle(props);\n    const { state, onFolderExpand, onKeywordChange } = useTreePanelData(props);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(NodePanelHeader, Object.assign({}, props, { state: state, style: headerStyle, onKeywordChange: onKeywordChange })),\n        React.createElement(NodePanelBody, Object.assign({}, props, { state: state, style: bodyStyle, onFolderExpand: onFolderExpand })),\n        React.createElement(NodePanelFooter, Object.assign({}, props, { state: state, style: footerStyle }))));\n};\nconst NodeTreePanel = props => {\n    const prefixClz = useXflowPrefixCls('node-dnd-panel');\n    return (React.createElement(WorkspacePanel, Object.assign({}, props, { className: prefixClz }),\n        React.createElement(NodeTreePanelMain, Object.assign({}, props, { prefixClz: prefixClz }))));\n};\nexport { NodeTreePanel, NsNodeTreePanelModel, NsNodeTreePanel };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}