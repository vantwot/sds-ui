{"ast":null,"code":"import { Widget } from '../common';\nimport { Dom } from '../../util';\nimport { Angle, Point } from '../../geometry';\nexport class Knob extends Widget {\n  get node() {\n    return this.cell;\n  }\n\n  get metadata() {\n    const meta = this.cell.prop('knob');\n\n    if (Array.isArray(meta)) {\n      if (this.options.index != null) {\n        return meta[this.options.index];\n      }\n\n      return null;\n    }\n\n    return meta;\n  }\n\n  init(options) {\n    this.options = Object.assign({}, options);\n    this.render();\n    this.startListening();\n  }\n\n  startListening() {\n    this.delegateEvents({\n      mousedown: 'onMouseDown',\n      touchstart: 'onMouseDown'\n    });\n    this.model.on('*', this.update, this);\n    this.graph.on('scale', this.update, this);\n    this.graph.on('translate', this.update, this);\n    this.model.on('reseted', this.remove, this);\n    this.node.on('removed', this.remove, this);\n    this.view.on('node:resize:mousedown', this.onTransform, this);\n    this.view.on('node:rotate:mousedown', this.onTransform, this);\n    this.view.on('node:resize:mouseup', this.onTransformed, this);\n    this.view.on('node:rotate:mouseup', this.onTransformed, this);\n    this.view.on('cell:knob:mousedown', this.onKnobMouseDown, this);\n    this.view.on('cell:knob:mouseup', this.onKnobMouseUp, this);\n    super.startListening();\n  }\n\n  stopListening() {\n    this.undelegateEvents();\n    this.model.off('*', this.update, this);\n    this.graph.off('scale', this.update, this);\n    this.graph.off('translate', this.update, this);\n    this.model.off('reseted', this.remove, this);\n    this.node.off('removed', this.remove, this);\n    this.view.off('node:resize:mousedown', this.onTransform, this);\n    this.view.off('node:rotate:mousedown', this.onTransform, this);\n    this.view.off('node:resize:mouseup', this.onTransformed, this);\n    this.view.off('node:rotate:mouseup', this.onTransformed, this);\n    this.view.off('cell:knob:mousedown', this.onKnobMouseDown, this);\n    this.view.off('cell:knob:mouseup', this.onKnobMouseUp, this);\n    super.stopListening();\n  }\n\n  render() {\n    this.container = document.createElement('div');\n    Dom.addClass(this.container, this.prefixClassName('widget-knob'));\n\n    if (this.options.className) {\n      Dom.addClass(this.container, this.options.className);\n    }\n\n    this.view.addClass(Private.KNOB);\n    this.graph.container.appendChild(this.container);\n    this.update();\n    return this;\n  }\n\n  remove() {\n    this.view.removeClass(Private.KNOB);\n    return super.remove();\n  }\n\n  update() {\n    if (this.metadata) {\n      const {\n        update,\n        position\n      } = this.metadata;\n      const args = {\n        knob: this,\n        cell: this.cell,\n        node: this.node\n      };\n\n      if (position) {\n        const pos = position.call(this.graph, Object.assign({}, args));\n\n        if (pos) {\n          const ctm = this.graph.matrix();\n          const bbox = this.node.getBBox();\n          const angle = Angle.normalize(this.node.getAngle());\n          const local = Point.create(pos);\n\n          if (angle !== 0) {\n            local.rotate(-angle, {\n              x: bbox.width / 2,\n              y: bbox.height / 2\n            });\n          }\n\n          local.translate(bbox).scale(ctm.a, ctm.d).translate(ctm.e, ctm.f);\n          this.container.style.left = `${local.x}px`;\n          this.container.style.top = `${local.y}px`;\n        }\n      }\n\n      if (update) {\n        update.call(this.graph, Object.assign({}, args));\n      }\n    }\n  }\n\n  hide() {\n    this.container.style.display = 'none';\n  }\n\n  show() {\n    this.container.style.display = '';\n  }\n\n  onTransform() {\n    this.hide();\n  }\n\n  onTransformed() {\n    this.show();\n  }\n\n  onKnobMouseDown(_ref) {\n    let {\n      knob\n    } = _ref;\n\n    if (this.cid !== knob.cid) {\n      this.hide();\n    }\n  }\n\n  onKnobMouseUp() {\n    this.show();\n  }\n\n  notify(name, evt) {\n    if (this.view) {\n      const e = this.view.normalizeEvent(evt);\n      const localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n      this.view.notify(`cell:${name}`, {\n        e,\n        view: this.view,\n        node: this.node,\n        cell: this.cell,\n        x: localPoint.x,\n        y: localPoint.y,\n        knob: this\n      });\n\n      if (this.cell.isNode()) {\n        this.view.notify(`node:${name}`, {\n          e,\n          view: this.view,\n          node: this.node,\n          cell: this.cell,\n          x: localPoint.x,\n          y: localPoint.y,\n          knob: this\n        });\n      } else if (this.cell.isEdge()) {\n        this.view.notify(`edge:${name}`, {\n          e,\n          view: this.view,\n          edge: this.cell,\n          cell: this.cell,\n          x: localPoint.x,\n          y: localPoint.y,\n          knob: this\n        });\n      }\n    }\n  }\n\n  onMouseDown(e) {\n    e.stopPropagation();\n    this.setEventData(e, {\n      knobbing: false,\n      originX: e.clientX,\n      originY: e.clientY,\n      clientX: e.clientX,\n      clientY: e.clientY\n    });\n    this.graph.view.undelegateEvents();\n    this.delegateDocumentEvents(Private.documentEvents, e.data);\n\n    if (this.metadata && this.metadata.onMouseDown) {\n      this.metadata.onMouseDown.call(this.graph, {\n        e,\n        data: this.getEventData(e),\n        knob: this,\n        cell: this.cell,\n        node: this.node\n      });\n    }\n\n    this.notify('knob:mousedown', e);\n  }\n\n  onMouseMove(e) {\n    const data = this.getEventData(e);\n    const view = this.graph.findViewByCell(this.node);\n\n    if (!data.knobbing) {\n      data.knobbing = true;\n\n      if (view) {\n        view.addClass(Private.KNOBBING);\n        this.notify('knob', e);\n      }\n\n      this.model.startBatch('knob', {\n        cid: this.cid\n      });\n    }\n\n    data.clientX = e.clientX;\n    data.clientY = e.clientY;\n\n    if (this.metadata && this.metadata.onMouseMove) {\n      const ctm = this.graph.matrix();\n      const dx = (e.clientX - data.originX) / ctm.a;\n      const dy = (e.clientY - data.originY) / ctm.d;\n      const angle = this.node.getAngle();\n      const delta = new Point(dx, dy).rotate(angle);\n      this.metadata.onMouseMove.call(this.graph, {\n        e,\n        data,\n        deltaX: delta.x,\n        deltaY: delta.y,\n        knob: this,\n        cell: this.cell,\n        node: this.node\n      });\n    }\n\n    this.notify('knobbing', e);\n    this.notify('knob:mousemove', e);\n  }\n\n  onMouseUp(e) {\n    this.undelegateDocumentEvents();\n    this.graph.view.delegateEvents();\n    const data = this.getEventData(e);\n    const view = this.graph.findViewByCell(this.node);\n\n    if (data.knobbing) {\n      if (view) {\n        view.removeClass(Private.KNOBBING);\n      }\n\n      if (this.metadata && this.metadata.onMouseUp) {\n        this.metadata.onMouseUp.call(this.graph, {\n          e,\n          data,\n          knob: this,\n          cell: this.cell,\n          node: this.node\n        });\n      }\n\n      this.model.stopBatch('knob', {\n        cid: this.cid\n      });\n      this.notify('knobbed', e);\n    }\n\n    this.notify('knob:mouseup', e);\n  }\n\n}\nvar Private;\n\n(function (Private) {\n  Private.KNOB = 'has-widget-knob';\n  Private.KNOBBING = 'node-knobbing';\n  Private.documentEvents = {\n    mousemove: 'onMouseMove',\n    touchmove: 'onMouseMove',\n    mouseup: 'onMouseUp',\n    touchend: 'onMouseUp'\n  };\n})(Private || (Private = {}));","map":{"version":3,"sources":["../../../src/addon/knob/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Widget } from '../common';\nimport { Dom } from '../../util';\nimport { Angle, Point } from '../../geometry';\nexport class Knob extends Widget {\n    get node() {\n        return this.cell;\n    }\n    get metadata() {\n        const meta = this.cell.prop('knob');\n        if (Array.isArray(meta)) {\n            if (this.options.index != null) {\n                return meta[this.options.index];\n            }\n            return null;\n        }\n        return meta;\n    }\n    init(options) {\n        this.options = Object.assign({}, options);\n        this.render();\n        this.startListening();\n    }\n    startListening() {\n        this.delegateEvents({\n            mousedown: 'onMouseDown',\n            touchstart: 'onMouseDown',\n        });\n        this.model.on('*', this.update, this);\n        this.graph.on('scale', this.update, this);\n        this.graph.on('translate', this.update, this);\n        this.model.on('reseted', this.remove, this);\n        this.node.on('removed', this.remove, this);\n        this.view.on('node:resize:mousedown', this.onTransform, this);\n        this.view.on('node:rotate:mousedown', this.onTransform, this);\n        this.view.on('node:resize:mouseup', this.onTransformed, this);\n        this.view.on('node:rotate:mouseup', this.onTransformed, this);\n        this.view.on('cell:knob:mousedown', this.onKnobMouseDown, this);\n        this.view.on('cell:knob:mouseup', this.onKnobMouseUp, this);\n        super.startListening();\n    }\n    stopListening() {\n        this.undelegateEvents();\n        this.model.off('*', this.update, this);\n        this.graph.off('scale', this.update, this);\n        this.graph.off('translate', this.update, this);\n        this.model.off('reseted', this.remove, this);\n        this.node.off('removed', this.remove, this);\n        this.view.off('node:resize:mousedown', this.onTransform, this);\n        this.view.off('node:rotate:mousedown', this.onTransform, this);\n        this.view.off('node:resize:mouseup', this.onTransformed, this);\n        this.view.off('node:rotate:mouseup', this.onTransformed, this);\n        this.view.off('cell:knob:mousedown', this.onKnobMouseDown, this);\n        this.view.off('cell:knob:mouseup', this.onKnobMouseUp, this);\n        super.stopListening();\n    }\n    render() {\n        this.container = document.createElement('div');\n        Dom.addClass(this.container, this.prefixClassName('widget-knob'));\n        if (this.options.className) {\n            Dom.addClass(this.container, this.options.className);\n        }\n        this.view.addClass(Private.KNOB);\n        this.graph.container.appendChild(this.container);\n        this.update();\n        return this;\n    }\n    remove() {\n        this.view.removeClass(Private.KNOB);\n        return super.remove();\n    }\n    update() {\n        if (this.metadata) {\n            const { update, position } = this.metadata;\n            const args = {\n                knob: this,\n                cell: this.cell,\n                node: this.node,\n            };\n            if (position) {\n                const pos = position.call(this.graph, Object.assign({}, args));\n                if (pos) {\n                    const ctm = this.graph.matrix();\n                    const bbox = this.node.getBBox();\n                    const angle = Angle.normalize(this.node.getAngle());\n                    const local = Point.create(pos);\n                    if (angle !== 0) {\n                        local.rotate(-angle, { x: bbox.width / 2, y: bbox.height / 2 });\n                    }\n                    local.translate(bbox).scale(ctm.a, ctm.d).translate(ctm.e, ctm.f);\n                    this.container.style.left = `${local.x}px`;\n                    this.container.style.top = `${local.y}px`;\n                }\n            }\n            if (update) {\n                update.call(this.graph, Object.assign({}, args));\n            }\n        }\n    }\n    hide() {\n        this.container.style.display = 'none';\n    }\n    show() {\n        this.container.style.display = '';\n    }\n    onTransform() {\n        this.hide();\n    }\n    onTransformed() {\n        this.show();\n    }\n    onKnobMouseDown({ knob }) {\n        if (this.cid !== knob.cid) {\n            this.hide();\n        }\n    }\n    onKnobMouseUp() {\n        this.show();\n    }\n    notify(name, evt) {\n        if (this.view) {\n            const e = this.view.normalizeEvent(evt);\n            const localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n            this.view.notify(`cell:${name}`, {\n                e,\n                view: this.view,\n                node: this.node,\n                cell: this.cell,\n                x: localPoint.x,\n                y: localPoint.y,\n                knob: this,\n            });\n            if (this.cell.isNode()) {\n                this.view.notify(`node:${name}`, {\n                    e,\n                    view: this.view,\n                    node: this.node,\n                    cell: this.cell,\n                    x: localPoint.x,\n                    y: localPoint.y,\n                    knob: this,\n                });\n            }\n            else if (this.cell.isEdge()) {\n                this.view.notify(`edge:${name}`, {\n                    e,\n                    view: this.view,\n                    edge: this.cell,\n                    cell: this.cell,\n                    x: localPoint.x,\n                    y: localPoint.y,\n                    knob: this,\n                });\n            }\n        }\n    }\n    onMouseDown(e) {\n        e.stopPropagation();\n        this.setEventData(e, {\n            knobbing: false,\n            originX: e.clientX,\n            originY: e.clientY,\n            clientX: e.clientX,\n            clientY: e.clientY,\n        });\n        this.graph.view.undelegateEvents();\n        this.delegateDocumentEvents(Private.documentEvents, e.data);\n        if (this.metadata && this.metadata.onMouseDown) {\n            this.metadata.onMouseDown.call(this.graph, {\n                e,\n                data: this.getEventData(e),\n                knob: this,\n                cell: this.cell,\n                node: this.node,\n            });\n        }\n        this.notify('knob:mousedown', e);\n    }\n    onMouseMove(e) {\n        const data = this.getEventData(e);\n        const view = this.graph.findViewByCell(this.node);\n        if (!data.knobbing) {\n            data.knobbing = true;\n            if (view) {\n                view.addClass(Private.KNOBBING);\n                this.notify('knob', e);\n            }\n            this.model.startBatch('knob', { cid: this.cid });\n        }\n        data.clientX = e.clientX;\n        data.clientY = e.clientY;\n        if (this.metadata && this.metadata.onMouseMove) {\n            const ctm = this.graph.matrix();\n            const dx = (e.clientX - data.originX) / ctm.a;\n            const dy = (e.clientY - data.originY) / ctm.d;\n            const angle = this.node.getAngle();\n            const delta = new Point(dx, dy).rotate(angle);\n            this.metadata.onMouseMove.call(this.graph, {\n                e,\n                data,\n                deltaX: delta.x,\n                deltaY: delta.y,\n                knob: this,\n                cell: this.cell,\n                node: this.node,\n            });\n        }\n        this.notify('knobbing', e);\n        this.notify('knob:mousemove', e);\n    }\n    onMouseUp(e) {\n        this.undelegateDocumentEvents();\n        this.graph.view.delegateEvents();\n        const data = this.getEventData(e);\n        const view = this.graph.findViewByCell(this.node);\n        if (data.knobbing) {\n            if (view) {\n                view.removeClass(Private.KNOBBING);\n            }\n            if (this.metadata && this.metadata.onMouseUp) {\n                this.metadata.onMouseUp.call(this.graph, {\n                    e,\n                    data,\n                    knob: this,\n                    cell: this.cell,\n                    node: this.node,\n                });\n            }\n            this.model.stopBatch('knob', { cid: this.cid });\n            this.notify('knobbed', e);\n        }\n        this.notify('knob:mouseup', e);\n    }\n}\nvar Private;\n(function (Private) {\n    Private.KNOB = 'has-widget-knob';\n    Private.KNOBBING = 'node-knobbing';\n    Private.documentEvents = {\n        mousemove: 'onMouseMove',\n        touchmove: 'onMouseMove',\n        mouseup: 'onMouseUp',\n        touchend: 'onMouseUp',\n    };\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}