{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Area = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar util_1 = require(\"@antv/util\");\n\nvar plot_1 = require(\"../../core/plot\");\n\nvar constants_1 = require(\"./constants\");\n\nvar area_layer_1 = require(\"../../layers/area-layer\");\n\nvar layer_group_1 = require(\"../../core/layer/layer-group\");\n\nvar Area =\n/** @class */\nfunction (_super) {\n  (0, tslib_1.__extends)(Area, _super);\n\n  function Area() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * 图表类型\n     */\n\n\n    _this.type = plot_1.Plot.PlotType.Area;\n    return _this;\n  }\n  /**\n   * 获取默认配置\n   */\n\n\n  Area.prototype.getDefaultOptions = function () {\n    return Area.DefaultOptions;\n  };\n  /**\n   * 创建图层\n   */\n\n\n  Area.prototype.createLayers = function (source) {\n    this.areaLayer = new area_layer_1.AreaLayer((0, tslib_1.__assign)({\n      source: source\n    }, (0, util_1.pick)(this.options, area_layer_1.AreaLayer.LayerOptionsKeys)));\n    var layerGroup = new layer_group_1.LayerGroup([this.areaLayer]);\n\n    if (this.options.label) {\n      this.labelLayer = this.createLabelLayer(source, this.options.label, this.options);\n      layerGroup.addLayer(this.labelLayer);\n    }\n\n    return layerGroup;\n  };\n  /**\n   * 更新图层\n   */\n\n\n  Area.prototype.updateLayers = function (options) {\n    var polygonLayerConfig = (0, util_1.pick)(options, area_layer_1.AreaLayer.LayerOptionsKeys);\n    this.areaLayer.update(polygonLayerConfig);\n\n    if (options.label) {\n      if (this.labelLayer) {\n        this.labelLayer.update((0, tslib_1.__assign)({}, options.label));\n      } else {\n        this.labelLayer = this.createLabelLayer(this.source, options.label, this.options);\n        this.layerGroup.addLayer(this.labelLayer);\n      }\n    } else {\n      if (this.labelLayer) {\n        this.layerGroup.removeLayer(this.labelLayer);\n      }\n    }\n  };\n  /**\n   * 初始化图层事件\n   */\n\n\n  Area.prototype.initLayersEvent = function () {//\n  };\n  /**\n   * 实现 legend 配置项\n   */\n\n\n  Area.prototype.getLegendOptions = function () {\n    var colorLegendItems = this.areaLayer.getColorLegendItems();\n\n    if (colorLegendItems.length !== 0) {\n      return {\n        type: 'category',\n        items: colorLegendItems\n      };\n    }\n\n    return {};\n  };\n  /**\n   * 默认配置项\n   */\n\n\n  Area.DefaultOptions = constants_1.DEFAULT_OPTIONS;\n  return Area;\n}(plot_1.Plot);\n\nexports.Area = Area;","map":{"version":3,"sources":["../../../../src/plots/area/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Area = void 0;\nvar tslib_1 = require(\"tslib\");\nvar util_1 = require(\"@antv/util\");\nvar plot_1 = require(\"../../core/plot\");\nvar constants_1 = require(\"./constants\");\nvar area_layer_1 = require(\"../../layers/area-layer\");\nvar layer_group_1 = require(\"../../core/layer/layer-group\");\nvar Area = /** @class */ (function (_super) {\n    (0, tslib_1.__extends)(Area, _super);\n    function Area() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * 图表类型\n         */\n        _this.type = plot_1.Plot.PlotType.Area;\n        return _this;\n    }\n    /**\n     * 获取默认配置\n     */\n    Area.prototype.getDefaultOptions = function () {\n        return Area.DefaultOptions;\n    };\n    /**\n     * 创建图层\n     */\n    Area.prototype.createLayers = function (source) {\n        this.areaLayer = new area_layer_1.AreaLayer((0, tslib_1.__assign)({ source: source }, (0, util_1.pick)(this.options, area_layer_1.AreaLayer.LayerOptionsKeys)));\n        var layerGroup = new layer_group_1.LayerGroup([this.areaLayer]);\n        if (this.options.label) {\n            this.labelLayer = this.createLabelLayer(source, this.options.label, this.options);\n            layerGroup.addLayer(this.labelLayer);\n        }\n        return layerGroup;\n    };\n    /**\n     * 更新图层\n     */\n    Area.prototype.updateLayers = function (options) {\n        var polygonLayerConfig = (0, util_1.pick)(options, area_layer_1.AreaLayer.LayerOptionsKeys);\n        this.areaLayer.update(polygonLayerConfig);\n        if (options.label) {\n            if (this.labelLayer) {\n                this.labelLayer.update((0, tslib_1.__assign)({}, options.label));\n            }\n            else {\n                this.labelLayer = this.createLabelLayer(this.source, options.label, this.options);\n                this.layerGroup.addLayer(this.labelLayer);\n            }\n        }\n        else {\n            if (this.labelLayer) {\n                this.layerGroup.removeLayer(this.labelLayer);\n            }\n        }\n    };\n    /**\n     * 初始化图层事件\n     */\n    Area.prototype.initLayersEvent = function () {\n        //\n    };\n    /**\n     * 实现 legend 配置项\n     */\n    Area.prototype.getLegendOptions = function () {\n        var colorLegendItems = this.areaLayer.getColorLegendItems();\n        if (colorLegendItems.length !== 0) {\n            return { type: 'category', items: colorLegendItems };\n        }\n        return {};\n    };\n    /**\n     * 默认配置项\n     */\n    Area.DefaultOptions = constants_1.DEFAULT_OPTIONS;\n    return Area;\n}(plot_1.Plot));\nexports.Area = Area;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}