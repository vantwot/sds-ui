{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport EventTarget from './EventTarget';\n\nvar _requestHeader = new Map();\n\nvar _responseHeader = new Map();\n\nvar _requestTask = new Map();\n\nvar contentTypes = {\n  json: 'application/json',\n  text: 'application/text',\n  arraybuffer: 'application/octet-stream'\n};\n\nfunction _triggerEvent(type) {\n  var event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    target: this\n  };\n\n  if (typeof this[\"on\".concat(type)] === 'function') {\n    this[\"on\".concat(type)].call(this, event);\n  }\n}\n\nfunction _changeReadyState(readyState) {\n  var event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    readyState: readyState\n  };\n  this.readyState = readyState;\n\n  _triggerEvent.call(this, 'readystatechange', event);\n}\n\nexport var $XMLHttpRequest = function (_EventTarget) {\n  _inherits($XMLHttpRequest, _EventTarget);\n\n  var _super = _createSuper($XMLHttpRequest);\n\n  function $XMLHttpRequest() {\n    var _this;\n\n    _classCallCheck(this, $XMLHttpRequest);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"onabort\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onerror\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onload\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onloadstart\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onprogress\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"ontimeout\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onloadend\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onreadystatechange\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"readyState\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"response\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"responseText\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_responseType\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"responseXML\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"status\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"statusText\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"upload\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"withCredentials\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"timeout\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_url\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_method\", void 0);\n\n    _this.onabort = null;\n    _this.onerror = null;\n    _this.onload = null;\n    _this.onloadstart = null;\n    _this.onprogress = null;\n    _this.ontimeout = null;\n    _this.onloadend = null;\n    _this.onreadystatechange = null;\n    _this.readyState = 0;\n    _this.response = null;\n    _this.responseText = null;\n    _this._responseType = 'text';\n    _this.responseXML = null;\n    _this.status = 0;\n    _this.statusText = '';\n    _this.upload = {};\n    _this.withCredentials = false;\n\n    _requestHeader.set('requestHeader', {\n      'content-type': 'application/x-www-form-urlencoded'\n    });\n\n    return _this;\n  }\n\n  _createClass($XMLHttpRequest, [{\n    key: \"responseType\",\n    set: function set(type) {\n      this._responseType = type;\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      var myRequestTask = _requestTask.get('requestTask');\n\n      if (myRequestTask) {\n        myRequestTask.abort();\n      }\n    }\n  }, {\n    key: \"getAllResponseHeaders\",\n    value: function getAllResponseHeaders() {\n      var responseHeader = _responseHeader.get('responseHeader');\n\n      return Object.keys(responseHeader).map(function (header) {\n        return \"\".concat(header, \": \").concat(responseHeader[header]);\n      }).join('\\n');\n    }\n  }, {\n    key: \"getResponseHeader\",\n    value: function getResponseHeader(header) {\n      return _responseHeader.get('responseHeader')[header];\n    }\n  }, {\n    key: \"open\",\n    value: function open(method, url, flag) {\n      this._method = method;\n      this._url = url;\n    }\n  }, {\n    key: \"overrideMimeType\",\n    value: function overrideMimeType() {}\n  }, {\n    key: \"send\",\n    value: function send() {\n      var $data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    }\n  }, {\n    key: \"setRequestHeader\",\n    value: function setRequestHeader(header, value) {\n      var myHeader = _requestHeader.get('requestHeader');\n\n      myHeader[header] = value;\n\n      _requestHeader.set('requestHeader', myHeader);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener) {\n      var _this2 = this;\n\n      if (typeof listener !== 'function') {\n        return;\n      }\n\n      this['on' + type] = function () {\n        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        event.target = event.target || _this2;\n        listener.call(_this2, event);\n      };\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, listener) {\n      if (this['on' + type] === listener) {\n        this['on' + type] = null;\n      }\n    }\n  }]);\n\n  return $XMLHttpRequest;\n}(EventTarget);\n\n_defineProperty($XMLHttpRequest, \"UNSEND\", void 0);\n\n_defineProperty($XMLHttpRequest, \"OPENED\", void 0);\n\n_defineProperty($XMLHttpRequest, \"HEADERS_RECEIVED\", void 0);\n\n_defineProperty($XMLHttpRequest, \"LOADING\", void 0);\n\n_defineProperty($XMLHttpRequest, \"DONE\", void 0);\n\n$XMLHttpRequest.UNSEND = 0;\n$XMLHttpRequest.OPENED = 1;\n$XMLHttpRequest.HEADERS_RECEIVED = 2;\n$XMLHttpRequest.LOADING = 3;\n$XMLHttpRequest.DONE = 4;","map":{"version":3,"sources":["../../src/mini-adapter/XMLHttpRequest.ts"],"names":["_requestHeader","_responseHeader","_requestTask","contentTypes","json","text","arraybuffer","event","target","readyState","_triggerEvent","$XMLHttpRequest","myRequestTask","responseHeader","$data","myHeader","listener"],"mappings":"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","sourcesContent":["// @ts-nocheck\n// tslint:disable\nimport EventTarget from './EventTarget';\n\ndeclare let my: any;\nconst _requestHeader = new Map();\nconst _responseHeader = new Map();\nconst _requestTask = new Map();\nconst contentTypes = {\n  json: 'application/json',\n  text: 'application/text',\n  arraybuffer: 'application/octet-stream',\n};\n\nfunction _triggerEvent(type, event = { target: this }) {\n  if (typeof this[`on${type}`] === 'function') {\n    this[`on${type}`].call(this, event);\n  }\n}\n\nfunction _changeReadyState(readyState, event = { readyState }) {\n  this.readyState = readyState;\n  _triggerEvent.call(this, 'readystatechange', event);\n}\n\nexport class $XMLHttpRequest extends EventTarget {\n  public static UNSEND: number;\n  public static OPENED: number;\n  public static HEADERS_RECEIVED: number;\n  public static LOADING: number;\n  public static DONE: number;\n  public onabort: any;\n  public onerror: any;\n  public onload: any;\n  public onloadstart: any;\n  public onprogress: any;\n  public ontimeout: any;\n  public onloadend: any;\n  public onreadystatechange: any;\n  public readyState: number;\n  public response: any;\n  public responseText: any;\n  public _responseType: string;\n  public responseXML: any;\n  public status: number;\n  public statusText: string;\n  public upload: any;\n  public withCredentials: boolean;\n  public timeout: number;\n\n  public _url: string;\n  public _method: string;\n\n  constructor() {\n    super();\n\n    this.onabort = null;\n    this.onerror = null;\n    this.onload = null;\n    this.onloadstart = null;\n    this.onprogress = null;\n    this.ontimeout = null;\n    this.onloadend = null;\n\n    this.onreadystatechange = null;\n    this.readyState = 0;\n    this.response = null;\n    this.responseText = null;\n    this._responseType = 'text';\n    this.responseXML = null;\n    this.status = 0;\n    this.statusText = '';\n    this.upload = {};\n    this.withCredentials = false;\n\n    _requestHeader.set('requestHeader', {\n      'content-type': 'application/x-www-form-urlencoded',\n    });\n  }\n\n  set responseType(type: string) {\n    this._responseType = type;\n  }\n\n  public abort() {\n    const myRequestTask = _requestTask.get('requestTask');\n\n    if (myRequestTask) {\n      myRequestTask.abort();\n    }\n  }\n\n  public getAllResponseHeaders() {\n    const responseHeader = _responseHeader.get('responseHeader');\n\n    return Object.keys(responseHeader)\n      .map((header) => {\n        return `${header}: ${responseHeader[header]}`;\n      })\n      .join('\\n');\n  }\n\n  public getResponseHeader(header) {\n    return _responseHeader.get('responseHeader')[header];\n  }\n\n  public open(method, url /* GET/POST*/, flag) {\n    this._method = method;\n    this._url = url;\n    // _changeReadyState.call(this, XMLHttpRequest.OPENED);\n  }\n\n  public overrideMimeType() {}\n\n  public send($data = '') {\n    // if (this.readyState !== XMLHttpRequest.OPENED) {\n    //   throw new Error(\n    //     \"Failed to execute 'send' on 'XMLHttpRequest': The object's state must be OPENED.\",\n    //   );\n    // } else {\n    //   const url = this._url;\n    //   const header = _requestHeader.get('requestHeader');\n    //   const responseType = this._responseType;\n\n    //   if (contentTypes[responseType]) {\n    //     header['content-type'] = contentTypes[responseType];\n    //   }\n\n    //   delete this.response;\n    //   this.response = null;\n\n    //   const onSuccess = ({ data, status, headers }) => {\n    //     // status = status === undefined ? 200 : status;\n\n    //     // try {\n    //     //   if (\n    //     //     data == null ||\n    //     //     (data instanceof ArrayBuffer && data.byteLength == 0)\n    //     //   ) {\n    //     //     status = 404;\n    //     //   }\n    //     // } catch (e) {}\n\n    //     // this.status = status;\n    //     // if (headers) {\n    //     //   _responseHeader.set('responseHeader', headers);\n    //     // }\n    //     // _triggerEvent.call(this, 'loadstart');\n    //     // // _changeReadyState.call(this, XMLHttpRequest.HEADERS_RECEIVED);\n    //     // // _changeReadyState.call(this, XMLHttpRequest.LOADING);\n\n    //     // this.response = data;\n\n    //     // if (data instanceof ArrayBuffer) {\n    //     //   // TODO temporary solution, fix native gc error.\n    //     //   this.response = data.slice(0);\n    //     //   Object.defineProperty(this, 'responseText', {\n    //     //     enumerable: true,\n    //     //     configurable: true,\n    //     //     get() {\n    //     //       throw new Error(\n    //     //         'InvalidStateError : responseType is ' + this._responseType,\n    //     //       );\n    //     //     },\n    //     //   });\n    //     // } else {\n    //     //   this.responseText = data;\n    //     // }\n    //     // _changeReadyState.call(this, XMLHttpRequest.DONE);\n    //     // _triggerEvent.call(this, 'load');\n    //     // _triggerEvent.call(this, 'loadend');\n    //   };\n\n    //   const onFail = (e) => {\n    //     const errMsg = e.message || e.errorMessage;\n    //     // TODO 规范错误\n    //     if (!errMsg) {\n    //       return;\n    //     }\n    //     if (errMsg.indexOf('abort') !== -1) {\n    //       _triggerEvent.call(this, 'abort', {\n    //         message: errMsg + this._url,\n    //       });\n    //     } else {\n    //       _triggerEvent.call(this, 'error', {\n    //         message: errMsg + this._url,\n    //       });\n    //     }\n    //     _triggerEvent.call(this, 'loadend');\n    //   };\n\n    //   const requestTask = my.request({\n    //     $data,\n    //     url,\n    //     method: this._method,\n    //     timeout: this.timeout ? this.timeout : 30000,\n    //     headers: header,\n    //     dataType: responseType,\n    //     success: onSuccess,\n    //     fail: onFail,\n    //   });\n    //   _requestTask.set('requestTask', requestTask);\n    // }\n  }\n\n  public setRequestHeader(header, value) {\n    const myHeader = _requestHeader.get('requestHeader');\n\n    myHeader[header] = value;\n    _requestHeader.set('requestHeader', myHeader);\n  }\n\n  public addEventListener(type, listener) {\n    if (typeof listener !== 'function') {\n      return;\n    }\n\n    this['on' + type] = (event: any = {}) => {\n      event.target = event.target || this;\n      listener.call(this, event);\n    };\n  }\n\n  public removeEventListener(type, listener) {\n    if (this['on' + type] === listener) {\n      this['on' + type] = null;\n    }\n  }\n}\n\n// TODO 没法模拟 HEADERS_RECEIVED 和 LOADING 两个状态\n$XMLHttpRequest.UNSEND = 0;\n$XMLHttpRequest.OPENED = 1;\n$XMLHttpRequest.HEADERS_RECEIVED = 2;\n$XMLHttpRequest.LOADING = 3;\n$XMLHttpRequest.DONE = 4;\n"]},"metadata":{},"sourceType":"module"}