{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport Point from '../geo/point';\nimport merge from 'lodash/merge';\nimport { bezier, clamp, now } from '../util';\nvar defaultInertiaOptions = {\n  linearity: 0.3,\n  easing: bezier(0, 0, 0.3, 1)\n};\nvar defaultPanInertiaOptions = merge({\n  deceleration: 2500,\n  maxSpeed: 1400\n}, defaultInertiaOptions);\nvar defaultZoomInertiaOptions = merge({\n  deceleration: 20,\n  maxSpeed: 1400\n}, defaultInertiaOptions);\nvar defaultBearingInertiaOptions = merge({\n  deceleration: 1000,\n  maxSpeed: 360\n}, defaultInertiaOptions);\nvar defaultPitchInertiaOptions = merge({\n  deceleration: 1000,\n  maxSpeed: 90\n}, defaultInertiaOptions);\n\nvar HandlerInertia = function () {\n  function HandlerInertia(map) {\n    _classCallCheck(this, HandlerInertia);\n\n    _defineProperty(this, \"map\", void 0);\n\n    _defineProperty(this, \"inertiaBuffer\", void 0);\n\n    this.map = map;\n    this.clear();\n  }\n\n  _createClass(HandlerInertia, [{\n    key: \"clear\",\n    value: function clear() {\n      this.inertiaBuffer = [];\n    }\n  }, {\n    key: \"record\",\n    value: function record(settings) {\n      this.drainInertiaBuffer();\n      this.inertiaBuffer.push({\n        time: now(),\n        settings: settings\n      });\n    }\n  }, {\n    key: \"drainInertiaBuffer\",\n    value: function drainInertiaBuffer() {\n      var inertia = this.inertiaBuffer;\n      var nowTime = now();\n      var cutoff = 160;\n\n      while (inertia.length > 0 && nowTime - inertia[0].time > cutoff) {\n        inertia.shift();\n      }\n    }\n  }, {\n    key: \"onMoveEnd\",\n    value: function onMoveEnd(panInertiaOptions) {\n      this.drainInertiaBuffer();\n\n      if (this.inertiaBuffer.length < 2) {\n        return;\n      }\n\n      var deltas = {\n        zoom: 0,\n        bearing: 0,\n        pitch: 0,\n        pan: new Point(0, 0),\n        pinchAround: undefined,\n        around: undefined\n      };\n\n      var _iterator = _createForOfIteratorHelper(this.inertiaBuffer),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var settings = _step.value.settings;\n          deltas.zoom += settings.zoomDelta || 0;\n          deltas.bearing += settings.bearingDelta || 0;\n          deltas.pitch += settings.pitchDelta || 0;\n\n          if (settings.panDelta) {\n            deltas.pan._add(settings.panDelta);\n          }\n\n          if (settings.around) {\n            deltas.around = settings.around;\n          }\n\n          if (settings.pinchAround) {\n            deltas.pinchAround = settings.pinchAround;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var lastEntry = this.inertiaBuffer[this.inertiaBuffer.length - 1];\n      var duration = lastEntry.time - this.inertiaBuffer[0].time;\n      var easeOptions = {};\n\n      if (deltas.pan.mag()) {\n        var result = calculateEasing(deltas.pan.mag(), duration, merge({}, defaultPanInertiaOptions, panInertiaOptions || {}));\n        easeOptions.offset = deltas.pan.mult(result.amount / deltas.pan.mag());\n        easeOptions.center = this.map.transform.center;\n        extendDuration(easeOptions, result);\n      }\n\n      if (deltas.zoom) {\n        var _result = calculateEasing(deltas.zoom, duration, defaultZoomInertiaOptions);\n\n        easeOptions.zoom = this.map.transform.zoom + _result.amount;\n        extendDuration(easeOptions, _result);\n      }\n\n      if (deltas.bearing) {\n        var _result2 = calculateEasing(deltas.bearing, duration, defaultBearingInertiaOptions);\n\n        easeOptions.bearing = this.map.transform.bearing + clamp(_result2.amount, -179, 179);\n        extendDuration(easeOptions, _result2);\n      }\n\n      if (deltas.pitch) {\n        var _result3 = calculateEasing(deltas.pitch, duration, defaultPitchInertiaOptions);\n\n        easeOptions.pitch = this.map.transform.pitch + _result3.amount;\n        extendDuration(easeOptions, _result3);\n      }\n\n      if (easeOptions.zoom || easeOptions.bearing) {\n        var last = deltas.pinchAround === undefined ? deltas.around : deltas.pinchAround;\n        easeOptions.around = last ? this.map.unproject(last) : this.map.getCenter();\n      }\n\n      this.clear();\n      return merge(easeOptions, {\n        noMoveStart: true\n      });\n    }\n  }]);\n\n  return HandlerInertia;\n}();\n\nexport { HandlerInertia as default };\n\nfunction extendDuration(easeOptions, result) {\n  if (!easeOptions.duration || easeOptions.duration < result.duration) {\n    easeOptions.duration = result.duration;\n    easeOptions.easing = result.easing;\n  }\n}\n\nfunction calculateEasing(amount, inertiaDuration, inertiaOptions) {\n  var maxSpeed = inertiaOptions.maxSpeed,\n      linearity = inertiaOptions.linearity,\n      deceleration = inertiaOptions.deceleration;\n  var speed = clamp(amount * linearity / (inertiaDuration / 1000), -maxSpeed, maxSpeed);\n  var duration = Math.abs(speed) / (deceleration * linearity);\n  return {\n    easing: inertiaOptions.easing,\n    duration: duration * 1000,\n    amount: speed * (duration / 2)\n  };\n}","map":{"version":3,"sources":["../../src/handler/handler_inertia.ts"],"names":["defaultInertiaOptions","linearity","easing","bezier","defaultPanInertiaOptions","merge","deceleration","maxSpeed","defaultZoomInertiaOptions","defaultBearingInertiaOptions","defaultPitchInertiaOptions","HandlerInertia","time","now","settings","inertia","nowTime","cutoff","deltas","zoom","bearing","pitch","pan","pinchAround","around","undefined","lastEntry","duration","easeOptions","result","calculateEasing","panInertiaOptions","extendDuration","clamp","last","noMoveStart","inertiaOptions","speed","amount","inertiaDuration","Math"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport Point from '../geo/point';\n\n// tslint:disable-next-line:no-submodule-imports\nimport merge from 'lodash/merge';\nimport { EarthMap } from '../earthmap';\nimport { Map } from '../map';\nimport { bezier, clamp, now } from '../util';\nimport { IDragPanOptions } from './shim/drag_pan';\n\nconst defaultInertiaOptions = {\n  linearity: 0.3,\n  easing: bezier(0, 0, 0.3, 1),\n};\n\nconst defaultPanInertiaOptions = merge(\n  {\n    deceleration: 2500,\n    maxSpeed: 1400,\n  },\n  defaultInertiaOptions,\n);\n\nconst defaultZoomInertiaOptions = merge(\n  {\n    deceleration: 20,\n    maxSpeed: 1400,\n  },\n  defaultInertiaOptions,\n);\n\nconst defaultBearingInertiaOptions = merge(\n  {\n    deceleration: 1000,\n    maxSpeed: 360,\n  },\n  defaultInertiaOptions,\n);\n\nconst defaultPitchInertiaOptions = merge(\n  {\n    deceleration: 1000,\n    maxSpeed: 90,\n  },\n  defaultInertiaOptions,\n);\n\nexport interface IInertiaOptions {\n  linearity: number;\n  easing: (t: number) => number;\n  deceleration: number;\n  maxSpeed: number;\n}\n\nexport type InputEvent = MouseEvent | TouchEvent | KeyboardEvent | WheelEvent;\n\nexport default class HandlerInertia {\n  private map: Map | EarthMap;\n  private inertiaBuffer: Array<{\n    time: number;\n    settings: { [key: string]: any };\n  }>;\n\n  constructor(map: Map | EarthMap) {\n    this.map = map;\n    this.clear();\n  }\n\n  public clear() {\n    this.inertiaBuffer = [];\n  }\n\n  public record(settings: any) {\n    this.drainInertiaBuffer();\n    this.inertiaBuffer.push({ time: now(), settings });\n  }\n\n  public drainInertiaBuffer() {\n    const inertia = this.inertiaBuffer;\n    const nowTime = now();\n    const cutoff = 160; // msec\n\n    while (inertia.length > 0 && nowTime - inertia[0].time > cutoff) {\n      inertia.shift();\n    }\n  }\n\n  public onMoveEnd(panInertiaOptions?: IDragPanOptions) {\n    this.drainInertiaBuffer();\n    if (this.inertiaBuffer.length < 2) {\n      return;\n    }\n\n    const deltas = {\n      zoom: 0,\n      bearing: 0,\n      pitch: 0,\n      pan: new Point(0, 0),\n      pinchAround: undefined,\n      around: undefined,\n    };\n\n    for (const { settings } of this.inertiaBuffer) {\n      deltas.zoom += settings.zoomDelta || 0;\n      deltas.bearing += settings.bearingDelta || 0;\n      deltas.pitch += settings.pitchDelta || 0;\n      if (settings.panDelta) {\n        deltas.pan._add(settings.panDelta);\n      }\n      if (settings.around) {\n        deltas.around = settings.around;\n      }\n      if (settings.pinchAround) {\n        deltas.pinchAround = settings.pinchAround;\n      }\n    }\n\n    const lastEntry = this.inertiaBuffer[this.inertiaBuffer.length - 1];\n    const duration = lastEntry.time - this.inertiaBuffer[0].time;\n\n    const easeOptions: { [key: string]: any } = {};\n\n    if (deltas.pan.mag()) {\n      const result = calculateEasing(\n        deltas.pan.mag(),\n        duration,\n        merge({}, defaultPanInertiaOptions, panInertiaOptions || {}),\n      );\n      easeOptions.offset = deltas.pan.mult(result.amount / deltas.pan.mag());\n      easeOptions.center = this.map.transform.center;\n      extendDuration(easeOptions, result);\n    }\n\n    if (deltas.zoom) {\n      const result = calculateEasing(\n        deltas.zoom,\n        duration,\n        defaultZoomInertiaOptions,\n      );\n      easeOptions.zoom = this.map.transform.zoom + result.amount;\n      extendDuration(easeOptions, result);\n    }\n\n    if (deltas.bearing) {\n      const result = calculateEasing(\n        deltas.bearing,\n        duration,\n        defaultBearingInertiaOptions,\n      );\n      easeOptions.bearing =\n        this.map.transform.bearing + clamp(result.amount, -179, 179);\n      extendDuration(easeOptions, result);\n    }\n\n    if (deltas.pitch) {\n      const result = calculateEasing(\n        deltas.pitch,\n        duration,\n        defaultPitchInertiaOptions,\n      );\n      easeOptions.pitch = this.map.transform.pitch + result.amount;\n      extendDuration(easeOptions, result);\n    }\n\n    if (easeOptions.zoom || easeOptions.bearing) {\n      const last =\n        deltas.pinchAround === undefined ? deltas.around : deltas.pinchAround;\n      easeOptions.around = last\n        ? this.map.unproject(last)\n        : this.map.getCenter();\n    }\n\n    this.clear();\n    return merge(easeOptions, {\n      noMoveStart: true,\n    });\n  }\n}\n\n// Unfortunately zoom, bearing, etc can't have different durations and easings so\n// we need to choose one. We use the longest duration and it's corresponding easing.\nfunction extendDuration(easeOptions: any, result: any) {\n  if (!easeOptions.duration || easeOptions.duration < result.duration) {\n    easeOptions.duration = result.duration;\n    easeOptions.easing = result.easing;\n  }\n}\n\nfunction calculateEasing(\n  amount: number,\n  inertiaDuration: number,\n  inertiaOptions: IInertiaOptions,\n) {\n  const { maxSpeed, linearity, deceleration } = inertiaOptions;\n  const speed = clamp(\n    (amount * linearity) / (inertiaDuration / 1000),\n    -maxSpeed,\n    maxSpeed,\n  );\n  const duration = Math.abs(speed) / (deceleration * linearity);\n  return {\n    easing: inertiaOptions.easing,\n    duration: duration * 1000,\n    amount: speed * (duration / 2),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}