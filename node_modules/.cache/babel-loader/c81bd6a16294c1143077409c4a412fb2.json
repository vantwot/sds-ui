{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport ReactDOM from 'react-dom';\nimport { Graph as X6Graph, Dom } from '@antv/x6';\nimport { DisposableCollection, Disposable } from '../../common/disposable';\nimport { Deferred } from '../../common/deferred';\nimport { IGraphOptionProvider } from './config';\nimport { singleton, inject, Syringe } from 'mana-syringe';\nimport { IGraphCommandService } from '../../command';\nimport { IModelService } from '../../model-service/interface';\nimport { IHookService } from '../../hooks';\nimport { getEdgeReactComponent } from '../../command-contributions/components/context';\nimport { XFLOW_DEFAULT_EDGE } from '../../constants';\n/** !!! 所有需要使用Graph相关信息的地方, 都统一使用IGraphProvider来获取 */\n\nexport const IGraphProvider = Symbol('IGraphProvider');\nexport const ICommandServiceProvider = Symbol('ICommandServiceProvider');\nexport const IModelServiceProvider = Symbol('IModelServiceProvider');\nlet GraphManager = class GraphManager {\n  constructor() {\n    /** 处理画布实例的销毁 */\n    this.toDisposce = new DisposableCollection();\n    /** 储存画布实例 */\n\n    this.graphMap = new Map();\n    /** 获取X6 Graph 实例 */\n\n    this.getGraph = graphId => __awaiter(this, void 0, void 0, function* () {\n      let graphDefer = this.graphMap.get(graphId);\n\n      if (!graphDefer) {\n        graphDefer = new Deferred();\n        this.graphMap.set(graphId, graphDefer);\n        const options = yield this.optionProvider.getOptions();\n        /** 获取hooks实例： hooks方便其他组件可以修改注册graphOpions/events */\n\n        const hooks = this.hookService.hookProvider();\n        /** 执行hooks：获取graphOptions */\n\n        const mergedOptions = yield hooks.graphOptions.call(options.x6Options);\n        const {\n          graphContainer,\n          edgeRender,\n          nodeRender,\n          edgeTypeParser\n        } = options;\n        /** 执行hooks：获取edge label render */\n\n        const edgeRenderMap = yield hooks.reactEdgeLabelRender.call(edgeRender);\n        /** 执行hooks：更新nodeRender */\n\n        yield hooks.reactNodeRender.call(nodeRender);\n        const {\n          clientHeight,\n          clientWidth\n        } = graphContainer;\n        const commandService = yield this.commandServiceProvider.getCommandService();\n        const modelService = yield this.modelServiceProvider.getModelService();\n        /** 实例化 X6 Graph */\n\n        const graph = new X6Graph(Object.assign(Object.assign({\n          container: graphContainer,\n          width: clientWidth,\n          height: clientHeight\n        }, mergedOptions), {\n          /** X6提供了边渲染的钩子, 可以在这里设置边上需要渲染的React内容 */\n          onEdgeLabelRendered: args => {\n            const {\n              edge,\n              container\n            } = args;\n            this.renderEdgeReactLabel({\n              edge,\n              container,\n              edgeRenderMap,\n              edgeTypeParser,\n              modelService,\n              commandService\n            });\n          }\n        }));\n        /** 执行hooks：绑定事件执行api */\n\n        yield hooks.afterGraphInit.call({\n          graph,\n          commandService,\n          modelService\n        });\n        graphDefer.resolve(graph);\n        graph.on('node:moved', _ref => {\n          let {\n            node\n          } = _ref;\n          const nodeData = node.getData();\n          const position = node.position();\n          node.setData(Object.assign(Object.assign({}, nodeData), {\n            x: position === null || position === void 0 ? void 0 : position.x,\n            y: position === null || position === void 0 ? void 0 : position.y\n          }));\n        });\n        graph.on('node:resized', _ref2 => {\n          let {\n            node\n          } = _ref2;\n          const nodeData = node.getData();\n          const size = node.size();\n          node.setData(Object.assign(Object.assign({}, nodeData), {\n            width: size === null || size === void 0 ? void 0 : size.width,\n            height: size === null || size === void 0 ? void 0 : size.height\n          }));\n        });\n        this.toDisposce.push(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n          yield hooks.beforeGraphDestory.call({\n            graph,\n            commandService,\n            modelService\n          });\n          this.graphMap.delete(graphId);\n          graph.dispose();\n        })));\n      }\n\n      return graphDefer.promise;\n    });\n\n    this.renderEdgeReactLabel = args => __awaiter(this, void 0, void 0, function* () {\n      const {\n        container,\n        edgeTypeParser,\n        edge,\n        edgeRenderMap,\n        commandService,\n        modelService\n      } = args;\n      const renderKey = edgeTypeParser(edge === null || edge === void 0 ? void 0 : edge.data) || XFLOW_DEFAULT_EDGE;\n      const reactComponent = edgeRenderMap.get(renderKey);\n\n      if (!reactComponent) {\n        return;\n      }\n\n      if (edge && (edge === null || edge === void 0 ? void 0 : edge.data) && reactComponent) {\n        const content = this.edgeAppendForeignObject(edge, container);\n        const WrappedReactComponent = getEdgeReactComponent(reactComponent, commandService, modelService)(edge);\n        ReactDOM.render(WrappedReactComponent, content);\n      }\n    });\n  }\n  /** 实现在连线上渲染React节点 */\n\n\n  edgeAppendForeignObject(x6Edge, container) {\n    const fo = Dom.createSvgElement('foreignObject');\n    const body = Dom.createElementNS('body', Dom.ns.xhtml);\n    const content = Dom.createElementNS('div', Dom.ns.xhtml);\n    const edgeData = x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data;\n    const foWdith = (edgeData === null || edgeData === void 0 ? void 0 : edgeData.edgeContentWidth) || 100;\n    const foHeight = (edgeData === null || edgeData === void 0 ? void 0 : edgeData.edgeContentHeigt) || 30;\n    fo.setAttribute('width', `${foWdith}`);\n    fo.setAttribute('height', `${foHeight}`);\n    fo.setAttribute('x', `${-1.0 * foWdith / 2}`);\n    fo.setAttribute('y', `${-1.0 * foHeight / 2}`);\n    body.setAttribute('xhtmls', Dom.ns.xhtml);\n    body.style.width = '100%';\n    body.style.height = '100%';\n    body.style.padding = '0';\n    body.style.margin = '0';\n    body.style.background = 'unset';\n    body.style.overflow = 'visible';\n    body.className = 'xflow-edge-label-body';\n    content.style.width = '100%';\n    content.style.height = '100%';\n    body.appendChild(content);\n    fo.appendChild(body);\n    container.appendChild(fo);\n    return content;\n  }\n\n  dispose() {\n    this.toDisposce.dispose();\n  }\n\n};\n\n__decorate([inject(IGraphOptionProvider), __metadata(\"design:type\", Object)], GraphManager.prototype, \"optionProvider\", void 0);\n\n__decorate([inject(IHookService), __metadata(\"design:type\", Object)], GraphManager.prototype, \"hookService\", void 0);\n\n__decorate([inject(ICommandServiceProvider), __metadata(\"design:type\", Object)], GraphManager.prototype, \"commandServiceProvider\", void 0);\n\n__decorate([inject(IModelServiceProvider), __metadata(\"design:type\", Object)], GraphManager.prototype, \"modelServiceProvider\", void 0);\n\nGraphManager = __decorate([singleton()], GraphManager);\nexport { GraphManager };\nexport const registerGraphModule = register => {\n  /** 注册GraphManager */\n  register(GraphManager);\n  register(IGraphProvider, {\n    lifecycle: Syringe.Lifecycle.singleton,\n    useDynamic: context => {\n      return {\n        getGraphInstance: () => __awaiter(void 0, void 0, void 0, function* () {\n          const graphManager = context.container.get(GraphManager);\n          const graphOptionProvider = context.container.get(IGraphOptionProvider);\n          const graphConfig = yield graphOptionProvider === null || graphOptionProvider === void 0 ? void 0 : graphOptionProvider.getOptions();\n          const x6Graph = yield graphManager === null || graphManager === void 0 ? void 0 : graphManager.getGraph(graphConfig.graphId);\n          return x6Graph;\n        }),\n        getGraphOptions: () => __awaiter(void 0, void 0, void 0, function* () {\n          const graphOptionProvider = context.container.get(IGraphOptionProvider);\n          return graphOptionProvider === null || graphOptionProvider === void 0 ? void 0 : graphOptionProvider.getOptions();\n        })\n      };\n    }\n  });\n  register(ICommandServiceProvider, {\n    lifecycle: Syringe.Lifecycle.singleton,\n    useDynamic: context => {\n      return {\n        getCommandService: () => __awaiter(void 0, void 0, void 0, function* () {\n          const commandService = context.container.get(IGraphCommandService);\n          return commandService;\n        })\n      };\n    }\n  });\n  register(IModelServiceProvider, {\n    lifecycle: Syringe.Lifecycle.singleton,\n    useDynamic: context => {\n      return {\n        getModelService: () => __awaiter(void 0, void 0, void 0, function* () {\n          const modelService = context.container.get(IModelService);\n          return modelService;\n        })\n      };\n    }\n  });\n};","map":{"version":3,"sources":["../../../src/xflow-main/graph/graph-provider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport ReactDOM from 'react-dom';\nimport { Graph as X6Graph, Dom } from '@antv/x6';\nimport { DisposableCollection, Disposable } from '../../common/disposable';\nimport { Deferred } from '../../common/deferred';\nimport { IGraphOptionProvider } from './config';\nimport { singleton, inject, Syringe } from 'mana-syringe';\nimport { IGraphCommandService } from '../../command';\nimport { IModelService } from '../../model-service/interface';\nimport { IHookService } from '../../hooks';\nimport { getEdgeReactComponent } from '../../command-contributions/components/context';\nimport { XFLOW_DEFAULT_EDGE } from '../../constants';\n/** !!! 所有需要使用Graph相关信息的地方, 都统一使用IGraphProvider来获取 */\nexport const IGraphProvider = Symbol('IGraphProvider');\nexport const ICommandServiceProvider = Symbol('ICommandServiceProvider');\nexport const IModelServiceProvider = Symbol('IModelServiceProvider');\nlet GraphManager = class GraphManager {\n    constructor() {\n        /** 处理画布实例的销毁 */\n        this.toDisposce = new DisposableCollection();\n        /** 储存画布实例 */\n        this.graphMap = new Map();\n        /** 获取X6 Graph 实例 */\n        this.getGraph = (graphId) => __awaiter(this, void 0, void 0, function* () {\n            let graphDefer = this.graphMap.get(graphId);\n            if (!graphDefer) {\n                graphDefer = new Deferred();\n                this.graphMap.set(graphId, graphDefer);\n                const options = yield this.optionProvider.getOptions();\n                /** 获取hooks实例： hooks方便其他组件可以修改注册graphOpions/events */\n                const hooks = this.hookService.hookProvider();\n                /** 执行hooks：获取graphOptions */\n                const mergedOptions = yield hooks.graphOptions.call(options.x6Options);\n                const { graphContainer, edgeRender, nodeRender, edgeTypeParser } = options;\n                /** 执行hooks：获取edge label render */\n                const edgeRenderMap = yield hooks.reactEdgeLabelRender.call(edgeRender);\n                /** 执行hooks：更新nodeRender */\n                yield hooks.reactNodeRender.call(nodeRender);\n                const { clientHeight, clientWidth } = graphContainer;\n                const commandService = yield this.commandServiceProvider.getCommandService();\n                const modelService = yield this.modelServiceProvider.getModelService();\n                /** 实例化 X6 Graph */\n                const graph = new X6Graph(Object.assign(Object.assign({ container: graphContainer, width: clientWidth, height: clientHeight }, mergedOptions), { \n                    /** X6提供了边渲染的钩子, 可以在这里设置边上需要渲染的React内容 */\n                    onEdgeLabelRendered: args => {\n                        const { edge, container } = args;\n                        this.renderEdgeReactLabel({\n                            edge,\n                            container,\n                            edgeRenderMap,\n                            edgeTypeParser,\n                            modelService,\n                            commandService,\n                        });\n                    } }));\n                /** 执行hooks：绑定事件执行api */\n                yield hooks.afterGraphInit.call({\n                    graph,\n                    commandService,\n                    modelService,\n                });\n                graphDefer.resolve(graph);\n                graph.on('node:moved', ({ node }) => {\n                    const nodeData = node.getData();\n                    const position = node.position();\n                    node.setData(Object.assign(Object.assign({}, nodeData), { x: position === null || position === void 0 ? void 0 : position.x, y: position === null || position === void 0 ? void 0 : position.y }));\n                });\n                graph.on('node:resized', ({ node }) => {\n                    const nodeData = node.getData();\n                    const size = node.size();\n                    node.setData(Object.assign(Object.assign({}, nodeData), { width: size === null || size === void 0 ? void 0 : size.width, height: size === null || size === void 0 ? void 0 : size.height }));\n                });\n                this.toDisposce.push(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n                    yield hooks.beforeGraphDestory.call({\n                        graph,\n                        commandService,\n                        modelService,\n                    });\n                    this.graphMap.delete(graphId);\n                    graph.dispose();\n                })));\n            }\n            return graphDefer.promise;\n        });\n        this.renderEdgeReactLabel = (args) => __awaiter(this, void 0, void 0, function* () {\n            const { container, edgeTypeParser, edge, edgeRenderMap, commandService, modelService } = args;\n            const renderKey = edgeTypeParser(edge === null || edge === void 0 ? void 0 : edge.data) || XFLOW_DEFAULT_EDGE;\n            const reactComponent = edgeRenderMap.get(renderKey);\n            if (!reactComponent) {\n                return;\n            }\n            if (edge && (edge === null || edge === void 0 ? void 0 : edge.data) && reactComponent) {\n                const content = this.edgeAppendForeignObject(edge, container);\n                const WrappedReactComponent = getEdgeReactComponent(reactComponent, commandService, modelService)(edge);\n                ReactDOM.render(WrappedReactComponent, content);\n            }\n        });\n    }\n    /** 实现在连线上渲染React节点 */\n    edgeAppendForeignObject(x6Edge, container) {\n        const fo = Dom.createSvgElement('foreignObject');\n        const body = Dom.createElementNS('body', Dom.ns.xhtml);\n        const content = Dom.createElementNS('div', Dom.ns.xhtml);\n        const edgeData = x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data;\n        const foWdith = (edgeData === null || edgeData === void 0 ? void 0 : edgeData.edgeContentWidth) || 100;\n        const foHeight = (edgeData === null || edgeData === void 0 ? void 0 : edgeData.edgeContentHeigt) || 30;\n        fo.setAttribute('width', `${foWdith}`);\n        fo.setAttribute('height', `${foHeight}`);\n        fo.setAttribute('x', `${(-1.0 * foWdith) / 2}`);\n        fo.setAttribute('y', `${(-1.0 * foHeight) / 2}`);\n        body.setAttribute('xhtmls', Dom.ns.xhtml);\n        body.style.width = '100%';\n        body.style.height = '100%';\n        body.style.padding = '0';\n        body.style.margin = '0';\n        body.style.background = 'unset';\n        body.style.overflow = 'visible';\n        body.className = 'xflow-edge-label-body';\n        content.style.width = '100%';\n        content.style.height = '100%';\n        body.appendChild(content);\n        fo.appendChild(body);\n        container.appendChild(fo);\n        return content;\n    }\n    dispose() {\n        this.toDisposce.dispose();\n    }\n};\n__decorate([\n    inject(IGraphOptionProvider),\n    __metadata(\"design:type\", Object)\n], GraphManager.prototype, \"optionProvider\", void 0);\n__decorate([\n    inject(IHookService),\n    __metadata(\"design:type\", Object)\n], GraphManager.prototype, \"hookService\", void 0);\n__decorate([\n    inject(ICommandServiceProvider),\n    __metadata(\"design:type\", Object)\n], GraphManager.prototype, \"commandServiceProvider\", void 0);\n__decorate([\n    inject(IModelServiceProvider),\n    __metadata(\"design:type\", Object)\n], GraphManager.prototype, \"modelServiceProvider\", void 0);\nGraphManager = __decorate([\n    singleton()\n], GraphManager);\nexport { GraphManager };\nexport const registerGraphModule = (register) => {\n    /** 注册GraphManager */\n    register(GraphManager);\n    register(IGraphProvider, {\n        lifecycle: Syringe.Lifecycle.singleton,\n        useDynamic: context => {\n            return {\n                getGraphInstance: () => __awaiter(void 0, void 0, void 0, function* () {\n                    const graphManager = context.container.get(GraphManager);\n                    const graphOptionProvider = context.container.get(IGraphOptionProvider);\n                    const graphConfig = yield (graphOptionProvider === null || graphOptionProvider === void 0 ? void 0 : graphOptionProvider.getOptions());\n                    const x6Graph = yield (graphManager === null || graphManager === void 0 ? void 0 : graphManager.getGraph(graphConfig.graphId));\n                    return x6Graph;\n                }),\n                getGraphOptions: () => __awaiter(void 0, void 0, void 0, function* () {\n                    const graphOptionProvider = context.container.get(IGraphOptionProvider);\n                    return graphOptionProvider === null || graphOptionProvider === void 0 ? void 0 : graphOptionProvider.getOptions();\n                }),\n            };\n        },\n    });\n    register(ICommandServiceProvider, {\n        lifecycle: Syringe.Lifecycle.singleton,\n        useDynamic: context => {\n            return {\n                getCommandService: () => __awaiter(void 0, void 0, void 0, function* () {\n                    const commandService = context.container.get(IGraphCommandService);\n                    return commandService;\n                }),\n            };\n        },\n    });\n    register(IModelServiceProvider, {\n        lifecycle: Syringe.Lifecycle.singleton,\n        useDynamic: context => {\n            return {\n                getModelService: () => __awaiter(void 0, void 0, void 0, function* () {\n                    const modelService = context.container.get(IModelService);\n                    return modelService;\n                }),\n            };\n        },\n    });\n};\n//# sourceMappingURL=graph-provider.js.map"]},"metadata":{},"sourceType":"module"}