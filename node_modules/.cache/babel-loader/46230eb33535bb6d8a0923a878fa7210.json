{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar CRSBase = require(\"./crs\");\n\nvar util_1 = require(\"@antv/util\"); // @ts-ignore\n\n\nexports.earth = util_1.mix({}, CRSBase.CRS, {\n  wrapLng: [-180, 180],\n  R: 6371000,\n  distance: function (latlng1, latlng2) {\n    var rad = Math.PI / 180;\n    var lat1 = latlng1.lat * rad;\n    var lat2 = latlng2.lat * rad;\n    var sinDLat = Math.sin((latlng2.lat - latlng1.lat) * rad / 2);\n    var sinDLon = Math.sin((latlng2.lng - latlng1.lng) * rad / 2);\n    var a = sinDLat * sinDLat + Math.cos(lat1) * Math.cos(lat2) * sinDLon * sinDLon;\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return this.R * c;\n  }\n});","map":{"version":3,"sources":["../../../src/geo/crs/earth.ts"],"names":[],"mappings":";;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,IAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA,C,CACA;;;AACa,OAAA,CAAA,KAAA,GAAQ,MAAA,CAAA,GAAA,CAAI,EAAJ,EAAQ,OAAO,CAAC,GAAhB,EAAqB;AACxC,EAAA,OAAO,EAAE,CAAC,CAAC,GAAF,EAAO,GAAP,CAD+B;AAExC,EAAA,CAAC,EAAE,OAFqC;AAGxC,EAAA,QAAQ,EAAR,UAAS,OAAT,EAAyB,OAAzB,EAAuC;AACrC,QAAM,GAAG,GAAG,IAAI,CAAC,EAAL,GAAU,GAAtB;AACA,QAAM,IAAI,GAAG,OAAO,CAAC,GAAR,GAAc,GAA3B;AACA,QAAM,IAAI,GAAG,OAAO,CAAC,GAAR,GAAc,GAA3B;AACA,QAAM,OAAO,GAAG,IAAI,CAAC,GAAL,CAAS,CAAC,OAAO,CAAC,GAAR,GAAc,OAAO,CAAC,GAAvB,IAA8B,GAA9B,GAAoC,CAA7C,CAAhB;AACA,QAAM,OAAO,GAAG,IAAI,CAAC,GAAL,CAAS,CAAC,OAAO,CAAC,GAAR,GAAc,OAAO,CAAC,GAAvB,IAA8B,GAA9B,GAAoC,CAA7C,CAAhB;AACA,QAAM,CAAC,GAAG,OAAO,GAAG,OAAV,GAAoB,IAAI,CAAC,GAAL,CAAS,IAAT,IAAiB,IAAI,CAAC,GAAL,CAAS,IAAT,CAAjB,GAAkC,OAAlC,GAA4C,OAA1E;AACA,QAAM,CAAC,GAAG,IAAI,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,IAAL,CAAU,CAAV,CAAX,EAAyB,IAAI,CAAC,IAAL,CAAU,IAAI,CAAd,CAAzB,CAAd;AACA,WAAO,KAAK,CAAL,GAAS,CAAhB;AACD;AAZuC,CAArB,CAAR","sourceRoot":"","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar CRSBase = require(\"./crs\");\nvar util_1 = require(\"@antv/util\");\n// @ts-ignore\nexports.earth = util_1.mix({}, CRSBase.CRS, {\n    wrapLng: [-180, 180],\n    R: 6371000,\n    distance: function (latlng1, latlng2) {\n        var rad = Math.PI / 180;\n        var lat1 = latlng1.lat * rad;\n        var lat2 = latlng2.lat * rad;\n        var sinDLat = Math.sin((latlng2.lat - latlng1.lat) * rad / 2);\n        var sinDLon = Math.sin((latlng2.lng - latlng1.lng) * rad / 2);\n        var a = sinDLat * sinDLat + Math.cos(lat1) * Math.cos(lat2) * sinDLon * sinDLon;\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        return this.R * c;\n    }\n});\n//# sourceMappingURL=earth.js.map"]},"metadata":{},"sourceType":"script"}