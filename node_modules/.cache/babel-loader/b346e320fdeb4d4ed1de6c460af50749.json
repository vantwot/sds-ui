{"ast":null,"code":"import _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _regeneratorRuntime from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ManaSyringe, ICommandHandler, ICommandContextProvider, delay } from '@antv/xflow-core';\nimport { XFlowDagCommands, GRAPH_STATUS_INFO, EDGE_PROCESSING_CLASSNAME } from '../constants';\nexport var NsGraphStatusCommand;\n\n(function (NsGraphStatusCommand) {\n  var _this = this;\n\n  /** Command: 获取执行状态 */\n  NsGraphStatusCommand.MODEL = GRAPH_STATUS_INFO;\n  /** Command: 用于注册 named factory */\n\n  NsGraphStatusCommand.command = XFlowDagCommands.QUERY_GRAPH_STATUS;\n  /** hookName */\n\n  NsGraphStatusCommand.hookKey = 'queryGraphStatus';\n  /** 状态 类型 */\n\n  var StatusEnum;\n\n  (function (StatusEnum) {\n    StatusEnum[\"SUCCESS\"] = \"success\";\n    StatusEnum[\"PROCESSING\"] = \"processing\";\n    StatusEnum[\"ERROR\"] = \"error\";\n    StatusEnum[\"DEFAULT\"] = \"default\";\n    StatusEnum[\"WARNING\"] = \"warning\";\n  })(StatusEnum = NsGraphStatusCommand.StatusEnum || (NsGraphStatusCommand.StatusEnum = {}));\n  /** 按status 分类  */\n\n\n  NsGraphStatusCommand.initStatusMap = function () {\n    var _ref;\n\n    return _ref = {}, _defineProperty(_ref, NsGraphStatusCommand.StatusEnum.DEFAULT, []), _defineProperty(_ref, NsGraphStatusCommand.StatusEnum.PROCESSING, []), _defineProperty(_ref, NsGraphStatusCommand.StatusEnum.ERROR, []), _defineProperty(_ref, NsGraphStatusCommand.StatusEnum.WARNING, []), _defineProperty(_ref, NsGraphStatusCommand.StatusEnum.SUCCESS, []), _ref;\n  };\n  /** 接口返回 类型 */\n\n\n  NsGraphStatusCommand.groupByStatus = function (data) {\n    var seed = NsGraphStatusCommand.initStatusMap();\n    return Object.entries(data).reduce(function (acc, _ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          nodeId = _ref3[0],\n          value = _ref3[1];\n\n      acc[value.status].push(nodeId);\n      return acc;\n    }, seed);\n  };\n  /** diff status */\n\n\n  NsGraphStatusCommand.statusDiff = function (cur, next) {\n    var items = new Set([].concat(_toConsumableArray(cur), _toConsumableArray(next)));\n    var diff = {\n      current: [],\n      add: [],\n      remove: []\n    };\n    items.forEach(function (item) {\n      if (next.includes(item) && !cur.includes(item)) {\n        diff.add.push(item);\n      }\n\n      if (!next.includes(item) && cur.includes(item)) {\n        diff.remove.push(item);\n      }\n    });\n    return diff;\n  };\n\n  NsGraphStatusCommand.shouldStop = function (info) {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", [StatusEnum.ERROR, StatusEnum.SUCCESS].includes(info.graphStatus));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  };\n})(NsGraphStatusCommand || (NsGraphStatusCommand = {}));\n/** 创建节点命令 */\n\n\nvar QueryGraphStatusCommand = /*#__PURE__*/function () {\n  function QueryGraphStatusCommand() {\n    var _this2 = this;\n\n    _classCallCheck(this, QueryGraphStatusCommand);\n\n    /** 状态缓存 */\n    this.statusInfo = NsGraphStatusCommand.initStatusMap();\n    /** 获取Model */\n\n    this.getStatusModel = function () {\n      return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var ctx, modelService, statusModel;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                ctx = this.contextProvider();\n                modelService = ctx.getModelService();\n                _context2.next = 4;\n                return GRAPH_STATUS_INFO.getModel(modelService);\n\n              case 4:\n                statusModel = _context2.sent;\n                return _context2.abrupt(\"return\", statusModel);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    };\n    /** 更新Model数据 */\n\n\n    this.updateModelValue = function (callback) {\n      return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var statusModel;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.getStatusModel();\n\n              case 2:\n                statusModel = _context3.sent;\n                statusModel.setValue(callback);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n    /** 停止Looping的flag */\n\n\n    this.stopCurrentStatusLooping = function () {\n      return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var statusModel, _yield$statusModel$ge, subscription;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.getStatusModel();\n\n              case 2:\n                statusModel = _context4.sent;\n                _context4.next = 5;\n                return statusModel.getValidValue();\n\n              case 5:\n                _yield$statusModel$ge = _context4.sent;\n                subscription = _yield$statusModel$ge.subscription;\n                subscription.dispose();\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n    /** 设置停止looping的方法 */\n\n\n    this.addStopDispose = function () {\n      return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this3 = this;\n\n        var statusModel, _yield$statusModel$ge2, subscription;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.getStatusModel();\n\n              case 2:\n                statusModel = _context5.sent;\n                _context5.next = 5;\n                return statusModel.getValidValue();\n\n              case 5:\n                _yield$statusModel$ge2 = _context5.sent;\n                subscription = _yield$statusModel$ge2.subscription;\n                subscription.push({\n                  dispose: function dispose() {\n                    /** 重制processing的边的状态 */\n                    _this3.updateEdges(_this3.statusInfo, NsGraphStatusCommand.initStatusMap());\n\n                    _this3.isLooping = false;\n                  }\n                });\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    };\n    /** 更新Graph的数据 */\n\n\n    this.updateGraph = function (curStatusInfo, nextStatusMap, statusMap) {\n      /** 更新节点 */\n      _this2.updateNodes(curStatusInfo, nextStatusMap, statusMap);\n      /** 更新边 */\n\n\n      _this2.updateEdges(curStatusInfo, nextStatusMap);\n    };\n    /** 更新节点数据 */\n\n\n    this.updateNodeData = function (id, data) {\n      var cell = _this2.x6Graph.getCellById(id);\n\n      if (!cell) {\n        return;\n      }\n\n      cell.setData(Object.assign(Object.assign(Object.assign(Object.assign({}, cell.getData()), cell.getSize()), cell.getPosition()), data));\n    };\n    /** 更新连线数据 */\n\n\n    this.updateNodes = function (curStatusInfo, nextStatusMap, statusMap) {\n      Object.keys(curStatusInfo).forEach(function (status) {\n        var nodes = NsGraphStatusCommand.statusDiff(curStatusInfo[status], nextStatusMap[status]);\n        nodes.add.forEach(function (id) {\n          _this2.updateNodeData(id, statusMap[id]);\n        });\n        nodes.remove.forEach(function (id) {\n          _this2.updateNodeData(id, statusMap[id]);\n        });\n      });\n    };\n    /** 更新节点数据 */\n\n\n    this.updateEdges = function (curStatusInfo, nextStatusMap) {\n      var runningNodes = NsGraphStatusCommand.statusDiff(curStatusInfo.processing, nextStatusMap.processing);\n\n      var edges = _this2.x6Graph.getEdges();\n\n      edges.forEach(function (edge) {\n        var _a;\n\n        var view = (_a = _this2.x6Graph) === null || _a === void 0 ? void 0 : _a.findViewByCell(edge.id);\n        var target = edge.getTargetCellId();\n\n        if (!target) {\n          return;\n        }\n\n        var targetNodeId = target.toString();\n\n        if (!view) {\n          return;\n        }\n\n        if (runningNodes.add.includes(targetNodeId)) {\n          /** 新增className */\n          return view.addClass(EDGE_PROCESSING_CLASSNAME);\n        } else if (runningNodes.remove.includes(targetNodeId)) {\n          /** 移除className */\n          return view.removeClass(EDGE_PROCESSING_CLASSNAME);\n        }\n      });\n    };\n    /** 执行Cmd */\n\n\n    this.execute = function () {\n      return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var _this4 = this;\n\n        var ctx, _ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                ctx = this.contextProvider();\n                _ctx$getArgs = ctx.getArgs(), args = _ctx$getArgs.args, runtimeHook = _ctx$getArgs.hooks;\n                hooks = ctx.getHooks(); // 引用\n\n                _context8.next = 5;\n                return ctx.getX6Graph();\n\n              case 5:\n                this.x6Graph = _context8.sent;\n                _context8.next = 8;\n                return hooks.queryGraphStatus.call(args, function (handlerArgs) {\n                  return __awaiter(_this4, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n                    var _this5 = this;\n\n                    var graphStatusService, _handlerArgs$shouldSt, shouldStop, doOnce, loopFunction;\n\n                    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                      while (1) {\n                        switch (_context7.prev = _context7.next) {\n                          case 0:\n                            graphStatusService = handlerArgs.graphStatusService, _handlerArgs$shouldSt = handlerArgs.shouldStop, shouldStop = _handlerArgs$shouldSt === void 0 ? NsGraphStatusCommand.shouldStop : _handlerArgs$shouldSt, doOnce = handlerArgs.doOnce; // 取消已有的循环\n\n                            _context7.next = 3;\n                            return this.stopCurrentStatusLooping();\n\n                          case 3:\n                            // 循环函数\n                            loopFunction = function loopFunction(service) {\n                              var loopInterval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10000;\n                              return __awaiter(_this5, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n                                var data, statusGroupMap, isStop;\n                                return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                                  while (1) {\n                                    switch (_context6.prev = _context6.next) {\n                                      case 0:\n                                        _context6.next = 2;\n                                        return service(handlerArgs);\n\n                                      case 2:\n                                        data = _context6.sent;\n                                        // 更新全局状态\n                                        this.updateModelValue(function (state) {\n                                          Object.entries(data.statusMap).forEach(function (_ref4) {\n                                            var _ref5 = _slicedToArray(_ref4, 2),\n                                                key = _ref5[0],\n                                                value = _ref5[1];\n\n                                            state.statusMap.set(key, value);\n                                          });\n                                          state.graphStatus = data.graphStatus;\n                                        }); // 更新图上状态\n\n                                        // 更新图上状态\n                                        statusGroupMap = NsGraphStatusCommand.groupByStatus(data.statusMap);\n                                        this.updateGraph(this.statusInfo, statusGroupMap, data.statusMap); // 缓存当前状态作为对比数据\n\n                                        // 缓存当前状态作为对比数据\n                                        this.statusInfo = statusGroupMap; // 延迟\n\n                                        _context6.next = 9;\n                                        return delay(loopInterval);\n\n                                      case 9:\n                                        if (this.isLooping) {\n                                          _context6.next = 11;\n                                          break;\n                                        }\n\n                                        return _context6.abrupt(\"return\");\n\n                                      case 11:\n                                        if (!shouldStop) {\n                                          _context6.next = 17;\n                                          break;\n                                        }\n\n                                        _context6.next = 14;\n                                        return shouldStop(data, handlerArgs);\n\n                                      case 14:\n                                        isStop = _context6.sent;\n\n                                        if (!isStop) {\n                                          _context6.next = 17;\n                                          break;\n                                        }\n\n                                        return _context6.abrupt(\"return\");\n\n                                      case 17:\n                                        _context6.next = 19;\n                                        return loopFunction(service, loopInterval);\n\n                                      case 19:\n                                      case \"end\":\n                                        return _context6.stop();\n                                    }\n                                  }\n                                }, _callee6, this);\n                              }));\n                            }; // 从参数更新循环的FLAG\n\n\n                            // 从参数更新循环的FLAG\n                            this.isLooping = handlerArgs.loop === undefined ? true : handlerArgs.loop; // 添加可以停止loop的回调\n\n                            _context7.next = 7;\n                            return this.addStopDispose();\n\n                          case 7:\n                            if (!doOnce) {\n                              _context7.next = 10;\n                              break;\n                            }\n\n                            _context7.next = 10;\n                            return doOnce(handlerArgs);\n\n                          case 10:\n                            loopFunction(graphStatusService, handlerArgs.loopInterval);\n                            return _context7.abrupt(\"return\", {});\n\n                          case 12:\n                          case \"end\":\n                            return _context7.stop();\n                        }\n                      }\n                    }, _callee7, this);\n                  }));\n                }, runtimeHook);\n\n              case 8:\n                result = _context8.sent;\n                ctx.setResult(result);\n                return _context8.abrupt(\"return\", this);\n\n              case 11:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    };\n    /** undo cmd */\n\n\n    this.undo = function () {\n      return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var ctx;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                ctx = this.contextProvider();\n\n                if (this.isUndoable()) {\n                  ctx.undo();\n                }\n\n                return _context9.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n    };\n    /** redo cmd */\n\n\n    this.redo = function () {\n      return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (this.isUndoable()) {\n                  _context10.next = 3;\n                  break;\n                }\n\n                _context10.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context10.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n    };\n  }\n\n  _createClass(QueryGraphStatusCommand, [{\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      var ctx = this.contextProvider();\n      return ctx.isUndoable();\n    }\n  }]);\n\n  return QueryGraphStatusCommand;\n}();\n\n__decorate([ManaSyringe.inject(ICommandContextProvider), __metadata(\"design:type\", Object)], QueryGraphStatusCommand.prototype, \"contextProvider\", void 0);\n\nQueryGraphStatusCommand = __decorate([ManaSyringe.injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphStatusCommand.command.id\n  }\n})], QueryGraphStatusCommand);\nexport { QueryGraphStatusCommand };\nexport var execCmd = function execCmd() {};","map":{"version":3,"sources":["../../../src/canvas-dag-extension/contributions/command.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ManaSyringe, ICommandHandler, ICommandContextProvider, delay } from '@antv/xflow-core';\nimport { XFlowDagCommands, GRAPH_STATUS_INFO, EDGE_PROCESSING_CLASSNAME } from '../constants';\nexport var NsGraphStatusCommand;\n(function (NsGraphStatusCommand) {\n    /** Command: 获取执行状态 */\n    NsGraphStatusCommand.MODEL = GRAPH_STATUS_INFO;\n    /** Command: 用于注册 named factory */\n    NsGraphStatusCommand.command = XFlowDagCommands.QUERY_GRAPH_STATUS;\n    /** hookName */\n    NsGraphStatusCommand.hookKey = 'queryGraphStatus';\n    /** 状态 类型 */\n    let StatusEnum;\n    (function (StatusEnum) {\n        StatusEnum[\"SUCCESS\"] = \"success\";\n        StatusEnum[\"PROCESSING\"] = \"processing\";\n        StatusEnum[\"ERROR\"] = \"error\";\n        StatusEnum[\"DEFAULT\"] = \"default\";\n        StatusEnum[\"WARNING\"] = \"warning\";\n    })(StatusEnum = NsGraphStatusCommand.StatusEnum || (NsGraphStatusCommand.StatusEnum = {}));\n    /** 按status 分类  */\n    NsGraphStatusCommand.initStatusMap = () => ({\n        [NsGraphStatusCommand.StatusEnum.DEFAULT]: [],\n        [NsGraphStatusCommand.StatusEnum.PROCESSING]: [],\n        [NsGraphStatusCommand.StatusEnum.ERROR]: [],\n        [NsGraphStatusCommand.StatusEnum.WARNING]: [],\n        [NsGraphStatusCommand.StatusEnum.SUCCESS]: [],\n    });\n    /** 接口返回 类型 */\n    NsGraphStatusCommand.groupByStatus = (data) => {\n        const seed = NsGraphStatusCommand.initStatusMap();\n        return Object.entries(data).reduce((acc, [nodeId, value]) => {\n            acc[value.status].push(nodeId);\n            return acc;\n        }, seed);\n    };\n    /** diff status */\n    NsGraphStatusCommand.statusDiff = (cur, next) => {\n        const items = new Set([...cur, ...next]);\n        const diff = { current: [], add: [], remove: [] };\n        items.forEach(item => {\n            if (next.includes(item) && !cur.includes(item)) {\n                diff.add.push(item);\n            }\n            if (!next.includes(item) && cur.includes(item)) {\n                diff.remove.push(item);\n            }\n        });\n        return diff;\n    };\n    NsGraphStatusCommand.shouldStop = (info) => __awaiter(this, void 0, void 0, function* () {\n        return [StatusEnum.ERROR, StatusEnum.SUCCESS].includes(info.graphStatus);\n    });\n})(NsGraphStatusCommand || (NsGraphStatusCommand = {}));\n/** 创建节点命令 */\nlet QueryGraphStatusCommand = class QueryGraphStatusCommand {\n    constructor() {\n        /** 状态缓存 */\n        this.statusInfo = NsGraphStatusCommand.initStatusMap();\n        /** 获取Model */\n        this.getStatusModel = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            const modelService = ctx.getModelService();\n            const statusModel = yield GRAPH_STATUS_INFO.getModel(modelService);\n            return statusModel;\n        });\n        /** 更新Model数据 */\n        this.updateModelValue = (callback) => __awaiter(this, void 0, void 0, function* () {\n            const statusModel = yield this.getStatusModel();\n            statusModel.setValue(callback);\n        });\n        /** 停止Looping的flag */\n        this.stopCurrentStatusLooping = () => __awaiter(this, void 0, void 0, function* () {\n            const statusModel = yield this.getStatusModel();\n            const { subscription } = yield statusModel.getValidValue();\n            subscription.dispose();\n        });\n        /** 设置停止looping的方法 */\n        this.addStopDispose = () => __awaiter(this, void 0, void 0, function* () {\n            const statusModel = yield this.getStatusModel();\n            const { subscription } = yield statusModel.getValidValue();\n            subscription.push({\n                dispose: () => {\n                    /** 重制processing的边的状态 */\n                    this.updateEdges(this.statusInfo, NsGraphStatusCommand.initStatusMap());\n                    this.isLooping = false;\n                },\n            });\n        });\n        /** 更新Graph的数据 */\n        this.updateGraph = (curStatusInfo, nextStatusMap, statusMap) => {\n            /** 更新节点 */\n            this.updateNodes(curStatusInfo, nextStatusMap, statusMap);\n            /** 更新边 */\n            this.updateEdges(curStatusInfo, nextStatusMap);\n        };\n        /** 更新节点数据 */\n        this.updateNodeData = (id, data) => {\n            const cell = this.x6Graph.getCellById(id);\n            if (!cell) {\n                return;\n            }\n            cell.setData(Object.assign(Object.assign(Object.assign(Object.assign({}, cell.getData()), cell.getSize()), cell.getPosition()), data));\n        };\n        /** 更新连线数据 */\n        this.updateNodes = (curStatusInfo, nextStatusMap, statusMap) => {\n            Object.keys(curStatusInfo).forEach(status => {\n                const nodes = NsGraphStatusCommand.statusDiff(curStatusInfo[status], nextStatusMap[status]);\n                nodes.add.forEach((id) => {\n                    this.updateNodeData(id, statusMap[id]);\n                });\n                nodes.remove.forEach((id) => {\n                    this.updateNodeData(id, statusMap[id]);\n                });\n            });\n        };\n        /** 更新节点数据 */\n        this.updateEdges = (curStatusInfo, nextStatusMap) => {\n            const runningNodes = NsGraphStatusCommand.statusDiff(curStatusInfo.processing, nextStatusMap.processing);\n            const edges = this.x6Graph.getEdges();\n            edges.forEach(edge => {\n                var _a;\n                const view = (_a = this.x6Graph) === null || _a === void 0 ? void 0 : _a.findViewByCell(edge.id);\n                const target = edge.getTargetCellId();\n                if (!target) {\n                    return;\n                }\n                const targetNodeId = target.toString();\n                if (!view) {\n                    return;\n                }\n                if (runningNodes.add.includes(targetNodeId)) {\n                    /** 新增className */\n                    return view.addClass(EDGE_PROCESSING_CLASSNAME);\n                }\n                else if (runningNodes.remove.includes(targetNodeId)) {\n                    /** 移除className */\n                    return view.removeClass(EDGE_PROCESSING_CLASSNAME);\n                }\n            });\n        };\n        /** 执行Cmd */\n        this.execute = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            const { args, hooks: runtimeHook } = ctx.getArgs();\n            const hooks = ctx.getHooks();\n            // 引用\n            this.x6Graph = yield ctx.getX6Graph();\n            const result = yield hooks.queryGraphStatus.call(args, (handlerArgs) => __awaiter(this, void 0, void 0, function* () {\n                const { graphStatusService, shouldStop = NsGraphStatusCommand.shouldStop, doOnce, } = handlerArgs;\n                // 取消已有的循环\n                yield this.stopCurrentStatusLooping();\n                // 循环函数\n                const loopFunction = (service, loopInterval = 10000) => __awaiter(this, void 0, void 0, function* () {\n                    // 查询服务端状态\n                    const data = yield service(handlerArgs);\n                    // 更新全局状态\n                    this.updateModelValue(state => {\n                        Object.entries(data.statusMap).forEach(([key, value]) => {\n                            state.statusMap.set(key, value);\n                        });\n                        state.graphStatus = data.graphStatus;\n                    });\n                    // 更新图上状态\n                    const statusGroupMap = NsGraphStatusCommand.groupByStatus(data.statusMap);\n                    this.updateGraph(this.statusInfo, statusGroupMap, data.statusMap);\n                    // 缓存当前状态作为对比数据\n                    this.statusInfo = statusGroupMap;\n                    // 延迟\n                    yield delay(loopInterval);\n                    // 判断是否循环\n                    if (!this.isLooping) {\n                        return;\n                    }\n                    // 判断是否循环\n                    if (shouldStop) {\n                        const isStop = yield shouldStop(data, handlerArgs);\n                        if (isStop) {\n                            return;\n                        }\n                    }\n                    // 执行下次调用\n                    yield loopFunction(service, loopInterval);\n                });\n                // 从参数更新循环的FLAG\n                this.isLooping = handlerArgs.loop === undefined ? true : handlerArgs.loop;\n                // 添加可以停止loop的回调\n                yield this.addStopDispose();\n                // 执行\n                if (doOnce) {\n                    yield doOnce(handlerArgs);\n                }\n                loopFunction(graphStatusService, handlerArgs.loopInterval);\n                return {};\n            }), runtimeHook);\n            ctx.setResult(result);\n            return this;\n        });\n        /** undo cmd */\n        this.undo = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            if (this.isUndoable()) {\n                ctx.undo();\n            }\n            return this;\n        });\n        /** redo cmd */\n        this.redo = () => __awaiter(this, void 0, void 0, function* () {\n            if (!this.isUndoable()) {\n                yield this.execute();\n            }\n            return this;\n        });\n    }\n    isUndoable() {\n        const ctx = this.contextProvider();\n        return ctx.isUndoable();\n    }\n};\n__decorate([\n    ManaSyringe.inject(ICommandContextProvider),\n    __metadata(\"design:type\", Object)\n], QueryGraphStatusCommand.prototype, \"contextProvider\", void 0);\nQueryGraphStatusCommand = __decorate([\n    ManaSyringe.injectable({\n        token: { token: ICommandHandler, named: NsGraphStatusCommand.command.id },\n    })\n], QueryGraphStatusCommand);\nexport { QueryGraphStatusCommand };\nexport const execCmd = () => { };\n//# sourceMappingURL=command.js.map"]},"metadata":{},"sourceType":"module"}