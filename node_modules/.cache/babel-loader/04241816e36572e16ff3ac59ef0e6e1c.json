{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { getNodeReactComponent } from '../components/context';\nimport { XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { XFLOW_DEFAULT_NODE } from '../../constants';\nexport var NsAddNode;\n\n(function (NsAddNode) {\n  /** Command: 用于注册named factory */\n  NsAddNode.command = XFlowNodeCommands.ADD_NODE;\n  /** hookName */\n\n  NsAddNode.hookKey = 'addNode';\n})(NsAddNode || (NsAddNode = {}));\n\nlet AddNodeCommand =\n/** 创建节点命令 */\nclass AddNodeCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      const result = yield hooks.addNode.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          createNodeService,\n          cellFactory,\n          commandService\n        } = handlerArgs;\n        const graph = yield ctx.getX6Graph();\n        const node = createNodeService ? yield createNodeService(handlerArgs) : handlerArgs.nodeConfig;\n        const nodeConfig = yield this.processNodeConfig(node);\n        let x6NodeCell;\n\n        if (cellFactory) {\n          /** 使用参数中的工厂方法 */\n          const cell = yield cellFactory(nodeConfig, this);\n          x6NodeCell = graph.addNode(cell);\n        } else {\n          x6NodeCell = graph.addNode(nodeConfig);\n        }\n        /** add undo: delete node */\n\n\n        ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n          const nodeData = Object.assign({\n            id: x6NodeCell.id\n          }, x6NodeCell.getData());\n          commandService.executeCommand(XFlowNodeCommands.DEL_NODE.id, {\n            nodeConfig: nodeData\n          });\n        })));\n        return {\n          nodeConfig: nodeConfig,\n          nodeCell: x6NodeCell\n        };\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n\n    this.processNodeConfig = nodeConfig => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      /**\n       * 1. react shape node 逻辑\n       * 2. X6不会处理data数据, 仅透传。可以通过x6Node?.getData()方法获取这份数据\n       */\n\n      nodeConfig.data = Object.assign({}, nodeConfig);\n      /** 非 react shape */\n\n      if (nodeConfig.shape) {\n        return nodeConfig;\n      }\n      /** react shape 使用react-portal-view提高性能 */\n\n\n      if (!nodeConfig.view) {\n        const graphConfig = yield ctx.getGraphConfig();\n        nodeConfig.view = graphConfig.graphId;\n      }\n      /** 获取 react component */\n\n\n      if (!nodeConfig.component) {\n        const reactComponent = yield this.getNodeReactComponent(nodeConfig);\n        const commands = ctx.getCommands();\n        const modelService = ctx.getModelService();\n        nodeConfig.shape = 'react-shape';\n        nodeConfig.component = getNodeReactComponent(reactComponent, commands, modelService);\n      }\n\n      return nodeConfig;\n    });\n\n    this.getNodeReactComponent = nodeConfig => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const hooks = ctx.getHooks();\n      /** 获取Graph Config中用户预设的节点渲染需要的React组件 */\n\n      const graphConfig = yield ctx.getGraphConfig();\n      /** 通过hooks获取更多的组件 */\n\n      const renderMap = yield hooks.reactNodeRender.call(graphConfig.nodeRender);\n      /** 获取renderKey，没有renderKey时使用默认Key */\n\n      const renderKey = graphConfig.nodeTypeParser(nodeConfig) || XFLOW_DEFAULT_NODE;\n      /** 获取组件 */\n\n      const reactComponent = renderMap.get(renderKey);\n\n      if (!reactComponent) {\n        console.error('react node component is missing:', graphConfig.nodeRender, renderKey, reactComponent);\n      }\n\n      return reactComponent;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], AddNodeCommand.prototype, \"contextProvider\", void 0);\n\nAddNodeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsAddNode.command.id\n  }\n})\n/** 创建节点命令 */\n], AddNodeCommand);\nexport { AddNodeCommand };","map":{"version":3,"sources":["../../../src/command-contributions/node/node-add.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { getNodeReactComponent } from '../components/context';\nimport { XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { XFLOW_DEFAULT_NODE } from '../../constants';\nexport var NsAddNode;\n(function (NsAddNode) {\n    /** Command: 用于注册named factory */\n    NsAddNode.command = XFlowNodeCommands.ADD_NODE;\n    /** hookName */\n    NsAddNode.hookKey = 'addNode';\n})(NsAddNode || (NsAddNode = {}));\nlet AddNodeCommand = \n/** 创建节点命令 */\nclass AddNodeCommand {\n    constructor() {\n        /** 执行Cmd */\n        this.execute = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            const { args, hooks: runtimeHook } = ctx.getArgs();\n            const hooks = ctx.getHooks();\n            const result = yield hooks.addNode.call(args, (handlerArgs) => __awaiter(this, void 0, void 0, function* () {\n                const { createNodeService, cellFactory, commandService } = handlerArgs;\n                const graph = yield ctx.getX6Graph();\n                const node = createNodeService\n                    ? yield createNodeService(handlerArgs)\n                    : handlerArgs.nodeConfig;\n                const nodeConfig = yield this.processNodeConfig(node);\n                let x6NodeCell;\n                if (cellFactory) {\n                    /** 使用参数中的工厂方法 */\n                    const cell = yield cellFactory(nodeConfig, this);\n                    x6NodeCell = graph.addNode(cell);\n                }\n                else {\n                    x6NodeCell = graph.addNode(nodeConfig);\n                }\n                /** add undo: delete node */\n                ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n                    const nodeData = Object.assign({ id: x6NodeCell.id }, x6NodeCell.getData());\n                    commandService.executeCommand(XFlowNodeCommands.DEL_NODE.id, {\n                        nodeConfig: nodeData,\n                    });\n                })));\n                return { nodeConfig: nodeConfig, nodeCell: x6NodeCell };\n            }), runtimeHook);\n            ctx.setResult(result);\n            return this;\n        });\n        this.processNodeConfig = (nodeConfig) => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            /**\n             * 1. react shape node 逻辑\n             * 2. X6不会处理data数据, 仅透传。可以通过x6Node?.getData()方法获取这份数据\n             */\n            nodeConfig.data = Object.assign({}, nodeConfig);\n            /** 非 react shape */\n            if (nodeConfig.shape) {\n                return nodeConfig;\n            }\n            /** react shape 使用react-portal-view提高性能 */\n            if (!nodeConfig.view) {\n                const graphConfig = yield ctx.getGraphConfig();\n                nodeConfig.view = graphConfig.graphId;\n            }\n            /** 获取 react component */\n            if (!nodeConfig.component) {\n                const reactComponent = yield this.getNodeReactComponent(nodeConfig);\n                const commands = ctx.getCommands();\n                const modelService = ctx.getModelService();\n                nodeConfig.shape = 'react-shape';\n                nodeConfig.component = getNodeReactComponent(reactComponent, commands, modelService);\n            }\n            return nodeConfig;\n        });\n        this.getNodeReactComponent = (nodeConfig) => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            const hooks = ctx.getHooks();\n            /** 获取Graph Config中用户预设的节点渲染需要的React组件 */\n            const graphConfig = yield ctx.getGraphConfig();\n            /** 通过hooks获取更多的组件 */\n            const renderMap = yield hooks.reactNodeRender.call(graphConfig.nodeRender);\n            /** 获取renderKey，没有renderKey时使用默认Key */\n            const renderKey = graphConfig.nodeTypeParser(nodeConfig) || XFLOW_DEFAULT_NODE;\n            /** 获取组件 */\n            const reactComponent = renderMap.get(renderKey);\n            if (!reactComponent) {\n                console.error('react node component is missing:', graphConfig.nodeRender, renderKey, reactComponent);\n            }\n            return reactComponent;\n        });\n        /** undo cmd */\n        this.undo = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            if (this.isUndoable()) {\n                ctx.undo();\n            }\n            return this;\n        });\n        /** redo cmd */\n        this.redo = () => __awaiter(this, void 0, void 0, function* () {\n            if (!this.isUndoable()) {\n                yield this.execute();\n            }\n            return this;\n        });\n    }\n    isUndoable() {\n        const ctx = this.contextProvider();\n        return ctx.isUndoable();\n    }\n};\n__decorate([\n    inject(ICommandContextProvider),\n    __metadata(\"design:type\", Object)\n], AddNodeCommand.prototype, \"contextProvider\", void 0);\nAddNodeCommand = __decorate([\n    injectable({\n        token: { token: ICommandHandler, named: NsAddNode.command.id },\n    })\n    /** 创建节点命令 */\n], AddNodeCommand);\nexport { AddNodeCommand };\n//# sourceMappingURL=node-add.js.map"]},"metadata":{},"sourceType":"module"}