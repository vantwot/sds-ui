{"ast":null,"code":"import React from 'react';\nimport { FunctionExt } from '@antv/x6';\nexport class Wrap extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.scheduledAnimationFrame = false;\n\n    this.throttleUpdateFunc = () => {\n      if (this.scheduledAnimationFrame) {\n        return;\n      }\n\n      this.scheduledAnimationFrame = true;\n      window.requestAnimationFrame(() => {\n        this.setState(state => {\n          this.scheduledAnimationFrame = false;\n          return {\n            tick: state.tick + 1\n          };\n        });\n      });\n    };\n\n    this.onChange = e => {\n      if (Wrap.throttleChangeTypes.includes(e.key)) {\n        this.throttleUpdateFunc();\n        return;\n      } // eslint-disable-next-line react/no-access-state-in-setstate\n\n\n      this.setState({\n        tick: this.state.tick + 1\n      });\n    };\n\n    this.state = {\n      tick: 0\n    };\n  }\n\n  componentDidMount() {\n    this.props.node.on('change:*', this.onChange);\n  }\n\n  componentWillUnmount() {\n    this.props.node.off('change:*', this.onChange);\n  }\n\n  clone(elem) {\n    const {\n      node\n    } = this.props;\n    return typeof elem.type === 'string' ? React.cloneElement(elem) : React.cloneElement(elem, {\n      node\n    });\n  }\n\n  render() {\n    const {\n      graph,\n      node,\n      component\n    } = this.props;\n\n    if (React.isValidElement(component)) {\n      return this.clone(component);\n    }\n\n    if (typeof component === 'function') {\n      // Calling the component function on every change of the node.\n      const ret = FunctionExt.call(component, graph, node);\n\n      if (React.isValidElement(ret)) {\n        return this.clone(ret);\n      }\n    }\n\n    return component;\n  }\n\n}\nWrap.throttleChangeTypes = ['position', 'size'];","map":{"version":3,"sources":["../src/wrap.ts"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAgB,WAAhB,QAAmC,UAAnC;AAIA,OAAM,MAAO,IAAP,SAAoB,KAAK,CAAC,aAA1B,CAA+D;AAKnE,EAAA,WAAA,CAAY,KAAZ,EAA6B;AAC3B,UAAM,KAAN;AAHM,SAAA,uBAAA,GAA0B,KAA1B;;AAOR,SAAA,kBAAA,GAAqB,MAAK;AACxB,UAAI,KAAK,uBAAT,EAAkC;AAChC;AACD;;AACD,WAAK,uBAAL,GAA+B,IAA/B;AACA,MAAA,MAAM,CAAC,qBAAP,CAA6B,MAAK;AAChC,aAAK,QAAL,CAAe,KAAD,IAAU;AACtB,eAAK,uBAAL,GAA+B,KAA/B;AACA,iBAAO;AAAE,YAAA,IAAI,EAAE,KAAK,CAAC,IAAN,GAAa;AAArB,WAAP;AACD,SAHD;AAID,OALD;AAMD,KAXD;;AAaA,SAAA,QAAA,GAAY,CAAD,IAAW;AACpB,UAAI,IAAI,CAAC,mBAAL,CAAyB,QAAzB,CAAkC,CAAC,CAAC,GAApC,CAAJ,EAA8C;AAC5C,aAAK,kBAAL;AACA;AACD,OAJmB,CAKpB;;;AACA,WAAK,QAAL,CAAc;AAAE,QAAA,IAAI,EAAE,KAAK,KAAL,CAAW,IAAX,GAAkB;AAA1B,OAAd;AACD,KAPD;;AAhBE,SAAK,KAAL,GAAa;AAAE,MAAA,IAAI,EAAE;AAAR,KAAb;AACD;;AAwBD,EAAA,iBAAiB,GAAA;AACf,SAAK,KAAL,CAAW,IAAX,CAAgB,EAAhB,CAAmB,UAAnB,EAA+B,KAAK,QAApC;AACD;;AAED,EAAA,oBAAoB,GAAA;AAClB,SAAK,KAAL,CAAW,IAAX,CAAgB,GAAhB,CAAoB,UAApB,EAAgC,KAAK,QAArC;AACD;;AAED,EAAA,KAAK,CAAC,IAAD,EAAyB;AAC5B,UAAM;AAAE,MAAA;AAAF,QAAW,KAAK,KAAtB;AACA,WAAO,OAAO,IAAI,CAAC,IAAZ,KAAqB,QAArB,GACH,KAAK,CAAC,YAAN,CAAmB,IAAnB,CADG,GAEH,KAAK,CAAC,YAAN,CAAmB,IAAnB,EAAyB;AAAE,MAAA;AAAF,KAAzB,CAFJ;AAGD;;AAED,EAAA,MAAM,GAAA;AACJ,UAAM;AAAE,MAAA,KAAF;AAAS,MAAA,IAAT;AAAe,MAAA;AAAf,QAA6B,KAAK,KAAxC;;AACA,QAAI,KAAK,CAAC,cAAN,CAAqB,SAArB,CAAJ,EAAqC;AACnC,aAAO,KAAK,KAAL,CAAW,SAAX,CAAP;AACD;;AAED,QAAI,OAAO,SAAP,KAAqB,UAAzB,EAAqC;AACnC;AACA,YAAM,GAAG,GAAG,WAAW,CAAC,IAAZ,CAAiB,SAAjB,EAA4B,KAA5B,EAAmC,IAAnC,CAAZ;;AACA,UAAI,KAAK,CAAC,cAAN,CAAqB,GAArB,CAAJ,EAA+B;AAC7B,eAAO,KAAK,KAAL,CAAW,GAAX,CAAP;AACD;AACF;;AAED,WAAO,SAAP;AACD;;AA9DkE;AAC5D,IAAA,CAAA,mBAAA,GAAsB,CAAC,UAAD,EAAa,MAAb,CAAtB","sourceRoot":"","sourcesContent":["import React from 'react';\nimport { FunctionExt } from '@antv/x6';\nexport class Wrap extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.scheduledAnimationFrame = false;\n        this.throttleUpdateFunc = () => {\n            if (this.scheduledAnimationFrame) {\n                return;\n            }\n            this.scheduledAnimationFrame = true;\n            window.requestAnimationFrame(() => {\n                this.setState((state) => {\n                    this.scheduledAnimationFrame = false;\n                    return { tick: state.tick + 1 };\n                });\n            });\n        };\n        this.onChange = (e) => {\n            if (Wrap.throttleChangeTypes.includes(e.key)) {\n                this.throttleUpdateFunc();\n                return;\n            }\n            // eslint-disable-next-line react/no-access-state-in-setstate\n            this.setState({ tick: this.state.tick + 1 });\n        };\n        this.state = { tick: 0 };\n    }\n    componentDidMount() {\n        this.props.node.on('change:*', this.onChange);\n    }\n    componentWillUnmount() {\n        this.props.node.off('change:*', this.onChange);\n    }\n    clone(elem) {\n        const { node } = this.props;\n        return typeof elem.type === 'string'\n            ? React.cloneElement(elem)\n            : React.cloneElement(elem, { node });\n    }\n    render() {\n        const { graph, node, component } = this.props;\n        if (React.isValidElement(component)) {\n            return this.clone(component);\n        }\n        if (typeof component === 'function') {\n            // Calling the component function on every change of the node.\n            const ret = FunctionExt.call(component, graph, node);\n            if (React.isValidElement(ret)) {\n                return this.clone(ret);\n            }\n        }\n        return component;\n    }\n}\nWrap.throttleChangeTypes = ['position', 'size'];\n//# sourceMappingURL=wrap.js.map"]},"metadata":{},"sourceType":"module"}