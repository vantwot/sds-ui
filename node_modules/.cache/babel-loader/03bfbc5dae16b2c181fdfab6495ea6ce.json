{"ast":null,"code":"import { Base } from './base';\nexport class KnobManager extends Base {\n  constructor() {\n    super(...arguments);\n    this.widgets = new Map();\n  }\n\n  get isSelectionEnabled() {\n    return this.options.selecting.enabled === true;\n  }\n\n  init() {\n    this.startListening();\n  }\n\n  startListening() {\n    this.graph.on('node:mouseup', this.onNodeMouseUp, this);\n    this.graph.on('node:selected', this.onNodeSelected, this);\n    this.graph.on('node:unselected', this.onNodeUnSelected, this);\n  }\n\n  stopListening() {\n    this.graph.off('node:mouseup', this.onNodeMouseUp, this);\n    this.graph.off('node:selected', this.onNodeSelected, this);\n    this.graph.off('node:unselected', this.onNodeUnSelected, this);\n  }\n\n  onNodeMouseUp(_ref) {\n    let {\n      node\n    } = _ref;\n\n    if (!this.isSelectionEnabled) {\n      const widgets = this.graph.hook.createKnob(node, {\n        clearAll: true\n      });\n\n      if (widgets) {\n        this.widgets.set(node, widgets);\n      }\n    }\n  }\n\n  onNodeSelected(_ref2) {\n    let {\n      node\n    } = _ref2;\n\n    if (this.isSelectionEnabled) {\n      const widgets = this.graph.hook.createKnob(node, {\n        clearAll: false\n      });\n\n      if (widgets) {\n        this.widgets.set(node, widgets);\n      }\n    }\n  }\n\n  onNodeUnSelected(_ref3) {\n    let {\n      node\n    } = _ref3;\n\n    if (this.isSelectionEnabled) {\n      const widgets = this.widgets.get(node);\n\n      if (widgets) {\n        widgets.forEach(widget => widget.dispose());\n      }\n\n      this.widgets.delete(node);\n    }\n  }\n\n}","map":{"version":3,"sources":["../../src/graph/knob.ts"],"names":[],"mappings":"AAEA,SAAS,IAAT,QAAqB,QAArB;AAGA,OAAM,MAAO,WAAP,SAA2B,IAA3B,CAA+B;AAArC,EAAA,WAAA,GAAA;;AACY,SAAA,OAAA,GAA6B,IAAI,GAAJ,EAA7B;AAiDX;;AA/CiC,MAAlB,kBAAkB,GAAA;AAC9B,WAAO,KAAK,OAAL,CAAa,SAAb,CAAuB,OAAvB,KAAmC,IAA1C;AACD;;AAES,EAAA,IAAI,GAAA;AACZ,SAAK,cAAL;AACD;;AAES,EAAA,cAAc,GAAA;AACtB,SAAK,KAAL,CAAW,EAAX,CAAc,cAAd,EAA8B,KAAK,aAAnC,EAAkD,IAAlD;AACA,SAAK,KAAL,CAAW,EAAX,CAAc,eAAd,EAA+B,KAAK,cAApC,EAAoD,IAApD;AACA,SAAK,KAAL,CAAW,EAAX,CAAc,iBAAd,EAAiC,KAAK,gBAAtC,EAAwD,IAAxD;AACD;;AAES,EAAA,aAAa,GAAA;AACrB,SAAK,KAAL,CAAW,GAAX,CAAe,cAAf,EAA+B,KAAK,aAApC,EAAmD,IAAnD;AACA,SAAK,KAAL,CAAW,GAAX,CAAe,eAAf,EAAgC,KAAK,cAArC,EAAqD,IAArD;AACA,SAAK,KAAL,CAAW,GAAX,CAAe,iBAAf,EAAkC,KAAK,gBAAvC,EAAyD,IAAzD;AACD;;AAES,EAAA,aAAa,OAAoC;AAAA,QAAnC;AAAE,MAAA;AAAF,KAAmC;;AACzD,QAAI,CAAC,KAAK,kBAAV,EAA8B;AAC5B,YAAM,OAAO,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,UAAhB,CAA2B,IAA3B,EAAiC;AAAE,QAAA,QAAQ,EAAE;AAAZ,OAAjC,CAAhB;;AACA,UAAI,OAAJ,EAAa;AACX,aAAK,OAAL,CAAa,GAAb,CAAiB,IAAjB,EAAuB,OAAvB;AACD;AACF;AACF;;AAES,EAAA,cAAc,QAAqC;AAAA,QAApC;AAAE,MAAA;AAAF,KAAoC;;AAC3D,QAAI,KAAK,kBAAT,EAA6B;AAC3B,YAAM,OAAO,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,UAAhB,CAA2B,IAA3B,EAAiC;AAAE,QAAA,QAAQ,EAAE;AAAZ,OAAjC,CAAhB;;AACA,UAAI,OAAJ,EAAa;AACX,aAAK,OAAL,CAAa,GAAb,CAAiB,IAAjB,EAAuB,OAAvB;AACD;AACF;AACF;;AAES,EAAA,gBAAgB,QAAuC;AAAA,QAAtC;AAAE,MAAA;AAAF,KAAsC;;AAC/D,QAAI,KAAK,kBAAT,EAA6B;AAC3B,YAAM,OAAO,GAAG,KAAK,OAAL,CAAa,GAAb,CAAiB,IAAjB,CAAhB;;AACA,UAAI,OAAJ,EAAa;AACX,QAAA,OAAO,CAAC,OAAR,CAAiB,MAAD,IAAY,MAAM,CAAC,OAAP,EAA5B;AACD;;AACD,WAAK,OAAL,CAAa,MAAb,CAAoB,IAApB;AACD;AACF;;AAjDkC","sourceRoot":"","sourcesContent":["import { Base } from './base';\nexport class KnobManager extends Base {\n    constructor() {\n        super(...arguments);\n        this.widgets = new Map();\n    }\n    get isSelectionEnabled() {\n        return this.options.selecting.enabled === true;\n    }\n    init() {\n        this.startListening();\n    }\n    startListening() {\n        this.graph.on('node:mouseup', this.onNodeMouseUp, this);\n        this.graph.on('node:selected', this.onNodeSelected, this);\n        this.graph.on('node:unselected', this.onNodeUnSelected, this);\n    }\n    stopListening() {\n        this.graph.off('node:mouseup', this.onNodeMouseUp, this);\n        this.graph.off('node:selected', this.onNodeSelected, this);\n        this.graph.off('node:unselected', this.onNodeUnSelected, this);\n    }\n    onNodeMouseUp({ node }) {\n        if (!this.isSelectionEnabled) {\n            const widgets = this.graph.hook.createKnob(node, { clearAll: true });\n            if (widgets) {\n                this.widgets.set(node, widgets);\n            }\n        }\n    }\n    onNodeSelected({ node }) {\n        if (this.isSelectionEnabled) {\n            const widgets = this.graph.hook.createKnob(node, { clearAll: false });\n            if (widgets) {\n                this.widgets.set(node, widgets);\n            }\n        }\n    }\n    onNodeUnSelected({ node }) {\n        if (this.isSelectionEnabled) {\n            const widgets = this.widgets.get(node);\n            if (widgets) {\n                widgets.forEach((widget) => widget.dispose());\n            }\n            this.widgets.delete(node);\n        }\n    }\n}\n//# sourceMappingURL=knob.js.map"]},"metadata":{},"sourceType":"module"}