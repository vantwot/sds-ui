{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { ModifierKey } from '../types';\nimport { Base } from './base';\nexport class SelectionManager extends Base {\n  constructor() {\n    super(...arguments);\n    this.movedMap = new WeakMap();\n    this.unselectMap = new WeakMap();\n  }\n\n  get widgetOptions() {\n    return this.options.selecting;\n  }\n\n  get rubberbandDisabled() {\n    return this.widgetOptions.enabled !== true || this.widgetOptions.rubberband !== true;\n  }\n\n  get disabled() {\n    return this.widgetOptions.enabled !== true;\n  }\n\n  get length() {\n    return this.widget.length;\n  }\n\n  get cells() {\n    return this.widget.cells;\n  }\n\n  init() {\n    this.widget = this.graph.hook.createSelection();\n    this.startListening();\n  }\n\n  startListening() {\n    this.graph.on('blank:mousedown', this.onBlankMouseDown, this);\n    this.graph.on('blank:click', this.onBlankClick, this);\n    this.graph.on('cell:mousemove', this.onCellMouseMove, this);\n    this.graph.on('cell:mouseup', this.onCellMouseUp, this);\n    this.widget.on('box:mousedown', this.onBoxMouseDown, this);\n  }\n\n  stopListening() {\n    this.graph.off('blank:mousedown', this.onBlankMouseDown, this);\n    this.graph.off('blank:click', this.onBlankClick, this);\n    this.graph.off('cell:mousemove', this.onCellMouseMove, this);\n    this.graph.off('cell:mouseup', this.onCellMouseUp, this);\n    this.widget.off('box:mousedown', this.onBoxMouseDown, this);\n  }\n\n  onBlankMouseDown(_ref) {\n    let {\n      e\n    } = _ref;\n\n    if (this.allowRubberband(e, true) || this.allowRubberband(e) && !this.graph.scroller.allowPanning(e, true) && !this.graph.panning.allowPanning(e, true)) {\n      this.startRubberband(e);\n    }\n  }\n\n  onBlankClick() {\n    this.clean();\n  }\n\n  allowRubberband(e, strict) {\n    return !this.rubberbandDisabled && ModifierKey.isMatch(e, this.widgetOptions.modifiers, strict) && this.graph.hook.allowRubberband(e);\n  }\n\n  onCellMouseMove(_ref2) {\n    let {\n      cell\n    } = _ref2;\n    this.movedMap.set(cell, true);\n  }\n\n  onCellMouseUp(_ref3) {\n    let {\n      e,\n      cell\n    } = _ref3;\n    const options = this.widgetOptions;\n    let disabled = this.disabled;\n\n    if (!disabled && this.movedMap.has(cell)) {\n      disabled = options.selectCellOnMoved === false;\n\n      if (!disabled) {\n        disabled = options.selectNodeOnMoved === false && cell.isNode();\n      }\n\n      if (!disabled) {\n        disabled = options.selectEdgeOnMoved === false && cell.isEdge();\n      }\n    }\n\n    if (!disabled) {\n      if (options.multiple === false || !e.ctrlKey && !e.metaKey) {\n        this.reset(cell);\n      } else if (this.unselectMap.has(cell)) {\n        this.unselectMap.delete(cell);\n      } else if (this.isSelected(cell)) {\n        this.unselect(cell);\n      } else {\n        this.select(cell);\n      }\n    }\n\n    this.movedMap.delete(cell);\n  }\n\n  onBoxMouseDown(_ref4) {\n    let {\n      e,\n      cell\n    } = _ref4;\n\n    if (!this.disabled) {\n      if (this.widgetOptions.multiple !== false && (e.ctrlKey || e.metaKey)) {\n        this.unselect(cell);\n        this.unselectMap.set(cell, true);\n      }\n    }\n  }\n\n  isEmpty() {\n    return this.length <= 0;\n  }\n\n  isSelected(cell) {\n    return this.widget.isSelected(cell);\n  }\n\n  getCells(cells) {\n    return (Array.isArray(cells) ? cells : [cells]).map(cell => typeof cell === 'string' ? this.graph.getCellById(cell) : cell).filter(cell => cell != null);\n  }\n\n  select(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const selected = this.getCells(cells);\n\n    if (selected.length) {\n      if (this.isMultiple()) {\n        this.widget.select(selected, options);\n      } else {\n        this.reset(selected.slice(0, 1), options);\n      }\n    }\n\n    return this;\n  }\n\n  unselect(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.widget.unselect(this.getCells(cells), options);\n    return this;\n  }\n\n  reset(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.widget.reset(cells ? this.getCells(cells) : [], options);\n    return this;\n  }\n\n  clean() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.widget.clean(options);\n    return this;\n  }\n\n  enable() {\n    if (this.disabled) {\n      this.widgetOptions.enabled = true;\n    }\n\n    return this;\n  }\n\n  disable() {\n    if (!this.disabled) {\n      this.widgetOptions.enabled = false;\n    }\n\n    return this;\n  }\n\n  startRubberband(e) {\n    if (!this.rubberbandDisabled) {\n      this.widget.startSelecting(e);\n    }\n\n    return this;\n  }\n\n  enableRubberband() {\n    if (this.rubberbandDisabled) {\n      this.widgetOptions.rubberband = true; // if (\n      //   ModifierKey.equals(\n      //     this.graph.options.scroller.modifiers,\n      //     this.graph.options.selecting.modifiers,\n      //   )\n      // ) {\n      //   this.graph.scroller.disablePanning()\n      // }\n    }\n\n    return this;\n  }\n\n  disableRubberband() {\n    if (!this.rubberbandDisabled) {\n      this.widgetOptions.rubberband = false;\n    }\n\n    return this;\n  }\n\n  isMultiple() {\n    return this.widgetOptions.multiple !== false;\n  }\n\n  enableMultiple() {\n    this.widgetOptions.multiple = true;\n    return this;\n  }\n\n  disableMultiple() {\n    this.widgetOptions.multiple = false;\n    return this;\n  }\n\n  setModifiers(modifiers) {\n    this.widgetOptions.modifiers = modifiers;\n    return this;\n  }\n\n  setContent(content) {\n    this.widget.setContent(content);\n    return this;\n  }\n\n  setFilter(filter) {\n    this.widget.setFilter(filter);\n    return this;\n  }\n\n  dispose() {\n    this.stopListening();\n    this.widget.dispose();\n  }\n\n}\n\n__decorate([Base.dispose()], SelectionManager.prototype, \"dispose\", null);","map":{"version":3,"sources":["../../src/graph/selection.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ModifierKey } from '../types';\nimport { Base } from './base';\nexport class SelectionManager extends Base {\n    constructor() {\n        super(...arguments);\n        this.movedMap = new WeakMap();\n        this.unselectMap = new WeakMap();\n    }\n    get widgetOptions() {\n        return this.options.selecting;\n    }\n    get rubberbandDisabled() {\n        return (this.widgetOptions.enabled !== true ||\n            this.widgetOptions.rubberband !== true);\n    }\n    get disabled() {\n        return this.widgetOptions.enabled !== true;\n    }\n    get length() {\n        return this.widget.length;\n    }\n    get cells() {\n        return this.widget.cells;\n    }\n    init() {\n        this.widget = this.graph.hook.createSelection();\n        this.startListening();\n    }\n    startListening() {\n        this.graph.on('blank:mousedown', this.onBlankMouseDown, this);\n        this.graph.on('blank:click', this.onBlankClick, this);\n        this.graph.on('cell:mousemove', this.onCellMouseMove, this);\n        this.graph.on('cell:mouseup', this.onCellMouseUp, this);\n        this.widget.on('box:mousedown', this.onBoxMouseDown, this);\n    }\n    stopListening() {\n        this.graph.off('blank:mousedown', this.onBlankMouseDown, this);\n        this.graph.off('blank:click', this.onBlankClick, this);\n        this.graph.off('cell:mousemove', this.onCellMouseMove, this);\n        this.graph.off('cell:mouseup', this.onCellMouseUp, this);\n        this.widget.off('box:mousedown', this.onBoxMouseDown, this);\n    }\n    onBlankMouseDown({ e }) {\n        if (this.allowRubberband(e, true) ||\n            (this.allowRubberband(e) &&\n                !this.graph.scroller.allowPanning(e, true) &&\n                !this.graph.panning.allowPanning(e, true))) {\n            this.startRubberband(e);\n        }\n    }\n    onBlankClick() {\n        this.clean();\n    }\n    allowRubberband(e, strict) {\n        return (!this.rubberbandDisabled &&\n            ModifierKey.isMatch(e, this.widgetOptions.modifiers, strict) &&\n            this.graph.hook.allowRubberband(e));\n    }\n    onCellMouseMove({ cell }) {\n        this.movedMap.set(cell, true);\n    }\n    onCellMouseUp({ e, cell }) {\n        const options = this.widgetOptions;\n        let disabled = this.disabled;\n        if (!disabled && this.movedMap.has(cell)) {\n            disabled = options.selectCellOnMoved === false;\n            if (!disabled) {\n                disabled = options.selectNodeOnMoved === false && cell.isNode();\n            }\n            if (!disabled) {\n                disabled = options.selectEdgeOnMoved === false && cell.isEdge();\n            }\n        }\n        if (!disabled) {\n            if (options.multiple === false || (!e.ctrlKey && !e.metaKey)) {\n                this.reset(cell);\n            }\n            else if (this.unselectMap.has(cell)) {\n                this.unselectMap.delete(cell);\n            }\n            else if (this.isSelected(cell)) {\n                this.unselect(cell);\n            }\n            else {\n                this.select(cell);\n            }\n        }\n        this.movedMap.delete(cell);\n    }\n    onBoxMouseDown({ e, cell }) {\n        if (!this.disabled) {\n            if (this.widgetOptions.multiple !== false && (e.ctrlKey || e.metaKey)) {\n                this.unselect(cell);\n                this.unselectMap.set(cell, true);\n            }\n        }\n    }\n    isEmpty() {\n        return this.length <= 0;\n    }\n    isSelected(cell) {\n        return this.widget.isSelected(cell);\n    }\n    getCells(cells) {\n        return (Array.isArray(cells) ? cells : [cells])\n            .map((cell) => typeof cell === 'string' ? this.graph.getCellById(cell) : cell)\n            .filter((cell) => cell != null);\n    }\n    select(cells, options = {}) {\n        const selected = this.getCells(cells);\n        if (selected.length) {\n            if (this.isMultiple()) {\n                this.widget.select(selected, options);\n            }\n            else {\n                this.reset(selected.slice(0, 1), options);\n            }\n        }\n        return this;\n    }\n    unselect(cells, options = {}) {\n        this.widget.unselect(this.getCells(cells), options);\n        return this;\n    }\n    reset(cells, options = {}) {\n        this.widget.reset(cells ? this.getCells(cells) : [], options);\n        return this;\n    }\n    clean(options = {}) {\n        this.widget.clean(options);\n        return this;\n    }\n    enable() {\n        if (this.disabled) {\n            this.widgetOptions.enabled = true;\n        }\n        return this;\n    }\n    disable() {\n        if (!this.disabled) {\n            this.widgetOptions.enabled = false;\n        }\n        return this;\n    }\n    startRubberband(e) {\n        if (!this.rubberbandDisabled) {\n            this.widget.startSelecting(e);\n        }\n        return this;\n    }\n    enableRubberband() {\n        if (this.rubberbandDisabled) {\n            this.widgetOptions.rubberband = true;\n            // if (\n            //   ModifierKey.equals(\n            //     this.graph.options.scroller.modifiers,\n            //     this.graph.options.selecting.modifiers,\n            //   )\n            // ) {\n            //   this.graph.scroller.disablePanning()\n            // }\n        }\n        return this;\n    }\n    disableRubberband() {\n        if (!this.rubberbandDisabled) {\n            this.widgetOptions.rubberband = false;\n        }\n        return this;\n    }\n    isMultiple() {\n        return this.widgetOptions.multiple !== false;\n    }\n    enableMultiple() {\n        this.widgetOptions.multiple = true;\n        return this;\n    }\n    disableMultiple() {\n        this.widgetOptions.multiple = false;\n        return this;\n    }\n    setModifiers(modifiers) {\n        this.widgetOptions.modifiers = modifiers;\n        return this;\n    }\n    setContent(content) {\n        this.widget.setContent(content);\n        return this;\n    }\n    setFilter(filter) {\n        this.widget.setFilter(filter);\n        return this;\n    }\n    dispose() {\n        this.stopListening();\n        this.widget.dispose();\n    }\n}\n__decorate([\n    Base.dispose()\n], SelectionManager.prototype, \"dispose\", null);\n//# sourceMappingURL=selection.js.map"]},"metadata":{},"sourceType":"module"}