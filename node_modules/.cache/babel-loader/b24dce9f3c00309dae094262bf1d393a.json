{"ast":null,"code":"import React, { useContext } from 'react';\nimport classnames from 'classnames';\nimport { Toolbar } from '@antv/x6-react-components';\nimport AppContext from '../../../context';\nimport { uuidv4 } from '@antv/xflow-core';\nimport { ToolbarItem } from './toolbar-item';\nimport useFullscreen from '../../../hooks/useFullscreen';\nimport { getContainer } from '../../../util';\nexport var ToolbarGroup = function ToolbarGroup(props) {\n  var _a;\n\n  var group = props.group,\n      layout = props.layout;\n  var flowchartId = useContext(AppContext).flowchartId;\n\n  var _b = useFullscreen(getContainer(flowchartId)),\n      fullscreen = _b[0],\n      toggleFullscreen = _b[1];\n\n  var groupKey = React.useMemo(function () {\n    return group.name || uuidv4();\n  }, [group.name]);\n  var _c = group.items,\n      items = _c === void 0 ? [] : _c;\n\n  if (items.length === 0) {\n    return null;\n  }\n\n  var clz = classnames((_a = {}, _a['xflow-toolbar-group'] = true, _a));\n  items = items.filter(function (item) {\n    return item.id !== 'fullscreen';\n  });\n  items.push({\n    id: 'fullscreen',\n    tooltip: fullscreen ? '退出全屏' : '全屏',\n    iconName: fullscreen ? 'FullscreenExitOutlined' : 'FullscreenOutlined',\n    onClick: function onClick() {\n      toggleFullscreen();\n    }\n  });\n  return React.createElement(Toolbar.Group, {\n    className: clz,\n    key: groupKey\n  }, items.map(function (item) {\n    return React.createElement(ToolbarItem, {\n      item: item,\n      layout: layout,\n      key: item.id\n    });\n  }));\n};","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/@ant-design/flowchart/es/components/canvas-toolbar/render-components/toolbar-group.js"],"names":["React","useContext","classnames","Toolbar","AppContext","uuidv4","ToolbarItem","useFullscreen","getContainer","ToolbarGroup","props","_a","group","layout","flowchartId","_b","fullscreen","toggleFullscreen","groupKey","useMemo","name","_c","items","length","clz","filter","item","id","push","tooltip","iconName","onClick","createElement","Group","className","key","map"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAO,IAAIC,YAAY,GAAG,SAAfA,YAAe,CAAUC,KAAV,EAAiB;AACvC,MAAIC,EAAJ;;AACA,MAAIC,KAAK,GAAGF,KAAK,CAACE,KAAlB;AAAA,MAAyBC,MAAM,GAAGH,KAAK,CAACG,MAAxC;AACA,MAAIC,WAAW,GAAGb,UAAU,CAACG,UAAD,CAAV,CAAuBU,WAAzC;;AACA,MAAIC,EAAE,GAAGR,aAAa,CAACC,YAAY,CAACM,WAAD,CAAb,CAAtB;AAAA,MAAmDE,UAAU,GAAGD,EAAE,CAAC,CAAD,CAAlE;AAAA,MAAuEE,gBAAgB,GAAGF,EAAE,CAAC,CAAD,CAA5F;;AACA,MAAIG,QAAQ,GAAGlB,KAAK,CAACmB,OAAN,CAAc,YAAY;AACrC,WAAOP,KAAK,CAACQ,IAAN,IAAcf,MAAM,EAA3B;AACH,GAFc,EAEZ,CAACO,KAAK,CAACQ,IAAP,CAFY,CAAf;AAGA,MAAIC,EAAE,GAAGT,KAAK,CAACU,KAAf;AAAA,MAAsBA,KAAK,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAAnD;;AACA,MAAIC,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AACpB,WAAO,IAAP;AACH;;AACD,MAAIC,GAAG,GAAGtB,UAAU,EAAES,EAAE,GAAG,EAAL,EAClBA,EAAE,CAAC,qBAAD,CAAF,GAA4B,IADV,EAElBA,EAFgB,EAApB;AAGAW,EAAAA,KAAK,GAAGA,KAAK,CAACG,MAAN,CAAa,UAAUC,IAAV,EAAgB;AAAE,WAAOA,IAAI,CAACC,EAAL,KAAY,YAAnB;AAAkC,GAAjE,CAAR;AACAL,EAAAA,KAAK,CAACM,IAAN,CAAW;AACPD,IAAAA,EAAE,EAAE,YADG;AAEPE,IAAAA,OAAO,EAAEb,UAAU,GAAG,MAAH,GAAY,IAFxB;AAGPc,IAAAA,QAAQ,EAAEd,UAAU,GAAG,wBAAH,GAA8B,oBAH3C;AAIPe,IAAAA,OAAO,EAAE,mBAAY;AACjBd,MAAAA,gBAAgB;AACnB;AANM,GAAX;AAQA,SAAQjB,KAAK,CAACgC,aAAN,CAAoB7B,OAAO,CAAC8B,KAA5B,EAAmC;AAAEC,IAAAA,SAAS,EAAEV,GAAb;AAAkBW,IAAAA,GAAG,EAAEjB;AAAvB,GAAnC,EAAsEI,KAAK,CAACc,GAAN,CAAU,UAAUV,IAAV,EAAgB;AAAE,WAAQ1B,KAAK,CAACgC,aAAN,CAAoB1B,WAApB,EAAiC;AAAEoB,MAAAA,IAAI,EAAEA,IAAR;AAAcb,MAAAA,MAAM,EAAEA,MAAtB;AAA8BsB,MAAAA,GAAG,EAAET,IAAI,CAACC;AAAxC,KAAjC,CAAR;AAA0F,GAAtH,CAAtE,CAAR;AACH,CAzBM","sourcesContent":["import React, { useContext } from 'react';\nimport classnames from 'classnames';\nimport { Toolbar } from '@antv/x6-react-components';\nimport AppContext from '../../../context';\nimport { uuidv4 } from '@antv/xflow-core';\nimport { ToolbarItem } from './toolbar-item';\nimport useFullscreen from '../../../hooks/useFullscreen';\nimport { getContainer } from '../../../util';\nexport var ToolbarGroup = function (props) {\n    var _a;\n    var group = props.group, layout = props.layout;\n    var flowchartId = useContext(AppContext).flowchartId;\n    var _b = useFullscreen(getContainer(flowchartId)), fullscreen = _b[0], toggleFullscreen = _b[1];\n    var groupKey = React.useMemo(function () {\n        return group.name || uuidv4();\n    }, [group.name]);\n    var _c = group.items, items = _c === void 0 ? [] : _c;\n    if (items.length === 0) {\n        return null;\n    }\n    var clz = classnames((_a = {},\n        _a['xflow-toolbar-group'] = true,\n        _a));\n    items = items.filter(function (item) { return item.id !== 'fullscreen'; });\n    items.push({\n        id: 'fullscreen',\n        tooltip: fullscreen ? '退出全屏' : '全屏',\n        iconName: fullscreen ? 'FullscreenExitOutlined' : 'FullscreenOutlined',\n        onClick: function () {\n            toggleFullscreen();\n        },\n    });\n    return (React.createElement(Toolbar.Group, { className: clz, key: groupKey }, items.map(function (item) { return (React.createElement(ToolbarItem, { item: item, layout: layout, key: item.id })); })));\n};\n"]},"metadata":{},"sourceType":"module"}