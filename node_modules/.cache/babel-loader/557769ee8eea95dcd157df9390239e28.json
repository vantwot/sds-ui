{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport TwoTouchHandler from './two_touch';\n\nfunction isVertical(vector) {\n  return Math.abs(vector.y) > Math.abs(vector.x);\n}\n\nvar ALLOWED_SINGLE_TOUCH_TIME = 100;\n\nvar TouchPitchHandler = function (_TwoTouchHandler) {\n  _inherits(TouchPitchHandler, _TwoTouchHandler);\n\n  var _super = _createSuper(TouchPitchHandler);\n\n  function TouchPitchHandler() {\n    var _this;\n\n    _classCallCheck(this, TouchPitchHandler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"valid\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"firstMove\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"lastPoints\", void 0);\n\n    return _this;\n  }\n\n  _createClass(TouchPitchHandler, [{\n    key: \"reset\",\n    value: function reset() {\n      _get(_getPrototypeOf(TouchPitchHandler.prototype), \"reset\", this).call(this);\n\n      this.valid = undefined;\n      delete this.firstMove;\n      delete this.lastPoints;\n    }\n  }, {\n    key: \"start\",\n    value: function start(points) {\n      this.lastPoints = points;\n\n      if (isVertical(points[0].sub(points[1]))) {\n        this.valid = false;\n      }\n    }\n  }, {\n    key: \"move\",\n    value: function move(points, center, e) {\n      var vectorA = points[0].sub(this.lastPoints[0]);\n      var vectorB = points[1].sub(this.lastPoints[1]);\n      this.valid = this.gestureBeginsVertically(vectorA, vectorB, e.timeStamp);\n\n      if (!this.valid) {\n        return;\n      }\n\n      this.lastPoints = points;\n      this.active = true;\n      var yDeltaAverage = (vectorA.y + vectorB.y) / 2;\n      var degreesPerPixelMoved = -0.5;\n      return {\n        pitchDelta: yDeltaAverage * degreesPerPixelMoved\n      };\n    }\n  }, {\n    key: \"gestureBeginsVertically\",\n    value: function gestureBeginsVertically(vectorA, vectorB, timeStamp) {\n      if (this.valid !== undefined) {\n        return this.valid;\n      }\n\n      var threshold = 2;\n      var movedA = vectorA.mag() >= threshold;\n      var movedB = vectorB.mag() >= threshold;\n\n      if (!movedA && !movedB) {\n        return;\n      }\n\n      if (!movedA || !movedB) {\n        if (this.firstMove === undefined) {\n          this.firstMove = timeStamp;\n        }\n\n        if (timeStamp - this.firstMove < ALLOWED_SINGLE_TOUCH_TIME) {\n          return undefined;\n        } else {\n          return false;\n        }\n      }\n\n      var isSameDirection = vectorA.y > 0 === vectorB.y > 0;\n      return isVertical(vectorA) && isVertical(vectorB) && isSameDirection;\n    }\n  }]);\n\n  return TouchPitchHandler;\n}(TwoTouchHandler);\n\nexport { TouchPitchHandler as default };","map":{"version":3,"sources":["../../../src/handler/touch/touch_pitch.ts"],"names":["Math","vector","ALLOWED_SINGLE_TOUCH_TIME","TouchPitchHandler","TwoTouchHandler","isVertical","points","vectorA","vectorB","e","yDeltaAverage","degreesPerPixelMoved","pitchDelta","threshold","movedA","movedB","timeStamp","isSameDirection"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAA,eAAA,MAAA,aAAA;;AAEA,SAAA,UAAA,CAAA,MAAA,EAAsD;AACpD,SAAOA,IAAI,CAAJA,GAAAA,CAASC,MAAM,CAAfD,CAAAA,IAAqBA,IAAI,CAAJA,GAAAA,CAASC,MAAM,CAA3C,CAA4BD,CAA5B;AACD;;AAED,IAAME,yBAAyB,GAA/B,GAAA;;IAEqBC,iB;;;;;;;;;;;;;;;;;;;;;;;;;;;WAKnB,SAAA,KAAA,GAAe;AACb,MAAA,IAAA,CAAA,eAAA,CAAA,iBAAA,CAAA,SAAA,CAAA,EAAA,OAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA;;AACA,WAAA,KAAA,GAAA,SAAA;AACA,aAAO,KAAP,SAAA;AACA,aAAO,KAAP,UAAA;AACD;;;WAED,SAAA,KAAA,CAAA,MAAA,EAAqC;AACnC,WAAA,UAAA,GAAA,MAAA;;AACA,UAAIE,UAAU,CAACC,MAAM,CAANA,CAAM,CAANA,CAAAA,GAAAA,CAAcA,MAAM,CAAnC,CAAmC,CAApBA,CAAD,CAAd,EAA0C;AAExC,aAAA,KAAA,GAAA,KAAA;AACD;AACF;;;WAED,SAAA,IAAA,CAAA,MAAA,EAAA,MAAA,EAAA,CAAA,EAAkE;AAChE,UAAMC,OAAO,GAAGD,MAAM,CAANA,CAAM,CAANA,CAAAA,GAAAA,CAAc,KAAA,UAAA,CAA9B,CAA8B,CAAdA,CAAhB;AACA,UAAME,OAAO,GAAGF,MAAM,CAANA,CAAM,CAANA,CAAAA,GAAAA,CAAc,KAAA,UAAA,CAA9B,CAA8B,CAAdA,CAAhB;AAEA,WAAA,KAAA,GAAa,KAAA,uBAAA,CAAA,OAAA,EAAA,OAAA,EAA+CG,CAAC,CAA7D,SAAa,CAAb;;AACA,UAAI,CAAC,KAAL,KAAA,EAAiB;AACf;AACD;;AAED,WAAA,UAAA,GAAA,MAAA;AACA,WAAA,MAAA,GAAA,IAAA;AACA,UAAMC,aAAa,GAAG,CAACH,OAAO,CAAPA,CAAAA,GAAYC,OAAO,CAApB,CAAA,IAAtB,CAAA;AACA,UAAMG,oBAAoB,GAAG,CAA7B,GAAA;AACA,aAAO;AACLC,QAAAA,UAAU,EAAEF,aAAa,GAAGC;AADvB,OAAP;AAGD;;;WAED,SAAA,uBAAA,CAAA,OAAA,EAAA,OAAA,EAAA,SAAA,EAIE;AACA,UAAI,KAAA,KAAA,KAAJ,SAAA,EAA8B;AAC5B,eAAO,KAAP,KAAA;AACD;;AAED,UAAME,SAAS,GAAf,CAAA;AACA,UAAMC,MAAM,GAAGP,OAAO,CAAPA,GAAAA,MAAf,SAAA;AACA,UAAMQ,MAAM,GAAGP,OAAO,CAAPA,GAAAA,MAAf,SAAA;;AAGA,UAAI,CAAA,MAAA,IAAW,CAAf,MAAA,EAAwB;AACtB;AACD;;AAID,UAAI,CAAA,MAAA,IAAW,CAAf,MAAA,EAAwB;AACtB,YAAI,KAAA,SAAA,KAAJ,SAAA,EAAkC;AAChC,eAAA,SAAA,GAAA,SAAA;AACD;;AAED,YAAIQ,SAAS,GAAG,KAAZA,SAAAA,GAAJ,yBAAA,EAA4D;AAE1D,iBAAA,SAAA;AAFF,SAAA,MAGO;AACL,iBAAA,KAAA;AACD;AACF;;AAED,UAAMC,eAAe,GAAGV,OAAO,CAAPA,CAAAA,GAAAA,CAAAA,KAAkBC,OAAO,CAAPA,CAAAA,GAA1C,CAAA;AACA,aAAOH,UAAU,CAAVA,OAAU,CAAVA,IAAuBA,UAAU,CAAjCA,OAAiC,CAAjCA,IAAP,eAAA;AACD;;;;EAzE4CD,e;;SAA1BD,iB","sourcesContent":["// @ts-ignore\nimport Point from '../../geo/point';\nimport TwoTouchHandler from './two_touch';\n\nfunction isVertical(vector: { x: number; y: number }) {\n  return Math.abs(vector.y) > Math.abs(vector.x);\n}\n\nconst ALLOWED_SINGLE_TOUCH_TIME = 100;\n\nexport default class TouchPitchHandler extends TwoTouchHandler {\n  public valid: boolean | void;\n  public firstMove: number;\n  public lastPoints: [Point, Point];\n\n  public reset() {\n    super.reset();\n    this.valid = undefined;\n    delete this.firstMove;\n    delete this.lastPoints;\n  }\n\n  public start(points: [Point, Point]) {\n    this.lastPoints = points;\n    if (isVertical(points[0].sub(points[1]))) {\n      // fingers are more horizontal than vertical\n      this.valid = false;\n    }\n  }\n\n  public move(points: [Point, Point], center: Point, e: TouchEvent) {\n    const vectorA = points[0].sub(this.lastPoints[0]);\n    const vectorB = points[1].sub(this.lastPoints[1]);\n\n    this.valid = this.gestureBeginsVertically(vectorA, vectorB, e.timeStamp);\n    if (!this.valid) {\n      return;\n    }\n\n    this.lastPoints = points;\n    this.active = true;\n    const yDeltaAverage = (vectorA.y + vectorB.y) / 2;\n    const degreesPerPixelMoved = -0.5;\n    return {\n      pitchDelta: yDeltaAverage * degreesPerPixelMoved,\n    };\n  }\n\n  public gestureBeginsVertically(\n    vectorA: Point,\n    vectorB: Point,\n    timeStamp: number,\n  ) {\n    if (this.valid !== undefined) {\n      return this.valid;\n    }\n\n    const threshold = 2;\n    const movedA = vectorA.mag() >= threshold;\n    const movedB = vectorB.mag() >= threshold;\n\n    // neither finger has moved a meaningful amount, wait\n    if (!movedA && !movedB) {\n      return;\n    }\n\n    // One finger has moved and the other has not.\n    // If enough time has passed, decide it is not a pitch.\n    if (!movedA || !movedB) {\n      if (this.firstMove === undefined) {\n        this.firstMove = timeStamp;\n      }\n\n      if (timeStamp - this.firstMove < ALLOWED_SINGLE_TOUCH_TIME) {\n        // still waiting for a movement from the second finger\n        return undefined;\n      } else {\n        return false;\n      }\n    }\n\n    const isSameDirection = vectorA.y > 0 === vectorB.y > 0;\n    return isVertical(vectorA) && isVertical(vectorB) && isSameDirection;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}