{"ast":null,"code":"import _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Basecoat } from '../common';\nimport { Point, Rectangle } from '../geometry';\nimport { Cell } from '../model/cell';\nimport { Node } from '../model/node';\nimport { Edge } from '../model/edge';\nimport { CellView } from '../view/cell';\nimport * as Registry from '../registry';\nimport { HTML } from '../shape/standard/html';\nimport { Base } from './base';\nimport { GraphView } from './view';\nimport { Decorator } from './decorator';\nimport { CSSManager } from './css';\nimport { Hook as HookManager } from './hook';\nimport { Options as GraphOptions } from './options';\nimport { DefsManager as Defs } from './defs';\nimport { GridManager as Grid } from './grid';\nimport { CoordManager as Coord } from './coord';\nimport { Keyboard as Shortcut } from './keyboard';\nimport { PrintManager as Print } from './print';\nimport { MouseWheel as Wheel } from './mousewheel';\nimport { FormatManager as Format } from './format';\nimport { Renderer as ViewRenderer } from './renderer';\nimport { HistoryManager as History } from './history';\nimport { MiniMapManager as MiniMap } from './minimap';\nimport { SnaplineManager as Snapline } from './snapline';\nimport { ScrollerManager as Scroller } from './scroller';\nimport { SelectionManager as Selection } from './selection';\nimport { HighlightManager as Highlight } from './highlight';\nimport { TransformManager as Transform } from './transform';\nimport { ClipboardManager as Clipboard } from './clipboard';\nimport { BackgroundManager as Background } from './background';\nexport var Graph = /*#__PURE__*/function (_Basecoat, _Symbol$toStringTag) {\n  _inherits(Graph, _Basecoat);\n\n  var _super = _createSuper(Graph);\n\n  function Graph(options) {\n    var _this;\n\n    _classCallCheck(this, Graph);\n\n    _this = _super.call(this);\n    _this.options = GraphOptions.get(options);\n    _this.css = new CSSManager(_assertThisInitialized(_this));\n    _this.hook = new HookManager(_assertThisInitialized(_this));\n    _this.view = _this.hook.createView();\n    _this.defs = _this.hook.createDefsManager();\n    _this.coord = _this.hook.createCoordManager();\n    _this.transform = _this.hook.createTransformManager();\n    _this.knob = _this.hook.createKnobManager();\n    _this.highlight = _this.hook.createHighlightManager();\n    _this.grid = _this.hook.createGridManager();\n    _this.background = _this.hook.createBackgroundManager();\n    _this.model = _this.hook.createModel();\n    _this.renderer = _this.hook.createRenderer();\n    _this.clipboard = _this.hook.createClipboardManager();\n    _this.snapline = _this.hook.createSnaplineManager();\n    _this.selection = _this.hook.createSelectionManager();\n    _this.history = _this.hook.createHistoryManager();\n    _this.scroller = _this.hook.createScrollerManager();\n    _this.minimap = _this.hook.createMiniMapManager();\n    _this.keyboard = _this.hook.createKeyboard();\n    _this.mousewheel = _this.hook.createMouseWheel();\n    _this.print = _this.hook.createPrintManager();\n    _this.format = _this.hook.createFormatManager();\n    _this.panning = _this.hook.createPanningManager();\n    _this.size = _this.hook.createSizeManager();\n    return _this;\n  }\n\n  _createClass(Graph, [{\n    key: \"container\",\n    get: function get() {\n      return this.view.container;\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return Graph.toStringTag;\n    } // #region model\n\n  }, {\n    key: \"isNode\",\n    value: function isNode(cell) {\n      return cell.isNode();\n    }\n  }, {\n    key: \"isEdge\",\n    value: function isEdge(cell) {\n      return cell.isEdge();\n    }\n  }, {\n    key: \"resetCells\",\n    value: function resetCells(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.model.resetCells(cells, options);\n      return this;\n    }\n  }, {\n    key: \"clearCells\",\n    value: function clearCells() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.model.clear(options);\n      return this;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.model.toJSON(options);\n    }\n  }, {\n    key: \"parseJSON\",\n    value: function parseJSON(data) {\n      return this.model.parseJSON(data);\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(data) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.model.fromJSON(data, options);\n      return this;\n    }\n  }, {\n    key: \"getCellById\",\n    value: function getCellById(id) {\n      return this.model.getCell(id);\n    }\n  }, {\n    key: \"addNode\",\n    value: function addNode(node) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.addNode(node, options);\n    }\n  }, {\n    key: \"addNodes\",\n    value: function addNodes(nodes) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.addCell(nodes.map(function (node) {\n        return Node.isNode(node) ? node : _this2.createNode(node);\n      }), options);\n    }\n  }, {\n    key: \"createNode\",\n    value: function createNode(metadata) {\n      return this.model.createNode(metadata);\n    }\n  }, {\n    key: \"removeNode\",\n    value: function removeNode(node) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.removeCell(node, options);\n    }\n  }, {\n    key: \"addEdge\",\n    value: function addEdge(edge) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.addEdge(edge, options);\n    }\n  }, {\n    key: \"addEdges\",\n    value: function addEdges(edges) {\n      var _this3 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.addCell(edges.map(function (edge) {\n        return Edge.isEdge(edge) ? edge : _this3.createEdge(edge);\n      }), options);\n    }\n  }, {\n    key: \"removeEdge\",\n    value: function removeEdge(edge) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.removeCell(edge, options);\n    }\n  }, {\n    key: \"createEdge\",\n    value: function createEdge(metadata) {\n      return this.model.createEdge(metadata);\n    }\n  }, {\n    key: \"addCell\",\n    value: function addCell(cell) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.model.addCell(cell, options);\n      return this;\n    }\n  }, {\n    key: \"removeCell\",\n    value: function removeCell(cell) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.removeCell(cell, options);\n    }\n  }, {\n    key: \"removeCells\",\n    value: function removeCells(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.removeCells(cells, options);\n    }\n  }, {\n    key: \"removeConnectedEdges\",\n    value: function removeConnectedEdges(cell) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.removeConnectedEdges(cell, options);\n    }\n  }, {\n    key: \"disconnectConnectedEdges\",\n    value: function disconnectConnectedEdges(cell) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.model.disconnectConnectedEdges(cell, options);\n      return this;\n    }\n  }, {\n    key: \"hasCell\",\n    value: function hasCell(cell) {\n      return this.model.has(cell);\n    }\n    /**\n     * **Deprecation Notice:** `getCell` is deprecated and will be moved in next\n     * major release. Use `getCellById()` instead.\n     *\n     * @deprecated\n     */\n\n  }, {\n    key: \"getCell\",\n    value: function getCell(id) {\n      return this.model.getCell(id);\n    }\n  }, {\n    key: \"getCells\",\n    value: function getCells() {\n      return this.model.getCells();\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this.model.total();\n    }\n    /**\n     * Returns all the nodes in the graph.\n     */\n\n  }, {\n    key: \"getNodes\",\n    value: function getNodes() {\n      return this.model.getNodes();\n    }\n    /**\n     * Returns all the edges in the graph.\n     */\n\n  }, {\n    key: \"getEdges\",\n    value: function getEdges() {\n      return this.model.getEdges();\n    }\n    /**\n     * Returns all outgoing edges for the node.\n     */\n\n  }, {\n    key: \"getOutgoingEdges\",\n    value: function getOutgoingEdges(cell) {\n      return this.model.getOutgoingEdges(cell);\n    }\n    /**\n     * Returns all incoming edges for the node.\n     */\n\n  }, {\n    key: \"getIncomingEdges\",\n    value: function getIncomingEdges(cell) {\n      return this.model.getIncomingEdges(cell);\n    }\n    /**\n     * Returns edges connected with cell.\n     */\n\n  }, {\n    key: \"getConnectedEdges\",\n    value: function getConnectedEdges(cell) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.getConnectedEdges(cell, options);\n    }\n    /**\n     * Returns an array of all the roots of the graph.\n     */\n\n  }, {\n    key: \"getRootNodes\",\n    value: function getRootNodes() {\n      return this.model.getRoots();\n    }\n    /**\n     * Returns an array of all the leafs of the graph.\n     */\n\n  }, {\n    key: \"getLeafNodes\",\n    value: function getLeafNodes() {\n      return this.model.getLeafs();\n    }\n    /**\n     * Returns `true` if the node is a root node, i.e.\n     * there is no  edges coming to the node.\n     */\n\n  }, {\n    key: \"isRootNode\",\n    value: function isRootNode(cell) {\n      return this.model.isRoot(cell);\n    }\n    /**\n     * Returns `true` if the node is a leaf node, i.e.\n     * there is no edges going out from the node.\n     */\n\n  }, {\n    key: \"isLeafNode\",\n    value: function isLeafNode(cell) {\n      return this.model.isLeaf(cell);\n    }\n    /**\n     * Returns all the neighbors of node in the graph. Neighbors are all\n     * the nodes connected to node via either incoming or outgoing edge.\n     */\n\n  }, {\n    key: \"getNeighbors\",\n    value: function getNeighbors(cell) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.getNeighbors(cell, options);\n    }\n    /**\n     * Returns `true` if `cell2` is a neighbor of `cell1`.\n     */\n\n  }, {\n    key: \"isNeighbor\",\n    value: function isNeighbor(cell1, cell2) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.model.isNeighbor(cell1, cell2, options);\n    }\n  }, {\n    key: \"getSuccessors\",\n    value: function getSuccessors(cell) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.getSuccessors(cell, options);\n    }\n    /**\n     * Returns `true` if `cell2` is a successor of `cell1`.\n     */\n\n  }, {\n    key: \"isSuccessor\",\n    value: function isSuccessor(cell1, cell2) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.model.isSuccessor(cell1, cell2, options);\n    }\n  }, {\n    key: \"getPredecessors\",\n    value: function getPredecessors(cell) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.getPredecessors(cell, options);\n    }\n    /**\n     * Returns `true` if `cell2` is a predecessor of `cell1`.\n     */\n\n  }, {\n    key: \"isPredecessor\",\n    value: function isPredecessor(cell1, cell2) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.model.isPredecessor(cell1, cell2, options);\n    }\n  }, {\n    key: \"getCommonAncestor\",\n    value: function getCommonAncestor() {\n      var _this$model;\n\n      return (_this$model = this.model).getCommonAncestor.apply(_this$model, arguments);\n    }\n    /**\n     * Returns an array of cells that result from finding nodes/edges that\n     * are connected to any of the cells in the cells array. This function\n     * loops over cells and if the current cell is a edge, it collects its\n     * source/target nodes; if it is an node, it collects its incoming and\n     * outgoing edges if both the edge terminal (source/target) are in the\n     * cells array.\n     */\n\n  }, {\n    key: \"getSubGraph\",\n    value: function getSubGraph(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.getSubGraph(cells, options);\n    }\n    /**\n     * Clones the whole subgraph (including all the connected links whose\n     * source/target is in the subgraph). If `options.deep` is `true`, also\n     * take into account all the embedded cells of all the subgraph cells.\n     *\n     * Returns a map of the form: { [original cell ID]: [clone] }.\n     */\n\n  }, {\n    key: \"cloneSubGraph\",\n    value: function cloneSubGraph(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.cloneSubGraph(cells, options);\n    }\n  }, {\n    key: \"cloneCells\",\n    value: function cloneCells(cells) {\n      return this.model.cloneCells(cells);\n    }\n  }, {\n    key: \"getNodesFromPoint\",\n    value: function getNodesFromPoint(x, y) {\n      return this.model.getNodesFromPoint(x, y);\n    }\n  }, {\n    key: \"getNodesInArea\",\n    value: function getNodesInArea(x, y, w, h, options) {\n      return this.model.getNodesInArea(x, y, w, h, options);\n    }\n  }, {\n    key: \"getNodesUnderNode\",\n    value: function getNodesUnderNode(node) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.getNodesUnderNode(node, options);\n    }\n  }, {\n    key: \"searchCell\",\n    value: function searchCell(cell, iterator) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.model.search(cell, iterator, options);\n      return this;\n    }\n    /** *\n     * Returns an array of IDs of nodes on the shortest\n     * path between source and target.\n     */\n\n  }, {\n    key: \"getShortestPath\",\n    value: function getShortestPath(source, target) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.model.getShortestPath(source, target, options);\n    }\n    /**\n     * Returns the bounding box that surrounds all cells in the graph.\n     */\n\n  }, {\n    key: \"getAllCellsBBox\",\n    value: function getAllCellsBBox() {\n      return this.model.getAllCellsBBox();\n    }\n    /**\n     * Returns the bounding box that surrounds all the given cells.\n     */\n\n  }, {\n    key: \"getCellsBBox\",\n    value: function getCellsBBox(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.getCellsBBox(cells, options);\n    }\n  }, {\n    key: \"startBatch\",\n    value: function startBatch(name) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.model.startBatch(name, data);\n    }\n  }, {\n    key: \"stopBatch\",\n    value: function stopBatch(name) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.model.stopBatch(name, data);\n    }\n  }, {\n    key: \"batchUpdate\",\n    value: function batchUpdate(arg1, arg2, arg3) {\n      var name = typeof arg1 === 'string' ? arg1 : 'update';\n      var execute = typeof arg1 === 'string' ? arg2 : arg1;\n      var data = typeof arg2 === 'function' ? arg3 : arg2;\n      this.startBatch(name, data);\n      var result = execute();\n      this.stopBatch(name, data);\n      return result;\n    } // #endregion\n    // #region view\n\n  }, {\n    key: \"isFrozen\",\n    value: function isFrozen() {\n      return this.renderer.isFrozen();\n    }\n  }, {\n    key: \"freeze\",\n    value: function freeze() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.renderer.freeze(options);\n      return this;\n    }\n  }, {\n    key: \"unfreeze\",\n    value: function unfreeze() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.renderer.unfreeze(options);\n      return this;\n    }\n  }, {\n    key: \"isAsync\",\n    value: function isAsync() {\n      return this.renderer.isAsync();\n    }\n  }, {\n    key: \"setAsync\",\n    value: function setAsync(async) {\n      this.renderer.setAsync(async);\n      return this;\n    }\n  }, {\n    key: \"findView\",\n    value: function findView(ref) {\n      if (Cell.isCell(ref)) {\n        return this.findViewByCell(ref);\n      }\n\n      return this.findViewByElem(ref);\n    }\n  }, {\n    key: \"findViews\",\n    value: function findViews(ref) {\n      if (Rectangle.isRectangleLike(ref)) {\n        return this.findViewsInArea(ref);\n      }\n\n      if (Point.isPointLike(ref)) {\n        return this.findViewsFromPoint(ref);\n      }\n\n      return [];\n    }\n  }, {\n    key: \"findViewByCell\",\n    value: function findViewByCell(cell) {\n      return this.renderer.findViewByCell(cell);\n    }\n  }, {\n    key: \"findViewByElem\",\n    value: function findViewByElem(elem) {\n      return this.renderer.findViewByElem(elem);\n    }\n  }, {\n    key: \"findViewsFromPoint\",\n    value: function findViewsFromPoint(x, y) {\n      var p = typeof x === 'number' ? {\n        x: x,\n        y: y\n      } : x;\n      return this.renderer.findViewsFromPoint(p);\n    }\n  }, {\n    key: \"findViewsInArea\",\n    value: function findViewsInArea(x, y, width, height, options) {\n      var rect = typeof x === 'number' ? {\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      } : x;\n      var localOptions = typeof x === 'number' ? options : y;\n      return this.renderer.findViewsInArea(rect, localOptions);\n    }\n  }, {\n    key: \"isViewMounted\",\n    value: function isViewMounted(view) {\n      return this.renderer.isViewMounted(view);\n    }\n  }, {\n    key: \"getMountedViews\",\n    value: function getMountedViews() {\n      return this.renderer.getMountedViews();\n    }\n  }, {\n    key: \"getUnmountedViews\",\n    value: function getUnmountedViews() {\n      return this.renderer.getUnmountedViews();\n    }\n  }, {\n    key: \"matrix\",\n    value: function matrix(mat) {\n      if (typeof mat === 'undefined') {\n        return this.transform.getMatrix();\n      }\n\n      this.transform.setMatrix(mat);\n      return this;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      this.size.resize(width, height);\n      return this;\n    }\n  }, {\n    key: \"resizeGraph\",\n    value: function resizeGraph(width, height) {\n      this.size.resizeGraph(width, height);\n      return this;\n    }\n  }, {\n    key: \"resizeScroller\",\n    value: function resizeScroller(width, height) {\n      this.size.resizeScroller(width, height);\n      return this;\n    }\n  }, {\n    key: \"resizePage\",\n    value: function resizePage(width, height) {\n      this.size.resizePage(width, height);\n      return this;\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(sx) {\n      var sy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : sx;\n      var cx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var cy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n      if (typeof sx === 'undefined') {\n        return this.transform.getScale();\n      }\n\n      this.transform.scale(sx, sy, cx, cy);\n      return this;\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(factor, options) {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        if (typeof factor === 'undefined') {\n          return scroller.zoom();\n        }\n\n        scroller.zoom(factor, options);\n      } else {\n        if (typeof factor === 'undefined') {\n          return this.transform.getZoom();\n        }\n\n        this.transform.zoom(factor, options);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"zoomTo\",\n    value: function zoomTo(factor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.zoom(factor, Object.assign(Object.assign({}, options), {\n          absolute: true\n        }));\n      } else {\n        this.transform.zoom(factor, Object.assign(Object.assign({}, options), {\n          absolute: true\n        }));\n      }\n    }\n  }, {\n    key: \"zoomToRect\",\n    value: function zoomToRect(rect) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.zoomToRect(rect, options);\n      } else {\n        this.transform.zoomToRect(rect, options);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"zoomToFit\",\n    value: function zoomToFit() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.zoomToFit(options);\n      } else {\n        this.transform.zoomToFit(options);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(angle, cx, cy) {\n      if (typeof angle === 'undefined') {\n        return this.transform.getRotation();\n      }\n\n      this.transform.rotate(angle, cx, cy);\n      return this;\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(tx, ty) {\n      if (typeof tx === 'undefined') {\n        return this.transform.getTranslation();\n      }\n\n      this.transform.translate(tx, ty);\n      return this;\n    }\n  }, {\n    key: \"translateBy\",\n    value: function translateBy(dx, dy) {\n      var ts = this.translate();\n      var tx = ts.tx + dx;\n      var ty = ts.ty + dy;\n      return this.translate(tx, ty);\n    }\n    /**\n     * **Deprecation Notice:** `getArea` is deprecated and will be moved in next\n     * major release. Use `getGraphArea()` instead.\n     *\n     * @deprecated\n     */\n\n  }, {\n    key: \"getArea\",\n    value: function getArea() {\n      return this.transform.getGraphArea();\n    }\n  }, {\n    key: \"getGraphArea\",\n    value: function getGraphArea() {\n      return this.transform.getGraphArea();\n    }\n  }, {\n    key: \"getContentArea\",\n    value: function getContentArea() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.transform.getContentArea(options);\n    }\n  }, {\n    key: \"getContentBBox\",\n    value: function getContentBBox() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.transform.getContentBBox(options);\n    }\n  }, {\n    key: \"fitToContent\",\n    value: function fitToContent(gridWidth, gridHeight, padding, options) {\n      return this.transform.fitToContent(gridWidth, gridHeight, padding, options);\n    }\n  }, {\n    key: \"scaleContentToFit\",\n    value: function scaleContentToFit() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.transform.scaleContentToFit(options);\n      return this;\n    }\n    /**\n     * Position the center of graph to the center of the viewport.\n     */\n\n  }, {\n    key: \"center\",\n    value: function center(optons) {\n      return this.centerPoint(optons);\n    }\n  }, {\n    key: \"centerPoint\",\n    value: function centerPoint(x, y, options) {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.centerPoint(x, y, options);\n      } else {\n        this.transform.centerPoint(x, y);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"centerContent\",\n    value: function centerContent(options) {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.centerContent(options);\n      } else {\n        this.transform.centerContent(options);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"centerCell\",\n    value: function centerCell(cell, options) {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.centerCell(cell, options);\n      } else {\n        this.transform.centerCell(cell);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"positionPoint\",\n    value: function positionPoint(point, x, y) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.positionPoint(point, x, y, options);\n      } else {\n        this.transform.positionPoint(point, x, y);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"positionRect\",\n    value: function positionRect(rect, direction, options) {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.positionRect(rect, direction, options);\n      } else {\n        this.transform.positionRect(rect, direction);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"positionCell\",\n    value: function positionCell(cell, direction, options) {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.positionCell(cell, direction, options);\n      } else {\n        this.transform.positionCell(cell, direction);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"positionContent\",\n    value: function positionContent(pos, options) {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.positionContent(pos, options);\n      } else {\n        this.transform.positionContent(pos, options);\n      }\n\n      return this;\n    } // #endregion\n    // #region coord\n\n  }, {\n    key: \"getClientMatrix\",\n    value: function getClientMatrix() {\n      return this.coord.getClientMatrix();\n    }\n    /**\n     * Returns coordinates of the graph viewport, relative to the window.\n     */\n\n  }, {\n    key: \"getClientOffset\",\n    value: function getClientOffset() {\n      return this.coord.getClientOffset();\n    }\n    /**\n     * Returns coordinates of the graph viewport, relative to the document.\n     */\n\n  }, {\n    key: \"getPageOffset\",\n    value: function getPageOffset() {\n      return this.coord.getPageOffset();\n    }\n  }, {\n    key: \"snapToGrid\",\n    value: function snapToGrid(x, y) {\n      return this.coord.snapToGrid(x, y);\n    }\n  }, {\n    key: \"pageToLocal\",\n    value: function pageToLocal(x, y, width, height) {\n      if (Rectangle.isRectangleLike(x)) {\n        return this.coord.pageToLocalRect(x);\n      }\n\n      if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n        return this.coord.pageToLocalRect(x, y, width, height);\n      }\n\n      return this.coord.pageToLocalPoint(x, y);\n    }\n  }, {\n    key: \"localToPage\",\n    value: function localToPage(x, y, width, height) {\n      if (Rectangle.isRectangleLike(x)) {\n        return this.coord.localToPageRect(x);\n      }\n\n      if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n        return this.coord.localToPageRect(x, y, width, height);\n      }\n\n      return this.coord.localToPagePoint(x, y);\n    }\n  }, {\n    key: \"clientToLocal\",\n    value: function clientToLocal(x, y, width, height) {\n      if (Rectangle.isRectangleLike(x)) {\n        return this.coord.clientToLocalRect(x);\n      }\n\n      if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n        return this.coord.clientToLocalRect(x, y, width, height);\n      }\n\n      return this.coord.clientToLocalPoint(x, y);\n    }\n  }, {\n    key: \"localToClient\",\n    value: function localToClient(x, y, width, height) {\n      if (Rectangle.isRectangleLike(x)) {\n        return this.coord.localToClientRect(x);\n      }\n\n      if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n        return this.coord.localToClientRect(x, y, width, height);\n      }\n\n      return this.coord.localToClientPoint(x, y);\n    }\n  }, {\n    key: \"localToGraph\",\n    value: function localToGraph(x, y, width, height) {\n      if (Rectangle.isRectangleLike(x)) {\n        return this.coord.localToGraphRect(x);\n      }\n\n      if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n        return this.coord.localToGraphRect(x, y, width, height);\n      }\n\n      return this.coord.localToGraphPoint(x, y);\n    }\n  }, {\n    key: \"graphToLocal\",\n    value: function graphToLocal(x, y, width, height) {\n      if (Rectangle.isRectangleLike(x)) {\n        return this.coord.graphToLocalRect(x);\n      }\n\n      if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n        return this.coord.graphToLocalRect(x, y, width, height);\n      }\n\n      return this.coord.graphToLocalPoint(x, y);\n    }\n  }, {\n    key: \"clientToGraph\",\n    value: function clientToGraph(x, y, width, height) {\n      if (Rectangle.isRectangleLike(x)) {\n        return this.coord.clientToGraphRect(x);\n      }\n\n      if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n        return this.coord.clientToGraphRect(x, y, width, height);\n      }\n\n      return this.coord.clientToGraphPoint(x, y);\n    } // #endregion\n    // #region defs\n\n  }, {\n    key: \"defineFilter\",\n    value: function defineFilter(options) {\n      return this.defs.filter(options);\n    }\n  }, {\n    key: \"defineGradient\",\n    value: function defineGradient(options) {\n      return this.defs.gradient(options);\n    }\n  }, {\n    key: \"defineMarker\",\n    value: function defineMarker(options) {\n      return this.defs.marker(options);\n    } // #endregion\n    // #region grid\n\n  }, {\n    key: \"getGridSize\",\n    value: function getGridSize() {\n      return this.grid.getGridSize();\n    }\n  }, {\n    key: \"setGridSize\",\n    value: function setGridSize(gridSize) {\n      this.grid.setGridSize(gridSize);\n      return this;\n    }\n  }, {\n    key: \"showGrid\",\n    value: function showGrid() {\n      this.grid.show();\n      return this;\n    }\n  }, {\n    key: \"hideGrid\",\n    value: function hideGrid() {\n      this.grid.hide();\n      return this;\n    }\n  }, {\n    key: \"clearGrid\",\n    value: function clearGrid() {\n      this.grid.clear();\n      return this;\n    }\n  }, {\n    key: \"drawGrid\",\n    value: function drawGrid(options) {\n      this.grid.draw(options);\n      return this;\n    } // #endregion\n    // #region background\n\n  }, {\n    key: \"updateBackground\",\n    value: function updateBackground() {\n      this.background.update();\n      return this;\n    }\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground(options, onGraph) {\n      var scroller = this.scroller.widget;\n\n      if (scroller != null && (this.options.background == null || !onGraph)) {\n        scroller.backgroundManager.draw(options);\n      } else {\n        this.background.draw(options);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"clearBackground\",\n    value: function clearBackground(onGraph) {\n      var scroller = this.scroller.widget;\n\n      if (scroller != null && (this.options.background == null || !onGraph)) {\n        scroller.backgroundManager.clear();\n      } else {\n        this.background.clear();\n      }\n\n      return this;\n    } // #endregion\n    // #region clipboard\n\n  }, {\n    key: \"isClipboardEnabled\",\n    value: function isClipboardEnabled() {\n      return !this.clipboard.disabled;\n    }\n  }, {\n    key: \"enableClipboard\",\n    value: function enableClipboard() {\n      this.clipboard.enable();\n      return this;\n    }\n  }, {\n    key: \"disableClipboard\",\n    value: function disableClipboard() {\n      this.clipboard.disable();\n      return this;\n    }\n  }, {\n    key: \"toggleClipboard\",\n    value: function toggleClipboard(enabled) {\n      if (enabled != null) {\n        if (enabled !== this.isClipboardEnabled()) {\n          if (enabled) {\n            this.enableClipboard();\n          } else {\n            this.disableClipboard();\n          }\n        }\n      } else if (this.isClipboardEnabled()) {\n        this.disableClipboard();\n      } else {\n        this.enableClipboard();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isClipboardEmpty\",\n    value: function isClipboardEmpty() {\n      return this.clipboard.isEmpty();\n    }\n  }, {\n    key: \"getCellsInClipboard\",\n    value: function getCellsInClipboard() {\n      return this.clipboard.cells;\n    }\n  }, {\n    key: \"cleanClipboard\",\n    value: function cleanClipboard() {\n      this.clipboard.clean();\n      return this;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.clipboard.copy(cells, options);\n      return this;\n    }\n  }, {\n    key: \"cut\",\n    value: function cut(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.clipboard.cut(cells, options);\n      return this;\n    }\n  }, {\n    key: \"paste\",\n    value: function paste() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var graph = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n      return this.clipboard.paste(options, graph);\n    } // #endregion\n    // #region redo/undo\n\n  }, {\n    key: \"isHistoryEnabled\",\n    value: function isHistoryEnabled() {\n      return !this.history.disabled;\n    }\n  }, {\n    key: \"enableHistory\",\n    value: function enableHistory() {\n      this.history.enable();\n      return this;\n    }\n  }, {\n    key: \"disableHistory\",\n    value: function disableHistory() {\n      this.history.disable();\n      return this;\n    }\n  }, {\n    key: \"toggleHistory\",\n    value: function toggleHistory(enabled) {\n      if (enabled != null) {\n        if (enabled !== this.isHistoryEnabled()) {\n          if (enabled) {\n            this.enableHistory();\n          } else {\n            this.disableHistory();\n          }\n        }\n      } else if (this.isHistoryEnabled()) {\n        this.disableHistory();\n      } else {\n        this.enableHistory();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"undo\",\n    value: function undo() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.history.undo(options);\n      return this;\n    }\n  }, {\n    key: \"undoAndCancel\",\n    value: function undoAndCancel() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.history.cancel(options);\n      return this;\n    }\n  }, {\n    key: \"redo\",\n    value: function redo() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.history.redo(options);\n      return this;\n    }\n  }, {\n    key: \"canUndo\",\n    value: function canUndo() {\n      return this.history.canUndo();\n    }\n  }, {\n    key: \"canRedo\",\n    value: function canRedo() {\n      return this.history.canRedo();\n    }\n  }, {\n    key: \"cleanHistory\",\n    value: function cleanHistory() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.history.clean(options);\n    } // #endregion\n    // #region keyboard\n\n  }, {\n    key: \"isKeyboardEnabled\",\n    value: function isKeyboardEnabled() {\n      return !this.keyboard.disabled;\n    }\n  }, {\n    key: \"enableKeyboard\",\n    value: function enableKeyboard() {\n      this.keyboard.enable();\n      return this;\n    }\n  }, {\n    key: \"disableKeyboard\",\n    value: function disableKeyboard() {\n      this.keyboard.disable();\n      return this;\n    }\n  }, {\n    key: \"toggleKeyboard\",\n    value: function toggleKeyboard(enabled) {\n      if (enabled != null) {\n        if (enabled !== this.isKeyboardEnabled()) {\n          if (enabled) {\n            this.enableKeyboard();\n          } else {\n            this.disableKeyboard();\n          }\n        }\n      } else if (this.isKeyboardEnabled()) {\n        this.disableKeyboard();\n      } else {\n        this.enableKeyboard();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"bindKey\",\n    value: function bindKey(keys, callback, action) {\n      this.keyboard.on(keys, callback, action);\n      return this;\n    }\n  }, {\n    key: \"unbindKey\",\n    value: function unbindKey(keys, action) {\n      this.keyboard.off(keys, action);\n      return this;\n    } // #endregion\n    // #region mousewheel\n\n  }, {\n    key: \"isMouseWheelEnabled\",\n    value: function isMouseWheelEnabled() {\n      return !this.mousewheel.disabled;\n    }\n  }, {\n    key: \"enableMouseWheel\",\n    value: function enableMouseWheel() {\n      this.mousewheel.enable();\n      return this;\n    }\n  }, {\n    key: \"disableMouseWheel\",\n    value: function disableMouseWheel() {\n      this.mousewheel.disable();\n      return this;\n    }\n  }, {\n    key: \"toggleMouseWheel\",\n    value: function toggleMouseWheel(enabled) {\n      if (enabled == null) {\n        if (this.isMouseWheelEnabled()) {\n          this.disableMouseWheel();\n        } else {\n          this.enableMouseWheel();\n        }\n      } else if (enabled) {\n        this.enableMouseWheel();\n      } else {\n        this.disableMouseWheel();\n      }\n\n      return this;\n    } // #endregion\n    // #region panning\n\n  }, {\n    key: \"isPannable\",\n    value: function isPannable() {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        return this.scroller.pannable;\n      }\n\n      return this.panning.pannable;\n    }\n  }, {\n    key: \"enablePanning\",\n    value: function enablePanning() {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        this.scroller.enablePanning();\n      } else {\n        this.panning.enablePanning();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"disablePanning\",\n    value: function disablePanning() {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        this.scroller.disablePanning();\n      } else {\n        this.panning.disablePanning();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"togglePanning\",\n    value: function togglePanning(pannable) {\n      if (pannable == null) {\n        if (this.isPannable()) {\n          this.disablePanning();\n        } else {\n          this.enablePanning();\n        }\n      } else if (pannable !== this.isPannable()) {\n        if (pannable) {\n          this.enablePanning();\n        } else {\n          this.disablePanning();\n        }\n      }\n\n      return this;\n    } // #endregion\n    // #region scroller\n\n  }, {\n    key: \"lockScroller\",\n    value: function lockScroller() {\n      var _a;\n\n      (_a = this.scroller.widget) === null || _a === void 0 ? void 0 : _a.lock();\n    }\n  }, {\n    key: \"unlockScroller\",\n    value: function unlockScroller() {\n      var _a;\n\n      (_a = this.scroller.widget) === null || _a === void 0 ? void 0 : _a.unlock();\n    }\n  }, {\n    key: \"updateScroller\",\n    value: function updateScroller() {\n      var _a;\n\n      (_a = this.scroller.widget) === null || _a === void 0 ? void 0 : _a.update();\n    }\n  }, {\n    key: \"getScrollbarPosition\",\n    value: function getScrollbarPosition() {\n      var scroller = this.scroller.widget;\n      return scroller.scrollbarPosition();\n    }\n  }, {\n    key: \"setScrollbarPosition\",\n    value: function setScrollbarPosition(left, top, options) {\n      var scroller = this.scroller.widget;\n      scroller.scrollbarPosition(left, top, options);\n      return this;\n    }\n    /**\n     * Try to scroll to ensure that the position (x,y) on the graph (in local\n     * coordinates) is at the center of the viewport. If only one of the\n     * coordinates is specified, only scroll in the specified dimension and\n     * keep the other coordinate unchanged.\n     */\n\n  }, {\n    key: \"scrollToPoint\",\n    value: function scrollToPoint(x, y, options) {\n      var scroller = this.scroller.widget;\n      scroller.scrollToPoint(x, y, options);\n      return this;\n    }\n    /**\n     * Try to scroll to ensure that the center of graph content is at the\n     * center of the viewport.\n     */\n\n  }, {\n    key: \"scrollToContent\",\n    value: function scrollToContent(options) {\n      var scroller = this.scroller.widget;\n      scroller.scrollToContent(options);\n      return this;\n    }\n    /**\n     * Try to scroll to ensure that the center of cell is at the center of\n     * the viewport.\n     */\n\n  }, {\n    key: \"scrollToCell\",\n    value: function scrollToCell(cell, options) {\n      var scroller = this.scroller.widget;\n      scroller.scrollToCell(cell, options);\n      return this;\n    }\n  }, {\n    key: \"transitionToPoint\",\n    value: function transitionToPoint(x, y, options) {\n      var scroller = this.scroller.widget;\n      scroller.transitionToPoint(x, y, options);\n      return this;\n    }\n  }, {\n    key: \"transitionToRect\",\n    value: function transitionToRect(rect) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var scroller = this.scroller.widget;\n      scroller.transitionToRect(rect, options);\n      return this;\n    } // #endregion\n    // #region selection\n\n  }, {\n    key: \"isSelectionEnabled\",\n    value: function isSelectionEnabled() {\n      return !this.selection.disabled;\n    }\n  }, {\n    key: \"enableSelection\",\n    value: function enableSelection() {\n      this.selection.enable();\n      return this;\n    }\n  }, {\n    key: \"disableSelection\",\n    value: function disableSelection() {\n      this.selection.disable();\n      return this;\n    }\n  }, {\n    key: \"toggleSelection\",\n    value: function toggleSelection(enabled) {\n      if (enabled != null) {\n        if (enabled !== this.isSelectionEnabled()) {\n          if (enabled) {\n            this.enableSelection();\n          } else {\n            this.disableSelection();\n          }\n        }\n      } else if (this.isSelectionEnabled()) {\n        this.disableSelection();\n      } else {\n        this.enableSelection();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isMultipleSelection\",\n    value: function isMultipleSelection() {\n      return this.selection.isMultiple();\n    }\n  }, {\n    key: \"enableMultipleSelection\",\n    value: function enableMultipleSelection() {\n      this.selection.enableMultiple();\n      return this;\n    }\n  }, {\n    key: \"disableMultipleSelection\",\n    value: function disableMultipleSelection() {\n      this.selection.disableMultiple();\n      return this;\n    }\n  }, {\n    key: \"toggleMultipleSelection\",\n    value: function toggleMultipleSelection(multiple) {\n      if (multiple != null) {\n        if (multiple !== this.isMultipleSelection()) {\n          if (multiple) {\n            this.enableMultipleSelection();\n          } else {\n            this.disableMultipleSelection();\n          }\n        }\n      } else if (this.isMultipleSelection()) {\n        this.disableMultipleSelection();\n      } else {\n        this.enableMultipleSelection();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isSelectionMovable\",\n    value: function isSelectionMovable() {\n      return this.selection.widget.options.movable !== false;\n    }\n  }, {\n    key: \"enableSelectionMovable\",\n    value: function enableSelectionMovable() {\n      this.selection.widget.options.movable = true;\n      return this;\n    }\n  }, {\n    key: \"disableSelectionMovable\",\n    value: function disableSelectionMovable() {\n      this.selection.widget.options.movable = false;\n      return this;\n    }\n  }, {\n    key: \"toggleSelectionMovable\",\n    value: function toggleSelectionMovable(movable) {\n      if (movable != null) {\n        if (movable !== this.isSelectionMovable()) {\n          if (movable) {\n            this.enableSelectionMovable();\n          } else {\n            this.disableSelectionMovable();\n          }\n        }\n      } else if (this.isSelectionMovable()) {\n        this.disableSelectionMovable();\n      } else {\n        this.enableSelectionMovable();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isRubberbandEnabled\",\n    value: function isRubberbandEnabled() {\n      return !this.selection.rubberbandDisabled;\n    }\n  }, {\n    key: \"enableRubberband\",\n    value: function enableRubberband() {\n      this.selection.enableRubberband();\n      return this;\n    }\n  }, {\n    key: \"disableRubberband\",\n    value: function disableRubberband() {\n      this.selection.disableRubberband();\n      return this;\n    }\n  }, {\n    key: \"toggleRubberband\",\n    value: function toggleRubberband(enabled) {\n      if (enabled != null) {\n        if (enabled !== this.isRubberbandEnabled()) {\n          if (enabled) {\n            this.enableRubberband();\n          } else {\n            this.disableRubberband();\n          }\n        }\n      } else if (this.isRubberbandEnabled()) {\n        this.disableRubberband();\n      } else {\n        this.enableRubberband();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isStrictRubberband\",\n    value: function isStrictRubberband() {\n      return this.selection.widget.options.strict === true;\n    }\n  }, {\n    key: \"enableStrictRubberband\",\n    value: function enableStrictRubberband() {\n      this.selection.widget.options.strict = true;\n      return this;\n    }\n  }, {\n    key: \"disableStrictRubberband\",\n    value: function disableStrictRubberband() {\n      this.selection.widget.options.strict = false;\n      return this;\n    }\n  }, {\n    key: \"toggleStrictRubberband\",\n    value: function toggleStrictRubberband(strict) {\n      if (strict != null) {\n        if (strict !== this.isStrictRubberband()) {\n          if (strict) {\n            this.enableStrictRubberband();\n          } else {\n            this.disableStrictRubberband();\n          }\n        }\n      } else if (this.isStrictRubberband()) {\n        this.disableStrictRubberband();\n      } else {\n        this.enableStrictRubberband();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setRubberbandModifiers\",\n    value: function setRubberbandModifiers(modifiers) {\n      this.selection.setModifiers(modifiers);\n    }\n  }, {\n    key: \"setSelectionFilter\",\n    value: function setSelectionFilter(filter) {\n      this.selection.setFilter(filter);\n      return this;\n    }\n  }, {\n    key: \"setSelectionDisplayContent\",\n    value: function setSelectionDisplayContent(content) {\n      this.selection.setContent(content);\n      return this;\n    }\n  }, {\n    key: \"isSelectionEmpty\",\n    value: function isSelectionEmpty() {\n      return this.selection.isEmpty();\n    }\n  }, {\n    key: \"cleanSelection\",\n    value: function cleanSelection(options) {\n      this.selection.clean(options);\n      return this;\n    }\n  }, {\n    key: \"resetSelection\",\n    value: function resetSelection(cells, options) {\n      this.selection.reset(cells, options);\n      return this;\n    }\n  }, {\n    key: \"getSelectedCells\",\n    value: function getSelectedCells() {\n      return this.selection.cells;\n    }\n  }, {\n    key: \"getSelectedCellCount\",\n    value: function getSelectedCellCount() {\n      return this.selection.length;\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(cell) {\n      return this.selection.isSelected(cell);\n    }\n  }, {\n    key: \"select\",\n    value: function select(cells, options) {\n      this.selection.select(cells, options);\n      return this;\n    }\n  }, {\n    key: \"unselect\",\n    value: function unselect(cells, options) {\n      this.selection.unselect(cells, options);\n      return this;\n    } // #endregion\n    // #region snapline\n\n  }, {\n    key: \"isSnaplineEnabled\",\n    value: function isSnaplineEnabled() {\n      return !this.snapline.widget.disabled;\n    }\n  }, {\n    key: \"enableSnapline\",\n    value: function enableSnapline() {\n      this.snapline.widget.enable();\n      return this;\n    }\n  }, {\n    key: \"disableSnapline\",\n    value: function disableSnapline() {\n      this.snapline.widget.disable();\n      return this;\n    }\n  }, {\n    key: \"toggleSnapline\",\n    value: function toggleSnapline(enabled) {\n      if (enabled != null) {\n        if (enabled !== this.isSnaplineEnabled()) {\n          if (enabled) {\n            this.enableSnapline();\n          } else {\n            this.disableSnapline();\n          }\n        }\n      } else {\n        if (this.isSnaplineEnabled()) {\n          this.disableSnapline();\n        } else {\n          this.enableSnapline();\n        }\n\n        return this;\n      }\n    }\n  }, {\n    key: \"hideSnapline\",\n    value: function hideSnapline() {\n      this.snapline.widget.hide();\n      return this;\n    }\n  }, {\n    key: \"setSnaplineFilter\",\n    value: function setSnaplineFilter(filter) {\n      this.snapline.widget.setFilter(filter);\n      return this;\n    }\n  }, {\n    key: \"isSnaplineOnResizingEnabled\",\n    value: function isSnaplineOnResizingEnabled() {\n      return this.snapline.widget.options.resizing === true;\n    }\n  }, {\n    key: \"enableSnaplineOnResizing\",\n    value: function enableSnaplineOnResizing() {\n      this.snapline.widget.options.resizing = true;\n      return this;\n    }\n  }, {\n    key: \"disableSnaplineOnResizing\",\n    value: function disableSnaplineOnResizing() {\n      this.snapline.widget.options.resizing = false;\n      return this;\n    }\n  }, {\n    key: \"toggleSnaplineOnResizing\",\n    value: function toggleSnaplineOnResizing(enableOnResizing) {\n      if (enableOnResizing != null) {\n        if (enableOnResizing !== this.isSnaplineOnResizingEnabled()) {\n          if (enableOnResizing) {\n            this.enableSnaplineOnResizing();\n          } else {\n            this.disableSnaplineOnResizing();\n          }\n        }\n      } else if (this.isSnaplineOnResizingEnabled()) {\n        this.disableSnaplineOnResizing();\n      } else {\n        this.enableSnaplineOnResizing();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isSharpSnapline\",\n    value: function isSharpSnapline() {\n      return this.snapline.widget.options.sharp === true;\n    }\n  }, {\n    key: \"enableSharpSnapline\",\n    value: function enableSharpSnapline() {\n      this.snapline.widget.options.sharp = true;\n      return this;\n    }\n  }, {\n    key: \"disableSharpSnapline\",\n    value: function disableSharpSnapline() {\n      this.snapline.widget.options.sharp = false;\n      return this;\n    }\n  }, {\n    key: \"toggleSharpSnapline\",\n    value: function toggleSharpSnapline(sharp) {\n      if (sharp != null) {\n        if (sharp !== this.isSharpSnapline()) {\n          if (sharp) {\n            this.enableSharpSnapline();\n          } else {\n            this.disableSharpSnapline();\n          }\n        }\n      } else if (this.isSharpSnapline()) {\n        this.disableSharpSnapline();\n      } else {\n        this.enableSharpSnapline();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getSnaplineTolerance\",\n    value: function getSnaplineTolerance() {\n      return this.snapline.widget.options.tolerance;\n    }\n  }, {\n    key: \"setSnaplineTolerance\",\n    value: function setSnaplineTolerance(tolerance) {\n      this.snapline.widget.options.tolerance = tolerance;\n      return this;\n    } // #endregion\n    // #region tools\n\n  }, {\n    key: \"removeTools\",\n    value: function removeTools() {\n      this.emit('tools:remove');\n      return this;\n    }\n  }, {\n    key: \"hideTools\",\n    value: function hideTools() {\n      this.emit('tools:hide');\n      return this;\n    }\n  }, {\n    key: \"showTools\",\n    value: function showTools() {\n      this.emit('tools:show');\n      return this;\n    } // #endregion\n    // #region format\n\n  }, {\n    key: \"toSVG\",\n    value: function toSVG(callback) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.format.toSVG(callback, options);\n    }\n  }, {\n    key: \"toDataURL\",\n    value: function toDataURL(callback, options) {\n      this.format.toDataURL(callback, options);\n    }\n  }, {\n    key: \"toPNG\",\n    value: function toPNG(callback) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.format.toPNG(callback, options);\n    }\n  }, {\n    key: \"toJPEG\",\n    value: function toJPEG(callback) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.format.toJPEG(callback, options);\n    } // #endregion\n    // #region print\n\n  }, {\n    key: \"printPreview\",\n    value: function printPreview(options) {\n      this.print.show(options);\n    } // #endregion\n    // #region dispose\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.clearCells();\n      this.off();\n      this.css.dispose();\n      this.hook.dispose();\n      this.defs.dispose();\n      this.grid.dispose();\n      this.coord.dispose();\n      this.transform.dispose();\n      this.knob.dispose();\n      this.highlight.dispose();\n      this.background.dispose();\n      this.clipboard.dispose();\n      this.snapline.dispose();\n      this.selection.dispose();\n      this.history.dispose();\n      this.keyboard.dispose();\n      this.mousewheel.dispose();\n      this.print.dispose();\n      this.format.dispose();\n      this.minimap.dispose();\n      this.panning.dispose();\n      this.scroller.dispose();\n      this.view.dispose();\n      this.renderer.dispose();\n      this.size.dispose();\n    }\n  }]);\n\n  return Graph;\n}(Basecoat, Symbol.toStringTag);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"lockScroller\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"unlockScroller\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"updateScroller\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"getScrollbarPosition\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"setScrollbarPosition\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"scrollToPoint\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"scrollToContent\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"scrollToCell\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"transitionToPoint\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"transitionToRect\", null);\n\n__decorate([Basecoat.dispose()], Graph.prototype, \"dispose\", null);\n\n(function (Graph) {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  Graph.View = GraphView;\n  Graph.Hook = HookManager;\n  Graph.Renderer = ViewRenderer;\n  Graph.Keyboard = Shortcut;\n  Graph.MouseWheel = Wheel;\n  Graph.BaseManager = Base;\n  Graph.DefsManager = Defs;\n  Graph.GridManager = Grid;\n  Graph.CoordManager = Coord;\n  Graph.PrintManager = Print;\n  Graph.FormatManager = Format;\n  Graph.MiniMapManager = MiniMap;\n  Graph.HistoryManager = History;\n  Graph.SnaplineManager = Snapline;\n  Graph.ScrollerManager = Scroller;\n  Graph.ClipboardManager = Clipboard;\n  Graph.TransformManager = Transform;\n  Graph.HighlightManager = Highlight;\n  Graph.BackgroundManager = Background;\n  Graph.SelectionManager = Selection;\n})(Graph || (Graph = {}));\n\n(function (Graph) {\n  Graph.toStringTag = \"X6.\".concat(Graph.name);\n\n  function isGraph(instance) {\n    if (instance == null) {\n      return false;\n    }\n\n    if (instance instanceof Graph) {\n      return true;\n    }\n\n    var tag = instance[Symbol.toStringTag];\n    var graph = instance;\n\n    if ((tag == null || tag === Graph.toStringTag) && graph.hook != null && graph.view != null && graph.model != null) {\n      return true;\n    }\n\n    return false;\n  }\n\n  Graph.isGraph = isGraph;\n})(Graph || (Graph = {}));\n\n(function (Graph) {\n  function render(options, data) {\n    var graph = options instanceof HTMLElement ? new Graph({\n      container: options\n    }) : new Graph(options);\n\n    if (data != null) {\n      graph.fromJSON(data);\n    }\n\n    return graph;\n  }\n\n  Graph.render = render;\n})(Graph || (Graph = {}));\n\n(function (Graph) {\n  Graph.registerNode = Node.registry.register;\n  Graph.registerEdge = Edge.registry.register;\n  Graph.registerView = CellView.registry.register;\n  Graph.registerAttr = Registry.Attr.registry.register;\n  Graph.registerGrid = Registry.Grid.registry.register;\n  Graph.registerFilter = Registry.Filter.registry.register;\n  Graph.registerNodeTool = Registry.NodeTool.registry.register;\n  Graph.registerEdgeTool = Registry.EdgeTool.registry.register;\n  Graph.registerBackground = Registry.Background.registry.register;\n  Graph.registerHighlighter = Registry.Highlighter.registry.register;\n  Graph.registerPortLayout = Registry.PortLayout.registry.register;\n  Graph.registerPortLabelLayout = Registry.PortLabelLayout.registry.register;\n  Graph.registerMarker = Registry.Marker.registry.register;\n  Graph.registerRouter = Registry.Router.registry.register;\n  Graph.registerConnector = Registry.Connector.registry.register;\n  Graph.registerAnchor = Registry.NodeAnchor.registry.register;\n  Graph.registerEdgeAnchor = Registry.EdgeAnchor.registry.register;\n  Graph.registerConnectionPoint = Registry.ConnectionPoint.registry.register;\n  Graph.registerConnectionStrategy = Registry.ConnectionStrategy.registry.register;\n  Graph.registerHTMLComponent = HTML.componentRegistry.register;\n})(Graph || (Graph = {}));\n\n(function (Graph) {\n  Graph.unregisterNode = Node.registry.unregister;\n  Graph.unregisterEdge = Edge.registry.unregister;\n  Graph.unregisterView = CellView.registry.unregister;\n  Graph.unregisterAttr = Registry.Attr.registry.unregister;\n  Graph.unregisterGrid = Registry.Grid.registry.unregister;\n  Graph.unregisterFilter = Registry.Filter.registry.unregister;\n  Graph.unregisterNodeTool = Registry.NodeTool.registry.unregister;\n  Graph.unregisterEdgeTool = Registry.EdgeTool.registry.unregister;\n  Graph.unregisterBackground = Registry.Background.registry.unregister;\n  Graph.unregisterHighlighter = Registry.Highlighter.registry.unregister;\n  Graph.unregisterPortLayout = Registry.PortLayout.registry.unregister;\n  Graph.unregisterPortLabelLayout = Registry.PortLabelLayout.registry.unregister;\n  Graph.unregisterMarker = Registry.Marker.registry.unregister;\n  Graph.unregisterRouter = Registry.Router.registry.unregister;\n  Graph.unregisterConnector = Registry.Connector.registry.unregister;\n  Graph.unregisterAnchor = Registry.NodeAnchor.registry.unregister;\n  Graph.unregisterEdgeAnchor = Registry.EdgeAnchor.registry.unregister;\n  Graph.unregisterConnectionPoint = Registry.ConnectionPoint.registry.unregister;\n  Graph.unregisterConnectionStrategy = Registry.ConnectionStrategy.registry.unregister;\n  Graph.unregisterHTMLComponent = HTML.componentRegistry.unregister;\n})(Graph || (Graph = {}));","map":{"version":3,"sources":["../../src/graph/graph.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Basecoat } from '../common';\nimport { Point, Rectangle } from '../geometry';\nimport { Cell } from '../model/cell';\nimport { Node } from '../model/node';\nimport { Edge } from '../model/edge';\nimport { CellView } from '../view/cell';\nimport * as Registry from '../registry';\nimport { HTML } from '../shape/standard/html';\nimport { Base } from './base';\nimport { GraphView } from './view';\nimport { Decorator } from './decorator';\nimport { CSSManager } from './css';\nimport { Hook as HookManager } from './hook';\nimport { Options as GraphOptions } from './options';\nimport { DefsManager as Defs } from './defs';\nimport { GridManager as Grid } from './grid';\nimport { CoordManager as Coord } from './coord';\nimport { Keyboard as Shortcut } from './keyboard';\nimport { PrintManager as Print } from './print';\nimport { MouseWheel as Wheel } from './mousewheel';\nimport { FormatManager as Format } from './format';\nimport { Renderer as ViewRenderer } from './renderer';\nimport { HistoryManager as History } from './history';\nimport { MiniMapManager as MiniMap } from './minimap';\nimport { SnaplineManager as Snapline } from './snapline';\nimport { ScrollerManager as Scroller } from './scroller';\nimport { SelectionManager as Selection } from './selection';\nimport { HighlightManager as Highlight } from './highlight';\nimport { TransformManager as Transform } from './transform';\nimport { ClipboardManager as Clipboard } from './clipboard';\nimport { BackgroundManager as Background } from './background';\nexport class Graph extends Basecoat {\n    constructor(options) {\n        super();\n        this.options = GraphOptions.get(options);\n        this.css = new CSSManager(this);\n        this.hook = new HookManager(this);\n        this.view = this.hook.createView();\n        this.defs = this.hook.createDefsManager();\n        this.coord = this.hook.createCoordManager();\n        this.transform = this.hook.createTransformManager();\n        this.knob = this.hook.createKnobManager();\n        this.highlight = this.hook.createHighlightManager();\n        this.grid = this.hook.createGridManager();\n        this.background = this.hook.createBackgroundManager();\n        this.model = this.hook.createModel();\n        this.renderer = this.hook.createRenderer();\n        this.clipboard = this.hook.createClipboardManager();\n        this.snapline = this.hook.createSnaplineManager();\n        this.selection = this.hook.createSelectionManager();\n        this.history = this.hook.createHistoryManager();\n        this.scroller = this.hook.createScrollerManager();\n        this.minimap = this.hook.createMiniMapManager();\n        this.keyboard = this.hook.createKeyboard();\n        this.mousewheel = this.hook.createMouseWheel();\n        this.print = this.hook.createPrintManager();\n        this.format = this.hook.createFormatManager();\n        this.panning = this.hook.createPanningManager();\n        this.size = this.hook.createSizeManager();\n    }\n    get container() {\n        return this.view.container;\n    }\n    get [Symbol.toStringTag]() {\n        return Graph.toStringTag;\n    }\n    // #region model\n    isNode(cell) {\n        return cell.isNode();\n    }\n    isEdge(cell) {\n        return cell.isEdge();\n    }\n    resetCells(cells, options = {}) {\n        this.model.resetCells(cells, options);\n        return this;\n    }\n    clearCells(options = {}) {\n        this.model.clear(options);\n        return this;\n    }\n    toJSON(options = {}) {\n        return this.model.toJSON(options);\n    }\n    parseJSON(data) {\n        return this.model.parseJSON(data);\n    }\n    fromJSON(data, options = {}) {\n        this.model.fromJSON(data, options);\n        return this;\n    }\n    getCellById(id) {\n        return this.model.getCell(id);\n    }\n    addNode(node, options = {}) {\n        return this.model.addNode(node, options);\n    }\n    addNodes(nodes, options = {}) {\n        return this.addCell(nodes.map((node) => (Node.isNode(node) ? node : this.createNode(node))), options);\n    }\n    createNode(metadata) {\n        return this.model.createNode(metadata);\n    }\n    removeNode(node, options = {}) {\n        return this.model.removeCell(node, options);\n    }\n    addEdge(edge, options = {}) {\n        return this.model.addEdge(edge, options);\n    }\n    addEdges(edges, options = {}) {\n        return this.addCell(edges.map((edge) => (Edge.isEdge(edge) ? edge : this.createEdge(edge))), options);\n    }\n    removeEdge(edge, options = {}) {\n        return this.model.removeCell(edge, options);\n    }\n    createEdge(metadata) {\n        return this.model.createEdge(metadata);\n    }\n    addCell(cell, options = {}) {\n        this.model.addCell(cell, options);\n        return this;\n    }\n    removeCell(cell, options = {}) {\n        return this.model.removeCell(cell, options);\n    }\n    removeCells(cells, options = {}) {\n        return this.model.removeCells(cells, options);\n    }\n    removeConnectedEdges(cell, options = {}) {\n        return this.model.removeConnectedEdges(cell, options);\n    }\n    disconnectConnectedEdges(cell, options = {}) {\n        this.model.disconnectConnectedEdges(cell, options);\n        return this;\n    }\n    hasCell(cell) {\n        return this.model.has(cell);\n    }\n    /**\n     * **Deprecation Notice:** `getCell` is deprecated and will be moved in next\n     * major release. Use `getCellById()` instead.\n     *\n     * @deprecated\n     */\n    getCell(id) {\n        return this.model.getCell(id);\n    }\n    getCells() {\n        return this.model.getCells();\n    }\n    getCellCount() {\n        return this.model.total();\n    }\n    /**\n     * Returns all the nodes in the graph.\n     */\n    getNodes() {\n        return this.model.getNodes();\n    }\n    /**\n     * Returns all the edges in the graph.\n     */\n    getEdges() {\n        return this.model.getEdges();\n    }\n    /**\n     * Returns all outgoing edges for the node.\n     */\n    getOutgoingEdges(cell) {\n        return this.model.getOutgoingEdges(cell);\n    }\n    /**\n     * Returns all incoming edges for the node.\n     */\n    getIncomingEdges(cell) {\n        return this.model.getIncomingEdges(cell);\n    }\n    /**\n     * Returns edges connected with cell.\n     */\n    getConnectedEdges(cell, options = {}) {\n        return this.model.getConnectedEdges(cell, options);\n    }\n    /**\n     * Returns an array of all the roots of the graph.\n     */\n    getRootNodes() {\n        return this.model.getRoots();\n    }\n    /**\n     * Returns an array of all the leafs of the graph.\n     */\n    getLeafNodes() {\n        return this.model.getLeafs();\n    }\n    /**\n     * Returns `true` if the node is a root node, i.e.\n     * there is no  edges coming to the node.\n     */\n    isRootNode(cell) {\n        return this.model.isRoot(cell);\n    }\n    /**\n     * Returns `true` if the node is a leaf node, i.e.\n     * there is no edges going out from the node.\n     */\n    isLeafNode(cell) {\n        return this.model.isLeaf(cell);\n    }\n    /**\n     * Returns all the neighbors of node in the graph. Neighbors are all\n     * the nodes connected to node via either incoming or outgoing edge.\n     */\n    getNeighbors(cell, options = {}) {\n        return this.model.getNeighbors(cell, options);\n    }\n    /**\n     * Returns `true` if `cell2` is a neighbor of `cell1`.\n     */\n    isNeighbor(cell1, cell2, options = {}) {\n        return this.model.isNeighbor(cell1, cell2, options);\n    }\n    getSuccessors(cell, options = {}) {\n        return this.model.getSuccessors(cell, options);\n    }\n    /**\n     * Returns `true` if `cell2` is a successor of `cell1`.\n     */\n    isSuccessor(cell1, cell2, options = {}) {\n        return this.model.isSuccessor(cell1, cell2, options);\n    }\n    getPredecessors(cell, options = {}) {\n        return this.model.getPredecessors(cell, options);\n    }\n    /**\n     * Returns `true` if `cell2` is a predecessor of `cell1`.\n     */\n    isPredecessor(cell1, cell2, options = {}) {\n        return this.model.isPredecessor(cell1, cell2, options);\n    }\n    getCommonAncestor(...cells) {\n        return this.model.getCommonAncestor(...cells);\n    }\n    /**\n     * Returns an array of cells that result from finding nodes/edges that\n     * are connected to any of the cells in the cells array. This function\n     * loops over cells and if the current cell is a edge, it collects its\n     * source/target nodes; if it is an node, it collects its incoming and\n     * outgoing edges if both the edge terminal (source/target) are in the\n     * cells array.\n     */\n    getSubGraph(cells, options = {}) {\n        return this.model.getSubGraph(cells, options);\n    }\n    /**\n     * Clones the whole subgraph (including all the connected links whose\n     * source/target is in the subgraph). If `options.deep` is `true`, also\n     * take into account all the embedded cells of all the subgraph cells.\n     *\n     * Returns a map of the form: { [original cell ID]: [clone] }.\n     */\n    cloneSubGraph(cells, options = {}) {\n        return this.model.cloneSubGraph(cells, options);\n    }\n    cloneCells(cells) {\n        return this.model.cloneCells(cells);\n    }\n    getNodesFromPoint(x, y) {\n        return this.model.getNodesFromPoint(x, y);\n    }\n    getNodesInArea(x, y, w, h, options) {\n        return this.model.getNodesInArea(x, y, w, h, options);\n    }\n    getNodesUnderNode(node, options = {}) {\n        return this.model.getNodesUnderNode(node, options);\n    }\n    searchCell(cell, iterator, options = {}) {\n        this.model.search(cell, iterator, options);\n        return this;\n    }\n    /** *\n     * Returns an array of IDs of nodes on the shortest\n     * path between source and target.\n     */\n    getShortestPath(source, target, options = {}) {\n        return this.model.getShortestPath(source, target, options);\n    }\n    /**\n     * Returns the bounding box that surrounds all cells in the graph.\n     */\n    getAllCellsBBox() {\n        return this.model.getAllCellsBBox();\n    }\n    /**\n     * Returns the bounding box that surrounds all the given cells.\n     */\n    getCellsBBox(cells, options = {}) {\n        return this.model.getCellsBBox(cells, options);\n    }\n    startBatch(name, data = {}) {\n        this.model.startBatch(name, data);\n    }\n    stopBatch(name, data = {}) {\n        this.model.stopBatch(name, data);\n    }\n    batchUpdate(arg1, arg2, arg3) {\n        const name = typeof arg1 === 'string' ? arg1 : 'update';\n        const execute = typeof arg1 === 'string' ? arg2 : arg1;\n        const data = typeof arg2 === 'function' ? arg3 : arg2;\n        this.startBatch(name, data);\n        const result = execute();\n        this.stopBatch(name, data);\n        return result;\n    }\n    // #endregion\n    // #region view\n    isFrozen() {\n        return this.renderer.isFrozen();\n    }\n    freeze(options = {}) {\n        this.renderer.freeze(options);\n        return this;\n    }\n    unfreeze(options = {}) {\n        this.renderer.unfreeze(options);\n        return this;\n    }\n    isAsync() {\n        return this.renderer.isAsync();\n    }\n    setAsync(async) {\n        this.renderer.setAsync(async);\n        return this;\n    }\n    findView(ref) {\n        if (Cell.isCell(ref)) {\n            return this.findViewByCell(ref);\n        }\n        return this.findViewByElem(ref);\n    }\n    findViews(ref) {\n        if (Rectangle.isRectangleLike(ref)) {\n            return this.findViewsInArea(ref);\n        }\n        if (Point.isPointLike(ref)) {\n            return this.findViewsFromPoint(ref);\n        }\n        return [];\n    }\n    findViewByCell(cell) {\n        return this.renderer.findViewByCell(cell);\n    }\n    findViewByElem(elem) {\n        return this.renderer.findViewByElem(elem);\n    }\n    findViewsFromPoint(x, y) {\n        const p = typeof x === 'number' ? { x, y: y } : x;\n        return this.renderer.findViewsFromPoint(p);\n    }\n    findViewsInArea(x, y, width, height, options) {\n        const rect = typeof x === 'number'\n            ? {\n                x,\n                y: y,\n                width: width,\n                height: height,\n            }\n            : x;\n        const localOptions = typeof x === 'number'\n            ? options\n            : y;\n        return this.renderer.findViewsInArea(rect, localOptions);\n    }\n    isViewMounted(view) {\n        return this.renderer.isViewMounted(view);\n    }\n    getMountedViews() {\n        return this.renderer.getMountedViews();\n    }\n    getUnmountedViews() {\n        return this.renderer.getUnmountedViews();\n    }\n    matrix(mat) {\n        if (typeof mat === 'undefined') {\n            return this.transform.getMatrix();\n        }\n        this.transform.setMatrix(mat);\n        return this;\n    }\n    resize(width, height) {\n        this.size.resize(width, height);\n        return this;\n    }\n    resizeGraph(width, height) {\n        this.size.resizeGraph(width, height);\n        return this;\n    }\n    resizeScroller(width, height) {\n        this.size.resizeScroller(width, height);\n        return this;\n    }\n    resizePage(width, height) {\n        this.size.resizePage(width, height);\n        return this;\n    }\n    scale(sx, sy = sx, cx = 0, cy = 0) {\n        if (typeof sx === 'undefined') {\n            return this.transform.getScale();\n        }\n        this.transform.scale(sx, sy, cx, cy);\n        return this;\n    }\n    zoom(factor, options) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            if (typeof factor === 'undefined') {\n                return scroller.zoom();\n            }\n            scroller.zoom(factor, options);\n        }\n        else {\n            if (typeof factor === 'undefined') {\n                return this.transform.getZoom();\n            }\n            this.transform.zoom(factor, options);\n        }\n        return this;\n    }\n    zoomTo(factor, options = {}) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.zoom(factor, Object.assign(Object.assign({}, options), { absolute: true }));\n        }\n        else {\n            this.transform.zoom(factor, Object.assign(Object.assign({}, options), { absolute: true }));\n        }\n    }\n    zoomToRect(rect, options = {}) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.zoomToRect(rect, options);\n        }\n        else {\n            this.transform.zoomToRect(rect, options);\n        }\n        return this;\n    }\n    zoomToFit(options = {}) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.zoomToFit(options);\n        }\n        else {\n            this.transform.zoomToFit(options);\n        }\n        return this;\n    }\n    rotate(angle, cx, cy) {\n        if (typeof angle === 'undefined') {\n            return this.transform.getRotation();\n        }\n        this.transform.rotate(angle, cx, cy);\n        return this;\n    }\n    translate(tx, ty) {\n        if (typeof tx === 'undefined') {\n            return this.transform.getTranslation();\n        }\n        this.transform.translate(tx, ty);\n        return this;\n    }\n    translateBy(dx, dy) {\n        const ts = this.translate();\n        const tx = ts.tx + dx;\n        const ty = ts.ty + dy;\n        return this.translate(tx, ty);\n    }\n    /**\n     * **Deprecation Notice:** `getArea` is deprecated and will be moved in next\n     * major release. Use `getGraphArea()` instead.\n     *\n     * @deprecated\n     */\n    getArea() {\n        return this.transform.getGraphArea();\n    }\n    getGraphArea() {\n        return this.transform.getGraphArea();\n    }\n    getContentArea(options = {}) {\n        return this.transform.getContentArea(options);\n    }\n    getContentBBox(options = {}) {\n        return this.transform.getContentBBox(options);\n    }\n    fitToContent(gridWidth, gridHeight, padding, options) {\n        return this.transform.fitToContent(gridWidth, gridHeight, padding, options);\n    }\n    scaleContentToFit(options = {}) {\n        this.transform.scaleContentToFit(options);\n        return this;\n    }\n    /**\n     * Position the center of graph to the center of the viewport.\n     */\n    center(optons) {\n        return this.centerPoint(optons);\n    }\n    centerPoint(x, y, options) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.centerPoint(x, y, options);\n        }\n        else {\n            this.transform.centerPoint(x, y);\n        }\n        return this;\n    }\n    centerContent(options) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.centerContent(options);\n        }\n        else {\n            this.transform.centerContent(options);\n        }\n        return this;\n    }\n    centerCell(cell, options) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.centerCell(cell, options);\n        }\n        else {\n            this.transform.centerCell(cell);\n        }\n        return this;\n    }\n    positionPoint(point, x, y, options = {}) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.positionPoint(point, x, y, options);\n        }\n        else {\n            this.transform.positionPoint(point, x, y);\n        }\n        return this;\n    }\n    positionRect(rect, direction, options) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.positionRect(rect, direction, options);\n        }\n        else {\n            this.transform.positionRect(rect, direction);\n        }\n        return this;\n    }\n    positionCell(cell, direction, options) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.positionCell(cell, direction, options);\n        }\n        else {\n            this.transform.positionCell(cell, direction);\n        }\n        return this;\n    }\n    positionContent(pos, options) {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            scroller.positionContent(pos, options);\n        }\n        else {\n            this.transform.positionContent(pos, options);\n        }\n        return this;\n    }\n    // #endregion\n    // #region coord\n    getClientMatrix() {\n        return this.coord.getClientMatrix();\n    }\n    /**\n     * Returns coordinates of the graph viewport, relative to the window.\n     */\n    getClientOffset() {\n        return this.coord.getClientOffset();\n    }\n    /**\n     * Returns coordinates of the graph viewport, relative to the document.\n     */\n    getPageOffset() {\n        return this.coord.getPageOffset();\n    }\n    snapToGrid(x, y) {\n        return this.coord.snapToGrid(x, y);\n    }\n    pageToLocal(x, y, width, height) {\n        if (Rectangle.isRectangleLike(x)) {\n            return this.coord.pageToLocalRect(x);\n        }\n        if (typeof x === 'number' &&\n            typeof y === 'number' &&\n            typeof width === 'number' &&\n            typeof height === 'number') {\n            return this.coord.pageToLocalRect(x, y, width, height);\n        }\n        return this.coord.pageToLocalPoint(x, y);\n    }\n    localToPage(x, y, width, height) {\n        if (Rectangle.isRectangleLike(x)) {\n            return this.coord.localToPageRect(x);\n        }\n        if (typeof x === 'number' &&\n            typeof y === 'number' &&\n            typeof width === 'number' &&\n            typeof height === 'number') {\n            return this.coord.localToPageRect(x, y, width, height);\n        }\n        return this.coord.localToPagePoint(x, y);\n    }\n    clientToLocal(x, y, width, height) {\n        if (Rectangle.isRectangleLike(x)) {\n            return this.coord.clientToLocalRect(x);\n        }\n        if (typeof x === 'number' &&\n            typeof y === 'number' &&\n            typeof width === 'number' &&\n            typeof height === 'number') {\n            return this.coord.clientToLocalRect(x, y, width, height);\n        }\n        return this.coord.clientToLocalPoint(x, y);\n    }\n    localToClient(x, y, width, height) {\n        if (Rectangle.isRectangleLike(x)) {\n            return this.coord.localToClientRect(x);\n        }\n        if (typeof x === 'number' &&\n            typeof y === 'number' &&\n            typeof width === 'number' &&\n            typeof height === 'number') {\n            return this.coord.localToClientRect(x, y, width, height);\n        }\n        return this.coord.localToClientPoint(x, y);\n    }\n    localToGraph(x, y, width, height) {\n        if (Rectangle.isRectangleLike(x)) {\n            return this.coord.localToGraphRect(x);\n        }\n        if (typeof x === 'number' &&\n            typeof y === 'number' &&\n            typeof width === 'number' &&\n            typeof height === 'number') {\n            return this.coord.localToGraphRect(x, y, width, height);\n        }\n        return this.coord.localToGraphPoint(x, y);\n    }\n    graphToLocal(x, y, width, height) {\n        if (Rectangle.isRectangleLike(x)) {\n            return this.coord.graphToLocalRect(x);\n        }\n        if (typeof x === 'number' &&\n            typeof y === 'number' &&\n            typeof width === 'number' &&\n            typeof height === 'number') {\n            return this.coord.graphToLocalRect(x, y, width, height);\n        }\n        return this.coord.graphToLocalPoint(x, y);\n    }\n    clientToGraph(x, y, width, height) {\n        if (Rectangle.isRectangleLike(x)) {\n            return this.coord.clientToGraphRect(x);\n        }\n        if (typeof x === 'number' &&\n            typeof y === 'number' &&\n            typeof width === 'number' &&\n            typeof height === 'number') {\n            return this.coord.clientToGraphRect(x, y, width, height);\n        }\n        return this.coord.clientToGraphPoint(x, y);\n    }\n    // #endregion\n    // #region defs\n    defineFilter(options) {\n        return this.defs.filter(options);\n    }\n    defineGradient(options) {\n        return this.defs.gradient(options);\n    }\n    defineMarker(options) {\n        return this.defs.marker(options);\n    }\n    // #endregion\n    // #region grid\n    getGridSize() {\n        return this.grid.getGridSize();\n    }\n    setGridSize(gridSize) {\n        this.grid.setGridSize(gridSize);\n        return this;\n    }\n    showGrid() {\n        this.grid.show();\n        return this;\n    }\n    hideGrid() {\n        this.grid.hide();\n        return this;\n    }\n    clearGrid() {\n        this.grid.clear();\n        return this;\n    }\n    drawGrid(options) {\n        this.grid.draw(options);\n        return this;\n    }\n    // #endregion\n    // #region background\n    updateBackground() {\n        this.background.update();\n        return this;\n    }\n    drawBackground(options, onGraph) {\n        const scroller = this.scroller.widget;\n        if (scroller != null && (this.options.background == null || !onGraph)) {\n            scroller.backgroundManager.draw(options);\n        }\n        else {\n            this.background.draw(options);\n        }\n        return this;\n    }\n    clearBackground(onGraph) {\n        const scroller = this.scroller.widget;\n        if (scroller != null && (this.options.background == null || !onGraph)) {\n            scroller.backgroundManager.clear();\n        }\n        else {\n            this.background.clear();\n        }\n        return this;\n    }\n    // #endregion\n    // #region clipboard\n    isClipboardEnabled() {\n        return !this.clipboard.disabled;\n    }\n    enableClipboard() {\n        this.clipboard.enable();\n        return this;\n    }\n    disableClipboard() {\n        this.clipboard.disable();\n        return this;\n    }\n    toggleClipboard(enabled) {\n        if (enabled != null) {\n            if (enabled !== this.isClipboardEnabled()) {\n                if (enabled) {\n                    this.enableClipboard();\n                }\n                else {\n                    this.disableClipboard();\n                }\n            }\n        }\n        else if (this.isClipboardEnabled()) {\n            this.disableClipboard();\n        }\n        else {\n            this.enableClipboard();\n        }\n        return this;\n    }\n    isClipboardEmpty() {\n        return this.clipboard.isEmpty();\n    }\n    getCellsInClipboard() {\n        return this.clipboard.cells;\n    }\n    cleanClipboard() {\n        this.clipboard.clean();\n        return this;\n    }\n    copy(cells, options = {}) {\n        this.clipboard.copy(cells, options);\n        return this;\n    }\n    cut(cells, options = {}) {\n        this.clipboard.cut(cells, options);\n        return this;\n    }\n    paste(options = {}, graph = this) {\n        return this.clipboard.paste(options, graph);\n    }\n    // #endregion\n    // #region redo/undo\n    isHistoryEnabled() {\n        return !this.history.disabled;\n    }\n    enableHistory() {\n        this.history.enable();\n        return this;\n    }\n    disableHistory() {\n        this.history.disable();\n        return this;\n    }\n    toggleHistory(enabled) {\n        if (enabled != null) {\n            if (enabled !== this.isHistoryEnabled()) {\n                if (enabled) {\n                    this.enableHistory();\n                }\n                else {\n                    this.disableHistory();\n                }\n            }\n        }\n        else if (this.isHistoryEnabled()) {\n            this.disableHistory();\n        }\n        else {\n            this.enableHistory();\n        }\n        return this;\n    }\n    undo(options = {}) {\n        this.history.undo(options);\n        return this;\n    }\n    undoAndCancel(options = {}) {\n        this.history.cancel(options);\n        return this;\n    }\n    redo(options = {}) {\n        this.history.redo(options);\n        return this;\n    }\n    canUndo() {\n        return this.history.canUndo();\n    }\n    canRedo() {\n        return this.history.canRedo();\n    }\n    cleanHistory(options = {}) {\n        this.history.clean(options);\n    }\n    // #endregion\n    // #region keyboard\n    isKeyboardEnabled() {\n        return !this.keyboard.disabled;\n    }\n    enableKeyboard() {\n        this.keyboard.enable();\n        return this;\n    }\n    disableKeyboard() {\n        this.keyboard.disable();\n        return this;\n    }\n    toggleKeyboard(enabled) {\n        if (enabled != null) {\n            if (enabled !== this.isKeyboardEnabled()) {\n                if (enabled) {\n                    this.enableKeyboard();\n                }\n                else {\n                    this.disableKeyboard();\n                }\n            }\n        }\n        else if (this.isKeyboardEnabled()) {\n            this.disableKeyboard();\n        }\n        else {\n            this.enableKeyboard();\n        }\n        return this;\n    }\n    bindKey(keys, callback, action) {\n        this.keyboard.on(keys, callback, action);\n        return this;\n    }\n    unbindKey(keys, action) {\n        this.keyboard.off(keys, action);\n        return this;\n    }\n    // #endregion\n    // #region mousewheel\n    isMouseWheelEnabled() {\n        return !this.mousewheel.disabled;\n    }\n    enableMouseWheel() {\n        this.mousewheel.enable();\n        return this;\n    }\n    disableMouseWheel() {\n        this.mousewheel.disable();\n        return this;\n    }\n    toggleMouseWheel(enabled) {\n        if (enabled == null) {\n            if (this.isMouseWheelEnabled()) {\n                this.disableMouseWheel();\n            }\n            else {\n                this.enableMouseWheel();\n            }\n        }\n        else if (enabled) {\n            this.enableMouseWheel();\n        }\n        else {\n            this.disableMouseWheel();\n        }\n        return this;\n    }\n    // #endregion\n    // #region panning\n    isPannable() {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            return this.scroller.pannable;\n        }\n        return this.panning.pannable;\n    }\n    enablePanning() {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            this.scroller.enablePanning();\n        }\n        else {\n            this.panning.enablePanning();\n        }\n        return this;\n    }\n    disablePanning() {\n        const scroller = this.scroller.widget;\n        if (scroller) {\n            this.scroller.disablePanning();\n        }\n        else {\n            this.panning.disablePanning();\n        }\n        return this;\n    }\n    togglePanning(pannable) {\n        if (pannable == null) {\n            if (this.isPannable()) {\n                this.disablePanning();\n            }\n            else {\n                this.enablePanning();\n            }\n        }\n        else if (pannable !== this.isPannable()) {\n            if (pannable) {\n                this.enablePanning();\n            }\n            else {\n                this.disablePanning();\n            }\n        }\n        return this;\n    }\n    // #endregion\n    // #region scroller\n    lockScroller() {\n        var _a;\n        (_a = this.scroller.widget) === null || _a === void 0 ? void 0 : _a.lock();\n    }\n    unlockScroller() {\n        var _a;\n        (_a = this.scroller.widget) === null || _a === void 0 ? void 0 : _a.unlock();\n    }\n    updateScroller() {\n        var _a;\n        (_a = this.scroller.widget) === null || _a === void 0 ? void 0 : _a.update();\n    }\n    getScrollbarPosition() {\n        const scroller = this.scroller.widget;\n        return scroller.scrollbarPosition();\n    }\n    setScrollbarPosition(left, top, options) {\n        const scroller = this.scroller.widget;\n        scroller.scrollbarPosition(left, top, options);\n        return this;\n    }\n    /**\n     * Try to scroll to ensure that the position (x,y) on the graph (in local\n     * coordinates) is at the center of the viewport. If only one of the\n     * coordinates is specified, only scroll in the specified dimension and\n     * keep the other coordinate unchanged.\n     */\n    scrollToPoint(x, y, options) {\n        const scroller = this.scroller.widget;\n        scroller.scrollToPoint(x, y, options);\n        return this;\n    }\n    /**\n     * Try to scroll to ensure that the center of graph content is at the\n     * center of the viewport.\n     */\n    scrollToContent(options) {\n        const scroller = this.scroller.widget;\n        scroller.scrollToContent(options);\n        return this;\n    }\n    /**\n     * Try to scroll to ensure that the center of cell is at the center of\n     * the viewport.\n     */\n    scrollToCell(cell, options) {\n        const scroller = this.scroller.widget;\n        scroller.scrollToCell(cell, options);\n        return this;\n    }\n    transitionToPoint(x, y, options) {\n        const scroller = this.scroller.widget;\n        scroller.transitionToPoint(x, y, options);\n        return this;\n    }\n    transitionToRect(rect, options = {}) {\n        const scroller = this.scroller.widget;\n        scroller.transitionToRect(rect, options);\n        return this;\n    }\n    // #endregion\n    // #region selection\n    isSelectionEnabled() {\n        return !this.selection.disabled;\n    }\n    enableSelection() {\n        this.selection.enable();\n        return this;\n    }\n    disableSelection() {\n        this.selection.disable();\n        return this;\n    }\n    toggleSelection(enabled) {\n        if (enabled != null) {\n            if (enabled !== this.isSelectionEnabled()) {\n                if (enabled) {\n                    this.enableSelection();\n                }\n                else {\n                    this.disableSelection();\n                }\n            }\n        }\n        else if (this.isSelectionEnabled()) {\n            this.disableSelection();\n        }\n        else {\n            this.enableSelection();\n        }\n        return this;\n    }\n    isMultipleSelection() {\n        return this.selection.isMultiple();\n    }\n    enableMultipleSelection() {\n        this.selection.enableMultiple();\n        return this;\n    }\n    disableMultipleSelection() {\n        this.selection.disableMultiple();\n        return this;\n    }\n    toggleMultipleSelection(multiple) {\n        if (multiple != null) {\n            if (multiple !== this.isMultipleSelection()) {\n                if (multiple) {\n                    this.enableMultipleSelection();\n                }\n                else {\n                    this.disableMultipleSelection();\n                }\n            }\n        }\n        else if (this.isMultipleSelection()) {\n            this.disableMultipleSelection();\n        }\n        else {\n            this.enableMultipleSelection();\n        }\n        return this;\n    }\n    isSelectionMovable() {\n        return this.selection.widget.options.movable !== false;\n    }\n    enableSelectionMovable() {\n        this.selection.widget.options.movable = true;\n        return this;\n    }\n    disableSelectionMovable() {\n        this.selection.widget.options.movable = false;\n        return this;\n    }\n    toggleSelectionMovable(movable) {\n        if (movable != null) {\n            if (movable !== this.isSelectionMovable()) {\n                if (movable) {\n                    this.enableSelectionMovable();\n                }\n                else {\n                    this.disableSelectionMovable();\n                }\n            }\n        }\n        else if (this.isSelectionMovable()) {\n            this.disableSelectionMovable();\n        }\n        else {\n            this.enableSelectionMovable();\n        }\n        return this;\n    }\n    isRubberbandEnabled() {\n        return !this.selection.rubberbandDisabled;\n    }\n    enableRubberband() {\n        this.selection.enableRubberband();\n        return this;\n    }\n    disableRubberband() {\n        this.selection.disableRubberband();\n        return this;\n    }\n    toggleRubberband(enabled) {\n        if (enabled != null) {\n            if (enabled !== this.isRubberbandEnabled()) {\n                if (enabled) {\n                    this.enableRubberband();\n                }\n                else {\n                    this.disableRubberband();\n                }\n            }\n        }\n        else if (this.isRubberbandEnabled()) {\n            this.disableRubberband();\n        }\n        else {\n            this.enableRubberband();\n        }\n        return this;\n    }\n    isStrictRubberband() {\n        return this.selection.widget.options.strict === true;\n    }\n    enableStrictRubberband() {\n        this.selection.widget.options.strict = true;\n        return this;\n    }\n    disableStrictRubberband() {\n        this.selection.widget.options.strict = false;\n        return this;\n    }\n    toggleStrictRubberband(strict) {\n        if (strict != null) {\n            if (strict !== this.isStrictRubberband()) {\n                if (strict) {\n                    this.enableStrictRubberband();\n                }\n                else {\n                    this.disableStrictRubberband();\n                }\n            }\n        }\n        else if (this.isStrictRubberband()) {\n            this.disableStrictRubberband();\n        }\n        else {\n            this.enableStrictRubberband();\n        }\n        return this;\n    }\n    setRubberbandModifiers(modifiers) {\n        this.selection.setModifiers(modifiers);\n    }\n    setSelectionFilter(filter) {\n        this.selection.setFilter(filter);\n        return this;\n    }\n    setSelectionDisplayContent(content) {\n        this.selection.setContent(content);\n        return this;\n    }\n    isSelectionEmpty() {\n        return this.selection.isEmpty();\n    }\n    cleanSelection(options) {\n        this.selection.clean(options);\n        return this;\n    }\n    resetSelection(cells, options) {\n        this.selection.reset(cells, options);\n        return this;\n    }\n    getSelectedCells() {\n        return this.selection.cells;\n    }\n    getSelectedCellCount() {\n        return this.selection.length;\n    }\n    isSelected(cell) {\n        return this.selection.isSelected(cell);\n    }\n    select(cells, options) {\n        this.selection.select(cells, options);\n        return this;\n    }\n    unselect(cells, options) {\n        this.selection.unselect(cells, options);\n        return this;\n    }\n    // #endregion\n    // #region snapline\n    isSnaplineEnabled() {\n        return !this.snapline.widget.disabled;\n    }\n    enableSnapline() {\n        this.snapline.widget.enable();\n        return this;\n    }\n    disableSnapline() {\n        this.snapline.widget.disable();\n        return this;\n    }\n    toggleSnapline(enabled) {\n        if (enabled != null) {\n            if (enabled !== this.isSnaplineEnabled()) {\n                if (enabled) {\n                    this.enableSnapline();\n                }\n                else {\n                    this.disableSnapline();\n                }\n            }\n        }\n        else {\n            if (this.isSnaplineEnabled()) {\n                this.disableSnapline();\n            }\n            else {\n                this.enableSnapline();\n            }\n            return this;\n        }\n    }\n    hideSnapline() {\n        this.snapline.widget.hide();\n        return this;\n    }\n    setSnaplineFilter(filter) {\n        this.snapline.widget.setFilter(filter);\n        return this;\n    }\n    isSnaplineOnResizingEnabled() {\n        return this.snapline.widget.options.resizing === true;\n    }\n    enableSnaplineOnResizing() {\n        this.snapline.widget.options.resizing = true;\n        return this;\n    }\n    disableSnaplineOnResizing() {\n        this.snapline.widget.options.resizing = false;\n        return this;\n    }\n    toggleSnaplineOnResizing(enableOnResizing) {\n        if (enableOnResizing != null) {\n            if (enableOnResizing !== this.isSnaplineOnResizingEnabled()) {\n                if (enableOnResizing) {\n                    this.enableSnaplineOnResizing();\n                }\n                else {\n                    this.disableSnaplineOnResizing();\n                }\n            }\n        }\n        else if (this.isSnaplineOnResizingEnabled()) {\n            this.disableSnaplineOnResizing();\n        }\n        else {\n            this.enableSnaplineOnResizing();\n        }\n        return this;\n    }\n    isSharpSnapline() {\n        return this.snapline.widget.options.sharp === true;\n    }\n    enableSharpSnapline() {\n        this.snapline.widget.options.sharp = true;\n        return this;\n    }\n    disableSharpSnapline() {\n        this.snapline.widget.options.sharp = false;\n        return this;\n    }\n    toggleSharpSnapline(sharp) {\n        if (sharp != null) {\n            if (sharp !== this.isSharpSnapline()) {\n                if (sharp) {\n                    this.enableSharpSnapline();\n                }\n                else {\n                    this.disableSharpSnapline();\n                }\n            }\n        }\n        else if (this.isSharpSnapline()) {\n            this.disableSharpSnapline();\n        }\n        else {\n            this.enableSharpSnapline();\n        }\n        return this;\n    }\n    getSnaplineTolerance() {\n        return this.snapline.widget.options.tolerance;\n    }\n    setSnaplineTolerance(tolerance) {\n        this.snapline.widget.options.tolerance = tolerance;\n        return this;\n    }\n    // #endregion\n    // #region tools\n    removeTools() {\n        this.emit('tools:remove');\n        return this;\n    }\n    hideTools() {\n        this.emit('tools:hide');\n        return this;\n    }\n    showTools() {\n        this.emit('tools:show');\n        return this;\n    }\n    // #endregion\n    // #region format\n    toSVG(callback, options = {}) {\n        this.format.toSVG(callback, options);\n    }\n    toDataURL(callback, options) {\n        this.format.toDataURL(callback, options);\n    }\n    toPNG(callback, options = {}) {\n        this.format.toPNG(callback, options);\n    }\n    toJPEG(callback, options = {}) {\n        this.format.toJPEG(callback, options);\n    }\n    // #endregion\n    // #region print\n    printPreview(options) {\n        this.print.show(options);\n    }\n    // #endregion\n    // #region dispose\n    dispose() {\n        this.clearCells();\n        this.off();\n        this.css.dispose();\n        this.hook.dispose();\n        this.defs.dispose();\n        this.grid.dispose();\n        this.coord.dispose();\n        this.transform.dispose();\n        this.knob.dispose();\n        this.highlight.dispose();\n        this.background.dispose();\n        this.clipboard.dispose();\n        this.snapline.dispose();\n        this.selection.dispose();\n        this.history.dispose();\n        this.keyboard.dispose();\n        this.mousewheel.dispose();\n        this.print.dispose();\n        this.format.dispose();\n        this.minimap.dispose();\n        this.panning.dispose();\n        this.scroller.dispose();\n        this.view.dispose();\n        this.renderer.dispose();\n        this.size.dispose();\n    }\n}\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"lockScroller\", null);\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"unlockScroller\", null);\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"updateScroller\", null);\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"getScrollbarPosition\", null);\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"setScrollbarPosition\", null);\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"scrollToPoint\", null);\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"scrollToContent\", null);\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"scrollToCell\", null);\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"transitionToPoint\", null);\n__decorate([\n    Decorator.checkScroller()\n], Graph.prototype, \"transitionToRect\", null);\n__decorate([\n    Basecoat.dispose()\n], Graph.prototype, \"dispose\", null);\n(function (Graph) {\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    Graph.View = GraphView;\n    Graph.Hook = HookManager;\n    Graph.Renderer = ViewRenderer;\n    Graph.Keyboard = Shortcut;\n    Graph.MouseWheel = Wheel;\n    Graph.BaseManager = Base;\n    Graph.DefsManager = Defs;\n    Graph.GridManager = Grid;\n    Graph.CoordManager = Coord;\n    Graph.PrintManager = Print;\n    Graph.FormatManager = Format;\n    Graph.MiniMapManager = MiniMap;\n    Graph.HistoryManager = History;\n    Graph.SnaplineManager = Snapline;\n    Graph.ScrollerManager = Scroller;\n    Graph.ClipboardManager = Clipboard;\n    Graph.TransformManager = Transform;\n    Graph.HighlightManager = Highlight;\n    Graph.BackgroundManager = Background;\n    Graph.SelectionManager = Selection;\n})(Graph || (Graph = {}));\n(function (Graph) {\n    Graph.toStringTag = `X6.${Graph.name}`;\n    function isGraph(instance) {\n        if (instance == null) {\n            return false;\n        }\n        if (instance instanceof Graph) {\n            return true;\n        }\n        const tag = instance[Symbol.toStringTag];\n        const graph = instance;\n        if ((tag == null || tag === Graph.toStringTag) &&\n            graph.hook != null &&\n            graph.view != null &&\n            graph.model != null) {\n            return true;\n        }\n        return false;\n    }\n    Graph.isGraph = isGraph;\n})(Graph || (Graph = {}));\n(function (Graph) {\n    function render(options, data) {\n        const graph = options instanceof HTMLElement\n            ? new Graph({ container: options })\n            : new Graph(options);\n        if (data != null) {\n            graph.fromJSON(data);\n        }\n        return graph;\n    }\n    Graph.render = render;\n})(Graph || (Graph = {}));\n(function (Graph) {\n    Graph.registerNode = Node.registry.register;\n    Graph.registerEdge = Edge.registry.register;\n    Graph.registerView = CellView.registry.register;\n    Graph.registerAttr = Registry.Attr.registry.register;\n    Graph.registerGrid = Registry.Grid.registry.register;\n    Graph.registerFilter = Registry.Filter.registry.register;\n    Graph.registerNodeTool = Registry.NodeTool.registry.register;\n    Graph.registerEdgeTool = Registry.EdgeTool.registry.register;\n    Graph.registerBackground = Registry.Background.registry.register;\n    Graph.registerHighlighter = Registry.Highlighter.registry.register;\n    Graph.registerPortLayout = Registry.PortLayout.registry.register;\n    Graph.registerPortLabelLayout = Registry.PortLabelLayout.registry.register;\n    Graph.registerMarker = Registry.Marker.registry.register;\n    Graph.registerRouter = Registry.Router.registry.register;\n    Graph.registerConnector = Registry.Connector.registry.register;\n    Graph.registerAnchor = Registry.NodeAnchor.registry.register;\n    Graph.registerEdgeAnchor = Registry.EdgeAnchor.registry.register;\n    Graph.registerConnectionPoint = Registry.ConnectionPoint.registry.register;\n    Graph.registerConnectionStrategy = Registry.ConnectionStrategy.registry.register;\n    Graph.registerHTMLComponent = HTML.componentRegistry.register;\n})(Graph || (Graph = {}));\n(function (Graph) {\n    Graph.unregisterNode = Node.registry.unregister;\n    Graph.unregisterEdge = Edge.registry.unregister;\n    Graph.unregisterView = CellView.registry.unregister;\n    Graph.unregisterAttr = Registry.Attr.registry.unregister;\n    Graph.unregisterGrid = Registry.Grid.registry.unregister;\n    Graph.unregisterFilter = Registry.Filter.registry.unregister;\n    Graph.unregisterNodeTool = Registry.NodeTool.registry.unregister;\n    Graph.unregisterEdgeTool = Registry.EdgeTool.registry.unregister;\n    Graph.unregisterBackground = Registry.Background.registry.unregister;\n    Graph.unregisterHighlighter = Registry.Highlighter.registry.unregister;\n    Graph.unregisterPortLayout = Registry.PortLayout.registry.unregister;\n    Graph.unregisterPortLabelLayout = Registry.PortLabelLayout.registry.unregister;\n    Graph.unregisterMarker = Registry.Marker.registry.unregister;\n    Graph.unregisterRouter = Registry.Router.registry.unregister;\n    Graph.unregisterConnector = Registry.Connector.registry.unregister;\n    Graph.unregisterAnchor = Registry.NodeAnchor.registry.unregister;\n    Graph.unregisterEdgeAnchor = Registry.EdgeAnchor.registry.unregister;\n    Graph.unregisterConnectionPoint = Registry.ConnectionPoint.registry.unregister;\n    Graph.unregisterConnectionStrategy = Registry.ConnectionStrategy.registry.unregister;\n    Graph.unregisterHTMLComponent = HTML.componentRegistry.unregister;\n})(Graph || (Graph = {}));\n//# sourceMappingURL=graph.js.map"]},"metadata":{},"sourceType":"module"}