{"ast":null,"code":"import { __assign } from \"tslib\";\nimport Shape from '../shape';\nimport Global from '../../global';\n/**\n * 基本的图片，可以添加文本，默认文本在图片的下面\n */\n\nShape.registerNode('image', {\n  options: {\n    img: 'https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*eD7nT6tmYgAAAAAAAAAAAABkARQnAQ',\n    size: 200,\n    labelCfg: {\n      style: {\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    clipCfg: {\n      show: false,\n      type: 'circle',\n      // circle\n      r: 50,\n      // ellipse\n      rx: 50,\n      ry: 35,\n      // rect\n      width: 50,\n      height: 35,\n      // polygon\n      points: [[30, 12], [12, 30], [30, 48], [48, 30]],\n      // path\n      path: [['M', 25, 25], ['L', 50, 25], ['A', 12.5, 12.5, 0, 1, 1, 50, 50], ['A', 12.5, 12.5, 0, 1, 0, 50, 50], ['L', 25, 75], ['Z']],\n      // 坐标\n      x: 0,\n      y: 0 // clip 的属性样式\n      // style: {\n      //   lineWidth: 1\n      // },\n\n    }\n  },\n  shapeType: 'image',\n  labelPosition: 'bottom',\n  drawShape: function drawShape(cfg, group) {\n    var shapeType = this.shapeType;\n    var style = this.getShapeStyle(cfg);\n    delete style.fill;\n    var shape = group.addShape(shapeType, {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      name: this.type + \"-keyShape\",\n      draggable: true\n    });\n    this.drawClip(cfg, shape);\n    return shape;\n  },\n  drawClip: function drawClip(cfg, shape) {\n    var clip = (this.mergeStyle || this.getOptions(cfg)).clipCfg;\n\n    if (!clip.show) {\n      return;\n    } // 支持 circle、rect、ellipse、Polygon 及自定义 path clip\n\n\n    var type = clip.type,\n        x = clip.x,\n        y = clip.y,\n        style = clip.style;\n\n    if (type === 'circle') {\n      var r = clip.r;\n      shape.setClip({\n        type: 'circle',\n        attrs: __assign({\n          r: r,\n          x: x,\n          y: y\n        }, style)\n      });\n    } else if (type === 'rect') {\n      var width = clip.width,\n          height = clip.height;\n      var rectX = x - width / 2;\n      var rectY = y - height / 2;\n      shape.setClip({\n        type: 'rect',\n        attrs: __assign({\n          x: rectX,\n          y: rectY,\n          width: width,\n          height: height\n        }, style)\n      });\n    } else if (type === 'ellipse') {\n      var rx = clip.rx,\n          ry = clip.ry;\n      shape.setClip({\n        type: 'ellipse',\n        attrs: __assign({\n          x: x,\n          y: y,\n          rx: rx,\n          ry: ry\n        }, style)\n      });\n    } else if (type === 'polygon') {\n      var points = clip.points;\n      shape.setClip({\n        type: 'polygon',\n        attrs: __assign({\n          points: points\n        }, style)\n      });\n    } else if (type === 'path') {\n      var path = clip.path;\n      shape.setClip({\n        type: 'path',\n        attrs: __assign({\n          path: path\n        }, style)\n      });\n    }\n  },\n  getShapeStyle: function getShapeStyle(cfg) {\n    var _a = this.mergeStyle || this.getOptions(cfg),\n        defaultStyle = _a.style,\n        img = _a.img;\n\n    var size = this.getSize(cfg);\n    var width = size[0];\n    var height = size[1];\n\n    if (defaultStyle) {\n      width = defaultStyle.width || size[0];\n      height = defaultStyle.height || size[1];\n    }\n\n    var style = __assign({\n      x: -width / 2,\n      y: -height / 2,\n      width: width,\n      height: height,\n      img: img\n    }, defaultStyle);\n\n    return style;\n  },\n  updateShapeStyle: function updateShapeStyle(cfg, item) {\n    var group = item.getContainer();\n    var shapeClassName = this.itemType + \"-shape\";\n    var shape = group['shapeMap'][shapeClassName] || group.find(function (element) {\n      return element.get('className') === shapeClassName;\n    }) || item.getKeyShape();\n    var shapeStyle = this.getShapeStyle(cfg);\n\n    if (shape && !shape.destroyed) {\n      shape.attr(shapeStyle);\n    }\n  }\n}, 'single-node');","map":{"version":3,"sources":["/home/manolo/sds-ui/node_modules/@antv/g6-core/es/element/nodes/image.js"],"names":["__assign","Shape","Global","registerNode","options","img","size","labelCfg","style","fontFamily","windowFontFamily","clipCfg","show","type","r","rx","ry","width","height","points","path","x","y","shapeType","labelPosition","drawShape","cfg","group","getShapeStyle","fill","shape","addShape","attrs","className","name","draggable","drawClip","clip","mergeStyle","getOptions","setClip","rectX","rectY","_a","defaultStyle","getSize","updateShapeStyle","item","getContainer","shapeClassName","itemType","find","element","get","getKeyShape","shapeStyle","destroyed","attr"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport Shape from '../shape';\nimport Global from '../../global';\n/**\n * 基本的图片，可以添加文本，默认文本在图片的下面\n */\n\nShape.registerNode('image', {\n  options: {\n    img: 'https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*eD7nT6tmYgAAAAAAAAAAAABkARQnAQ',\n    size: 200,\n    labelCfg: {\n      style: {\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    clipCfg: {\n      show: false,\n      type: 'circle',\n      // circle\n      r: 50,\n      // ellipse\n      rx: 50,\n      ry: 35,\n      // rect\n      width: 50,\n      height: 35,\n      // polygon\n      points: [[30, 12], [12, 30], [30, 48], [48, 30]],\n      // path\n      path: [['M', 25, 25], ['L', 50, 25], ['A', 12.5, 12.5, 0, 1, 1, 50, 50], ['A', 12.5, 12.5, 0, 1, 0, 50, 50], ['L', 25, 75], ['Z']],\n      // 坐标\n      x: 0,\n      y: 0 // clip 的属性样式\n      // style: {\n      //   lineWidth: 1\n      // },\n\n    }\n  },\n  shapeType: 'image',\n  labelPosition: 'bottom',\n  drawShape: function drawShape(cfg, group) {\n    var shapeType = this.shapeType;\n    var style = this.getShapeStyle(cfg);\n    delete style.fill;\n    var shape = group.addShape(shapeType, {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      name: this.type + \"-keyShape\",\n      draggable: true\n    });\n    this.drawClip(cfg, shape);\n    return shape;\n  },\n  drawClip: function drawClip(cfg, shape) {\n    var clip = (this.mergeStyle || this.getOptions(cfg)).clipCfg;\n\n    if (!clip.show) {\n      return;\n    } // 支持 circle、rect、ellipse、Polygon 及自定义 path clip\n\n\n    var type = clip.type,\n        x = clip.x,\n        y = clip.y,\n        style = clip.style;\n\n    if (type === 'circle') {\n      var r = clip.r;\n      shape.setClip({\n        type: 'circle',\n        attrs: __assign({\n          r: r,\n          x: x,\n          y: y\n        }, style)\n      });\n    } else if (type === 'rect') {\n      var width = clip.width,\n          height = clip.height;\n      var rectX = x - width / 2;\n      var rectY = y - height / 2;\n      shape.setClip({\n        type: 'rect',\n        attrs: __assign({\n          x: rectX,\n          y: rectY,\n          width: width,\n          height: height\n        }, style)\n      });\n    } else if (type === 'ellipse') {\n      var rx = clip.rx,\n          ry = clip.ry;\n      shape.setClip({\n        type: 'ellipse',\n        attrs: __assign({\n          x: x,\n          y: y,\n          rx: rx,\n          ry: ry\n        }, style)\n      });\n    } else if (type === 'polygon') {\n      var points = clip.points;\n      shape.setClip({\n        type: 'polygon',\n        attrs: __assign({\n          points: points\n        }, style)\n      });\n    } else if (type === 'path') {\n      var path = clip.path;\n      shape.setClip({\n        type: 'path',\n        attrs: __assign({\n          path: path\n        }, style)\n      });\n    }\n  },\n  getShapeStyle: function getShapeStyle(cfg) {\n    var _a = this.mergeStyle || this.getOptions(cfg),\n        defaultStyle = _a.style,\n        img = _a.img;\n\n    var size = this.getSize(cfg);\n    var width = size[0];\n    var height = size[1];\n\n    if (defaultStyle) {\n      width = defaultStyle.width || size[0];\n      height = defaultStyle.height || size[1];\n    }\n\n    var style = __assign({\n      x: -width / 2,\n      y: -height / 2,\n      width: width,\n      height: height,\n      img: img\n    }, defaultStyle);\n\n    return style;\n  },\n  updateShapeStyle: function updateShapeStyle(cfg, item) {\n    var group = item.getContainer();\n    var shapeClassName = this.itemType + \"-shape\";\n    var shape = group['shapeMap'][shapeClassName] || group.find(function (element) {\n      return element.get('className') === shapeClassName;\n    }) || item.getKeyShape();\n    var shapeStyle = this.getShapeStyle(cfg);\n\n    if (shape && !shape.destroyed) {\n      shape.attr(shapeStyle);\n    }\n  }\n}, 'single-node');"]},"metadata":{},"sourceType":"module"}