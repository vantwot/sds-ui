{"ast":null,"code":"const hyphenPattern = /-(.)/g;\n\nfunction camelize(str) {\n  return str.replace(hyphenPattern, (_, char) => char.toUpperCase());\n}\n\nconst memoized = {};\nconst prefixes = ['Webkit', 'ms', 'Moz', 'O'];\nconst testStyle = document ? document.createElement('div').style : {};\n\nfunction getWithPrefix(name) {\n  for (let i = 0; i < prefixes.length; i += 1) {\n    const prefixedName = prefixes[i] + name;\n\n    if (prefixedName in testStyle) {\n      return prefixedName;\n    }\n  }\n\n  return null;\n}\n\nexport function getVendorPrefixedName(property) {\n  const name = camelize(property);\n\n  if (memoized[name] == null) {\n    const capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n    memoized[name] = name in testStyle ? name : getWithPrefix(capitalizedName);\n  }\n\n  return memoized[name];\n}","map":{"version":3,"sources":["../../../src/util/dom/prefix.ts"],"names":[],"mappings":"AAAA,MAAM,aAAa,GAAG,OAAtB;;AACA,SAAS,QAAT,CAAkB,GAAlB,EAA6B;AAC3B,SAAO,GAAG,CAAC,OAAJ,CAAY,aAAZ,EAA2B,CAAC,CAAD,EAAI,IAAJ,KAAa,IAAI,CAAC,WAAL,EAAxC,CAAP;AACD;;AAED,MAAM,QAAQ,GAAqC,EAAnD;AACA,MAAM,QAAQ,GAAG,CAAC,QAAD,EAAW,IAAX,EAAiB,KAAjB,EAAwB,GAAxB,CAAjB;AACA,MAAM,SAAS,GAAG,QAAQ,GAAG,QAAQ,CAAC,aAAT,CAAuB,KAAvB,EAA8B,KAAjC,GAAyC,EAAnE;;AAEA,SAAS,aAAT,CAAuB,IAAvB,EAAmC;AACjC,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,IAAI,CAA1C,EAA6C;AAC3C,UAAM,YAAY,GAAG,QAAQ,CAAC,CAAD,CAAR,GAAc,IAAnC;;AACA,QAAI,YAAY,IAAI,SAApB,EAA+B;AAC7B,aAAO,YAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;;AAED,OAAM,SAAU,qBAAV,CAAgC,QAAhC,EAAgD;AACpD,QAAM,IAAI,GAAG,QAAQ,CAAC,QAAD,CAArB;;AACA,MAAI,QAAQ,CAAC,IAAD,CAAR,IAAkB,IAAtB,EAA4B;AAC1B,UAAM,eAAe,GAAG,IAAI,CAAC,MAAL,CAAY,CAAZ,EAAe,WAAf,KAA+B,IAAI,CAAC,KAAL,CAAW,CAAX,CAAvD;AACA,IAAA,QAAQ,CAAC,IAAD,CAAR,GAAiB,IAAI,IAAI,SAAR,GAAoB,IAApB,GAA2B,aAAa,CAAC,eAAD,CAAzD;AACD;;AAED,SAAO,QAAQ,CAAC,IAAD,CAAf;AACD","sourceRoot":"","sourcesContent":["const hyphenPattern = /-(.)/g;\nfunction camelize(str) {\n    return str.replace(hyphenPattern, (_, char) => char.toUpperCase());\n}\nconst memoized = {};\nconst prefixes = ['Webkit', 'ms', 'Moz', 'O'];\nconst testStyle = document ? document.createElement('div').style : {};\nfunction getWithPrefix(name) {\n    for (let i = 0; i < prefixes.length; i += 1) {\n        const prefixedName = prefixes[i] + name;\n        if (prefixedName in testStyle) {\n            return prefixedName;\n        }\n    }\n    return null;\n}\nexport function getVendorPrefixedName(property) {\n    const name = camelize(property);\n    if (memoized[name] == null) {\n        const capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n        memoized[name] = name in testStyle ? name : getWithPrefix(capitalizedName);\n    }\n    return memoized[name];\n}\n//# sourceMappingURL=prefix.js.map"]},"metadata":{},"sourceType":"module"}