{"ast":null,"code":"/**\n * @fileOverview random layout\n * @author shiwu.wyy@antfin.com\n */\nimport dagre from 'dagre';\nimport { isArray, isNumber } from '../util';\nimport { Base } from './base';\n/**\n * 层次布局\n */\n\nexport class DagreLayout extends Base {\n  constructor(options) {\n    super();\n    /** layout 方向, 可选 TB, BT, LR, RL */\n\n    this.rankdir = 'TB';\n    /** 节点水平间距(px) */\n\n    this.nodesep = 50;\n    /** 每一层节点之间间距 */\n\n    this.ranksep = 50;\n    /** 是否保留布局连线的控制点 */\n\n    this.controlPoints = false;\n    /** 每层节点是否根据节点数据中的 comboId 进行排序，以放置同层 combo 重叠 */\n\n    this.sortByCombo = false;\n    this.updateCfg(options);\n  }\n\n  getDefaultCfg() {\n    return {\n      rankdir: 'TB',\n      align: undefined,\n      nodeSize: undefined,\n      nodesepFunc: undefined,\n      ranksepFunc: undefined,\n      nodesep: 50,\n      ranksep: 50,\n      controlPoints: false\n    };\n  }\n  /**\n   * 执行布局\n   */\n\n\n  execute() {\n    const self = this;\n    const {\n      nodes,\n      nodeSize,\n      rankdir\n    } = self;\n    if (!nodes) return;\n    const edges = self.edges || [];\n    const g = new dagre.graphlib.Graph();\n    let nodeSizeFunc;\n\n    if (!nodeSize) {\n      nodeSizeFunc = d => {\n        if (d.size) {\n          if (isArray(d.size)) {\n            return d.size;\n          }\n\n          return [d.size, d.size];\n        }\n\n        return [40, 40];\n      };\n    } else if (isArray(nodeSize)) {\n      nodeSizeFunc = () => nodeSize;\n    } else {\n      nodeSizeFunc = () => [nodeSize, nodeSize];\n    }\n\n    let horisep = getFunc(self.nodesepFunc, self.nodesep, 50);\n    let vertisep = getFunc(self.ranksepFunc, self.ranksep, 50);\n\n    if (rankdir === 'LR' || rankdir === 'RL') {\n      horisep = getFunc(self.ranksepFunc, self.ranksep, 50);\n      vertisep = getFunc(self.nodesepFunc, self.nodesep, 50);\n    }\n\n    g.setDefaultEdgeLabel(() => ({}));\n    g.setGraph(self);\n    nodes.forEach(node => {\n      const size = nodeSizeFunc(node);\n      const verti = vertisep(node);\n      const hori = horisep(node);\n      const width = size[0] + 2 * hori;\n      const height = size[1] + 2 * verti;\n      g.setNode(node.id, {\n        width,\n        height\n      });\n    });\n    edges.forEach(edge => {\n      // dagrejs Wiki https://github.com/dagrejs/dagre/wiki#configuring-the-layout\n      g.setEdge(edge.source, edge.target, {\n        weight: edge.weight || 1\n      });\n    });\n    dagre.layout(g);\n    let coord;\n    g.nodes().forEach(node => {\n      coord = g.node(node);\n      const i = nodes.findIndex(it => it.id === node);\n      nodes[i].x = coord.x;\n      nodes[i].y = coord.y;\n    });\n    g.edges().forEach(edge => {\n      coord = g.edge(edge);\n      const i = edges.findIndex(it => it.source === edge.v && it.target === edge.w);\n\n      if (self.controlPoints && edges[i].type !== 'loop') {\n        edges[i].controlPoints = coord.points.slice(1, coord.points.length - 1);\n      }\n    });\n\n    if (self.sortByCombo) {\n      self.sortLevel('comboId');\n    }\n\n    return nodes;\n  }\n\n  sortLevel(propertyName) {\n    const self = this;\n    const nodes = self.nodes;\n    const levels = {};\n    nodes.forEach(node => {\n      if (!levels[node.y]) levels[node.y] = {\n        y: node.y,\n        nodes: []\n      };\n      levels[node.y].nodes.push(node);\n    });\n    Object.keys(levels).forEach(key => {\n      const levelNodes = levels[key].nodes;\n      const nodesNum = levelNodes.length;\n      const comboCenters = {};\n      levelNodes.forEach(lnode => {\n        const lnodeCombo = lnode.comboId;\n        if (!comboCenters[lnodeCombo]) comboCenters[lnodeCombo] = {\n          x: 0,\n          y: 0,\n          count: 0\n        };\n        comboCenters[lnodeCombo].x += lnode.x;\n        comboCenters[lnodeCombo].y += lnode.y;\n        comboCenters[lnodeCombo].count++;\n      });\n      Object.keys(comboCenters).forEach(ckey => {\n        comboCenters[ckey].x /= comboCenters[ckey].count;\n        comboCenters[ckey].y /= comboCenters[ckey].count;\n      });\n      if (nodesNum === 1) return;\n      const sortedByX = levelNodes.sort((a, b) => {\n        return a.x - b.x;\n      });\n      const minX = sortedByX[0].x;\n      const maxX = sortedByX[nodesNum - 1].x;\n      const gap = (maxX - minX) / (nodesNum - 1);\n      const sortedByCombo = levelNodes.sort((a, b) => {\n        const aValue = a[propertyName] || 'undefined';\n        const bValue = b[propertyName] || 'undefined';\n\n        if (aValue < bValue) {\n          return -1;\n        }\n\n        if (aValue > bValue) {\n          return 1;\n        }\n\n        return 0;\n      });\n      sortedByCombo.forEach((node, i) => {\n        node.x = minX + i * gap;\n      });\n    });\n  }\n\n}\n\nfunction getFunc(func, value, defaultValue) {\n  let resultFunc;\n\n  if (func) {\n    resultFunc = func;\n  } else if (isNumber(value)) {\n    resultFunc = () => value;\n  } else {\n    resultFunc = () => defaultValue;\n  }\n\n  return resultFunc;\n}","map":{"version":3,"sources":["../../src/layout/dagre.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @fileOverview random layout\n * @author shiwu.wyy@antfin.com\n */\nimport dagre from 'dagre';\nimport { isArray, isNumber } from '../util';\nimport { Base } from './base';\n/**\n * 层次布局\n */\nexport class DagreLayout extends Base {\n    constructor(options) {\n        super();\n        /** layout 方向, 可选 TB, BT, LR, RL */\n        this.rankdir = 'TB';\n        /** 节点水平间距(px) */\n        this.nodesep = 50;\n        /** 每一层节点之间间距 */\n        this.ranksep = 50;\n        /** 是否保留布局连线的控制点 */\n        this.controlPoints = false;\n        /** 每层节点是否根据节点数据中的 comboId 进行排序，以放置同层 combo 重叠 */\n        this.sortByCombo = false;\n        this.updateCfg(options);\n    }\n    getDefaultCfg() {\n        return {\n            rankdir: 'TB',\n            align: undefined,\n            nodeSize: undefined,\n            nodesepFunc: undefined,\n            ranksepFunc: undefined,\n            nodesep: 50,\n            ranksep: 50,\n            controlPoints: false,\n        };\n    }\n    /**\n     * 执行布局\n     */\n    execute() {\n        const self = this;\n        const { nodes, nodeSize, rankdir } = self;\n        if (!nodes)\n            return;\n        const edges = self.edges || [];\n        const g = new dagre.graphlib.Graph();\n        let nodeSizeFunc;\n        if (!nodeSize) {\n            nodeSizeFunc = (d) => {\n                if (d.size) {\n                    if (isArray(d.size)) {\n                        return d.size;\n                    }\n                    return [d.size, d.size];\n                }\n                return [40, 40];\n            };\n        }\n        else if (isArray(nodeSize)) {\n            nodeSizeFunc = () => nodeSize;\n        }\n        else {\n            nodeSizeFunc = () => [nodeSize, nodeSize];\n        }\n        let horisep = getFunc(self.nodesepFunc, self.nodesep, 50);\n        let vertisep = getFunc(self.ranksepFunc, self.ranksep, 50);\n        if (rankdir === 'LR' || rankdir === 'RL') {\n            horisep = getFunc(self.ranksepFunc, self.ranksep, 50);\n            vertisep = getFunc(self.nodesepFunc, self.nodesep, 50);\n        }\n        g.setDefaultEdgeLabel(() => ({}));\n        g.setGraph(self);\n        nodes.forEach((node) => {\n            const size = nodeSizeFunc(node);\n            const verti = vertisep(node);\n            const hori = horisep(node);\n            const width = size[0] + 2 * hori;\n            const height = size[1] + 2 * verti;\n            g.setNode(node.id, { width, height });\n        });\n        edges.forEach((edge) => {\n            // dagrejs Wiki https://github.com/dagrejs/dagre/wiki#configuring-the-layout\n            g.setEdge(edge.source, edge.target, {\n                weight: edge.weight || 1,\n            });\n        });\n        dagre.layout(g);\n        let coord;\n        g.nodes().forEach((node) => {\n            coord = g.node(node);\n            const i = nodes.findIndex((it) => it.id === node);\n            nodes[i].x = coord.x;\n            nodes[i].y = coord.y;\n        });\n        g.edges().forEach((edge) => {\n            coord = g.edge(edge);\n            const i = edges.findIndex((it) => it.source === edge.v && it.target === edge.w);\n            if (self.controlPoints && edges[i].type !== 'loop') {\n                edges[i].controlPoints = coord.points.slice(1, coord.points.length - 1);\n            }\n        });\n        if (self.sortByCombo) {\n            self.sortLevel('comboId');\n        }\n        return nodes;\n    }\n    sortLevel(propertyName) {\n        const self = this;\n        const nodes = self.nodes;\n        const levels = {};\n        nodes.forEach((node) => {\n            if (!levels[node.y])\n                levels[node.y] = { y: node.y, nodes: [] };\n            levels[node.y].nodes.push(node);\n        });\n        Object.keys(levels).forEach((key) => {\n            const levelNodes = levels[key].nodes;\n            const nodesNum = levelNodes.length;\n            const comboCenters = {};\n            levelNodes.forEach((lnode) => {\n                const lnodeCombo = lnode.comboId;\n                if (!comboCenters[lnodeCombo])\n                    comboCenters[lnodeCombo] = { x: 0, y: 0, count: 0 };\n                comboCenters[lnodeCombo].x += lnode.x;\n                comboCenters[lnodeCombo].y += lnode.y;\n                comboCenters[lnodeCombo].count++;\n            });\n            Object.keys(comboCenters).forEach((ckey) => {\n                comboCenters[ckey].x /= comboCenters[ckey].count;\n                comboCenters[ckey].y /= comboCenters[ckey].count;\n            });\n            if (nodesNum === 1)\n                return;\n            const sortedByX = levelNodes.sort((a, b) => {\n                return a.x - b.x;\n            });\n            const minX = sortedByX[0].x;\n            const maxX = sortedByX[nodesNum - 1].x;\n            const gap = (maxX - minX) / (nodesNum - 1);\n            const sortedByCombo = levelNodes.sort((a, b) => {\n                const aValue = a[propertyName] || 'undefined';\n                const bValue = b[propertyName] || 'undefined';\n                if (aValue < bValue) {\n                    return -1;\n                }\n                if (aValue > bValue) {\n                    return 1;\n                }\n                return 0;\n            });\n            sortedByCombo.forEach((node, i) => {\n                node.x = minX + i * gap;\n            });\n        });\n    }\n}\nfunction getFunc(func, value, defaultValue) {\n    let resultFunc;\n    if (func) {\n        resultFunc = func;\n    }\n    else if (isNumber(value)) {\n        resultFunc = () => value;\n    }\n    else {\n        resultFunc = () => defaultValue;\n    }\n    return resultFunc;\n}\n//# sourceMappingURL=dagre.js.map"]},"metadata":{},"sourceType":"module"}