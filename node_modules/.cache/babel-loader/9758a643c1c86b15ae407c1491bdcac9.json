{"ast":null,"code":"import _regeneratorRuntime from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { getNodeReactComponent } from '../components/context';\nimport { XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { XFLOW_DEFAULT_NODE } from '../../constants';\nexport var NsAddNode;\n\n(function (NsAddNode) {\n  /** Command: 用于注册named factory */\n  NsAddNode.command = XFlowNodeCommands.ADD_NODE;\n  /** hookName */\n\n  NsAddNode.hookKey = 'addNode';\n})(NsAddNode || (NsAddNode = {}));\n\nvar AddNodeCommand =\n/*#__PURE__*/\n\n/** 创建节点命令 */\nfunction () {\n  function AddNodeCommand() {\n    var _this = this;\n\n    _classCallCheck(this, AddNodeCommand);\n\n    /** 执行Cmd */\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var ctx, _ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                ctx = this.contextProvider();\n                _ctx$getArgs = ctx.getArgs(), args = _ctx$getArgs.args, runtimeHook = _ctx$getArgs.hooks;\n                hooks = ctx.getHooks();\n                _context3.next = 5;\n                return hooks.addNode.call(args, function (handlerArgs) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var _this3 = this;\n\n                    var createNodeService, cellFactory, commandService, graph, node, nodeConfig, x6NodeCell, cell;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            createNodeService = handlerArgs.createNodeService, cellFactory = handlerArgs.cellFactory, commandService = handlerArgs.commandService;\n                            _context2.next = 3;\n                            return ctx.getX6Graph();\n\n                          case 3:\n                            graph = _context2.sent;\n\n                            if (!createNodeService) {\n                              _context2.next = 10;\n                              break;\n                            }\n\n                            _context2.next = 7;\n                            return createNodeService(handlerArgs);\n\n                          case 7:\n                            _context2.t0 = _context2.sent;\n                            _context2.next = 11;\n                            break;\n\n                          case 10:\n                            _context2.t0 = handlerArgs.nodeConfig;\n\n                          case 11:\n                            node = _context2.t0;\n                            _context2.next = 14;\n                            return this.processNodeConfig(node);\n\n                          case 14:\n                            nodeConfig = _context2.sent;\n\n                            if (!cellFactory) {\n                              _context2.next = 22;\n                              break;\n                            }\n\n                            _context2.next = 18;\n                            return cellFactory(nodeConfig, this);\n\n                          case 18:\n                            cell = _context2.sent;\n                            x6NodeCell = graph.addNode(cell);\n                            _context2.next = 23;\n                            break;\n\n                          case 22:\n                            x6NodeCell = graph.addNode(nodeConfig);\n\n                          case 23:\n                            /** add undo: delete node */\n                            ctx.addUndo(Disposable.create(function () {\n                              return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                                var nodeData;\n                                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                  while (1) {\n                                    switch (_context.prev = _context.next) {\n                                      case 0:\n                                        nodeData = Object.assign({\n                                          id: x6NodeCell.id\n                                        }, x6NodeCell.getData());\n                                        commandService.executeCommand(XFlowNodeCommands.DEL_NODE.id, {\n                                          nodeConfig: nodeData\n                                        });\n\n                                      case 2:\n                                      case \"end\":\n                                        return _context.stop();\n                                    }\n                                  }\n                                }, _callee);\n                              }));\n                            }));\n                            return _context2.abrupt(\"return\", {\n                              nodeConfig: nodeConfig,\n                              nodeCell: x6NodeCell\n                            });\n\n                          case 25:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n                }, runtimeHook);\n\n              case 5:\n                result = _context3.sent;\n                ctx.setResult(result);\n                return _context3.abrupt(\"return\", this);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n\n    this.processNodeConfig = function (nodeConfig) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var ctx, graphConfig, reactComponent, commands, modelService;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                ctx = this.contextProvider();\n                /**\n                 * 1. react shape node 逻辑\n                 * 2. X6不会处理data数据, 仅透传。可以通过x6Node?.getData()方法获取这份数据\n                 */\n\n                nodeConfig.data = Object.assign({}, nodeConfig);\n                /** 非 react shape */\n\n                if (!nodeConfig.shape) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", nodeConfig);\n\n              case 4:\n                if (nodeConfig.view) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                _context4.next = 7;\n                return ctx.getGraphConfig();\n\n              case 7:\n                graphConfig = _context4.sent;\n                nodeConfig.view = graphConfig.graphId;\n\n              case 9:\n                if (nodeConfig.component) {\n                  _context4.next = 17;\n                  break;\n                }\n\n                _context4.next = 12;\n                return this.getNodeReactComponent(nodeConfig);\n\n              case 12:\n                reactComponent = _context4.sent;\n                commands = ctx.getCommands();\n                modelService = ctx.getModelService();\n                nodeConfig.shape = 'react-shape';\n                nodeConfig.component = getNodeReactComponent(reactComponent, commands, modelService);\n\n              case 17:\n                return _context4.abrupt(\"return\", nodeConfig);\n\n              case 18:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n\n    this.getNodeReactComponent = function (nodeConfig) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var ctx, hooks, graphConfig, renderMap, renderKey, reactComponent;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                ctx = this.contextProvider();\n                hooks = ctx.getHooks();\n                /** 获取Graph Config中用户预设的节点渲染需要的React组件 */\n\n                _context5.next = 4;\n                return ctx.getGraphConfig();\n\n              case 4:\n                graphConfig = _context5.sent;\n                _context5.next = 7;\n                return hooks.reactNodeRender.call(graphConfig.nodeRender);\n\n              case 7:\n                renderMap = _context5.sent;\n\n                /** 获取renderKey，没有renderKey时使用默认Key */\n                renderKey = graphConfig.nodeTypeParser(nodeConfig) || XFLOW_DEFAULT_NODE;\n                /** 获取组件 */\n\n                reactComponent = renderMap.get(renderKey);\n\n                if (!reactComponent) {\n                  console.error('react node component is missing:', graphConfig.nodeRender, renderKey, reactComponent);\n                }\n\n                return _context5.abrupt(\"return\", reactComponent);\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    };\n    /** undo cmd */\n\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var ctx;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                ctx = this.contextProvider();\n\n                if (this.isUndoable()) {\n                  ctx.undo();\n                }\n\n                return _context6.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    };\n    /** redo cmd */\n\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (this.isUndoable()) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                _context7.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context7.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    };\n  }\n\n  _createClass(AddNodeCommand, [{\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      var ctx = this.contextProvider();\n      return ctx.isUndoable();\n    }\n  }]);\n\n  return AddNodeCommand;\n}();\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], AddNodeCommand.prototype, \"contextProvider\", void 0);\n\nAddNodeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsAddNode.command.id\n  }\n})\n/** 创建节点命令 */\n], AddNodeCommand);\nexport { AddNodeCommand };","map":{"version":3,"sources":["../../../src/command-contributions/node/node-add.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,SAAS,MAAT,EAAiB,UAAjB,QAAmC,cAAnC;AACA,SAAS,eAAT,EAA0B,uBAA1B,QAAyD,yBAAzD;AACA,SAAS,qBAAT,QAAsC,uBAAtC;AACA,SAAS,iBAAT,QAAkC,aAAlC;AACA,SAAS,UAAT,QAA2B,yBAA3B;AACA,SAAS,kBAAT,QAAmC,iBAAnC;AAIA,OAAM,IAAW,SAAX;;AAAN,CAAA,UAAiB,SAAjB,EAA0B;AACxB;AACa,EAAA,SAAA,CAAA,OAAA,GAAU,iBAAiB,CAAC,QAA5B;AACb;;AACa,EAAA,SAAA,CAAA,OAAA,GAAU,SAAV;AA8Bd,CAlCD,EAAiB,SAAS,KAAT,SAAS,GAAA,EAAA,CAA1B;;AAwCA,IAAa,cAAc;AAAA;;AAD3B;AAC2B;AAA3B,4BAAA;AAAA;;AAAA;;AAIE;AACA,SAAA,OAAA,GAAU;AAAA,aAAW,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACb,gBAAA,GADa,GACP,KAAK,eAAL,EADO;AAAA,+BAEkB,GAAG,CAAC,OAAJ,EAFlB,EAEX,IAFW,gBAEX,IAFW,EAEE,WAFF,gBAEL,KAFK;AAGb,gBAAA,KAHa,GAGL,GAAG,CAAC,QAAJ,EAHK;AAAA;AAKJ,uBAAM,KAAK,CAAC,OAAN,CAAc,IAAd,CACnB,IADmB,EAEnB,UAAM,WAAN;AAAA,yBAAoB,SAAA,CAAA,MAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACV,4BAAA,iBADU,GACyC,WADzC,CACV,iBADU,EACS,WADT,GACyC,WADzC,CACS,WADT,EACsB,cADtB,GACyC,WADzC,CACsB,cADtB;AAAA;AAEJ,mCAAM,GAAG,CAAC,UAAJ,EAAN;;AAFI;AAEZ,4BAAA,KAFY;;AAAA,iCAGL,iBAHK;AAAA;AAAA;AAAA;;AAAA;AAId,mCAAM,iBAAiB,CAAC,WAAD,CAAvB;;AAJc;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAKd,WAAW,CAAC,UALE;;AAAA;AAGZ,4BAAA,IAHY;AAAA;AAMC,mCAAM,KAAK,iBAAL,CAAuB,IAAvB,CAAN;;AAND;AAMZ,4BAAA,UANY;;AAAA,iCAQd,WARc;AAAA;AAAA;AAAA;;AAAA;AAUH,mCAAM,WAAW,CAAC,UAAD,EAAa,IAAb,CAAjB;;AAVG;AAUV,4BAAA,IAVU;AAWhB,4BAAA,UAAU,GAAG,KAAK,CAAC,OAAN,CAAc,IAAd,CAAb;AAXgB;AAAA;;AAAA;AAahB,4BAAA,UAAU,GAAG,KAAK,CAAC,OAAN,CAAc,UAAd,CAAb;;AAbgB;AAgBlB;AACA,4BAAA,GAAG,CAAC,OAAJ,CACE,UAAU,CAAC,MAAX,CAAkB;AAAA,qCAAW,SAAA,CAAA,MAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACrB,wCAAA,QADqB,GACb,MAAA,CAAA,MAAA,CAAA;AACZ,0CAAA,EAAE,EAAE,UAAU,CAAC;AADH,yCAAA,EAET,UAAU,CAAC,OAAX,EAFS,CADa;AAK3B,wCAAA,cAAc,CAAC,cAAf,CAA8B,iBAAiB,CAAC,QAAlB,CAA2B,EAAzD,EAA6D;AAC3D,0CAAA,UAAU,EAAE;AAD+C,yCAA7D;;AAL2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAA,EAAX;AAAA,6BAAlB,CADF;AAjBkB,8DA4BX;AAAE,8BAAA,UAAU,EAAE,UAAd;AAA0B,8BAAA,QAAQ,EAAE;AAApC,6BA5BW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAA,EAApB;AAAA,iBAFmB,EAgCnB,WAhCmB,CAAN;;AALI;AAKb,gBAAA,MALa;AAwCnB,gBAAA,GAAG,CAAC,SAAJ,CAAc,MAAd;AAxCmB,kDA0CZ,IA1CY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAA,EAAX;AAAA,KAAV;;AA6CA,SAAA,iBAAA,GAAoB,UAAO,UAAP;AAAA,aAA0C,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACtD,gBAAA,GADsD,GAChD,KAAK,eAAL,EADgD;AAE5D;;;AAGG;;AACH,gBAAA,UAAU,CAAC,IAAX,GAAe,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,UAAR,CAAf;AAGA;;AAT4D,qBAUxD,UAAU,CAAC,KAV6C;AAAA;AAAA;AAAA;;AAAA,kDAWnD,UAXmD;;AAAA;AAAA,oBAevD,UAAU,CAAC,IAf4C;AAAA;AAAA;AAAA;;AAAA;AAgBtC,uBAAM,GAAG,CAAC,cAAJ,EAAN;;AAhBsC;AAgBpD,gBAAA,WAhBoD;AAiB1D,gBAAA,UAAU,CAAC,IAAX,GAAkB,WAAW,CAAC,OAA9B;;AAjB0D;AAAA,oBAoBvD,UAAU,CAAC,SApB4C;AAAA;AAAA;AAAA;;AAAA;AAqBnC,uBAAM,KAAK,qBAAL,CAA2B,UAA3B,CAAN;;AArBmC;AAqBpD,gBAAA,cArBoD;AAsBpD,gBAAA,QAtBoD,GAsBzC,GAAG,CAAC,WAAJ,EAtByC;AAuBpD,gBAAA,YAvBoD,GAuBrC,GAAG,CAAC,eAAJ,EAvBqC;AAwB1D,gBAAA,UAAU,CAAC,KAAX,GAAmB,aAAnB;AACA,gBAAA,UAAU,CAAC,SAAX,GAAuB,qBAAqB,CAAC,cAAD,EAAiB,QAAjB,EAA2B,YAA3B,CAA5C;;AAzB0D;AAAA,kDA2BrD,UA3BqD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAA,EAA1C;AAAA,KAApB;;AA8BA,SAAA,qBAAA,GAAwB,UAAO,UAAP;AAAA,aAA0C,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1D,gBAAA,GAD0D,GACpD,KAAK,eAAL,EADoD;AAE1D,gBAAA,KAF0D,GAElD,GAAG,CAAC,QAAJ,EAFkD;AAIhE;;AAJgE;AAK5C,uBAAM,GAAG,CAAC,cAAJ,EAAN;;AAL4C;AAK1D,gBAAA,WAL0D;AAAA;AAO9C,uBAAM,KAAK,CAAC,eAAN,CAAsB,IAAtB,CAA2B,WAAW,CAAC,UAAvC,CAAN;;AAP8C;AAO1D,gBAAA,SAP0D;;AAQhE;AACM,gBAAA,SAT0D,GAS9C,WAAW,CAAC,cAAZ,CAA2B,UAA3B,KAA0C,kBATI;AAUhE;;AACM,gBAAA,cAX0D,GAWzC,SAAS,CAAC,GAAV,CAAc,SAAd,CAXyC;;AAYhE,oBAAI,CAAC,cAAL,EAAqB;AACnB,kBAAA,OAAO,CAAC,KAAR,CACE,kCADF,EAEE,WAAW,CAAC,UAFd,EAGE,SAHF,EAIE,cAJF;AAMD;;AAnB+D,kDAoBzD,cApByD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAA,EAA1C;AAAA,KAAxB;AAuBA;;;AACA,SAAA,IAAA,GAAO;AAAA,aAAW,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACV,gBAAA,GADU,GACJ,KAAK,eAAL,EADI;;AAEhB,oBAAI,KAAK,UAAL,EAAJ,EAAuB;AACrB,kBAAA,GAAG,CAAC,IAAJ;AACD;;AAJe,kDAKT,IALS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAA,EAAX;AAAA,KAAP;AAQA;;;AACA,SAAA,IAAA,GAAO;AAAA,aAAW,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACX,KAAK,UAAL,EADW;AAAA;AAAA;AAAA;;AAAA;AAEd,uBAAM,KAAK,OAAL,EAAN;;AAFc;AAAA,kDAIT,IAJS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAA,EAAX;AAAA,KAAP;AAWD;;AA5H0B;AAAA;AAAA,WAwHzB,sBAAU;AACR,UAAM,GAAG,GAAG,KAAK,eAAL,EAAZ;AACA,aAAO,GAAG,CAAC,UAAJ,EAAP;AACD;AA3HwB;;AAAA;AAAA,GAA3B;;AAEmC,UAAA,CAAA,CAAhC,MAAM,CAAC,uBAAD,CAA0B,E,iCAAA,CAAA,E,wBAAA,E,iBAAA,E,KAA4C,CAA5C,CAAA;;AAFtB,cAAc,GAAA,UAAA,CAAA,CAJ1B,UAAU,CAAC;AACV,EAAA,KAAK,EAAE;AAAE,IAAA,KAAK,EAAE,eAAT;AAA0B,IAAA,KAAK,EAAE,SAAS,CAAC,OAAV,CAAkB;AAAnD;AADG,CAAD;AAGX;AAC2B,CAAA,EAAd,cAAc,CAAd;SAAA,c","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { getNodeReactComponent } from '../components/context';\nimport { XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { XFLOW_DEFAULT_NODE } from '../../constants';\nexport var NsAddNode;\n(function (NsAddNode) {\n    /** Command: 用于注册named factory */\n    NsAddNode.command = XFlowNodeCommands.ADD_NODE;\n    /** hookName */\n    NsAddNode.hookKey = 'addNode';\n})(NsAddNode || (NsAddNode = {}));\nlet AddNodeCommand = \n/** 创建节点命令 */\nclass AddNodeCommand {\n    constructor() {\n        /** 执行Cmd */\n        this.execute = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            const { args, hooks: runtimeHook } = ctx.getArgs();\n            const hooks = ctx.getHooks();\n            const result = yield hooks.addNode.call(args, (handlerArgs) => __awaiter(this, void 0, void 0, function* () {\n                const { createNodeService, cellFactory, commandService } = handlerArgs;\n                const graph = yield ctx.getX6Graph();\n                const node = createNodeService\n                    ? yield createNodeService(handlerArgs)\n                    : handlerArgs.nodeConfig;\n                const nodeConfig = yield this.processNodeConfig(node);\n                let x6NodeCell;\n                if (cellFactory) {\n                    /** 使用参数中的工厂方法 */\n                    const cell = yield cellFactory(nodeConfig, this);\n                    x6NodeCell = graph.addNode(cell);\n                }\n                else {\n                    x6NodeCell = graph.addNode(nodeConfig);\n                }\n                /** add undo: delete node */\n                ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n                    const nodeData = Object.assign({ id: x6NodeCell.id }, x6NodeCell.getData());\n                    commandService.executeCommand(XFlowNodeCommands.DEL_NODE.id, {\n                        nodeConfig: nodeData,\n                    });\n                })));\n                return { nodeConfig: nodeConfig, nodeCell: x6NodeCell };\n            }), runtimeHook);\n            ctx.setResult(result);\n            return this;\n        });\n        this.processNodeConfig = (nodeConfig) => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            /**\n             * 1. react shape node 逻辑\n             * 2. X6不会处理data数据, 仅透传。可以通过x6Node?.getData()方法获取这份数据\n             */\n            nodeConfig.data = Object.assign({}, nodeConfig);\n            /** 非 react shape */\n            if (nodeConfig.shape) {\n                return nodeConfig;\n            }\n            /** react shape 使用react-portal-view提高性能 */\n            if (!nodeConfig.view) {\n                const graphConfig = yield ctx.getGraphConfig();\n                nodeConfig.view = graphConfig.graphId;\n            }\n            /** 获取 react component */\n            if (!nodeConfig.component) {\n                const reactComponent = yield this.getNodeReactComponent(nodeConfig);\n                const commands = ctx.getCommands();\n                const modelService = ctx.getModelService();\n                nodeConfig.shape = 'react-shape';\n                nodeConfig.component = getNodeReactComponent(reactComponent, commands, modelService);\n            }\n            return nodeConfig;\n        });\n        this.getNodeReactComponent = (nodeConfig) => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            const hooks = ctx.getHooks();\n            /** 获取Graph Config中用户预设的节点渲染需要的React组件 */\n            const graphConfig = yield ctx.getGraphConfig();\n            /** 通过hooks获取更多的组件 */\n            const renderMap = yield hooks.reactNodeRender.call(graphConfig.nodeRender);\n            /** 获取renderKey，没有renderKey时使用默认Key */\n            const renderKey = graphConfig.nodeTypeParser(nodeConfig) || XFLOW_DEFAULT_NODE;\n            /** 获取组件 */\n            const reactComponent = renderMap.get(renderKey);\n            if (!reactComponent) {\n                console.error('react node component is missing:', graphConfig.nodeRender, renderKey, reactComponent);\n            }\n            return reactComponent;\n        });\n        /** undo cmd */\n        this.undo = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            if (this.isUndoable()) {\n                ctx.undo();\n            }\n            return this;\n        });\n        /** redo cmd */\n        this.redo = () => __awaiter(this, void 0, void 0, function* () {\n            if (!this.isUndoable()) {\n                yield this.execute();\n            }\n            return this;\n        });\n    }\n    isUndoable() {\n        const ctx = this.contextProvider();\n        return ctx.isUndoable();\n    }\n};\n__decorate([\n    inject(ICommandContextProvider),\n    __metadata(\"design:type\", Object)\n], AddNodeCommand.prototype, \"contextProvider\", void 0);\nAddNodeCommand = __decorate([\n    injectable({\n        token: { token: ICommandHandler, named: NsAddNode.command.id },\n    })\n    /** 创建节点命令 */\n], AddNodeCommand);\nexport { AddNodeCommand };\n//# sourceMappingURL=node-add.js.map"]},"metadata":{},"sourceType":"module"}