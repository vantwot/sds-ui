{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isMini } from '@antv/l7-utils';\n\nvar TouchZoomRotateHandler = function () {\n  function TouchZoomRotateHandler(el, touchZoom, touchRotate, tapDragZoom) {\n    _classCallCheck(this, TouchZoomRotateHandler);\n\n    _defineProperty(this, \"el\", void 0);\n\n    _defineProperty(this, \"touchZoom\", void 0);\n\n    _defineProperty(this, \"touchRotate\", void 0);\n\n    _defineProperty(this, \"tapDragZoom\", void 0);\n\n    _defineProperty(this, \"rotationDisabled\", void 0);\n\n    _defineProperty(this, \"enabled\", void 0);\n\n    this.el = el;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.tapDragZoom = tapDragZoom;\n    this.rotationDisabled = false;\n    this.enabled = true;\n  }\n\n  _createClass(TouchZoomRotateHandler, [{\n    key: \"enable\",\n    value: function enable(options) {\n      this.touchZoom.enable(options);\n\n      if (!this.rotationDisabled) {\n        this.touchRotate.enable(options);\n      }\n\n      this.tapDragZoom.enable();\n\n      if (!isMini) {\n        this.el.classList.add('l7-touch-zoom-rotate');\n      }\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.touchZoom.disable();\n      this.touchRotate.disable();\n      this.tapDragZoom.disable();\n\n      if (!isMini) {\n        this.el.classList.remove('l7-touch-zoom-rotate');\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.touchZoom.isEnabled() && (this.rotationDisabled || this.touchRotate.isEnabled()) && this.tapDragZoom.isEnabled();\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.touchZoom.isActive() || this.touchRotate.isActive() || this.tapDragZoom.isActive();\n    }\n  }, {\n    key: \"disableRotation\",\n    value: function disableRotation() {\n      this.rotationDisabled = true;\n      this.touchRotate.disable();\n    }\n  }, {\n    key: \"enableRotation\",\n    value: function enableRotation() {\n      this.rotationDisabled = false;\n\n      if (this.touchZoom.isEnabled()) {\n        this.touchRotate.enable();\n      }\n    }\n  }]);\n\n  return TouchZoomRotateHandler;\n}();\n\nexport { TouchZoomRotateHandler as default };","map":{"version":3,"sources":["../../../src/handler/shim/touch_zoom_rotate.ts"],"names":["TouchZoomRotateHandler"],"mappings":";;;AAAA,SAAA,MAAA,QAAA,gBAAA;;IAWqBA,sB;AAWnB,WAAA,sBAAA,CAAA,EAAA,EAAA,SAAA,EAAA,WAAA,EAAA,WAAA,EAKE;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,sBAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,kBAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA;;AACA,SAAA,EAAA,GAAA,EAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,WAAA,GAAA,WAAA;AACA,SAAA,WAAA,GAAA,WAAA;AACA,SAAA,gBAAA,GAAA,KAAA;AACA,SAAA,OAAA,GAAA,IAAA;AACD;;;;WAaD,SAAA,MAAA,CAAA,OAAA,EAA8C;AAC5C,WAAA,SAAA,CAAA,MAAA,CAAA,OAAA;;AACA,UAAI,CAAC,KAAL,gBAAA,EAA4B;AAC1B,aAAA,WAAA,CAAA,MAAA,CAAA,OAAA;AACD;;AACD,WAAA,WAAA,CAAA,MAAA;;AACA,UAAI,CAAJ,MAAA,EAAa;AACX,aAAA,EAAA,CAAA,SAAA,CAAA,GAAA,CAAA,sBAAA;AACD;AACF;;;WAQD,SAAA,OAAA,GAAiB;AACf,WAAA,SAAA,CAAA,OAAA;AACA,WAAA,WAAA,CAAA,OAAA;AACA,WAAA,WAAA,CAAA,OAAA;;AACA,UAAI,CAAJ,MAAA,EAAa;AACX,aAAA,EAAA,CAAA,SAAA,CAAA,MAAA,CAAA,sBAAA;AACD;AACF;;;WAOD,SAAA,SAAA,GAAmB;AACjB,aACE,KAAA,SAAA,CAAA,SAAA,OACC,KAAA,gBAAA,IAAyB,KAAA,WAAA,CAD1B,SAC0B,EAD1B,KAEA,KAAA,WAAA,CAHF,SAGE,EAHF;AAKD;;;WAOD,SAAA,QAAA,GAAkB;AAChB,aACE,KAAA,SAAA,CAAA,QAAA,MACA,KAAA,WAAA,CADA,QACA,EADA,IAEA,KAAA,WAAA,CAHF,QAGE,EAHF;AAKD;;;WASD,SAAA,eAAA,GAAyB;AACvB,WAAA,gBAAA,GAAA,IAAA;AACA,WAAA,WAAA,CAAA,OAAA;AACD;;;WASD,SAAA,cAAA,GAAwB;AACtB,WAAA,gBAAA,GAAA,KAAA;;AACA,UAAI,KAAA,SAAA,CAAJ,SAAI,EAAJ,EAAgC;AAC9B,aAAA,WAAA,CAAA,MAAA;AACD;AACF;;;;;;SAhHkBA,sB","sourcesContent":["import { isMini } from '@antv/l7-utils';\nimport TapDragZoomHandler from '../tap/tap_drag_zoom';\nimport { TouchRotateHandler, TouchZoomHandler } from '../touch';\n\n/**\n * The `TouchZoomRotateHandler` allows the user to zoom and rotate the map by\n * pinching on a touchscreen.\n *\n * They can zoom with one finger by double tapping and dragging. On the second tap,\n * hold the finger down and drag up or down to zoom in or out.\n */\nexport default class TouchZoomRotateHandler {\n  private el: HTMLElement;\n  private touchZoom: TouchZoomHandler;\n  private touchRotate: TouchRotateHandler;\n  private tapDragZoom: TapDragZoomHandler;\n  private rotationDisabled: boolean;\n  private enabled: boolean;\n\n  /**\n   * @private\n   */\n  constructor(\n    el: HTMLElement,\n    touchZoom: TouchZoomHandler,\n    touchRotate: TouchRotateHandler,\n    tapDragZoom: TapDragZoomHandler,\n  ) {\n    this.el = el;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.tapDragZoom = tapDragZoom;\n    this.rotationDisabled = false;\n    this.enabled = true;\n  }\n\n  /**\n   * Enables the \"pinch to rotate and zoom\" interaction.\n   *\n   * @param {Object} [options] Options object.\n   * @param {string} [options.around] If \"center\" is passed, map will zoom around the center\n   *\n   * @example\n   *   map.touchZoomRotate.enable();\n   * @example\n   *   map.touchZoomRotate.enable({ around: 'center' });\n   */\n  public enable(options: { around?: 'center' }) {\n    this.touchZoom.enable(options);\n    if (!this.rotationDisabled) {\n      this.touchRotate.enable(options);\n    }\n    this.tapDragZoom.enable();\n    if (!isMini) {\n      this.el.classList.add('l7-touch-zoom-rotate');\n    }\n  }\n\n  /**\n   * Disables the \"pinch to rotate and zoom\" interaction.\n   *\n   * @example\n   *   map.touchZoomRotate.disable();\n   */\n  public disable() {\n    this.touchZoom.disable();\n    this.touchRotate.disable();\n    this.tapDragZoom.disable();\n    if (!isMini) {\n      this.el.classList.remove('l7-touch-zoom-rotate');\n    }\n  }\n\n  /**\n   * Returns a Boolean indicating whether the \"pinch to rotate and zoom\" interaction is enabled.\n   *\n   * @returns {boolean} `true` if the \"pinch to rotate and zoom\" interaction is enabled.\n   */\n  public isEnabled() {\n    return (\n      this.touchZoom.isEnabled() &&\n      (this.rotationDisabled || this.touchRotate.isEnabled()) &&\n      this.tapDragZoom.isEnabled()\n    );\n  }\n\n  /**\n   * Returns true if the handler is enabled and has detected the start of a zoom/rotate gesture.\n   *\n   * @returns {boolean} //eslint-disable-line\n   */\n  public isActive() {\n    return (\n      this.touchZoom.isActive() ||\n      this.touchRotate.isActive() ||\n      this.tapDragZoom.isActive()\n    );\n  }\n\n  /**\n   * Disables the \"pinch to rotate\" interaction, leaving the \"pinch to zoom\"\n   * interaction enabled.\n   *\n   * @example\n   *   map.touchZoomRotate.disableRotation();\n   */\n  public disableRotation() {\n    this.rotationDisabled = true;\n    this.touchRotate.disable();\n  }\n\n  /**\n   * Enables the \"pinch to rotate\" interaction.\n   *\n   * @example\n   *   map.touchZoomRotate.enable();\n   *   map.touchZoomRotate.enableRotation();\n   */\n  public enableRotation() {\n    this.rotationDisabled = false;\n    if (this.touchZoom.isEnabled()) {\n      this.touchRotate.enable();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}