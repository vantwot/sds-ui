{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { MAX_TAP_INTERVAL } from './single_tap_recognizer';\nimport TapRecognizer from './tap_recognizer';\n\nvar TapDragZoomHandler = function () {\n  function TapDragZoomHandler() {\n    _classCallCheck(this, TapDragZoomHandler);\n\n    _defineProperty(this, \"enabled\", void 0);\n\n    _defineProperty(this, \"active\", void 0);\n\n    _defineProperty(this, \"swipePoint\", void 0);\n\n    _defineProperty(this, \"swipeTouch\", void 0);\n\n    _defineProperty(this, \"tapTime\", void 0);\n\n    _defineProperty(this, \"tap\", void 0);\n\n    this.tap = new TapRecognizer({\n      numTouches: 1,\n      numTaps: 1\n    });\n    this.reset();\n  }\n\n  _createClass(TapDragZoomHandler, [{\n    key: \"reset\",\n    value: function reset() {\n      this.active = false;\n      delete this.swipePoint;\n      delete this.swipeTouch;\n      delete this.tapTime;\n      this.tap.reset();\n    }\n  }, {\n    key: \"touchstart\",\n    value: function touchstart(e, points, mapTouches) {\n      if (this.swipePoint) {\n        return;\n      }\n\n      if (this.tapTime && e.timeStamp - this.tapTime > MAX_TAP_INTERVAL) {\n        this.reset();\n      }\n\n      if (!this.tapTime) {\n        this.tap.touchstart(e, points, mapTouches);\n      } else if (mapTouches.length > 0) {\n        this.swipePoint = points[0];\n        this.swipeTouch = mapTouches[0].identifier;\n      }\n    }\n  }, {\n    key: \"touchmove\",\n    value: function touchmove(e, points, mapTouches) {\n      if (!this.tapTime) {\n        this.tap.touchmove(e, points, mapTouches);\n      } else if (this.swipePoint) {\n        if (mapTouches[0].identifier !== this.swipeTouch) {\n          return;\n        }\n\n        var newSwipePoint = points[0];\n        var dist = newSwipePoint.y - this.swipePoint.y;\n        this.swipePoint = newSwipePoint;\n        e.preventDefault();\n        this.active = true;\n        return {\n          zoomDelta: dist / 128\n        };\n      }\n    }\n  }, {\n    key: \"touchend\",\n    value: function touchend(e, points, mapTouches) {\n      if (!this.tapTime) {\n        var point = this.tap.touchend(e, points, mapTouches);\n\n        if (point) {\n          this.tapTime = e.timeStamp;\n        }\n      } else if (this.swipePoint) {\n        if (mapTouches.length === 0) {\n          this.reset();\n        }\n      }\n    }\n  }, {\n    key: \"touchcancel\",\n    value: function touchcancel() {\n      this.reset();\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      this.enabled = true;\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.enabled = false;\n      this.reset();\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.enabled;\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.active;\n    }\n  }]);\n\n  return TapDragZoomHandler;\n}();\n\nexport { TapDragZoomHandler as default };","map":{"version":3,"sources":["../../../src/handler/tap/tap_drag_zoom.ts"],"names":["TapDragZoomHandler","numTouches","numTaps","e","mapTouches","points","newSwipePoint","dist","zoomDelta","point"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport Point from '../../geo/point';\nimport { MAX_TAP_INTERVAL } from './single_tap_recognizer';\nimport TapRecognizer from './tap_recognizer';\n\nexport default class TapDragZoomHandler {\n  public enabled: boolean;\n  public active: boolean;\n  public swipePoint: Point;\n  public swipeTouch: number;\n  public tapTime: number;\n  public tap: TapRecognizer;\n\n  constructor() {\n    this.tap = new TapRecognizer({\n      numTouches: 1,\n      numTaps: 1,\n    });\n\n    this.reset();\n  }\n\n  public reset() {\n    this.active = false;\n    delete this.swipePoint;\n    delete this.swipeTouch;\n    delete this.tapTime;\n    this.tap.reset();\n  }\n\n  public touchstart(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    if (this.swipePoint) {\n      return;\n    }\n\n    if (this.tapTime && e.timeStamp - this.tapTime > MAX_TAP_INTERVAL) {\n      this.reset();\n    }\n\n    if (!this.tapTime) {\n      this.tap.touchstart(e, points, mapTouches);\n    } else if (mapTouches.length > 0) {\n      this.swipePoint = points[0];\n      this.swipeTouch = mapTouches[0].identifier;\n    }\n  }\n\n  public touchmove(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    if (!this.tapTime) {\n      this.tap.touchmove(e, points, mapTouches);\n    } else if (this.swipePoint) {\n      if (mapTouches[0].identifier !== this.swipeTouch) {\n        return;\n      }\n\n      const newSwipePoint = points[0];\n      const dist = newSwipePoint.y - this.swipePoint.y;\n      this.swipePoint = newSwipePoint;\n\n      e.preventDefault();\n      this.active = true;\n\n      return {\n        zoomDelta: dist / 128,\n      };\n    }\n  }\n\n  public touchend(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    if (!this.tapTime) {\n      const point = this.tap.touchend(e, points, mapTouches);\n      if (point) {\n        this.tapTime = e.timeStamp;\n      }\n    } else if (this.swipePoint) {\n      if (mapTouches.length === 0) {\n        this.reset();\n      }\n    }\n  }\n\n  public touchcancel() {\n    this.reset();\n  }\n\n  public enable() {\n    this.enabled = true;\n  }\n\n  public disable() {\n    this.enabled = false;\n    this.reset();\n  }\n\n  public isEnabled() {\n    return this.enabled;\n  }\n\n  public isActive() {\n    return this.active;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}