{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { inject, singleton, contrib, Contribution } from 'mana-syringe';\nimport { DisposableCollection, Disposable } from '../common/disposable';\nimport { IFrontendApplicationContribution } from '../xflow-main/interface';\nimport { IGraphProvider } from '../xflow-main/graph/graph-provider';\nimport { IKeyBindingOptionProvider, IKeyBindingService, IKeyBindingContribution } from './interface';\nimport { IGraphCommandService } from '../command/interface';\nimport { IModelService } from '../model-service/interface';\nlet KeyBindingRegistry = class KeyBindingRegistry {\n  constructor() {\n    var _this = this;\n\n    /** disposables */\n    this.toDispose = new DisposableCollection();\n    /** disposables */\n\n    this.keyBindingMap = new Map();\n    /** disposables */\n\n    this.enabledKeyBindingMap = new Map();\n    /** 注册用户定义在config中的keybinding */\n\n    this.registerExternalKeybindings = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        registerKeybindingFunc\n      } = yield this.optionProvider.getOption();\n      return registerKeybindingFunc(this);\n    });\n    /** 注册可Dispose的Keybinding */\n\n\n    this.registerKeybinding = function () {\n      let keybindings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      const toDispose = new DisposableCollection();\n      keybindings.forEach(keybinding => {\n        /** 注册 Keybinding config */\n        _this.keyBindingMap.set(keybinding.id, keybinding);\n        /** enable Keybinding */\n\n\n        _this.enableKeyBindings(keybinding.id).then(d => {\n          toDispose.push(Disposable.create(() => {\n            d.dispose();\n\n            _this.keyBindingMap.delete(keybinding.id);\n          }));\n        });\n      });\n\n      _this.toDispose.push(toDispose);\n\n      return toDispose;\n    };\n    /**\n     * 启用keybinding, 用于触发command\n     * @param id contextId\n     */\n\n\n    this.enableKeyBindings = keybindingId => __awaiter(this, void 0, void 0, function* () {\n      /** 清理同样的键盘事件 */\n      this.disableKeyBindings([keybindingId]);\n      const keybinding = this.keyBindingMap.get(keybindingId);\n      const graph = yield this.getX6Graph();\n      /**\n       * x6文档：https://x6.antv.vision/zh/docs/api/graph/keyboard\n       * x6源码：packages/x6/src/graph/keyboard.ts\n       */\n\n      const handler = this.runCommand(keybinding);\n      graph.bindKey(keybinding.keybinding, handler);\n      /** 注册disposable */\n\n      const toDispose = Disposable.create(() => {\n        graph.unbindKey(keybinding.keybinding);\n        this.enabledKeyBindingMap.delete(keybinding.id);\n      });\n      /** 注册disposable */\n\n      this.enabledKeyBindingMap.set(keybinding.id, toDispose);\n      return toDispose;\n    });\n    /**\n     * 禁用keybinding\n     */\n\n\n    this.disableKeyBindings = ids => {\n      ids.forEach(id => {\n        const disposable = this.enabledKeyBindingMap.get(id);\n\n        if (disposable) {\n          disposable.dispose();\n        }\n      });\n    };\n    /**\n     * 执行command\n     */\n\n\n    this.runCommand = keybinding => e => __awaiter(this, void 0, void 0, function* () {\n      yield keybinding.callback(keybinding, this.modelService, this.commandService, e);\n    });\n    /**\n     * 获取画布实例\n     */\n\n\n    this.getX6Graph = () => __awaiter(this, void 0, void 0, function* () {\n      const graphInstance = yield this.graphProvider.getGraphInstance();\n      return graphInstance;\n    });\n  }\n  /**\n   *  app启动时, 注册keybinding的扩展\n   */\n\n\n  onStart() {\n    const contributions = this.contributionProvider.getContributions();\n\n    for (const contribution of contributions) {\n      contribution.registerKeybinding(this);\n    }\n\n    this.registerExternalKeybindings();\n  }\n  /**\n   * app停止的逻辑\n   */\n\n\n  onStop() {\n    this.toDispose.dispose();\n  }\n\n};\n\n__decorate([inject(IKeyBindingOptionProvider), __metadata(\"design:type\", Object)], KeyBindingRegistry.prototype, \"optionProvider\", void 0);\n\n__decorate([inject(IGraphCommandService), __metadata(\"design:type\", Object)], KeyBindingRegistry.prototype, \"commandService\", void 0);\n\n__decorate([inject(IModelService), __metadata(\"design:type\", Object)], KeyBindingRegistry.prototype, \"modelService\", void 0);\n\n__decorate([contrib(IKeyBindingContribution), __metadata(\"design:type\", Object)], KeyBindingRegistry.prototype, \"contributionProvider\", void 0);\n\n__decorate([inject(IGraphProvider), __metadata(\"design:type\", Object)], KeyBindingRegistry.prototype, \"graphProvider\", void 0);\n\nKeyBindingRegistry = __decorate([singleton({\n  contrib: [IFrontendApplicationContribution, IKeyBindingService]\n})], KeyBindingRegistry);\nexport { KeyBindingRegistry };","map":{"version":3,"sources":["../../src/keybinding/keybinding-registry.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,MAAT,EAAiB,SAAjB,EAA4B,OAA5B,EAAqC,YAArC,QAAyD,cAAzD;AACA,SAAS,oBAAT,EAA+B,UAA/B,QAAiD,sBAAjD;AACA,SAAS,gCAAT,QAAiD,yBAAjD;AACA,SAAS,cAAT,QAA+B,oCAA/B;AAEA,SAAS,yBAAT,EAAoC,kBAApC,EAAwD,uBAAxD,QAAuF,aAAvF;AACA,SAAS,oBAAT,QAAqC,sBAArC;AACA,SAAS,aAAT,QAA8B,4BAA9B;AAGA,IAAa,kBAAkB,GAA/B,MAAa,kBAAb,CAA+B;AAA/B,EAAA,WAAA,GAAA;AAAA;;AACE;AACQ,SAAA,SAAA,GAAY,IAAI,oBAAJ,EAAZ;AACR;;AACQ,SAAA,aAAA,GAAgB,IAAI,GAAJ,EAAhB;AACR;;AACQ,SAAA,oBAAA,GAAuB,IAAI,GAAJ,EAAvB;AA8BR;;AACU,SAAA,2BAAA,GAA8B,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACjD,YAAM;AAAE,QAAA;AAAF,UAA6B,MAAM,KAAK,cAAL,CAAoB,SAApB,EAAzC;AACA,aAAO,sBAAsB,CAAC,IAAD,CAA7B;AACD,KAHkD,CAAzC;AAKV;;;AACA,SAAA,kBAAA,GAAqB,YAAoC;AAAA,UAAnC,WAAmC,uEAAN,EAAM;AACvD,YAAM,SAAS,GAAG,IAAI,oBAAJ,EAAlB;AACA,MAAA,WAAW,CAAC,OAAZ,CAAoB,UAAU,IAAG;AAC/B;AACA,QAAA,KAAI,CAAC,aAAL,CAAmB,GAAnB,CAAuB,UAAU,CAAC,EAAlC,EAAsC,UAAtC;AACA;;;AACA,QAAA,KAAI,CAAC,iBAAL,CAAuB,UAAU,CAAC,EAAlC,EAAsC,IAAtC,CAA2C,CAAC,IAAG;AAC7C,UAAA,SAAS,CAAC,IAAV,CACE,UAAU,CAAC,MAAX,CAAkB,MAAK;AACrB,YAAA,CAAC,CAAC,OAAF;;AACA,YAAA,KAAI,CAAC,aAAL,CAAmB,MAAnB,CAA0B,UAAU,CAAC,EAArC;AACD,WAHD,CADF;AAMD,SAPD;AAQD,OAZD;;AAaA,MAAA,KAAI,CAAC,SAAL,CAAe,IAAf,CAAoB,SAApB;;AACA,aAAO,SAAP;AACD,KAjBD;AAmBA;;;AAGG;;;AACH,SAAA,iBAAA,GAA2B,YAAP,IAA+B,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACjD;AACA,WAAK,kBAAL,CAAwB,CAAC,YAAD,CAAxB;AACA,YAAM,UAAU,GAAG,KAAK,aAAL,CAAmB,GAAnB,CAAuB,YAAvB,CAAnB;AACA,YAAM,KAAK,GAAG,MAAM,KAAK,UAAL,EAApB;AACA;;;AAGG;;AACH,YAAM,OAAO,GAAG,KAAK,UAAL,CAAgB,UAAhB,CAAhB;AACA,MAAA,KAAK,CAAC,OAAN,CAAc,UAAU,CAAC,UAAzB,EAAqC,OAArC;AACA;;AACA,YAAM,SAAS,GAAG,UAAU,CAAC,MAAX,CAAkB,MAAK;AACvC,QAAA,KAAK,CAAC,SAAN,CAAgB,UAAU,CAAC,UAA3B;AACA,aAAK,oBAAL,CAA0B,MAA1B,CAAiC,UAAU,CAAC,EAA5C;AACD,OAHiB,CAAlB;AAIA;;AACA,WAAK,oBAAL,CAA0B,GAA1B,CAA8B,UAAU,CAAC,EAAzC,EAA6C,SAA7C;AACA,aAAO,SAAP;AACD,KAnBkD,CAAnD;AAoBA;;AAEG;;;AACH,SAAA,kBAAA,GAAsB,GAAD,IAAkB;AACrC,MAAA,GAAG,CAAC,OAAJ,CAAY,EAAE,IAAG;AACf,cAAM,UAAU,GAAG,KAAK,oBAAL,CAA0B,GAA1B,CAA8B,EAA9B,CAAnB;;AACA,YAAI,UAAJ,EAAgB;AACd,UAAA,UAAU,CAAC,OAAX;AACD;AACF,OALD;AAMD,KAPD;AAQA;;AAEG;;;AACO,SAAA,UAAA,GAAc,UAAD,IAAoC,CAAP,IAA2B,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC7E,YAAM,UAAU,CAAC,QAAX,CAAoB,UAApB,EAAgC,KAAK,YAArC,EAAmD,KAAK,cAAxD,EAAwE,CAAxE,CAAN;AACD,KAF8E,CAArE;AAIV;;AAEG;;;AACK,SAAA,UAAA,GAAa,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC9B,YAAM,aAAa,GAAG,MAAM,KAAK,aAAL,CAAmB,gBAAnB,EAA5B;AACA,aAAO,aAAP;AACD,KAH+B,CAAxB;AAOT;AA/FC;;AAEG;;;AACH,EAAA,OAAO,GAAA;AACL,UAAM,aAAa,GAAG,KAAK,oBAAL,CAA0B,gBAA1B,EAAtB;;AACA,SAAK,MAAM,YAAX,IAA2B,aAA3B,EAA0C;AACxC,MAAA,YAAY,CAAC,kBAAb,CAAgC,IAAhC;AACD;;AACD,SAAK,2BAAL;AACD;AACD;;AAEG;;;AACH,EAAA,MAAM,GAAA;AACJ,SAAK,SAAL,CAAe,OAAf;AACD;;AAlC4B,CAA/B;;AASE,UAAA,CAAA,CADC,MAAM,CAAC,yBAAD,CACP,E,iCAAA,CAAA,E,4BAAA,E,gBAAA,E,KAAiD,CAAjD,CAAA;;AAGA,UAAA,CAAA,CADC,MAAM,CAAC,oBAAD,CACP,E,iCAAA,CAAA,E,4BAAA,E,gBAAA,E,KAA4C,CAA5C,CAAA;;AAGA,UAAA,CAAA,CADC,MAAM,CAAC,aAAD,CACP,E,iCAAA,CAAA,E,4BAAA,E,cAAA,E,KAAmC,CAAnC,CAAA;;AAGA,UAAA,CAAA,CADC,OAAO,CAAC,uBAAD,CACR,E,iCAAA,CAAA,E,4BAAA,E,sBAAA,E,KAAuF,CAAvF,CAAA;;AA+FA,UAAA,CAAA,CADC,MAAM,CAAC,cAAD,CACP,E,iCAAA,CAAA,E,4BAAA,E,eAAA,E,KAAgD,CAAhD,CAAA;;AAjHW,kBAAkB,GAAA,UAAA,CAAA,CAD9B,SAAS,CAAC;AAAE,EAAA,OAAO,EAAE,CAAC,gCAAD,EAAmC,kBAAnC;AAAX,CAAD,CACqB,CAAA,EAAlB,kBAAkB,CAAlB;SAAA,kB","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { inject, singleton, contrib, Contribution } from 'mana-syringe';\nimport { DisposableCollection, Disposable } from '../common/disposable';\nimport { IFrontendApplicationContribution } from '../xflow-main/interface';\nimport { IGraphProvider } from '../xflow-main/graph/graph-provider';\nimport { IKeyBindingOptionProvider, IKeyBindingService, IKeyBindingContribution } from './interface';\nimport { IGraphCommandService } from '../command/interface';\nimport { IModelService } from '../model-service/interface';\nlet KeyBindingRegistry = class KeyBindingRegistry {\n    constructor() {\n        /** disposables */\n        this.toDispose = new DisposableCollection();\n        /** disposables */\n        this.keyBindingMap = new Map();\n        /** disposables */\n        this.enabledKeyBindingMap = new Map();\n        /** 注册用户定义在config中的keybinding */\n        this.registerExternalKeybindings = () => __awaiter(this, void 0, void 0, function* () {\n            const { registerKeybindingFunc } = yield this.optionProvider.getOption();\n            return registerKeybindingFunc(this);\n        });\n        /** 注册可Dispose的Keybinding */\n        this.registerKeybinding = (keybindings = []) => {\n            const toDispose = new DisposableCollection();\n            keybindings.forEach(keybinding => {\n                /** 注册 Keybinding config */\n                this.keyBindingMap.set(keybinding.id, keybinding);\n                /** enable Keybinding */\n                this.enableKeyBindings(keybinding.id).then(d => {\n                    toDispose.push(Disposable.create(() => {\n                        d.dispose();\n                        this.keyBindingMap.delete(keybinding.id);\n                    }));\n                });\n            });\n            this.toDispose.push(toDispose);\n            return toDispose;\n        };\n        /**\n         * 启用keybinding, 用于触发command\n         * @param id contextId\n         */\n        this.enableKeyBindings = (keybindingId) => __awaiter(this, void 0, void 0, function* () {\n            /** 清理同样的键盘事件 */\n            this.disableKeyBindings([keybindingId]);\n            const keybinding = this.keyBindingMap.get(keybindingId);\n            const graph = yield this.getX6Graph();\n            /**\n             * x6文档：https://x6.antv.vision/zh/docs/api/graph/keyboard\n             * x6源码：packages/x6/src/graph/keyboard.ts\n             */\n            const handler = this.runCommand(keybinding);\n            graph.bindKey(keybinding.keybinding, handler);\n            /** 注册disposable */\n            const toDispose = Disposable.create(() => {\n                graph.unbindKey(keybinding.keybinding);\n                this.enabledKeyBindingMap.delete(keybinding.id);\n            });\n            /** 注册disposable */\n            this.enabledKeyBindingMap.set(keybinding.id, toDispose);\n            return toDispose;\n        });\n        /**\n         * 禁用keybinding\n         */\n        this.disableKeyBindings = (ids) => {\n            ids.forEach(id => {\n                const disposable = this.enabledKeyBindingMap.get(id);\n                if (disposable) {\n                    disposable.dispose();\n                }\n            });\n        };\n        /**\n         * 执行command\n         */\n        this.runCommand = (keybinding) => (e) => __awaiter(this, void 0, void 0, function* () {\n            yield keybinding.callback(keybinding, this.modelService, this.commandService, e);\n        });\n        /**\n         * 获取画布实例\n         */\n        this.getX6Graph = () => __awaiter(this, void 0, void 0, function* () {\n            const graphInstance = yield this.graphProvider.getGraphInstance();\n            return graphInstance;\n        });\n    }\n    /**\n     *  app启动时, 注册keybinding的扩展\n     */\n    onStart() {\n        const contributions = this.contributionProvider.getContributions();\n        for (const contribution of contributions) {\n            contribution.registerKeybinding(this);\n        }\n        this.registerExternalKeybindings();\n    }\n    /**\n     * app停止的逻辑\n     */\n    onStop() {\n        this.toDispose.dispose();\n    }\n};\n__decorate([\n    inject(IKeyBindingOptionProvider),\n    __metadata(\"design:type\", Object)\n], KeyBindingRegistry.prototype, \"optionProvider\", void 0);\n__decorate([\n    inject(IGraphCommandService),\n    __metadata(\"design:type\", Object)\n], KeyBindingRegistry.prototype, \"commandService\", void 0);\n__decorate([\n    inject(IModelService),\n    __metadata(\"design:type\", Object)\n], KeyBindingRegistry.prototype, \"modelService\", void 0);\n__decorate([\n    contrib(IKeyBindingContribution),\n    __metadata(\"design:type\", Object)\n], KeyBindingRegistry.prototype, \"contributionProvider\", void 0);\n__decorate([\n    inject(IGraphProvider),\n    __metadata(\"design:type\", Object)\n], KeyBindingRegistry.prototype, \"graphProvider\", void 0);\nKeyBindingRegistry = __decorate([\n    singleton({ contrib: [IFrontendApplicationContribution, IKeyBindingService] })\n], KeyBindingRegistry);\nexport { KeyBindingRegistry };\n//# sourceMappingURL=keybinding-registry.js.map"]},"metadata":{},"sourceType":"module"}