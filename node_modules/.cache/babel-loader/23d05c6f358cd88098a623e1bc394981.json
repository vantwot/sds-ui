{"ast":null,"code":"import _toConsumableArray from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @fileOverview random layout\n * @author shiwu.wyy@antfin.com\n */\nimport { isNaN, isArray, isFunction, isNumber, isString, floydWarshall, getAdjMatrix } from '../../util';\nimport { Base } from '../base';\nimport MDS from './mds';\nimport RadialNonoverlapForce from './radialNonoverlapForce';\n\nfunction getWeightMatrix(M) {\n  var rows = M.length;\n  var cols = M[0].length;\n  var result = [];\n\n  for (var i = 0; i < rows; i++) {\n    var row = [];\n\n    for (var j = 0; j < cols; j++) {\n      if (M[i][j] !== 0) {\n        row.push(1 / (M[i][j] * M[i][j]));\n      } else {\n        row.push(0);\n      }\n    }\n\n    result.push(row);\n  }\n\n  return result;\n}\n\nfunction getIndexById(array, id) {\n  var index = -1;\n  array.forEach(function (a, i) {\n    if (a.id === id) {\n      index = i;\n    }\n  });\n  return index;\n}\n\nfunction getEDistance(p1, p2) {\n  return Math.sqrt((p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]));\n}\n/**\n * 辐射状布局\n */\n\n\nexport var RadialLayout = /*#__PURE__*/function (_Base) {\n  _inherits(RadialLayout, _Base);\n\n  var _super = _createSuper(RadialLayout);\n\n  function RadialLayout(options) {\n    var _this;\n\n    _classCallCheck(this, RadialLayout);\n\n    _this = _super.call(this);\n    /** 布局中心 */\n\n    _this.center = [0, 0];\n    /** 停止迭代的最大迭代数 */\n\n    _this.maxIteration = 1000;\n    /** 中心点，默认为数据中第一个点 */\n\n    _this.focusNode = null;\n    /** 每一圈半径 */\n\n    _this.unitRadius = null;\n    /** 默认边长度 */\n\n    _this.linkDistance = 50;\n    /** 是否防止重叠 */\n\n    _this.preventOverlap = false;\n    /** 是否必须是严格的 radial 布局，即每一层的节点严格布局在一个环上。preventOverlap 为 true 时生效 */\n\n    _this.strictRadial = true;\n    /** 防止重叠步骤的最大迭代次数 */\n\n    _this.maxPreventOverlapIteration = 200;\n    _this.sortStrength = 10;\n\n    _this.updateCfg(options);\n\n    return _this;\n  }\n\n  _createClass(RadialLayout, [{\n    key: \"getDefaultCfg\",\n    value: function getDefaultCfg() {\n      return {\n        center: [0, 0],\n        maxIteration: 1000,\n        focusNode: null,\n        unitRadius: null,\n        linkDistance: 50,\n        preventOverlap: false,\n        nodeSize: undefined,\n        nodeSpacing: undefined,\n        strictRadial: true,\n        maxPreventOverlapIteration: 200,\n        sortBy: undefined,\n        sortStrength: 10\n      };\n    }\n    /**\n     * 执行布局\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      var self = this;\n      var nodes = self.nodes;\n      var edges = self.edges || [];\n      var center = self.center;\n\n      if (!nodes || nodes.length === 0) {\n        return;\n      }\n\n      if (nodes.length === 1) {\n        nodes[0].x = center[0];\n        nodes[0].y = center[1];\n        return;\n      }\n\n      var linkDistance = self.linkDistance; // layout\n\n      var focusNode = null;\n\n      if (isString(self.focusNode)) {\n        var found = false;\n\n        for (var i = 0; i < nodes.length; i++) {\n          if (nodes[i].id === self.focusNode) {\n            focusNode = nodes[i];\n            self.focusNode = focusNode;\n            found = true;\n            i = nodes.length;\n          }\n        }\n\n        if (!found) {\n          focusNode = null;\n        }\n      } else {\n        focusNode = self.focusNode;\n      } // default focus node\n\n\n      if (!focusNode) {\n        focusNode = nodes[0];\n        self.focusNode = focusNode;\n      } // the index of the focusNode in data\n\n\n      var focusIndex = getIndexById(nodes, focusNode.id);\n      self.focusIndex = focusIndex; // the graph-theoretic distance (shortest path distance) matrix\n\n      var adjMatrix = getAdjMatrix({\n        nodes: nodes,\n        edges: edges\n      }, false);\n      var D = floydWarshall(adjMatrix);\n      var maxDistance = self.maxToFocus(D, focusIndex); // replace first node in unconnected component to the circle at (maxDistance + 1)\n\n      self.handleInfinity(D, focusIndex, maxDistance + 1);\n      self.distances = D; // the shortest path distance from each node to focusNode\n\n      var focusNodeD = D[focusIndex];\n\n      if (!self.width && typeof window !== 'undefined') {\n        self.width = window.innerWidth;\n      }\n\n      if (!self.height && typeof window !== 'undefined') {\n        self.height = window.innerHeight;\n      }\n\n      var width = self.width || 500;\n      var height = self.height || 500;\n      var semiWidth = width - center[0] > center[0] ? center[0] : width - center[0];\n      var semiHeight = height - center[1] > center[1] ? center[1] : height - center[1];\n\n      if (semiWidth === 0) {\n        semiWidth = width / 2;\n      }\n\n      if (semiHeight === 0) {\n        semiHeight = height / 2;\n      } // the maxRadius of the graph\n\n\n      var maxRadius = semiHeight > semiWidth ? semiWidth : semiHeight;\n      var maxD = Math.max.apply(Math, _toConsumableArray(focusNodeD)); // the radius for each nodes away from focusNode\n\n      var radii = [];\n      focusNodeD.forEach(function (value, i) {\n        if (!self.unitRadius) {\n          self.unitRadius = maxRadius / maxD;\n        }\n\n        radii[i] = value * self.unitRadius;\n      });\n      self.radii = radii;\n      var eIdealD = self.eIdealDisMatrix(); // const eIdealD = scaleMatrix(D, linkDistance);\n\n      self.eIdealDistances = eIdealD; // the weight matrix, Wij = 1 / dij^(-2)\n\n      var W = getWeightMatrix(eIdealD);\n      self.weights = W; // the initial positions from mds\n\n      var mds = new MDS({\n        linkDistance: linkDistance,\n        distances: eIdealD\n      });\n      var positions = mds.layout();\n      positions.forEach(function (p) {\n        if (isNaN(p[0])) {\n          p[0] = Math.random() * linkDistance;\n        }\n\n        if (isNaN(p[1])) {\n          p[1] = Math.random() * linkDistance;\n        }\n      });\n      self.positions = positions;\n      positions.forEach(function (p, i) {\n        nodes[i].x = p[0] + center[0];\n        nodes[i].y = p[1] + center[1];\n      }); // move the graph to origin, centered at focusNode\n\n      positions.forEach(function (p) {\n        p[0] -= positions[focusIndex][0];\n        p[1] -= positions[focusIndex][1];\n      });\n      self.run();\n      var preventOverlap = self.preventOverlap;\n      var nodeSize = self.nodeSize;\n      var nodeSizeFunc;\n      var strictRadial = self.strictRadial; // stagger the overlapped nodes\n\n      if (preventOverlap) {\n        var nodeSpacing = self.nodeSpacing;\n        var nodeSpacingFunc;\n\n        if (isNumber(nodeSpacing)) {\n          nodeSpacingFunc = function nodeSpacingFunc() {\n            return nodeSpacing;\n          };\n        } else if (isFunction(nodeSpacing)) {\n          nodeSpacingFunc = nodeSpacing;\n        } else {\n          nodeSpacingFunc = function nodeSpacingFunc() {\n            return 0;\n          };\n        }\n\n        if (!nodeSize) {\n          nodeSizeFunc = function nodeSizeFunc(d) {\n            if (d.size) {\n              if (isArray(d.size)) {\n                var res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n                return res + nodeSpacingFunc(d);\n              }\n\n              return d.size + nodeSpacingFunc(d);\n            }\n\n            return 10 + nodeSpacingFunc(d);\n          };\n        } else if (isArray(nodeSize)) {\n          nodeSizeFunc = function nodeSizeFunc(d) {\n            var res = nodeSize[0] > nodeSize[1] ? nodeSize[0] : nodeSize[1];\n            return res + nodeSpacingFunc(d);\n          };\n        } else {\n          nodeSizeFunc = function nodeSizeFunc(d) {\n            return nodeSize + nodeSpacingFunc(d);\n          };\n        }\n\n        var nonoverlapForceParams = {\n          nodes: nodes,\n          nodeSizeFunc: nodeSizeFunc,\n          adjMatrix: adjMatrix,\n          positions: positions,\n          radii: radii,\n          height: height,\n          width: width,\n          strictRadial: strictRadial,\n          focusID: focusIndex,\n          iterations: self.maxPreventOverlapIteration || 200,\n          k: positions.length / 4.5\n        };\n        var nonoverlapForce = new RadialNonoverlapForce(nonoverlapForceParams);\n        positions = nonoverlapForce.layout();\n      } // move the graph to center\n\n\n      positions.forEach(function (p, i) {\n        nodes[i].x = p[0] + center[0];\n        nodes[i].y = p[1] + center[1];\n      });\n      return nodes;\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      var self = this;\n      var maxIteration = self.maxIteration;\n      var positions = self.positions || [];\n      var W = self.weights || [];\n      var eIdealDis = self.eIdealDistances || [];\n      var radii = self.radii || [];\n\n      for (var i = 0; i <= maxIteration; i++) {\n        var param = i / maxIteration;\n        self.oneIteration(param, positions, radii, eIdealDis, W);\n      }\n    }\n  }, {\n    key: \"oneIteration\",\n    value: function oneIteration(param, positions, radii, D, W) {\n      var self = this;\n      var vparam = 1 - param;\n      var focusIndex = self.focusIndex;\n      positions.forEach(function (v, i) {\n        // v\n        var originDis = getEDistance(v, [0, 0]);\n        var reciODis = originDis === 0 ? 0 : 1 / originDis;\n\n        if (i === focusIndex) {\n          return;\n        }\n\n        var xMolecule = 0;\n        var yMolecule = 0;\n        var denominator = 0;\n        positions.forEach(function (u, j) {\n          // u\n          if (i === j) {\n            return;\n          } // the euclidean distance between v and u\n\n\n          var edis = getEDistance(v, u);\n          var reciEdis = edis === 0 ? 0 : 1 / edis;\n          var idealDis = D[j][i]; // same for x and y\n\n          denominator += W[i][j]; // x\n\n          xMolecule += W[i][j] * (u[0] + idealDis * (v[0] - u[0]) * reciEdis); // y\n\n          yMolecule += W[i][j] * (u[1] + idealDis * (v[1] - u[1]) * reciEdis);\n        });\n        var reciR = radii[i] === 0 ? 0 : 1 / radii[i];\n        denominator *= vparam;\n        denominator += param * reciR * reciR; // x\n\n        xMolecule *= vparam;\n        xMolecule += param * reciR * v[0] * reciODis;\n        v[0] = xMolecule / denominator; // y\n\n        yMolecule *= vparam;\n        yMolecule += param * reciR * v[1] * reciODis;\n        v[1] = yMolecule / denominator;\n      });\n    }\n  }, {\n    key: \"eIdealDisMatrix\",\n    value: function eIdealDisMatrix() {\n      var self = this;\n      var nodes = self.nodes;\n      if (!nodes) return [];\n      var D = self.distances;\n      var linkDis = self.linkDistance;\n      var radii = self.radii || [];\n      var unitRadius = self.unitRadius || 50;\n      var result = [];\n\n      if (D) {\n        D.forEach(function (row, i) {\n          var newRow = [];\n          row.forEach(function (v, j) {\n            if (i === j) {\n              newRow.push(0);\n            } else if (radii[i] === radii[j]) {\n              // i and j are on the same circle\n              if (self.sortBy === 'data') {\n                // sort the nodes on the same circle according to the ordering of the data\n                newRow.push(v * (Math.abs(i - j) * self.sortStrength) / (radii[i] / unitRadius));\n              } else if (self.sortBy) {\n                // sort the nodes on the same circle according to the attributes\n                var iValue = nodes[i][self.sortBy] || 0;\n                var jValue = nodes[j][self.sortBy] || 0;\n\n                if (isString(iValue)) {\n                  iValue = iValue.charCodeAt(0);\n                }\n\n                if (isString(jValue)) {\n                  jValue = jValue.charCodeAt(0);\n                }\n\n                newRow.push(v * (Math.abs(iValue - jValue) * self.sortStrength) / (radii[i] / unitRadius));\n              } else {\n                newRow.push(v * linkDis / (radii[i] / unitRadius));\n              }\n            } else {\n              // i and j are on different circle\n              // i and j are on different circle\n              var link = (linkDis + unitRadius) / 2;\n              newRow.push(v * link);\n            }\n          });\n          result.push(newRow);\n        });\n      }\n\n      return result;\n    }\n  }, {\n    key: \"handleInfinity\",\n    value: function handleInfinity(matrix, focusIndex, step) {\n      var length = matrix.length; // 遍历 matrix 中遍历 focus 对应行\n\n      for (var i = 0; i < length; i++) {\n        // matrix 关注点对应行的 Inf 项\n        if (matrix[focusIndex][i] === Infinity) {\n          matrix[focusIndex][i] = step;\n          matrix[i][focusIndex] = step; // 遍历 matrix 中的 i 行，i 行中非 Inf 项若在 focus 行为 Inf，则替换 focus 行的那个 Inf\n\n          for (var j = 0; j < length; j++) {\n            if (matrix[i][j] !== Infinity && matrix[focusIndex][j] === Infinity) {\n              matrix[focusIndex][j] = step + matrix[i][j];\n              matrix[j][focusIndex] = step + matrix[i][j];\n            }\n          }\n        }\n      } // 处理其他行的 Inf。根据该行对应点与 focus 距离以及 Inf 项点 与 focus 距离，决定替换值\n\n\n      for (var _i = 0; _i < length; _i++) {\n        if (_i === focusIndex) {\n          continue;\n        }\n\n        for (var _j = 0; _j < length; _j++) {\n          if (matrix[_i][_j] === Infinity) {\n            var minus = Math.abs(matrix[focusIndex][_i] - matrix[focusIndex][_j]);\n            minus = minus === 0 ? 1 : minus;\n            matrix[_i][_j] = minus;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"maxToFocus\",\n    value: function maxToFocus(matrix, focusIndex) {\n      var max = 0;\n\n      for (var i = 0; i < matrix[focusIndex].length; i++) {\n        if (matrix[focusIndex][i] === Infinity) {\n          continue;\n        }\n\n        max = matrix[focusIndex][i] > max ? matrix[focusIndex][i] : max;\n      }\n\n      return max;\n    }\n  }]);\n\n  return RadialLayout;\n}(Base);","map":{"version":3,"sources":["../../../src/layout/radial/radial.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @fileOverview random layout\n * @author shiwu.wyy@antfin.com\n */\nimport { isNaN, isArray, isFunction, isNumber, isString, floydWarshall, getAdjMatrix } from '../../util';\nimport { Base } from '../base';\nimport MDS from './mds';\nimport RadialNonoverlapForce from './radialNonoverlapForce';\nfunction getWeightMatrix(M) {\n    const rows = M.length;\n    const cols = M[0].length;\n    const result = [];\n    for (let i = 0; i < rows; i++) {\n        const row = [];\n        for (let j = 0; j < cols; j++) {\n            if (M[i][j] !== 0) {\n                row.push(1 / (M[i][j] * M[i][j]));\n            }\n            else {\n                row.push(0);\n            }\n        }\n        result.push(row);\n    }\n    return result;\n}\nfunction getIndexById(array, id) {\n    let index = -1;\n    array.forEach((a, i) => {\n        if (a.id === id) {\n            index = i;\n        }\n    });\n    return index;\n}\nfunction getEDistance(p1, p2) {\n    return Math.sqrt((p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]));\n}\n/**\n * 辐射状布局\n */\nexport class RadialLayout extends Base {\n    constructor(options) {\n        super();\n        /** 布局中心 */\n        this.center = [0, 0];\n        /** 停止迭代的最大迭代数 */\n        this.maxIteration = 1000;\n        /** 中心点，默认为数据中第一个点 */\n        this.focusNode = null;\n        /** 每一圈半径 */\n        this.unitRadius = null;\n        /** 默认边长度 */\n        this.linkDistance = 50;\n        /** 是否防止重叠 */\n        this.preventOverlap = false;\n        /** 是否必须是严格的 radial 布局，即每一层的节点严格布局在一个环上。preventOverlap 为 true 时生效 */\n        this.strictRadial = true;\n        /** 防止重叠步骤的最大迭代次数 */\n        this.maxPreventOverlapIteration = 200;\n        this.sortStrength = 10;\n        this.updateCfg(options);\n    }\n    getDefaultCfg() {\n        return {\n            center: [0, 0],\n            maxIteration: 1000,\n            focusNode: null,\n            unitRadius: null,\n            linkDistance: 50,\n            preventOverlap: false,\n            nodeSize: undefined,\n            nodeSpacing: undefined,\n            strictRadial: true,\n            maxPreventOverlapIteration: 200,\n            sortBy: undefined,\n            sortStrength: 10,\n        };\n    }\n    /**\n     * 执行布局\n     */\n    execute() {\n        const self = this;\n        const nodes = self.nodes;\n        const edges = self.edges || [];\n        const center = self.center;\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n        if (nodes.length === 1) {\n            nodes[0].x = center[0];\n            nodes[0].y = center[1];\n            return;\n        }\n        const linkDistance = self.linkDistance;\n        // layout\n        let focusNode = null;\n        if (isString(self.focusNode)) {\n            let found = false;\n            for (let i = 0; i < nodes.length; i++) {\n                if (nodes[i].id === self.focusNode) {\n                    focusNode = nodes[i];\n                    self.focusNode = focusNode;\n                    found = true;\n                    i = nodes.length;\n                }\n            }\n            if (!found) {\n                focusNode = null;\n            }\n        }\n        else {\n            focusNode = self.focusNode;\n        }\n        // default focus node\n        if (!focusNode) {\n            focusNode = nodes[0];\n            self.focusNode = focusNode;\n        }\n        // the index of the focusNode in data\n        const focusIndex = getIndexById(nodes, focusNode.id);\n        self.focusIndex = focusIndex;\n        // the graph-theoretic distance (shortest path distance) matrix\n        const adjMatrix = getAdjMatrix({ nodes, edges }, false);\n        const D = floydWarshall(adjMatrix);\n        const maxDistance = self.maxToFocus(D, focusIndex);\n        // replace first node in unconnected component to the circle at (maxDistance + 1)\n        self.handleInfinity(D, focusIndex, maxDistance + 1);\n        self.distances = D;\n        // the shortest path distance from each node to focusNode\n        const focusNodeD = D[focusIndex];\n        if (!self.width && typeof window !== 'undefined') {\n            self.width = window.innerWidth;\n        }\n        if (!self.height && typeof window !== 'undefined') {\n            self.height = window.innerHeight;\n        }\n        const width = self.width || 500;\n        const height = self.height || 500;\n        let semiWidth = width - center[0] > center[0] ? center[0] : width - center[0];\n        let semiHeight = height - center[1] > center[1] ? center[1] : height - center[1];\n        if (semiWidth === 0) {\n            semiWidth = width / 2;\n        }\n        if (semiHeight === 0) {\n            semiHeight = height / 2;\n        }\n        // the maxRadius of the graph\n        const maxRadius = semiHeight > semiWidth ? semiWidth : semiHeight;\n        const maxD = Math.max(...focusNodeD);\n        // the radius for each nodes away from focusNode\n        const radii = [];\n        focusNodeD.forEach((value, i) => {\n            if (!self.unitRadius) {\n                self.unitRadius = maxRadius / maxD;\n            }\n            radii[i] = value * self.unitRadius;\n        });\n        self.radii = radii;\n        const eIdealD = self.eIdealDisMatrix();\n        // const eIdealD = scaleMatrix(D, linkDistance);\n        self.eIdealDistances = eIdealD;\n        // the weight matrix, Wij = 1 / dij^(-2)\n        const W = getWeightMatrix(eIdealD);\n        self.weights = W;\n        // the initial positions from mds\n        const mds = new MDS({ linkDistance, distances: eIdealD });\n        let positions = mds.layout();\n        positions.forEach((p) => {\n            if (isNaN(p[0])) {\n                p[0] = Math.random() * linkDistance;\n            }\n            if (isNaN(p[1])) {\n                p[1] = Math.random() * linkDistance;\n            }\n        });\n        self.positions = positions;\n        positions.forEach((p, i) => {\n            nodes[i].x = p[0] + center[0];\n            nodes[i].y = p[1] + center[1];\n        });\n        // move the graph to origin, centered at focusNode\n        positions.forEach((p) => {\n            p[0] -= positions[focusIndex][0];\n            p[1] -= positions[focusIndex][1];\n        });\n        self.run();\n        const preventOverlap = self.preventOverlap;\n        const nodeSize = self.nodeSize;\n        let nodeSizeFunc;\n        const strictRadial = self.strictRadial;\n        // stagger the overlapped nodes\n        if (preventOverlap) {\n            const nodeSpacing = self.nodeSpacing;\n            let nodeSpacingFunc;\n            if (isNumber(nodeSpacing)) {\n                nodeSpacingFunc = () => nodeSpacing;\n            }\n            else if (isFunction(nodeSpacing)) {\n                nodeSpacingFunc = nodeSpacing;\n            }\n            else {\n                nodeSpacingFunc = () => 0;\n            }\n            if (!nodeSize) {\n                nodeSizeFunc = (d) => {\n                    if (d.size) {\n                        if (isArray(d.size)) {\n                            const res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n                            return res + nodeSpacingFunc(d);\n                        }\n                        return d.size + nodeSpacingFunc(d);\n                    }\n                    return 10 + nodeSpacingFunc(d);\n                };\n            }\n            else if (isArray(nodeSize)) {\n                nodeSizeFunc = (d) => {\n                    const res = nodeSize[0] > nodeSize[1] ? nodeSize[0] : nodeSize[1];\n                    return res + nodeSpacingFunc(d);\n                };\n            }\n            else {\n                nodeSizeFunc = (d) => nodeSize + nodeSpacingFunc(d);\n            }\n            const nonoverlapForceParams = {\n                nodes,\n                nodeSizeFunc,\n                adjMatrix,\n                positions,\n                radii,\n                height,\n                width,\n                strictRadial,\n                focusID: focusIndex,\n                iterations: self.maxPreventOverlapIteration || 200,\n                k: positions.length / 4.5,\n            };\n            const nonoverlapForce = new RadialNonoverlapForce(nonoverlapForceParams);\n            positions = nonoverlapForce.layout();\n        }\n        // move the graph to center\n        positions.forEach((p, i) => {\n            nodes[i].x = p[0] + center[0];\n            nodes[i].y = p[1] + center[1];\n        });\n        return nodes;\n    }\n    run() {\n        const self = this;\n        const maxIteration = self.maxIteration;\n        const positions = self.positions || [];\n        const W = self.weights || [];\n        const eIdealDis = self.eIdealDistances || [];\n        const radii = self.radii || [];\n        for (let i = 0; i <= maxIteration; i++) {\n            const param = i / maxIteration;\n            self.oneIteration(param, positions, radii, eIdealDis, W);\n        }\n    }\n    oneIteration(param, positions, radii, D, W) {\n        const self = this;\n        const vparam = 1 - param;\n        const focusIndex = self.focusIndex;\n        positions.forEach((v, i) => {\n            // v\n            const originDis = getEDistance(v, [0, 0]);\n            const reciODis = originDis === 0 ? 0 : 1 / originDis;\n            if (i === focusIndex) {\n                return;\n            }\n            let xMolecule = 0;\n            let yMolecule = 0;\n            let denominator = 0;\n            positions.forEach((u, j) => {\n                // u\n                if (i === j) {\n                    return;\n                }\n                // the euclidean distance between v and u\n                const edis = getEDistance(v, u);\n                const reciEdis = edis === 0 ? 0 : 1 / edis;\n                const idealDis = D[j][i];\n                // same for x and y\n                denominator += W[i][j];\n                // x\n                xMolecule += W[i][j] * (u[0] + idealDis * (v[0] - u[0]) * reciEdis);\n                // y\n                yMolecule += W[i][j] * (u[1] + idealDis * (v[1] - u[1]) * reciEdis);\n            });\n            const reciR = radii[i] === 0 ? 0 : 1 / radii[i];\n            denominator *= vparam;\n            denominator += param * reciR * reciR;\n            // x\n            xMolecule *= vparam;\n            xMolecule += param * reciR * v[0] * reciODis;\n            v[0] = xMolecule / denominator;\n            // y\n            yMolecule *= vparam;\n            yMolecule += param * reciR * v[1] * reciODis;\n            v[1] = yMolecule / denominator;\n        });\n    }\n    eIdealDisMatrix() {\n        const self = this;\n        const nodes = self.nodes;\n        if (!nodes)\n            return [];\n        const D = self.distances;\n        const linkDis = self.linkDistance;\n        const radii = self.radii || [];\n        const unitRadius = self.unitRadius || 50;\n        const result = [];\n        if (D) {\n            D.forEach((row, i) => {\n                const newRow = [];\n                row.forEach((v, j) => {\n                    if (i === j) {\n                        newRow.push(0);\n                    }\n                    else if (radii[i] === radii[j]) {\n                        // i and j are on the same circle\n                        if (self.sortBy === 'data') {\n                            // sort the nodes on the same circle according to the ordering of the data\n                            newRow.push((v * (Math.abs(i - j) * self.sortStrength)) / (radii[i] / unitRadius));\n                        }\n                        else if (self.sortBy) {\n                            // sort the nodes on the same circle according to the attributes\n                            let iValue = nodes[i][self.sortBy] || 0;\n                            let jValue = nodes[j][self.sortBy] || 0;\n                            if (isString(iValue)) {\n                                iValue = iValue.charCodeAt(0);\n                            }\n                            if (isString(jValue)) {\n                                jValue = jValue.charCodeAt(0);\n                            }\n                            newRow.push((v * (Math.abs(iValue - jValue) * self.sortStrength)) / (radii[i] / unitRadius));\n                        }\n                        else {\n                            newRow.push((v * linkDis) / (radii[i] / unitRadius));\n                        }\n                    }\n                    else {\n                        // i and j are on different circle\n                        // i and j are on different circle\n                        const link = (linkDis + unitRadius) / 2;\n                        newRow.push(v * link);\n                    }\n                });\n                result.push(newRow);\n            });\n        }\n        return result;\n    }\n    handleInfinity(matrix, focusIndex, step) {\n        const length = matrix.length;\n        // 遍历 matrix 中遍历 focus 对应行\n        for (let i = 0; i < length; i++) {\n            // matrix 关注点对应行的 Inf 项\n            if (matrix[focusIndex][i] === Infinity) {\n                matrix[focusIndex][i] = step;\n                matrix[i][focusIndex] = step;\n                // 遍历 matrix 中的 i 行，i 行中非 Inf 项若在 focus 行为 Inf，则替换 focus 行的那个 Inf\n                for (let j = 0; j < length; j++) {\n                    if (matrix[i][j] !== Infinity && matrix[focusIndex][j] === Infinity) {\n                        matrix[focusIndex][j] = step + matrix[i][j];\n                        matrix[j][focusIndex] = step + matrix[i][j];\n                    }\n                }\n            }\n        }\n        // 处理其他行的 Inf。根据该行对应点与 focus 距离以及 Inf 项点 与 focus 距离，决定替换值\n        for (let i = 0; i < length; i++) {\n            if (i === focusIndex) {\n                continue;\n            }\n            for (let j = 0; j < length; j++) {\n                if (matrix[i][j] === Infinity) {\n                    let minus = Math.abs(matrix[focusIndex][i] - matrix[focusIndex][j]);\n                    minus = minus === 0 ? 1 : minus;\n                    matrix[i][j] = minus;\n                }\n            }\n        }\n    }\n    maxToFocus(matrix, focusIndex) {\n        let max = 0;\n        for (let i = 0; i < matrix[focusIndex].length; i++) {\n            if (matrix[focusIndex][i] === Infinity) {\n                continue;\n            }\n            max = matrix[focusIndex][i] > max ? matrix[focusIndex][i] : max;\n        }\n        return max;\n    }\n}\n//# sourceMappingURL=radial.js.map"]},"metadata":{},"sourceType":"module"}