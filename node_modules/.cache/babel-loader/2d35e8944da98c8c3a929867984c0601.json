{"ast":null,"code":"import { ToolsView } from '../../view/tool';\nimport { Point } from '../../geometry';\nimport { Dom, FunctionExt } from '../../util';\nexport class CellEditor extends ToolsView.ToolItem {\n  constructor() {\n    super(...arguments);\n    this.labelIndex = -1;\n    this.distance = 0.5;\n  }\n\n  render() {\n    this.createElement();\n    this.update();\n    this.autoFocus();\n    this.delegateDocumentEvents(this.options.documentEvents);\n    return this;\n  }\n\n  createElement() {\n    const {\n      cell\n    } = this;\n    const classNames = [this.prefixClassName(`${cell.isEdge() ? 'edge' : 'node'}-tool-editor`), this.prefixClassName('cell-tool-editor')];\n    this.editor = ToolsView.createElement('div', false);\n    this.addClass(classNames, this.editor);\n    this.editor.contentEditable = 'true';\n    this.container.appendChild(this.editor);\n  }\n\n  update() {\n    const {\n      graph,\n      cell,\n      editor\n    } = this;\n    const style = editor.style; // set tool position\n\n    let pos = new Point();\n    let minWidth = 20;\n\n    if (cell.isNode()) {\n      pos = cell.getBBox().center;\n      minWidth = cell.size().width - 4;\n    } else if (cell.isEdge()) {\n      const e = this.options.event;\n      const target = e.target;\n      const parent = target.parentElement;\n      const isEdgeLabel = parent && Dom.hasClass(parent, this.prefixClassName('edge-label'));\n\n      if (isEdgeLabel) {\n        const index = parent.getAttribute('data-index') || '0';\n        this.labelIndex = parseInt(index, 10);\n        const matrix = parent.getAttribute('transform');\n        const {\n          translation\n        } = Dom.parseTransformString(matrix);\n        pos = new Point(translation.tx, translation.ty);\n        minWidth = Dom.getBBox(target).width;\n      } else {\n        pos = graph.clientToLocal(Point.create(e.clientX, e.clientY));\n        const view = this.cellView;\n        const d = view.path.closestPointLength(pos);\n        this.distance = d;\n      }\n    }\n\n    pos = graph.localToGraph(pos);\n    style.left = `${pos.x}px`;\n    style.top = `${pos.y}px`;\n    style.minWidth = `${minWidth}px`; // set tool transform\n\n    const scale = graph.scale();\n    style.transform = `scale(${scale.sx}, ${scale.sy}) translate(-50%, -50%)`; // set font style\n\n    const attrs = this.options.attrs;\n    style.fontSize = `${attrs.fontSize}px`;\n    style.fontFamily = attrs.fontFamily;\n    style.color = attrs.color;\n    style.backgroundColor = attrs.backgroundColor; // set init value\n\n    const getText = this.options.getText;\n    let text;\n\n    if (typeof getText === 'function') {\n      text = FunctionExt.call(getText, this.cellView, {\n        cell: this.cell,\n        index: this.labelIndex\n      });\n    }\n\n    editor.innerText = text || '';\n    return this;\n  }\n\n  onDocumentMouseDown(e) {\n    if (e.target !== this.editor) {\n      const cell = this.cell;\n      const value = this.editor.innerText.replace(/\\n$/, '') || ''; // set value\n\n      const setText = this.options.setText;\n\n      if (typeof setText === 'function') {\n        FunctionExt.call(setText, this.cellView, {\n          cell: this.cell,\n          value,\n          index: this.labelIndex,\n          distance: this.distance\n        });\n      } // remove tool\n\n\n      cell.removeTool(cell.isEdge() ? 'edge-editor' : 'node-editor');\n      this.undelegateDocumentEvents();\n    }\n  }\n\n  onDblClick(e) {\n    e.stopPropagation();\n  }\n\n  onMouseDown(e) {\n    e.stopPropagation();\n  }\n\n  autoFocus() {\n    setTimeout(() => {\n      this.editor.focus();\n      this.selectText();\n    });\n  }\n\n  selectText() {\n    if (window.getSelection) {\n      const range = document.createRange();\n      const selection = window.getSelection();\n      range.selectNodeContents(this.editor);\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n\n}\n\n(function (CellEditor) {\n  CellEditor.config({\n    tagName: 'div',\n    isSVGElement: false,\n    events: {\n      dblclick: 'onDblClick',\n      mousedown: 'onMouseDown'\n    },\n    documentEvents: {\n      mousedown: 'onDocumentMouseDown'\n    }\n  });\n})(CellEditor || (CellEditor = {}));\n\n(function (CellEditor) {\n  CellEditor.NodeEditor = CellEditor.define({\n    attrs: {\n      fontSize: 14,\n      fontFamily: 'Arial, helvetica, sans-serif',\n      color: '#000',\n      backgroundColor: '#fff'\n    },\n\n    getText(_ref) {\n      let {\n        cell\n      } = _ref;\n      return cell.attr('text/text');\n    },\n\n    setText(_ref2) {\n      let {\n        cell,\n        value\n      } = _ref2;\n      cell.attr('text/text', value);\n    }\n\n  });\n  CellEditor.EdgeEditor = CellEditor.define({\n    attrs: {\n      fontSize: 14,\n      fontFamily: 'Arial, helvetica, sans-serif',\n      color: '#000',\n      backgroundColor: '#fff'\n    },\n\n    getText(_ref3) {\n      let {\n        cell,\n        index\n      } = _ref3;\n\n      if (index === -1) {\n        return '';\n      }\n\n      return cell.prop(`labels/${index}/attrs/label/text`);\n    },\n\n    setText(_ref4) {\n      let {\n        cell,\n        value,\n        index,\n        distance\n      } = _ref4;\n      const edge = cell;\n\n      if (index === -1) {\n        edge.appendLabel({\n          position: {\n            distance: distance\n          },\n          attrs: {\n            label: {\n              text: value\n            }\n          }\n        });\n      } else {\n        edge.prop(`labels/${index}/attrs/label/text`, value);\n      }\n    }\n\n  });\n})(CellEditor || (CellEditor = {}));","map":{"version":3,"sources":["../../../src/registry/tool/editor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { ToolsView } from '../../view/tool';\nimport { Point } from '../../geometry';\nimport { Dom, FunctionExt } from '../../util';\nexport class CellEditor extends ToolsView.ToolItem {\n    constructor() {\n        super(...arguments);\n        this.labelIndex = -1;\n        this.distance = 0.5;\n    }\n    render() {\n        this.createElement();\n        this.update();\n        this.autoFocus();\n        this.delegateDocumentEvents(this.options.documentEvents);\n        return this;\n    }\n    createElement() {\n        const { cell } = this;\n        const classNames = [\n            this.prefixClassName(`${cell.isEdge() ? 'edge' : 'node'}-tool-editor`),\n            this.prefixClassName('cell-tool-editor'),\n        ];\n        this.editor = ToolsView.createElement('div', false);\n        this.addClass(classNames, this.editor);\n        this.editor.contentEditable = 'true';\n        this.container.appendChild(this.editor);\n    }\n    update() {\n        const { graph, cell, editor } = this;\n        const style = editor.style;\n        // set tool position\n        let pos = new Point();\n        let minWidth = 20;\n        if (cell.isNode()) {\n            pos = cell.getBBox().center;\n            minWidth = cell.size().width - 4;\n        }\n        else if (cell.isEdge()) {\n            const e = this.options.event;\n            const target = e.target;\n            const parent = target.parentElement;\n            const isEdgeLabel = parent && Dom.hasClass(parent, this.prefixClassName('edge-label'));\n            if (isEdgeLabel) {\n                const index = parent.getAttribute('data-index') || '0';\n                this.labelIndex = parseInt(index, 10);\n                const matrix = parent.getAttribute('transform');\n                const { translation } = Dom.parseTransformString(matrix);\n                pos = new Point(translation.tx, translation.ty);\n                minWidth = Dom.getBBox(target).width;\n            }\n            else {\n                pos = graph.clientToLocal(Point.create(e.clientX, e.clientY));\n                const view = this.cellView;\n                const d = view.path.closestPointLength(pos);\n                this.distance = d;\n            }\n        }\n        pos = graph.localToGraph(pos);\n        style.left = `${pos.x}px`;\n        style.top = `${pos.y}px`;\n        style.minWidth = `${minWidth}px`;\n        // set tool transform\n        const scale = graph.scale();\n        style.transform = `scale(${scale.sx}, ${scale.sy}) translate(-50%, -50%)`;\n        // set font style\n        const attrs = this.options.attrs;\n        style.fontSize = `${attrs.fontSize}px`;\n        style.fontFamily = attrs.fontFamily;\n        style.color = attrs.color;\n        style.backgroundColor = attrs.backgroundColor;\n        // set init value\n        const getText = this.options.getText;\n        let text;\n        if (typeof getText === 'function') {\n            text = FunctionExt.call(getText, this.cellView, {\n                cell: this.cell,\n                index: this.labelIndex,\n            });\n        }\n        editor.innerText = text || '';\n        return this;\n    }\n    onDocumentMouseDown(e) {\n        if (e.target !== this.editor) {\n            const cell = this.cell;\n            const value = this.editor.innerText.replace(/\\n$/, '') || '';\n            // set value\n            const setText = this.options.setText;\n            if (typeof setText === 'function') {\n                FunctionExt.call(setText, this.cellView, {\n                    cell: this.cell,\n                    value,\n                    index: this.labelIndex,\n                    distance: this.distance,\n                });\n            }\n            // remove tool\n            cell.removeTool(cell.isEdge() ? 'edge-editor' : 'node-editor');\n            this.undelegateDocumentEvents();\n        }\n    }\n    onDblClick(e) {\n        e.stopPropagation();\n    }\n    onMouseDown(e) {\n        e.stopPropagation();\n    }\n    autoFocus() {\n        setTimeout(() => {\n            this.editor.focus();\n            this.selectText();\n        });\n    }\n    selectText() {\n        if (window.getSelection) {\n            const range = document.createRange();\n            const selection = window.getSelection();\n            range.selectNodeContents(this.editor);\n            selection.removeAllRanges();\n            selection.addRange(range);\n        }\n    }\n}\n(function (CellEditor) {\n    CellEditor.config({\n        tagName: 'div',\n        isSVGElement: false,\n        events: {\n            dblclick: 'onDblClick',\n            mousedown: 'onMouseDown',\n        },\n        documentEvents: {\n            mousedown: 'onDocumentMouseDown',\n        },\n    });\n})(CellEditor || (CellEditor = {}));\n(function (CellEditor) {\n    CellEditor.NodeEditor = CellEditor.define({\n        attrs: {\n            fontSize: 14,\n            fontFamily: 'Arial, helvetica, sans-serif',\n            color: '#000',\n            backgroundColor: '#fff',\n        },\n        getText({ cell }) {\n            return cell.attr('text/text');\n        },\n        setText({ cell, value }) {\n            cell.attr('text/text', value);\n        },\n    });\n    CellEditor.EdgeEditor = CellEditor.define({\n        attrs: {\n            fontSize: 14,\n            fontFamily: 'Arial, helvetica, sans-serif',\n            color: '#000',\n            backgroundColor: '#fff',\n        },\n        getText({ cell, index }) {\n            if (index === -1) {\n                return '';\n            }\n            return cell.prop(`labels/${index}/attrs/label/text`);\n        },\n        setText({ cell, value, index, distance }) {\n            const edge = cell;\n            if (index === -1) {\n                edge.appendLabel({\n                    position: {\n                        distance: distance,\n                    },\n                    attrs: {\n                        label: {\n                            text: value,\n                        },\n                    },\n                });\n            }\n            else {\n                edge.prop(`labels/${index}/attrs/label/text`, value);\n            }\n        },\n    });\n})(CellEditor || (CellEditor = {}));\n//# sourceMappingURL=editor.js.map"]},"metadata":{},"sourceType":"module"}