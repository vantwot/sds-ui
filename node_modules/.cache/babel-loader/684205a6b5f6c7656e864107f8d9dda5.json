{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _isNumber from \"lodash/isNumber\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport BaseModel from '../../core/BaseModel';\nimport { PointExtrudeTriangulation } from '../../core/triangulation';\nimport { lglt2xyz } from '../../earth/utils';\nimport { calculateCentroid } from '../../utils/geo';\nvar pointExtrudeFrag = \"varying vec4 v_color;\\nuniform float u_opacity: 1.0;\\n\\n#pragma include \\\"picking\\\"\\n\\nvarying mat4 styleMappingMat; // \\u4F20\\u9012\\u4ECE\\u7247\\u5143\\u4E2D\\u4F20\\u9012\\u7684\\u6620\\u5C04\\u6570\\u636E\\n\\nvoid main() {\\n  float opacity = styleMappingMat[0][0];\\n  gl_FragColor = v_color;\\n  // gl_FragColor.a *= u_opacity;\\n  gl_FragColor.a *= opacity;\\n  gl_FragColor = filterColor(gl_FragColor);\\n}\\n\";\nvar pointExtrudeVert = \"precision highp float;\\n\\n#define pi 3.1415926535\\n#define ambientRatio 0.5\\n#define diffuseRatio 0.3\\n#define specularRatio 0.2\\n\\nattribute vec3 a_Position;\\nattribute vec3 a_Pos;\\nattribute vec4 a_Color;\\nattribute vec3 a_Size;\\nattribute vec3 a_Normal;\\n\\nuniform float u_globel;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\nvarying vec4 v_color;\\n\\nuniform float u_opacity : 1;\\n\\nvarying mat4 styleMappingMat; // \\u7528\\u4E8E\\u5C06\\u5728\\u9876\\u70B9\\u7740\\u8272\\u5668\\u4E2D\\u8BA1\\u7B97\\u597D\\u7684\\u6837\\u5F0F\\u503C\\u4F20\\u9012\\u7ED9\\u7247\\u5143\\n\\n#pragma include \\\"styleMapping\\\"\\n#pragma include \\\"styleMappingCalOpacity\\\"\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"light\\\"\\n#pragma include \\\"picking\\\"\\n\\nfloat getYRadian(float x, float z) {\\n  if(x > 0.0 && z > 0.0) {\\n    return atan(x/z);\\n  } else if(x > 0.0 && z <= 0.0){\\n    return atan(-z/x) + pi/2.0;\\n  } else if(x <= 0.0 && z <= 0.0) {\\n    return  pi + atan(x/z); //atan(x/z) + \\n  } else {\\n    return atan(z/-x) + pi*3.0/2.0;\\n  }\\n}\\n\\nfloat getXRadian(float y, float r) {\\n  return atan(y/r);\\n}\\n\\nvoid main() {\\n\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n  styleMappingMat = mat4(\\n    0.0, 0.0, 0.0, 0.0, // opacity - strokeOpacity - strokeWidth - empty\\n    0.0, 0.0, 0.0, 0.0, // strokeR - strokeG - strokeB - strokeA\\n    0.0, 0.0, 0.0, 0.0, // offsets[0] - offsets[1]\\n    0.0, 0.0, 0.0, 0.0\\n  );\\n\\n  float rowCount = u_cellTypeLayout[0][0];    // \\u5F53\\u524D\\u7684\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u884C\\n  float columnCount = u_cellTypeLayout[0][1]; // \\u5F53\\u770B\\u5230\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u5217\\n  float columnWidth = 1.0/columnCount;  // \\u5217\\u5BBD\\n  float rowHeight = 1.0/rowCount;       // \\u884C\\u9AD8\\n  float cellCount = calCellCount(); // opacity - strokeOpacity - strokeWidth - stroke - offsets\\n  float id = a_vertexId; // \\u7B2Cn\\u4E2A\\u9876\\u70B9\\n  float cellCurrentRow = floor(id * cellCount / columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u884C\\n  float cellCurrentColumn = mod(id * cellCount, columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u5217\\n  \\n  // cell \\u56FA\\u5B9A\\u987A\\u5E8F opacity -> strokeOpacity -> strokeWidth -> stroke ... \\n  // \\u6309\\u987A\\u5E8F\\u4ECE cell \\u4E2D\\u53D6\\u503C\\u3001\\u82E5\\u6CA1\\u6709\\u5219\\u81EA\\u52A8\\u5F80\\u4E0B\\u53D6\\u503C\\n  float textureOffset = 0.0; // \\u5728 cell \\u4E2D\\u53D6\\u503C\\u7684\\u504F\\u79FB\\u91CF\\n\\n  vec2 opacityAndOffset = calOpacityAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\\n  styleMappingMat[0][0] = opacityAndOffset.r;\\n  textureOffset = opacityAndOffset.g;\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n  vec3 size = a_Size * a_Position;\\n\\n  vec2 offset = project_pixel(size.xy);\\n\\n  vec4 project_pos = project_position(vec4(a_Pos.xy, 0., 1.0));\\n\\n  vec4 pos = vec4(project_pos.xy + offset, project_pixel(size.z), 1.0);\\n\\n  float lightWeight = calc_lighting(pos);\\n  v_color =vec4(a_Color.rgb * lightWeight, a_Color.w);\\n\\n  // gl_Position = project_common_position_to_clipspace(pos);\\n\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n    gl_Position = u_Mvp * pos;\\n  } else {\\n    gl_Position = project_common_position_to_clipspace(pos);\\n  }\\n  \\n  if(u_globel > 0.0) {\\n    // \\u5728\\u5730\\u7403\\u6A21\\u5F0F\\u4E0B\\uFF0C\\u5C06\\u539F\\u672C\\u5782\\u76F4\\u4E8E xy \\u5E73\\u9762\\u7684\\u5706\\u67F1\\u8C03\\u6574\\u59FF\\u6001\\u5230\\u9002\\u5E94\\u5706\\u7684\\u89D2\\u5EA6\\n    //\\u65CB\\u8F6C\\u77E9\\u9635mx\\uFF0C\\u521B\\u5EFA\\u7ED5x\\u8F74\\u65CB\\u8F6C\\u77E9\\u9635\\n    float r = sqrt(a_Pos.z*a_Pos.z + a_Pos.x*a_Pos.x);\\n    float xRadian = getXRadian(a_Pos.y, r);\\n    float xcos = cos(xRadian);//\\u6C42\\u89E3\\u65CB\\u8F6C\\u89D2\\u5EA6\\u4F59\\u5F26\\u503C\\n    float xsin = sin(xRadian);//\\u6C42\\u89E3\\u65CB\\u8F6C\\u89D2\\u5EA6\\u6B63\\u5F26\\u503C\\n    mat4 mx = mat4(\\n      1,0,0,0,  \\n      0,xcos,-xsin,0,  \\n      0,xsin,xcos,0,  \\n      0,0,0,1);\\n\\n    //\\u65CB\\u8F6C\\u77E9\\u9635my\\uFF0C\\u521B\\u5EFA\\u7ED5y\\u8F74\\u65CB\\u8F6C\\u77E9\\u9635\\n    float yRadian = getYRadian(a_Pos.x, a_Pos.z);\\n    float ycos = cos(yRadian);//\\u6C42\\u89E3\\u65CB\\u8F6C\\u89D2\\u5EA6\\u4F59\\u5F26\\u503C\\n    float ysin = sin(yRadian);//\\u6C42\\u89E3\\u65CB\\u8F6C\\u89D2\\u5EA6\\u6B63\\u5F26\\u503C\\n    mat4 my = mat4(\\n      ycos,0,-ysin,0,  \\n      0,1,0,0,  \\n      ysin,0,ycos,0,  \\n      0,0,0,1);\\n\\n    gl_Position = u_ViewProjectionMatrix * vec4(( my * mx *  vec4(a_Position * a_Size, 1.0)).xyz + a_Pos, 1.0);\\n  }\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\n\nvar ExtrudeModel = function (_BaseModel) {\n  _inherits(ExtrudeModel, _BaseModel);\n\n  var _super = _createSuper(ExtrudeModel);\n\n  function ExtrudeModel() {\n    _classCallCheck(this, ExtrudeModel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ExtrudeModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          _ref$opacity = _ref.opacity,\n          opacity = _ref$opacity === void 0 ? 1 : _ref$opacity;\n\n      if (this.dataTextureTest && this.dataTextureNeedUpdate({\n        opacity: opacity\n      })) {\n        this.judgeStyleAttributes({\n          opacity: opacity\n        });\n        var encodeData = this.layer.getEncodedData();\n\n        var _this$calDataFrame = this.calDataFrame(this.cellLength, encodeData, this.cellProperties),\n            data = _this$calDataFrame.data,\n            width = _this$calDataFrame.width,\n            height = _this$calDataFrame.height;\n\n        this.rowCount = height;\n        this.dataTexture = this.cellLength > 0 && data.length > 0 ? this.createTexture2D({\n          flipY: true,\n          data: data,\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: width,\n          height: height\n        }) : this.createTexture2D({\n          flipY: true,\n          data: [1],\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: 1,\n          height: 1\n        });\n      }\n\n      return {\n        u_globel: this.mapService.version === 'GLOBEL' ? 1 : 0,\n        u_dataTexture: this.dataTexture,\n        u_cellTypeLayout: this.getCellTypeLayout(),\n        u_opacity: _isNumber(opacity) ? opacity : 1.0\n      };\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      return this.buildModels();\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      return [this.layer.buildLayerModel({\n        moduleName: 'pointExtrude2',\n        vertexShader: pointExtrudeVert,\n        fragmentShader: pointExtrudeFrag,\n        triangulation: PointExtrudeTriangulation,\n        blend: this.getBlend()\n      })];\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$dataTexture;\n\n      (_this$dataTexture = this.dataTexture) === null || _this$dataTexture === void 0 ? void 0 : _this$dataTexture.destroy();\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      var isGlobel = this.mapService.version === 'GLOBEL';\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var size = feature.size;\n\n            if (size) {\n              var buffersize = [];\n\n              if (Array.isArray(size)) {\n                buffersize = size.length === 2 ? [size[0], size[0], size[1]] : size;\n              }\n\n              if (!Array.isArray(size)) {\n                buffersize = [size, size, size];\n              }\n\n              return buffersize;\n            } else {\n              return [2, 2, 2];\n            }\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'normal',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Normal',\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {\n            return normal;\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'pos',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Pos',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx) {\n            var coordinates = calculateCentroid(feature.coordinates);\n\n            if (isGlobel) {\n              return lglt2xyz([coordinates[0], coordinates[1]]);\n            } else {\n              return [coordinates[0], coordinates[1], 0];\n            }\n          }\n        }\n      });\n    }\n  }]);\n\n  return ExtrudeModel;\n}(BaseModel);\n\nexport { ExtrudeModel as default };","map":{"version":3,"sources":["../../../src/point/models/extrude.ts"],"names":["ExtrudeModel","BaseModel","opacity","encodeData","data","width","height","flipY","format","gl","type","u_globel","u_dataTexture","u_cellTypeLayout","u_opacity","moduleName","vertexShader","fragmentShader","triangulation","blend","isGlobel","name","AttributeType","descriptor","buffer","usage","FLOAT","size","update","feature","buffersize","Array","coordinates","calculateCentroid","lglt2xyz"],"mappings":"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","sourcesContent":["import { AttributeType, gl, IEncodeFeature, IModel } from '@antv/l7-core';\nimport { isNumber } from 'lodash';\nimport BaseModel, { styleOffset, styleSingle } from '../../core/BaseModel';\nimport { PointExtrudeTriangulation } from '../../core/triangulation';\nimport { lglt2xyz } from '../../earth/utils';\nimport { calculateCentroid } from '../../utils/geo';\nimport pointExtrudeFrag from '../shaders/extrude_frag.glsl';\nimport pointExtrudeVert from '../shaders/extrude_vert.glsl';\ninterface IPointLayerStyleOptions {\n  opacity: styleSingle;\n  offsets: styleOffset;\n}\nexport default class ExtrudeModel extends BaseModel {\n  public getUninforms() {\n    const {\n      opacity = 1,\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    if (\n      this.dataTextureTest &&\n      this.dataTextureNeedUpdate({\n        opacity,\n      })\n    ) {\n      this.judgeStyleAttributes({\n        opacity,\n      });\n      const encodeData = this.layer.getEncodedData();\n      const { data, width, height } = this.calDataFrame(\n        this.cellLength,\n        encodeData,\n        this.cellProperties,\n      );\n      this.rowCount = height; // 当前数据纹理有多少行\n\n      this.dataTexture =\n        this.cellLength > 0 && data.length > 0\n          ? this.createTexture2D({\n              flipY: true,\n              data,\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width,\n              height,\n            })\n          : this.createTexture2D({\n              flipY: true,\n              data: [1],\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width: 1,\n              height: 1,\n            });\n    }\n    return {\n      // TODO: 判断当前的点图层的模型是普通地图模式还是地球模式\n      u_globel: this.mapService.version === 'GLOBEL' ? 1 : 0,\n\n      u_dataTexture: this.dataTexture, // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]\n      u_cellTypeLayout: this.getCellTypeLayout(),\n      // u_opacity: opacity || 1.0,\n      // u_offsets: offsets || [0, 0],\n      u_opacity: isNumber(opacity) ? opacity : 1.0,\n    };\n  }\n  public initModels(): IModel[] {\n    return this.buildModels();\n  }\n\n  public buildModels(): IModel[] {\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'pointExtrude2',\n        vertexShader: pointExtrudeVert,\n        fragmentShader: pointExtrudeFrag,\n        triangulation: PointExtrudeTriangulation,\n        blend: this.getBlend(),\n        // primitive: gl.POINTS,\n      }),\n    ];\n  }\n  public clearModels() {\n    this.dataTexture?.destroy();\n  }\n  protected registerBuiltinAttributes() {\n    // TODO: 判断当前的点图层的模型是普通地图模式还是地球模式\n    const isGlobel = this.mapService.version === 'GLOBEL';\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size } = feature;\n          if (size) {\n            let buffersize: number[] = [];\n            if (Array.isArray(size)) {\n              buffersize =\n                size.length === 2 ? [size[0], size[0], size[1]] : size;\n            }\n            if (!Array.isArray(size)) {\n              buffersize = [size, size, size];\n            }\n            return buffersize;\n          } else {\n            return [2, 2, 2];\n          }\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'normal',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Normal',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n          normal: number[],\n        ) => {\n          return normal;\n        },\n      },\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'pos',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Pos',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (feature: IEncodeFeature, featureIdx: number) => {\n          const coordinates = calculateCentroid(feature.coordinates);\n          if (isGlobel) {\n            // TODO: 在地球模式下需要将传入 shader 的经纬度转化成对应的 xyz 坐标\n            return lglt2xyz([coordinates[0], coordinates[1]]) as [\n              number,\n              number,\n              number,\n            ];\n          } else {\n            return [coordinates[0], coordinates[1], 0];\n          }\n        },\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}