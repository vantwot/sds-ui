{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;\n\nimport { CameraUniform, CoordinateUniform, TYPES } from '@antv/l7-core';\nimport { $window } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nvar ShaderUniformPlugin = (_dec = injectable(), _dec2 = inject(TYPES.ICameraService), _dec3 = inject(TYPES.ICoordinateSystemService), _dec4 = inject(TYPES.IRendererService), _dec5 = inject(TYPES.IMapService), _dec(_class = (_class2 = function () {\n  function ShaderUniformPlugin() {\n    _classCallCheck(this, ShaderUniformPlugin);\n\n    _initializerDefineProperty(this, \"cameraService\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"coordinateSystemService\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"rendererService\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"mapService\", _descriptor4, this);\n  }\n\n  _createClass(ShaderUniformPlugin, [{\n    key: \"apply\",\n    value: function apply(layer) {\n      var _this = this;\n\n      var version = this.mapService.version;\n      var mvp = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n      var sceneCenterMKT = [0, 0];\n      layer.hooks.beforeRender.tap('ShaderUniformPlugin', function () {\n        _this.coordinateSystemService.refresh();\n\n        if (version === 'GAODE2.x') {\n          mvp = _this.mapService.map.customCoords.getMVPMatrix();\n          sceneCenterMKT = _this.mapService.getCustomCoordCenter();\n        }\n\n        var _this$rendererService = _this.rendererService.getViewportSize(),\n            width = _this$rendererService.width,\n            height = _this$rendererService.height;\n\n        layer.models.forEach(function (model) {\n          var _model$addUniforms;\n\n          model.addUniforms((_model$addUniforms = {}, _defineProperty(_model$addUniforms, CameraUniform.ProjectionMatrix, _this.cameraService.getProjectionMatrix()), _defineProperty(_model$addUniforms, CameraUniform.ViewMatrix, _this.cameraService.getViewMatrix()), _defineProperty(_model$addUniforms, CameraUniform.ViewProjectionMatrix, _this.cameraService.getViewProjectionMatrix()), _defineProperty(_model$addUniforms, CameraUniform.Zoom, _this.cameraService.getZoom()), _defineProperty(_model$addUniforms, CameraUniform.ZoomScale, _this.cameraService.getZoomScale()), _defineProperty(_model$addUniforms, CameraUniform.FocalDistance, _this.cameraService.getFocalDistance()), _defineProperty(_model$addUniforms, CameraUniform.CameraPosition, _this.cameraService.getCameraPosition()), _defineProperty(_model$addUniforms, CoordinateUniform.CoordinateSystem, _this.coordinateSystemService.getCoordinateSystem()), _defineProperty(_model$addUniforms, CoordinateUniform.ViewportCenter, _this.coordinateSystemService.getViewportCenter()), _defineProperty(_model$addUniforms, CoordinateUniform.ViewportCenterProjection, _this.coordinateSystemService.getViewportCenterProjection()), _defineProperty(_model$addUniforms, CoordinateUniform.PixelsPerDegree, _this.coordinateSystemService.getPixelsPerDegree()), _defineProperty(_model$addUniforms, CoordinateUniform.PixelsPerDegree2, _this.coordinateSystemService.getPixelsPerDegree2()), _defineProperty(_model$addUniforms, CoordinateUniform.PixelsPerMeter, _this.coordinateSystemService.getPixelsPerMeter()), _defineProperty(_model$addUniforms, CoordinateUniform.Mvp, mvp), _defineProperty(_model$addUniforms, \"u_SceneCenterMKT\", sceneCenterMKT), _defineProperty(_model$addUniforms, \"u_ViewportSize\", [width, height]), _defineProperty(_model$addUniforms, \"u_ModelMatrix\", _this.cameraService.getModelMatrix()), _defineProperty(_model$addUniforms, \"u_DevicePixelRatio\", $window.devicePixelRatio), _defineProperty(_model$addUniforms, \"u_PickingBuffer\", layer.getLayerConfig().pickingBuffer || 0), _defineProperty(_model$addUniforms, \"u_Dragging\", Number(_this.mapService.dragging)), _model$addUniforms));\n        });\n      });\n    }\n  }]);\n\n  return ShaderUniformPlugin;\n}(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"cameraService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"coordinateSystemService\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"rendererService\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"mapService\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexport { ShaderUniformPlugin as default };","map":{"version":3,"sources":["../../src/plugins/ShaderUniformPlugin.ts"],"names":["injectable","ShaderUniformPlugin","inject","TYPES","version","mvp","sceneCenterMKT","layer","width","height","model","CameraUniform","CoordinateUniform","$window","Number"],"mappings":"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","sourcesContent":["import {\n  CameraUniform,\n  CoordinateUniform,\n  ICameraService,\n  ICoordinateSystemService,\n  ILayer,\n  ILayerPlugin,\n  IMapService,\n  IRendererService,\n  TYPES,\n} from '@antv/l7-core';\nimport { $window } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\n\n/**\n * 在渲染之前需要获取当前 Shader 所需 Uniform，例如：\n * 1. 从相机服务中获取 View & ProjectionMatrix，当前缩放等级等等\n * 2. 从坐标系服务中获取当前坐标系，例如是否是偏移坐标系\n *    @see https://yuque.antfin-inc.com/yuqi.pyq/fgetpa/doml91\n * 3. 当前 Layer 本身的样式属性\n */\n@injectable()\nexport default class ShaderUniformPlugin implements ILayerPlugin {\n  @inject(TYPES.ICameraService)\n  private readonly cameraService: ICameraService;\n\n  @inject(TYPES.ICoordinateSystemService)\n  private readonly coordinateSystemService: ICoordinateSystemService;\n\n  @inject(TYPES.IRendererService)\n  private readonly rendererService: IRendererService;\n\n  @inject(TYPES.IMapService)\n  private readonly mapService: IMapService;\n\n  public apply(layer: ILayer) {\n    const version = this.mapService.version;\n\n    let mvp = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]; // default matrix (for gaode2.x)\n    let sceneCenterMKT = [0, 0];\n    layer.hooks.beforeRender.tap('ShaderUniformPlugin', () => {\n      // 重新计算坐标系参数\n      this.coordinateSystemService.refresh();\n\n      if (version === 'GAODE2.x') {\n        // @ts-ignore\n        mvp = this.mapService.map.customCoords.getMVPMatrix();\n        // mvp = amapCustomCoords.getMVPMatrix()\n        // @ts-ignore\n        sceneCenterMKT = this.mapService.getCustomCoordCenter();\n      }\n\n      const { width, height } = this.rendererService.getViewportSize();\n      layer.models.forEach((model) => {\n        model.addUniforms({\n          // 相机参数，包含 VP 矩阵、缩放等级\n          [CameraUniform.ProjectionMatrix]: this.cameraService.getProjectionMatrix(),\n          [CameraUniform.ViewMatrix]: this.cameraService.getViewMatrix(),\n          [CameraUniform.ViewProjectionMatrix]: this.cameraService.getViewProjectionMatrix(),\n          [CameraUniform.Zoom]: this.cameraService.getZoom(),\n          [CameraUniform.ZoomScale]: this.cameraService.getZoomScale(),\n          [CameraUniform.FocalDistance]: this.cameraService.getFocalDistance(),\n          [CameraUniform.CameraPosition]: this.cameraService.getCameraPosition(),\n          // 坐标系参数\n          [CoordinateUniform.CoordinateSystem]: this.coordinateSystemService.getCoordinateSystem(),\n          [CoordinateUniform.ViewportCenter]: this.coordinateSystemService.getViewportCenter(),\n          [CoordinateUniform.ViewportCenterProjection]: this.coordinateSystemService.getViewportCenterProjection(),\n          [CoordinateUniform.PixelsPerDegree]: this.coordinateSystemService.getPixelsPerDegree(),\n          [CoordinateUniform.PixelsPerDegree2]: this.coordinateSystemService.getPixelsPerDegree2(),\n          [CoordinateUniform.PixelsPerMeter]: this.coordinateSystemService.getPixelsPerMeter(),\n          // 坐标系是高德2.0的时候单独计算\n          [CoordinateUniform.Mvp]: mvp,\n          u_SceneCenterMKT: sceneCenterMKT,\n          // 其他参数，例如视口大小、DPR 等\n          u_ViewportSize: [width, height],\n          u_ModelMatrix: this.cameraService.getModelMatrix(),\n          u_DevicePixelRatio: $window.devicePixelRatio,\n          // u_ModelMatrix: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n          u_PickingBuffer: layer.getLayerConfig().pickingBuffer || 0,\n          // TODO: 当前地图是否在拖动\n          u_Dragging: Number(this.mapService.dragging),\n        });\n      });\n\n      // TODO：脏检查，决定是否需要渲染\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}