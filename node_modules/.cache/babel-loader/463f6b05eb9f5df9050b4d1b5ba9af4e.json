{"ast":null,"code":"import _defineProperty from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Util } from '../../global';\nimport { NumberExt } from '../../util';\nimport { Angle, Point } from '../../geometry';\nimport { Widget } from '../common';\nimport { notify } from './util';\nexport var Transform = /*#__PURE__*/function (_Widget) {\n  _inherits(Transform, _Widget);\n\n  var _super = _createSuper(Transform);\n\n  function Transform() {\n    _classCallCheck(this, Transform);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Transform, [{\n    key: \"node\",\n    get: function get() {\n      return this.cell;\n    }\n  }, {\n    key: \"containerClassName\",\n    get: function get() {\n      return this.prefixClassName('widget-transform');\n    }\n  }, {\n    key: \"resizeClassName\",\n    get: function get() {\n      return \"\".concat(this.containerClassName, \"-resize\");\n    }\n  }, {\n    key: \"rotateClassName\",\n    get: function get() {\n      return \"\".concat(this.containerClassName, \"-rotate\");\n    }\n  }, {\n    key: \"init\",\n    value: function init(options) {\n      this.options = Object.assign(Object.assign({}, Private.defaultOptions), options);\n      this.render();\n      this.startListening();\n    }\n  }, {\n    key: \"startListening\",\n    value: function startListening() {\n      var _this$delegateEvents;\n\n      this.delegateEvents((_this$delegateEvents = {}, _defineProperty(_this$delegateEvents, \"mousedown .\".concat(this.resizeClassName), 'startResizing'), _defineProperty(_this$delegateEvents, \"touchstart .\".concat(this.resizeClassName), 'startResizing'), _defineProperty(_this$delegateEvents, \"mousedown .\".concat(this.rotateClassName), 'startRotating'), _defineProperty(_this$delegateEvents, \"touchstart .\".concat(this.rotateClassName), 'startRotating'), _this$delegateEvents));\n      this.model.on('*', this.update, this);\n      this.graph.on('scale', this.update, this);\n      this.graph.on('translate', this.update, this);\n      this.node.on('removed', this.remove, this);\n      this.model.on('reseted', this.remove, this);\n      this.view.on('cell:knob:mousedown', this.onKnobMouseDown, this);\n      this.view.on('cell:knob:mouseup', this.onKnobMouseUp, this);\n\n      _get(_getPrototypeOf(Transform.prototype), \"startListening\", this).call(this);\n    }\n  }, {\n    key: \"stopListening\",\n    value: function stopListening() {\n      this.undelegateEvents();\n      this.model.off('*', this.update, this);\n      this.graph.off('scale', this.update, this);\n      this.graph.off('translate', this.update, this);\n      this.node.off('removed', this.remove, this);\n      this.model.off('reseted', this.remove, this);\n      this.view.off('cell:knob:mousedown', this.onKnobMouseDown, this);\n      this.view.off('cell:knob:mouseup', this.onKnobMouseUp, this);\n\n      _get(_getPrototypeOf(Transform.prototype), \"stopListening\", this).call(this);\n    }\n  }, {\n    key: \"renderHandles\",\n    value: function renderHandles() {\n      var _this = this;\n\n      this.container = document.createElement('div');\n      this.$container = this.$(this.container);\n      var $knob = this.$('<div/>').prop('draggable', false);\n      var $rotate = $knob.clone().addClass(this.rotateClassName);\n      var $resizes = Private.POSITIONS.map(function (pos) {\n        return $knob.clone().addClass(_this.resizeClassName).attr('data-position', pos);\n      });\n      this.empty();\n      this.$container.append($resizes, $rotate);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.renderHandles();\n      this.view.addClass(Private.NODE_CLS);\n      this.$container.addClass(this.containerClassName).toggleClass('no-orth-resize', this.options.preserveAspectRatio || !this.options.orthogonalResizing).toggleClass('no-resize', !this.options.resizable).toggleClass('no-rotate', !this.options.rotatable);\n\n      if (this.options.className) {\n        this.$container.addClass(this.options.className);\n      }\n\n      this.graph.container.appendChild(this.container);\n      return this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var ctm = this.graph.matrix();\n      var bbox = this.node.getBBox();\n      bbox.x *= ctm.a;\n      bbox.x += ctm.e;\n      bbox.y *= ctm.d;\n      bbox.y += ctm.f;\n      bbox.width *= ctm.a;\n      bbox.height *= ctm.d;\n      var angle = Angle.normalize(this.node.getAngle());\n      var transform = angle !== 0 ? \"rotate(\".concat(angle, \"deg)\") : '';\n      this.$container.css({\n        transform: transform,\n        width: bbox.width,\n        height: bbox.height,\n        left: bbox.x,\n        top: bbox.y\n      });\n      this.updateResizerDirections();\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      this.view.removeClass(Private.NODE_CLS);\n      return _get(_getPrototypeOf(Transform.prototype), \"remove\", this).call(this);\n    }\n  }, {\n    key: \"onKnobMouseDown\",\n    value: function onKnobMouseDown() {\n      this.startHandle();\n    }\n  }, {\n    key: \"onKnobMouseUp\",\n    value: function onKnobMouseUp() {\n      this.stopHandle();\n    }\n  }, {\n    key: \"updateResizerDirections\",\n    value: function updateResizerDirections() {\n      var _this2 = this;\n\n      // Update the directions on the resizer divs while the node being rotated.\n      // The directions are represented by cardinal points (N,S,E,W). For example\n      // the div originally pointed to north needs to be changed to point to south\n      // if the node was rotated by 180 degrees.\n      var angle = Angle.normalize(this.node.getAngle());\n      var shift = Math.floor(angle * (Private.DIRECTIONS.length / 360));\n\n      if (shift !== this.prevShift) {\n        // Create the current directions array based on the calculated shift.\n        var directions = Private.DIRECTIONS.slice(shift).concat(Private.DIRECTIONS.slice(0, shift));\n\n        var className = function className(dir) {\n          return \"\".concat(_this2.containerClassName, \"-cursor-\").concat(dir);\n        };\n\n        this.$container.find(\".\".concat(this.resizeClassName)).removeClass(Private.DIRECTIONS.map(function (dir) {\n          return className(dir);\n        }).join(' ')).each(function (index, elem) {\n          _this2.$(elem).addClass(className(directions[index]));\n        });\n        this.prevShift = shift;\n      }\n    }\n  }, {\n    key: \"getTrueDirection\",\n    value: function getTrueDirection(dir) {\n      var angle = Angle.normalize(this.node.getAngle());\n      var index = Private.POSITIONS.indexOf(dir);\n      index += Math.floor(angle * (Private.POSITIONS.length / 360));\n      index %= Private.POSITIONS.length;\n      return Private.POSITIONS[index];\n    }\n  }, {\n    key: \"toValidResizeDirection\",\n    value: function toValidResizeDirection(dir) {\n      return {\n        top: 'top-left',\n        bottom: 'bottom-right',\n        left: 'bottom-left',\n        right: 'top-right'\n      }[dir] || dir;\n    }\n  }, {\n    key: \"startResizing\",\n    value: function startResizing(evt) {\n      evt.stopPropagation();\n      this.model.startBatch('resize', {\n        cid: this.cid\n      });\n      var dir = this.$(evt.target).attr('data-position');\n      var view = this.graph.findViewByCell(this.node);\n      this.prepareResizing(evt, dir);\n      this.startAction(evt);\n      notify('node:resize:mousedown', evt, view);\n    }\n  }, {\n    key: \"prepareResizing\",\n    value: function prepareResizing(evt, relativeDirection) {\n      var trueDirection = this.getTrueDirection(relativeDirection);\n      var rx = 0;\n      var ry = 0;\n      relativeDirection.split('-').forEach(function (direction) {\n        rx = {\n          left: -1,\n          right: 1\n        }[direction] || rx;\n        ry = {\n          top: -1,\n          bottom: 1\n        }[direction] || ry;\n      });\n      var direction = this.toValidResizeDirection(relativeDirection);\n      var selector = {\n        'top-right': 'bottomLeft',\n        'top-left': 'bottomRight',\n        'bottom-left': 'topRight',\n        'bottom-right': 'topLeft'\n      }[direction];\n      var angle = Angle.normalize(this.node.getAngle());\n      this.setEventData(evt, {\n        selector: selector,\n        direction: direction,\n        trueDirection: trueDirection,\n        relativeDirection: relativeDirection,\n        angle: angle,\n        resizeX: rx,\n        resizeY: ry,\n        action: 'resizing'\n      });\n    }\n  }, {\n    key: \"startRotating\",\n    value: function startRotating(evt) {\n      evt.stopPropagation();\n      this.model.startBatch('rotate', {\n        cid: this.cid\n      });\n      var view = this.graph.findViewByCell(this.node);\n      var center = this.node.getBBox().getCenter();\n      var e = this.normalizeEvent(evt);\n      var client = this.graph.snapToGrid(e.clientX, e.clientY);\n      this.setEventData(evt, {\n        center: center,\n        action: 'rotating',\n        angle: Angle.normalize(this.node.getAngle()),\n        start: Point.create(client).theta(center)\n      });\n      this.startAction(evt);\n      notify('node:rotate:mousedown', evt, view);\n    }\n  }, {\n    key: \"onMouseMove\",\n    value: function onMouseMove(evt) {\n      var view = this.graph.findViewByCell(this.node);\n      var data = this.getEventData(evt);\n\n      if (data.action) {\n        var e = this.normalizeEvent(evt);\n        var clientX = e.clientX;\n        var clientY = e.clientY;\n        var scroller = this.graph.scroller.widget;\n        var restrict = this.options.restrictedResizing;\n\n        if (restrict === true || typeof restrict === 'number') {\n          var factor = restrict === true ? 0 : restrict;\n          var fix = scroller ? Math.max(factor, 8) : factor;\n          var rect = this.graph.container.getBoundingClientRect();\n          clientX = NumberExt.clamp(clientX, rect.left + fix, rect.right - fix);\n          clientY = NumberExt.clamp(clientY, rect.top + fix, rect.bottom - fix);\n        } else if (this.options.autoScrollOnResizing && scroller) {\n          scroller.autoScroll(clientX, clientY);\n        }\n\n        var pos = this.graph.snapToGrid(clientX, clientY);\n        var gridSize = this.graph.getGridSize();\n        var node = this.node;\n        var options = this.options;\n\n        if (data.action === 'resizing') {\n          data = data;\n\n          if (!data.resized) {\n            if (view) {\n              view.addClass('node-resizing');\n              notify('node:resize', evt, view);\n            }\n\n            data.resized = true;\n          }\n\n          var currentBBox = node.getBBox();\n          var requestedSize = Point.create(pos).rotate(data.angle, currentBBox.getCenter()).diff(currentBBox[data.selector]);\n          var width = data.resizeX ? requestedSize.x * data.resizeX : currentBBox.width;\n          var height = data.resizeY ? requestedSize.y * data.resizeY : currentBBox.height;\n          var rawWidth = width;\n          var rawHeight = height;\n          width = Util.snapToGrid(width, gridSize);\n          height = Util.snapToGrid(height, gridSize);\n          width = Math.max(width, options.minWidth || gridSize);\n          height = Math.max(height, options.minHeight || gridSize);\n          width = Math.min(width, options.maxWidth || Infinity);\n          height = Math.min(height, options.maxHeight || Infinity);\n\n          if (options.preserveAspectRatio) {\n            var candidateWidth = currentBBox.width * height / currentBBox.height;\n            var candidateHeight = currentBBox.height * width / currentBBox.width;\n\n            if (width < candidateWidth) {\n              height = candidateHeight;\n            } else {\n              width = candidateWidth;\n            }\n          }\n\n          var relativeDirection = data.relativeDirection;\n\n          if (options.allowReverse && (rawWidth <= -width || rawHeight <= -height)) {\n            var reverted;\n\n            if (relativeDirection === 'left') {\n              if (rawWidth <= -width) {\n                reverted = 'right';\n              }\n            } else if (relativeDirection === 'right') {\n              if (rawWidth <= -width) {\n                reverted = 'left';\n              }\n            } else if (relativeDirection === 'top') {\n              if (rawHeight <= -height) {\n                reverted = 'bottom';\n              }\n            } else if (relativeDirection === 'bottom') {\n              if (rawHeight <= -height) {\n                reverted = 'top';\n              }\n            } else if (relativeDirection === 'top-left') {\n              if (rawWidth <= -width && rawHeight <= -height) {\n                reverted = 'bottom-right';\n              } else if (rawWidth <= -width) {\n                reverted = 'top-right';\n              } else if (rawHeight <= -height) {\n                reverted = 'bottom-left';\n              }\n            } else if (relativeDirection === 'top-right') {\n              if (rawWidth <= -width && rawHeight <= -height) {\n                reverted = 'bottom-left';\n              } else if (rawWidth <= -width) {\n                reverted = 'top-left';\n              } else if (rawHeight <= -height) {\n                reverted = 'bottom-right';\n              }\n            } else if (relativeDirection === 'bottom-left') {\n              if (rawWidth <= -width && rawHeight <= -height) {\n                reverted = 'top-right';\n              } else if (rawWidth <= -width) {\n                reverted = 'bottom-right';\n              } else if (rawHeight <= -height) {\n                reverted = 'top-left';\n              }\n            } else if (relativeDirection === 'bottom-right') {\n              if (rawWidth <= -width && rawHeight <= -height) {\n                reverted = 'top-left';\n              } else if (rawWidth <= -width) {\n                reverted = 'bottom-left';\n              } else if (rawHeight <= -height) {\n                reverted = 'top-right';\n              }\n            }\n\n            var revertedDir = reverted;\n            this.stopHandle();\n            var $handle = this.$container.find(\".\".concat(this.resizeClassName, \"[data-position=\\\"\").concat(revertedDir, \"\\\"]\"));\n            this.startHandle($handle[0]);\n            this.prepareResizing(evt, revertedDir);\n            this.onMouseMove(evt);\n          }\n\n          if (currentBBox.width !== width || currentBBox.height !== height) {\n            var resizeOptions = {\n              ui: true,\n              direction: data.direction,\n              relativeDirection: data.relativeDirection,\n              trueDirection: data.trueDirection,\n              minWidth: options.minWidth,\n              minHeight: options.minHeight,\n              maxWidth: options.maxWidth,\n              maxHeight: options.maxHeight,\n              preserveAspectRatio: options.preserveAspectRatio === true\n            };\n            node.resize(width, height, resizeOptions);\n            notify('node:resizing', evt, view);\n          }\n\n          notify('node:resize:mousemove', evt, view);\n        } else if (data.action === 'rotating') {\n          data = data;\n\n          if (!data.rotated) {\n            if (view) {\n              view.addClass('node-rotating');\n              notify('node:rotate', evt, view);\n            }\n\n            data.rotated = true;\n          }\n\n          var currentAngle = node.getAngle();\n          var theta = data.start - Point.create(pos).theta(data.center);\n          var target = data.angle + theta;\n\n          if (options.rotateGrid) {\n            target = Util.snapToGrid(target, options.rotateGrid);\n          }\n\n          if (currentAngle !== target) {\n            node.rotate(target, {\n              absolute: true\n            });\n            notify('node:rotating', evt, view);\n          }\n\n          notify('node:rotate:mousemove', evt, view);\n        }\n      }\n    }\n  }, {\n    key: \"onMouseUp\",\n    value: function onMouseUp(evt) {\n      var view = this.graph.findViewByCell(this.node);\n      var data = this.getEventData(evt);\n\n      if (data.action) {\n        this.stopAction(evt);\n        this.model.stopBatch(data.action === 'resizing' ? 'resize' : 'rotate', {\n          cid: this.cid\n        });\n\n        if (data.action === 'resizing') {\n          notify('node:resize:mouseup', evt, view);\n        } else if (data.action === 'rotating') {\n          notify('node:rotate:mouseup', evt, view);\n        }\n      }\n    }\n  }, {\n    key: \"startHandle\",\n    value: function startHandle(handle) {\n      this.handle = handle || null;\n      this.$container.addClass(\"\".concat(this.containerClassName, \"-active\"));\n\n      if (handle) {\n        this.$(handle).addClass(\"\".concat(this.containerClassName, \"-active-handle\"));\n        var pos = handle.getAttribute('data-position');\n\n        if (pos) {\n          var dir = Private.DIRECTIONS[Private.POSITIONS.indexOf(pos)];\n          this.$container.addClass(\"\".concat(this.containerClassName, \"-cursor-\").concat(dir));\n        }\n      }\n    }\n  }, {\n    key: \"stopHandle\",\n    value: function stopHandle() {\n      this.$container.removeClass(\"\".concat(this.containerClassName, \"-active\"));\n\n      if (this.handle) {\n        this.$(this.handle).removeClass(\"\".concat(this.containerClassName, \"-active-handle\"));\n        var pos = this.handle.getAttribute('data-position');\n\n        if (pos) {\n          var dir = Private.DIRECTIONS[Private.POSITIONS.indexOf(pos)];\n          this.$container.removeClass(\"\".concat(this.containerClassName, \"-cursor-\").concat(dir));\n        }\n\n        this.handle = null;\n      }\n    }\n  }, {\n    key: \"startAction\",\n    value: function startAction(evt) {\n      this.startHandle(evt.target);\n      this.graph.view.undelegateEvents();\n      this.delegateDocumentEvents(Private.documentEvents, evt.data);\n    }\n  }, {\n    key: \"stopAction\",\n    value: function stopAction(evt) {\n      this.stopHandle();\n      this.undelegateDocumentEvents();\n      this.graph.view.delegateEvents();\n      var view = this.graph.findViewByCell(this.node);\n      var data = this.getEventData(evt);\n\n      if (view) {\n        view.removeClass(\"node-\".concat(data.action));\n\n        if (data.action === 'resizing' && data.resized) {\n          notify('node:resized', evt, view);\n        } else if (data.action === 'rotating' && data.rotated) {\n          notify('node:rotated', evt, view);\n        }\n      }\n    }\n  }]);\n\n  return Transform;\n}(Widget);\nvar Private;\n\n(function (Private) {\n  Private.NODE_CLS = 'has-widget-transform';\n  Private.DIRECTIONS = ['nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w'];\n  Private.POSITIONS = ['top-left', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left'];\n  Private.documentEvents = {\n    mousemove: 'onMouseMove',\n    touchmove: 'onMouseMove',\n    mouseup: 'onMouseUp',\n    touchend: 'onMouseUp'\n  };\n  Private.defaultOptions = {\n    minWidth: 0,\n    minHeight: 0,\n    maxWidth: Infinity,\n    maxHeight: Infinity,\n    rotateGrid: 15,\n    rotatable: true,\n    preserveAspectRatio: false,\n    orthogonalResizing: true,\n    restrictedResizing: false,\n    autoScrollOnResizing: true,\n    allowReverse: true\n  };\n})(Private || (Private = {}));","map":{"version":3,"sources":["../../../src/addon/transform/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Util } from '../../global';\nimport { NumberExt } from '../../util';\nimport { Angle, Point } from '../../geometry';\nimport { Widget } from '../common';\nimport { notify } from './util';\nexport class Transform extends Widget {\n    get node() {\n        return this.cell;\n    }\n    get containerClassName() {\n        return this.prefixClassName('widget-transform');\n    }\n    get resizeClassName() {\n        return `${this.containerClassName}-resize`;\n    }\n    get rotateClassName() {\n        return `${this.containerClassName}-rotate`;\n    }\n    init(options) {\n        this.options = Object.assign(Object.assign({}, Private.defaultOptions), options);\n        this.render();\n        this.startListening();\n    }\n    startListening() {\n        this.delegateEvents({\n            [`mousedown .${this.resizeClassName}`]: 'startResizing',\n            [`touchstart .${this.resizeClassName}`]: 'startResizing',\n            [`mousedown .${this.rotateClassName}`]: 'startRotating',\n            [`touchstart .${this.rotateClassName}`]: 'startRotating',\n        });\n        this.model.on('*', this.update, this);\n        this.graph.on('scale', this.update, this);\n        this.graph.on('translate', this.update, this);\n        this.node.on('removed', this.remove, this);\n        this.model.on('reseted', this.remove, this);\n        this.view.on('cell:knob:mousedown', this.onKnobMouseDown, this);\n        this.view.on('cell:knob:mouseup', this.onKnobMouseUp, this);\n        super.startListening();\n    }\n    stopListening() {\n        this.undelegateEvents();\n        this.model.off('*', this.update, this);\n        this.graph.off('scale', this.update, this);\n        this.graph.off('translate', this.update, this);\n        this.node.off('removed', this.remove, this);\n        this.model.off('reseted', this.remove, this);\n        this.view.off('cell:knob:mousedown', this.onKnobMouseDown, this);\n        this.view.off('cell:knob:mouseup', this.onKnobMouseUp, this);\n        super.stopListening();\n    }\n    renderHandles() {\n        this.container = document.createElement('div');\n        this.$container = this.$(this.container);\n        const $knob = this.$('<div/>').prop('draggable', false);\n        const $rotate = $knob.clone().addClass(this.rotateClassName);\n        const $resizes = Private.POSITIONS.map((pos) => {\n            return $knob\n                .clone()\n                .addClass(this.resizeClassName)\n                .attr('data-position', pos);\n        });\n        this.empty();\n        this.$container.append($resizes, $rotate);\n    }\n    render() {\n        this.renderHandles();\n        this.view.addClass(Private.NODE_CLS);\n        this.$container\n            .addClass(this.containerClassName)\n            .toggleClass('no-orth-resize', this.options.preserveAspectRatio || !this.options.orthogonalResizing)\n            .toggleClass('no-resize', !this.options.resizable)\n            .toggleClass('no-rotate', !this.options.rotatable);\n        if (this.options.className) {\n            this.$container.addClass(this.options.className);\n        }\n        this.graph.container.appendChild(this.container);\n        return this.update();\n    }\n    update() {\n        const ctm = this.graph.matrix();\n        const bbox = this.node.getBBox();\n        bbox.x *= ctm.a;\n        bbox.x += ctm.e;\n        bbox.y *= ctm.d;\n        bbox.y += ctm.f;\n        bbox.width *= ctm.a;\n        bbox.height *= ctm.d;\n        const angle = Angle.normalize(this.node.getAngle());\n        const transform = angle !== 0 ? `rotate(${angle}deg)` : '';\n        this.$container.css({\n            transform,\n            width: bbox.width,\n            height: bbox.height,\n            left: bbox.x,\n            top: bbox.y,\n        });\n        this.updateResizerDirections();\n        return this;\n    }\n    remove() {\n        this.view.removeClass(Private.NODE_CLS);\n        return super.remove();\n    }\n    onKnobMouseDown() {\n        this.startHandle();\n    }\n    onKnobMouseUp() {\n        this.stopHandle();\n    }\n    updateResizerDirections() {\n        // Update the directions on the resizer divs while the node being rotated.\n        // The directions are represented by cardinal points (N,S,E,W). For example\n        // the div originally pointed to north needs to be changed to point to south\n        // if the node was rotated by 180 degrees.\n        const angle = Angle.normalize(this.node.getAngle());\n        const shift = Math.floor(angle * (Private.DIRECTIONS.length / 360));\n        if (shift !== this.prevShift) {\n            // Create the current directions array based on the calculated shift.\n            const directions = Private.DIRECTIONS.slice(shift).concat(Private.DIRECTIONS.slice(0, shift));\n            const className = (dir) => `${this.containerClassName}-cursor-${dir}`;\n            this.$container\n                .find(`.${this.resizeClassName}`)\n                .removeClass(Private.DIRECTIONS.map((dir) => className(dir)).join(' '))\n                .each((index, elem) => {\n                this.$(elem).addClass(className(directions[index]));\n            });\n            this.prevShift = shift;\n        }\n    }\n    getTrueDirection(dir) {\n        const angle = Angle.normalize(this.node.getAngle());\n        let index = Private.POSITIONS.indexOf(dir);\n        index += Math.floor(angle * (Private.POSITIONS.length / 360));\n        index %= Private.POSITIONS.length;\n        return Private.POSITIONS[index];\n    }\n    toValidResizeDirection(dir) {\n        return ({\n            top: 'top-left',\n            bottom: 'bottom-right',\n            left: 'bottom-left',\n            right: 'top-right',\n        }[dir] || dir);\n    }\n    startResizing(evt) {\n        evt.stopPropagation();\n        this.model.startBatch('resize', { cid: this.cid });\n        const dir = this.$(evt.target).attr('data-position');\n        const view = this.graph.findViewByCell(this.node);\n        this.prepareResizing(evt, dir);\n        this.startAction(evt);\n        notify('node:resize:mousedown', evt, view);\n    }\n    prepareResizing(evt, relativeDirection) {\n        const trueDirection = this.getTrueDirection(relativeDirection);\n        let rx = 0;\n        let ry = 0;\n        relativeDirection.split('-').forEach((direction) => {\n            rx = { left: -1, right: 1 }[direction] || rx;\n            ry = { top: -1, bottom: 1 }[direction] || ry;\n        });\n        const direction = this.toValidResizeDirection(relativeDirection);\n        const selector = {\n            'top-right': 'bottomLeft',\n            'top-left': 'bottomRight',\n            'bottom-left': 'topRight',\n            'bottom-right': 'topLeft',\n        }[direction];\n        const angle = Angle.normalize(this.node.getAngle());\n        this.setEventData(evt, {\n            selector,\n            direction,\n            trueDirection,\n            relativeDirection,\n            angle,\n            resizeX: rx,\n            resizeY: ry,\n            action: 'resizing',\n        });\n    }\n    startRotating(evt) {\n        evt.stopPropagation();\n        this.model.startBatch('rotate', { cid: this.cid });\n        const view = this.graph.findViewByCell(this.node);\n        const center = this.node.getBBox().getCenter();\n        const e = this.normalizeEvent(evt);\n        const client = this.graph.snapToGrid(e.clientX, e.clientY);\n        this.setEventData(evt, {\n            center,\n            action: 'rotating',\n            angle: Angle.normalize(this.node.getAngle()),\n            start: Point.create(client).theta(center),\n        });\n        this.startAction(evt);\n        notify('node:rotate:mousedown', evt, view);\n    }\n    onMouseMove(evt) {\n        const view = this.graph.findViewByCell(this.node);\n        let data = this.getEventData(evt);\n        if (data.action) {\n            const e = this.normalizeEvent(evt);\n            let clientX = e.clientX;\n            let clientY = e.clientY;\n            const scroller = this.graph.scroller.widget;\n            const restrict = this.options.restrictedResizing;\n            if (restrict === true || typeof restrict === 'number') {\n                const factor = restrict === true ? 0 : restrict;\n                const fix = scroller ? Math.max(factor, 8) : factor;\n                const rect = this.graph.container.getBoundingClientRect();\n                clientX = NumberExt.clamp(clientX, rect.left + fix, rect.right - fix);\n                clientY = NumberExt.clamp(clientY, rect.top + fix, rect.bottom - fix);\n            }\n            else if (this.options.autoScrollOnResizing && scroller) {\n                scroller.autoScroll(clientX, clientY);\n            }\n            const pos = this.graph.snapToGrid(clientX, clientY);\n            const gridSize = this.graph.getGridSize();\n            const node = this.node;\n            const options = this.options;\n            if (data.action === 'resizing') {\n                data = data;\n                if (!data.resized) {\n                    if (view) {\n                        view.addClass('node-resizing');\n                        notify('node:resize', evt, view);\n                    }\n                    data.resized = true;\n                }\n                const currentBBox = node.getBBox();\n                const requestedSize = Point.create(pos)\n                    .rotate(data.angle, currentBBox.getCenter())\n                    .diff(currentBBox[data.selector]);\n                let width = data.resizeX\n                    ? requestedSize.x * data.resizeX\n                    : currentBBox.width;\n                let height = data.resizeY\n                    ? requestedSize.y * data.resizeY\n                    : currentBBox.height;\n                const rawWidth = width;\n                const rawHeight = height;\n                width = Util.snapToGrid(width, gridSize);\n                height = Util.snapToGrid(height, gridSize);\n                width = Math.max(width, options.minWidth || gridSize);\n                height = Math.max(height, options.minHeight || gridSize);\n                width = Math.min(width, options.maxWidth || Infinity);\n                height = Math.min(height, options.maxHeight || Infinity);\n                if (options.preserveAspectRatio) {\n                    const candidateWidth = (currentBBox.width * height) / currentBBox.height;\n                    const candidateHeight = (currentBBox.height * width) / currentBBox.width;\n                    if (width < candidateWidth) {\n                        height = candidateHeight;\n                    }\n                    else {\n                        width = candidateWidth;\n                    }\n                }\n                const relativeDirection = data.relativeDirection;\n                if (options.allowReverse &&\n                    (rawWidth <= -width || rawHeight <= -height)) {\n                    let reverted;\n                    if (relativeDirection === 'left') {\n                        if (rawWidth <= -width) {\n                            reverted = 'right';\n                        }\n                    }\n                    else if (relativeDirection === 'right') {\n                        if (rawWidth <= -width) {\n                            reverted = 'left';\n                        }\n                    }\n                    else if (relativeDirection === 'top') {\n                        if (rawHeight <= -height) {\n                            reverted = 'bottom';\n                        }\n                    }\n                    else if (relativeDirection === 'bottom') {\n                        if (rawHeight <= -height) {\n                            reverted = 'top';\n                        }\n                    }\n                    else if (relativeDirection === 'top-left') {\n                        if (rawWidth <= -width && rawHeight <= -height) {\n                            reverted = 'bottom-right';\n                        }\n                        else if (rawWidth <= -width) {\n                            reverted = 'top-right';\n                        }\n                        else if (rawHeight <= -height) {\n                            reverted = 'bottom-left';\n                        }\n                    }\n                    else if (relativeDirection === 'top-right') {\n                        if (rawWidth <= -width && rawHeight <= -height) {\n                            reverted = 'bottom-left';\n                        }\n                        else if (rawWidth <= -width) {\n                            reverted = 'top-left';\n                        }\n                        else if (rawHeight <= -height) {\n                            reverted = 'bottom-right';\n                        }\n                    }\n                    else if (relativeDirection === 'bottom-left') {\n                        if (rawWidth <= -width && rawHeight <= -height) {\n                            reverted = 'top-right';\n                        }\n                        else if (rawWidth <= -width) {\n                            reverted = 'bottom-right';\n                        }\n                        else if (rawHeight <= -height) {\n                            reverted = 'top-left';\n                        }\n                    }\n                    else if (relativeDirection === 'bottom-right') {\n                        if (rawWidth <= -width && rawHeight <= -height) {\n                            reverted = 'top-left';\n                        }\n                        else if (rawWidth <= -width) {\n                            reverted = 'bottom-left';\n                        }\n                        else if (rawHeight <= -height) {\n                            reverted = 'top-right';\n                        }\n                    }\n                    const revertedDir = reverted;\n                    this.stopHandle();\n                    const $handle = this.$container.find(`.${this.resizeClassName}[data-position=\"${revertedDir}\"]`);\n                    this.startHandle($handle[0]);\n                    this.prepareResizing(evt, revertedDir);\n                    this.onMouseMove(evt);\n                }\n                if (currentBBox.width !== width || currentBBox.height !== height) {\n                    const resizeOptions = {\n                        ui: true,\n                        direction: data.direction,\n                        relativeDirection: data.relativeDirection,\n                        trueDirection: data.trueDirection,\n                        minWidth: options.minWidth,\n                        minHeight: options.minHeight,\n                        maxWidth: options.maxWidth,\n                        maxHeight: options.maxHeight,\n                        preserveAspectRatio: options.preserveAspectRatio === true,\n                    };\n                    node.resize(width, height, resizeOptions);\n                    notify('node:resizing', evt, view);\n                }\n                notify('node:resize:mousemove', evt, view);\n            }\n            else if (data.action === 'rotating') {\n                data = data;\n                if (!data.rotated) {\n                    if (view) {\n                        view.addClass('node-rotating');\n                        notify('node:rotate', evt, view);\n                    }\n                    data.rotated = true;\n                }\n                const currentAngle = node.getAngle();\n                const theta = data.start - Point.create(pos).theta(data.center);\n                let target = data.angle + theta;\n                if (options.rotateGrid) {\n                    target = Util.snapToGrid(target, options.rotateGrid);\n                }\n                if (currentAngle !== target) {\n                    node.rotate(target, { absolute: true });\n                    notify('node:rotating', evt, view);\n                }\n                notify('node:rotate:mousemove', evt, view);\n            }\n        }\n    }\n    onMouseUp(evt) {\n        const view = this.graph.findViewByCell(this.node);\n        const data = this.getEventData(evt);\n        if (data.action) {\n            this.stopAction(evt);\n            this.model.stopBatch(data.action === 'resizing' ? 'resize' : 'rotate', {\n                cid: this.cid,\n            });\n            if (data.action === 'resizing') {\n                notify('node:resize:mouseup', evt, view);\n            }\n            else if (data.action === 'rotating') {\n                notify('node:rotate:mouseup', evt, view);\n            }\n        }\n    }\n    startHandle(handle) {\n        this.handle = handle || null;\n        this.$container.addClass(`${this.containerClassName}-active`);\n        if (handle) {\n            this.$(handle).addClass(`${this.containerClassName}-active-handle`);\n            const pos = handle.getAttribute('data-position');\n            if (pos) {\n                const dir = Private.DIRECTIONS[Private.POSITIONS.indexOf(pos)];\n                this.$container.addClass(`${this.containerClassName}-cursor-${dir}`);\n            }\n        }\n    }\n    stopHandle() {\n        this.$container.removeClass(`${this.containerClassName}-active`);\n        if (this.handle) {\n            this.$(this.handle).removeClass(`${this.containerClassName}-active-handle`);\n            const pos = this.handle.getAttribute('data-position');\n            if (pos) {\n                const dir = Private.DIRECTIONS[Private.POSITIONS.indexOf(pos)];\n                this.$container.removeClass(`${this.containerClassName}-cursor-${dir}`);\n            }\n            this.handle = null;\n        }\n    }\n    startAction(evt) {\n        this.startHandle(evt.target);\n        this.graph.view.undelegateEvents();\n        this.delegateDocumentEvents(Private.documentEvents, evt.data);\n    }\n    stopAction(evt) {\n        this.stopHandle();\n        this.undelegateDocumentEvents();\n        this.graph.view.delegateEvents();\n        const view = this.graph.findViewByCell(this.node);\n        const data = this.getEventData(evt);\n        if (view) {\n            view.removeClass(`node-${data.action}`);\n            if (data.action === 'resizing' && data.resized) {\n                notify('node:resized', evt, view);\n            }\n            else if (data.action === 'rotating' && data.rotated) {\n                notify('node:rotated', evt, view);\n            }\n        }\n    }\n}\nvar Private;\n(function (Private) {\n    Private.NODE_CLS = 'has-widget-transform';\n    Private.DIRECTIONS = ['nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w'];\n    Private.POSITIONS = [\n        'top-left',\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n    ];\n    Private.documentEvents = {\n        mousemove: 'onMouseMove',\n        touchmove: 'onMouseMove',\n        mouseup: 'onMouseUp',\n        touchend: 'onMouseUp',\n    };\n    Private.defaultOptions = {\n        minWidth: 0,\n        minHeight: 0,\n        maxWidth: Infinity,\n        maxHeight: Infinity,\n        rotateGrid: 15,\n        rotatable: true,\n        preserveAspectRatio: false,\n        orthogonalResizing: true,\n        restrictedResizing: false,\n        autoScrollOnResizing: true,\n        allowReverse: true,\n    };\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}