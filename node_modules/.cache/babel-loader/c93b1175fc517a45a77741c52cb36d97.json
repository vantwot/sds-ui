{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport LngLat from './lng_lat';\n\nvar LngLatBounds = function () {\n  function LngLatBounds(sw, ne) {\n    _classCallCheck(this, LngLatBounds);\n\n    _defineProperty(this, \"ne\", void 0);\n\n    _defineProperty(this, \"sw\", void 0);\n\n    if (!sw) {} else if (ne) {\n      this.setSouthWest(sw).setNorthEast(ne);\n    } else if (sw.length === 4) {\n      this.setSouthWest([sw[0], sw[1]]).setNorthEast([sw[2], sw[3]]);\n    } else {\n      this.setSouthWest(sw[0]).setNorthEast(sw[1]);\n    }\n  }\n\n  _createClass(LngLatBounds, [{\n    key: \"setNorthEast\",\n    value: function setNorthEast(ne) {\n      this.ne = ne instanceof LngLat ? new LngLat(ne.lng, ne.lat) : LngLat.convert(ne);\n      return this;\n    }\n  }, {\n    key: \"setSouthWest\",\n    value: function setSouthWest(sw) {\n      this.sw = sw instanceof LngLat ? new LngLat(sw.lng, sw.lat) : LngLat.convert(sw);\n      return this;\n    }\n  }, {\n    key: \"extend\",\n    value: function extend(obj) {\n      var sw = this.sw;\n      var ne = this.ne;\n      var sw2;\n      var ne2;\n\n      if (obj instanceof LngLat) {\n        sw2 = obj;\n        ne2 = obj;\n      } else if (obj instanceof LngLatBounds) {\n        sw2 = obj.sw;\n        ne2 = obj.ne;\n\n        if (!sw2 || !ne2) {\n          return this;\n        }\n      } else {\n        if (Array.isArray(obj)) {\n          if (obj.length === 4 || obj.every(Array.isArray)) {\n            var lngLatBoundsObj = obj;\n            return this.extend(LngLatBounds.convert(lngLatBoundsObj));\n          } else {\n            var lngLatObj = obj;\n            return this.extend(LngLat.convert(lngLatObj));\n          }\n        }\n\n        return this;\n      }\n\n      if (!sw && !ne) {\n        this.sw = new LngLat(sw2.lng, sw2.lat);\n        this.ne = new LngLat(ne2.lng, ne2.lat);\n      } else {\n        sw.lng = Math.min(sw2.lng, sw.lng);\n        sw.lat = Math.min(sw2.lat, sw.lat);\n        ne.lng = Math.max(ne2.lng, ne.lng);\n        ne.lat = Math.max(ne2.lat, ne.lat);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      return new LngLat((this.sw.lng + this.ne.lng) / 2, (this.sw.lat + this.ne.lat) / 2);\n    }\n  }, {\n    key: \"getSouthWest\",\n    value: function getSouthWest() {\n      return this.sw;\n    }\n  }, {\n    key: \"getNorthEast\",\n    value: function getNorthEast() {\n      return this.ne;\n    }\n  }, {\n    key: \"getNorthWest\",\n    value: function getNorthWest() {\n      return new LngLat(this.getWest(), this.getNorth());\n    }\n  }, {\n    key: \"getSouthEast\",\n    value: function getSouthEast() {\n      return new LngLat(this.getEast(), this.getSouth());\n    }\n  }, {\n    key: \"getWest\",\n    value: function getWest() {\n      return this.sw.lng;\n    }\n  }, {\n    key: \"getSouth\",\n    value: function getSouth() {\n      return this.sw.lat;\n    }\n  }, {\n    key: \"getEast\",\n    value: function getEast() {\n      return this.ne.lng;\n    }\n  }, {\n    key: \"getNorth\",\n    value: function getNorth() {\n      return this.ne.lat;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return [this.sw.toArray(), this.ne.toArray()];\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"LngLatBounds(\".concat(this.sw.toString(), \", \").concat(this.ne.toString(), \")\");\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return !(this.sw && this.ne);\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(lnglat) {\n      var _LngLat$convert = LngLat.convert(lnglat),\n          lng = _LngLat$convert.lng,\n          lat = _LngLat$convert.lat;\n\n      var containsLatitude = this.sw.lat <= lat && lat <= this.ne.lat;\n      var containsLongitude = this.sw.lng <= lng && lng <= this.ne.lng;\n\n      if (this.sw.lng > this.ne.lng) {\n        containsLongitude = this.sw.lng >= lng && lng >= this.ne.lng;\n      }\n\n      return containsLatitude && containsLongitude;\n    }\n  }], [{\n    key: \"convert\",\n    value: function convert(input) {\n      if (input instanceof LngLatBounds) {\n        return input;\n      }\n\n      return new LngLatBounds(input);\n    }\n  }]);\n\n  return LngLatBounds;\n}();\n\nexport { LngLatBounds as default };","map":{"version":3,"sources":["../../src/geo/lng_lat_bounds.ts"],"names":["LngLatBounds","input","sw","ne","LngLat","obj","sw2","ne2","Array","lngLatBoundsObj","lngLatObj","Math","lng","lat","containsLatitude","containsLongitude"],"mappings":"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","sourcesContent":["import LngLat, { LngLatLike } from './lng_lat';\nexport type LngLatBoundsLike =\n  | LngLatBounds\n  | [LngLatLike, LngLatLike]\n  | [number, number, number, number];\nexport default class LngLatBounds {\n  public static convert(input: LngLatBoundsLike): LngLatBounds {\n    if (input instanceof LngLatBounds) {\n      return input;\n    }\n    return new LngLatBounds(input);\n  }\n  private ne: LngLat;\n  private sw: LngLat;\n  constructor(sw?: any, ne?: any) {\n    if (!sw) {\n      // noop\n    } else if (ne) {\n      this.setSouthWest(sw).setNorthEast(ne);\n    } else if (sw.length === 4) {\n      this.setSouthWest([sw[0], sw[1]]).setNorthEast([sw[2], sw[3]]);\n    } else {\n      this.setSouthWest(sw[0]).setNorthEast(sw[1]);\n    }\n  }\n\n  public setNorthEast(ne: LngLatLike) {\n    this.ne =\n      ne instanceof LngLat ? new LngLat(ne.lng, ne.lat) : LngLat.convert(ne);\n    return this;\n  }\n  public setSouthWest(sw: LngLatLike) {\n    this.sw =\n      sw instanceof LngLat ? new LngLat(sw.lng, sw.lat) : LngLat.convert(sw);\n    return this;\n  }\n\n  public extend(obj: LngLatLike | LngLatBoundsLike): this {\n    const sw = this.sw;\n    const ne = this.ne;\n    let sw2: any;\n    let ne2: any;\n\n    if (obj instanceof LngLat) {\n      sw2 = obj;\n      ne2 = obj;\n    } else if (obj instanceof LngLatBounds) {\n      sw2 = obj.sw;\n      ne2 = obj.ne;\n\n      if (!sw2 || !ne2) {\n        return this;\n      }\n    } else {\n      if (Array.isArray(obj)) {\n        if (obj.length === 4 || obj.every(Array.isArray)) {\n          const lngLatBoundsObj = obj as LngLatBoundsLike;\n          return this.extend(LngLatBounds.convert(lngLatBoundsObj));\n        } else {\n          const lngLatObj = obj as LngLatLike;\n          return this.extend(LngLat.convert(lngLatObj));\n        }\n      }\n      return this;\n    }\n\n    if (!sw && !ne) {\n      this.sw = new LngLat(sw2.lng, sw2.lat);\n      this.ne = new LngLat(ne2.lng, ne2.lat);\n    } else {\n      sw.lng = Math.min(sw2.lng, sw.lng);\n      sw.lat = Math.min(sw2.lat, sw.lat);\n      ne.lng = Math.max(ne2.lng, ne.lng);\n      ne.lat = Math.max(ne2.lat, ne.lat);\n    }\n\n    return this;\n  }\n  public getCenter(): LngLat {\n    return new LngLat(\n      (this.sw.lng + this.ne.lng) / 2,\n      (this.sw.lat + this.ne.lat) / 2,\n    );\n  }\n\n  public getSouthWest(): LngLat {\n    return this.sw;\n  }\n\n  public getNorthEast(): LngLat {\n    return this.ne;\n  }\n\n  public getNorthWest(): LngLat {\n    return new LngLat(this.getWest(), this.getNorth());\n  }\n\n  public getSouthEast(): LngLat {\n    return new LngLat(this.getEast(), this.getSouth());\n  }\n\n  public getWest(): number {\n    return this.sw.lng;\n  }\n\n  public getSouth(): number {\n    return this.sw.lat;\n  }\n\n  public getEast(): number {\n    return this.ne.lng;\n  }\n\n  public getNorth(): number {\n    return this.ne.lat;\n  }\n\n  public toArray(): [[number, number], [number, number]] {\n    return [this.sw.toArray(), this.ne.toArray()];\n  }\n\n  public toString() {\n    return `LngLatBounds(${this.sw.toString()}, ${this.ne.toString()})`;\n  }\n\n  public isEmpty() {\n    return !(this.sw && this.ne);\n  }\n\n  public contains(lnglat: LngLatLike) {\n    const { lng, lat } = LngLat.convert(lnglat);\n\n    const containsLatitude = this.sw.lat <= lat && lat <= this.ne.lat;\n    let containsLongitude = this.sw.lng <= lng && lng <= this.ne.lng;\n    if (this.sw.lng > this.ne.lng) {\n      // wrapped coordinates\n      containsLongitude = this.sw.lng >= lng && lng >= this.ne.lng;\n    }\n\n    return containsLatitude && containsLongitude;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}