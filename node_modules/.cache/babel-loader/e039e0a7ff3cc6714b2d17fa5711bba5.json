{"ast":null,"code":"import React from 'react';\nimport classNames from 'classnames';\nimport RcDropdown from 'rc-dropdown';\nexport class Dropdown extends React.Component {\n  // getTransitionName() {\n  //   const { placement = '', transitionName } = this.props\n  //   if (transitionName !== undefined) {\n  //     return transitionName\n  //   }\n  //   if (placement.indexOf('top') >= 0) {\n  //     return 'slide-down'\n  //   }\n  //   return 'slide-up'\n  // }\n  render() {\n    const {\n      children,\n      trigger,\n      disabled\n    } = this.props;\n    const prefixCls = `${this.props.prefixCls}-dropdown`;\n    const child = React.Children.only(children);\n    const dropdownTrigger = React.cloneElement(child, {\n      className: classNames(children.props.className, `${prefixCls}-trigger`),\n      disabled\n    });\n    const triggers = disabled ? [] : Array.isArray(trigger) ? trigger : [trigger];\n    let alignPoint = false;\n\n    if (triggers && triggers.indexOf('contextMenu') !== -1) {\n      alignPoint = true;\n    }\n\n    const overlay = React.Children.only(this.props.overlay);\n    const fixedOverlay = React.createElement(\"div\", {\n      className: `${prefixCls}-overlay`\n    }, overlay);\n    return React.createElement(RcDropdown, Object.assign({}, this.props, {\n      prefixCls: prefixCls,\n      overlay: fixedOverlay,\n      alignPoint: alignPoint,\n      trigger: triggers\n    }), dropdownTrigger);\n  }\n\n}\n\n(function (Dropdown) {\n  Dropdown.defaultProps = {\n    trigger: 'hover',\n    prefixCls: 'x6',\n    mouseEnterDelay: 0.15,\n    mouseLeaveDelay: 0.1,\n    placement: 'bottomLeft'\n  };\n})(Dropdown || (Dropdown = {}));","map":{"version":3,"sources":["../../src/dropdown/index.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,UAAP,MAAuB,YAAvB;AACA,OAAO,UAAP,MAAuB,aAAvB;AAEA,OAAM,MAAO,QAAP,SAAwB,KAAK,CAAC,SAA9B,CAA4D;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,EAAA,MAAM,GAAA;AACJ,UAAM;AAAE,MAAA,QAAF;AAAY,MAAA,OAAZ;AAAqB,MAAA;AAArB,QAAkC,KAAK,KAA7C;AAEA,UAAM,SAAS,GAAG,GAAG,KAAK,KAAL,CAAW,SAAS,WAAzC;AACA,UAAM,KAAK,GAAG,KAAK,CAAC,QAAN,CAAe,IAAf,CAAoB,QAApB,CAAd;AACA,UAAM,eAAe,GAAG,KAAK,CAAC,YAAN,CAAmB,KAAnB,EAA0B;AAChD,MAAA,SAAS,EAAE,UAAU,CAClB,QAAgB,CAAC,KAAjB,CAAuB,SADL,EAEnB,GAAG,SAAS,UAFO,CAD2B;AAKhD,MAAA;AALgD,KAA1B,CAAxB;AAQA,UAAM,QAAQ,GAAG,QAAQ,GACrB,EADqB,GAErB,KAAK,CAAC,OAAN,CAAc,OAAd,IACA,OADA,GAEA,CAAC,OAAD,CAJJ;AAMA,QAAI,UAAU,GAAG,KAAjB;;AACA,QAAI,QAAQ,IAAI,QAAQ,CAAC,OAAT,CAAiB,aAAjB,MAAoC,CAAC,CAArD,EAAwD;AACtD,MAAA,UAAU,GAAG,IAAb;AACD;;AAED,UAAM,OAAO,GAAG,KAAK,CAAC,QAAN,CAAe,IAAf,CAAoB,KAAK,KAAL,CAAW,OAA/B,CAAhB;AACA,UAAM,YAAY,GAAG,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAE,GAAG,SAAS;AAA5B,KAAA,EAAyC,OAAzC,CAArB;AAEA,WACE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,MAAA,CAAA,MAAA,CAAA,EAAA,EACL,KAAK,KADA,EACK;AACd,MAAA,SAAS,EAAE,SADG;AAEd,MAAA,OAAO,EAAE,YAFK;AAGd,MAAA,UAAU,EAAE,UAHE;AAId,MAAA,OAAO,EAAE;AAJK,KADL,CAAX,EAOG,eAPH,CADF;AAWD;;AAlD+D;;AAqDlE,CAAA,UAAiB,QAAjB,EAAyB;AA4BV,EAAA,QAAA,CAAA,YAAA,GAAsB;AACjC,IAAA,OAAO,EAAE,OADwB;AAEjC,IAAA,SAAS,EAAE,IAFsB;AAGjC,IAAA,eAAe,EAAE,IAHgB;AAIjC,IAAA,eAAe,EAAE,GAJgB;AAKjC,IAAA,SAAS,EAAE;AALsB,GAAtB;AAOd,CAnCD,EAAiB,QAAQ,KAAR,QAAQ,GAAA,EAAA,CAAzB","sourceRoot":"","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport RcDropdown from 'rc-dropdown';\nexport class Dropdown extends React.Component {\n    // getTransitionName() {\n    //   const { placement = '', transitionName } = this.props\n    //   if (transitionName !== undefined) {\n    //     return transitionName\n    //   }\n    //   if (placement.indexOf('top') >= 0) {\n    //     return 'slide-down'\n    //   }\n    //   return 'slide-up'\n    // }\n    render() {\n        const { children, trigger, disabled } = this.props;\n        const prefixCls = `${this.props.prefixCls}-dropdown`;\n        const child = React.Children.only(children);\n        const dropdownTrigger = React.cloneElement(child, {\n            className: classNames(children.props.className, `${prefixCls}-trigger`),\n            disabled,\n        });\n        const triggers = disabled\n            ? []\n            : Array.isArray(trigger)\n                ? trigger\n                : [trigger];\n        let alignPoint = false;\n        if (triggers && triggers.indexOf('contextMenu') !== -1) {\n            alignPoint = true;\n        }\n        const overlay = React.Children.only(this.props.overlay);\n        const fixedOverlay = React.createElement(\"div\", { className: `${prefixCls}-overlay` }, overlay);\n        return (React.createElement(RcDropdown, Object.assign({}, this.props, { prefixCls: prefixCls, overlay: fixedOverlay, alignPoint: alignPoint, trigger: triggers }), dropdownTrigger));\n    }\n}\n(function (Dropdown) {\n    Dropdown.defaultProps = {\n        trigger: 'hover',\n        prefixCls: 'x6',\n        mouseEnterDelay: 0.15,\n        mouseLeaveDelay: 0.1,\n        placement: 'bottomLeft',\n    };\n})(Dropdown || (Dropdown = {}));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}