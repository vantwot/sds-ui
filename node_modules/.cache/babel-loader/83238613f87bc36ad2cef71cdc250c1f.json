{"ast":null,"code":"import _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Util } from '../../global';\nimport { StringExt, FunctionExt } from '../../util';\nimport { Point, Rectangle, Angle } from '../../geometry';\nimport { Cell } from '../../model/cell';\nimport { notify } from '../transform/util';\nexport var NodePreset = /*#__PURE__*/function () {\n  function NodePreset(halo) {\n    _classCallCheck(this, NodePreset);\n\n    this.halo = halo;\n  }\n\n  _createClass(NodePreset, [{\n    key: \"options\",\n    get: function get() {\n      return this.halo.options;\n    }\n  }, {\n    key: \"graph\",\n    get: function get() {\n      return this.halo.graph;\n    }\n  }, {\n    key: \"model\",\n    get: function get() {\n      return this.halo.model;\n    }\n  }, {\n    key: \"view\",\n    get: function get() {\n      return this.halo.view;\n    }\n  }, {\n    key: \"cell\",\n    get: function get() {\n      return this.halo.cell;\n    }\n  }, {\n    key: \"node\",\n    get: function get() {\n      return this.cell;\n    }\n  }, {\n    key: \"getPresets\",\n    value: function getPresets() {\n      return {\n        className: 'type-node',\n        handles: [{\n          name: 'remove',\n          position: 'nw',\n          events: {\n            mousedown: this.removeCell.bind(this)\n          },\n          icon: null\n        }, {\n          name: 'resize',\n          position: 'se',\n          events: {\n            mousedown: this.startResize.bind(this),\n            mousemove: this.doResize.bind(this),\n            mouseup: this.stopResize.bind(this)\n          },\n          icon: null\n        }, {\n          name: 'clone',\n          position: 'n',\n          events: {\n            mousedown: this.startClone.bind(this),\n            mousemove: this.doClone.bind(this),\n            mouseup: this.stopClone.bind(this)\n          },\n          icon: null\n        }, {\n          name: 'link',\n          position: 'e',\n          events: {\n            mousedown: this.startLink.bind(this),\n            mousemove: this.doLink.bind(this),\n            mouseup: this.stopLink.bind(this)\n          },\n          icon: null\n        }, {\n          name: 'fork',\n          position: 'ne',\n          events: {\n            mousedown: this.startFork.bind(this),\n            mousemove: this.doFork.bind(this),\n            mouseup: this.stopFork.bind(this)\n          },\n          icon: null\n        }, {\n          name: 'unlink',\n          position: 'w',\n          events: {\n            mousedown: this.unlink.bind(this)\n          },\n          icon: null\n        }, {\n          name: 'rotate',\n          position: 'sw',\n          events: {\n            mousedown: this.startRotate.bind(this),\n            mousemove: this.doRotate.bind(this),\n            mouseup: this.stopRotate.bind(this)\n          },\n          icon: null\n        }],\n        bbox: function bbox(view) {\n          if (this.options.useCellGeometry) {\n            var node = view.cell;\n            return node.getBBox();\n          }\n\n          return view.getBBox();\n        },\n        content: function content(view) {\n          var template = StringExt.template('x: <%= x %>, y: <%= y %>, width: <%= width %>, height: <%= height %>, angle: <%= angle %>');\n          var cell = view.cell;\n          var bbox = cell.getBBox();\n          return template({\n            x: Math.floor(bbox.x),\n            y: Math.floor(bbox.y),\n            width: Math.floor(bbox.width),\n            height: Math.floor(bbox.height),\n            angle: Math.floor(cell.getAngle())\n          });\n        },\n        magnet: function magnet(view) {\n          return view.container;\n        },\n        tinyThreshold: 40,\n        smallThreshold: 80,\n        loopEdgePreferredSide: 'top',\n        loopEdgeWidth: 40,\n        rotateGrid: 15,\n        rotateEmbeds: false\n      };\n    }\n  }, {\n    key: \"removeCell\",\n    value: function removeCell() {\n      this.model.removeConnectedEdges(this.cell);\n      this.cell.remove();\n    } // #region create edge\n\n  }, {\n    key: \"startLink\",\n    value: function startLink(_ref) {\n      var x = _ref.x,\n          y = _ref.y;\n      this.halo.startBatch();\n      var graph = this.graph;\n      var edge = this.createEdgeConnectedToSource();\n      edge.setTarget({\n        x: x,\n        y: y\n      });\n      this.model.addEdge(edge, {\n        validation: false,\n        halo: this.halo.cid,\n        async: false\n      });\n      graph.view.undelegateEvents();\n      this.edgeView = graph.renderer.findViewByCell(edge);\n      this.edgeView.prepareArrowheadDragging('target', {\n        x: x,\n        y: y,\n        fallbackAction: 'remove'\n      });\n    }\n  }, {\n    key: \"createEdgeConnectedToSource\",\n    value: function createEdgeConnectedToSource() {\n      var magnet = this.getMagnet(this.view, 'source');\n      var terminal = this.getEdgeTerminal(this.view, magnet);\n      var edge = this.graph.hook.getDefaultEdge(this.view, magnet);\n      edge.setSource(terminal);\n      return edge;\n    }\n  }, {\n    key: \"getMagnet\",\n    value: function getMagnet(view, terminal) {\n      var magnet = this.options.magnet;\n\n      if (typeof magnet === 'function') {\n        var val = FunctionExt.call(magnet, this.halo, view, terminal);\n\n        if (val instanceof SVGElement) {\n          return val;\n        }\n      }\n\n      throw new Error('`magnet()` has to return an SVGElement');\n    }\n  }, {\n    key: \"getEdgeTerminal\",\n    value: function getEdgeTerminal(view, magnet) {\n      var terminal = {\n        cell: view.cell.id\n      };\n\n      if (magnet !== view.container) {\n        var port = magnet.getAttribute('port');\n\n        if (port) {\n          terminal.port = port;\n        } else {\n          terminal.selector = view.getSelector(magnet);\n        }\n      }\n\n      return terminal;\n    }\n  }, {\n    key: \"doLink\",\n    value: function doLink(_ref2) {\n      var e = _ref2.e,\n          x = _ref2.x,\n          y = _ref2.y;\n\n      if (this.edgeView) {\n        this.edgeView.onMouseMove(e, x, y);\n      }\n    }\n  }, {\n    key: \"stopLink\",\n    value: function stopLink(_ref3) {\n      var e = _ref3.e,\n          x = _ref3.x,\n          y = _ref3.y;\n      var edgeView = this.edgeView;\n\n      if (edgeView) {\n        edgeView.onMouseUp(e, x, y);\n        var edge = edgeView.cell;\n\n        if (edge.hasLoop()) {\n          this.makeLoopEdge(edge);\n        }\n\n        this.halo.stopBatch();\n        this.halo.trigger('action:edge:addde', {\n          edge: edge\n        });\n        this.edgeView = null;\n      }\n\n      this.graph.view.delegateEvents();\n    }\n  }, {\n    key: \"makeLoopEdge\",\n    value: function makeLoopEdge(edge) {\n      var vertex1 = null;\n      var vertex2 = null;\n      var loopEdgeWidth = this.options.loopEdgeWidth;\n      var graphOptions = this.graph.options;\n      var graphRect = new Rectangle(0, 0, graphOptions.width, graphOptions.height);\n      var bbox = this.graph.graphToLocal(this.view.getBBox());\n      var found = [this.options.loopEdgePreferredSide, 'top', 'bottom', 'left', 'right'].some(function (position) {\n        var point = null;\n        var dx = 0;\n        var dy = 0;\n\n        switch (position) {\n          case 'top':\n            point = new Point(bbox.x + bbox.width / 2, bbox.y - loopEdgeWidth);\n            dx = loopEdgeWidth / 2;\n            break;\n\n          case 'bottom':\n            point = new Point(bbox.x + bbox.width / 2, bbox.y + bbox.height + loopEdgeWidth);\n            dx = loopEdgeWidth / 2;\n            break;\n\n          case 'left':\n            point = new Point(bbox.x - loopEdgeWidth, bbox.y + bbox.height / 2);\n            dy = loopEdgeWidth / 2;\n            break;\n\n          case 'right':\n            point = new Point(bbox.x + bbox.width + loopEdgeWidth, bbox.y + bbox.height / 2);\n            dy = loopEdgeWidth / 2;\n            break;\n\n          default:\n            break;\n        }\n\n        if (point) {\n          vertex1 = point.translate(-dx, -dy);\n          vertex2 = point.translate(dx, dy);\n          return graphRect.containsPoint(vertex1) && graphRect.containsPoint(vertex2);\n        }\n\n        return false;\n      });\n\n      if (found && vertex1 && vertex2) {\n        edge.setVertices([vertex1, vertex2]);\n      }\n    } // #endregion\n    // #region resize\n\n  }, {\n    key: \"startResize\",\n    value: function startResize(_ref4) {\n      var e = _ref4.e;\n      this.halo.startBatch();\n      this.flip = [1, 0, 0, 1, 1, 0, 0, 1][Math.floor(Angle.normalize(this.node.getAngle()) / 45)];\n      this.view.addClass('node-resizing');\n      notify('node:resize', e, this.view);\n    }\n  }, {\n    key: \"doResize\",\n    value: function doResize(_ref5) {\n      var e = _ref5.e,\n          dx = _ref5.dx,\n          dy = _ref5.dy;\n      var size = this.node.getSize();\n      var width = Math.max(size.width + (this.flip ? dx : dy), 1);\n      var height = Math.max(size.height + (this.flip ? dy : dx), 1);\n      this.node.resize(width, height, {\n        absolute: true\n      });\n      notify('node:resizing', e, this.view);\n    }\n  }, {\n    key: \"stopResize\",\n    value: function stopResize(_ref6) {\n      var e = _ref6.e;\n      this.view.removeClass('node-resizing');\n      notify('node:resized', e, this.view);\n      this.halo.stopBatch();\n    } // #endregion\n    // #region clone\n\n  }, {\n    key: \"startClone\",\n    value: function startClone(_ref7) {\n      var e = _ref7.e,\n          x = _ref7.x,\n          y = _ref7.y;\n      this.halo.startBatch();\n      var options = this.options;\n      var cloned = options.clone(this.cell, {\n        clone: true\n      });\n\n      if (!Cell.isCell(cloned)) {\n        throw new Error(\"option 'clone()' has to return a cell\");\n      }\n\n      this.centerNodeAtCursor(cloned, x, y);\n      this.model.addCell(cloned, {\n        halo: this.halo.cid,\n        async: false\n      });\n      var cloneView = this.graph.renderer.findViewByCell(cloned);\n      cloneView.onMouseDown(e, x, y);\n      this.halo.setEventData(e, {\n        cloneView: cloneView\n      });\n    }\n  }, {\n    key: \"centerNodeAtCursor\",\n    value: function centerNodeAtCursor(cell, x, y) {\n      var center = cell.getBBox().getCenter();\n      var dx = x - center.x;\n      var dy = y - center.y;\n      cell.translate(dx, dy);\n    }\n  }, {\n    key: \"doClone\",\n    value: function doClone(_ref8) {\n      var e = _ref8.e,\n          x = _ref8.x,\n          y = _ref8.y;\n      var view = this.halo.getEventData(e).cloneView;\n\n      if (view) {\n        view.onMouseMove(e, x, y);\n      }\n    }\n  }, {\n    key: \"stopClone\",\n    value: function stopClone(_ref9) {\n      var e = _ref9.e,\n          x = _ref9.x,\n          y = _ref9.y;\n      var nodeView = this.halo.getEventData(e).cloneView;\n\n      if (nodeView) {\n        nodeView.onMouseUp(e, x, y);\n      }\n\n      this.halo.stopBatch();\n    } // #endregion\n    // #region fork\n\n  }, {\n    key: \"startFork\",\n    value: function startFork(_ref10) {\n      var e = _ref10.e,\n          x = _ref10.x,\n          y = _ref10.y;\n      this.halo.startBatch();\n      var cloned = this.options.clone(this.cell, {\n        fork: true\n      });\n\n      if (!Cell.isCell(cloned)) {\n        throw new Error(\"option 'clone()' has to return a cell\");\n      }\n\n      this.centerNodeAtCursor(cloned, x, y);\n      this.model.addCell(cloned, {\n        halo: this.halo.cid,\n        async: false\n      });\n      var edge = this.createEdgeConnectedToSource();\n      var cloneView = this.graph.renderer.findViewByCell(cloned);\n      var magnet = this.getMagnet(cloneView, 'target');\n      var terminal = this.getEdgeTerminal(cloneView, magnet);\n      edge.setTarget(terminal);\n      this.model.addEdge(edge, {\n        halo: this.halo.cid,\n        async: false\n      });\n      cloneView.onMouseDown(e, x, y);\n      this.halo.setEventData(e, {\n        cloneView: cloneView\n      });\n    }\n  }, {\n    key: \"doFork\",\n    value: function doFork(_ref11) {\n      var e = _ref11.e,\n          x = _ref11.x,\n          y = _ref11.y;\n      var view = this.halo.getEventData(e).cloneView;\n\n      if (view) {\n        view.onMouseMove(e, x, y);\n      }\n    }\n  }, {\n    key: \"stopFork\",\n    value: function stopFork(_ref12) {\n      var e = _ref12.e,\n          x = _ref12.x,\n          y = _ref12.y;\n      var view = this.halo.getEventData(e).cloneView;\n\n      if (view) {\n        view.onMouseUp(e, x, y);\n      }\n\n      this.halo.stopBatch();\n    } // #endregion\n    // #region rotate\n\n  }, {\n    key: \"startRotate\",\n    value: function startRotate(_ref13) {\n      var _this = this;\n\n      var e = _ref13.e,\n          x = _ref13.x,\n          y = _ref13.y;\n      this.halo.startBatch();\n      var center = this.node.getBBox().getCenter();\n      var nodes = [this.node];\n\n      if (this.options.rotateEmbeds) {\n        this.node.getDescendants({\n          deep: true\n        }).reduce(function (memo, cell) {\n          if (cell.isNode()) {\n            memo.push(cell);\n          }\n\n          return memo;\n        }, nodes);\n      }\n\n      this.halo.setEventData(e, {\n        center: center,\n        nodes: nodes,\n        rotateStartAngles: nodes.map(function (node) {\n          return node.getAngle();\n        }),\n        clientStartAngle: new Point(x, y).theta(center)\n      });\n      nodes.forEach(function (node) {\n        var view = _this.graph.findViewByCell(node);\n\n        if (view) {\n          view.addClass('node-rotating');\n          notify('node:rotate', e, view);\n        }\n      });\n    }\n  }, {\n    key: \"doRotate\",\n    value: function doRotate(_ref14) {\n      var _this2 = this;\n\n      var e = _ref14.e,\n          x = _ref14.x,\n          y = _ref14.y;\n      var data = this.halo.getEventData(e);\n      var delta = data.clientStartAngle - new Point(x, y).theta(data.center);\n      data.nodes.forEach(function (node, index) {\n        var startAngle = data.rotateStartAngles[index];\n        var targetAngle = Util.snapToGrid(startAngle + delta, _this2.options.rotateGrid);\n        node.rotate(targetAngle, {\n          absolute: true,\n          center: data.center,\n          halo: _this2.halo.cid\n        });\n        notify('node:rotating', e, _this2.graph.findViewByCell(node));\n      });\n    }\n  }, {\n    key: \"stopRotate\",\n    value: function stopRotate(_ref15) {\n      var _this3 = this;\n\n      var e = _ref15.e;\n      var data = this.halo.getEventData(e);\n      data.nodes.forEach(function (node) {\n        var view = _this3.graph.findViewByCell(node);\n\n        view.removeClass('node-rotating');\n        notify('node:rotated', e, view);\n      });\n      this.halo.stopBatch();\n    } // #endregion\n    // #region unlink\n\n  }, {\n    key: \"unlink\",\n    value: function unlink() {\n      this.halo.startBatch();\n      this.model.removeConnectedEdges(this.cell);\n      this.halo.stopBatch();\n    }\n  }]);\n\n  return NodePreset;\n}();","map":{"version":3,"sources":["../../../src/addon/halo/node-preset.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Util } from '../../global';\nimport { StringExt, FunctionExt } from '../../util';\nimport { Point, Rectangle, Angle } from '../../geometry';\nimport { Cell } from '../../model/cell';\nimport { notify } from '../transform/util';\nexport class NodePreset {\n    constructor(halo) {\n        this.halo = halo;\n    }\n    get options() {\n        return this.halo.options;\n    }\n    get graph() {\n        return this.halo.graph;\n    }\n    get model() {\n        return this.halo.model;\n    }\n    get view() {\n        return this.halo.view;\n    }\n    get cell() {\n        return this.halo.cell;\n    }\n    get node() {\n        return this.cell;\n    }\n    getPresets() {\n        return {\n            className: 'type-node',\n            handles: [\n                {\n                    name: 'remove',\n                    position: 'nw',\n                    events: {\n                        mousedown: this.removeCell.bind(this),\n                    },\n                    icon: null,\n                },\n                {\n                    name: 'resize',\n                    position: 'se',\n                    events: {\n                        mousedown: this.startResize.bind(this),\n                        mousemove: this.doResize.bind(this),\n                        mouseup: this.stopResize.bind(this),\n                    },\n                    icon: null,\n                },\n                {\n                    name: 'clone',\n                    position: 'n',\n                    events: {\n                        mousedown: this.startClone.bind(this),\n                        mousemove: this.doClone.bind(this),\n                        mouseup: this.stopClone.bind(this),\n                    },\n                    icon: null,\n                },\n                {\n                    name: 'link',\n                    position: 'e',\n                    events: {\n                        mousedown: this.startLink.bind(this),\n                        mousemove: this.doLink.bind(this),\n                        mouseup: this.stopLink.bind(this),\n                    },\n                    icon: null,\n                },\n                {\n                    name: 'fork',\n                    position: 'ne',\n                    events: {\n                        mousedown: this.startFork.bind(this),\n                        mousemove: this.doFork.bind(this),\n                        mouseup: this.stopFork.bind(this),\n                    },\n                    icon: null,\n                },\n                {\n                    name: 'unlink',\n                    position: 'w',\n                    events: {\n                        mousedown: this.unlink.bind(this),\n                    },\n                    icon: null,\n                },\n                {\n                    name: 'rotate',\n                    position: 'sw',\n                    events: {\n                        mousedown: this.startRotate.bind(this),\n                        mousemove: this.doRotate.bind(this),\n                        mouseup: this.stopRotate.bind(this),\n                    },\n                    icon: null,\n                },\n            ],\n            bbox(view) {\n                if (this.options.useCellGeometry) {\n                    const node = view.cell;\n                    return node.getBBox();\n                }\n                return view.getBBox();\n            },\n            content(view) {\n                const template = StringExt.template('x: <%= x %>, y: <%= y %>, width: <%= width %>, height: <%= height %>, angle: <%= angle %>');\n                const cell = view.cell;\n                const bbox = cell.getBBox();\n                return template({\n                    x: Math.floor(bbox.x),\n                    y: Math.floor(bbox.y),\n                    width: Math.floor(bbox.width),\n                    height: Math.floor(bbox.height),\n                    angle: Math.floor(cell.getAngle()),\n                });\n            },\n            magnet(view) {\n                return view.container;\n            },\n            tinyThreshold: 40,\n            smallThreshold: 80,\n            loopEdgePreferredSide: 'top',\n            loopEdgeWidth: 40,\n            rotateGrid: 15,\n            rotateEmbeds: false,\n        };\n    }\n    removeCell() {\n        this.model.removeConnectedEdges(this.cell);\n        this.cell.remove();\n    }\n    // #region create edge\n    startLink({ x, y }) {\n        this.halo.startBatch();\n        const graph = this.graph;\n        const edge = this.createEdgeConnectedToSource();\n        edge.setTarget({ x, y });\n        this.model.addEdge(edge, {\n            validation: false,\n            halo: this.halo.cid,\n            async: false,\n        });\n        graph.view.undelegateEvents();\n        this.edgeView = graph.renderer.findViewByCell(edge);\n        this.edgeView.prepareArrowheadDragging('target', {\n            x,\n            y,\n            fallbackAction: 'remove',\n        });\n    }\n    createEdgeConnectedToSource() {\n        const magnet = this.getMagnet(this.view, 'source');\n        const terminal = this.getEdgeTerminal(this.view, magnet);\n        const edge = this.graph.hook.getDefaultEdge(this.view, magnet);\n        edge.setSource(terminal);\n        return edge;\n    }\n    getMagnet(view, terminal) {\n        const magnet = this.options.magnet;\n        if (typeof magnet === 'function') {\n            const val = FunctionExt.call(magnet, this.halo, view, terminal);\n            if (val instanceof SVGElement) {\n                return val;\n            }\n        }\n        throw new Error('`magnet()` has to return an SVGElement');\n    }\n    getEdgeTerminal(view, magnet) {\n        const terminal = {\n            cell: view.cell.id,\n        };\n        if (magnet !== view.container) {\n            const port = magnet.getAttribute('port');\n            if (port) {\n                terminal.port = port;\n            }\n            else {\n                terminal.selector = view.getSelector(magnet);\n            }\n        }\n        return terminal;\n    }\n    doLink({ e, x, y }) {\n        if (this.edgeView) {\n            this.edgeView.onMouseMove(e, x, y);\n        }\n    }\n    stopLink({ e, x, y }) {\n        const edgeView = this.edgeView;\n        if (edgeView) {\n            edgeView.onMouseUp(e, x, y);\n            const edge = edgeView.cell;\n            if (edge.hasLoop()) {\n                this.makeLoopEdge(edge);\n            }\n            this.halo.stopBatch();\n            this.halo.trigger('action:edge:addde', { edge });\n            this.edgeView = null;\n        }\n        this.graph.view.delegateEvents();\n    }\n    makeLoopEdge(edge) {\n        let vertex1 = null;\n        let vertex2 = null;\n        const loopEdgeWidth = this.options.loopEdgeWidth;\n        const graphOptions = this.graph.options;\n        const graphRect = new Rectangle(0, 0, graphOptions.width, graphOptions.height);\n        const bbox = this.graph.graphToLocal(this.view.getBBox());\n        const found = [\n            this.options.loopEdgePreferredSide,\n            'top',\n            'bottom',\n            'left',\n            'right',\n        ].some((position) => {\n            let point = null;\n            let dx = 0;\n            let dy = 0;\n            switch (position) {\n                case 'top':\n                    point = new Point(bbox.x + bbox.width / 2, bbox.y - loopEdgeWidth);\n                    dx = loopEdgeWidth / 2;\n                    break;\n                case 'bottom':\n                    point = new Point(bbox.x + bbox.width / 2, bbox.y + bbox.height + loopEdgeWidth);\n                    dx = loopEdgeWidth / 2;\n                    break;\n                case 'left':\n                    point = new Point(bbox.x - loopEdgeWidth, bbox.y + bbox.height / 2);\n                    dy = loopEdgeWidth / 2;\n                    break;\n                case 'right':\n                    point = new Point(bbox.x + bbox.width + loopEdgeWidth, bbox.y + bbox.height / 2);\n                    dy = loopEdgeWidth / 2;\n                    break;\n                default:\n                    break;\n            }\n            if (point) {\n                vertex1 = point.translate(-dx, -dy);\n                vertex2 = point.translate(dx, dy);\n                return (graphRect.containsPoint(vertex1) && graphRect.containsPoint(vertex2));\n            }\n            return false;\n        });\n        if (found && vertex1 && vertex2) {\n            edge.setVertices([vertex1, vertex2]);\n        }\n    }\n    // #endregion\n    // #region resize\n    startResize({ e }) {\n        this.halo.startBatch();\n        this.flip = [1, 0, 0, 1, 1, 0, 0, 1][Math.floor(Angle.normalize(this.node.getAngle()) / 45)];\n        this.view.addClass('node-resizing');\n        notify('node:resize', e, this.view);\n    }\n    doResize({ e, dx, dy }) {\n        const size = this.node.getSize();\n        const width = Math.max(size.width + (this.flip ? dx : dy), 1);\n        const height = Math.max(size.height + (this.flip ? dy : dx), 1);\n        this.node.resize(width, height, {\n            absolute: true,\n        });\n        notify('node:resizing', e, this.view);\n    }\n    stopResize({ e }) {\n        this.view.removeClass('node-resizing');\n        notify('node:resized', e, this.view);\n        this.halo.stopBatch();\n    }\n    // #endregion\n    // #region clone\n    startClone({ e, x, y }) {\n        this.halo.startBatch();\n        const options = this.options;\n        const cloned = options.clone(this.cell, {\n            clone: true,\n        });\n        if (!Cell.isCell(cloned)) {\n            throw new Error(\"option 'clone()' has to return a cell\");\n        }\n        this.centerNodeAtCursor(cloned, x, y);\n        this.model.addCell(cloned, {\n            halo: this.halo.cid,\n            async: false,\n        });\n        const cloneView = this.graph.renderer.findViewByCell(cloned);\n        cloneView.onMouseDown(e, x, y);\n        this.halo.setEventData(e, { cloneView });\n    }\n    centerNodeAtCursor(cell, x, y) {\n        const center = cell.getBBox().getCenter();\n        const dx = x - center.x;\n        const dy = y - center.y;\n        cell.translate(dx, dy);\n    }\n    doClone({ e, x, y }) {\n        const view = this.halo.getEventData(e).cloneView;\n        if (view) {\n            view.onMouseMove(e, x, y);\n        }\n    }\n    stopClone({ e, x, y }) {\n        const nodeView = this.halo.getEventData(e).cloneView;\n        if (nodeView) {\n            nodeView.onMouseUp(e, x, y);\n        }\n        this.halo.stopBatch();\n    }\n    // #endregion\n    // #region fork\n    startFork({ e, x, y }) {\n        this.halo.startBatch();\n        const cloned = this.options.clone(this.cell, {\n            fork: true,\n        });\n        if (!Cell.isCell(cloned)) {\n            throw new Error(\"option 'clone()' has to return a cell\");\n        }\n        this.centerNodeAtCursor(cloned, x, y);\n        this.model.addCell(cloned, {\n            halo: this.halo.cid,\n            async: false,\n        });\n        const edge = this.createEdgeConnectedToSource();\n        const cloneView = this.graph.renderer.findViewByCell(cloned);\n        const magnet = this.getMagnet(cloneView, 'target');\n        const terminal = this.getEdgeTerminal(cloneView, magnet);\n        edge.setTarget(terminal);\n        this.model.addEdge(edge, {\n            halo: this.halo.cid,\n            async: false,\n        });\n        cloneView.onMouseDown(e, x, y);\n        this.halo.setEventData(e, { cloneView });\n    }\n    doFork({ e, x, y }) {\n        const view = this.halo.getEventData(e).cloneView;\n        if (view) {\n            view.onMouseMove(e, x, y);\n        }\n    }\n    stopFork({ e, x, y }) {\n        const view = this.halo.getEventData(e).cloneView;\n        if (view) {\n            view.onMouseUp(e, x, y);\n        }\n        this.halo.stopBatch();\n    }\n    // #endregion\n    // #region rotate\n    startRotate({ e, x, y }) {\n        this.halo.startBatch();\n        const center = this.node.getBBox().getCenter();\n        const nodes = [this.node];\n        if (this.options.rotateEmbeds) {\n            this.node\n                .getDescendants({\n                deep: true,\n            })\n                .reduce((memo, cell) => {\n                if (cell.isNode()) {\n                    memo.push(cell);\n                }\n                return memo;\n            }, nodes);\n        }\n        this.halo.setEventData(e, {\n            center,\n            nodes,\n            rotateStartAngles: nodes.map((node) => node.getAngle()),\n            clientStartAngle: new Point(x, y).theta(center),\n        });\n        nodes.forEach((node) => {\n            const view = this.graph.findViewByCell(node);\n            if (view) {\n                view.addClass('node-rotating');\n                notify('node:rotate', e, view);\n            }\n        });\n    }\n    doRotate({ e, x, y }) {\n        const data = this.halo.getEventData(e);\n        const delta = data.clientStartAngle - new Point(x, y).theta(data.center);\n        data.nodes.forEach((node, index) => {\n            const startAngle = data.rotateStartAngles[index];\n            const targetAngle = Util.snapToGrid(startAngle + delta, this.options.rotateGrid);\n            node.rotate(targetAngle, {\n                absolute: true,\n                center: data.center,\n                halo: this.halo.cid,\n            });\n            notify('node:rotating', e, this.graph.findViewByCell(node));\n        });\n    }\n    stopRotate({ e }) {\n        const data = this.halo.getEventData(e);\n        data.nodes.forEach((node) => {\n            const view = this.graph.findViewByCell(node);\n            view.removeClass('node-rotating');\n            notify('node:rotated', e, view);\n        });\n        this.halo.stopBatch();\n    }\n    // #endregion\n    // #region unlink\n    unlink() {\n        this.halo.startBatch();\n        this.model.removeConnectedEdges(this.cell);\n        this.halo.stopBatch();\n    }\n}\n//# sourceMappingURL=node-preset.js.map"]},"metadata":{},"sourceType":"module"}