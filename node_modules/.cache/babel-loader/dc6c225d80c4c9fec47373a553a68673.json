{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _merge from \"lodash/merge\";\n\nvar _dec, _class;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport WarnInfo from './warnInfo';\nvar defaultSceneConfig = {\n  id: 'map',\n  logoPosition: 'bottomleft',\n  logoVisible: true,\n  antialias: true,\n  preserveDrawingBuffer: false,\n  pickBufferScale: 1.0,\n  fitBoundsOptions: {\n    animate: false\n  }\n};\nvar defaultLayerConfig = {\n  colors: ['rgb(103,0,31)', 'rgb(178,24,43)', 'rgb(214,96,77)', 'rgb(244,165,130)', 'rgb(253,219,199)', 'rgb(247,247,247)', 'rgb(209,229,240)', 'rgb(146,197,222)', 'rgb(67,147,195)', 'rgb(33,102,172)', 'rgb(5,48,97)'],\n  size: 10,\n  shape: 'circle',\n  scales: {},\n  shape2d: ['circle', 'triangle', 'square', 'pentagon', 'hexagon', 'octogon', 'hexagram', 'rhombus', 'vesica'],\n  shape3d: ['cylinder', 'triangleColumn', 'hexagonColumn', 'squareColumn'],\n  minZoom: -1,\n  maxZoom: 24,\n  visible: true,\n  autoFit: false,\n  pickingBuffer: 0,\n  enablePropagation: false,\n  zIndex: 0,\n  blend: 'normal',\n  pickedFeatureID: -1,\n  enableMultiPassRenderer: false,\n  enablePicking: true,\n  active: false,\n  activeColor: '#2f54eb',\n  enableHighlight: false,\n  enableSelect: false,\n  highlightColor: '#2f54eb',\n  selectColor: 'blue',\n  enableTAA: false,\n  jitterScale: 1,\n  enableLighting: false,\n  animateOption: {\n    enable: false,\n    interval: 0.2,\n    duration: 4,\n    trailLength: 0.15\n  },\n  forward: true\n};\nvar GlobalConfigService = (_dec = injectable(), _dec(_class = function () {\n  function GlobalConfigService() {\n    _classCallCheck(this, GlobalConfigService);\n\n    _defineProperty(this, \"sceneConfigCache\", {});\n\n    _defineProperty(this, \"layerConfigCache\", {});\n  }\n\n  _createClass(GlobalConfigService, [{\n    key: \"getSceneConfig\",\n    value: function getSceneConfig(sceneId) {\n      return this.sceneConfigCache[sceneId];\n    }\n  }, {\n    key: \"getSceneWarninfo\",\n    value: function getSceneWarninfo(id) {\n      return WarnInfo[id];\n    }\n  }, {\n    key: \"setSceneConfig\",\n    value: function setSceneConfig(sceneId, config) {\n      this.sceneConfigCache[sceneId] = _objectSpread(_objectSpread({}, defaultSceneConfig), config);\n    }\n  }, {\n    key: \"getLayerConfig\",\n    value: function getLayerConfig(layerId) {\n      return this.layerConfigCache[layerId];\n    }\n  }, {\n    key: \"setLayerConfig\",\n    value: function setLayerConfig(sceneId, layerId, config) {\n      this.layerConfigCache[layerId] = _objectSpread({}, _merge({}, this.sceneConfigCache[sceneId], defaultLayerConfig, config));\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.sceneConfigCache = {};\n      this.layerConfigCache = {};\n    }\n  }]);\n\n  return GlobalConfigService;\n}()) || _class);\nexport { GlobalConfigService as default };","map":{"version":3,"sources":["../../../src/services/config/ConfigService.ts"],"names":["defaultSceneConfig","id","logoPosition","logoVisible","antialias","preserveDrawingBuffer","pickBufferScale","fitBoundsOptions","animate","defaultLayerConfig","colors","size","shape","scales","shape2d","shape3d","minZoom","maxZoom","visible","autoFit","pickingBuffer","enablePropagation","zIndex","blend","pickedFeatureID","enableMultiPassRenderer","enablePicking","active","activeColor","enableHighlight","enableSelect","highlightColor","selectColor","enableTAA","jitterScale","enableLighting","animateOption","enable","interval","duration","trailLength","forward","injectable","GlobalConfigService","WarnInfo"],"mappings":"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","sourcesContent":["// import Ajv from 'ajv';\nimport { injectable, postConstruct } from 'inversify';\nimport { merge } from 'lodash';\nimport 'reflect-metadata';\nimport { ILayerConfig } from '../layer/ILayerService';\nimport { IRenderConfig } from '../renderer/IRendererService';\nimport { IGlobalConfigService, ISceneConfig } from './IConfigService';\nimport WarnInfo, { IWarnInfo } from './warnInfo';\n\n/**\n * 场景默认配置项\n */\nconst defaultSceneConfig: Partial<ISceneConfig & IRenderConfig> = {\n  id: 'map',\n  logoPosition: 'bottomleft',\n  logoVisible: true,\n  antialias: true,\n  preserveDrawingBuffer: false,\n  pickBufferScale: 1.0,\n  fitBoundsOptions: {\n    animate: false,\n  },\n};\n\n/**\n * 图层基类默认样式属性\n */\nconst defaultLayerConfig: Partial<ILayerConfig> = {\n  colors: [\n    'rgb(103,0,31)',\n    'rgb(178,24,43)',\n    'rgb(214,96,77)',\n    'rgb(244,165,130)',\n    'rgb(253,219,199)',\n    'rgb(247,247,247)',\n    'rgb(209,229,240)',\n    'rgb(146,197,222)',\n    'rgb(67,147,195)',\n    'rgb(33,102,172)',\n    'rgb(5,48,97)',\n  ],\n  size: 10,\n  shape: 'circle',\n  scales: {},\n  shape2d: [\n    'circle',\n    'triangle',\n    'square',\n    'pentagon',\n    'hexagon',\n    'octogon',\n    'hexagram',\n    'rhombus',\n    'vesica',\n  ],\n  shape3d: ['cylinder', 'triangleColumn', 'hexagonColumn', 'squareColumn'],\n  minZoom: -1,\n  maxZoom: 24,\n  visible: true,\n  autoFit: false,\n  pickingBuffer: 0,\n  enablePropagation: false,\n  zIndex: 0,\n  blend: 'normal',\n  pickedFeatureID: -1,\n  enableMultiPassRenderer: false,\n  enablePicking: true,\n  active: false,\n  activeColor: '#2f54eb',\n  enableHighlight: false,\n  enableSelect: false,\n  highlightColor: '#2f54eb',\n  selectColor: 'blue',\n  enableTAA: false,\n  jitterScale: 1,\n  enableLighting: false,\n  animateOption: {\n    enable: false,\n    interval: 0.2,\n    duration: 4,\n    trailLength: 0.15,\n  },\n  forward: true, // 默认是正方向\n};\n\n// @see https://github.com/epoberezkin/ajv#options\n// const ajv = new Ajv({\n//   allErrors: true,\n//   verbose: true,\n// });\n\n@injectable()\nexport default class GlobalConfigService implements IGlobalConfigService {\n  /**\n   * 全部场景配置项缓存\n   */\n  private sceneConfigCache: {\n    [sceneId: string]: Partial<ISceneConfig>;\n  } = {};\n\n  /**\n   * 场景配置项校验器\n   */\n  // private sceneConfigValidator: Ajv.ValidateFunction;\n\n  /**\n   * 地图配置项校验器\n   */\n  // private mapConfigValidator: Ajv.ValidateFunction;\n\n  /**\n   * 全部图层配置项缓存\n   */\n  private layerConfigCache: {\n    [layerId: string]: Partial<ILayerConfig & ISceneConfig>;\n  } = {};\n\n  /**\n   * 保存每一种 Layer 配置项的校验器\n   */\n  // private layerConfigValidatorCache: {\n  //   [layerName: string]: Ajv.ValidateFunction;\n  // } = {};\n\n  public getSceneConfig(sceneId: string) {\n    return this.sceneConfigCache[sceneId];\n  }\n\n  public getSceneWarninfo(id: string) {\n    return WarnInfo[id];\n  }\n\n  public setSceneConfig(sceneId: string, config: Partial<ISceneConfig>) {\n    this.sceneConfigCache[sceneId] = {\n      ...defaultSceneConfig,\n      ...config,\n    };\n  }\n\n  // public validateSceneConfig(data: object) {\n  //   return this.validate(this.sceneConfigValidator, data);\n  // }\n\n  // public validateMapConfig(data: object) {\n  //   return this.validate(this.mapConfigValidator, data);\n  // }\n\n  public getLayerConfig<IChildLayerConfig>(\n    layerId: string,\n  ): Partial<ILayerConfig & ISceneConfig & IChildLayerConfig> {\n    // @ts-ignore\n    return this.layerConfigCache[layerId];\n  }\n\n  public setLayerConfig(\n    sceneId: string,\n    layerId: string,\n    config: Partial<ILayerConfig>,\n  ) {\n    // @ts-ignore\n    this.layerConfigCache[layerId] = {\n      ...merge({}, this.sceneConfigCache[sceneId], defaultLayerConfig, config),\n    };\n  }\n\n  // public registerLayerConfigSchemaValidator(layerName: string, schema: object) {\n  //   if (!this.layerConfigValidatorCache[layerName]) {\n  //     this.layerConfigValidatorCache[layerName] = ajv.compile(schema);\n  //   }\n  // }\n\n  // public validateLayerConfig(layerName: string, data: object) {\n  //   return this.validate(this.layerConfigValidatorCache[layerName], data);\n  // }\n\n  public clean() {\n    this.sceneConfigCache = {};\n    this.layerConfigCache = {};\n  }\n\n  // @postConstruct()\n  // private registerSceneConfigSchemaValidator() {\n  //   this.sceneConfigValidator = ajv.compile(sceneConfigSchema);\n  //   this.mapConfigValidator = ajv.compile(mapConfigSchema);\n  // }\n\n  // private validate(\n  //   validateFunc: Ajv.ValidateFunction | undefined,\n  //   data: object,\n  // ) {\n  //   if (validateFunc) {\n  //     const valid = validateFunc(data);\n  //     if (!valid) {\n  //       return {\n  //         valid,\n  //         errors: validateFunc.errors,\n  //         errorText: ajv.errorsText(validateFunc.errors),\n  //       };\n  //     }\n  //   }\n  //   return {\n  //     valid: true,\n  //     errors: null,\n  //     errorText: null,\n  //   };\n  // }\n}\n"]},"metadata":{},"sourceType":"module"}