{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { wrap as _wrap } from '../util';\nexport var earthRadius = 6371008.8;\n\nvar LngLat = function () {\n  function LngLat(lng, lat) {\n    _classCallCheck(this, LngLat);\n\n    _defineProperty(this, \"lng\", void 0);\n\n    _defineProperty(this, \"lat\", void 0);\n\n    if (isNaN(lng) || isNaN(lat)) {\n      throw new Error(\"Invalid LngLat object: (\".concat(lng, \", \").concat(lat, \")\"));\n    }\n\n    this.lng = +lng;\n    this.lat = +lat;\n\n    if (this.lat > 90 || this.lat < -90) {\n      throw new Error('Invalid LngLat latitude value: must be between -90 and 90');\n    }\n  }\n\n  _createClass(LngLat, [{\n    key: \"wrap\",\n    value: function wrap() {\n      return new LngLat(_wrap(this.lng, -180, 180), this.lat);\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return [this.lng, this.lat];\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"LngLat(\".concat(this.lng, \", \").concat(this.lat, \")\");\n    }\n  }, {\n    key: \"distanceTo\",\n    value: function distanceTo(lngLat) {\n      var rad = Math.PI / 180;\n      var lat1 = this.lat * rad;\n      var lat2 = lngLat.lat * rad;\n      var a = Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos((lngLat.lng - this.lng) * rad);\n      var maxMeters = earthRadius * Math.acos(Math.min(a, 1));\n      return maxMeters;\n    }\n  }], [{\n    key: \"convert\",\n    value: function convert(input) {\n      if (input instanceof LngLat) {\n        return input;\n      }\n\n      if (Array.isArray(input) && (input.length === 2 || input.length === 3)) {\n        return new LngLat(Number(input[0]), Number(input[1]));\n      }\n\n      if (!Array.isArray(input) && _typeof(input) === 'object' && input !== null) {\n        var lng = 'lng' in input ? input.lng : input.lon;\n        return new LngLat(Number(lng), Number(input.lat));\n      }\n\n      throw new Error('`LngLatLike` argument must be specified as a LngLat instance, an object {lng: <lng>, lat: <lat>}, an object {lon: <lng>, lat: <lat>}, or an array of [<lng>, <lat>]');\n    }\n  }]);\n\n  return LngLat;\n}();\n\nexport { LngLat as default };","map":{"version":3,"sources":["../../src/geo/lng_lat.ts"],"names":["wrap","earthRadius","LngLat","input","Array","Number","lng","isNaN","rad","Math","lat1","lat2","lngLat","a","maxMeters"],"mappings":"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","sourcesContent":["import { wrap } from '../util';\nimport LngLatBounds from './lng_lat_bounds';\nexport const earthRadius = 6371008.8;\nexport type LngLatLike =\n  | LngLat\n  | { lng: number; lat: number }\n  | { lon: number; lat: number }\n  | [number, number];\n\nexport default class LngLat {\n  public static convert(input: LngLatLike): LngLat {\n    if (input instanceof LngLat) {\n      return input;\n    }\n    if (Array.isArray(input) && (input.length === 2 || input.length === 3)) {\n      return new LngLat(Number(input[0]), Number(input[1]));\n    }\n    if (!Array.isArray(input) && typeof input === 'object' && input !== null) {\n      const lng = 'lng' in input ? input.lng : input.lon;\n      return new LngLat(\n        // flow can't refine this to have one of lng or lat, so we have to cast to any\n        Number(lng),\n        Number(input.lat),\n      );\n    }\n    throw new Error(\n      '`LngLatLike` argument must be specified as a LngLat instance, an object {lng: <lng>, lat: <lat>}, an object {lon: <lng>, lat: <lat>}, or an array of [<lng>, <lat>]',\n    );\n  }\n  public lng: number;\n  public lat: number;\n  constructor(lng: number, lat: number) {\n    if (isNaN(lng) || isNaN(lat)) {\n      throw new Error(`Invalid LngLat object: (${lng}, ${lat})`);\n    }\n    this.lng = +lng;\n    this.lat = +lat;\n    if (this.lat > 90 || this.lat < -90) {\n      throw new Error(\n        'Invalid LngLat latitude value: must be between -90 and 90',\n      );\n    }\n  }\n\n  public wrap() {\n    return new LngLat(wrap(this.lng, -180, 180), this.lat);\n  }\n  public toArray(): [number, number] {\n    return [this.lng, this.lat];\n  }\n  // public toBounds(radius: number = 0) {\n  //   const earthCircumferenceInMetersAtEquator = 40075017;\n  //   const latAccuracy = (360 * radius) / earthCircumferenceInMetersAtEquator;\n  //   const lngAccuracy = latAccuracy / Math.cos((Math.PI / 180) * this.lat);\n\n  //   return new LngLatBounds(\n  //     new LngLat(this.lng - lngAccuracy, this.lat - latAccuracy),\n  //     new LngLat(this.lng + lngAccuracy, this.lat + latAccuracy),\n  //   );\n  // }\n  public toString() {\n    return `LngLat(${this.lng}, ${this.lat})`;\n  }\n  public distanceTo(lngLat: LngLat) {\n    const rad = Math.PI / 180;\n    const lat1 = this.lat * rad;\n    const lat2 = lngLat.lat * rad;\n    const a =\n      Math.sin(lat1) * Math.sin(lat2) +\n      Math.cos(lat1) * Math.cos(lat2) * Math.cos((lngLat.lng - this.lng) * rad);\n\n    const maxMeters = earthRadius * Math.acos(Math.min(a, 1));\n    return maxMeters;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}