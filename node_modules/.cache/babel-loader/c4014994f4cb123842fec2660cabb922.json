{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _dec, _class;\n\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../types';\nvar PopupService = (_dec = injectable(), _dec(_class = function () {\n  function PopupService() {\n    _classCallCheck(this, PopupService);\n\n    _defineProperty(this, \"scene\", void 0);\n\n    _defineProperty(this, \"popup\", void 0);\n\n    _defineProperty(this, \"mapsService\", void 0);\n\n    _defineProperty(this, \"unAddPopup\", void 0);\n  }\n\n  _createClass(PopupService, [{\n    key: \"removePopup\",\n    value: function removePopup(popup) {\n      popup.remove();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.popup.remove();\n    }\n  }, {\n    key: \"addPopup\",\n    value: function addPopup(popup) {\n      if (this.popup) {\n        this.popup.remove();\n      }\n\n      if (this.mapsService.map && this.mapsService.getMarkerContainer()) {\n        popup.addTo(this.scene);\n        this.popup = popup;\n      } else {\n        this.unAddPopup = popup;\n      }\n    }\n  }, {\n    key: \"initPopup\",\n    value: function initPopup() {\n      if (this.unAddPopup) {\n        this.addPopup(this.unAddPopup);\n        this.unAddPopup = null;\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init(scene) {\n      this.scene = scene;\n      this.mapsService = scene.get(TYPES.IMapService);\n    }\n  }]);\n\n  return PopupService;\n}()) || _class);\nexport { PopupService as default };","map":{"version":3,"sources":["../../../src/services/component/PopupService.ts"],"names":["injectable","PopupService","popup","scene","TYPES"],"mappings":";;;;;;AAAA,SAAA,UAAA,QAAA,WAAA;AACA,OAAA,kBAAA;AACA,SAAA,KAAA,QAAA,aAAA;IAKqBC,Y,WADpBD,UAAU,E;;;;;;;;;;;;;;;WAOT,SAAA,WAAA,CAAA,KAAA,EAAwC;AACtCE,MAAAA,KAAK,CAALA,MAAAA;AACD;;;WAED,SAAA,OAAA,GAAuB;AACrB,WAAA,KAAA,CAAA,MAAA;AACD;;;WAED,SAAA,QAAA,CAAA,KAAA,EAA+B;AAC7B,UAAI,KAAJ,KAAA,EAAgB;AACd,aAAA,KAAA,CAAA,MAAA;AACD;;AACD,UAAI,KAAA,WAAA,CAAA,GAAA,IAAwB,KAAA,WAAA,CAA5B,kBAA4B,EAA5B,EAAmE;AACjEA,QAAAA,KAAK,CAALA,KAAAA,CAAY,KAAZA,KAAAA;AACA,aAAA,KAAA,GAAA,KAAA;AAFF,OAAA,MAGO;AACL,aAAA,UAAA,GAAA,KAAA;AACD;AACF;;;WACD,SAAA,SAAA,GAAmB;AACjB,UAAI,KAAJ,UAAA,EAAqB;AACnB,aAAA,QAAA,CAAc,KAAd,UAAA;AACA,aAAA,UAAA,GAAA,IAAA;AACD;AACF;;;WAED,SAAA,IAAA,CAAA,KAAA,EAA8B;AAC5B,WAAA,KAAA,GAAA,KAAA;AACA,WAAA,WAAA,GAAmBC,KAAK,CAALA,GAAAA,CAAuBC,KAAK,CAA/C,WAAmBD,CAAnB;AACD;;;;;SAnCkBF,Y","sourcesContent":["import { Container, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../types';\nimport { IMapService } from '../map/IMapService';\nimport { IPopup, IPopupService } from './IPopupService';\n\n@injectable()\nexport default class PopupService implements IPopupService {\n  private scene: Container;\n  private popup: IPopup;\n  private mapsService: IMapService;\n  private unAddPopup: IPopup | null;\n\n  public removePopup(popup: IPopup): void {\n    popup.remove();\n  }\n\n  public destroy(): void {\n    this.popup.remove();\n  }\n\n  public addPopup(popup: IPopup) {\n    if (this.popup) {\n      this.popup.remove();\n    }\n    if (this.mapsService.map && this.mapsService.getMarkerContainer()) {\n      popup.addTo(this.scene);\n      this.popup = popup;\n    } else {\n      this.unAddPopup = popup;\n    }\n  }\n  public initPopup() {\n    if (this.unAddPopup) {\n      this.addPopup(this.unAddPopup);\n      this.unAddPopup = null;\n    }\n  }\n\n  public init(scene: Container) {\n    this.scene = scene;\n    this.mapsService = scene.get<IMapService>(TYPES.IMapService);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}