{"ast":null,"code":"import { $window } from '@antv/l7-utils';\nvar lastFrameTime = null;\nvar frameTimes = [];\nvar minFramerateTarget = 30;\nvar frameTimeTarget = 1000 / minFramerateTarget;\nvar performance = $window.performance;\nexport var PerformanceMarkers = {\n  create: 'create',\n  load: 'load',\n  fullLoad: 'fullLoad'\n};\nexport var PerformanceUtils = {\n  mark: function mark(marker) {\n    performance.mark(marker);\n  },\n  frame: function frame(timestamp) {\n    var currTimestamp = timestamp;\n\n    if (lastFrameTime != null) {\n      var frameTime = currTimestamp - lastFrameTime;\n      frameTimes.push(frameTime);\n    }\n\n    lastFrameTime = currTimestamp;\n  },\n  clearMetrics: function clearMetrics() {\n    lastFrameTime = null;\n    frameTimes = [];\n    performance.clearMeasures('loadTime');\n    performance.clearMeasures('fullLoadTime');\n\n    for (var marker in PerformanceMarkers) {\n      performance.clearMarks(PerformanceMarkers[marker]);\n    }\n  },\n  getPerformanceMetrics: function getPerformanceMetrics() {\n    var loadTime = performance.measure('loadTime', PerformanceMarkers.create, PerformanceMarkers.load).duration;\n    var fullLoadTime = performance.measure('fullLoadTime', PerformanceMarkers.create, PerformanceMarkers.fullLoad).duration;\n    var totalFrames = frameTimes.length;\n    var avgFrameTime = frameTimes.reduce(function (prev, curr) {\n      return prev + curr;\n    }, 0) / totalFrames / 1000;\n    var fps = 1 / avgFrameTime;\n    var droppedFrames = frameTimes.filter(function (frameTime) {\n      return frameTime > frameTimeTarget;\n    }).reduce(function (acc, curr) {\n      return acc + (curr - frameTimeTarget) / frameTimeTarget;\n    }, 0);\n    var percentDroppedFrames = droppedFrames / (totalFrames + droppedFrames) * 100;\n    return {\n      loadTime: loadTime,\n      fullLoadTime: fullLoadTime,\n      fps: fps,\n      percentDroppedFrames: percentDroppedFrames\n    };\n  }\n};","map":{"version":3,"sources":["../../src/utils/performance.ts"],"names":["lastFrameTime","frameTimes","minFramerateTarget","frameTimeTarget","performance","$window","PerformanceMarkers","create","load","fullLoad","PerformanceUtils","mark","frame","currTimestamp","frameTime","clearMetrics","getPerformanceMetrics","loadTime","fullLoadTime","totalFrames","avgFrameTime","prev","fps","droppedFrames","acc","curr","percentDroppedFrames"],"mappings":"AAAA,SAAA,OAAA,QAAA,gBAAA;AACA,IAAIA,aAA4B,GAAhC,IAAA;AACA,IAAIC,UAAoB,GAAxB,EAAA;AAEA,IAAMC,kBAAkB,GAAxB,EAAA;AACA,IAAMC,eAAe,GAAG,OAAxB,kBAAA;AACA,IAAMC,WAAW,GAAGC,OAAO,CAA3B,WAAA;AASA,OAAO,IAAMC,kBAAkB,GAAG;AAChCC,EAAAA,MAAM,EAD0B,QAAA;AAEhCC,EAAAA,IAAI,EAF4B,MAAA;AAGhCC,EAAAA,QAAQ,EAAE;AAHsB,CAA3B;AAMP,OAAO,IAAMC,gBAAgB,GAAG;AAC9BC,EAAAA,IAD8B,EAAA,SAAA,IAAA,CAAA,MAAA,EACT;AACnBP,IAAAA,WAAW,CAAXA,IAAAA,CAAAA,MAAAA;AAF4B,GAAA;AAI9BQ,EAAAA,KAJ8B,EAAA,SAAA,KAAA,CAAA,SAAA,EAIL;AACvB,QAAMC,aAAa,GAAnB,SAAA;;AACA,QAAIb,aAAa,IAAjB,IAAA,EAA2B;AACzB,UAAMc,SAAS,GAAGD,aAAa,GAA/B,aAAA;AACAZ,MAAAA,UAAU,CAAVA,IAAAA,CAAAA,SAAAA;AACD;;AACDD,IAAAA,aAAa,GAAbA,aAAAA;AAV4B,GAAA;AAY9Be,EAAAA,YAZ8B,EAAA,SAAA,YAAA,GAYf;AACbf,IAAAA,aAAa,GAAbA,IAAAA;AACAC,IAAAA,UAAU,GAAVA,EAAAA;AACAG,IAAAA,WAAW,CAAXA,aAAAA,CAAAA,UAAAA;AACAA,IAAAA,WAAW,CAAXA,aAAAA,CAAAA,cAAAA;;AAGA,SAAK,IAAL,MAAA,IAAA,kBAAA,EAAyC;AAEvCA,MAAAA,WAAW,CAAXA,UAAAA,CAAuBE,kBAAkB,CAAzCF,MAAyC,CAAzCA;AACD;AAtB2B,GAAA;AAwB9BY,EAAAA,qBAxB8B,EAAA,SAAA,qBAAA,GAwBe;AAC3C,QAAMC,QAAQ,GAAGb,WAAW,CAAXA,OAAAA,CAAAA,UAAAA,EAEfE,kBAAkB,CAFHF,MAAAA,EAGfE,kBAAkB,CAHHF,IAAAA,EAAjB,QAAA;AAOA,QAAMc,YAAY,GAAGd,WAAW,CAAXA,OAAAA,CAAAA,cAAAA,EAEnBE,kBAAkB,CAFCF,MAAAA,EAGnBE,kBAAkB,CAHCF,QAAAA,EAArB,QAAA;AAMA,QAAMe,WAAW,GAAGlB,UAAU,CAA9B,MAAA;AAEA,QAAMmB,YAAY,GAChB,UAAU,CAAV,MAAA,CAAkB,UAAA,IAAA,EAAA,IAAA,EAAA;AAAA,aAAgBC,IAAI,GAApB,IAAA;AAAlB,KAAA,EAAA,CAAA,IAAA,WAAA,GADF,IAAA;AAEA,QAAMC,GAAG,GAAG,IAAZ,YAAA;AAGA,QAAMC,aAAa,GAAG,UAAU,CAAV,MAAA,CACZ,UAAA,SAAA,EAAA;AAAA,aAAeT,SAAS,GAAxB,eAAA;AADY,KAAA,EAAA,MAAA,CAEZ,UAAA,GAAA,EAAA,IAAA,EAAe;AACrB,aAAOU,GAAG,GAAG,CAACC,IAAI,GAAL,eAAA,IAAb,eAAA;AAHkB,KAAA,EAAtB,CAAsB,CAAtB;AAKA,QAAMC,oBAAoB,GACvBH,aAAa,IAAIJ,WAAW,GAA7B,aAAc,CAAbI,GADH,GAAA;AAGA,WAAO;AACLN,MAAAA,QAAQ,EADH,QAAA;AAELC,MAAAA,YAAY,EAFP,YAAA;AAGLI,MAAAA,GAAG,EAHE,GAAA;AAILI,MAAAA,oBAAoB,EAApBA;AAJK,KAAP;AAMD;AA3D6B,CAAzB","sourcesContent":["import { $window } from '@antv/l7-utils';\nlet lastFrameTime: number | null = null;\nlet frameTimes: number[] = [];\n\nconst minFramerateTarget = 30;\nconst frameTimeTarget = 1000 / minFramerateTarget;\nconst performance = $window.performance;\n\nexport interface IPerformanceMetrics {\n  loadTime: number;\n  fullLoadTime: number;\n  fps: number;\n  percentDroppedFrames: number;\n}\n\nexport const PerformanceMarkers = {\n  create: 'create',\n  load: 'load',\n  fullLoad: 'fullLoad',\n};\n\nexport const PerformanceUtils = {\n  mark(marker: string) {\n    performance.mark(marker);\n  },\n  frame(timestamp: number) {\n    const currTimestamp = timestamp;\n    if (lastFrameTime != null) {\n      const frameTime = currTimestamp - lastFrameTime;\n      frameTimes.push(frameTime);\n    }\n    lastFrameTime = currTimestamp;\n  },\n  clearMetrics() {\n    lastFrameTime = null;\n    frameTimes = [];\n    performance.clearMeasures('loadTime');\n    performance.clearMeasures('fullLoadTime');\n    // @ts-ignore\n    // tslint:disable-next-line:forin\n    for (const marker in PerformanceMarkers) {\n      // @ts-ignore\n      performance.clearMarks(PerformanceMarkers[marker]);\n    }\n  },\n  getPerformanceMetrics(): IPerformanceMetrics {\n    const loadTime = performance.measure(\n      'loadTime',\n      PerformanceMarkers.create,\n      PerformanceMarkers.load,\n      // @ts-ignore\n    ).duration;\n\n    const fullLoadTime = performance.measure(\n      'fullLoadTime',\n      PerformanceMarkers.create,\n      PerformanceMarkers.fullLoad,\n      // @ts-ignore\n    ).duration;\n    const totalFrames = frameTimes.length;\n\n    const avgFrameTime =\n      frameTimes.reduce((prev, curr) => prev + curr, 0) / totalFrames / 1000;\n    const fps = 1 / avgFrameTime;\n\n    // count frames that missed our framerate target\n    const droppedFrames = frameTimes\n      .filter((frameTime) => frameTime > frameTimeTarget)\n      .reduce((acc, curr) => {\n        return acc + (curr - frameTimeTarget) / frameTimeTarget;\n      }, 0);\n    const percentDroppedFrames =\n      (droppedFrames / (totalFrames + droppedFrames)) * 100;\n\n    return {\n      loadTime,\n      fullLoadTime,\n      fps,\n      percentDroppedFrames,\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}