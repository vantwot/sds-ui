{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _merge from \"lodash/merge\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { $window, isMini } from '@antv/l7-utils';\nimport Point from '../geo/point';\nimport DOM from '../utils/dom';\nimport BlockableMapEventHandler from './blockable_map_event';\nimport BoxZoomHandler from './box_zoom';\nimport ClickZoomHandler from './click_zoom';\nimport { Event } from './events/event';\nimport RenderFrameEvent from './events/render_event';\nimport HandlerInertia from './handler_inertia';\nimport KeyboardHandler from './keyboard';\nimport MapEventHandler from './map_event';\nimport { MousePanHandler, MousePitchHandler, MouseRotateHandler } from './mouse';\nimport ScrollZoomHandler from './scroll_zoom';\nimport DoubleClickZoomHandler from './shim/dblclick_zoom';\nimport DragPanHandler from './shim/drag_pan';\nimport DragRotateHandler from './shim/drag_rotate';\nimport TouchZoomRotateHandler from './shim/touch_zoom_rotate';\nimport TapDragZoomHandler from './tap/tap_drag_zoom';\nimport TapZoomHandler from './tap/tap_zoom';\nimport { TouchPanHandler, TouchPitchHandler, TouchRotateHandler, TouchZoomHandler } from './touch';\n\nvar _isMoving = function isMoving(p) {\n  return p.zoom || p.drag || p.pitch || p.rotate;\n};\n\nfunction hasChange(result) {\n  return result.panDelta && result.panDelta.mag() || result.zoomDelta || result.bearingDelta || result.pitchDelta;\n}\n\nvar HandlerManager = function () {\n  function HandlerManager(map, options) {\n    var _this = this;\n\n    _classCallCheck(this, HandlerManager);\n\n    _defineProperty(this, \"map\", void 0);\n\n    _defineProperty(this, \"el\", void 0);\n\n    _defineProperty(this, \"handlers\", void 0);\n\n    _defineProperty(this, \"eventsInProgress\", void 0);\n\n    _defineProperty(this, \"frameId\", void 0);\n\n    _defineProperty(this, \"inertia\", void 0);\n\n    _defineProperty(this, \"bearingSnap\", void 0);\n\n    _defineProperty(this, \"handlersById\", void 0);\n\n    _defineProperty(this, \"updatingCamera\", void 0);\n\n    _defineProperty(this, \"changes\", void 0);\n\n    _defineProperty(this, \"previousActiveHandlers\", void 0);\n\n    _defineProperty(this, \"bearingChanged\", void 0);\n\n    _defineProperty(this, \"listeners\", void 0);\n\n    _defineProperty(this, \"handleWindowEvent\", function (e) {\n      _this.handleEvent(e, \"\".concat(e.type, \"Window\"));\n    });\n\n    _defineProperty(this, \"handleEvent\", function (e, eventName) {\n      if (e.type === 'blur') {\n        _this.stop();\n\n        return;\n      }\n\n      _this.updatingCamera = true;\n      var inputEvent = e.type === 'renderFrame' ? undefined : e;\n      var mergedIHandlerResult = {\n        needsRenderFrame: false\n      };\n      var eventsInProgress = {};\n      var activeHandlers = {};\n      var mapTouches = e.touches ? _this.getMapTouches(e.touches) : undefined;\n      var points = mapTouches ? DOM.touchPos(_this.el, mapTouches) : DOM.mousePos(_this.el, e);\n\n      var _iterator = _createForOfIteratorHelper(_this.handlers),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _step.value,\n              handlerName = _step$value.handlerName,\n              handler = _step$value.handler,\n              allowed = _step$value.allowed;\n\n          if (!handler.isEnabled()) {\n            continue;\n          }\n\n          var data = void 0;\n\n          if (_this.blockedByActive(activeHandlers, allowed, handlerName)) {\n            handler.reset();\n          } else {\n            var handerName = eventName || e.type;\n\n            if (handler && handler[handerName]) {\n              data = handler[handerName](e, points, mapTouches);\n\n              _this.mergeIHandlerResult(mergedIHandlerResult, eventsInProgress, data, handlerName, inputEvent);\n\n              if (data && data.needsRenderFrame) {\n                _this.triggerRenderFrame();\n              }\n            }\n          }\n\n          if (data || handler.isActive()) {\n            activeHandlers[handlerName] = handler;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var deactivatedHandlers = {};\n\n      for (var name in _this.previousActiveHandlers) {\n        if (!activeHandlers[name]) {\n          deactivatedHandlers[name] = inputEvent;\n        }\n      }\n\n      _this.previousActiveHandlers = activeHandlers;\n\n      if (Object.keys(deactivatedHandlers).length || hasChange(mergedIHandlerResult)) {\n        _this.changes.push([mergedIHandlerResult, eventsInProgress, deactivatedHandlers]);\n\n        _this.triggerRenderFrame();\n      }\n\n      if (Object.keys(activeHandlers).length || hasChange(mergedIHandlerResult)) {\n        _this.map.stop(true);\n      }\n\n      _this.updatingCamera = false;\n      var cameraAnimation = mergedIHandlerResult.cameraAnimation;\n\n      if (cameraAnimation) {\n        _this.inertia.clear();\n\n        _this.fireEvents({}, {});\n\n        _this.changes = [];\n        cameraAnimation(_this.map);\n      }\n    });\n\n    this.map = map;\n    this.el = this.map.getCanvasContainer();\n    this.handlers = [];\n    this.handlersById = {};\n    this.changes = [];\n    this.inertia = new HandlerInertia(map);\n    this.bearingSnap = options.bearingSnap;\n    this.previousActiveHandlers = {};\n    this.eventsInProgress = {};\n    this.addDefaultHandlers(options);\n    var el = this.el;\n    this.listeners = [];\n\n    if (!isMini) {\n      this.listeners = [[el, 'touchstart', {\n        passive: false\n      }], [el, 'touchmove', {\n        passive: false\n      }], [el, 'touchend', undefined], [el, 'touchcancel', undefined], [el, 'mousedown', undefined], [el, 'mousemove', undefined], [el, 'mouseup', undefined], [window.document, 'mousemove', {\n        capture: true\n      }], [window.document, 'mouseup', undefined], [el, 'mouseover', undefined], [el, 'mouseout', undefined], [el, 'dblclick', undefined], [el, 'click', undefined], [el, 'keydown', {\n        capture: false\n      }], [el, 'keyup', undefined], [el, 'wheel', {\n        passive: false\n      }], [el, 'contextmenu', undefined], [window, 'blur', undefined]];\n\n      var _iterator2 = _createForOfIteratorHelper(this.listeners),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 3),\n              target = _step2$value[0],\n              type = _step2$value[1],\n              listenerOptions = _step2$value[2];\n\n          DOM.addEventListener(target, type, target === window.document ? this.handleWindowEvent : this.handleEvent, listenerOptions);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    } else {\n      $window.document.addEventListener('touchstart', function (e) {\n        _this.handleEvent(e);\n      }, {});\n      $window.document.addEventListener('touchmove', function (e) {\n        _this.handleEvent(e);\n      }, {});\n      $window.document.addEventListener('touchend', function (e) {\n        _this.handleEvent(e);\n      }, {});\n      $window.document.addEventListener('touchcancel', function (e) {\n        _this.handleEvent(e);\n      }, {});\n    }\n  }\n\n  _createClass(HandlerManager, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var _iterator3 = _createForOfIteratorHelper(this.listeners),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _step3$value = _slicedToArray(_step3.value, 3),\n              target = _step3$value[0],\n              type = _step3$value[1],\n              listenerOptions = _step3$value[2];\n\n          DOM.removeEventListener(target, type, target === window.document ? this.handleWindowEvent : this.handleEvent, listenerOptions);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.updatingCamera) {\n        return;\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(this.handlers),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var handler = _step4.value.handler;\n          handler.reset();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      this.inertia.clear();\n      this.fireEvents({}, {});\n      this.changes = [];\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      var _iterator5 = _createForOfIteratorHelper(this.handlers),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var handler = _step5.value.handler;\n\n          if (handler.isActive()) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isZooming\",\n    value: function isZooming() {\n      return !!this.eventsInProgress.zoom || this.map.scrollZoom.isZooming();\n    }\n  }, {\n    key: \"isRotating\",\n    value: function isRotating() {\n      return !!this.eventsInProgress.rotate;\n    }\n  }, {\n    key: \"isMoving\",\n    value: function isMoving() {\n      return Boolean(_isMoving(this.eventsInProgress)) || this.isZooming();\n    }\n  }, {\n    key: \"mergeIHandlerResult\",\n    value: function mergeIHandlerResult(mergedIHandlerResult, eventsInProgress, HandlerResult, name, e) {\n      if (!HandlerResult) {\n        return;\n      }\n\n      _merge(mergedIHandlerResult, HandlerResult);\n\n      var eventData = {\n        handlerName: name,\n        originalEvent: HandlerResult.originalEvent || e\n      };\n\n      if (HandlerResult.zoomDelta !== undefined) {\n        eventsInProgress.zoom = eventData;\n      }\n\n      if (HandlerResult.panDelta !== undefined) {\n        eventsInProgress.drag = eventData;\n      }\n\n      if (HandlerResult.pitchDelta !== undefined) {\n        eventsInProgress.pitch = eventData;\n      }\n\n      if (HandlerResult.bearingDelta !== undefined) {\n        eventsInProgress.rotate = eventData;\n      }\n    }\n  }, {\n    key: \"triggerRenderFrame\",\n    value: function triggerRenderFrame() {\n      var _this2 = this;\n\n      if (this.frameId === undefined) {\n        this.frameId = this.map.requestRenderFrame(function (timeStamp) {\n          delete _this2.frameId;\n\n          _this2.handleEvent(new RenderFrameEvent('renderFrame', {\n            timeStamp: timeStamp\n          }));\n\n          _this2.applyChanges();\n        });\n      }\n    }\n  }, {\n    key: \"addDefaultHandlers\",\n    value: function addDefaultHandlers(options) {\n      var map = this.map;\n      var el = map.getCanvasContainer();\n      this.add('mapEvent', new MapEventHandler(map, options));\n      var boxZoom = map.boxZoom = new BoxZoomHandler(map, options);\n      this.add('boxZoom', boxZoom);\n      var tapZoom = new TapZoomHandler();\n      var clickZoom = new ClickZoomHandler();\n      map.doubleClickZoom = new DoubleClickZoomHandler(clickZoom, tapZoom);\n      this.add('tapZoom', tapZoom);\n      this.add('clickZoom', clickZoom);\n      var tapDragZoom = new TapDragZoomHandler();\n      this.add('tapDragZoom', tapDragZoom);\n      var touchPitch = map.touchPitch = new TouchPitchHandler();\n      this.add('touchPitch', touchPitch);\n      var mouseRotate = new MouseRotateHandler(options);\n      var mousePitch = new MousePitchHandler(options);\n      map.dragRotate = new DragRotateHandler(options, mouseRotate, mousePitch);\n      this.add('mouseRotate', mouseRotate, ['mousePitch']);\n      this.add('mousePitch', mousePitch, ['mouseRotate']);\n      var mousePan = new MousePanHandler(options);\n      var touchPan = new TouchPanHandler(options);\n      map.dragPan = new DragPanHandler(el, mousePan, touchPan);\n      this.add('mousePan', mousePan);\n      this.add('touchPan', touchPan, ['touchZoom', 'touchRotate']);\n      var touchRotate = new TouchRotateHandler();\n      var touchZoom = new TouchZoomHandler();\n      map.touchZoomRotate = new TouchZoomRotateHandler(el, touchZoom, touchRotate, tapDragZoom);\n      this.add('touchRotate', touchRotate, ['touchPan', 'touchZoom']);\n      this.add('touchZoom', touchZoom, ['touchPan', 'touchRotate']);\n      var scrollZoom = map.scrollZoom = new ScrollZoomHandler(map, this);\n      this.add('scrollZoom', scrollZoom, ['mousePan']);\n      var keyboard = map.keyboard = new KeyboardHandler();\n      this.add('keyboard', keyboard);\n      this.add('blockableMapEvent', new BlockableMapEventHandler(map));\n\n      for (var _i = 0, _arr = ['boxZoom', 'doubleClickZoom', 'tapDragZoom', 'touchPitch', 'dragRotate', 'dragPan', 'touchZoomRotate', 'scrollZoom', 'keyboard']; _i < _arr.length; _i++) {\n        var name = _arr[_i];\n\n        if (options.interactive && options[name]) {\n          map[name].enable(options[name]);\n        }\n      }\n    }\n  }, {\n    key: \"add\",\n    value: function add(handlerName, handler, allowed) {\n      this.handlers.push({\n        handlerName: handlerName,\n        handler: handler,\n        allowed: allowed\n      });\n      this.handlersById[handlerName] = handler;\n    }\n  }, {\n    key: \"blockedByActive\",\n    value: function blockedByActive(activeHandlers, allowed, myName) {\n      for (var name in activeHandlers) {\n        if (name === myName) {\n          continue;\n        }\n\n        if (!allowed || allowed.indexOf(name) < 0) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getMapTouches\",\n    value: function getMapTouches(touches) {\n      var mapTouches = [];\n\n      var _iterator6 = _createForOfIteratorHelper(touches),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var t = _step6.value;\n          var target = t.target;\n\n          if (isMini || this.el.contains(target)) {\n            mapTouches.push(t);\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return mapTouches;\n    }\n  }, {\n    key: \"applyChanges\",\n    value: function applyChanges() {\n      var combined = {};\n      var combinedEventsInProgress = {};\n      var combinedDeactivatedHandlers = {};\n\n      var _iterator7 = _createForOfIteratorHelper(this.changes),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _step7$value = _slicedToArray(_step7.value, 3),\n              change = _step7$value[0],\n              eventsInProgress = _step7$value[1],\n              deactivatedHandlers = _step7$value[2];\n\n          if (change.panDelta) {\n            combined.panDelta = (combined.panDelta || new Point(0, 0))._add(change.panDelta);\n          }\n\n          if (change.zoomDelta) {\n            combined.zoomDelta = (combined.zoomDelta || 0) + change.zoomDelta;\n          }\n\n          if (change.bearingDelta) {\n            combined.bearingDelta = (combined.bearingDelta || 0) + change.bearingDelta;\n          }\n\n          if (change.pitchDelta) {\n            combined.pitchDelta = (combined.pitchDelta || 0) + change.pitchDelta;\n          }\n\n          if (change.around !== undefined) {\n            combined.around = change.around;\n          }\n\n          if (change.pinchAround !== undefined) {\n            combined.pinchAround = change.pinchAround;\n          }\n\n          if (change.noInertia) {\n            combined.noInertia = change.noInertia;\n          }\n\n          _merge(combinedEventsInProgress, eventsInProgress);\n\n          _merge(combinedDeactivatedHandlers, deactivatedHandlers);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      this.updateMapTransform(combined, combinedEventsInProgress, combinedDeactivatedHandlers);\n      this.changes = [];\n    }\n  }, {\n    key: \"updateMapTransform\",\n    value: function updateMapTransform(combinedResult, combinedEventsInProgress, deactivatedHandlers) {\n      var map = this.map;\n      var tr = map.transform;\n\n      if (!hasChange(combinedResult)) {\n        return this.fireEvents(combinedEventsInProgress, deactivatedHandlers);\n      }\n\n      var panDelta = combinedResult.panDelta,\n          zoomDelta = combinedResult.zoomDelta,\n          bearingDelta = combinedResult.bearingDelta,\n          pitchDelta = combinedResult.pitchDelta,\n          pinchAround = combinedResult.pinchAround;\n      var around = combinedResult.around;\n\n      if (pinchAround !== undefined) {\n        around = pinchAround;\n      }\n\n      map.stop(true);\n      around = around || map.transform.centerPoint;\n      var loc = tr.pointLocation(panDelta ? around.sub(panDelta) : around);\n\n      if (bearingDelta) {\n        tr.bearing += bearingDelta;\n      }\n\n      if (pitchDelta) {\n        tr.pitch += pitchDelta;\n      }\n\n      if (zoomDelta) {\n        tr.zoom += zoomDelta;\n      }\n\n      tr.setLocationAtPoint(loc, around);\n      this.map.update();\n\n      if (!combinedResult.noInertia) {\n        this.inertia.record(combinedResult);\n      }\n\n      this.fireEvents(combinedEventsInProgress, deactivatedHandlers);\n    }\n  }, {\n    key: \"fireEvents\",\n    value: function fireEvents(newEventsInProgress, deactivatedHandlers) {\n      var _this3 = this;\n\n      var wasMoving = _isMoving(this.eventsInProgress);\n\n      var nowMoving = _isMoving(newEventsInProgress);\n\n      var startEvents = {};\n\n      for (var eventName in newEventsInProgress) {\n        if (newEventsInProgress[eventName]) {\n          var originalEvent = newEventsInProgress[eventName].originalEvent;\n\n          if (!this.eventsInProgress[eventName]) {\n            startEvents[\"\".concat(eventName, \"start\")] = originalEvent;\n          }\n\n          this.eventsInProgress[eventName] = newEventsInProgress[eventName];\n        }\n      }\n\n      if (!wasMoving && nowMoving) {\n        this.fireEvent('movestart', nowMoving.originalEvent);\n      }\n\n      for (var name in startEvents) {\n        if (startEvents[name]) {\n          this.fireEvent(name, startEvents[name]);\n        }\n      }\n\n      if (newEventsInProgress.rotate) {\n        this.bearingChanged = true;\n      }\n\n      if (nowMoving) {\n        this.fireEvent('move', nowMoving.originalEvent);\n      }\n\n      for (var _eventName in newEventsInProgress) {\n        if (newEventsInProgress[_eventName]) {\n          var _originalEvent = newEventsInProgress[_eventName].originalEvent;\n          this.fireEvent(_eventName, _originalEvent);\n        }\n      }\n\n      var endEvents = {};\n      var originalEndEvent;\n\n      for (var _eventName2 in this.eventsInProgress) {\n        if (this.eventsInProgress[_eventName2]) {\n          var _this$eventsInProgres = this.eventsInProgress[_eventName2],\n              handlerName = _this$eventsInProgres.handlerName,\n              _originalEvent2 = _this$eventsInProgres.originalEvent;\n\n          if (!this.handlersById[handlerName].isActive()) {\n            delete this.eventsInProgress[_eventName2];\n            originalEndEvent = deactivatedHandlers[handlerName] || _originalEvent2;\n            endEvents[\"\".concat(_eventName2, \"end\")] = originalEndEvent;\n          }\n        }\n      }\n\n      for (var _name in endEvents) {\n        if (endEvents[_name]) {\n          this.fireEvent(_name, endEvents[_name]);\n        }\n      }\n\n      var stillMoving = _isMoving(this.eventsInProgress);\n\n      if ((wasMoving || nowMoving) && !stillMoving) {\n        this.updatingCamera = true;\n        var inertialEase = this.inertia.onMoveEnd(this.map.dragPan.inertiaOptions);\n\n        var shouldSnapToNorth = function shouldSnapToNorth(bearing) {\n          return bearing !== 0 && -_this3.bearingSnap < bearing && bearing < _this3.bearingSnap;\n        };\n\n        if (inertialEase) {\n          if (shouldSnapToNorth(inertialEase.bearing || this.map.getBearing())) {\n            inertialEase.bearing = 0;\n          }\n\n          this.map.easeTo(inertialEase, {\n            originalEvent: originalEndEvent\n          });\n        } else {\n          this.map.emit('moveend', new Event('moveend', {\n            originalEvent: originalEndEvent\n          }));\n\n          if (shouldSnapToNorth(this.map.getBearing())) {\n            this.map.resetNorth();\n          }\n        }\n\n        this.bearingChanged = false;\n        this.updatingCamera = false;\n      }\n    }\n  }, {\n    key: \"fireEvent\",\n    value: function fireEvent(type, e) {\n      this.map.emit(type, new Event(type, e ? {\n        originalEvent: e\n      } : {}));\n    }\n  }]);\n\n  return HandlerManager;\n}();\n\nexport default HandlerManager;","map":{"version":3,"sources":["../../src/handler/handler_manager.ts"],"names":["isMoving","p","result","HandlerManager","options","el","passive","window","capture","target","type","listenerOptions","DOM","$window","handler","Boolean","e","inputEvent","mergedIHandlerResult","needsRenderFrame","eventsInProgress","activeHandlers","mapTouches","points","handlerName","allowed","data","handerName","eventName","deactivatedHandlers","Object","hasChange","cameraAnimation","eventData","originalEvent","HandlerResult","timeStamp","map","boxZoom","tapZoom","clickZoom","tapDragZoom","touchPitch","mouseRotate","mousePitch","mousePan","touchPan","touchRotate","touchZoom","scrollZoom","keyboard","name","t","isMini","combined","combinedEventsInProgress","combinedDeactivatedHandlers","change","tr","panDelta","zoomDelta","bearingDelta","pitchDelta","pinchAround","combinedResult","around","loc","wasMoving","nowMoving","startEvents","newEventsInProgress","endEvents","originalEndEvent","stillMoving","inertialEase","shouldSnapToNorth","bearing"],"mappings":"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","sourcesContent":["// @ts-ignore\n// tslint:disable-next-line: no-submodule-imports\nimport { $window, isMini } from '@antv/l7-utils';\nimport { merge } from 'lodash';\nimport { EarthMap } from '../earthmap';\nimport Point from '../geo/point';\nimport { Map } from '../map';\nimport DOM from '../utils/dom';\nimport BlockableMapEventHandler from './blockable_map_event';\nimport BoxZoomHandler from './box_zoom';\nimport ClickZoomHandler from './click_zoom';\nimport { Event } from './events/event';\nimport RenderFrameEvent from './events/render_event';\nimport HandlerInertia from './handler_inertia';\nimport { IHandler, IHandlerResult } from './IHandler';\nimport KeyboardHandler from './keyboard';\nimport MapEventHandler from './map_event';\nimport {\n  MousePanHandler,\n  MousePitchHandler,\n  MouseRotateHandler,\n} from './mouse';\nimport ScrollZoomHandler from './scroll_zoom';\nimport DoubleClickZoomHandler from './shim/dblclick_zoom';\nimport DragPanHandler from './shim/drag_pan';\nimport DragRotateHandler from './shim/drag_rotate';\nimport TouchZoomRotateHandler from './shim/touch_zoom_rotate';\nimport TapDragZoomHandler from './tap/tap_drag_zoom';\nimport TapZoomHandler from './tap/tap_zoom';\nimport {\n  TouchPanHandler,\n  TouchPitchHandler,\n  TouchRotateHandler,\n  TouchZoomHandler,\n} from './touch';\n\nexport type InputEvent = MouseEvent | TouchEvent | KeyboardEvent | WheelEvent;\n\nconst isMoving = (p: any) => p.zoom || p.drag || p.pitch || p.rotate;\n\nfunction hasChange(result: IHandlerResult) {\n  return (\n    (result.panDelta && result.panDelta.mag()) ||\n    result.zoomDelta ||\n    result.bearingDelta ||\n    result.pitchDelta\n  );\n}\n\nexport interface IHandlerOptions {\n  interactive: boolean;\n  boxZoom: boolean;\n  dragRotate: boolean;\n  dragPan: boolean;\n  keyboard: boolean;\n  doubleClickZoom: boolean;\n  touchZoomRotate: boolean;\n  touchPitch: boolean;\n  trackResize: boolean;\n  renderWorldCopies: boolean;\n  bearingSnap: number;\n  clickTolerance: number;\n  pitchWithRotate: boolean;\n}\n\nclass HandlerManager {\n  private map: Map | EarthMap;\n  private el: HTMLElement;\n  private handlers: Array<{\n    handlerName: string;\n    handler: IHandler;\n    allowed: any;\n  }>;\n  private eventsInProgress: any;\n  private frameId: number;\n  private inertia: HandlerInertia;\n  private bearingSnap: number;\n  private handlersById: { [key: string]: IHandler };\n  private updatingCamera: boolean;\n  private changes: Array<[IHandlerResult, any, any]>;\n  private previousActiveHandlers: { [key: string]: IHandler };\n  private bearingChanged: boolean;\n  private listeners: Array<\n    [HTMLElement, string, void | { passive?: boolean; capture?: boolean }]\n  >;\n\n  constructor(map: Map | EarthMap, options: IHandlerOptions) {\n    this.map = map;\n    this.el = this.map.getCanvasContainer();\n    this.handlers = [];\n    this.handlersById = {};\n    this.changes = [];\n\n    this.inertia = new HandlerInertia(map);\n    this.bearingSnap = options.bearingSnap;\n    this.previousActiveHandlers = {};\n\n    // Track whether map is currently moving, to compute start/move/end events\n    this.eventsInProgress = {};\n\n    this.addDefaultHandlers(options);\n\n    const el = this.el;\n    this.listeners = [];\n    if (!isMini) {\n      // l7 - mini\n      this.listeners = [\n        // Bind touchstart and touchmove with passive: false because, even though\n        // they only fire a map events and therefore could theoretically be\n        // passive, binding with passive: true causes iOS not to respect\n        // e.preventDefault() in _other_ handlers, even if they are non-passive\n        // (see https://bugs.webkit.org/show_bug.cgi?id=184251)\n        [el, 'touchstart', { passive: false }],\n        [el, 'touchmove', { passive: false }],\n        [el, 'touchend', undefined],\n        [el, 'touchcancel', undefined],\n\n        [el, 'mousedown', undefined],\n        [el, 'mousemove', undefined],\n        [el, 'mouseup', undefined],\n\n        // Bind window-level event listeners for move and up/end events. In the absence of\n        // the pointer capture API, which is not supported by all necessary platforms,\n        // window-level event listeners give us the best shot at capturing events that\n        // fall outside the map canvas element. Use `{capture: true}` for the move event\n        // to prevent map move events from being fired during a drag.\n        // @ts-ignore\n        [window.document, 'mousemove', { capture: true }],\n        // @ts-ignore\n        [window.document, 'mouseup', undefined],\n\n        [el, 'mouseover', undefined],\n        [el, 'mouseout', undefined],\n        [el, 'dblclick', undefined],\n        [el, 'click', undefined],\n\n        [el, 'keydown', { capture: false }],\n        [el, 'keyup', undefined],\n\n        [el, 'wheel', { passive: false }],\n        [el, 'contextmenu', undefined],\n        // @ts-ignore\n        [window, 'blur', undefined],\n      ];\n      for (const [target, type, listenerOptions] of this.listeners) {\n        // @ts-ignore\n        DOM.addEventListener(\n          target,\n          type,\n          // @ts-ignore\n          target === window.document\n            ? this.handleWindowEvent\n            : this.handleEvent,\n          listenerOptions,\n        );\n      }\n    } else {\n      $window.document.addEventListener(\n        'touchstart',\n        (e: any) => {\n          this.handleEvent(e);\n        },\n        {},\n      );\n      $window.document.addEventListener(\n        'touchmove',\n        (e: any) => {\n          this.handleEvent(e);\n        },\n        {},\n      );\n      $window.document.addEventListener(\n        'touchend',\n        (e: any) => {\n          this.handleEvent(e);\n        },\n        {},\n      );\n      $window.document.addEventListener(\n        'touchcancel',\n        (e: any) => {\n          this.handleEvent(e);\n        },\n        {},\n      );\n    }\n  }\n  public destroy() {\n    for (const [target, type, listenerOptions] of this.listeners) {\n      // @ts-ignore\n      DOM.removeEventListener(\n        target,\n        type,\n        // @ts-ignore\n        target === window.document ? this.handleWindowEvent : this.handleEvent,\n        listenerOptions,\n      );\n    }\n  }\n\n  public stop() {\n    // do nothing if this method was triggered by a gesture update\n    if (this.updatingCamera) {\n      return;\n    }\n\n    for (const { handler } of this.handlers) {\n      handler.reset();\n    }\n    this.inertia.clear();\n    this.fireEvents({}, {});\n    this.changes = [];\n  }\n\n  public isActive() {\n    for (const { handler } of this.handlers) {\n      if (handler.isActive()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public isZooming() {\n    return !!this.eventsInProgress.zoom || this.map.scrollZoom.isZooming();\n  }\n  public isRotating() {\n    return !!this.eventsInProgress.rotate;\n  }\n\n  public isMoving() {\n    return Boolean(isMoving(this.eventsInProgress)) || this.isZooming();\n  }\n\n  public handleWindowEvent = (e: InputEvent) => {\n    this.handleEvent(e, `${e.type}Window`);\n  };\n\n  public handleEvent = (\n    e: InputEvent | RenderFrameEvent,\n    eventName?: string,\n  ) => {\n    if (e.type === 'blur') {\n      this.stop();\n      return;\n    }\n    this.updatingCamera = true;\n    const inputEvent = e.type === 'renderFrame' ? undefined : (e as InputEvent);\n\n    /*\n     * We don't call e.preventDefault() for any events by default.\n     * Handlers are responsible for calling it where necessary.\n     */\n\n    const mergedIHandlerResult: IHandlerResult = { needsRenderFrame: false };\n    const eventsInProgress: { [key: string]: any } = {};\n    const activeHandlers: { [key: string]: any } = {};\n    // @ts-ignore\n    const mapTouches = e.touches\n      ? // @ts-ignore\n        this.getMapTouches(e.touches as Touch[])\n      : undefined;\n    const points = mapTouches\n      ? DOM.touchPos(this.el, mapTouches)\n      : DOM.mousePos(this.el, e as MouseEvent);\n\n    for (const { handlerName, handler, allowed } of this.handlers) {\n      if (!handler.isEnabled()) {\n        continue;\n      }\n      let data: IHandlerResult;\n      if (this.blockedByActive(activeHandlers, allowed, handlerName)) {\n        handler.reset();\n      } else {\n        const handerName = eventName || e.type;\n        // @ts-ignore\n        if (handler && handler[handerName]) {\n          // @ts-ignore\n          data = handler[handerName](e, points, mapTouches);\n          this.mergeIHandlerResult(\n            mergedIHandlerResult,\n            eventsInProgress,\n            data,\n            handlerName,\n            inputEvent,\n          );\n          if (data && data.needsRenderFrame) {\n            this.triggerRenderFrame();\n          }\n        }\n      }\n      // @ts-ignore\n      if (data || handler.isActive()) {\n        activeHandlers[handlerName] = handler;\n      }\n    }\n\n    const deactivatedHandlers: { [key: string]: any } = {};\n    for (const name in this.previousActiveHandlers) {\n      if (!activeHandlers[name]) {\n        deactivatedHandlers[name] = inputEvent;\n      }\n    }\n    this.previousActiveHandlers = activeHandlers;\n    if (\n      Object.keys(deactivatedHandlers).length ||\n      hasChange(mergedIHandlerResult)\n    ) {\n      this.changes.push([\n        mergedIHandlerResult,\n        eventsInProgress,\n        deactivatedHandlers,\n      ]);\n      this.triggerRenderFrame();\n    }\n\n    if (Object.keys(activeHandlers).length || hasChange(mergedIHandlerResult)) {\n      this.map.stop(true);\n    }\n\n    this.updatingCamera = false;\n\n    const { cameraAnimation } = mergedIHandlerResult;\n    if (cameraAnimation) {\n      this.inertia.clear();\n      this.fireEvents({}, {});\n      this.changes = [];\n      cameraAnimation(this.map);\n    }\n  };\n\n  public mergeIHandlerResult(\n    mergedIHandlerResult: IHandlerResult,\n    eventsInProgress: { [key: string]: any },\n    HandlerResult: IHandlerResult,\n    name: string,\n    e?: InputEvent,\n  ) {\n    if (!HandlerResult) {\n      return;\n    }\n\n    merge(mergedIHandlerResult, HandlerResult);\n\n    const eventData = {\n      handlerName: name,\n      originalEvent: HandlerResult.originalEvent || e,\n    };\n\n    // track which handler changed which camera property\n    if (HandlerResult.zoomDelta !== undefined) {\n      eventsInProgress.zoom = eventData;\n    }\n    if (HandlerResult.panDelta !== undefined) {\n      eventsInProgress.drag = eventData;\n    }\n    if (HandlerResult.pitchDelta !== undefined) {\n      eventsInProgress.pitch = eventData;\n    }\n    if (HandlerResult.bearingDelta !== undefined) {\n      eventsInProgress.rotate = eventData;\n    }\n  }\n\n  public triggerRenderFrame() {\n    if (this.frameId === undefined) {\n      this.frameId = this.map.requestRenderFrame((timeStamp: number) => {\n        // @ts-ignore\n        delete this.frameId;\n        this.handleEvent(new RenderFrameEvent('renderFrame', { timeStamp }));\n        this.applyChanges();\n      });\n    }\n  }\n\n  private addDefaultHandlers(options: IHandlerOptions) {\n    const map = this.map;\n    const el = map.getCanvasContainer();\n    this.add('mapEvent', new MapEventHandler(map, options));\n\n    const boxZoom = (map.boxZoom = new BoxZoomHandler(map, options));\n    this.add('boxZoom', boxZoom);\n\n    const tapZoom = new TapZoomHandler();\n    const clickZoom = new ClickZoomHandler();\n    map.doubleClickZoom = new DoubleClickZoomHandler(clickZoom, tapZoom);\n    this.add('tapZoom', tapZoom);\n    this.add('clickZoom', clickZoom);\n\n    const tapDragZoom = new TapDragZoomHandler();\n    this.add('tapDragZoom', tapDragZoom);\n\n    const touchPitch = (map.touchPitch = new TouchPitchHandler());\n    this.add('touchPitch', touchPitch);\n\n    const mouseRotate = new MouseRotateHandler(options);\n    const mousePitch = new MousePitchHandler(options);\n    map.dragRotate = new DragRotateHandler(options, mouseRotate, mousePitch);\n    this.add('mouseRotate', mouseRotate, ['mousePitch']);\n    this.add('mousePitch', mousePitch, ['mouseRotate']);\n\n    const mousePan = new MousePanHandler(options);\n    const touchPan = new TouchPanHandler(options);\n    map.dragPan = new DragPanHandler(el, mousePan, touchPan);\n    this.add('mousePan', mousePan);\n    this.add('touchPan', touchPan, ['touchZoom', 'touchRotate']);\n\n    const touchRotate = new TouchRotateHandler();\n    const touchZoom = new TouchZoomHandler();\n    map.touchZoomRotate = new TouchZoomRotateHandler(\n      el,\n      touchZoom,\n      touchRotate,\n      tapDragZoom,\n    );\n    this.add('touchRotate', touchRotate, ['touchPan', 'touchZoom']);\n    this.add('touchZoom', touchZoom, ['touchPan', 'touchRotate']);\n\n    const scrollZoom = (map.scrollZoom = new ScrollZoomHandler(map, this));\n    this.add('scrollZoom', scrollZoom, ['mousePan']);\n\n    const keyboard = (map.keyboard = new KeyboardHandler());\n    this.add('keyboard', keyboard);\n\n    this.add('blockableMapEvent', new BlockableMapEventHandler(map));\n\n    for (const name of [\n      'boxZoom',\n      'doubleClickZoom',\n      'tapDragZoom',\n      'touchPitch',\n      'dragRotate',\n      'dragPan',\n      'touchZoomRotate',\n      'scrollZoom',\n      'keyboard',\n    ]) {\n      // @ts-ignore\n      if (options.interactive && options[name]) {\n        // @ts-ignore\n        map[name].enable(options[name]);\n      }\n    }\n  }\n\n  private add(handlerName: string, handler: IHandler, allowed?: string[]) {\n    this.handlers.push({ handlerName, handler, allowed });\n    this.handlersById[handlerName] = handler;\n  }\n\n  private blockedByActive(\n    activeHandlers: { [key: string]: IHandler },\n    allowed: string[],\n    myName: string,\n  ) {\n    for (const name in activeHandlers) {\n      if (name === myName) {\n        continue;\n      }\n      if (!allowed || allowed.indexOf(name) < 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private getMapTouches(touches: Touch[]): Touch[] {\n    const mapTouches = [];\n    for (const t of touches) {\n      const target = t.target as Node;\n      if (isMini || this.el.contains(target)) {\n        mapTouches.push(t);\n      }\n    }\n    return mapTouches;\n  }\n\n  private applyChanges() {\n    const combined: { [key: string]: any } = {};\n    const combinedEventsInProgress = {};\n    const combinedDeactivatedHandlers = {};\n\n    for (const [change, eventsInProgress, deactivatedHandlers] of this\n      .changes) {\n      if (change.panDelta) {\n        combined.panDelta = (combined.panDelta || new Point(0, 0))._add(\n          change.panDelta,\n        );\n      }\n      if (change.zoomDelta) {\n        combined.zoomDelta = (combined.zoomDelta || 0) + change.zoomDelta;\n      }\n      if (change.bearingDelta) {\n        combined.bearingDelta =\n          (combined.bearingDelta || 0) + change.bearingDelta;\n      }\n      if (change.pitchDelta) {\n        combined.pitchDelta = (combined.pitchDelta || 0) + change.pitchDelta;\n      }\n      if (change.around !== undefined) {\n        combined.around = change.around;\n      }\n      if (change.pinchAround !== undefined) {\n        combined.pinchAround = change.pinchAround;\n      }\n      if (change.noInertia) {\n        combined.noInertia = change.noInertia;\n      }\n\n      merge(combinedEventsInProgress, eventsInProgress);\n      merge(combinedDeactivatedHandlers, deactivatedHandlers);\n    }\n\n    this.updateMapTransform(\n      combined,\n      combinedEventsInProgress,\n      combinedDeactivatedHandlers,\n    );\n    this.changes = [];\n  }\n\n  private updateMapTransform(\n    combinedResult: any,\n    combinedEventsInProgress: any,\n    deactivatedHandlers: any,\n  ) {\n    const map = this.map;\n    const tr = map.transform;\n\n    if (!hasChange(combinedResult)) {\n      return this.fireEvents(combinedEventsInProgress, deactivatedHandlers);\n    }\n    const {\n      panDelta,\n      zoomDelta,\n      bearingDelta,\n      pitchDelta,\n      pinchAround,\n    } = combinedResult;\n    let { around } = combinedResult;\n\n    if (pinchAround !== undefined) {\n      around = pinchAround;\n    }\n\n    // stop any ongoing camera animations (easeTo, flyTo)\n    map.stop(true);\n\n    around = around || map.transform.centerPoint;\n    const loc = tr.pointLocation(panDelta ? around.sub(panDelta) : around);\n    if (bearingDelta) {\n      tr.bearing += bearingDelta;\n    }\n    if (pitchDelta) {\n      tr.pitch += pitchDelta;\n    }\n    if (zoomDelta) {\n      tr.zoom += zoomDelta;\n    }\n    tr.setLocationAtPoint(loc, around);\n\n    this.map.update();\n    if (!combinedResult.noInertia) {\n      this.inertia.record(combinedResult);\n    }\n    this.fireEvents(combinedEventsInProgress, deactivatedHandlers);\n  }\n\n  private fireEvents(\n    newEventsInProgress: { [key: string]: any },\n    deactivatedHandlers: { [key: string]: any },\n  ) {\n    const wasMoving = isMoving(this.eventsInProgress);\n    const nowMoving = isMoving(newEventsInProgress);\n\n    const startEvents: { [key: string]: any } = {};\n\n    for (const eventName in newEventsInProgress) {\n      if (newEventsInProgress[eventName]) {\n        const { originalEvent } = newEventsInProgress[eventName];\n        if (!this.eventsInProgress[eventName]) {\n          startEvents[`${eventName}start`] = originalEvent;\n        }\n\n        this.eventsInProgress[eventName] = newEventsInProgress[eventName];\n      }\n    }\n\n    // fire start events only after this.eventsInProgress has been updated\n    if (!wasMoving && nowMoving) {\n      this.fireEvent('movestart', nowMoving.originalEvent);\n    }\n\n    for (const name in startEvents) {\n      if (startEvents[name]) {\n        this.fireEvent(name, startEvents[name]);\n      }\n    }\n\n    if (newEventsInProgress.rotate) {\n      this.bearingChanged = true;\n    }\n\n    if (nowMoving) {\n      this.fireEvent('move', nowMoving.originalEvent);\n    }\n\n    for (const eventName in newEventsInProgress) {\n      if (newEventsInProgress[eventName]) {\n        const { originalEvent } = newEventsInProgress[eventName];\n        this.fireEvent(eventName, originalEvent);\n      }\n    }\n\n    const endEvents: { [key: string]: any } = {};\n\n    let originalEndEvent;\n    for (const eventName in this.eventsInProgress) {\n      if (this.eventsInProgress[eventName]) {\n        const { handlerName, originalEvent } = this.eventsInProgress[eventName];\n        if (!this.handlersById[handlerName].isActive()) {\n          delete this.eventsInProgress[eventName];\n          originalEndEvent = deactivatedHandlers[handlerName] || originalEvent;\n          endEvents[`${eventName}end`] = originalEndEvent;\n        }\n      }\n    }\n\n    for (const name in endEvents) {\n      if (endEvents[name]) {\n        this.fireEvent(name, endEvents[name]);\n      }\n    }\n\n    const stillMoving = isMoving(this.eventsInProgress);\n    if ((wasMoving || nowMoving) && !stillMoving) {\n      this.updatingCamera = true;\n      const inertialEase = this.inertia.onMoveEnd(\n        this.map.dragPan.inertiaOptions,\n      );\n\n      const shouldSnapToNorth = (bearing: number) =>\n        bearing !== 0 &&\n        -this.bearingSnap < bearing &&\n        bearing < this.bearingSnap;\n\n      if (inertialEase) {\n        if (shouldSnapToNorth(inertialEase.bearing || this.map.getBearing())) {\n          inertialEase.bearing = 0;\n        }\n        this.map.easeTo(inertialEase, { originalEvent: originalEndEvent });\n      } else {\n        this.map.emit(\n          'moveend',\n          new Event('moveend', { originalEvent: originalEndEvent }),\n        );\n        if (shouldSnapToNorth(this.map.getBearing())) {\n          this.map.resetNorth();\n        }\n      }\n      this.bearingChanged = false;\n      this.updatingCamera = false;\n    }\n  }\n\n  private fireEvent(type: string, e: any) {\n    this.map.emit(type, new Event(type, e ? { originalEvent: e } : {}));\n  }\n}\n\nexport default HandlerManager;\n"]},"metadata":{},"sourceType":"module"}