{"ast":null,"code":"import _defineProperty from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/manolo/sds-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { FunctionExt } from '../../util';\nimport { grid } from '../../layout/grid';\nimport { Node } from '../../model/node';\nimport { Model } from '../../model/model';\nimport { View } from '../../view/view';\nimport { Graph } from '../../graph/graph';\nimport { Dnd } from '../dnd';\nexport var Stencil = /*#__PURE__*/function (_View) {\n  _inherits(Stencil, _View);\n\n  var _super = _createSuper(Stencil);\n\n  function Stencil(options) {\n    var _this;\n\n    _classCallCheck(this, Stencil);\n\n    _this = _super.call(this);\n    _this.graphs = {};\n    _this.$groups = {};\n    _this.options = Object.assign(Object.assign({}, Stencil.defaultOptions), options);\n    _this.dnd = new Dnd(_this.options);\n    _this.onSearch = FunctionExt.debounce(_this.onSearch, 200);\n    _this.container = document.createElement('div');\n    _this.$container = _this.$(_this.container).addClass(_this.prefixClassName(ClassNames.base)).attr('data-not-found-text', _this.options.notFoundText || 'No matches found');\n    _this.options.collapsable = options.collapsable && options.groups && options.groups.some(function (group) {\n      return group.collapsable !== false;\n    });\n\n    if (_this.options.collapsable) {\n      _this.$container.addClass('collapsable');\n\n      var collapsed = options.groups && options.groups.every(function (group) {\n        return group.collapsed || group.collapsable === false;\n      });\n\n      if (collapsed) {\n        _this.$container.addClass('collapsed');\n      }\n    }\n\n    _this.$('<div/>').addClass(_this.prefixClassName(ClassNames.title)).html(_this.options.title).appendTo(_this.$container);\n\n    if (options.search) {\n      _this.$container.addClass('searchable').append(_this.renderSearch());\n    }\n\n    _this.$content = _this.$('<div/>').addClass(_this.prefixClassName(ClassNames.content)).appendTo(_this.$container);\n    var globalGraphOptions = options.stencilGraphOptions || {};\n\n    if (options.groups && options.groups.length) {\n      options.groups.forEach(function (group) {\n        var $group = _this.$('<div/>').addClass(_this.prefixClassName(ClassNames.group)).attr('data-name', group.name);\n\n        if (group.collapsable == null && options.collapsable || group.collapsable !== false) {\n          $group.addClass('collapsable');\n        }\n\n        $group.toggleClass('collapsed', group.collapsed === true);\n\n        var $title = _this.$('<h3/>').addClass(_this.prefixClassName(ClassNames.groupTitle)).html(group.title || group.name);\n\n        var $content = _this.$('<div/>').addClass(_this.prefixClassName(ClassNames.groupContent));\n\n        var graphOptionsInGroup = group.graphOptions;\n        var graph = new Graph(Object.assign(Object.assign(Object.assign({}, globalGraphOptions), graphOptionsInGroup), {\n          container: document.createElement('div'),\n          model: globalGraphOptions.model || new Model(),\n          width: group.graphWidth || options.stencilGraphWidth,\n          height: group.graphHeight || options.stencilGraphHeight,\n          interacting: false,\n          preventDefaultBlankAction: false\n        }));\n        $content.append(graph.container);\n        $group.append($title, $content).appendTo(_this.$content);\n        _this.$groups[group.name] = $group;\n        _this.graphs[group.name] = graph;\n      });\n    } else {\n      var graph = new Graph(Object.assign(Object.assign({}, globalGraphOptions), {\n        container: document.createElement('div'),\n        model: globalGraphOptions.model || new Model(),\n        width: options.stencilGraphWidth,\n        height: options.stencilGraphHeight,\n        interacting: false,\n        preventDefaultBlankAction: false\n      }));\n\n      _this.$content.append(graph.container);\n\n      _this.graphs[Private.defaultGroupName] = graph;\n    }\n\n    _this.startListening();\n\n    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));\n  }\n\n  _createClass(Stencil, [{\n    key: \"targetScroller\",\n    get: function get() {\n      var target = this.options.target;\n      return Graph.isGraph(target) ? target.scroller.widget : target;\n    }\n  }, {\n    key: \"targetGraph\",\n    get: function get() {\n      var target = this.options.target;\n      return Graph.isGraph(target) ? target : target.graph;\n    }\n  }, {\n    key: \"targetModel\",\n    get: function get() {\n      return this.targetGraph.model;\n    }\n  }, {\n    key: \"renderSearch\",\n    value: function renderSearch() {\n      return this.$('<div/>').addClass(this.prefixClassName(ClassNames.search)).append(this.$('<input/>').attr({\n        type: 'search',\n        placeholder: this.options.placeholder || 'Search'\n      }).addClass(this.prefixClassName(ClassNames.searchText)));\n    }\n  }, {\n    key: \"startListening\",\n    value: function startListening() {\n      var _this$delegateEvents,\n          _this2 = this;\n\n      var title = this.prefixClassName(ClassNames.title);\n      var searchText = this.prefixClassName(ClassNames.searchText);\n      var groupTitle = this.prefixClassName(ClassNames.groupTitle);\n      this.delegateEvents((_this$delegateEvents = {}, _defineProperty(_this$delegateEvents, \"click .\".concat(title), 'onTitleClick'), _defineProperty(_this$delegateEvents, \"touchstart .\".concat(title), 'onTitleClick'), _defineProperty(_this$delegateEvents, \"click .\".concat(groupTitle), 'onGroupTitleClick'), _defineProperty(_this$delegateEvents, \"touchstart .\".concat(groupTitle), 'onGroupTitleClick'), _defineProperty(_this$delegateEvents, \"input .\".concat(searchText), 'onSearch'), _defineProperty(_this$delegateEvents, \"focusin .\".concat(searchText), 'onSearchFocusIn'), _defineProperty(_this$delegateEvents, \"focusout .\".concat(searchText), 'onSearchFocusOut'), _this$delegateEvents));\n      Object.keys(this.graphs).forEach(function (groupName) {\n        var graph = _this2.graphs[groupName];\n        graph.on('cell:mousedown', _this2.onDragStart, _this2);\n      });\n    }\n  }, {\n    key: \"stopListening\",\n    value: function stopListening() {\n      var _this3 = this;\n\n      this.undelegateEvents();\n      Object.keys(this.graphs).forEach(function (groupName) {\n        var graph = _this3.graphs[groupName];\n        graph.off('cell:mousedown', _this3.onDragStart, _this3);\n      });\n    }\n  }, {\n    key: \"load\",\n    value: function load(data, groupName) {\n      var _this4 = this;\n\n      if (Array.isArray(data)) {\n        this.loadGroup(data, groupName);\n      } else if (this.options.groups) {\n        Object.keys(this.options.groups).forEach(function (groupName) {\n          if (data[groupName]) {\n            _this4.loadGroup(data[groupName], groupName);\n          }\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"loadGroup\",\n    value: function loadGroup(cells, groupName) {\n      var model = this.getModel(groupName);\n\n      if (model) {\n        var nodes = cells.map(function (cell) {\n          return Node.isNode(cell) ? cell : Node.create(cell);\n        });\n        model.resetCells(nodes);\n      }\n\n      var group = this.getGroup(groupName);\n      var height = this.options.stencilGraphHeight;\n\n      if (group && group.graphHeight != null) {\n        height = group.graphHeight;\n      }\n\n      var layout = group && group.layout || this.options.layout;\n\n      if (layout && model) {\n        FunctionExt.call(layout, this, model, group);\n      }\n\n      if (!height) {\n        var graph = this.getGraph(groupName);\n        graph.fitToContent({\n          minWidth: graph.options.width,\n          gridHeight: 1,\n          padding: group && group.graphPadding || this.options.stencilGraphPadding || 10\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"onDragStart\",\n    value: function onDragStart(args) {\n      var e = args.e,\n          node = args.node;\n      this.dnd.start(node, e);\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(keyword, _filter) {\n      var _this5 = this;\n\n      var found = Object.keys(this.graphs).reduce(function (memo, groupName) {\n        var graph = _this5.graphs[groupName];\n        var name = groupName === Private.defaultGroupName ? null : groupName;\n        var items = graph.model.getNodes().filter(function (cell) {\n          var matched = false;\n\n          if (typeof _filter === 'function') {\n            matched = FunctionExt.call(_filter, _this5, cell, keyword, name, _this5);\n          } else if (typeof _filter === 'boolean') {\n            matched = _filter;\n          } else {\n            matched = _this5.isCellMatched(cell, keyword, _filter, keyword.toLowerCase() !== keyword);\n          }\n\n          var view = graph.renderer.findViewByCell(cell);\n\n          if (view) {\n            view.$(view.container).toggleClass('unmatched', !matched);\n          }\n\n          return matched;\n        });\n        var found = items.length > 0;\n        var options = _this5.options;\n        var model = new Model();\n        model.resetCells(items);\n\n        if (options.layout) {\n          FunctionExt.call(options.layout, _this5, model, _this5.getGroup(groupName));\n        }\n\n        if (_this5.$groups[groupName]) {\n          _this5.$groups[groupName].toggleClass('unmatched', !found);\n        }\n\n        graph.fitToContent({\n          gridWidth: 1,\n          gridHeight: 1,\n          padding: options.stencilGraphPadding || 10\n        });\n        return memo || found;\n      }, false);\n      this.$container.toggleClass('not-found', !found);\n    }\n  }, {\n    key: \"isCellMatched\",\n    value: function isCellMatched(cell, keyword, filters, ignoreCase) {\n      if (keyword && filters) {\n        return Object.keys(filters).some(function (shape) {\n          if (shape === '*' || cell.shape === shape) {\n            var filter = filters[shape];\n\n            if (typeof filter === 'boolean') {\n              return filter;\n            }\n\n            var paths = Array.isArray(filter) ? filter : [filter];\n            return paths.some(function (path) {\n              var val = cell.getPropByPath(path);\n\n              if (val != null) {\n                val = \"\".concat(val);\n\n                if (!ignoreCase) {\n                  val = val.toLowerCase();\n                }\n\n                return val.indexOf(keyword) >= 0;\n              }\n\n              return false;\n            });\n          }\n\n          return false;\n        });\n      }\n\n      return true;\n    }\n  }, {\n    key: \"onSearch\",\n    value: function onSearch(evt) {\n      this.filter(evt.target.value, this.options.search);\n    }\n  }, {\n    key: \"onSearchFocusIn\",\n    value: function onSearchFocusIn() {\n      this.$container.addClass('is-focused');\n    }\n  }, {\n    key: \"onSearchFocusOut\",\n    value: function onSearchFocusOut() {\n      this.$container.removeClass('is-focused');\n    }\n  }, {\n    key: \"onTitleClick\",\n    value: function onTitleClick() {\n      if (this.options.collapsable) {\n        this.$container.toggleClass('collapsed');\n\n        if (this.$container.hasClass('collapsed')) {\n          this.collapseGroups();\n        } else {\n          this.expandGroups();\n        }\n      }\n    }\n  }, {\n    key: \"onGroupTitleClick\",\n    value: function onGroupTitleClick(evt) {\n      var _this6 = this;\n\n      var $group = this.$(evt.target).closest(\".\".concat(this.prefixClassName(ClassNames.group)));\n      this.toggleGroup($group.attr('data-name') || '');\n      var allCollapsed = Object.keys(this.$groups).every(function (name) {\n        var group = _this6.getGroup(name);\n\n        var $group = _this6.$groups[name];\n        return group && group.collapsable === false || $group.hasClass('collapsed');\n      });\n      this.$container.toggleClass('collapsed', allCollapsed);\n    }\n  }, {\n    key: \"getModel\",\n    value: function getModel(groupName) {\n      var graph = this.getGraph(groupName);\n      return graph ? graph.model : null;\n    }\n  }, {\n    key: \"getGraph\",\n    value: function getGraph(groupName) {\n      return this.graphs[groupName || Private.defaultGroupName];\n    }\n  }, {\n    key: \"getGroup\",\n    value: function getGroup(groupName) {\n      var groups = this.options.groups;\n\n      if (groupName != null && groups && groups.length) {\n        return groups.find(function (group) {\n          return group.name === groupName;\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"toggleGroup\",\n    value: function toggleGroup(groupName) {\n      if (this.isGroupCollapsed(groupName)) {\n        this.expandGroup(groupName);\n      } else {\n        this.collapseGroup(groupName);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"collapseGroup\",\n    value: function collapseGroup(groupName) {\n      if (this.isGroupCollapsable(groupName)) {\n        var $group = this.$groups[groupName];\n\n        if ($group && !this.isGroupCollapsed(groupName)) {\n          this.trigger('group:collapse', {\n            name: groupName\n          });\n          $group.addClass('collapsed');\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"expandGroup\",\n    value: function expandGroup(groupName) {\n      if (this.isGroupCollapsable(groupName)) {\n        var $group = this.$groups[groupName];\n\n        if ($group && this.isGroupCollapsed(groupName)) {\n          this.trigger('group:expand', {\n            name: groupName\n          });\n          $group.removeClass('collapsed');\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isGroupCollapsable\",\n    value: function isGroupCollapsable(groupName) {\n      var $group = this.$groups[groupName];\n      return $group.hasClass('collapsable');\n    }\n  }, {\n    key: \"isGroupCollapsed\",\n    value: function isGroupCollapsed(groupName) {\n      var $group = this.$groups[groupName];\n      return $group && $group.hasClass('collapsed');\n    }\n  }, {\n    key: \"collapseGroups\",\n    value: function collapseGroups() {\n      var _this7 = this;\n\n      Object.keys(this.$groups).forEach(function (groupName) {\n        return _this7.collapseGroup(groupName);\n      });\n      return this;\n    }\n  }, {\n    key: \"expandGroups\",\n    value: function expandGroups() {\n      var _this8 = this;\n\n      Object.keys(this.$groups).forEach(function (groupName) {\n        return _this8.expandGroup(groupName);\n      });\n      return this;\n    }\n  }, {\n    key: \"resizeGroup\",\n    value: function resizeGroup(groupName, size) {\n      var graph = this.graphs[groupName];\n\n      if (graph) {\n        graph.resize(size.width, size.height);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"onRemove\",\n    value: function onRemove() {\n      var _this9 = this;\n\n      Object.keys(this.graphs).forEach(function (groupName) {\n        var graph = _this9.graphs[groupName];\n        graph.view.remove();\n        delete _this9.graphs[groupName];\n      });\n      this.dnd.remove();\n      this.stopListening();\n      this.undelegateDocumentEvents();\n    }\n  }]);\n\n  return Stencil;\n}(View);\n\n(function (Stencil) {\n  Stencil.defaultOptions = Object.assign({\n    stencilGraphWidth: 200,\n    stencilGraphHeight: 800,\n    title: 'Stencil',\n    collapsable: false,\n    placeholder: 'Search',\n    notFoundText: 'No matches found',\n    layout: function layout(model, group) {\n      var options = {\n        columnWidth: this.options.stencilGraphWidth / 2 - 10,\n        columns: 2,\n        rowHeight: 80,\n        resizeToFit: false,\n        dx: 10,\n        dy: 10\n      };\n      grid(model, Object.assign(Object.assign(Object.assign({}, options), this.options.layoutOptions), group ? group.layoutOptions : {}));\n    }\n  }, Dnd.defaults);\n})(Stencil || (Stencil = {}));\n\nvar ClassNames;\n\n(function (ClassNames) {\n  ClassNames.base = 'widget-stencil';\n  ClassNames.title = \"\".concat(ClassNames.base, \"-title\");\n  ClassNames.search = \"\".concat(ClassNames.base, \"-search\");\n  ClassNames.searchText = \"\".concat(ClassNames.search, \"-text\");\n  ClassNames.content = \"\".concat(ClassNames.base, \"-content\");\n  ClassNames.group = \"\".concat(ClassNames.base, \"-group\");\n  ClassNames.groupTitle = \"\".concat(ClassNames.group, \"-title\");\n  ClassNames.groupContent = \"\".concat(ClassNames.group, \"-content\");\n})(ClassNames || (ClassNames = {}));\n\nvar Private;\n\n(function (Private) {\n  Private.defaultGroupName = '__default__';\n})(Private || (Private = {}));","map":{"version":3,"sources":["../../../src/addon/stencil/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { FunctionExt } from '../../util';\nimport { grid } from '../../layout/grid';\nimport { Node } from '../../model/node';\nimport { Model } from '../../model/model';\nimport { View } from '../../view/view';\nimport { Graph } from '../../graph/graph';\nimport { Dnd } from '../dnd';\nexport class Stencil extends View {\n    constructor(options) {\n        super();\n        this.graphs = {};\n        this.$groups = {};\n        this.options = Object.assign(Object.assign({}, Stencil.defaultOptions), options);\n        this.dnd = new Dnd(this.options);\n        this.onSearch = FunctionExt.debounce(this.onSearch, 200);\n        this.container = document.createElement('div');\n        this.$container = this.$(this.container)\n            .addClass(this.prefixClassName(ClassNames.base))\n            .attr('data-not-found-text', this.options.notFoundText || 'No matches found');\n        this.options.collapsable =\n            options.collapsable &&\n                options.groups &&\n                options.groups.some((group) => group.collapsable !== false);\n        if (this.options.collapsable) {\n            this.$container.addClass('collapsable');\n            const collapsed = options.groups &&\n                options.groups.every((group) => group.collapsed || group.collapsable === false);\n            if (collapsed) {\n                this.$container.addClass('collapsed');\n            }\n        }\n        this.$('<div/>')\n            .addClass(this.prefixClassName(ClassNames.title))\n            .html(this.options.title)\n            .appendTo(this.$container);\n        if (options.search) {\n            this.$container.addClass('searchable').append(this.renderSearch());\n        }\n        this.$content = this.$('<div/>')\n            .addClass(this.prefixClassName(ClassNames.content))\n            .appendTo(this.$container);\n        const globalGraphOptions = options.stencilGraphOptions || {};\n        if (options.groups && options.groups.length) {\n            options.groups.forEach((group) => {\n                const $group = this.$('<div/>')\n                    .addClass(this.prefixClassName(ClassNames.group))\n                    .attr('data-name', group.name);\n                if ((group.collapsable == null && options.collapsable) ||\n                    group.collapsable !== false) {\n                    $group.addClass('collapsable');\n                }\n                $group.toggleClass('collapsed', group.collapsed === true);\n                const $title = this.$('<h3/>')\n                    .addClass(this.prefixClassName(ClassNames.groupTitle))\n                    .html(group.title || group.name);\n                const $content = this.$('<div/>').addClass(this.prefixClassName(ClassNames.groupContent));\n                const graphOptionsInGroup = group.graphOptions;\n                const graph = new Graph(Object.assign(Object.assign(Object.assign({}, globalGraphOptions), graphOptionsInGroup), { container: document.createElement('div'), model: globalGraphOptions.model || new Model(), width: group.graphWidth || options.stencilGraphWidth, height: group.graphHeight || options.stencilGraphHeight, interacting: false, preventDefaultBlankAction: false }));\n                $content.append(graph.container);\n                $group.append($title, $content).appendTo(this.$content);\n                this.$groups[group.name] = $group;\n                this.graphs[group.name] = graph;\n            });\n        }\n        else {\n            const graph = new Graph(Object.assign(Object.assign({}, globalGraphOptions), { container: document.createElement('div'), model: globalGraphOptions.model || new Model(), width: options.stencilGraphWidth, height: options.stencilGraphHeight, interacting: false, preventDefaultBlankAction: false }));\n            this.$content.append(graph.container);\n            this.graphs[Private.defaultGroupName] = graph;\n        }\n        this.startListening();\n        return this;\n    }\n    get targetScroller() {\n        const target = this.options.target;\n        return Graph.isGraph(target) ? target.scroller.widget : target;\n    }\n    get targetGraph() {\n        const target = this.options.target;\n        return Graph.isGraph(target) ? target : target.graph;\n    }\n    get targetModel() {\n        return this.targetGraph.model;\n    }\n    renderSearch() {\n        return this.$('<div/>')\n            .addClass(this.prefixClassName(ClassNames.search))\n            .append(this.$('<input/>')\n            .attr({\n            type: 'search',\n            placeholder: this.options.placeholder || 'Search',\n        })\n            .addClass(this.prefixClassName(ClassNames.searchText)));\n    }\n    startListening() {\n        const title = this.prefixClassName(ClassNames.title);\n        const searchText = this.prefixClassName(ClassNames.searchText);\n        const groupTitle = this.prefixClassName(ClassNames.groupTitle);\n        this.delegateEvents({\n            [`click .${title}`]: 'onTitleClick',\n            [`touchstart .${title}`]: 'onTitleClick',\n            [`click .${groupTitle}`]: 'onGroupTitleClick',\n            [`touchstart .${groupTitle}`]: 'onGroupTitleClick',\n            [`input .${searchText}`]: 'onSearch',\n            [`focusin .${searchText}`]: 'onSearchFocusIn',\n            [`focusout .${searchText}`]: 'onSearchFocusOut',\n        });\n        Object.keys(this.graphs).forEach((groupName) => {\n            const graph = this.graphs[groupName];\n            graph.on('cell:mousedown', this.onDragStart, this);\n        });\n    }\n    stopListening() {\n        this.undelegateEvents();\n        Object.keys(this.graphs).forEach((groupName) => {\n            const graph = this.graphs[groupName];\n            graph.off('cell:mousedown', this.onDragStart, this);\n        });\n    }\n    load(data, groupName) {\n        if (Array.isArray(data)) {\n            this.loadGroup(data, groupName);\n        }\n        else if (this.options.groups) {\n            Object.keys(this.options.groups).forEach((groupName) => {\n                if (data[groupName]) {\n                    this.loadGroup(data[groupName], groupName);\n                }\n            });\n        }\n        return this;\n    }\n    loadGroup(cells, groupName) {\n        const model = this.getModel(groupName);\n        if (model) {\n            const nodes = cells.map((cell) => Node.isNode(cell) ? cell : Node.create(cell));\n            model.resetCells(nodes);\n        }\n        const group = this.getGroup(groupName);\n        let height = this.options.stencilGraphHeight;\n        if (group && group.graphHeight != null) {\n            height = group.graphHeight;\n        }\n        const layout = (group && group.layout) || this.options.layout;\n        if (layout && model) {\n            FunctionExt.call(layout, this, model, group);\n        }\n        if (!height) {\n            const graph = this.getGraph(groupName);\n            graph.fitToContent({\n                minWidth: graph.options.width,\n                gridHeight: 1,\n                padding: (group && group.graphPadding) ||\n                    this.options.stencilGraphPadding ||\n                    10,\n            });\n        }\n        return this;\n    }\n    onDragStart(args) {\n        const { e, node } = args;\n        this.dnd.start(node, e);\n    }\n    filter(keyword, filter) {\n        const found = Object.keys(this.graphs).reduce((memo, groupName) => {\n            const graph = this.graphs[groupName];\n            const name = groupName === Private.defaultGroupName ? null : groupName;\n            const items = graph.model.getNodes().filter((cell) => {\n                let matched = false;\n                if (typeof filter === 'function') {\n                    matched = FunctionExt.call(filter, this, cell, keyword, name, this);\n                }\n                else if (typeof filter === 'boolean') {\n                    matched = filter;\n                }\n                else {\n                    matched = this.isCellMatched(cell, keyword, filter, keyword.toLowerCase() !== keyword);\n                }\n                const view = graph.renderer.findViewByCell(cell);\n                if (view) {\n                    view.$(view.container).toggleClass('unmatched', !matched);\n                }\n                return matched;\n            });\n            const found = items.length > 0;\n            const options = this.options;\n            const model = new Model();\n            model.resetCells(items);\n            if (options.layout) {\n                FunctionExt.call(options.layout, this, model, this.getGroup(groupName));\n            }\n            if (this.$groups[groupName]) {\n                this.$groups[groupName].toggleClass('unmatched', !found);\n            }\n            graph.fitToContent({\n                gridWidth: 1,\n                gridHeight: 1,\n                padding: options.stencilGraphPadding || 10,\n            });\n            return memo || found;\n        }, false);\n        this.$container.toggleClass('not-found', !found);\n    }\n    isCellMatched(cell, keyword, filters, ignoreCase) {\n        if (keyword && filters) {\n            return Object.keys(filters).some((shape) => {\n                if (shape === '*' || cell.shape === shape) {\n                    const filter = filters[shape];\n                    if (typeof filter === 'boolean') {\n                        return filter;\n                    }\n                    const paths = Array.isArray(filter) ? filter : [filter];\n                    return paths.some((path) => {\n                        let val = cell.getPropByPath(path);\n                        if (val != null) {\n                            val = `${val}`;\n                            if (!ignoreCase) {\n                                val = val.toLowerCase();\n                            }\n                            return val.indexOf(keyword) >= 0;\n                        }\n                        return false;\n                    });\n                }\n                return false;\n            });\n        }\n        return true;\n    }\n    onSearch(evt) {\n        this.filter(evt.target.value, this.options.search);\n    }\n    onSearchFocusIn() {\n        this.$container.addClass('is-focused');\n    }\n    onSearchFocusOut() {\n        this.$container.removeClass('is-focused');\n    }\n    onTitleClick() {\n        if (this.options.collapsable) {\n            this.$container.toggleClass('collapsed');\n            if (this.$container.hasClass('collapsed')) {\n                this.collapseGroups();\n            }\n            else {\n                this.expandGroups();\n            }\n        }\n    }\n    onGroupTitleClick(evt) {\n        const $group = this.$(evt.target).closest(`.${this.prefixClassName(ClassNames.group)}`);\n        this.toggleGroup($group.attr('data-name') || '');\n        const allCollapsed = Object.keys(this.$groups).every((name) => {\n            const group = this.getGroup(name);\n            const $group = this.$groups[name];\n            return ((group && group.collapsable === false) || $group.hasClass('collapsed'));\n        });\n        this.$container.toggleClass('collapsed', allCollapsed);\n    }\n    getModel(groupName) {\n        const graph = this.getGraph(groupName);\n        return graph ? graph.model : null;\n    }\n    getGraph(groupName) {\n        return this.graphs[groupName || Private.defaultGroupName];\n    }\n    getGroup(groupName) {\n        const groups = this.options.groups;\n        if (groupName != null && groups && groups.length) {\n            return groups.find((group) => group.name === groupName);\n        }\n        return null;\n    }\n    toggleGroup(groupName) {\n        if (this.isGroupCollapsed(groupName)) {\n            this.expandGroup(groupName);\n        }\n        else {\n            this.collapseGroup(groupName);\n        }\n        return this;\n    }\n    collapseGroup(groupName) {\n        if (this.isGroupCollapsable(groupName)) {\n            const $group = this.$groups[groupName];\n            if ($group && !this.isGroupCollapsed(groupName)) {\n                this.trigger('group:collapse', { name: groupName });\n                $group.addClass('collapsed');\n            }\n        }\n        return this;\n    }\n    expandGroup(groupName) {\n        if (this.isGroupCollapsable(groupName)) {\n            const $group = this.$groups[groupName];\n            if ($group && this.isGroupCollapsed(groupName)) {\n                this.trigger('group:expand', { name: groupName });\n                $group.removeClass('collapsed');\n            }\n        }\n        return this;\n    }\n    isGroupCollapsable(groupName) {\n        const $group = this.$groups[groupName];\n        return $group.hasClass('collapsable');\n    }\n    isGroupCollapsed(groupName) {\n        const $group = this.$groups[groupName];\n        return $group && $group.hasClass('collapsed');\n    }\n    collapseGroups() {\n        Object.keys(this.$groups).forEach((groupName) => this.collapseGroup(groupName));\n        return this;\n    }\n    expandGroups() {\n        Object.keys(this.$groups).forEach((groupName) => this.expandGroup(groupName));\n        return this;\n    }\n    resizeGroup(groupName, size) {\n        const graph = this.graphs[groupName];\n        if (graph) {\n            graph.resize(size.width, size.height);\n        }\n        return this;\n    }\n    onRemove() {\n        Object.keys(this.graphs).forEach((groupName) => {\n            const graph = this.graphs[groupName];\n            graph.view.remove();\n            delete this.graphs[groupName];\n        });\n        this.dnd.remove();\n        this.stopListening();\n        this.undelegateDocumentEvents();\n    }\n}\n(function (Stencil) {\n    Stencil.defaultOptions = Object.assign({ stencilGraphWidth: 200, stencilGraphHeight: 800, title: 'Stencil', collapsable: false, placeholder: 'Search', notFoundText: 'No matches found', layout(model, group) {\n            const options = {\n                columnWidth: this.options.stencilGraphWidth / 2 - 10,\n                columns: 2,\n                rowHeight: 80,\n                resizeToFit: false,\n                dx: 10,\n                dy: 10,\n            };\n            grid(model, Object.assign(Object.assign(Object.assign({}, options), this.options.layoutOptions), (group ? group.layoutOptions : {})));\n        } }, Dnd.defaults);\n})(Stencil || (Stencil = {}));\nvar ClassNames;\n(function (ClassNames) {\n    ClassNames.base = 'widget-stencil';\n    ClassNames.title = `${ClassNames.base}-title`;\n    ClassNames.search = `${ClassNames.base}-search`;\n    ClassNames.searchText = `${ClassNames.search}-text`;\n    ClassNames.content = `${ClassNames.base}-content`;\n    ClassNames.group = `${ClassNames.base}-group`;\n    ClassNames.groupTitle = `${ClassNames.group}-title`;\n    ClassNames.groupContent = `${ClassNames.group}-content`;\n})(ClassNames || (ClassNames = {}));\nvar Private;\n(function (Private) {\n    Private.defaultGroupName = '__default__';\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}