{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGroupCommands } from '../constant';\nimport { XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE } from '../../constants';\nexport var NsInitGroup;\n\n(function (NsInitGroup) {\n  /** Command: 用于注册named factory */\n  NsInitGroup.command = XFlowGroupCommands.INIT_GROUP;\n  /** hookName */\n\n  NsInitGroup.hookKey = 'initGroup';\n})(NsInitGroup || (NsInitGroup = {}));\n\nlet InitGroupCommand =\n/** 创建节点命令 */\nclass InitGroupCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      const result = yield hooks.initGroup.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          graphData,\n          commandService\n        } = handlerArgs;\n        const graph = yield ctx.getX6Graph();\n        const {\n          nodes\n        } = graphData;\n        const groupMap = {};\n        nodes.forEach(node => {\n          const {\n            id,\n            group\n          } = node;\n\n          if (group) {\n            if (groupMap[group]) {\n              groupMap[group].push(id);\n            } else {\n              groupMap[group] = [id];\n            }\n          }\n        });\n        Object.keys(groupMap).forEach(groupId => __awaiter(this, void 0, void 0, function* () {\n          const groupNode = graph.getCellById(groupId);\n          const groupData = groupNode.getData();\n          const childrenIds = groupMap[groupId] || []; // 更新props\n\n          groupNode.prop('isGroup', true);\n          groupNode.setData(Object.assign(Object.assign({}, groupData), {\n            isGroup: true,\n            groupChildren: childrenIds\n          }));\n          childrenIds.forEach(childId => {\n            const child = graph.getCellById(childId);\n            groupNode.embed(child);\n          }); // Group置于底层\n\n          groupNode.toBack(); // collapse\n\n          const {\n            isCollapsed,\n            groupCollapsedSize\n          } = groupData;\n\n          if (isCollapsed) {\n            const collapsedSize = handlerArgs.collapsedSize || groupCollapsedSize || XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE;\n            yield commandService.executeCommand(XFlowGroupCommands.COLLAPSE_GROUP.id, {\n              collapsedSize,\n              isCollapsed: true,\n              nodeId: groupNode.id\n            });\n          }\n        }));\n        return {};\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], InitGroupCommand.prototype, \"contextProvider\", void 0);\n\nInitGroupCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsInitGroup.command.id\n  }\n})\n/** 创建节点命令 */\n], InitGroupCommand);\nexport { InitGroupCommand };","map":{"version":3,"sources":["../../../src/command-contributions/group/group-init.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGroupCommands } from '../constant';\nimport { XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE } from '../../constants';\nexport var NsInitGroup;\n(function (NsInitGroup) {\n    /** Command: 用于注册named factory */\n    NsInitGroup.command = XFlowGroupCommands.INIT_GROUP;\n    /** hookName */\n    NsInitGroup.hookKey = 'initGroup';\n})(NsInitGroup || (NsInitGroup = {}));\nlet InitGroupCommand = \n/** 创建节点命令 */\nclass InitGroupCommand {\n    constructor() {\n        /** 执行Cmd */\n        this.execute = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            const { args, hooks: runtimeHook } = ctx.getArgs();\n            const hooks = ctx.getHooks();\n            const result = yield hooks.initGroup.call(args, (handlerArgs) => __awaiter(this, void 0, void 0, function* () {\n                const { graphData, commandService } = handlerArgs;\n                const graph = yield ctx.getX6Graph();\n                const { nodes } = graphData;\n                const groupMap = {};\n                nodes.forEach(node => {\n                    const { id, group } = node;\n                    if (group) {\n                        if (groupMap[group]) {\n                            groupMap[group].push(id);\n                        }\n                        else {\n                            groupMap[group] = [id];\n                        }\n                    }\n                });\n                Object.keys(groupMap).forEach((groupId) => __awaiter(this, void 0, void 0, function* () {\n                    const groupNode = graph.getCellById(groupId);\n                    const groupData = groupNode.getData();\n                    const childrenIds = groupMap[groupId] || [];\n                    // 更新props\n                    groupNode.prop('isGroup', true);\n                    groupNode.setData(Object.assign(Object.assign({}, groupData), { isGroup: true, groupChildren: childrenIds }));\n                    childrenIds.forEach(childId => {\n                        const child = graph.getCellById(childId);\n                        groupNode.embed(child);\n                    });\n                    // Group置于底层\n                    groupNode.toBack();\n                    // collapse\n                    const { isCollapsed, groupCollapsedSize } = groupData;\n                    if (isCollapsed) {\n                        const collapsedSize = handlerArgs.collapsedSize || groupCollapsedSize || XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE;\n                        yield commandService.executeCommand(XFlowGroupCommands.COLLAPSE_GROUP.id, {\n                            collapsedSize,\n                            isCollapsed: true,\n                            nodeId: groupNode.id,\n                        });\n                    }\n                }));\n                return {};\n            }), runtimeHook);\n            ctx.setResult(result);\n            return this;\n        });\n        /** undo cmd */\n        this.undo = () => __awaiter(this, void 0, void 0, function* () {\n            const ctx = this.contextProvider();\n            if (this.isUndoable()) {\n                ctx.undo();\n            }\n            return this;\n        });\n        /** redo cmd */\n        this.redo = () => __awaiter(this, void 0, void 0, function* () {\n            if (!this.isUndoable()) {\n                yield this.execute();\n            }\n            return this;\n        });\n    }\n    isUndoable() {\n        const ctx = this.contextProvider();\n        return ctx.isUndoable();\n    }\n};\n__decorate([\n    inject(ICommandContextProvider),\n    __metadata(\"design:type\", Object)\n], InitGroupCommand.prototype, \"contextProvider\", void 0);\nInitGroupCommand = __decorate([\n    injectable({\n        token: { token: ICommandHandler, named: NsInitGroup.command.id },\n    })\n    /** 创建节点命令 */\n], InitGroupCommand);\nexport { InitGroupCommand };\n//# sourceMappingURL=group-init.js.map"]},"metadata":{},"sourceType":"module"}