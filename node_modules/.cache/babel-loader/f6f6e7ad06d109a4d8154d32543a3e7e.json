{"ast":null,"code":"import { offset } from './util';\n\nfunction alignLine(line, type) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var start = line.start,\n      end = line.end;\n  var a;\n  var b;\n  var direction;\n  var coordinate;\n\n  switch (type) {\n    case 'left':\n      coordinate = 'x';\n      a = end;\n      b = start;\n      direction = -1;\n      break;\n\n    case 'right':\n      coordinate = 'x';\n      a = start;\n      b = end;\n      direction = 1;\n      break;\n\n    case 'top':\n      coordinate = 'y';\n      a = end;\n      b = start;\n      direction = -1;\n      break;\n\n    case 'bottom':\n      coordinate = 'y';\n      a = start;\n      b = end;\n      direction = 1;\n      break;\n\n    default:\n      return;\n  }\n\n  if (start[coordinate] < end[coordinate]) {\n    a[coordinate] = b[coordinate];\n  } else {\n    b[coordinate] = a[coordinate];\n  }\n\n  if (Number.isFinite(offset)) {\n    a[coordinate] += direction * offset;\n    b[coordinate] += direction * offset;\n  }\n}\n/**\n * Places the connection point at the edge's endpoint.\n */\n\n\nexport var anchor = function anchor(line, view, magnet, options) {\n  var alignOffset = options.alignOffset,\n      align = options.align;\n\n  if (align) {\n    alignLine(line, align, alignOffset);\n  }\n\n  return offset(line.end, line.start, options.offset);\n};","map":{"version":3,"sources":["../../../src/registry/connection-point/anchor.ts"],"names":[],"mappings":"AAEA,SAAS,MAAT,QAAuB,QAAvB;;AASA,SAAS,SAAT,CAAmB,IAAnB,EAA+B,IAA/B,EAAsD;AAAA,MAAV,MAAU,uEAAD,CAAC;AACpD,MAAQ,KAAR,GAAuB,IAAvB,CAAQ,KAAR;AAAA,MAAe,GAAf,GAAuB,IAAvB,CAAe,GAAf;AACA,MAAI,CAAJ;AACA,MAAI,CAAJ;AACA,MAAI,SAAJ;AACA,MAAI,UAAJ;;AAEA,UAAQ,IAAR;AACE,SAAK,MAAL;AACE,MAAA,UAAU,GAAG,GAAb;AACA,MAAA,CAAC,GAAG,GAAJ;AACA,MAAA,CAAC,GAAG,KAAJ;AACA,MAAA,SAAS,GAAG,CAAC,CAAb;AACA;;AACF,SAAK,OAAL;AACE,MAAA,UAAU,GAAG,GAAb;AACA,MAAA,CAAC,GAAG,KAAJ;AACA,MAAA,CAAC,GAAG,GAAJ;AACA,MAAA,SAAS,GAAG,CAAZ;AACA;;AACF,SAAK,KAAL;AACE,MAAA,UAAU,GAAG,GAAb;AACA,MAAA,CAAC,GAAG,GAAJ;AACA,MAAA,CAAC,GAAG,KAAJ;AACA,MAAA,SAAS,GAAG,CAAC,CAAb;AACA;;AACF,SAAK,QAAL;AACE,MAAA,UAAU,GAAG,GAAb;AACA,MAAA,CAAC,GAAG,KAAJ;AACA,MAAA,CAAC,GAAG,GAAJ;AACA,MAAA,SAAS,GAAG,CAAZ;AACA;;AACF;AACE;AA1BJ;;AA6BA,MAAI,KAAK,CAAC,UAAD,CAAL,GAAoB,GAAG,CAAC,UAAD,CAA3B,EAAyC;AACvC,IAAA,CAAC,CAAC,UAAD,CAAD,GAAgB,CAAC,CAAC,UAAD,CAAjB;AACD,GAFD,MAEO;AACL,IAAA,CAAC,CAAC,UAAD,CAAD,GAAgB,CAAC,CAAC,UAAD,CAAjB;AACD;;AAED,MAAI,MAAM,CAAC,QAAP,CAAgB,MAAhB,CAAJ,EAA6B;AAC3B,IAAA,CAAC,CAAC,UAAD,CAAD,IAAiB,SAAS,GAAG,MAA7B;AACA,IAAA,CAAC,CAAC,UAAD,CAAD,IAAiB,SAAS,GAAG,MAA7B;AACD;AACF;AAED;;AAEG;;;AACH,OAAO,IAAM,MAAM,GAA8C,SAApD,MAAoD,CAC/D,IAD+D,EAE/D,IAF+D,EAG/D,MAH+D,EAI/D,OAJ+D,EAIxD;AAEP,MAAQ,WAAR,GAA+B,OAA/B,CAAQ,WAAR;AAAA,MAAqB,KAArB,GAA+B,OAA/B,CAAqB,KAArB;;AACA,MAAI,KAAJ,EAAW;AACT,IAAA,SAAS,CAAC,IAAD,EAAO,KAAP,EAAc,WAAd,CAAT;AACD;;AACD,SAAO,MAAM,CAAC,IAAI,CAAC,GAAN,EAAW,IAAI,CAAC,KAAhB,EAAuB,OAAO,CAAC,MAA/B,CAAb;AACD,CAXM","sourceRoot":"","sourcesContent":["import { offset } from './util';\nfunction alignLine(line, type, offset = 0) {\n    const { start, end } = line;\n    let a;\n    let b;\n    let direction;\n    let coordinate;\n    switch (type) {\n        case 'left':\n            coordinate = 'x';\n            a = end;\n            b = start;\n            direction = -1;\n            break;\n        case 'right':\n            coordinate = 'x';\n            a = start;\n            b = end;\n            direction = 1;\n            break;\n        case 'top':\n            coordinate = 'y';\n            a = end;\n            b = start;\n            direction = -1;\n            break;\n        case 'bottom':\n            coordinate = 'y';\n            a = start;\n            b = end;\n            direction = 1;\n            break;\n        default:\n            return;\n    }\n    if (start[coordinate] < end[coordinate]) {\n        a[coordinate] = b[coordinate];\n    }\n    else {\n        b[coordinate] = a[coordinate];\n    }\n    if (Number.isFinite(offset)) {\n        a[coordinate] += direction * offset;\n        b[coordinate] += direction * offset;\n    }\n}\n/**\n * Places the connection point at the edge's endpoint.\n */\nexport const anchor = function (line, view, magnet, options) {\n    const { alignOffset, align } = options;\n    if (align) {\n        alignLine(line, align, alignOffset);\n    }\n    return offset(line.end, line.start, options.offset);\n};\n//# sourceMappingURL=anchor.js.map"]},"metadata":{},"sourceType":"module"}